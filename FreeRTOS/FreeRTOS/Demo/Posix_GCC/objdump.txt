
build/posix_demo:     file format elf64-x86-64


Disassembly of section .init:

0000000000002000 <_init>:
    2000:	f3 0f 1e fa          	endbr64 
    2004:	48 83 ec 08          	sub    $0x8,%rsp
    2008:	48 8b 05 d9 ef 02 00 	mov    0x2efd9(%rip),%rax        # 30fe8 <__gmon_start__>
    200f:	48 85 c0             	test   %rax,%rax
    2012:	74 02                	je     2016 <_init+0x16>
    2014:	ff d0                	callq  *%rax
    2016:	48 83 c4 08          	add    $0x8,%rsp
    201a:	c3                   	retq   

Disassembly of section .plt:

0000000000002020 <.plt>:
    2020:	ff 35 e2 ed 02 00    	pushq  0x2ede2(%rip)        # 30e08 <_GLOBAL_OFFSET_TABLE_+0x8>
    2026:	f2 ff 25 e3 ed 02 00 	bnd jmpq *0x2ede3(%rip)        # 30e10 <_GLOBAL_OFFSET_TABLE_+0x10>
    202d:	0f 1f 00             	nopl   (%rax)
    2030:	f3 0f 1e fa          	endbr64 
    2034:	68 00 00 00 00       	pushq  $0x0
    2039:	f2 e9 e1 ff ff ff    	bnd jmpq 2020 <.plt>
    203f:	90                   	nop
    2040:	f3 0f 1e fa          	endbr64 
    2044:	68 01 00 00 00       	pushq  $0x1
    2049:	f2 e9 d1 ff ff ff    	bnd jmpq 2020 <.plt>
    204f:	90                   	nop
    2050:	f3 0f 1e fa          	endbr64 
    2054:	68 02 00 00 00       	pushq  $0x2
    2059:	f2 e9 c1 ff ff ff    	bnd jmpq 2020 <.plt>
    205f:	90                   	nop
    2060:	f3 0f 1e fa          	endbr64 
    2064:	68 03 00 00 00       	pushq  $0x3
    2069:	f2 e9 b1 ff ff ff    	bnd jmpq 2020 <.plt>
    206f:	90                   	nop
    2070:	f3 0f 1e fa          	endbr64 
    2074:	68 04 00 00 00       	pushq  $0x4
    2079:	f2 e9 a1 ff ff ff    	bnd jmpq 2020 <.plt>
    207f:	90                   	nop
    2080:	f3 0f 1e fa          	endbr64 
    2084:	68 05 00 00 00       	pushq  $0x5
    2089:	f2 e9 91 ff ff ff    	bnd jmpq 2020 <.plt>
    208f:	90                   	nop
    2090:	f3 0f 1e fa          	endbr64 
    2094:	68 06 00 00 00       	pushq  $0x6
    2099:	f2 e9 81 ff ff ff    	bnd jmpq 2020 <.plt>
    209f:	90                   	nop
    20a0:	f3 0f 1e fa          	endbr64 
    20a4:	68 07 00 00 00       	pushq  $0x7
    20a9:	f2 e9 71 ff ff ff    	bnd jmpq 2020 <.plt>
    20af:	90                   	nop
    20b0:	f3 0f 1e fa          	endbr64 
    20b4:	68 08 00 00 00       	pushq  $0x8
    20b9:	f2 e9 61 ff ff ff    	bnd jmpq 2020 <.plt>
    20bf:	90                   	nop
    20c0:	f3 0f 1e fa          	endbr64 
    20c4:	68 09 00 00 00       	pushq  $0x9
    20c9:	f2 e9 51 ff ff ff    	bnd jmpq 2020 <.plt>
    20cf:	90                   	nop
    20d0:	f3 0f 1e fa          	endbr64 
    20d4:	68 0a 00 00 00       	pushq  $0xa
    20d9:	f2 e9 41 ff ff ff    	bnd jmpq 2020 <.plt>
    20df:	90                   	nop
    20e0:	f3 0f 1e fa          	endbr64 
    20e4:	68 0b 00 00 00       	pushq  $0xb
    20e9:	f2 e9 31 ff ff ff    	bnd jmpq 2020 <.plt>
    20ef:	90                   	nop
    20f0:	f3 0f 1e fa          	endbr64 
    20f4:	68 0c 00 00 00       	pushq  $0xc
    20f9:	f2 e9 21 ff ff ff    	bnd jmpq 2020 <.plt>
    20ff:	90                   	nop
    2100:	f3 0f 1e fa          	endbr64 
    2104:	68 0d 00 00 00       	pushq  $0xd
    2109:	f2 e9 11 ff ff ff    	bnd jmpq 2020 <.plt>
    210f:	90                   	nop
    2110:	f3 0f 1e fa          	endbr64 
    2114:	68 0e 00 00 00       	pushq  $0xe
    2119:	f2 e9 01 ff ff ff    	bnd jmpq 2020 <.plt>
    211f:	90                   	nop
    2120:	f3 0f 1e fa          	endbr64 
    2124:	68 0f 00 00 00       	pushq  $0xf
    2129:	f2 e9 f1 fe ff ff    	bnd jmpq 2020 <.plt>
    212f:	90                   	nop
    2130:	f3 0f 1e fa          	endbr64 
    2134:	68 10 00 00 00       	pushq  $0x10
    2139:	f2 e9 e1 fe ff ff    	bnd jmpq 2020 <.plt>
    213f:	90                   	nop
    2140:	f3 0f 1e fa          	endbr64 
    2144:	68 11 00 00 00       	pushq  $0x11
    2149:	f2 e9 d1 fe ff ff    	bnd jmpq 2020 <.plt>
    214f:	90                   	nop
    2150:	f3 0f 1e fa          	endbr64 
    2154:	68 12 00 00 00       	pushq  $0x12
    2159:	f2 e9 c1 fe ff ff    	bnd jmpq 2020 <.plt>
    215f:	90                   	nop
    2160:	f3 0f 1e fa          	endbr64 
    2164:	68 13 00 00 00       	pushq  $0x13
    2169:	f2 e9 b1 fe ff ff    	bnd jmpq 2020 <.plt>
    216f:	90                   	nop
    2170:	f3 0f 1e fa          	endbr64 
    2174:	68 14 00 00 00       	pushq  $0x14
    2179:	f2 e9 a1 fe ff ff    	bnd jmpq 2020 <.plt>
    217f:	90                   	nop
    2180:	f3 0f 1e fa          	endbr64 
    2184:	68 15 00 00 00       	pushq  $0x15
    2189:	f2 e9 91 fe ff ff    	bnd jmpq 2020 <.plt>
    218f:	90                   	nop
    2190:	f3 0f 1e fa          	endbr64 
    2194:	68 16 00 00 00       	pushq  $0x16
    2199:	f2 e9 81 fe ff ff    	bnd jmpq 2020 <.plt>
    219f:	90                   	nop
    21a0:	f3 0f 1e fa          	endbr64 
    21a4:	68 17 00 00 00       	pushq  $0x17
    21a9:	f2 e9 71 fe ff ff    	bnd jmpq 2020 <.plt>
    21af:	90                   	nop
    21b0:	f3 0f 1e fa          	endbr64 
    21b4:	68 18 00 00 00       	pushq  $0x18
    21b9:	f2 e9 61 fe ff ff    	bnd jmpq 2020 <.plt>
    21bf:	90                   	nop
    21c0:	f3 0f 1e fa          	endbr64 
    21c4:	68 19 00 00 00       	pushq  $0x19
    21c9:	f2 e9 51 fe ff ff    	bnd jmpq 2020 <.plt>
    21cf:	90                   	nop
    21d0:	f3 0f 1e fa          	endbr64 
    21d4:	68 1a 00 00 00       	pushq  $0x1a
    21d9:	f2 e9 41 fe ff ff    	bnd jmpq 2020 <.plt>
    21df:	90                   	nop
    21e0:	f3 0f 1e fa          	endbr64 
    21e4:	68 1b 00 00 00       	pushq  $0x1b
    21e9:	f2 e9 31 fe ff ff    	bnd jmpq 2020 <.plt>
    21ef:	90                   	nop
    21f0:	f3 0f 1e fa          	endbr64 
    21f4:	68 1c 00 00 00       	pushq  $0x1c
    21f9:	f2 e9 21 fe ff ff    	bnd jmpq 2020 <.plt>
    21ff:	90                   	nop
    2200:	f3 0f 1e fa          	endbr64 
    2204:	68 1d 00 00 00       	pushq  $0x1d
    2209:	f2 e9 11 fe ff ff    	bnd jmpq 2020 <.plt>
    220f:	90                   	nop
    2210:	f3 0f 1e fa          	endbr64 
    2214:	68 1e 00 00 00       	pushq  $0x1e
    2219:	f2 e9 01 fe ff ff    	bnd jmpq 2020 <.plt>
    221f:	90                   	nop
    2220:	f3 0f 1e fa          	endbr64 
    2224:	68 1f 00 00 00       	pushq  $0x1f
    2229:	f2 e9 f1 fd ff ff    	bnd jmpq 2020 <.plt>
    222f:	90                   	nop
    2230:	f3 0f 1e fa          	endbr64 
    2234:	68 20 00 00 00       	pushq  $0x20
    2239:	f2 e9 e1 fd ff ff    	bnd jmpq 2020 <.plt>
    223f:	90                   	nop
    2240:	f3 0f 1e fa          	endbr64 
    2244:	68 21 00 00 00       	pushq  $0x21
    2249:	f2 e9 d1 fd ff ff    	bnd jmpq 2020 <.plt>
    224f:	90                   	nop
    2250:	f3 0f 1e fa          	endbr64 
    2254:	68 22 00 00 00       	pushq  $0x22
    2259:	f2 e9 c1 fd ff ff    	bnd jmpq 2020 <.plt>
    225f:	90                   	nop
    2260:	f3 0f 1e fa          	endbr64 
    2264:	68 23 00 00 00       	pushq  $0x23
    2269:	f2 e9 b1 fd ff ff    	bnd jmpq 2020 <.plt>
    226f:	90                   	nop
    2270:	f3 0f 1e fa          	endbr64 
    2274:	68 24 00 00 00       	pushq  $0x24
    2279:	f2 e9 a1 fd ff ff    	bnd jmpq 2020 <.plt>
    227f:	90                   	nop
    2280:	f3 0f 1e fa          	endbr64 
    2284:	68 25 00 00 00       	pushq  $0x25
    2289:	f2 e9 91 fd ff ff    	bnd jmpq 2020 <.plt>
    228f:	90                   	nop
    2290:	f3 0f 1e fa          	endbr64 
    2294:	68 26 00 00 00       	pushq  $0x26
    2299:	f2 e9 81 fd ff ff    	bnd jmpq 2020 <.plt>
    229f:	90                   	nop
    22a0:	f3 0f 1e fa          	endbr64 
    22a4:	68 27 00 00 00       	pushq  $0x27
    22a9:	f2 e9 71 fd ff ff    	bnd jmpq 2020 <.plt>
    22af:	90                   	nop
    22b0:	f3 0f 1e fa          	endbr64 
    22b4:	68 28 00 00 00       	pushq  $0x28
    22b9:	f2 e9 61 fd ff ff    	bnd jmpq 2020 <.plt>
    22bf:	90                   	nop
    22c0:	f3 0f 1e fa          	endbr64 
    22c4:	68 29 00 00 00       	pushq  $0x29
    22c9:	f2 e9 51 fd ff ff    	bnd jmpq 2020 <.plt>
    22cf:	90                   	nop
    22d0:	f3 0f 1e fa          	endbr64 
    22d4:	68 2a 00 00 00       	pushq  $0x2a
    22d9:	f2 e9 41 fd ff ff    	bnd jmpq 2020 <.plt>
    22df:	90                   	nop
    22e0:	f3 0f 1e fa          	endbr64 
    22e4:	68 2b 00 00 00       	pushq  $0x2b
    22e9:	f2 e9 31 fd ff ff    	bnd jmpq 2020 <.plt>
    22ef:	90                   	nop
    22f0:	f3 0f 1e fa          	endbr64 
    22f4:	68 2c 00 00 00       	pushq  $0x2c
    22f9:	f2 e9 21 fd ff ff    	bnd jmpq 2020 <.plt>
    22ff:	90                   	nop
    2300:	f3 0f 1e fa          	endbr64 
    2304:	68 2d 00 00 00       	pushq  $0x2d
    2309:	f2 e9 11 fd ff ff    	bnd jmpq 2020 <.plt>
    230f:	90                   	nop
    2310:	f3 0f 1e fa          	endbr64 
    2314:	68 2e 00 00 00       	pushq  $0x2e
    2319:	f2 e9 01 fd ff ff    	bnd jmpq 2020 <.plt>
    231f:	90                   	nop
    2320:	f3 0f 1e fa          	endbr64 
    2324:	68 2f 00 00 00       	pushq  $0x2f
    2329:	f2 e9 f1 fc ff ff    	bnd jmpq 2020 <.plt>
    232f:	90                   	nop
    2330:	f3 0f 1e fa          	endbr64 
    2334:	68 30 00 00 00       	pushq  $0x30
    2339:	f2 e9 e1 fc ff ff    	bnd jmpq 2020 <.plt>
    233f:	90                   	nop
    2340:	f3 0f 1e fa          	endbr64 
    2344:	68 31 00 00 00       	pushq  $0x31
    2349:	f2 e9 d1 fc ff ff    	bnd jmpq 2020 <.plt>
    234f:	90                   	nop
    2350:	f3 0f 1e fa          	endbr64 
    2354:	68 32 00 00 00       	pushq  $0x32
    2359:	f2 e9 c1 fc ff ff    	bnd jmpq 2020 <.plt>
    235f:	90                   	nop
    2360:	f3 0f 1e fa          	endbr64 
    2364:	68 33 00 00 00       	pushq  $0x33
    2369:	f2 e9 b1 fc ff ff    	bnd jmpq 2020 <.plt>
    236f:	90                   	nop
    2370:	f3 0f 1e fa          	endbr64 
    2374:	68 34 00 00 00       	pushq  $0x34
    2379:	f2 e9 a1 fc ff ff    	bnd jmpq 2020 <.plt>
    237f:	90                   	nop
    2380:	f3 0f 1e fa          	endbr64 
    2384:	68 35 00 00 00       	pushq  $0x35
    2389:	f2 e9 91 fc ff ff    	bnd jmpq 2020 <.plt>
    238f:	90                   	nop
    2390:	f3 0f 1e fa          	endbr64 
    2394:	68 36 00 00 00       	pushq  $0x36
    2399:	f2 e9 81 fc ff ff    	bnd jmpq 2020 <.plt>
    239f:	90                   	nop
    23a0:	f3 0f 1e fa          	endbr64 
    23a4:	68 37 00 00 00       	pushq  $0x37
    23a9:	f2 e9 71 fc ff ff    	bnd jmpq 2020 <.plt>
    23af:	90                   	nop

Disassembly of section .plt.got:

00000000000023b0 <__cxa_finalize@plt>:
    23b0:	f3 0f 1e fa          	endbr64 
    23b4:	f2 ff 25 3d ec 02 00 	bnd jmpq *0x2ec3d(%rip)        # 30ff8 <__cxa_finalize@GLIBC_2.2.5>
    23bb:	0f 1f 44 00 00       	nopl   0x0(%rax,%rax,1)

Disassembly of section .plt.sec:

00000000000023c0 <free@plt>:
    23c0:	f3 0f 1e fa          	endbr64 
    23c4:	f2 ff 25 4d ea 02 00 	bnd jmpq *0x2ea4d(%rip)        # 30e18 <free@GLIBC_2.2.5>
    23cb:	0f 1f 44 00 00       	nopl   0x0(%rax,%rax,1)

00000000000023d0 <pthread_create@plt>:
    23d0:	f3 0f 1e fa          	endbr64 
    23d4:	f2 ff 25 45 ea 02 00 	bnd jmpq *0x2ea45(%rip)        # 30e20 <pthread_create@GLIBC_2.2.5>
    23db:	0f 1f 44 00 00       	nopl   0x0(%rax,%rax,1)

00000000000023e0 <pthread_sigmask@plt>:
    23e0:	f3 0f 1e fa          	endbr64 
    23e4:	f2 ff 25 3d ea 02 00 	bnd jmpq *0x2ea3d(%rip)        # 30e28 <pthread_sigmask@GLIBC_2.2.5>
    23eb:	0f 1f 44 00 00       	nopl   0x0(%rax,%rax,1)

00000000000023f0 <abort@plt>:
    23f0:	f3 0f 1e fa          	endbr64 
    23f4:	f2 ff 25 35 ea 02 00 	bnd jmpq *0x2ea35(%rip)        # 30e30 <abort@GLIBC_2.2.5>
    23fb:	0f 1f 44 00 00       	nopl   0x0(%rax,%rax,1)

0000000000002400 <__errno_location@plt>:
    2400:	f3 0f 1e fa          	endbr64 
    2404:	f2 ff 25 2d ea 02 00 	bnd jmpq *0x2ea2d(%rip)        # 30e38 <__errno_location@GLIBC_2.2.5>
    240b:	0f 1f 44 00 00       	nopl   0x0(%rax,%rax,1)

0000000000002410 <strncmp@plt>:
    2410:	f3 0f 1e fa          	endbr64 
    2414:	f2 ff 25 25 ea 02 00 	bnd jmpq *0x2ea25(%rip)        # 30e40 <strncmp@GLIBC_2.2.5>
    241b:	0f 1f 44 00 00       	nopl   0x0(%rax,%rax,1)

0000000000002420 <puts@plt>:
    2420:	f3 0f 1e fa          	endbr64 
    2424:	f2 ff 25 1d ea 02 00 	bnd jmpq *0x2ea1d(%rip)        # 30e48 <puts@GLIBC_2.2.5>
    242b:	0f 1f 44 00 00       	nopl   0x0(%rax,%rax,1)

0000000000002430 <pthread_cancel@plt>:
    2430:	f3 0f 1e fa          	endbr64 
    2434:	f2 ff 25 15 ea 02 00 	bnd jmpq *0x2ea15(%rip)        # 30e50 <pthread_cancel@GLIBC_2.2.5>
    243b:	0f 1f 44 00 00       	nopl   0x0(%rax,%rax,1)

0000000000002440 <pthread_attr_setstack@plt>:
    2440:	f3 0f 1e fa          	endbr64 
    2444:	f2 ff 25 0d ea 02 00 	bnd jmpq *0x2ea0d(%rip)        # 30e58 <pthread_attr_setstack@GLIBC_2.2.5>
    244b:	0f 1f 44 00 00       	nopl   0x0(%rax,%rax,1)

0000000000002450 <sigaction@plt>:
    2450:	f3 0f 1e fa          	endbr64 
    2454:	f2 ff 25 05 ea 02 00 	bnd jmpq *0x2ea05(%rip)        # 30e60 <sigaction@GLIBC_2.2.5>
    245b:	0f 1f 44 00 00       	nopl   0x0(%rax,%rax,1)

0000000000002460 <clock_gettime@plt>:
    2460:	f3 0f 1e fa          	endbr64 
    2464:	f2 ff 25 fd e9 02 00 	bnd jmpq *0x2e9fd(%rip)        # 30e68 <clock_gettime@GLIBC_2.17>
    246b:	0f 1f 44 00 00       	nopl   0x0(%rax,%rax,1)

0000000000002470 <pthread_kill@plt>:
    2470:	f3 0f 1e fa          	endbr64 
    2474:	f2 ff 25 f5 e9 02 00 	bnd jmpq *0x2e9f5(%rip)        # 30e70 <pthread_kill@GLIBC_2.2.5>
    247b:	0f 1f 44 00 00       	nopl   0x0(%rax,%rax,1)

0000000000002480 <pthread_cond_wait@plt>:
    2480:	f3 0f 1e fa          	endbr64 
    2484:	f2 ff 25 ed e9 02 00 	bnd jmpq *0x2e9ed(%rip)        # 30e78 <pthread_cond_wait@GLIBC_2.3.2>
    248b:	0f 1f 44 00 00       	nopl   0x0(%rax,%rax,1)

0000000000002490 <pthread_once@plt>:
    2490:	f3 0f 1e fa          	endbr64 
    2494:	f2 ff 25 e5 e9 02 00 	bnd jmpq *0x2e9e5(%rip)        # 30e80 <pthread_once@GLIBC_2.2.5>
    249b:	0f 1f 44 00 00       	nopl   0x0(%rax,%rax,1)

00000000000024a0 <fclose@plt>:
    24a0:	f3 0f 1e fa          	endbr64 
    24a4:	f2 ff 25 dd e9 02 00 	bnd jmpq *0x2e9dd(%rip)        # 30e88 <fclose@GLIBC_2.2.5>
    24ab:	0f 1f 44 00 00       	nopl   0x0(%rax,%rax,1)

00000000000024b0 <strlen@plt>:
    24b0:	f3 0f 1e fa          	endbr64 
    24b4:	f2 ff 25 d5 e9 02 00 	bnd jmpq *0x2e9d5(%rip)        # 30e90 <strlen@GLIBC_2.2.5>
    24bb:	0f 1f 44 00 00       	nopl   0x0(%rax,%rax,1)

00000000000024c0 <chdir@plt>:
    24c0:	f3 0f 1e fa          	endbr64 
    24c4:	f2 ff 25 cd e9 02 00 	bnd jmpq *0x2e9cd(%rip)        # 30e98 <chdir@GLIBC_2.2.5>
    24cb:	0f 1f 44 00 00       	nopl   0x0(%rax,%rax,1)

00000000000024d0 <__stack_chk_fail@plt>:
    24d0:	f3 0f 1e fa          	endbr64 
    24d4:	f2 ff 25 c5 e9 02 00 	bnd jmpq *0x2e9c5(%rip)        # 30ea0 <__stack_chk_fail@GLIBC_2.4>
    24db:	0f 1f 44 00 00       	nopl   0x0(%rax,%rax,1)

00000000000024e0 <printf@plt>:
    24e0:	f3 0f 1e fa          	endbr64 
    24e4:	f2 ff 25 bd e9 02 00 	bnd jmpq *0x2e9bd(%rip)        # 30ea8 <printf@GLIBC_2.2.5>
    24eb:	0f 1f 44 00 00       	nopl   0x0(%rax,%rax,1)

00000000000024f0 <pthread_mutex_destroy@plt>:
    24f0:	f3 0f 1e fa          	endbr64 
    24f4:	f2 ff 25 b5 e9 02 00 	bnd jmpq *0x2e9b5(%rip)        # 30eb0 <pthread_mutex_destroy@GLIBC_2.2.5>
    24fb:	0f 1f 44 00 00       	nopl   0x0(%rax,%rax,1)

0000000000002500 <nanosleep@plt>:
    2500:	f3 0f 1e fa          	endbr64 
    2504:	f2 ff 25 ad e9 02 00 	bnd jmpq *0x2e9ad(%rip)        # 30eb8 <nanosleep@GLIBC_2.2.5>
    250b:	0f 1f 44 00 00       	nopl   0x0(%rax,%rax,1)

0000000000002510 <memset@plt>:
    2510:	f3 0f 1e fa          	endbr64 
    2514:	f2 ff 25 a5 e9 02 00 	bnd jmpq *0x2e9a5(%rip)        # 30ec0 <memset@GLIBC_2.2.5>
    251b:	0f 1f 44 00 00       	nopl   0x0(%rax,%rax,1)

0000000000002520 <memcmp@plt>:
    2520:	f3 0f 1e fa          	endbr64 
    2524:	f2 ff 25 9d e9 02 00 	bnd jmpq *0x2e99d(%rip)        # 30ec8 <memcmp@GLIBC_2.2.5>
    252b:	0f 1f 44 00 00       	nopl   0x0(%rax,%rax,1)

0000000000002530 <pthread_attr_init@plt>:
    2530:	f3 0f 1e fa          	endbr64 
    2534:	f2 ff 25 95 e9 02 00 	bnd jmpq *0x2e995(%rip)        # 30ed0 <pthread_attr_init@GLIBC_2.2.5>
    253b:	0f 1f 44 00 00       	nopl   0x0(%rax,%rax,1)

0000000000002540 <pthread_cond_signal@plt>:
    2540:	f3 0f 1e fa          	endbr64 
    2544:	f2 ff 25 8d e9 02 00 	bnd jmpq *0x2e98d(%rip)        # 30ed8 <pthread_cond_signal@GLIBC_2.3.2>
    254b:	0f 1f 44 00 00       	nopl   0x0(%rax,%rax,1)

0000000000002550 <strcmp@plt>:
    2550:	f3 0f 1e fa          	endbr64 
    2554:	f2 ff 25 85 e9 02 00 	bnd jmpq *0x2e985(%rip)        # 30ee0 <strcmp@GLIBC_2.2.5>
    255b:	0f 1f 44 00 00       	nopl   0x0(%rax,%rax,1)

0000000000002560 <getchar@plt>:
    2560:	f3 0f 1e fa          	endbr64 
    2564:	f2 ff 25 7d e9 02 00 	bnd jmpq *0x2e97d(%rip)        # 30ee8 <getchar@GLIBC_2.2.5>
    256b:	0f 1f 44 00 00       	nopl   0x0(%rax,%rax,1)

0000000000002570 <signal@plt>:
    2570:	f3 0f 1e fa          	endbr64 
    2574:	f2 ff 25 75 e9 02 00 	bnd jmpq *0x2e975(%rip)        # 30ef0 <signal@GLIBC_2.2.5>
    257b:	0f 1f 44 00 00       	nopl   0x0(%rax,%rax,1)

0000000000002580 <fprintf@plt>:
    2580:	f3 0f 1e fa          	endbr64 
    2584:	f2 ff 25 6d e9 02 00 	bnd jmpq *0x2e96d(%rip)        # 30ef8 <fprintf@GLIBC_2.2.5>
    258b:	0f 1f 44 00 00       	nopl   0x0(%rax,%rax,1)

0000000000002590 <sigemptyset@plt>:
    2590:	f3 0f 1e fa          	endbr64 
    2594:	f2 ff 25 65 e9 02 00 	bnd jmpq *0x2e965(%rip)        # 30f00 <sigemptyset@GLIBC_2.2.5>
    259b:	0f 1f 44 00 00       	nopl   0x0(%rax,%rax,1)

00000000000025a0 <sigfillset@plt>:
    25a0:	f3 0f 1e fa          	endbr64 
    25a4:	f2 ff 25 5d e9 02 00 	bnd jmpq *0x2e95d(%rip)        # 30f08 <sigfillset@GLIBC_2.2.5>
    25ab:	0f 1f 44 00 00       	nopl   0x0(%rax,%rax,1)

00000000000025b0 <memcpy@plt>:
    25b0:	f3 0f 1e fa          	endbr64 
    25b4:	f2 ff 25 55 e9 02 00 	bnd jmpq *0x2e955(%rip)        # 30f10 <memcpy@GLIBC_2.14>
    25bb:	0f 1f 44 00 00       	nopl   0x0(%rax,%rax,1)

00000000000025c0 <pthread_cond_init@plt>:
    25c0:	f3 0f 1e fa          	endbr64 
    25c4:	f2 ff 25 4d e9 02 00 	bnd jmpq *0x2e94d(%rip)        # 30f18 <pthread_cond_init@GLIBC_2.3.2>
    25cb:	0f 1f 44 00 00       	nopl   0x0(%rax,%rax,1)

00000000000025d0 <pthread_mutex_unlock@plt>:
    25d0:	f3 0f 1e fa          	endbr64 
    25d4:	f2 ff 25 45 e9 02 00 	bnd jmpq *0x2e945(%rip)        # 30f20 <pthread_mutex_unlock@GLIBC_2.2.5>
    25db:	0f 1f 44 00 00       	nopl   0x0(%rax,%rax,1)

00000000000025e0 <pthread_exit@plt>:
    25e0:	f3 0f 1e fa          	endbr64 
    25e4:	f2 ff 25 3d e9 02 00 	bnd jmpq *0x2e93d(%rip)        # 30f28 <pthread_exit@GLIBC_2.2.5>
    25eb:	0f 1f 44 00 00       	nopl   0x0(%rax,%rax,1)

00000000000025f0 <malloc@plt>:
    25f0:	f3 0f 1e fa          	endbr64 
    25f4:	f2 ff 25 35 e9 02 00 	bnd jmpq *0x2e935(%rip)        # 30f30 <malloc@GLIBC_2.2.5>
    25fb:	0f 1f 44 00 00       	nopl   0x0(%rax,%rax,1)

0000000000002600 <vprintf@plt>:
    2600:	f3 0f 1e fa          	endbr64 
    2604:	f2 ff 25 2d e9 02 00 	bnd jmpq *0x2e92d(%rip)        # 30f38 <vprintf@GLIBC_2.2.5>
    260b:	0f 1f 44 00 00       	nopl   0x0(%rax,%rax,1)

0000000000002610 <setitimer@plt>:
    2610:	f3 0f 1e fa          	endbr64 
    2614:	f2 ff 25 25 e9 02 00 	bnd jmpq *0x2e925(%rip)        # 30f40 <setitimer@GLIBC_2.2.5>
    261b:	0f 1f 44 00 00       	nopl   0x0(%rax,%rax,1)

0000000000002620 <pthread_self@plt>:
    2620:	f3 0f 1e fa          	endbr64 
    2624:	f2 ff 25 1d e9 02 00 	bnd jmpq *0x2e91d(%rip)        # 30f48 <pthread_self@GLIBC_2.2.5>
    262b:	0f 1f 44 00 00       	nopl   0x0(%rax,%rax,1)

0000000000002630 <pthread_cond_timedwait@plt>:
    2630:	f3 0f 1e fa          	endbr64 
    2634:	f2 ff 25 15 e9 02 00 	bnd jmpq *0x2e915(%rip)        # 30f50 <pthread_cond_timedwait@GLIBC_2.3.2>
    263b:	0f 1f 44 00 00       	nopl   0x0(%rax,%rax,1)

0000000000002640 <pthread_cond_destroy@plt>:
    2640:	f3 0f 1e fa          	endbr64 
    2644:	f2 ff 25 0d e9 02 00 	bnd jmpq *0x2e90d(%rip)        # 30f58 <pthread_cond_destroy@GLIBC_2.3.2>
    264b:	0f 1f 44 00 00       	nopl   0x0(%rax,%rax,1)

0000000000002650 <times@plt>:
    2650:	f3 0f 1e fa          	endbr64 
    2654:	f2 ff 25 05 e9 02 00 	bnd jmpq *0x2e905(%rip)        # 30f60 <times@GLIBC_2.2.5>
    265b:	0f 1f 44 00 00       	nopl   0x0(%rax,%rax,1)

0000000000002660 <fopen@plt>:
    2660:	f3 0f 1e fa          	endbr64 
    2664:	f2 ff 25 fd e8 02 00 	bnd jmpq *0x2e8fd(%rip)        # 30f68 <fopen@GLIBC_2.2.5>
    266b:	0f 1f 44 00 00       	nopl   0x0(%rax,%rax,1)

0000000000002670 <sigdelset@plt>:
    2670:	f3 0f 1e fa          	endbr64 
    2674:	f2 ff 25 f5 e8 02 00 	bnd jmpq *0x2e8f5(%rip)        # 30f70 <sigdelset@GLIBC_2.2.5>
    267b:	0f 1f 44 00 00       	nopl   0x0(%rax,%rax,1)

0000000000002680 <getitimer@plt>:
    2680:	f3 0f 1e fa          	endbr64 
    2684:	f2 ff 25 ed e8 02 00 	bnd jmpq *0x2e8ed(%rip)        # 30f78 <getitimer@GLIBC_2.2.5>
    268b:	0f 1f 44 00 00       	nopl   0x0(%rax,%rax,1)

0000000000002690 <pthread_join@plt>:
    2690:	f3 0f 1e fa          	endbr64 
    2694:	f2 ff 25 e5 e8 02 00 	bnd jmpq *0x2e8e5(%rip)        # 30f80 <pthread_join@GLIBC_2.2.5>
    269b:	0f 1f 44 00 00       	nopl   0x0(%rax,%rax,1)

00000000000026a0 <sigwait@plt>:
    26a0:	f3 0f 1e fa          	endbr64 
    26a4:	f2 ff 25 dd e8 02 00 	bnd jmpq *0x2e8dd(%rip)        # 30f88 <sigwait@GLIBC_2.2.5>
    26ab:	0f 1f 44 00 00       	nopl   0x0(%rax,%rax,1)

00000000000026b0 <sprintf@plt>:
    26b0:	f3 0f 1e fa          	endbr64 
    26b4:	f2 ff 25 d5 e8 02 00 	bnd jmpq *0x2e8d5(%rip)        # 30f90 <sprintf@GLIBC_2.2.5>
    26bb:	0f 1f 44 00 00       	nopl   0x0(%rax,%rax,1)

00000000000026c0 <exit@plt>:
    26c0:	f3 0f 1e fa          	endbr64 
    26c4:	f2 ff 25 cd e8 02 00 	bnd jmpq *0x2e8cd(%rip)        # 30f98 <exit@GLIBC_2.2.5>
    26cb:	0f 1f 44 00 00       	nopl   0x0(%rax,%rax,1)

00000000000026d0 <fwrite@plt>:
    26d0:	f3 0f 1e fa          	endbr64 
    26d4:	f2 ff 25 c5 e8 02 00 	bnd jmpq *0x2e8c5(%rip)        # 30fa0 <fwrite@GLIBC_2.2.5>
    26db:	0f 1f 44 00 00       	nopl   0x0(%rax,%rax,1)

00000000000026e0 <strerror@plt>:
    26e0:	f3 0f 1e fa          	endbr64 
    26e4:	f2 ff 25 bd e8 02 00 	bnd jmpq *0x2e8bd(%rip)        # 30fa8 <strerror@GLIBC_2.2.5>
    26eb:	0f 1f 44 00 00       	nopl   0x0(%rax,%rax,1)

00000000000026f0 <pthread_mutex_init@plt>:
    26f0:	f3 0f 1e fa          	endbr64 
    26f4:	f2 ff 25 b5 e8 02 00 	bnd jmpq *0x2e8b5(%rip)        # 30fb0 <pthread_mutex_init@GLIBC_2.2.5>
    26fb:	0f 1f 44 00 00       	nopl   0x0(%rax,%rax,1)

0000000000002700 <sigaddset@plt>:
    2700:	f3 0f 1e fa          	endbr64 
    2704:	f2 ff 25 ad e8 02 00 	bnd jmpq *0x2e8ad(%rip)        # 30fb8 <sigaddset@GLIBC_2.2.5>
    270b:	0f 1f 44 00 00       	nopl   0x0(%rax,%rax,1)

0000000000002710 <pthread_mutex_lock@plt>:
    2710:	f3 0f 1e fa          	endbr64 
    2714:	f2 ff 25 a5 e8 02 00 	bnd jmpq *0x2e8a5(%rip)        # 30fc0 <pthread_mutex_lock@GLIBC_2.2.5>
    271b:	0f 1f 44 00 00       	nopl   0x0(%rax,%rax,1)

0000000000002720 <rand@plt>:
    2720:	f3 0f 1e fa          	endbr64 
    2724:	f2 ff 25 9d e8 02 00 	bnd jmpq *0x2e89d(%rip)        # 30fc8 <rand@GLIBC_2.2.5>
    272b:	0f 1f 44 00 00       	nopl   0x0(%rax,%rax,1)

0000000000002730 <usleep@plt>:
    2730:	f3 0f 1e fa          	endbr64 
    2734:	f2 ff 25 95 e8 02 00 	bnd jmpq *0x2e895(%rip)        # 30fd0 <usleep@GLIBC_2.2.5>
    273b:	0f 1f 44 00 00       	nopl   0x0(%rax,%rax,1)

Disassembly of section .text:

0000000000002740 <_start>:
    2740:	f3 0f 1e fa          	endbr64 
    2744:	31 ed                	xor    %ebp,%ebp
    2746:	49 89 d1             	mov    %rdx,%r9
    2749:	5e                   	pop    %rsi
    274a:	48 89 e2             	mov    %rsp,%rdx
    274d:	48 83 e4 f0          	and    $0xfffffffffffffff0,%rsp
    2751:	50                   	push   %rax
    2752:	54                   	push   %rsp
    2753:	4c 8d 05 16 47 02 00 	lea    0x24716(%rip),%r8        # 26e70 <__libc_csu_fini>
    275a:	48 8d 0d 9f 46 02 00 	lea    0x2469f(%rip),%rcx        # 26e00 <__libc_csu_init>
    2761:	48 8d 3d 44 14 00 00 	lea    0x1444(%rip),%rdi        # 3bac <main>
    2768:	ff 15 72 e8 02 00    	callq  *0x2e872(%rip)        # 30fe0 <__libc_start_main@GLIBC_2.2.5>
    276e:	f4                   	hlt    
    276f:	90                   	nop

0000000000002770 <deregister_tm_clones>:
    2770:	48 8d 3d 69 e9 02 00 	lea    0x2e969(%rip),%rdi        # 310e0 <stderr@@GLIBC_2.2.5>
    2777:	48 8d 05 62 e9 02 00 	lea    0x2e962(%rip),%rax        # 310e0 <stderr@@GLIBC_2.2.5>
    277e:	48 39 f8             	cmp    %rdi,%rax
    2781:	74 15                	je     2798 <deregister_tm_clones+0x28>
    2783:	48 8b 05 4e e8 02 00 	mov    0x2e84e(%rip),%rax        # 30fd8 <_ITM_deregisterTMCloneTable>
    278a:	48 85 c0             	test   %rax,%rax
    278d:	74 09                	je     2798 <deregister_tm_clones+0x28>
    278f:	ff e0                	jmpq   *%rax
    2791:	0f 1f 80 00 00 00 00 	nopl   0x0(%rax)
    2798:	c3                   	retq   
    2799:	0f 1f 80 00 00 00 00 	nopl   0x0(%rax)

00000000000027a0 <register_tm_clones>:
    27a0:	48 8d 3d 39 e9 02 00 	lea    0x2e939(%rip),%rdi        # 310e0 <stderr@@GLIBC_2.2.5>
    27a7:	48 8d 35 32 e9 02 00 	lea    0x2e932(%rip),%rsi        # 310e0 <stderr@@GLIBC_2.2.5>
    27ae:	48 29 fe             	sub    %rdi,%rsi
    27b1:	48 89 f0             	mov    %rsi,%rax
    27b4:	48 c1 ee 3f          	shr    $0x3f,%rsi
    27b8:	48 c1 f8 03          	sar    $0x3,%rax
    27bc:	48 01 c6             	add    %rax,%rsi
    27bf:	48 d1 fe             	sar    %rsi
    27c2:	74 14                	je     27d8 <register_tm_clones+0x38>
    27c4:	48 8b 05 25 e8 02 00 	mov    0x2e825(%rip),%rax        # 30ff0 <_ITM_registerTMCloneTable>
    27cb:	48 85 c0             	test   %rax,%rax
    27ce:	74 08                	je     27d8 <register_tm_clones+0x38>
    27d0:	ff e0                	jmpq   *%rax
    27d2:	66 0f 1f 44 00 00    	nopw   0x0(%rax,%rax,1)
    27d8:	c3                   	retq   
    27d9:	0f 1f 80 00 00 00 00 	nopl   0x0(%rax)

00000000000027e0 <__do_global_dtors_aux>:
    27e0:	f3 0f 1e fa          	endbr64 
    27e4:	80 3d fd e8 02 00 00 	cmpb   $0x0,0x2e8fd(%rip)        # 310e8 <completed.8061>
    27eb:	75 2b                	jne    2818 <__do_global_dtors_aux+0x38>
    27ed:	55                   	push   %rbp
    27ee:	48 83 3d 02 e8 02 00 	cmpq   $0x0,0x2e802(%rip)        # 30ff8 <__cxa_finalize@GLIBC_2.2.5>
    27f5:	00 
    27f6:	48 89 e5             	mov    %rsp,%rbp
    27f9:	74 0c                	je     2807 <__do_global_dtors_aux+0x27>
    27fb:	48 8b 3d 06 e8 02 00 	mov    0x2e806(%rip),%rdi        # 31008 <__dso_handle>
    2802:	e8 a9 fb ff ff       	callq  23b0 <__cxa_finalize@plt>
    2807:	e8 64 ff ff ff       	callq  2770 <deregister_tm_clones>
    280c:	c6 05 d5 e8 02 00 01 	movb   $0x1,0x2e8d5(%rip)        # 310e8 <completed.8061>
    2813:	5d                   	pop    %rbp
    2814:	c3                   	retq   
    2815:	0f 1f 00             	nopl   (%rax)
    2818:	c3                   	retq   
    2819:	0f 1f 80 00 00 00 00 	nopl   0x0(%rax)

0000000000002820 <frame_dummy>:
    2820:	f3 0f 1e fa          	endbr64 
    2824:	e9 77 ff ff ff       	jmpq   27a0 <register_tm_clones>

0000000000002829 <main_full>:
    2829:	f3 0f 1e fa          	endbr64 
    282d:	55                   	push   %rbp
    282e:	48 89 e5             	mov    %rsp,%rbp
    2831:	41 b9 00 00 00 00    	mov    $0x0,%r9d
    2837:	41 b8 05 00 00 00    	mov    $0x5,%r8d
    283d:	b9 00 00 00 00       	mov    $0x0,%ecx
    2842:	ba 46 00 00 00       	mov    $0x46,%edx
    2847:	48 8d 35 c8 47 02 00 	lea    0x247c8(%rip),%rsi        # 27016 <_IO_stdin_used+0x16>
    284e:	48 8d 3d 51 01 00 00 	lea    0x151(%rip),%rdi        # 29a6 <prvCheckTask>
    2855:	e8 9d 94 00 00       	callq  bcf7 <xTaskCreate>
    285a:	e8 1c db 01 00       	callq  2037b <vStartTaskNotifyTask>
    285f:	bf 02 00 00 00       	mov    $0x2,%edi
    2864:	e8 c3 17 01 00       	callq  1402c <vStartBlockingQueueTasks>
    2869:	bf 01 00 00 00       	mov    $0x1,%edi
    286e:	e8 e7 9f 01 00       	callq  1c85a <vStartSemaphoreTasks>
    2873:	bf 01 00 00 00       	mov    $0x1,%edi
    2878:	e8 f0 78 01 00       	callq  1a16d <vStartPolledQueueTasks>
    287d:	bf 00 00 00 00       	mov    $0x0,%edi
    2882:	e8 93 55 01 00       	callq  17e1a <vStartIntegerMathTasks>
    2887:	bf 00 00 00 00       	mov    $0x0,%edi
    288c:	e8 b3 46 01 00       	callq  16f44 <vStartGenericQueueTasks>
    2891:	e8 31 7b 01 00       	callq  1a3c7 <vStartQueuePeekTasks>
    2896:	bf 00 00 00 00       	mov    $0x0,%edi
    289b:	e8 be 40 01 00       	callq  1695e <vStartMathTasks>
    28a0:	e8 c0 9a 01 00       	callq  1c365 <vStartRecursiveMutexTasks>
    28a5:	e8 80 25 01 00       	callq  14e2a <vStartCountingSemaphoreTasks>
    28aa:	e8 93 2b 01 00       	callq  15442 <vStartDynamicPriorityTasks>
    28af:	bf 00 00 00 00       	mov    $0x0,%edi
    28b4:	e8 e8 80 01 00       	callq  1a9a1 <vStartQueueOverwriteTask>
    28b9:	e8 b7 30 01 00       	callq  15975 <vStartEventGroupTasks>
    28be:	e8 dc 56 01 00       	callq  17f9f <vStartInterruptSemaphoreTasks>
    28c3:	e8 0d 1c 01 00       	callq  144d5 <vCreateBlockTimeTasks>
    28c8:	e8 f0 0a 01 00       	callq  133bd <vCreateAbortDelayTasks>
    28cd:	41 b9 00 00 00 00    	mov    $0x0,%r9d
    28d3:	41 b8 00 00 00 00    	mov    $0x0,%r8d
    28d9:	b9 00 00 00 00       	mov    $0x0,%ecx
    28de:	ba 46 00 00 00       	mov    $0x46,%edx
    28e3:	48 8d 35 32 47 02 00 	lea    0x24732(%rip),%rsi        # 2701c <_IO_stdin_used+0x1c>
    28ea:	48 8d 3d 4d 0d 00 00 	lea    0xd4d(%rip),%rdi        # 363e <prvDemoQueueSpaceFunctions>
    28f1:	e8 01 94 00 00       	callq  bcf7 <xTaskCreate>
    28f6:	41 b9 00 00 00 00    	mov    $0x0,%r9d
    28fc:	41 b8 00 00 00 00    	mov    $0x0,%r8d
    2902:	b9 00 00 00 00       	mov    $0x0,%ecx
    2907:	ba 46 00 00 00       	mov    $0x46,%edx
    290c:	48 8d 35 10 47 02 00 	lea    0x24710(%rip),%rsi        # 27023 <_IO_stdin_used+0x23>
    2913:	48 8d 3d 90 0e 00 00 	lea    0xe90(%rip),%rdi        # 37aa <prvPermanentlyBlockingSemaphoreTask>
    291a:	e8 d8 93 00 00       	callq  bcf7 <xTaskCreate>
    291f:	41 b9 00 00 00 00    	mov    $0x0,%r9d
    2925:	41 b8 00 00 00 00    	mov    $0x0,%r8d
    292b:	b9 00 00 00 00       	mov    $0x0,%ecx
    2930:	ba 46 00 00 00       	mov    $0x46,%edx
    2935:	48 8d 35 f0 46 02 00 	lea    0x246f0(%rip),%rsi        # 2702c <_IO_stdin_used+0x2c>
    293c:	48 8d 3d df 0e 00 00 	lea    0xedf(%rip),%rdi        # 3822 <prvPermanentlyBlockingNotificationTask>
    2943:	e8 af 93 00 00       	callq  bcf7 <xTaskCreate>
    2948:	bf 46 00 00 00       	mov    $0x46,%edi
    294d:	e8 15 63 01 00       	callq  18c67 <vStartMessageBufferTasks>
    2952:	e8 3f b4 01 00       	callq  1dd96 <vStartStreamBufferTasks>
    2957:	e8 7f d7 01 00       	callq  200db <vStartStreamBufferInterruptDemo>
    295c:	bf 46 00 00 00       	mov    $0x46,%edi
    2961:	e8 bb 5e 01 00       	callq  18821 <vStartMessageBufferAMPTasks>
    2966:	e8 a3 83 01 00       	callq  1ad0e <vStartQueueSetTasks>
    296b:	e8 23 98 01 00       	callq  1c193 <vStartQueueSetPollingTask>
    2970:	e8 ff a2 01 00       	callq  1cc74 <vStartStaticallyAllocatedTasks>
    2975:	bf 32 00 00 00       	mov    $0x32,%edi
    297a:	e8 b0 eb 01 00       	callq  2152f <vStartTimerDemoTask>
    297f:	bf 03 00 00 00       	mov    $0x3,%edi
    2984:	e8 9d 28 01 00       	callq  15226 <vCreateSuicidalTasks>
    2989:	bf 01 00 00 00       	mov    $0x1,%edi
    298e:	e8 ca 2f 00 00       	callq  595d <xQueueCreateMutex>
    2993:	48 89 05 5e e7 02 00 	mov    %rax,0x2e75e(%rip)        # 310f8 <xMutexToDelete>
    299a:	e8 24 aa 00 00       	callq  d3c3 <vTaskStartScheduler>
    299f:	b8 00 00 00 00       	mov    $0x0,%eax
    29a4:	5d                   	pop    %rbp
    29a5:	c3                   	retq   

00000000000029a6 <prvCheckTask>:
    29a6:	f3 0f 1e fa          	endbr64 
    29aa:	55                   	push   %rbp
    29ab:	48 89 e5             	mov    %rsp,%rbp
    29ae:	48 83 ec 60          	sub    $0x60,%rsp
    29b2:	48 89 7d a8          	mov    %rdi,-0x58(%rbp)
    29b6:	64 48 8b 04 25 28 00 	mov    %fs:0x28,%rax
    29bd:	00 00 
    29bf:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
    29c3:	31 c0                	xor    %eax,%eax
    29c5:	48 c7 45 b8 10 27 00 	movq   $0x2710,-0x48(%rbp)
    29cc:	00 
    29cd:	e8 c6 ae 00 00       	callq  d898 <xTaskGetTickCount>
    29d2:	48 89 45 c0          	mov    %rax,-0x40(%rbp)
    29d6:	48 8b 55 b8          	mov    -0x48(%rbp),%rdx
    29da:	48 8d 45 c0          	lea    -0x40(%rbp),%rax
    29de:	48 89 d6             	mov    %rdx,%rsi
    29e1:	48 89 c7             	mov    %rax,%rdi
    29e4:	e8 23 9c 00 00       	callq  c60c <xTaskDelayUntil>
    29e9:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
    29ed:	48 89 c7             	mov    %rax,%rdi
    29f0:	e8 f5 ec 01 00       	callq  216ea <xAreTimerDemoTasksStillRunning>
    29f5:	48 83 f8 01          	cmp    $0x1,%rax
    29f9:	74 1d                	je     2a18 <prvCheckTask+0x72>
    29fb:	48 8d 05 34 46 02 00 	lea    0x24634(%rip),%rax        # 27036 <_IO_stdin_used+0x36>
    2a02:	48 89 05 17 e6 02 00 	mov    %rax,0x2e617(%rip)        # 31020 <pcStatusMessage>
    2a09:	8b 05 e1 e6 02 00    	mov    0x2e6e1(%rip),%eax        # 310f0 <xErrorCount>
    2a0f:	83 c0 01             	add    $0x1,%eax
    2a12:	89 05 d8 e6 02 00    	mov    %eax,0x2e6d8(%rip)        # 310f0 <xErrorCount>
    2a18:	e8 5d d5 01 00       	callq  1ff7a <xAreStreamBufferTasksStillRunning>
    2a1d:	48 83 f8 01          	cmp    $0x1,%rax
    2a21:	74 22                	je     2a45 <prvCheckTask+0x9f>
    2a23:	48 8d 05 1d 46 02 00 	lea    0x2461d(%rip),%rax        # 27047 <_IO_stdin_used+0x47>
    2a2a:	48 89 05 ef e5 02 00 	mov    %rax,0x2e5ef(%rip)        # 31020 <pcStatusMessage>
    2a31:	8b 05 b9 e6 02 00    	mov    0x2e6b9(%rip),%eax        # 310f0 <xErrorCount>
    2a37:	83 c0 01             	add    $0x1,%eax
    2a3a:	89 05 b0 e6 02 00    	mov    %eax,0x2e6b0(%rip)        # 310f0 <xErrorCount>
    2a40:	e9 fd 03 00 00       	jmpq   2e42 <prvCheckTask+0x49c>
    2a45:	e8 ef 75 01 00       	callq  1a039 <xAreMessageBufferTasksStillRunning>
    2a4a:	48 83 f8 01          	cmp    $0x1,%rax
    2a4e:	74 22                	je     2a72 <prvCheckTask+0xcc>
    2a50:	48 8d 05 05 46 02 00 	lea    0x24605(%rip),%rax        # 2705c <_IO_stdin_used+0x5c>
    2a57:	48 89 05 c2 e5 02 00 	mov    %rax,0x2e5c2(%rip)        # 31020 <pcStatusMessage>
    2a5e:	8b 05 8c e6 02 00    	mov    0x2e68c(%rip),%eax        # 310f0 <xErrorCount>
    2a64:	83 c0 01             	add    $0x1,%eax
    2a67:	89 05 83 e6 02 00    	mov    %eax,0x2e683(%rip)        # 310f0 <xErrorCount>
    2a6d:	e9 d0 03 00 00       	jmpq   2e42 <prvCheckTask+0x49c>
    2a72:	e8 00 ea 01 00       	callq  21477 <xAreTaskNotificationTasksStillRunning>
    2a77:	48 83 f8 01          	cmp    $0x1,%rax
    2a7b:	74 22                	je     2a9f <prvCheckTask+0xf9>
    2a7d:	48 8d 05 ee 45 02 00 	lea    0x245ee(%rip),%rax        # 27072 <_IO_stdin_used+0x72>
    2a84:	48 89 05 95 e5 02 00 	mov    %rax,0x2e595(%rip)        # 31020 <pcStatusMessage>
    2a8b:	8b 05 5f e6 02 00    	mov    0x2e65f(%rip),%eax        # 310f0 <xErrorCount>
    2a91:	83 c0 01             	add    $0x1,%eax
    2a94:	89 05 56 e6 02 00    	mov    %eax,0x2e656(%rip)        # 310f0 <xErrorCount>
    2a9a:	e9 a3 03 00 00       	jmpq   2e42 <prvCheckTask+0x49c>
    2a9f:	e8 0c 5d 01 00       	callq  187b0 <xAreInterruptSemaphoreTasksStillRunning>
    2aa4:	48 83 f8 01          	cmp    $0x1,%rax
    2aa8:	74 22                	je     2acc <prvCheckTask+0x126>
    2aaa:	48 8d 05 d6 45 02 00 	lea    0x245d6(%rip),%rax        # 27087 <_IO_stdin_used+0x87>
    2ab1:	48 89 05 68 e5 02 00 	mov    %rax,0x2e568(%rip)        # 31020 <pcStatusMessage>
    2ab8:	8b 05 32 e6 02 00    	mov    0x2e632(%rip),%eax        # 310f0 <xErrorCount>
    2abe:	83 c0 01             	add    $0x1,%eax
    2ac1:	89 05 29 e6 02 00    	mov    %eax,0x2e629(%rip)        # 310f0 <xErrorCount>
    2ac7:	e9 76 03 00 00       	jmpq   2e42 <prvCheckTask+0x49c>
    2acc:	e8 0b 3e 01 00       	callq  168dc <xAreEventGroupTasksStillRunning>
    2ad1:	48 83 f8 01          	cmp    $0x1,%rax
    2ad5:	74 22                	je     2af9 <prvCheckTask+0x153>
    2ad7:	48 8d 05 b7 45 02 00 	lea    0x245b7(%rip),%rax        # 27095 <_IO_stdin_used+0x95>
    2ade:	48 89 05 3b e5 02 00 	mov    %rax,0x2e53b(%rip)        # 31020 <pcStatusMessage>
    2ae5:	8b 05 05 e6 02 00    	mov    0x2e605(%rip),%eax        # 310f0 <xErrorCount>
    2aeb:	83 c0 01             	add    $0x1,%eax
    2aee:	89 05 fc e5 02 00    	mov    %eax,0x2e5fc(%rip)        # 310f0 <xErrorCount>
    2af4:	e9 49 03 00 00       	jmpq   2e42 <prvCheckTask+0x49c>
    2af9:	e8 2e 54 01 00       	callq  17f2c <xAreIntegerMathsTaskStillRunning>
    2afe:	48 83 f8 01          	cmp    $0x1,%rax
    2b02:	74 22                	je     2b26 <prvCheckTask+0x180>
    2b04:	48 8d 05 9c 45 02 00 	lea    0x2459c(%rip),%rax        # 270a7 <_IO_stdin_used+0xa7>
    2b0b:	48 89 05 0e e5 02 00 	mov    %rax,0x2e50e(%rip)        # 31020 <pcStatusMessage>
    2b12:	8b 05 d8 e5 02 00    	mov    0x2e5d8(%rip),%eax        # 310f0 <xErrorCount>
    2b18:	83 c0 01             	add    $0x1,%eax
    2b1b:	89 05 cf e5 02 00    	mov    %eax,0x2e5cf(%rip)        # 310f0 <xErrorCount>
    2b21:	e9 1c 03 00 00       	jmpq   2e42 <prvCheckTask+0x49c>
    2b26:	e8 87 52 01 00       	callq  17db2 <xAreGenericQueueTasksStillRunning>
    2b2b:	48 83 f8 01          	cmp    $0x1,%rax
    2b2f:	74 22                	je     2b53 <prvCheckTask+0x1ad>
    2b31:	48 8d 05 7e 45 02 00 	lea    0x2457e(%rip),%rax        # 270b6 <_IO_stdin_used+0xb6>
    2b38:	48 89 05 e1 e4 02 00 	mov    %rax,0x2e4e1(%rip)        # 31020 <pcStatusMessage>
    2b3f:	8b 05 ab e5 02 00    	mov    0x2e5ab(%rip),%eax        # 310f0 <xErrorCount>
    2b45:	83 c0 01             	add    $0x1,%eax
    2b48:	89 05 a2 e5 02 00    	mov    %eax,0x2e5a2(%rip)        # 310f0 <xErrorCount>
    2b4e:	e9 ef 02 00 00       	jmpq   2e42 <prvCheckTask+0x49c>
    2b53:	e8 08 7e 01 00       	callq  1a960 <xAreQueuePeekTasksStillRunning>
    2b58:	48 83 f8 01          	cmp    $0x1,%rax
    2b5c:	74 22                	je     2b80 <prvCheckTask+0x1da>
    2b5e:	48 8d 05 61 45 02 00 	lea    0x24561(%rip),%rax        # 270c6 <_IO_stdin_used+0xc6>
    2b65:	48 89 05 b4 e4 02 00 	mov    %rax,0x2e4b4(%rip)        # 31020 <pcStatusMessage>
    2b6c:	8b 05 7e e5 02 00    	mov    0x2e57e(%rip),%eax        # 310f0 <xErrorCount>
    2b72:	83 c0 01             	add    $0x1,%eax
    2b75:	89 05 75 e5 02 00    	mov    %eax,0x2e575(%rip)        # 310f0 <xErrorCount>
    2b7b:	e9 c2 02 00 00       	jmpq   2e42 <prvCheckTask+0x49c>
    2b80:	e8 6b 18 01 00       	callq  143f0 <xAreBlockingQueuesStillRunning>
    2b85:	48 83 f8 01          	cmp    $0x1,%rax
    2b89:	74 22                	je     2bad <prvCheckTask+0x207>
    2b8b:	48 8d 05 45 45 02 00 	lea    0x24545(%rip),%rax        # 270d7 <_IO_stdin_used+0xd7>
    2b92:	48 89 05 87 e4 02 00 	mov    %rax,0x2e487(%rip)        # 31020 <pcStatusMessage>
    2b99:	8b 05 51 e5 02 00    	mov    0x2e551(%rip),%eax        # 310f0 <xErrorCount>
    2b9f:	83 c0 01             	add    $0x1,%eax
    2ba2:	89 05 48 e5 02 00    	mov    %eax,0x2e548(%rip)        # 310f0 <xErrorCount>
    2ba8:	e9 95 02 00 00       	jmpq   2e42 <prvCheckTask+0x49c>
    2bad:	e8 3d a0 01 00       	callq  1cbef <xAreSemaphoreTasksStillRunning>
    2bb2:	48 83 f8 01          	cmp    $0x1,%rax
    2bb6:	74 22                	je     2bda <prvCheckTask+0x234>
    2bb8:	48 8d 05 2a 45 02 00 	lea    0x2452a(%rip),%rax        # 270e9 <_IO_stdin_used+0xe9>
    2bbf:	48 89 05 5a e4 02 00 	mov    %rax,0x2e45a(%rip)        # 31020 <pcStatusMessage>
    2bc6:	8b 05 24 e5 02 00    	mov    0x2e524(%rip),%eax        # 310f0 <xErrorCount>
    2bcc:	83 c0 01             	add    $0x1,%eax
    2bcf:	89 05 1b e5 02 00    	mov    %eax,0x2e51b(%rip)        # 310f0 <xErrorCount>
    2bd5:	e9 68 02 00 00       	jmpq   2e42 <prvCheckTask+0x49c>
    2bda:	e8 9a 77 01 00       	callq  1a379 <xArePollingQueuesStillRunning>
    2bdf:	48 83 f8 01          	cmp    $0x1,%rax
    2be3:	74 22                	je     2c07 <prvCheckTask+0x261>
    2be5:	48 8d 05 0c 45 02 00 	lea    0x2450c(%rip),%rax        # 270f8 <_IO_stdin_used+0xf8>
    2bec:	48 89 05 2d e4 02 00 	mov    %rax,0x2e42d(%rip)        # 31020 <pcStatusMessage>
    2bf3:	8b 05 f7 e4 02 00    	mov    0x2e4f7(%rip),%eax        # 310f0 <xErrorCount>
    2bf9:	83 c0 01             	add    $0x1,%eax
    2bfc:	89 05 ee e4 02 00    	mov    %eax,0x2e4ee(%rip)        # 310f0 <xErrorCount>
    2c02:	e9 3b 02 00 00       	jmpq   2e42 <prvCheckTask+0x49c>
    2c07:	e8 d4 42 01 00       	callq  16ee0 <xAreMathsTaskStillRunning>
    2c0c:	48 83 f8 01          	cmp    $0x1,%rax
    2c10:	74 22                	je     2c34 <prvCheckTask+0x28e>
    2c12:	48 8d 05 f0 44 02 00 	lea    0x244f0(%rip),%rax        # 27109 <_IO_stdin_used+0x109>
    2c19:	48 89 05 00 e4 02 00 	mov    %rax,0x2e400(%rip)        # 31020 <pcStatusMessage>
    2c20:	8b 05 ca e4 02 00    	mov    0x2e4ca(%rip),%eax        # 310f0 <xErrorCount>
    2c26:	83 c0 01             	add    $0x1,%eax
    2c29:	89 05 c1 e4 02 00    	mov    %eax,0x2e4c1(%rip)        # 310f0 <xErrorCount>
    2c2f:	e9 0e 02 00 00       	jmpq   2e42 <prvCheckTask+0x49c>
    2c34:	e8 6a 9b 01 00       	callq  1c7a3 <xAreRecursiveMutexTasksStillRunning>
    2c39:	48 83 f8 01          	cmp    $0x1,%rax
    2c3d:	74 22                	je     2c61 <prvCheckTask+0x2bb>
    2c3f:	48 8d 05 cf 44 02 00 	lea    0x244cf(%rip),%rax        # 27115 <_IO_stdin_used+0x115>
    2c46:	48 89 05 d3 e3 02 00 	mov    %rax,0x2e3d3(%rip)        # 31020 <pcStatusMessage>
    2c4d:	8b 05 9d e4 02 00    	mov    0x2e49d(%rip),%eax        # 310f0 <xErrorCount>
    2c53:	83 c0 01             	add    $0x1,%eax
    2c56:	89 05 94 e4 02 00    	mov    %eax,0x2e494(%rip)        # 310f0 <xErrorCount>
    2c5c:	e9 e1 01 00 00       	jmpq   2e42 <prvCheckTask+0x49c>
    2c61:	e8 40 25 01 00       	callq  151a6 <xAreCountingSemaphoreTasksStillRunning>
    2c66:	48 83 f8 01          	cmp    $0x1,%rax
    2c6a:	74 22                	je     2c8e <prvCheckTask+0x2e8>
    2c6c:	48 8d 05 b2 44 02 00 	lea    0x244b2(%rip),%rax        # 27125 <_IO_stdin_used+0x125>
    2c73:	48 89 05 a6 e3 02 00 	mov    %rax,0x2e3a6(%rip)        # 31020 <pcStatusMessage>
    2c7a:	8b 05 70 e4 02 00    	mov    0x2e470(%rip),%eax        # 310f0 <xErrorCount>
    2c80:	83 c0 01             	add    $0x1,%eax
    2c83:	89 05 67 e4 02 00    	mov    %eax,0x2e467(%rip)        # 310f0 <xErrorCount>
    2c89:	e9 b4 01 00 00       	jmpq   2e42 <prvCheckTask+0x49c>
    2c8e:	e8 1b 27 01 00       	callq  153ae <xIsCreateTaskStillRunning>
    2c93:	48 83 f8 01          	cmp    $0x1,%rax
    2c97:	74 22                	je     2cbb <prvCheckTask+0x315>
    2c99:	48 8d 05 95 44 02 00 	lea    0x24495(%rip),%rax        # 27135 <_IO_stdin_used+0x135>
    2ca0:	48 89 05 79 e3 02 00 	mov    %rax,0x2e379(%rip)        # 31020 <pcStatusMessage>
    2ca7:	8b 05 43 e4 02 00    	mov    0x2e443(%rip),%eax        # 310f0 <xErrorCount>
    2cad:	83 c0 01             	add    $0x1,%eax
    2cb0:	89 05 3a e4 02 00    	mov    %eax,0x2e43a(%rip)        # 310f0 <xErrorCount>
    2cb6:	e9 87 01 00 00       	jmpq   2e42 <prvCheckTask+0x49c>
    2cbb:	e8 28 2c 01 00       	callq  158e8 <xAreDynamicPriorityTasksStillRunning>
    2cc0:	48 83 f8 01          	cmp    $0x1,%rax
    2cc4:	74 22                	je     2ce8 <prvCheckTask+0x342>
    2cc6:	48 8d 05 75 44 02 00 	lea    0x24475(%rip),%rax        # 27142 <_IO_stdin_used+0x142>
    2ccd:	48 89 05 4c e3 02 00 	mov    %rax,0x2e34c(%rip)        # 31020 <pcStatusMessage>
    2cd4:	8b 05 16 e4 02 00    	mov    0x2e416(%rip),%eax        # 310f0 <xErrorCount>
    2cda:	83 c0 01             	add    $0x1,%eax
    2cdd:	89 05 0d e4 02 00    	mov    %eax,0x2e40d(%rip)        # 310f0 <xErrorCount>
    2ce3:	e9 5a 01 00 00       	jmpq   2e42 <prvCheckTask+0x49c>
    2ce8:	e8 89 7e 01 00       	callq  1ab76 <xIsQueueOverwriteTaskStillRunning>
    2ced:	48 83 f8 01          	cmp    $0x1,%rax
    2cf1:	74 22                	je     2d15 <prvCheckTask+0x36f>
    2cf3:	48 8d 05 57 44 02 00 	lea    0x24457(%rip),%rax        # 27151 <_IO_stdin_used+0x151>
    2cfa:	48 89 05 1f e3 02 00 	mov    %rax,0x2e31f(%rip)        # 31020 <pcStatusMessage>
    2d01:	8b 05 e9 e3 02 00    	mov    0x2e3e9(%rip),%eax        # 310f0 <xErrorCount>
    2d07:	83 c0 01             	add    $0x1,%eax
    2d0a:	89 05 e0 e3 02 00    	mov    %eax,0x2e3e0(%rip)        # 310f0 <xErrorCount>
    2d10:	e9 2d 01 00 00       	jmpq   2e42 <prvCheckTask+0x49c>
    2d15:	e8 93 20 01 00       	callq  14dad <xAreBlockTimeTestTasksStillRunning>
    2d1a:	48 83 f8 01          	cmp    $0x1,%rax
    2d1e:	74 22                	je     2d42 <prvCheckTask+0x39c>
    2d20:	48 8d 05 41 44 02 00 	lea    0x24441(%rip),%rax        # 27168 <_IO_stdin_used+0x168>
    2d27:	48 89 05 f2 e2 02 00 	mov    %rax,0x2e2f2(%rip)        # 31020 <pcStatusMessage>
    2d2e:	8b 05 bc e3 02 00    	mov    0x2e3bc(%rip),%eax        # 310f0 <xErrorCount>
    2d34:	83 c0 01             	add    $0x1,%eax
    2d37:	89 05 b3 e3 02 00    	mov    %eax,0x2e3b3(%rip)        # 310f0 <xErrorCount>
    2d3d:	e9 00 01 00 00       	jmpq   2e42 <prvCheckTask+0x49c>
    2d42:	e8 68 12 01 00       	callq  13faf <xAreAbortDelayTestTasksStillRunning>
    2d47:	48 83 f8 01          	cmp    $0x1,%rax
    2d4b:	74 22                	je     2d6f <prvCheckTask+0x3c9>
    2d4d:	48 8d 05 26 44 02 00 	lea    0x24426(%rip),%rax        # 2717a <_IO_stdin_used+0x17a>
    2d54:	48 89 05 c5 e2 02 00 	mov    %rax,0x2e2c5(%rip)        # 31020 <pcStatusMessage>
    2d5b:	8b 05 8f e3 02 00    	mov    0x2e38f(%rip),%eax        # 310f0 <xErrorCount>
    2d61:	83 c0 01             	add    $0x1,%eax
    2d64:	89 05 86 e3 02 00    	mov    %eax,0x2e386(%rip)        # 310f0 <xErrorCount>
    2d6a:	e9 d3 00 00 00       	jmpq   2e42 <prvCheckTask+0x49c>
    2d6f:	e8 ce d5 01 00       	callq  20342 <xIsInterruptStreamBufferDemoStillRunning>
    2d74:	48 83 f8 01          	cmp    $0x1,%rax
    2d78:	74 22                	je     2d9c <prvCheckTask+0x3f6>
    2d7a:	48 8d 05 0f 44 02 00 	lea    0x2440f(%rip),%rax        # 27190 <_IO_stdin_used+0x190>
    2d81:	48 89 05 98 e2 02 00 	mov    %rax,0x2e298(%rip)        # 31020 <pcStatusMessage>
    2d88:	8b 05 62 e3 02 00    	mov    0x2e362(%rip),%eax        # 310f0 <xErrorCount>
    2d8e:	83 c0 01             	add    $0x1,%eax
    2d91:	89 05 59 e3 02 00    	mov    %eax,0x2e359(%rip)        # 310f0 <xErrorCount>
    2d97:	e9 a6 00 00 00       	jmpq   2e42 <prvCheckTask+0x49c>
    2d9c:	e8 36 5e 01 00       	callq  18bd7 <xAreMessageBufferAMPTasksStillRunning>
    2da1:	48 83 f8 01          	cmp    $0x1,%rax
    2da5:	74 1f                	je     2dc6 <prvCheckTask+0x420>
    2da7:	48 8d 05 01 44 02 00 	lea    0x24401(%rip),%rax        # 271af <_IO_stdin_used+0x1af>
    2dae:	48 89 05 6b e2 02 00 	mov    %rax,0x2e26b(%rip)        # 31020 <pcStatusMessage>
    2db5:	8b 05 35 e3 02 00    	mov    0x2e335(%rip),%eax        # 310f0 <xErrorCount>
    2dbb:	83 c0 01             	add    $0x1,%eax
    2dbe:	89 05 2c e3 02 00    	mov    %eax,0x2e32c(%rip)        # 310f0 <xErrorCount>
    2dc4:	eb 7c                	jmp    2e42 <prvCheckTask+0x49c>
    2dc6:	e8 c2 7f 01 00       	callq  1ad8d <xAreQueueSetTasksStillRunning>
    2dcb:	48 83 f8 01          	cmp    $0x1,%rax
    2dcf:	74 1f                	je     2df0 <prvCheckTask+0x44a>
    2dd1:	48 8d 05 f1 43 02 00 	lea    0x243f1(%rip),%rax        # 271c9 <_IO_stdin_used+0x1c9>
    2dd8:	48 89 05 41 e2 02 00 	mov    %rax,0x2e241(%rip)        # 31020 <pcStatusMessage>
    2ddf:	8b 05 0b e3 02 00    	mov    0x2e30b(%rip),%eax        # 310f0 <xErrorCount>
    2de5:	83 c0 01             	add    $0x1,%eax
    2de8:	89 05 02 e3 02 00    	mov    %eax,0x2e302(%rip)        # 310f0 <xErrorCount>
    2dee:	eb 52                	jmp    2e42 <prvCheckTask+0x49c>
    2df0:	e8 38 95 01 00       	callq  1c32d <xAreQueueSetPollTasksStillRunning>
    2df5:	48 83 f8 01          	cmp    $0x1,%rax
    2df9:	74 1f                	je     2e1a <prvCheckTask+0x474>
    2dfb:	48 8d 05 d8 43 02 00 	lea    0x243d8(%rip),%rax        # 271da <_IO_stdin_used+0x1da>
    2e02:	48 89 05 17 e2 02 00 	mov    %rax,0x2e217(%rip)        # 31020 <pcStatusMessage>
    2e09:	8b 05 e1 e2 02 00    	mov    0x2e2e1(%rip),%eax        # 310f0 <xErrorCount>
    2e0f:	83 c0 01             	add    $0x1,%eax
    2e12:	89 05 d8 e2 02 00    	mov    %eax,0x2e2d8(%rip)        # 310f0 <xErrorCount>
    2e18:	eb 28                	jmp    2e42 <prvCheckTask+0x49c>
    2e1a:	e8 1d af 01 00       	callq  1dd3c <xAreStaticAllocationTasksStillRunning>
    2e1f:	48 83 f8 01          	cmp    $0x1,%rax
    2e23:	74 1d                	je     2e42 <prvCheckTask+0x49c>
    2e25:	8b 05 c5 e2 02 00    	mov    0x2e2c5(%rip),%eax        # 310f0 <xErrorCount>
    2e2b:	83 c0 01             	add    $0x1,%eax
    2e2e:	89 05 bc e2 02 00    	mov    %eax,0x2e2bc(%rip)        # 310f0 <xErrorCount>
    2e34:	48 8d 05 b8 43 02 00 	lea    0x243b8(%rip),%rax        # 271f3 <_IO_stdin_used+0x1f3>
    2e3b:	48 89 05 de e1 02 00 	mov    %rax,0x2e1de(%rip)        # 31020 <pcStatusMessage>
    2e42:	e8 51 aa 00 00       	callq  d898 <xTaskGetTickCount>
    2e47:	48 89 c2             	mov    %rax,%rdx
    2e4a:	48 8b 05 cf e1 02 00 	mov    0x2e1cf(%rip),%rax        # 31020 <pcStatusMessage>
    2e51:	48 89 c6             	mov    %rax,%rsi
    2e54:	48 8d 3d b1 43 02 00 	lea    0x243b1(%rip),%rdi        # 2720c <_IO_stdin_used+0x20c>
    2e5b:	b8 00 00 00 00       	mov    $0x0,%eax
    2e60:	e8 7b f6 ff ff       	callq  24e0 <printf@plt>
    2e65:	8b 05 85 e2 02 00    	mov    0x2e285(%rip),%eax        # 310f0 <xErrorCount>
    2e6b:	85 c0                	test   %eax,%eax
    2e6d:	74 0a                	je     2e79 <prvCheckTask+0x4d3>
    2e6f:	bf 01 00 00 00       	mov    $0x1,%edi
    2e74:	e8 47 f8 ff ff       	callq  26c0 <exit@plt>
    2e79:	48 8d 05 88 41 02 00 	lea    0x24188(%rip),%rax        # 27008 <_IO_stdin_used+0x8>
    2e80:	48 89 05 99 e1 02 00 	mov    %rax,0x2e199(%rip)        # 31020 <pcStatusMessage>
    2e87:	e9 4a fb ff ff       	jmpq   29d6 <prvCheckTask+0x30>

0000000000002e8c <prvTestTask>:
    2e8c:	f3 0f 1e fa          	endbr64 
    2e90:	55                   	push   %rbp
    2e91:	48 89 e5             	mov    %rsp,%rbp
    2e94:	48 83 ec 40          	sub    $0x40,%rsp
    2e98:	48 89 7d c8          	mov    %rdi,-0x38(%rbp)
    2e9c:	64 48 8b 04 25 28 00 	mov    %fs:0x28,%rax
    2ea3:	00 00 
    2ea5:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
    2ea9:	31 c0                	xor    %eax,%eax
    2eab:	48 c7 45 d8 05 00 00 	movq   $0x5,-0x28(%rbp)
    2eb2:	00 
    2eb3:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
    2eb7:	48 c1 e8 03          	shr    $0x3,%rax
    2ebb:	48 ba cf f7 53 e3 a5 	movabs $0x20c49ba5e353f7cf,%rdx
    2ec2:	9b c4 20 
    2ec5:	48 f7 e2             	mul    %rdx
    2ec8:	48 89 d0             	mov    %rdx,%rax
    2ecb:	48 c1 e8 04          	shr    $0x4,%rax
    2ecf:	48 89 45 e0          	mov    %rax,-0x20(%rbp)
    2ed3:	48 8b 4d d8          	mov    -0x28(%rbp),%rcx
    2ed7:	48 89 c8             	mov    %rcx,%rax
    2eda:	48 c1 e8 03          	shr    $0x3,%rax
    2ede:	48 ba cf f7 53 e3 a5 	movabs $0x20c49ba5e353f7cf,%rdx
    2ee5:	9b c4 20 
    2ee8:	48 f7 e2             	mul    %rdx
    2eeb:	48 89 d0             	mov    %rdx,%rax
    2eee:	48 c1 e8 04          	shr    $0x4,%rax
    2ef2:	48 69 c0 e8 03 00 00 	imul   $0x3e8,%rax,%rax
    2ef9:	48 29 c1             	sub    %rax,%rcx
    2efc:	48 89 c8             	mov    %rcx,%rax
    2eff:	48 69 c0 40 42 0f 00 	imul   $0xf4240,%rax,%rax
    2f06:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
    2f0a:	48 8d 45 e0          	lea    -0x20(%rbp),%rax
    2f0e:	be 00 00 00 00       	mov    $0x0,%esi
    2f13:	48 89 c7             	mov    %rax,%rdi
    2f16:	e8 e5 f5 ff ff       	callq  2500 <nanosleep@plt>
    2f1b:	eb 96                	jmp    2eb3 <prvTestTask+0x27>

0000000000002f1d <vFullDemoIdleFunction>:
    2f1d:	f3 0f 1e fa          	endbr64 
    2f21:	55                   	push   %rbp
    2f22:	48 89 e5             	mov    %rsp,%rbp
    2f25:	48 83 ec 30          	sub    $0x30,%rsp
    2f29:	64 48 8b 04 25 28 00 	mov    %fs:0x28,%rax
    2f30:	00 00 
    2f32:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
    2f36:	31 c0                	xor    %eax,%eax
    2f38:	48 c7 45 d0 0f 00 00 	movq   $0xf,-0x30(%rbp)
    2f3f:	00 
    2f40:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
    2f44:	48 c1 e8 03          	shr    $0x3,%rax
    2f48:	48 ba cf f7 53 e3 a5 	movabs $0x20c49ba5e353f7cf,%rdx
    2f4f:	9b c4 20 
    2f52:	48 f7 e2             	mul    %rdx
    2f55:	48 89 d0             	mov    %rdx,%rax
    2f58:	48 c1 e8 04          	shr    $0x4,%rax
    2f5c:	48 89 45 e0          	mov    %rax,-0x20(%rbp)
    2f60:	48 8b 4d d0          	mov    -0x30(%rbp),%rcx
    2f64:	48 89 c8             	mov    %rcx,%rax
    2f67:	48 c1 e8 03          	shr    $0x3,%rax
    2f6b:	48 ba cf f7 53 e3 a5 	movabs $0x20c49ba5e353f7cf,%rdx
    2f72:	9b c4 20 
    2f75:	48 f7 e2             	mul    %rdx
    2f78:	48 89 d0             	mov    %rdx,%rax
    2f7b:	48 c1 e8 04          	shr    $0x4,%rax
    2f7f:	48 69 c0 e8 03 00 00 	imul   $0x3e8,%rax,%rax
    2f86:	48 29 c1             	sub    %rax,%rcx
    2f89:	48 89 c8             	mov    %rcx,%rax
    2f8c:	48 69 c0 40 42 0f 00 	imul   $0xf4240,%rax,%rax
    2f93:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
    2f97:	48 8d 45 e0          	lea    -0x20(%rbp),%rax
    2f9b:	be 00 00 00 00       	mov    $0x0,%esi
    2fa0:	48 89 c7             	mov    %rax,%rdi
    2fa3:	e8 58 f5 ff ff       	callq  2500 <nanosleep@plt>
    2fa8:	e8 8e 03 00 00       	callq  333b <prvDemonstrateTaskStateAndHandleGetFunctions>
    2fad:	e8 28 03 00 00       	callq  32da <prvDemonstratePendingFunctionCall>
    2fb2:	e8 17 02 00 00       	callq  31ce <prvDemonstrateTimerQueryFunctions>
    2fb7:	48 8b 05 3a e1 02 00 	mov    0x2e13a(%rip),%rax        # 310f8 <xMutexToDelete>
    2fbe:	48 85 c0             	test   %rax,%rax
    2fc1:	0f 84 bc 00 00 00    	je     3083 <vFullDemoIdleFunction+0x166>
    2fc7:	48 8b 05 2a e1 02 00 	mov    0x2e12a(%rip),%rax        # 310f8 <xMutexToDelete>
    2fce:	48 89 c7             	mov    %rax,%rdi
    2fd1:	e8 0b 57 00 00       	callq  86e1 <pcQueueGetName>
    2fd6:	48 85 c0             	test   %rax,%rax
    2fd9:	74 11                	je     2fec <vFullDemoIdleFunction+0xcf>
    2fdb:	be f5 01 00 00       	mov    $0x1f5,%esi
    2fe0:	48 8d 3d 3b 42 02 00 	lea    0x2423b(%rip),%rdi        # 27222 <_IO_stdin_used+0x222>
    2fe7:	e8 20 0d 00 00       	callq  3d0c <vAssertCalled>
    2fec:	48 8b 05 05 e1 02 00 	mov    0x2e105(%rip),%rax        # 310f8 <xMutexToDelete>
    2ff3:	48 8d 35 34 42 02 00 	lea    0x24234(%rip),%rsi        # 2722e <_IO_stdin_used+0x22e>
    2ffa:	48 89 c7             	mov    %rax,%rdi
    2ffd:	e8 b6 55 00 00       	callq  85b8 <vQueueAddToRegistry>
    3002:	48 8b 05 ef e0 02 00 	mov    0x2e0ef(%rip),%rax        # 310f8 <xMutexToDelete>
    3009:	48 89 c7             	mov    %rax,%rdi
    300c:	e8 d0 56 00 00       	callq  86e1 <pcQueueGetName>
    3011:	48 8d 35 16 42 02 00 	lea    0x24216(%rip),%rsi        # 2722e <_IO_stdin_used+0x22e>
    3018:	48 89 c7             	mov    %rax,%rdi
    301b:	e8 30 f5 ff ff       	callq  2550 <strcmp@plt>
    3020:	85 c0                	test   %eax,%eax
    3022:	74 11                	je     3035 <vFullDemoIdleFunction+0x118>
    3024:	be f7 01 00 00       	mov    $0x1f7,%esi
    3029:	48 8d 3d f2 41 02 00 	lea    0x241f2(%rip),%rdi        # 27222 <_IO_stdin_used+0x222>
    3030:	e8 d7 0c 00 00       	callq  3d0c <vAssertCalled>
    3035:	48 8b 05 bc e0 02 00 	mov    0x2e0bc(%rip),%rax        # 310f8 <xMutexToDelete>
    303c:	48 89 c7             	mov    %rax,%rdi
    303f:	e8 21 57 00 00       	callq  8765 <vQueueUnregisterQueue>
    3044:	48 8b 05 ad e0 02 00 	mov    0x2e0ad(%rip),%rax        # 310f8 <xMutexToDelete>
    304b:	48 89 c7             	mov    %rax,%rdi
    304e:	e8 8e 56 00 00       	callq  86e1 <pcQueueGetName>
    3053:	48 85 c0             	test   %rax,%rax
    3056:	74 11                	je     3069 <vFullDemoIdleFunction+0x14c>
    3058:	be f9 01 00 00       	mov    $0x1f9,%esi
    305d:	48 8d 3d be 41 02 00 	lea    0x241be(%rip),%rdi        # 27222 <_IO_stdin_used+0x222>
    3064:	e8 a3 0c 00 00       	callq  3d0c <vAssertCalled>
    3069:	48 8b 05 88 e0 02 00 	mov    0x2e088(%rip),%rax        # 310f8 <xMutexToDelete>
    3070:	48 89 c7             	mov    %rax,%rdi
    3073:	e8 76 4e 00 00       	callq  7eee <vQueueDelete>
    3078:	48 c7 05 75 e0 02 00 	movq   $0x0,0x2e075(%rip)        # 310f8 <xMutexToDelete>
    307f:	00 00 00 00 
    3083:	e8 98 f6 ff ff       	callq  2720 <rand@plt>
    3088:	48 63 d0             	movslq %eax,%rdx
    308b:	48 69 d2 d3 4d 62 10 	imul   $0x10624dd3,%rdx,%rdx
    3092:	48 c1 ea 20          	shr    $0x20,%rdx
    3096:	89 d1                	mov    %edx,%ecx
    3098:	c1 f9 05             	sar    $0x5,%ecx
    309b:	99                   	cltd   
    309c:	29 d1                	sub    %edx,%ecx
    309e:	89 ca                	mov    %ecx,%edx
    30a0:	69 d2 f4 01 00 00    	imul   $0x1f4,%edx,%edx
    30a6:	29 d0                	sub    %edx,%eax
    30a8:	89 c2                	mov    %eax,%edx
    30aa:	8d 42 01             	lea    0x1(%rdx),%eax
    30ad:	48 98                	cltq   
    30af:	48 89 c7             	mov    %rax,%rdi
    30b2:	e8 c9 f5 00 00       	callq  12680 <pvPortMalloc>
    30b7:	48 89 45 d8          	mov    %rax,-0x28(%rbp)
    30bb:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
    30bf:	48 89 c7             	mov    %rax,%rdi
    30c2:	e8 d9 f6 00 00       	callq  127a0 <vPortFree>
    30c7:	90                   	nop
    30c8:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    30cc:	64 48 33 04 25 28 00 	xor    %fs:0x28,%rax
    30d3:	00 00 
    30d5:	74 05                	je     30dc <vFullDemoIdleFunction+0x1bf>
    30d7:	e8 f4 f3 ff ff       	callq  24d0 <__stack_chk_fail@plt>
    30dc:	c9                   	leaveq 
    30dd:	c3                   	retq   

00000000000030de <vFullDemoTickHookFunction>:
    30de:	f3 0f 1e fa          	endbr64 
    30e2:	55                   	push   %rbp
    30e3:	48 89 e5             	mov    %rsp,%rbp
    30e6:	48 83 ec 10          	sub    $0x10,%rsp
    30ea:	e8 22 f5 01 00       	callq  22611 <vTimerPeriodicISRTests>
    30ef:	e8 cd 7a 01 00       	callq  1abc1 <vQueueOverwritePeriodicISRDemo>
    30f4:	e8 3c 80 01 00       	callq  1b135 <vQueueSetAccessQueueSetFromISR>
    30f9:	e8 cb 91 01 00       	callq  1c2c9 <vQueueSetPollingInterruptAccess>
    30fe:	e8 74 36 01 00       	callq  16777 <vPeriodicEventGroupsProcessing>
    3103:	e8 b4 55 01 00       	callq  186bc <vInterruptSemaphorePeriodicTest>
    3108:	e8 ce e1 01 00       	callq  212db <xNotifyTaskFromISR>
    310d:	e8 82 cb 01 00       	callq  1fc94 <vPeriodicStreamBufferProcessing>
    3112:	e8 7d d1 01 00       	callq  20294 <vBasicStreamBufferSendFromISR>
    3117:	e8 59 e8 00 00       	callq  11975 <xTimerGetTimerDaemonTaskHandle>
    311c:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
    3120:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    3124:	48 89 c7             	mov    %rax,%rdi
    3127:	e8 c1 98 00 00       	callq  c9ed <uxTaskPriorityGetFromISR>
    312c:	48 83 f8 06          	cmp    $0x6,%rax
    3130:	74 11                	je     3143 <vFullDemoTickHookFunction+0x65>
    3132:	be 48 02 00 00       	mov    $0x248,%esi
    3137:	48 8d 3d e4 40 02 00 	lea    0x240e4(%rip),%rdi        # 27222 <_IO_stdin_used+0x222>
    313e:	e8 c9 0b 00 00       	callq  3d0c <vAssertCalled>
    3143:	90                   	nop
    3144:	c9                   	leaveq 
    3145:	c3                   	retq   

0000000000003146 <prvPendedFunction>:
    3146:	f3 0f 1e fa          	endbr64 
    314a:	55                   	push   %rbp
    314b:	48 89 e5             	mov    %rsp,%rbp
    314e:	48 83 ec 20          	sub    $0x20,%rsp
    3152:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
    3156:	89 75 e4             	mov    %esi,-0x1c(%rbp)
    3159:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
    315d:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
    3161:	48 8b 05 a8 de 02 00 	mov    0x2dea8(%rip),%rax        # 31010 <ulLastParameter1.4297>
    3168:	48 83 c0 01          	add    $0x1,%rax
    316c:	48 39 45 f8          	cmp    %rax,-0x8(%rbp)
    3170:	74 11                	je     3183 <prvPendedFunction+0x3d>
    3172:	be 55 02 00 00       	mov    $0x255,%esi
    3177:	48 8d 3d a4 40 02 00 	lea    0x240a4(%rip),%rdi        # 27222 <_IO_stdin_used+0x222>
    317e:	e8 89 0b 00 00       	callq  3d0c <vAssertCalled>
    3183:	8b 45 e4             	mov    -0x1c(%rbp),%eax
    3186:	48 8b 15 73 df 02 00 	mov    0x2df73(%rip),%rdx        # 31100 <ulLastParameter2.4298>
    318d:	48 83 c2 01          	add    $0x1,%rdx
    3191:	48 39 d0             	cmp    %rdx,%rax
    3194:	74 11                	je     31a7 <prvPendedFunction+0x61>
    3196:	be 56 02 00 00       	mov    $0x256,%esi
    319b:	48 8d 3d 80 40 02 00 	lea    0x24080(%rip),%rdi        # 27222 <_IO_stdin_used+0x222>
    31a2:	e8 65 0b 00 00       	callq  3d0c <vAssertCalled>
    31a7:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    31ab:	48 89 05 5e de 02 00 	mov    %rax,0x2de5e(%rip)        # 31010 <ulLastParameter1.4297>
    31b2:	8b 45 e4             	mov    -0x1c(%rbp),%eax
    31b5:	48 89 05 44 df 02 00 	mov    %rax,0x2df44(%rip)        # 31100 <ulLastParameter2.4298>
    31bc:	90                   	nop
    31bd:	c9                   	leaveq 
    31be:	c3                   	retq   

00000000000031bf <prvTestTimerCallback>:
    31bf:	f3 0f 1e fa          	endbr64 
    31c3:	55                   	push   %rbp
    31c4:	48 89 e5             	mov    %rsp,%rbp
    31c7:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
    31cb:	90                   	nop
    31cc:	5d                   	pop    %rbp
    31cd:	c3                   	retq   

00000000000031ce <prvDemonstrateTimerQueryFunctions>:
    31ce:	f3 0f 1e fa          	endbr64 
    31d2:	55                   	push   %rbp
    31d3:	48 89 e5             	mov    %rsp,%rbp
    31d6:	48 83 ec 20          	sub    $0x20,%rsp
    31da:	48 8d 05 58 40 02 00 	lea    0x24058(%rip),%rax        # 27239 <_IO_stdin_used+0x239>
    31e1:	48 89 45 f0          	mov    %rax,-0x10(%rbp)
    31e5:	48 c7 45 f8 00 00 00 	movq   $0x0,-0x8(%rbp)
    31ec:	00 
    31ed:	48 8b 05 14 df 02 00 	mov    0x2df14(%rip),%rax        # 31108 <xTimer.4306>
    31f4:	48 85 c0             	test   %rax,%rax
    31f7:	75 5f                	jne    3258 <prvDemonstrateTimerQueryFunctions+0x8a>
    31f9:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
    31fd:	4c 8d 05 bb ff ff ff 	lea    -0x45(%rip),%r8        # 31bf <prvTestTimerCallback>
    3204:	b9 00 00 00 00       	mov    $0x0,%ecx
    3209:	ba 01 00 00 00       	mov    $0x1,%edx
    320e:	48 c7 c6 ff ff ff ff 	mov    $0xffffffffffffffff,%rsi
    3215:	48 89 c7             	mov    %rax,%rdi
    3218:	e8 a8 e1 00 00       	callq  113c5 <xTimerCreate>
    321d:	48 89 05 e4 de 02 00 	mov    %rax,0x2dee4(%rip)        # 31108 <xTimer.4306>
    3224:	48 8b 05 dd de 02 00 	mov    0x2dedd(%rip),%rax        # 31108 <xTimer.4306>
    322b:	48 85 c0             	test   %rax,%rax
    322e:	74 28                	je     3258 <prvDemonstrateTimerQueryFunctions+0x8a>
    3230:	e8 63 a6 00 00       	callq  d898 <xTaskGetTickCount>
    3235:	48 89 c2             	mov    %rax,%rdx
    3238:	48 8b 05 c9 de 02 00 	mov    0x2dec9(%rip),%rax        # 31108 <xTimer.4306>
    323f:	48 8b 4d f8          	mov    -0x8(%rbp),%rcx
    3243:	49 89 c8             	mov    %rcx,%r8
    3246:	b9 00 00 00 00       	mov    $0x0,%ecx
    324b:	be 01 00 00 00       	mov    $0x1,%esi
    3250:	48 89 c7             	mov    %rax,%rdi
    3253:	e8 dd e3 00 00       	callq  11635 <xTimerGenericCommand>
    3258:	48 8b 05 a9 de 02 00 	mov    0x2dea9(%rip),%rax        # 31108 <xTimer.4306>
    325f:	48 85 c0             	test   %rax,%rax
    3262:	74 73                	je     32d7 <prvDemonstrateTimerQueryFunctions+0x109>
    3264:	48 8b 05 9d de 02 00 	mov    0x2de9d(%rip),%rax        # 31108 <xTimer.4306>
    326b:	48 89 c7             	mov    %rax,%rdi
    326e:	e8 82 e8 00 00       	callq  11af5 <pcTimerGetName>
    3273:	48 89 c2             	mov    %rax,%rdx
    3276:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
    327a:	48 89 c6             	mov    %rax,%rsi
    327d:	48 89 d7             	mov    %rdx,%rdi
    3280:	e8 cb f2 ff ff       	callq  2550 <strcmp@plt>
    3285:	85 c0                	test   %eax,%eax
    3287:	74 11                	je     329a <prvDemonstrateTimerQueryFunctions+0xcc>
    3289:	be 80 02 00 00       	mov    $0x280,%esi
    328e:	48 8d 3d 8d 3f 02 00 	lea    0x23f8d(%rip),%rdi        # 27222 <_IO_stdin_used+0x222>
    3295:	e8 72 0a 00 00       	callq  3d0c <vAssertCalled>
    329a:	48 8b 05 67 de 02 00 	mov    0x2de67(%rip),%rax        # 31108 <xTimer.4306>
    32a1:	48 89 c7             	mov    %rax,%rdi
    32a4:	e8 fa e6 00 00       	callq  119a3 <xTimerGetPeriod>
    32a9:	48 83 f8 ff          	cmp    $0xffffffffffffffff,%rax
    32ad:	74 11                	je     32c0 <prvDemonstrateTimerQueryFunctions+0xf2>
    32af:	be 83 02 00 00       	mov    $0x283,%esi
    32b4:	48 8d 3d 67 3f 02 00 	lea    0x23f67(%rip),%rdi        # 27222 <_IO_stdin_used+0x222>
    32bb:	e8 4c 0a 00 00       	callq  3d0c <vAssertCalled>
    32c0:	48 8b 05 41 de 02 00 	mov    0x2de41(%rip),%rax        # 31108 <xTimer.4306>
    32c7:	48 89 c7             	mov    %rax,%rdi
    32ca:	e8 e4 e7 00 00       	callq  11ab3 <xTimerGetExpiryTime>
    32cf:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
    32d3:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
    32d7:	90                   	nop
    32d8:	c9                   	leaveq 
    32d9:	c3                   	retq   

00000000000032da <prvDemonstratePendingFunctionCall>:
    32da:	f3 0f 1e fa          	endbr64 
    32de:	55                   	push   %rbp
    32df:	48 89 e5             	mov    %rsp,%rbp
    32e2:	48 83 ec 10          	sub    $0x10,%rsp
    32e6:	48 c7 45 f8 00 00 00 	movq   $0x0,-0x8(%rbp)
    32ed:	00 
    32ee:	48 8b 05 23 dd 02 00 	mov    0x2dd23(%rip),%rax        # 31018 <ulParameter1.4313>
    32f5:	48 83 c0 01          	add    $0x1,%rax
    32f9:	48 89 05 18 dd 02 00 	mov    %rax,0x2dd18(%rip)        # 31018 <ulParameter1.4313>
    3300:	48 8b 05 09 de 02 00 	mov    0x2de09(%rip),%rax        # 31110 <ulParameter2.4314>
    3307:	48 83 c0 01          	add    $0x1,%rax
    330b:	48 89 05 fe dd 02 00 	mov    %rax,0x2ddfe(%rip)        # 31110 <ulParameter2.4314>
    3312:	48 8b 05 f7 dd 02 00 	mov    0x2ddf7(%rip),%rax        # 31110 <ulParameter2.4314>
    3319:	89 c2                	mov    %eax,%edx
    331b:	48 8b 05 f6 dc 02 00 	mov    0x2dcf6(%rip),%rax        # 31018 <ulParameter1.4313>
    3322:	48 89 c6             	mov    %rax,%rsi
    3325:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    3329:	48 89 c1             	mov    %rax,%rcx
    332c:	48 8d 3d 13 fe ff ff 	lea    -0x1ed(%rip),%rdi        # 3146 <prvPendedFunction>
    3333:	e8 b9 f1 00 00       	callq  124f1 <xTimerPendFunctionCall>
    3338:	90                   	nop
    3339:	c9                   	leaveq 
    333a:	c3                   	retq   

000000000000333b <prvDemonstrateTaskStateAndHandleGetFunctions>:
    333b:	f3 0f 1e fa          	endbr64 
    333f:	55                   	push   %rbp
    3340:	48 89 e5             	mov    %rsp,%rbp
    3343:	48 83 ec 70          	sub    $0x70,%rsp
    3347:	64 48 8b 04 25 28 00 	mov    %fs:0x28,%rax
    334e:	00 00 
    3350:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
    3354:	31 c0                	xor    %eax,%eax
    3356:	e8 cc a9 00 00       	callq  dd27 <xTaskGetIdleTaskHandle>
    335b:	48 89 45 98          	mov    %rax,-0x68(%rbp)
    335f:	e8 11 e6 00 00       	callq  11975 <xTimerGetTimerDaemonTaskHandle>
    3364:	48 89 45 a0          	mov    %rax,-0x60(%rbp)
    3368:	e8 11 c3 00 00       	callq  f67e <xTaskGetCurrentTaskHandle>
    336d:	48 39 45 98          	cmp    %rax,-0x68(%rbp)
    3371:	74 1d                	je     3390 <prvDemonstrateTaskStateAndHandleGetFunctions+0x55>
    3373:	48 8d 05 ce 3e 02 00 	lea    0x23ece(%rip),%rax        # 27248 <_IO_stdin_used+0x248>
    337a:	48 89 05 9f dc 02 00 	mov    %rax,0x2dc9f(%rip)        # 31020 <pcStatusMessage>
    3381:	8b 05 69 dd 02 00    	mov    0x2dd69(%rip),%eax        # 310f0 <xErrorCount>
    3387:	83 c0 01             	add    $0x1,%eax
    338a:	89 05 60 dd 02 00    	mov    %eax,0x2dd60(%rip)        # 310f0 <xErrorCount>
    3390:	48 8d 3d e1 3e 02 00 	lea    0x23ee1(%rip),%rdi        # 27278 <_IO_stdin_used+0x278>
    3397:	e8 f1 a6 00 00       	callq  da8d <xTaskGetHandle>
    339c:	48 39 45 98          	cmp    %rax,-0x68(%rbp)
    33a0:	75 1d                	jne    33bf <prvDemonstrateTaskStateAndHandleGetFunctions+0x84>
    33a2:	48 8d 05 d7 3e 02 00 	lea    0x23ed7(%rip),%rax        # 27280 <_IO_stdin_used+0x280>
    33a9:	48 89 05 70 dc 02 00 	mov    %rax,0x2dc70(%rip)        # 31020 <pcStatusMessage>
    33b0:	8b 05 3a dd 02 00    	mov    0x2dd3a(%rip),%eax        # 310f0 <xErrorCount>
    33b6:	83 c0 01             	add    $0x1,%eax
    33b9:	89 05 31 dd 02 00    	mov    %eax,0x2dd31(%rip)        # 310f0 <xErrorCount>
    33bf:	48 8d 3d ee 3e 02 00 	lea    0x23eee(%rip),%rdi        # 272b4 <_IO_stdin_used+0x2b4>
    33c6:	e8 c2 a6 00 00       	callq  da8d <xTaskGetHandle>
    33cb:	48 39 45 98          	cmp    %rax,-0x68(%rbp)
    33cf:	74 1d                	je     33ee <prvDemonstrateTaskStateAndHandleGetFunctions+0xb3>
    33d1:	48 8d 05 a8 3e 02 00 	lea    0x23ea8(%rip),%rax        # 27280 <_IO_stdin_used+0x280>
    33d8:	48 89 05 41 dc 02 00 	mov    %rax,0x2dc41(%rip)        # 31020 <pcStatusMessage>
    33df:	8b 05 0b dd 02 00    	mov    0x2dd0b(%rip),%eax        # 310f0 <xErrorCount>
    33e5:	83 c0 01             	add    $0x1,%eax
    33e8:	89 05 02 dd 02 00    	mov    %eax,0x2dd02(%rip)        # 310f0 <xErrorCount>
    33ee:	48 8b 45 a0          	mov    -0x60(%rbp),%rax
    33f2:	48 89 c7             	mov    %rax,%rdi
    33f5:	e8 e9 a4 00 00       	callq  d8e3 <pcTaskGetName>
    33fa:	48 89 45 a8          	mov    %rax,-0x58(%rbp)
    33fe:	48 8b 45 a8          	mov    -0x58(%rbp),%rax
    3402:	48 8d 35 b0 3e 02 00 	lea    0x23eb0(%rip),%rsi        # 272b9 <_IO_stdin_used+0x2b9>
    3409:	48 89 c7             	mov    %rax,%rdi
    340c:	e8 3f f1 ff ff       	callq  2550 <strcmp@plt>
    3411:	85 c0                	test   %eax,%eax
    3413:	74 1d                	je     3432 <prvDemonstrateTaskStateAndHandleGetFunctions+0xf7>
    3415:	48 8d 05 ac 3e 02 00 	lea    0x23eac(%rip),%rax        # 272c8 <_IO_stdin_used+0x2c8>
    341c:	48 89 05 fd db 02 00 	mov    %rax,0x2dbfd(%rip)        # 31020 <pcStatusMessage>
    3423:	8b 05 c7 dc 02 00    	mov    0x2dcc7(%rip),%eax        # 310f0 <xErrorCount>
    3429:	83 c0 01             	add    $0x1,%eax
    342c:	89 05 be dc 02 00    	mov    %eax,0x2dcbe(%rip)        # 310f0 <xErrorCount>
    3432:	48 8d 3d 80 3e 02 00 	lea    0x23e80(%rip),%rdi        # 272b9 <_IO_stdin_used+0x2b9>
    3439:	e8 4f a6 00 00       	callq  da8d <xTaskGetHandle>
    343e:	48 39 45 a0          	cmp    %rax,-0x60(%rbp)
    3442:	74 1d                	je     3461 <prvDemonstrateTaskStateAndHandleGetFunctions+0x126>
    3444:	48 8d 05 b5 3e 02 00 	lea    0x23eb5(%rip),%rax        # 27300 <_IO_stdin_used+0x300>
    344b:	48 89 05 ce db 02 00 	mov    %rax,0x2dbce(%rip)        # 31020 <pcStatusMessage>
    3452:	8b 05 98 dc 02 00    	mov    0x2dc98(%rip),%eax        # 310f0 <xErrorCount>
    3458:	83 c0 01             	add    $0x1,%eax
    345b:	89 05 8f dc 02 00    	mov    %eax,0x2dc8f(%rip)        # 310f0 <xErrorCount>
    3461:	48 8b 45 98          	mov    -0x68(%rbp),%rax
    3465:	48 89 c7             	mov    %rax,%rdi
    3468:	e8 1b 94 00 00       	callq  c888 <eTaskGetState>
    346d:	85 c0                	test   %eax,%eax
    346f:	74 1d                	je     348e <prvDemonstrateTaskStateAndHandleGetFunctions+0x153>
    3471:	48 8d 05 c0 3e 02 00 	lea    0x23ec0(%rip),%rax        # 27338 <_IO_stdin_used+0x338>
    3478:	48 89 05 a1 db 02 00 	mov    %rax,0x2dba1(%rip)        # 31020 <pcStatusMessage>
    347f:	8b 05 6b dc 02 00    	mov    0x2dc6b(%rip),%eax        # 310f0 <xErrorCount>
    3485:	83 c0 01             	add    $0x1,%eax
    3488:	89 05 62 dc 02 00    	mov    %eax,0x2dc62(%rip)        # 310f0 <xErrorCount>
    348e:	48 8b 45 a0          	mov    -0x60(%rbp),%rax
    3492:	48 89 c7             	mov    %rax,%rdi
    3495:	e8 ee 93 00 00       	callq  c888 <eTaskGetState>
    349a:	83 f8 02             	cmp    $0x2,%eax
    349d:	74 1d                	je     34bc <prvDemonstrateTaskStateAndHandleGetFunctions+0x181>
    349f:	48 8d 05 c2 3e 02 00 	lea    0x23ec2(%rip),%rax        # 27368 <_IO_stdin_used+0x368>
    34a6:	48 89 05 73 db 02 00 	mov    %rax,0x2db73(%rip)        # 31020 <pcStatusMessage>
    34ad:	8b 05 3d dc 02 00    	mov    0x2dc3d(%rip),%eax        # 310f0 <xErrorCount>
    34b3:	83 c0 01             	add    $0x1,%eax
    34b6:	89 05 34 dc 02 00    	mov    %eax,0x2dc34(%rip)        # 310f0 <xErrorCount>
    34bc:	48 8d 75 b0          	lea    -0x50(%rbp),%rsi
    34c0:	48 8b 45 a0          	mov    -0x60(%rbp),%rax
    34c4:	b9 05 00 00 00       	mov    $0x5,%ecx
    34c9:	ba 01 00 00 00       	mov    $0x1,%edx
    34ce:	48 89 c7             	mov    %rax,%rdi
    34d1:	e8 bc bd 00 00       	callq  f292 <vTaskGetInfo>
    34d6:	8b 45 c8             	mov    -0x38(%rbp),%eax
    34d9:	83 f8 02             	cmp    $0x2,%eax
    34dc:	75 3b                	jne    3519 <prvDemonstrateTaskStateAndHandleGetFunctions+0x1de>
    34de:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
    34e2:	48 8d 35 d0 3d 02 00 	lea    0x23dd0(%rip),%rsi        # 272b9 <_IO_stdin_used+0x2b9>
    34e9:	48 89 c7             	mov    %rax,%rdi
    34ec:	e8 5f f0 ff ff       	callq  2550 <strcmp@plt>
    34f1:	85 c0                	test   %eax,%eax
    34f3:	75 24                	jne    3519 <prvDemonstrateTaskStateAndHandleGetFunctions+0x1de>
    34f5:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
    34f9:	48 83 f8 06          	cmp    $0x6,%rax
    34fd:	75 1a                	jne    3519 <prvDemonstrateTaskStateAndHandleGetFunctions+0x1de>
    34ff:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
    3503:	48 8d 15 56 40 13 00 	lea    0x134056(%rip),%rdx        # 137560 <uxTimerTaskStack>
    350a:	48 39 d0             	cmp    %rdx,%rax
    350d:	75 0a                	jne    3519 <prvDemonstrateTaskStateAndHandleGetFunctions+0x1de>
    350f:	48 8b 45 b0          	mov    -0x50(%rbp),%rax
    3513:	48 39 45 a0          	cmp    %rax,-0x60(%rbp)
    3517:	74 1d                	je     3536 <prvDemonstrateTaskStateAndHandleGetFunctions+0x1fb>
    3519:	48 8d 05 78 3e 02 00 	lea    0x23e78(%rip),%rax        # 27398 <_IO_stdin_used+0x398>
    3520:	48 89 05 f9 da 02 00 	mov    %rax,0x2daf9(%rip)        # 31020 <pcStatusMessage>
    3527:	8b 05 c3 db 02 00    	mov    0x2dbc3(%rip),%eax        # 310f0 <xErrorCount>
    352d:	83 c0 01             	add    $0x1,%eax
    3530:	89 05 ba db 02 00    	mov    %eax,0x2dbba(%rip)        # 310f0 <xErrorCount>
    3536:	48 8b 05 db db 02 00 	mov    0x2dbdb(%rip),%rax        # 31118 <xPerformedOneShotTests.4322>
    353d:	48 85 c0             	test   %rax,%rax
    3540:	0f 85 e1 00 00 00    	jne    3627 <prvDemonstrateTaskStateAndHandleGetFunctions+0x2ec>
    3546:	48 c7 05 c7 db 02 00 	movq   $0x1,0x2dbc7(%rip)        # 31118 <xPerformedOneShotTests.4322>
    354d:	01 00 00 00 
    3551:	48 8d 45 90          	lea    -0x70(%rbp),%rax
    3555:	49 89 c1             	mov    %rax,%r9
    3558:	41 b8 00 00 00 00    	mov    $0x0,%r8d
    355e:	b9 00 00 00 00       	mov    $0x0,%ecx
    3563:	ba 46 00 00 00       	mov    $0x46,%edx
    3568:	48 8d 35 74 3e 02 00 	lea    0x23e74(%rip),%rsi        # 273e3 <_IO_stdin_used+0x3e3>
    356f:	48 8d 3d 16 f9 ff ff 	lea    -0x6ea(%rip),%rdi        # 2e8c <prvTestTask>
    3576:	e8 7c 87 00 00       	callq  bcf7 <xTaskCreate>
    357b:	48 83 f8 01          	cmp    $0x1,%rax
    357f:	0f 85 a2 00 00 00    	jne    3627 <prvDemonstrateTaskStateAndHandleGetFunctions+0x2ec>
    3585:	48 8b 45 90          	mov    -0x70(%rbp),%rax
    3589:	48 89 c7             	mov    %rax,%rdi
    358c:	e8 f7 92 00 00       	callq  c888 <eTaskGetState>
    3591:	83 f8 01             	cmp    $0x1,%eax
    3594:	74 1d                	je     35b3 <prvDemonstrateTaskStateAndHandleGetFunctions+0x278>
    3596:	48 8d 05 4b 3e 02 00 	lea    0x23e4b(%rip),%rax        # 273e8 <_IO_stdin_used+0x3e8>
    359d:	48 89 05 7c da 02 00 	mov    %rax,0x2da7c(%rip)        # 31020 <pcStatusMessage>
    35a4:	8b 05 46 db 02 00    	mov    0x2db46(%rip),%eax        # 310f0 <xErrorCount>
    35aa:	83 c0 01             	add    $0x1,%eax
    35ad:	89 05 3d db 02 00    	mov    %eax,0x2db3d(%rip)        # 310f0 <xErrorCount>
    35b3:	48 8b 45 90          	mov    -0x70(%rbp),%rax
    35b7:	48 89 c7             	mov    %rax,%rdi
    35ba:	e8 a2 97 00 00       	callq  cd61 <vTaskSuspend>
    35bf:	48 8b 45 90          	mov    -0x70(%rbp),%rax
    35c3:	48 89 c7             	mov    %rax,%rdi
    35c6:	e8 bd 92 00 00       	callq  c888 <eTaskGetState>
    35cb:	83 f8 03             	cmp    $0x3,%eax
    35ce:	74 1d                	je     35ed <prvDemonstrateTaskStateAndHandleGetFunctions+0x2b2>
    35d0:	48 8d 05 41 3e 02 00 	lea    0x23e41(%rip),%rax        # 27418 <_IO_stdin_used+0x418>
    35d7:	48 89 05 42 da 02 00 	mov    %rax,0x2da42(%rip)        # 31020 <pcStatusMessage>
    35de:	8b 05 0c db 02 00    	mov    0x2db0c(%rip),%eax        # 310f0 <xErrorCount>
    35e4:	83 c0 01             	add    $0x1,%eax
    35e7:	89 05 03 db 02 00    	mov    %eax,0x2db03(%rip)        # 310f0 <xErrorCount>
    35ed:	48 8b 45 90          	mov    -0x70(%rbp),%rax
    35f1:	48 89 c7             	mov    %rax,%rdi
    35f4:	e8 d8 8c 00 00       	callq  c2d1 <vTaskDelete>
    35f9:	48 8b 45 90          	mov    -0x70(%rbp),%rax
    35fd:	48 89 c7             	mov    %rax,%rdi
    3600:	e8 83 92 00 00       	callq  c888 <eTaskGetState>
    3605:	83 f8 04             	cmp    $0x4,%eax
    3608:	74 1d                	je     3627 <prvDemonstrateTaskStateAndHandleGetFunctions+0x2ec>
    360a:	48 8d 05 37 3e 02 00 	lea    0x23e37(%rip),%rax        # 27448 <_IO_stdin_used+0x448>
    3611:	48 89 05 08 da 02 00 	mov    %rax,0x2da08(%rip)        # 31020 <pcStatusMessage>
    3618:	8b 05 d2 da 02 00    	mov    0x2dad2(%rip),%eax        # 310f0 <xErrorCount>
    361e:	83 c0 01             	add    $0x1,%eax
    3621:	89 05 c9 da 02 00    	mov    %eax,0x2dac9(%rip)        # 310f0 <xErrorCount>
    3627:	90                   	nop
    3628:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    362c:	64 48 33 04 25 28 00 	xor    %fs:0x28,%rax
    3633:	00 00 
    3635:	74 05                	je     363c <prvDemonstrateTaskStateAndHandleGetFunctions+0x301>
    3637:	e8 94 ee ff ff       	callq  24d0 <__stack_chk_fail@plt>
    363c:	c9                   	leaveq 
    363d:	c3                   	retq   

000000000000363e <prvDemoQueueSpaceFunctions>:
    363e:	f3 0f 1e fa          	endbr64 
    3642:	55                   	push   %rbp
    3643:	48 89 e5             	mov    %rsp,%rbp
    3646:	48 83 ec 30          	sub    $0x30,%rsp
    364a:	48 89 7d d8          	mov    %rdi,-0x28(%rbp)
    364e:	48 c7 45 e8 00 00 00 	movq   $0x0,-0x18(%rbp)
    3655:	00 
    3656:	48 c7 45 f0 0a 00 00 	movq   $0xa,-0x10(%rbp)
    365d:	00 
    365e:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
    3662:	ba 00 00 00 00       	mov    $0x0,%edx
    3667:	be 00 00 00 00       	mov    $0x0,%esi
    366c:	48 89 c7             	mov    %rax,%rdi
    366f:	e8 7f 1f 00 00       	callq  55f3 <xQueueGenericCreate>
    3674:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
    3678:	48 83 7d e8 00       	cmpq   $0x0,-0x18(%rbp)
    367d:	75 11                	jne    3690 <prvDemoQueueSpaceFunctions+0x52>
    367f:	be 28 03 00 00       	mov    $0x328,%esi
    3684:	48 8d 3d 97 3b 02 00 	lea    0x23b97(%rip),%rdi        # 27222 <_IO_stdin_used+0x222>
    368b:	e8 7c 06 00 00       	callq  3d0c <vAssertCalled>
    3690:	48 c7 45 e0 00 00 00 	movq   $0x0,-0x20(%rbp)
    3697:	00 
    3698:	e9 88 00 00 00       	jmpq   3725 <prvDemoQueueSpaceFunctions+0xe7>
    369d:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
    36a1:	48 89 c7             	mov    %rax,%rdi
    36a4:	e8 65 47 00 00       	callq  7e0e <uxQueueMessagesWaiting>
    36a9:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
    36ad:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    36b1:	48 3b 45 e0          	cmp    -0x20(%rbp),%rax
    36b5:	74 18                	je     36cf <prvDemoQueueSpaceFunctions+0x91>
    36b7:	48 83 7d e8 00       	cmpq   $0x0,-0x18(%rbp)
    36bc:	74 11                	je     36cf <prvDemoQueueSpaceFunctions+0x91>
    36be:	be 37 03 00 00       	mov    $0x337,%esi
    36c3:	48 8d 3d 58 3b 02 00 	lea    0x23b58(%rip),%rdi        # 27222 <_IO_stdin_used+0x222>
    36ca:	e8 3d 06 00 00       	callq  3d0c <vAssertCalled>
    36cf:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
    36d3:	48 89 c7             	mov    %rax,%rdi
    36d6:	e8 77 47 00 00       	callq  7e52 <uxQueueSpacesAvailable>
    36db:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
    36df:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
    36e3:	48 2b 45 e0          	sub    -0x20(%rbp),%rax
    36e7:	48 39 45 f8          	cmp    %rax,-0x8(%rbp)
    36eb:	74 18                	je     3705 <prvDemoQueueSpaceFunctions+0xc7>
    36ed:	48 83 7d e8 00       	cmpq   $0x0,-0x18(%rbp)
    36f2:	74 11                	je     3705 <prvDemoQueueSpaceFunctions+0xc7>
    36f4:	be 43 03 00 00       	mov    $0x343,%esi
    36f9:	48 8d 3d 22 3b 02 00 	lea    0x23b22(%rip),%rdi        # 27222 <_IO_stdin_used+0x222>
    3700:	e8 07 06 00 00       	callq  3d0c <vAssertCalled>
    3705:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
    3709:	b9 00 00 00 00       	mov    $0x0,%ecx
    370e:	ba 00 00 00 00       	mov    $0x0,%edx
    3713:	be 00 00 00 00       	mov    $0x0,%esi
    3718:	48 89 c7             	mov    %rax,%rdi
    371b:	e8 77 26 00 00       	callq  5d97 <xQueueGenericSend>
    3720:	48 83 45 e0 01       	addq   $0x1,-0x20(%rbp)
    3725:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
    3729:	48 3b 45 f0          	cmp    -0x10(%rbp),%rax
    372d:	0f 82 6a ff ff ff    	jb     369d <prvDemoQueueSpaceFunctions+0x5f>
    3733:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
    3737:	48 89 c7             	mov    %rax,%rdi
    373a:	e8 cf 46 00 00       	callq  7e0e <uxQueueMessagesWaiting>
    373f:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
    3743:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    3747:	48 3b 45 f0          	cmp    -0x10(%rbp),%rax
    374b:	74 18                	je     3765 <prvDemoQueueSpaceFunctions+0x127>
    374d:	48 83 7d e8 00       	cmpq   $0x0,-0x18(%rbp)
    3752:	74 11                	je     3765 <prvDemoQueueSpaceFunctions+0x127>
    3754:	be 4f 03 00 00       	mov    $0x34f,%esi
    3759:	48 8d 3d c2 3a 02 00 	lea    0x23ac2(%rip),%rdi        # 27222 <_IO_stdin_used+0x222>
    3760:	e8 a7 05 00 00       	callq  3d0c <vAssertCalled>
    3765:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
    3769:	48 89 c7             	mov    %rax,%rdi
    376c:	e8 e1 46 00 00       	callq  7e52 <uxQueueSpacesAvailable>
    3771:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
    3775:	48 83 7d f8 00       	cmpq   $0x0,-0x8(%rbp)
    377a:	74 18                	je     3794 <prvDemoQueueSpaceFunctions+0x156>
    377c:	48 83 7d e8 00       	cmpq   $0x0,-0x18(%rbp)
    3781:	74 11                	je     3794 <prvDemoQueueSpaceFunctions+0x156>
    3783:	be 56 03 00 00       	mov    $0x356,%esi
    3788:	48 8d 3d 93 3a 02 00 	lea    0x23a93(%rip),%rdi        # 27222 <_IO_stdin_used+0x222>
    378f:	e8 78 05 00 00       	callq  3d0c <vAssertCalled>
    3794:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
    3798:	be 00 00 00 00       	mov    $0x0,%esi
    379d:	48 89 c7             	mov    %rax,%rdi
    37a0:	e8 d4 1b 00 00       	callq  5379 <xQueueGenericReset>
    37a5:	e9 e6 fe ff ff       	jmpq   3690 <prvDemoQueueSpaceFunctions+0x52>

00000000000037aa <prvPermanentlyBlockingSemaphoreTask>:
    37aa:	f3 0f 1e fa          	endbr64 
    37ae:	55                   	push   %rbp
    37af:	48 89 e5             	mov    %rsp,%rbp
    37b2:	48 83 ec 20          	sub    $0x20,%rsp
    37b6:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
    37ba:	ba 03 00 00 00       	mov    $0x3,%edx
    37bf:	be 00 00 00 00       	mov    $0x0,%esi
    37c4:	bf 01 00 00 00       	mov    $0x1,%edi
    37c9:	e8 25 1e 00 00       	callq  55f3 <xQueueGenericCreate>
    37ce:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
    37d2:	48 83 7d f8 00       	cmpq   $0x0,-0x8(%rbp)
    37d7:	75 11                	jne    37ea <prvPermanentlyBlockingSemaphoreTask+0x40>
    37d9:	be 6d 03 00 00       	mov    $0x36d,%esi
    37de:	48 8d 3d 3d 3a 02 00 	lea    0x23a3d(%rip),%rdi        # 27222 <_IO_stdin_used+0x222>
    37e5:	e8 22 05 00 00       	callq  3d0c <vAssertCalled>
    37ea:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    37ee:	48 c7 c6 ff ff ff ff 	mov    $0xffffffffffffffff,%rsi
    37f5:	48 89 c7             	mov    %rax,%rdi
    37f8:	e8 77 37 00 00       	callq  6f74 <xQueueSemaphoreTake>
    37fd:	48 83 7d e8 00       	cmpq   $0x0,-0x18(%rbp)
    3802:	75 11                	jne    3815 <prvPermanentlyBlockingSemaphoreTask+0x6b>
    3804:	be 73 03 00 00       	mov    $0x373,%esi
    3809:	48 8d 3d 12 3a 02 00 	lea    0x23a12(%rip),%rdi        # 27222 <_IO_stdin_used+0x222>
    3810:	e8 f7 04 00 00       	callq  3d0c <vAssertCalled>
    3815:	bf 00 00 00 00       	mov    $0x0,%edi
    381a:	e8 b2 8a 00 00       	callq  c2d1 <vTaskDelete>
    381f:	90                   	nop
    3820:	c9                   	leaveq 
    3821:	c3                   	retq   

0000000000003822 <prvPermanentlyBlockingNotificationTask>:
    3822:	f3 0f 1e fa          	endbr64 
    3826:	55                   	push   %rbp
    3827:	48 89 e5             	mov    %rsp,%rbp
    382a:	48 83 ec 10          	sub    $0x10,%rsp
    382e:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
    3832:	48 c7 c2 ff ff ff ff 	mov    $0xffffffffffffffff,%rdx
    3839:	be 01 00 00 00       	mov    $0x1,%esi
    383e:	bf 00 00 00 00       	mov    $0x0,%edi
    3843:	e8 5e c7 00 00       	callq  ffa6 <ulTaskGenericNotifyTake>
    3848:	48 83 7d f8 00       	cmpq   $0x0,-0x8(%rbp)
    384d:	75 11                	jne    3860 <prvPermanentlyBlockingNotificationTask+0x3e>
    384f:	be 83 03 00 00       	mov    $0x383,%esi
    3854:	48 8d 3d c7 39 02 00 	lea    0x239c7(%rip),%rdi        # 27222 <_IO_stdin_used+0x222>
    385b:	e8 ac 04 00 00       	callq  3d0c <vAssertCalled>
    3860:	bf 00 00 00 00       	mov    $0x0,%edi
    3865:	e8 67 8a 00 00       	callq  c2d1 <vTaskDelete>
    386a:	90                   	nop
    386b:	c9                   	leaveq 
    386c:	c3                   	retq   

000000000000386d <prvReloadModeTestTimerCallback>:
    386d:	f3 0f 1e fa          	endbr64 
    3871:	55                   	push   %rbp
    3872:	48 89 e5             	mov    %rsp,%rbp
    3875:	48 83 ec 20          	sub    $0x20,%rsp
    3879:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
    387d:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
    3881:	48 89 c7             	mov    %rax,%rdi
    3884:	e8 18 eb 00 00       	callq  123a1 <pvTimerGetTimerID>
    3889:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
    388d:	48 83 45 f8 01       	addq   $0x1,-0x8(%rbp)
    3892:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
    3896:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
    389a:	48 89 d6             	mov    %rdx,%rsi
    389d:	48 89 c7             	mov    %rax,%rdi
    38a0:	e8 48 eb 00 00       	callq  123ed <vTimerSetTimerID>
    38a5:	90                   	nop
    38a6:	c9                   	leaveq 
    38a7:	c3                   	retq   

00000000000038a8 <prvDemonstrateChangingTimerReloadMode>:
    38a8:	f3 0f 1e fa          	endbr64 
    38ac:	55                   	push   %rbp
    38ad:	48 89 e5             	mov    %rsp,%rbp
    38b0:	48 83 ec 30          	sub    $0x30,%rsp
    38b4:	48 89 7d d8          	mov    %rdi,-0x28(%rbp)
    38b8:	48 8d 05 7a 39 02 00 	lea    0x2397a(%rip),%rax        # 27239 <_IO_stdin_used+0x239>
    38bf:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
    38c3:	48 c7 45 f0 64 00 00 	movq   $0x64,-0x10(%rbp)
    38ca:	00 
    38cb:	48 8b 75 f0          	mov    -0x10(%rbp),%rsi
    38cf:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
    38d3:	4c 8d 05 93 ff ff ff 	lea    -0x6d(%rip),%r8        # 386d <prvReloadModeTestTimerCallback>
    38da:	b9 00 00 00 00       	mov    $0x0,%ecx
    38df:	ba 00 00 00 00       	mov    $0x0,%edx
    38e4:	48 89 c7             	mov    %rax,%rdi
    38e7:	e8 d9 da 00 00       	callq  113c5 <xTimerCreate>
    38ec:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
    38f0:	48 83 7d f8 00       	cmpq   $0x0,-0x8(%rbp)
    38f5:	75 11                	jne    3908 <prvDemonstrateChangingTimerReloadMode+0x60>
    38f7:	be a1 03 00 00       	mov    $0x3a1,%esi
    38fc:	48 8d 3d 1f 39 02 00 	lea    0x2391f(%rip),%rdi        # 27222 <_IO_stdin_used+0x222>
    3903:	e8 04 04 00 00       	callq  3d0c <vAssertCalled>
    3908:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    390c:	48 89 c7             	mov    %rax,%rdi
    390f:	e8 29 ea 00 00       	callq  1233d <xTimerIsTimerActive>
    3914:	48 85 c0             	test   %rax,%rax
    3917:	74 11                	je     392a <prvDemonstrateChangingTimerReloadMode+0x82>
    3919:	be a2 03 00 00       	mov    $0x3a2,%esi
    391e:	48 8d 3d fd 38 02 00 	lea    0x238fd(%rip),%rdi        # 27222 <_IO_stdin_used+0x222>
    3925:	e8 e2 03 00 00       	callq  3d0c <vAssertCalled>
    392a:	e8 46 e0 00 00       	callq  11975 <xTimerGetTimerDaemonTaskHandle>
    392f:	48 85 c0             	test   %rax,%rax
    3932:	75 11                	jne    3945 <prvDemonstrateChangingTimerReloadMode+0x9d>
    3934:	be a3 03 00 00       	mov    $0x3a3,%esi
    3939:	48 8d 3d e2 38 02 00 	lea    0x238e2(%rip),%rdi        # 27222 <_IO_stdin_used+0x222>
    3940:	e8 c7 03 00 00       	callq  3d0c <vAssertCalled>
    3945:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    3949:	48 89 c7             	mov    %rax,%rdi
    394c:	e8 a4 e1 00 00       	callq  11af5 <pcTimerGetName>
    3951:	48 89 c2             	mov    %rax,%rdx
    3954:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
    3958:	48 89 d6             	mov    %rdx,%rsi
    395b:	48 89 c7             	mov    %rax,%rdi
    395e:	e8 ed eb ff ff       	callq  2550 <strcmp@plt>
    3963:	85 c0                	test   %eax,%eax
    3965:	74 11                	je     3978 <prvDemonstrateChangingTimerReloadMode+0xd0>
    3967:	be a4 03 00 00       	mov    $0x3a4,%esi
    396c:	48 8d 3d af 38 02 00 	lea    0x238af(%rip),%rdi        # 27222 <_IO_stdin_used+0x222>
    3973:	e8 94 03 00 00       	callq  3d0c <vAssertCalled>
    3978:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    397c:	48 89 c7             	mov    %rax,%rdi
    397f:	e8 1f e0 00 00       	callq  119a3 <xTimerGetPeriod>
    3984:	48 39 45 f0          	cmp    %rax,-0x10(%rbp)
    3988:	74 11                	je     399b <prvDemonstrateChangingTimerReloadMode+0xf3>
    398a:	be a5 03 00 00       	mov    $0x3a5,%esi
    398f:	48 8d 3d 8c 38 02 00 	lea    0x2388c(%rip),%rdi        # 27222 <_IO_stdin_used+0x222>
    3996:	e8 71 03 00 00       	callq  3d0c <vAssertCalled>
    399b:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    399f:	be 00 00 00 00       	mov    $0x0,%esi
    39a4:	48 89 c7             	mov    %rax,%rdi
    39a7:	e8 41 ea 00 00       	callq  123ed <vTimerSetTimerID>
    39ac:	e8 e7 9e 00 00       	callq  d898 <xTaskGetTickCount>
    39b1:	48 89 c2             	mov    %rax,%rdx
    39b4:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    39b8:	49 c7 c0 ff ff ff ff 	mov    $0xffffffffffffffff,%r8
    39bf:	b9 00 00 00 00       	mov    $0x0,%ecx
    39c4:	be 01 00 00 00       	mov    $0x1,%esi
    39c9:	48 89 c7             	mov    %rax,%rdi
    39cc:	e8 64 dc 00 00       	callq  11635 <xTimerGenericCommand>
    39d1:	48 8b 55 f0          	mov    -0x10(%rbp),%rdx
    39d5:	48 89 d0             	mov    %rdx,%rax
    39d8:	48 01 c0             	add    %rax,%rax
    39db:	48 01 d0             	add    %rdx,%rax
    39de:	48 89 c7             	mov    %rax,%rdi
    39e1:	e8 bc 8d 00 00       	callq  c7a2 <vTaskDelay>
    39e6:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    39ea:	48 89 c7             	mov    %rax,%rdi
    39ed:	e8 af e9 00 00       	callq  123a1 <pvTimerGetTimerID>
    39f2:	48 83 f8 01          	cmp    $0x1,%rax
    39f6:	74 11                	je     3a09 <prvDemonstrateChangingTimerReloadMode+0x161>
    39f8:	be ad 03 00 00       	mov    $0x3ad,%esi
    39fd:	48 8d 3d 1e 38 02 00 	lea    0x2381e(%rip),%rdi        # 27222 <_IO_stdin_used+0x222>
    3a04:	e8 03 03 00 00       	callq  3d0c <vAssertCalled>
    3a09:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    3a0d:	be 01 00 00 00       	mov    $0x1,%esi
    3a12:	48 89 c7             	mov    %rax,%rdi
    3a15:	e8 c3 df 00 00       	callq  119dd <vTimerSetReloadMode>
    3a1a:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    3a1e:	be 00 00 00 00       	mov    $0x0,%esi
    3a23:	48 89 c7             	mov    %rax,%rdi
    3a26:	e8 c2 e9 00 00       	callq  123ed <vTimerSetTimerID>
    3a2b:	e8 68 9e 00 00       	callq  d898 <xTaskGetTickCount>
    3a30:	48 89 c2             	mov    %rax,%rdx
    3a33:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    3a37:	41 b8 00 00 00 00    	mov    $0x0,%r8d
    3a3d:	b9 00 00 00 00       	mov    $0x0,%ecx
    3a42:	be 01 00 00 00       	mov    $0x1,%esi
    3a47:	48 89 c7             	mov    %rax,%rdi
    3a4a:	e8 e6 db 00 00       	callq  11635 <xTimerGenericCommand>
    3a4f:	48 8b 55 f0          	mov    -0x10(%rbp),%rdx
    3a53:	48 89 d0             	mov    %rdx,%rax
    3a56:	48 01 c0             	add    %rax,%rax
    3a59:	48 01 c2             	add    %rax,%rdx
    3a5c:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
    3a60:	48 d1 e8             	shr    %rax
    3a63:	48 01 d0             	add    %rdx,%rax
    3a66:	48 89 c7             	mov    %rax,%rdi
    3a69:	e8 34 8d 00 00       	callq  c7a2 <vTaskDelay>
    3a6e:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    3a72:	48 89 c7             	mov    %rax,%rdi
    3a75:	e8 27 e9 00 00       	callq  123a1 <pvTimerGetTimerID>
    3a7a:	48 83 f8 03          	cmp    $0x3,%rax
    3a7e:	74 11                	je     3a91 <prvDemonstrateChangingTimerReloadMode+0x1e9>
    3a80:	be b5 03 00 00       	mov    $0x3b5,%esi
    3a85:	48 8d 3d 96 37 02 00 	lea    0x23796(%rip),%rdi        # 27222 <_IO_stdin_used+0x222>
    3a8c:	e8 7b 02 00 00       	callq  3d0c <vAssertCalled>
    3a91:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    3a95:	41 b8 00 00 00 00    	mov    $0x0,%r8d
    3a9b:	b9 00 00 00 00       	mov    $0x0,%ecx
    3aa0:	ba 00 00 00 00       	mov    $0x0,%edx
    3aa5:	be 03 00 00 00       	mov    $0x3,%esi
    3aaa:	48 89 c7             	mov    %rax,%rdi
    3aad:	e8 83 db 00 00       	callq  11635 <xTimerGenericCommand>
    3ab2:	48 85 c0             	test   %rax,%rax
    3ab5:	75 11                	jne    3ac8 <prvDemonstrateChangingTimerReloadMode+0x220>
    3ab7:	be b6 03 00 00       	mov    $0x3b6,%esi
    3abc:	48 8d 3d 5f 37 02 00 	lea    0x2375f(%rip),%rdi        # 27222 <_IO_stdin_used+0x222>
    3ac3:	e8 44 02 00 00       	callq  3d0c <vAssertCalled>
    3ac8:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    3acc:	be 00 00 00 00       	mov    $0x0,%esi
    3ad1:	48 89 c7             	mov    %rax,%rdi
    3ad4:	e8 04 df 00 00       	callq  119dd <vTimerSetReloadMode>
    3ad9:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    3add:	be 00 00 00 00       	mov    $0x0,%esi
    3ae2:	48 89 c7             	mov    %rax,%rdi
    3ae5:	e8 03 e9 00 00       	callq  123ed <vTimerSetTimerID>
    3aea:	e8 a9 9d 00 00       	callq  d898 <xTaskGetTickCount>
    3aef:	48 89 c2             	mov    %rax,%rdx
    3af2:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    3af6:	41 b8 00 00 00 00    	mov    $0x0,%r8d
    3afc:	b9 00 00 00 00       	mov    $0x0,%ecx
    3b01:	be 01 00 00 00       	mov    $0x1,%esi
    3b06:	48 89 c7             	mov    %rax,%rdi
    3b09:	e8 27 db 00 00       	callq  11635 <xTimerGenericCommand>
    3b0e:	48 8b 55 f0          	mov    -0x10(%rbp),%rdx
    3b12:	48 89 d0             	mov    %rdx,%rax
    3b15:	48 01 c0             	add    %rax,%rax
    3b18:	48 01 d0             	add    %rdx,%rax
    3b1b:	48 89 c7             	mov    %rax,%rdi
    3b1e:	e8 7f 8c 00 00       	callq  c7a2 <vTaskDelay>
    3b23:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    3b27:	41 b8 00 00 00 00    	mov    $0x0,%r8d
    3b2d:	b9 00 00 00 00       	mov    $0x0,%ecx
    3b32:	ba 00 00 00 00       	mov    $0x0,%edx
    3b37:	be 03 00 00 00       	mov    $0x3,%esi
    3b3c:	48 89 c7             	mov    %rax,%rdi
    3b3f:	e8 f1 da 00 00       	callq  11635 <xTimerGenericCommand>
    3b44:	48 85 c0             	test   %rax,%rax
    3b47:	75 11                	jne    3b5a <prvDemonstrateChangingTimerReloadMode+0x2b2>
    3b49:	be be 03 00 00       	mov    $0x3be,%esi
    3b4e:	48 8d 3d cd 36 02 00 	lea    0x236cd(%rip),%rdi        # 27222 <_IO_stdin_used+0x222>
    3b55:	e8 b2 01 00 00       	callq  3d0c <vAssertCalled>
    3b5a:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    3b5e:	48 89 c7             	mov    %rax,%rdi
    3b61:	e8 3b e8 00 00       	callq  123a1 <pvTimerGetTimerID>
    3b66:	48 83 f8 01          	cmp    $0x1,%rax
    3b6a:	74 11                	je     3b7d <prvDemonstrateChangingTimerReloadMode+0x2d5>
    3b6c:	be bf 03 00 00       	mov    $0x3bf,%esi
    3b71:	48 8d 3d aa 36 02 00 	lea    0x236aa(%rip),%rdi        # 27222 <_IO_stdin_used+0x222>
    3b78:	e8 8f 01 00 00       	callq  3d0c <vAssertCalled>
    3b7d:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    3b81:	49 c7 c0 ff ff ff ff 	mov    $0xffffffffffffffff,%r8
    3b88:	b9 00 00 00 00       	mov    $0x0,%ecx
    3b8d:	ba 00 00 00 00       	mov    $0x0,%edx
    3b92:	be 05 00 00 00       	mov    $0x5,%esi
    3b97:	48 89 c7             	mov    %rax,%rdi
    3b9a:	e8 96 da 00 00       	callq  11635 <xTimerGenericCommand>
    3b9f:	bf 00 00 00 00       	mov    $0x0,%edi
    3ba4:	e8 28 87 00 00       	callq  c2d1 <vTaskDelete>
    3ba9:	90                   	nop
    3baa:	c9                   	leaveq 
    3bab:	c3                   	retq   

0000000000003bac <main>:
    3bac:	f3 0f 1e fa          	endbr64 
    3bb0:	55                   	push   %rbp
    3bb1:	48 89 e5             	mov    %rsp,%rbp
    3bb4:	48 8d 35 9f 02 00 00 	lea    0x29f(%rip),%rsi        # 3e5a <handle_sigint>
    3bbb:	bf 02 00 00 00       	mov    $0x2,%edi
    3bc0:	e8 ab e9 ff ff       	callq  2570 <signal@plt>
    3bc5:	bf 01 00 00 00       	mov    $0x1,%edi
    3bca:	e8 9c fa 01 00       	callq  2366b <vTraceEnable>
    3bcf:	48 8d 3d a2 38 02 00 	lea    0x238a2(%rip),%rdi        # 27478 <_IO_stdin_used+0x478>
    3bd6:	e8 45 e8 ff ff       	callq  2420 <puts@plt>
    3bdb:	e8 76 ff 01 00       	callq  23b56 <uiTraceStart>
    3be0:	e8 c4 02 00 00       	callq  3ea9 <console_init>
    3be5:	48 8d 3d e3 38 02 00 	lea    0x238e3(%rip),%rdi        # 274cf <_IO_stdin_used+0x4cf>
    3bec:	b8 00 00 00 00       	mov    $0x0,%eax
    3bf1:	e8 d6 02 00 00       	callq  3ecc <console_print>
    3bf6:	e8 f2 09 00 00       	callq  45ed <main_ctfs>
    3bfb:	b8 00 00 00 00       	mov    $0x0,%eax
    3c00:	5d                   	pop    %rbp
    3c01:	c3                   	retq   

0000000000003c02 <vApplicationIdleHook>:
    3c02:	f3 0f 1e fa          	endbr64 
    3c06:	55                   	push   %rbp
    3c07:	48 89 e5             	mov    %rsp,%rbp
    3c0a:	bf 98 3a 00 00       	mov    $0x3a98,%edi
    3c0f:	e8 1c eb ff ff       	callq  2730 <usleep@plt>
    3c14:	e8 0e 00 00 00       	callq  3c27 <traceOnEnter>
    3c19:	90                   	nop
    3c1a:	5d                   	pop    %rbp
    3c1b:	c3                   	retq   

0000000000003c1c <vApplicationTickHook>:
    3c1c:	f3 0f 1e fa          	endbr64 
    3c20:	55                   	push   %rbp
    3c21:	48 89 e5             	mov    %rsp,%rbp
    3c24:	90                   	nop
    3c25:	5d                   	pop    %rbp
    3c26:	c3                   	retq   

0000000000003c27 <traceOnEnter>:
    3c27:	f3 0f 1e fa          	endbr64 
    3c2b:	55                   	push   %rbp
    3c2c:	48 89 e5             	mov    %rsp,%rbp
    3c2f:	90                   	nop
    3c30:	5d                   	pop    %rbp
    3c31:	c3                   	retq   

0000000000003c32 <vLoggingPrintf>:
    3c32:	f3 0f 1e fa          	endbr64 
    3c36:	55                   	push   %rbp
    3c37:	48 89 e5             	mov    %rsp,%rbp
    3c3a:	48 81 ec e0 00 00 00 	sub    $0xe0,%rsp
    3c41:	48 89 bd 28 ff ff ff 	mov    %rdi,-0xd8(%rbp)
    3c48:	48 89 b5 58 ff ff ff 	mov    %rsi,-0xa8(%rbp)
    3c4f:	48 89 95 60 ff ff ff 	mov    %rdx,-0xa0(%rbp)
    3c56:	48 89 8d 68 ff ff ff 	mov    %rcx,-0x98(%rbp)
    3c5d:	4c 89 85 70 ff ff ff 	mov    %r8,-0x90(%rbp)
    3c64:	4c 89 8d 78 ff ff ff 	mov    %r9,-0x88(%rbp)
    3c6b:	84 c0                	test   %al,%al
    3c6d:	74 20                	je     3c8f <vLoggingPrintf+0x5d>
    3c6f:	0f 29 45 80          	movaps %xmm0,-0x80(%rbp)
    3c73:	0f 29 4d 90          	movaps %xmm1,-0x70(%rbp)
    3c77:	0f 29 55 a0          	movaps %xmm2,-0x60(%rbp)
    3c7b:	0f 29 5d b0          	movaps %xmm3,-0x50(%rbp)
    3c7f:	0f 29 65 c0          	movaps %xmm4,-0x40(%rbp)
    3c83:	0f 29 6d d0          	movaps %xmm5,-0x30(%rbp)
    3c87:	0f 29 75 e0          	movaps %xmm6,-0x20(%rbp)
    3c8b:	0f 29 7d f0          	movaps %xmm7,-0x10(%rbp)
    3c8f:	64 48 8b 04 25 28 00 	mov    %fs:0x28,%rax
    3c96:	00 00 
    3c98:	48 89 85 48 ff ff ff 	mov    %rax,-0xb8(%rbp)
    3c9f:	31 c0                	xor    %eax,%eax
    3ca1:	c7 85 30 ff ff ff 08 	movl   $0x8,-0xd0(%rbp)
    3ca8:	00 00 00 
    3cab:	c7 85 34 ff ff ff 30 	movl   $0x30,-0xcc(%rbp)
    3cb2:	00 00 00 
    3cb5:	48 8d 45 10          	lea    0x10(%rbp),%rax
    3cb9:	48 89 85 38 ff ff ff 	mov    %rax,-0xc8(%rbp)
    3cc0:	48 8d 85 50 ff ff ff 	lea    -0xb0(%rbp),%rax
    3cc7:	48 89 85 40 ff ff ff 	mov    %rax,-0xc0(%rbp)
    3cce:	48 8d 95 30 ff ff ff 	lea    -0xd0(%rbp),%rdx
    3cd5:	48 8b 85 28 ff ff ff 	mov    -0xd8(%rbp),%rax
    3cdc:	48 89 d6             	mov    %rdx,%rsi
    3cdf:	48 89 c7             	mov    %rax,%rdi
    3ce2:	e8 19 e9 ff ff       	callq  2600 <vprintf@plt>
    3ce7:	90                   	nop
    3ce8:	48 8b 85 48 ff ff ff 	mov    -0xb8(%rbp),%rax
    3cef:	64 48 33 04 25 28 00 	xor    %fs:0x28,%rax
    3cf6:	00 00 
    3cf8:	74 05                	je     3cff <vLoggingPrintf+0xcd>
    3cfa:	e8 d1 e7 ff ff       	callq  24d0 <__stack_chk_fail@plt>
    3cff:	c9                   	leaveq 
    3d00:	c3                   	retq   

0000000000003d01 <vApplicationDaemonTaskStartupHook>:
    3d01:	f3 0f 1e fa          	endbr64 
    3d05:	55                   	push   %rbp
    3d06:	48 89 e5             	mov    %rsp,%rbp
    3d09:	90                   	nop
    3d0a:	5d                   	pop    %rbp
    3d0b:	c3                   	retq   

0000000000003d0c <vAssertCalled>:
    3d0c:	f3 0f 1e fa          	endbr64 
    3d10:	55                   	push   %rbp
    3d11:	48 89 e5             	mov    %rsp,%rbp
    3d14:	48 83 ec 20          	sub    $0x20,%rsp
    3d18:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
    3d1c:	48 89 75 e0          	mov    %rsi,-0x20(%rbp)
    3d20:	c7 45 fc 00 00 00 00 	movl   $0x0,-0x4(%rbp)
    3d27:	e8 a3 f0 00 00       	callq  12dcf <vPortEnterCritical>
    3d2c:	48 8b 05 ed d3 02 00 	mov    0x2d3ed(%rip),%rax        # 31120 <xPrinted.4656>
    3d33:	48 85 c0             	test   %rax,%rax
    3d36:	75 21                	jne    3d59 <vAssertCalled+0x4d>
    3d38:	48 c7 05 dd d3 02 00 	movq   $0x1,0x2d3dd(%rip)        # 31120 <xPrinted.4656>
    3d3f:	01 00 00 00 
    3d43:	48 8b 05 de d2 02 00 	mov    0x2d2de(%rip),%rax        # 31028 <xTraceRunning>
    3d4a:	48 83 f8 01          	cmp    $0x1,%rax
    3d4e:	75 09                	jne    3d59 <vAssertCalled+0x4d>
    3d50:	e8 13 00 00 00       	callq  3d68 <prvSaveTraceFile>
    3d55:	eb 02                	jmp    3d59 <vAssertCalled+0x4d>
    3d57:	90                   	nop
    3d58:	90                   	nop
    3d59:	8b 45 fc             	mov    -0x4(%rbp),%eax
    3d5c:	85 c0                	test   %eax,%eax
    3d5e:	74 f7                	je     3d57 <vAssertCalled+0x4b>
    3d60:	e8 98 f0 00 00       	callq  12dfd <vPortExitCritical>
    3d65:	90                   	nop
    3d66:	c9                   	leaveq 
    3d67:	c3                   	retq   

0000000000003d68 <prvSaveTraceFile>:
    3d68:	f3 0f 1e fa          	endbr64 
    3d6c:	55                   	push   %rbp
    3d6d:	48 89 e5             	mov    %rsp,%rbp
    3d70:	48 83 ec 10          	sub    $0x10,%rsp
    3d74:	e8 fa fe 01 00       	callq  23c73 <vTraceStop>
    3d79:	48 8d 35 6a 37 02 00 	lea    0x2376a(%rip),%rsi        # 274ea <_IO_stdin_used+0x4ea>
    3d80:	48 8d 3d 66 37 02 00 	lea    0x23766(%rip),%rdi        # 274ed <_IO_stdin_used+0x4ed>
    3d87:	e8 d4 e8 ff ff       	callq  2660 <fopen@plt>
    3d8c:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
    3d90:	48 83 7d f8 00       	cmpq   $0x0,-0x8(%rbp)
    3d95:	74 3a                	je     3dd1 <prvSaveTraceFile+0x69>
    3d97:	48 8b 05 8a 37 13 00 	mov    0x13378a(%rip),%rax        # 137528 <RecorderDataPtr>
    3d9e:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
    3da2:	48 89 d1             	mov    %rdx,%rcx
    3da5:	ba 01 00 00 00       	mov    $0x1,%edx
    3daa:	be bc b9 02 00       	mov    $0x2b9bc,%esi
    3daf:	48 89 c7             	mov    %rax,%rdi
    3db2:	e8 19 e9 ff ff       	callq  26d0 <fwrite@plt>
    3db7:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    3dbb:	48 89 c7             	mov    %rax,%rdi
    3dbe:	e8 dd e6 ff ff       	callq  24a0 <fclose@plt>
    3dc3:	48 8d 3d 2e 37 02 00 	lea    0x2372e(%rip),%rdi        # 274f8 <_IO_stdin_used+0x4f8>
    3dca:	e8 51 e6 ff ff       	callq  2420 <puts@plt>
    3dcf:	eb 0c                	jmp    3ddd <prvSaveTraceFile+0x75>
    3dd1:	48 8d 3d 48 37 02 00 	lea    0x23748(%rip),%rdi        # 27520 <_IO_stdin_used+0x520>
    3dd8:	e8 43 e6 ff ff       	callq  2420 <puts@plt>
    3ddd:	90                   	nop
    3dde:	c9                   	leaveq 
    3ddf:	c3                   	retq   

0000000000003de0 <vApplicationGetIdleTaskMemory>:
    3de0:	f3 0f 1e fa          	endbr64 
    3de4:	55                   	push   %rbp
    3de5:	48 89 e5             	mov    %rsp,%rbp
    3de8:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
    3dec:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
    3df0:	48 89 55 e8          	mov    %rdx,-0x18(%rbp)
    3df4:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    3df8:	48 8d 15 41 d3 02 00 	lea    0x2d341(%rip),%rdx        # 31140 <xIdleTaskTCB.4670>
    3dff:	48 89 10             	mov    %rdx,(%rax)
    3e02:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
    3e06:	48 8d 15 f3 d3 02 00 	lea    0x2d3f3(%rip),%rdx        # 31200 <uxIdleTaskStack.4671>
    3e0d:	48 89 10             	mov    %rdx,(%rax)
    3e10:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
    3e14:	c7 00 46 00 00 00    	movl   $0x46,(%rax)
    3e1a:	90                   	nop
    3e1b:	5d                   	pop    %rbp
    3e1c:	c3                   	retq   

0000000000003e1d <vApplicationGetTimerTaskMemory>:
    3e1d:	f3 0f 1e fa          	endbr64 
    3e21:	55                   	push   %rbp
    3e22:	48 89 e5             	mov    %rsp,%rbp
    3e25:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
    3e29:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
    3e2d:	48 89 55 e8          	mov    %rdx,-0x18(%rbp)
    3e31:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    3e35:	48 8d 15 04 d6 02 00 	lea    0x2d604(%rip),%rdx        # 31440 <xTimerTaskTCB.4677>
    3e3c:	48 89 10             	mov    %rdx,(%rax)
    3e3f:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
    3e43:	48 8d 15 16 37 13 00 	lea    0x133716(%rip),%rdx        # 137560 <uxTimerTaskStack>
    3e4a:	48 89 10             	mov    %rdx,(%rax)
    3e4d:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
    3e51:	c7 00 8c 00 00 00    	movl   $0x8c,(%rax)
    3e57:	90                   	nop
    3e58:	5d                   	pop    %rbp
    3e59:	c3                   	retq   

0000000000003e5a <handle_sigint>:
    3e5a:	f3 0f 1e fa          	endbr64 
    3e5e:	55                   	push   %rbp
    3e5f:	48 89 e5             	mov    %rsp,%rbp
    3e62:	48 83 ec 20          	sub    $0x20,%rsp
    3e66:	89 7d ec             	mov    %edi,-0x14(%rbp)
    3e69:	48 8d 3d d8 36 02 00 	lea    0x236d8(%rip),%rdi        # 27548 <_IO_stdin_used+0x548>
    3e70:	e8 4b e6 ff ff       	callq  24c0 <chdir@plt>
    3e75:	89 45 fc             	mov    %eax,-0x4(%rbp)
    3e78:	83 7d fc ff          	cmpl   $0xffffffff,-0x4(%rbp)
    3e7c:	75 21                	jne    3e9f <handle_sigint+0x45>
    3e7e:	e8 7d e5 ff ff       	callq  2400 <__errno_location@plt>
    3e83:	8b 00                	mov    (%rax),%eax
    3e85:	89 c2                	mov    %eax,%edx
    3e87:	48 8d 35 ba 36 02 00 	lea    0x236ba(%rip),%rsi        # 27548 <_IO_stdin_used+0x548>
    3e8e:	48 8d 3d ee 36 02 00 	lea    0x236ee(%rip),%rdi        # 27583 <_IO_stdin_used+0x583>
    3e95:	b8 00 00 00 00       	mov    $0x0,%eax
    3e9a:	e8 41 e6 ff ff       	callq  24e0 <printf@plt>
    3e9f:	bf 02 00 00 00       	mov    $0x2,%edi
    3ea4:	e8 17 e8 ff ff       	callq  26c0 <exit@plt>

0000000000003ea9 <console_init>:
    3ea9:	f3 0f 1e fa          	endbr64 
    3ead:	55                   	push   %rbp
    3eae:	48 89 e5             	mov    %rsp,%rbp
    3eb1:	48 8d 35 08 3b 13 00 	lea    0x133b08(%rip),%rsi        # 1379c0 <xStdioMutexBuffer>
    3eb8:	bf 01 00 00 00       	mov    $0x1,%edi
    3ebd:	e8 e9 1a 00 00       	callq  59ab <xQueueCreateMutexStatic>
    3ec2:	48 89 05 9f 3b 13 00 	mov    %rax,0x133b9f(%rip)        # 137a68 <xStdioMutex>
    3ec9:	90                   	nop
    3eca:	5d                   	pop    %rbp
    3ecb:	c3                   	retq   

0000000000003ecc <console_print>:
    3ecc:	f3 0f 1e fa          	endbr64 
    3ed0:	55                   	push   %rbp
    3ed1:	48 89 e5             	mov    %rsp,%rbp
    3ed4:	48 81 ec e0 00 00 00 	sub    $0xe0,%rsp
    3edb:	48 89 bd 28 ff ff ff 	mov    %rdi,-0xd8(%rbp)
    3ee2:	48 89 b5 58 ff ff ff 	mov    %rsi,-0xa8(%rbp)
    3ee9:	48 89 95 60 ff ff ff 	mov    %rdx,-0xa0(%rbp)
    3ef0:	48 89 8d 68 ff ff ff 	mov    %rcx,-0x98(%rbp)
    3ef7:	4c 89 85 70 ff ff ff 	mov    %r8,-0x90(%rbp)
    3efe:	4c 89 8d 78 ff ff ff 	mov    %r9,-0x88(%rbp)
    3f05:	84 c0                	test   %al,%al
    3f07:	74 20                	je     3f29 <console_print+0x5d>
    3f09:	0f 29 45 80          	movaps %xmm0,-0x80(%rbp)
    3f0d:	0f 29 4d 90          	movaps %xmm1,-0x70(%rbp)
    3f11:	0f 29 55 a0          	movaps %xmm2,-0x60(%rbp)
    3f15:	0f 29 5d b0          	movaps %xmm3,-0x50(%rbp)
    3f19:	0f 29 65 c0          	movaps %xmm4,-0x40(%rbp)
    3f1d:	0f 29 6d d0          	movaps %xmm5,-0x30(%rbp)
    3f21:	0f 29 75 e0          	movaps %xmm6,-0x20(%rbp)
    3f25:	0f 29 7d f0          	movaps %xmm7,-0x10(%rbp)
    3f29:	64 48 8b 04 25 28 00 	mov    %fs:0x28,%rax
    3f30:	00 00 
    3f32:	48 89 85 48 ff ff ff 	mov    %rax,-0xb8(%rbp)
    3f39:	31 c0                	xor    %eax,%eax
    3f3b:	c7 85 30 ff ff ff 08 	movl   $0x8,-0xd0(%rbp)
    3f42:	00 00 00 
    3f45:	c7 85 34 ff ff ff 30 	movl   $0x30,-0xcc(%rbp)
    3f4c:	00 00 00 
    3f4f:	48 8d 45 10          	lea    0x10(%rbp),%rax
    3f53:	48 89 85 38 ff ff ff 	mov    %rax,-0xc8(%rbp)
    3f5a:	48 8d 85 50 ff ff ff 	lea    -0xb0(%rbp),%rax
    3f61:	48 89 85 40 ff ff ff 	mov    %rax,-0xc0(%rbp)
    3f68:	48 8b 05 f9 3a 13 00 	mov    0x133af9(%rip),%rax        # 137a68 <xStdioMutex>
    3f6f:	48 c7 c6 ff ff ff ff 	mov    $0xffffffffffffffff,%rsi
    3f76:	48 89 c7             	mov    %rax,%rdi
    3f79:	e8 f6 2f 00 00       	callq  6f74 <xQueueSemaphoreTake>
    3f7e:	48 8d 95 30 ff ff ff 	lea    -0xd0(%rbp),%rdx
    3f85:	48 8b 85 28 ff ff ff 	mov    -0xd8(%rbp),%rax
    3f8c:	48 89 d6             	mov    %rdx,%rsi
    3f8f:	48 89 c7             	mov    %rax,%rdi
    3f92:	e8 69 e6 ff ff       	callq  2600 <vprintf@plt>
    3f97:	48 8b 05 ca 3a 13 00 	mov    0x133aca(%rip),%rax        # 137a68 <xStdioMutex>
    3f9e:	b9 00 00 00 00       	mov    $0x0,%ecx
    3fa3:	ba 00 00 00 00       	mov    $0x0,%edx
    3fa8:	be 00 00 00 00       	mov    $0x0,%esi
    3fad:	48 89 c7             	mov    %rax,%rdi
    3fb0:	e8 e2 1d 00 00       	callq  5d97 <xQueueGenericSend>
    3fb5:	90                   	nop
    3fb6:	48 8b 85 48 ff ff ff 	mov    -0xb8(%rbp),%rax
    3fbd:	64 48 33 04 25 28 00 	xor    %fs:0x28,%rax
    3fc4:	00 00 
    3fc6:	74 05                	je     3fcd <console_print+0x101>
    3fc8:	e8 03 e5 ff ff       	callq  24d0 <__stack_chk_fail@plt>
    3fcd:	c9                   	leaveq 
    3fce:	c3                   	retq   

0000000000003fcf <input_validation_CTF>:
    3fcf:	f3 0f 1e fa          	endbr64 
    3fd3:	55                   	push   %rbp
    3fd4:	48 89 e5             	mov    %rsp,%rbp
    3fd7:	41 b9 00 00 00 00    	mov    $0x0,%r9d
    3fdd:	41 b8 02 00 00 00    	mov    $0x2,%r8d
    3fe3:	b9 00 00 00 00       	mov    $0x0,%ecx
    3fe8:	ba 00 04 00 00       	mov    $0x400,%edx
    3fed:	48 8d 35 ac 35 02 00 	lea    0x235ac(%rip),%rsi        # 275a0 <_IO_stdin_used+0x5a0>
    3ff4:	48 8d 3d 59 00 00 00 	lea    0x59(%rip),%rdi        # 4054 <input_validation>
    3ffb:	e8 f7 7c 00 00       	callq  bcf7 <xTaskCreate>
    4000:	e8 be 93 00 00       	callq  d3c3 <vTaskStartScheduler>
    4005:	90                   	nop
    4006:	5d                   	pop    %rbp
    4007:	c3                   	retq   

0000000000004008 <take_keyboard_input>:
    4008:	f3 0f 1e fa          	endbr64 
    400c:	55                   	push   %rbp
    400d:	48 89 e5             	mov    %rsp,%rbp
    4010:	48 83 ec 20          	sub    $0x20,%rsp
    4014:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
    4018:	c6 45 fb 00          	movb   $0x0,-0x5(%rbp)
    401c:	c7 45 fc 00 00 00 00 	movl   $0x0,-0x4(%rbp)
    4023:	eb 25                	jmp    404a <take_keyboard_input+0x42>
    4025:	e8 36 e5 ff ff       	callq  2560 <getchar@plt>
    402a:	88 45 fb             	mov    %al,-0x5(%rbp)
    402d:	80 7d fb ff          	cmpb   $0xff,-0x5(%rbp)
    4031:	74 17                	je     404a <take_keyboard_input+0x42>
    4033:	8b 45 fc             	mov    -0x4(%rbp),%eax
    4036:	48 63 d0             	movslq %eax,%rdx
    4039:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
    403d:	48 01 c2             	add    %rax,%rdx
    4040:	0f b6 45 fb          	movzbl -0x5(%rbp),%eax
    4044:	88 02                	mov    %al,(%rdx)
    4046:	83 45 fc 01          	addl   $0x1,-0x4(%rbp)
    404a:	80 7d fb 0a          	cmpb   $0xa,-0x5(%rbp)
    404e:	75 d5                	jne    4025 <take_keyboard_input+0x1d>
    4050:	90                   	nop
    4051:	90                   	nop
    4052:	c9                   	leaveq 
    4053:	c3                   	retq   

0000000000004054 <input_validation>:
    4054:	f3 0f 1e fa          	endbr64 
    4058:	55                   	push   %rbp
    4059:	48 89 e5             	mov    %rsp,%rbp
    405c:	48 81 ec 30 01 00 00 	sub    $0x130,%rsp
    4063:	48 89 bd d8 fe ff ff 	mov    %rdi,-0x128(%rbp)
    406a:	64 48 8b 04 25 28 00 	mov    %fs:0x28,%rax
    4071:	00 00 
    4073:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
    4077:	31 c0                	xor    %eax,%eax
    4079:	c6 85 ee fe ff ff 00 	movb   $0x0,-0x112(%rbp)
    4080:	c6 85 ef fe ff ff 00 	movb   $0x0,-0x111(%rbp)
    4087:	48 8d 85 f0 fe ff ff 	lea    -0x110(%rbp),%rax
    408e:	ba 7f 00 00 00       	mov    $0x7f,%edx
    4093:	be 00 00 00 00       	mov    $0x0,%esi
    4098:	48 89 c7             	mov    %rax,%rdi
    409b:	e8 70 e4 ff ff       	callq  2510 <memset@plt>
    40a0:	48 8d 3d 08 35 02 00 	lea    0x23508(%rip),%rdi        # 275af <_IO_stdin_used+0x5af>
    40a7:	b8 00 00 00 00       	mov    $0x0,%eax
    40ac:	e8 2f e4 ff ff       	callq  24e0 <printf@plt>
    40b1:	48 8d 85 f0 fe ff ff 	lea    -0x110(%rbp),%rax
    40b8:	48 89 c7             	mov    %rax,%rdi
    40bb:	e8 48 ff ff ff       	callq  4008 <take_keyboard_input>
    40c0:	48 8d 85 f0 fe ff ff 	lea    -0x110(%rbp),%rax
    40c7:	48 89 c7             	mov    %rax,%rdi
    40ca:	e8 e1 e3 ff ff       	callq  24b0 <strlen@plt>
    40cf:	83 e8 01             	sub    $0x1,%eax
    40d2:	88 85 ee fe ff ff    	mov    %al,-0x112(%rbp)
    40d8:	0f b6 85 ee fe ff ff 	movzbl -0x112(%rbp),%eax
    40df:	89 c6                	mov    %eax,%esi
    40e1:	48 8d 3d da 34 02 00 	lea    0x234da(%rip),%rdi        # 275c2 <_IO_stdin_used+0x5c2>
    40e8:	b8 00 00 00 00       	mov    $0x0,%eax
    40ed:	e8 ee e3 ff ff       	callq  24e0 <printf@plt>
    40f2:	48 8d 85 70 ff ff ff 	lea    -0x90(%rbp),%rax
    40f9:	ba 7f 00 00 00       	mov    $0x7f,%edx
    40fe:	be 00 00 00 00       	mov    $0x0,%esi
    4103:	48 89 c7             	mov    %rax,%rdi
    4106:	e8 05 e4 ff ff       	callq  2510 <memset@plt>
    410b:	48 8d 3d c0 34 02 00 	lea    0x234c0(%rip),%rdi        # 275d2 <_IO_stdin_used+0x5d2>
    4112:	b8 00 00 00 00       	mov    $0x0,%eax
    4117:	e8 c4 e3 ff ff       	callq  24e0 <printf@plt>
    411c:	48 8d 85 70 ff ff ff 	lea    -0x90(%rbp),%rax
    4123:	48 89 c7             	mov    %rax,%rdi
    4126:	e8 dd fe ff ff       	callq  4008 <take_keyboard_input>
    412b:	48 8d 85 70 ff ff ff 	lea    -0x90(%rbp),%rax
    4132:	48 89 c7             	mov    %rax,%rdi
    4135:	e8 76 e3 ff ff       	callq  24b0 <strlen@plt>
    413a:	83 e8 01             	sub    $0x1,%eax
    413d:	88 85 ef fe ff ff    	mov    %al,-0x111(%rbp)
    4143:	0f b6 95 ee fe ff ff 	movzbl -0x112(%rbp),%edx
    414a:	0f b6 85 ef fe ff ff 	movzbl -0x111(%rbp),%eax
    4151:	01 d0                	add    %edx,%eax
    4153:	3d ff 00 00 00       	cmp    $0xff,%eax
    4158:	7f 7e                	jg     41d8 <input_validation+0x184>
    415a:	0f b6 95 ee fe ff ff 	movzbl -0x112(%rbp),%edx
    4161:	48 8d 85 f0 fe ff ff 	lea    -0x110(%rbp),%rax
    4168:	48 89 c6             	mov    %rax,%rsi
    416b:	48 8d 3d 2e 39 13 00 	lea    0x13392e(%rip),%rdi        # 137aa0 <ownername>
    4172:	e8 39 e4 ff ff       	callq  25b0 <memcpy@plt>
    4177:	0f b6 95 ef fe ff ff 	movzbl -0x111(%rbp),%edx
    417e:	0f b6 85 ee fe ff ff 	movzbl -0x112(%rbp),%eax
    4185:	48 8d 0d 14 39 13 00 	lea    0x133914(%rip),%rcx        # 137aa0 <ownername>
    418c:	48 01 c1             	add    %rax,%rcx
    418f:	48 8d 85 70 ff ff ff 	lea    -0x90(%rbp),%rax
    4196:	48 89 c6             	mov    %rax,%rsi
    4199:	48 89 cf             	mov    %rcx,%rdi
    419c:	e8 0f e4 ff ff       	callq  25b0 <memcpy@plt>
    41a1:	0f b6 95 ee fe ff ff 	movzbl -0x112(%rbp),%edx
    41a8:	0f b6 85 ef fe ff ff 	movzbl -0x111(%rbp),%eax
    41af:	01 d0                	add    %edx,%eax
    41b1:	48 98                	cltq   
    41b3:	48 8d 15 e6 38 13 00 	lea    0x1338e6(%rip),%rdx        # 137aa0 <ownername>
    41ba:	c6 04 10 00          	movb   $0x0,(%rax,%rdx,1)
    41be:	48 8d 35 db 38 13 00 	lea    0x1338db(%rip),%rsi        # 137aa0 <ownername>
    41c5:	48 8d 3d 18 34 02 00 	lea    0x23418(%rip),%rdi        # 275e4 <_IO_stdin_used+0x5e4>
    41cc:	b8 00 00 00 00       	mov    $0x0,%eax
    41d1:	e8 0a e3 ff ff       	callq  24e0 <printf@plt>
    41d6:	eb 11                	jmp    41e9 <input_validation+0x195>
    41d8:	48 8d 3d 18 34 02 00 	lea    0x23418(%rip),%rdi        # 275f7 <_IO_stdin_used+0x5f7>
    41df:	b8 00 00 00 00       	mov    $0x0,%eax
    41e4:	e8 f7 e2 ff ff       	callq  24e0 <printf@plt>
    41e9:	b8 00 00 00 00       	mov    $0x0,%eax
    41ee:	48 8b 4d f8          	mov    -0x8(%rbp),%rcx
    41f2:	64 48 33 0c 25 28 00 	xor    %fs:0x28,%rcx
    41f9:	00 00 
    41fb:	74 05                	je     4202 <input_validation+0x1ae>
    41fd:	e8 ce e2 ff ff       	callq  24d0 <__stack_chk_fail@plt>
    4202:	c9                   	leaveq 
    4203:	c3                   	retq   

0000000000004204 <vApplicationStackOverflowHook>:
    4204:	f3 0f 1e fa          	endbr64 
    4208:	55                   	push   %rbp
    4209:	48 89 e5             	mov    %rsp,%rbp
    420c:	48 83 ec 10          	sub    $0x10,%rsp
    4210:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
    4214:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
    4218:	48 8d 3d e1 33 02 00 	lea    0x233e1(%rip),%rdi        # 27600 <_IO_stdin_used+0x600>
    421f:	e8 fc e1 ff ff       	callq  2420 <puts@plt>
    4224:	eb f2                	jmp    4218 <vApplicationStackOverflowHook+0x14>

0000000000004226 <vApplicationMallocFailedHook>:
    4226:	f3 0f 1e fa          	endbr64 
    422a:	55                   	push   %rbp
    422b:	48 89 e5             	mov    %rsp,%rbp
    422e:	48 8d 3d eb 33 02 00 	lea    0x233eb(%rip),%rdi        # 27620 <_IO_stdin_used+0x620>
    4235:	e8 e6 e1 ff ff       	callq  2420 <puts@plt>
    423a:	eb f2                	jmp    422e <vApplicationMallocFailedHook+0x8>

000000000000423c <caesar_encrypt>:
    423c:	f3 0f 1e fa          	endbr64 
    4240:	55                   	push   %rbp
    4241:	48 89 e5             	mov    %rsp,%rbp
    4244:	53                   	push   %rbx
    4245:	48 83 ec 28          	sub    $0x28,%rsp
    4249:	48 89 7d d8          	mov    %rdi,-0x28(%rbp)
    424d:	89 75 d4             	mov    %esi,-0x2c(%rbp)
    4250:	89 55 d0             	mov    %edx,-0x30(%rbp)
    4253:	8b 45 d0             	mov    -0x30(%rbp),%eax
    4256:	48 63 d8             	movslq %eax,%rbx
    4259:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
    425d:	48 89 c7             	mov    %rax,%rdi
    4260:	e8 4b e2 ff ff       	callq  24b0 <strlen@plt>
    4265:	48 39 c3             	cmp    %rax,%rbx
    4268:	75 1b                	jne    4285 <caesar_encrypt+0x49>
    426a:	8b 45 d0             	mov    -0x30(%rbp),%eax
    426d:	89 c6                	mov    %eax,%esi
    426f:	48 8d 3d cb 33 02 00 	lea    0x233cb(%rip),%rdi        # 27641 <_IO_stdin_used+0x641>
    4276:	b8 00 00 00 00       	mov    $0x0,%eax
    427b:	e8 60 e2 ff ff       	callq  24e0 <printf@plt>
    4280:	e9 e6 00 00 00       	jmpq   436b <caesar_encrypt+0x12f>
    4285:	8b 45 d4             	mov    -0x2c(%rbp),%eax
    4288:	48 63 d0             	movslq %eax,%rdx
    428b:	48 69 d2 4f ec c4 4e 	imul   $0x4ec4ec4f,%rdx,%rdx
    4292:	48 c1 ea 20          	shr    $0x20,%rdx
    4296:	89 d1                	mov    %edx,%ecx
    4298:	c1 f9 03             	sar    $0x3,%ecx
    429b:	99                   	cltd   
    429c:	29 d1                	sub    %edx,%ecx
    429e:	89 ca                	mov    %ecx,%edx
    42a0:	6b d2 1a             	imul   $0x1a,%edx,%edx
    42a3:	29 d0                	sub    %edx,%eax
    42a5:	89 45 d4             	mov    %eax,-0x2c(%rbp)
    42a8:	83 7d d4 00          	cmpl   $0x0,-0x2c(%rbp)
    42ac:	0f 8e a8 00 00 00    	jle    435a <caesar_encrypt+0x11e>
    42b2:	8b 45 d0             	mov    -0x30(%rbp),%eax
    42b5:	48 63 d0             	movslq %eax,%rdx
    42b8:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
    42bc:	48 01 d0             	add    %rdx,%rax
    42bf:	0f b6 00             	movzbl (%rax),%eax
    42c2:	88 45 ef             	mov    %al,-0x11(%rbp)
    42c5:	80 7d ef 60          	cmpb   $0x60,-0x11(%rbp)
    42c9:	7e 39                	jle    4304 <caesar_encrypt+0xc8>
    42cb:	80 7d ef 7a          	cmpb   $0x7a,-0x11(%rbp)
    42cf:	7f 33                	jg     4304 <caesar_encrypt+0xc8>
    42d1:	8b 45 d4             	mov    -0x2c(%rbp),%eax
    42d4:	89 c2                	mov    %eax,%edx
    42d6:	0f b6 45 ef          	movzbl -0x11(%rbp),%eax
    42da:	01 d0                	add    %edx,%eax
    42dc:	88 45 ef             	mov    %al,-0x11(%rbp)
    42df:	80 7d ef 7a          	cmpb   $0x7a,-0x11(%rbp)
    42e3:	7e 0a                	jle    42ef <caesar_encrypt+0xb3>
    42e5:	0f b6 45 ef          	movzbl -0x11(%rbp),%eax
    42e9:	83 e8 1a             	sub    $0x1a,%eax
    42ec:	88 45 ef             	mov    %al,-0x11(%rbp)
    42ef:	8b 45 d0             	mov    -0x30(%rbp),%eax
    42f2:	48 63 d0             	movslq %eax,%rdx
    42f5:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
    42f9:	48 01 c2             	add    %rax,%rdx
    42fc:	0f b6 45 ef          	movzbl -0x11(%rbp),%eax
    4300:	88 02                	mov    %al,(%rdx)
    4302:	eb 3d                	jmp    4341 <caesar_encrypt+0x105>
    4304:	80 7d ef 40          	cmpb   $0x40,-0x11(%rbp)
    4308:	7e 37                	jle    4341 <caesar_encrypt+0x105>
    430a:	80 7d ef 5a          	cmpb   $0x5a,-0x11(%rbp)
    430e:	7f 31                	jg     4341 <caesar_encrypt+0x105>
    4310:	8b 45 d4             	mov    -0x2c(%rbp),%eax
    4313:	89 c2                	mov    %eax,%edx
    4315:	0f b6 45 ef          	movzbl -0x11(%rbp),%eax
    4319:	01 d0                	add    %edx,%eax
    431b:	88 45 ef             	mov    %al,-0x11(%rbp)
    431e:	80 7d ef 5a          	cmpb   $0x5a,-0x11(%rbp)
    4322:	7e 0a                	jle    432e <caesar_encrypt+0xf2>
    4324:	0f b6 45 ef          	movzbl -0x11(%rbp),%eax
    4328:	83 e8 1a             	sub    $0x1a,%eax
    432b:	88 45 ef             	mov    %al,-0x11(%rbp)
    432e:	8b 45 d0             	mov    -0x30(%rbp),%eax
    4331:	48 63 d0             	movslq %eax,%rdx
    4334:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
    4338:	48 01 c2             	add    %rax,%rdx
    433b:	0f b6 45 ef          	movzbl -0x11(%rbp),%eax
    433f:	88 02                	mov    %al,(%rdx)
    4341:	8b 45 d0             	mov    -0x30(%rbp),%eax
    4344:	8d 50 01             	lea    0x1(%rax),%edx
    4347:	8b 4d d4             	mov    -0x2c(%rbp),%ecx
    434a:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
    434e:	89 ce                	mov    %ecx,%esi
    4350:	48 89 c7             	mov    %rax,%rdi
    4353:	e8 e4 fe ff ff       	callq  423c <caesar_encrypt>
    4358:	eb 11                	jmp    436b <caesar_encrypt+0x12f>
    435a:	48 8d 3d ef 32 02 00 	lea    0x232ef(%rip),%rdi        # 27650 <_IO_stdin_used+0x650>
    4361:	b8 00 00 00 00       	mov    $0x0,%eax
    4366:	e8 75 e1 ff ff       	callq  24e0 <printf@plt>
    436b:	48 83 c4 28          	add    $0x28,%rsp
    436f:	5b                   	pop    %rbx
    4370:	5d                   	pop    %rbp
    4371:	c3                   	retq   

0000000000004372 <encrypt>:
    4372:	f3 0f 1e fa          	endbr64 
    4376:	55                   	push   %rbp
    4377:	48 89 e5             	mov    %rsp,%rbp
    437a:	48 83 ec 50          	sub    $0x50,%rsp
    437e:	48 89 7d b8          	mov    %rdi,-0x48(%rbp)
    4382:	64 48 8b 04 25 28 00 	mov    %fs:0x28,%rax
    4389:	00 00 
    438b:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
    438f:	31 c0                	xor    %eax,%eax
    4391:	bf 00 00 00 00       	mov    $0x0,%edi
    4396:	e8 d2 b1 00 00       	callq  f56d <uxTaskGetStackHighWaterMark>
    439b:	48 89 c6             	mov    %rax,%rsi
    439e:	48 8d 3d d3 32 02 00 	lea    0x232d3(%rip),%rdi        # 27678 <_IO_stdin_used+0x678>
    43a5:	b8 00 00 00 00       	mov    $0x0,%eax
    43aa:	e8 31 e1 ff ff       	callq  24e0 <printf@plt>
    43af:	48 8d 3d f8 32 02 00 	lea    0x232f8(%rip),%rdi        # 276ae <_IO_stdin_used+0x6ae>
    43b6:	b8 00 00 00 00       	mov    $0x0,%eax
    43bb:	e8 20 e1 ff ff       	callq  24e0 <printf@plt>
    43c0:	48 8d 45 c0          	lea    -0x40(%rbp),%rax
    43c4:	48 89 c7             	mov    %rax,%rdi
    43c7:	e8 3c fc ff ff       	callq  4008 <take_keyboard_input>
    43cc:	48 8d 45 c0          	lea    -0x40(%rbp),%rax
    43d0:	48 89 c7             	mov    %rax,%rdi
    43d3:	e8 d8 e0 ff ff       	callq  24b0 <strlen@plt>
    43d8:	48 89 c6             	mov    %rax,%rsi
    43db:	48 8d 3d ea 32 02 00 	lea    0x232ea(%rip),%rdi        # 276cc <_IO_stdin_used+0x6cc>
    43e2:	b8 00 00 00 00       	mov    $0x0,%eax
    43e7:	e8 f4 e0 ff ff       	callq  24e0 <printf@plt>
    43ec:	bf 00 00 00 00       	mov    $0x0,%edi
    43f1:	e8 77 b1 00 00       	callq  f56d <uxTaskGetStackHighWaterMark>
    43f6:	48 89 c6             	mov    %rax,%rsi
    43f9:	48 8d 3d e0 32 02 00 	lea    0x232e0(%rip),%rdi        # 276e0 <_IO_stdin_used+0x6e0>
    4400:	b8 00 00 00 00       	mov    $0x0,%eax
    4405:	e8 d6 e0 ff ff       	callq  24e0 <printf@plt>
    440a:	48 8d 45 c0          	lea    -0x40(%rbp),%rax
    440e:	ba 00 00 00 00       	mov    $0x0,%edx
    4413:	be 19 00 00 00       	mov    $0x19,%esi
    4418:	48 89 c7             	mov    %rax,%rdi
    441b:	e8 1c fe ff ff       	callq  423c <caesar_encrypt>
    4420:	bf 00 00 00 00       	mov    $0x0,%edi
    4425:	e8 43 b1 00 00       	callq  f56d <uxTaskGetStackHighWaterMark>
    442a:	48 89 c6             	mov    %rax,%rsi
    442d:	48 8d 3d ec 32 02 00 	lea    0x232ec(%rip),%rdi        # 27720 <_IO_stdin_used+0x720>
    4434:	b8 00 00 00 00       	mov    $0x0,%eax
    4439:	e8 a2 e0 ff ff       	callq  24e0 <printf@plt>
    443e:	48 8d 45 c0          	lea    -0x40(%rbp),%rax
    4442:	48 89 c6             	mov    %rax,%rsi
    4445:	48 8d 3d 0d 33 02 00 	lea    0x2330d(%rip),%rdi        # 27759 <_IO_stdin_used+0x759>
    444c:	b8 00 00 00 00       	mov    $0x0,%eax
    4451:	e8 8a e0 ff ff       	callq  24e0 <printf@plt>
    4456:	48 8d 45 c0          	lea    -0x40(%rbp),%rax
    445a:	48 89 c7             	mov    %rax,%rdi
    445d:	e8 4e e0 ff ff       	callq  24b0 <strlen@plt>
    4462:	48 89 c6             	mov    %rax,%rsi
    4465:	48 8d 3d 04 33 02 00 	lea    0x23304(%rip),%rdi        # 27770 <_IO_stdin_used+0x770>
    446c:	b8 00 00 00 00       	mov    $0x0,%eax
    4471:	e8 6a e0 ff ff       	callq  24e0 <printf@plt>
    4476:	90                   	nop
    4477:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    447b:	64 48 33 04 25 28 00 	xor    %fs:0x28,%rax
    4482:	00 00 
    4484:	74 05                	je     448b <encrypt+0x119>
    4486:	e8 45 e0 ff ff       	callq  24d0 <__stack_chk_fail@plt>
    448b:	c9                   	leaveq 
    448c:	c3                   	retq   

000000000000448d <printArray>:
    448d:	f3 0f 1e fa          	endbr64 
    4491:	55                   	push   %rbp
    4492:	48 89 e5             	mov    %rsp,%rbp
    4495:	48 83 ec 10          	sub    $0x10,%rsp
    4499:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
    449d:	89 75 f4             	mov    %esi,-0xc(%rbp)
    44a0:	89 55 f0             	mov    %edx,-0x10(%rbp)
    44a3:	8b 55 f4             	mov    -0xc(%rbp),%edx
    44a6:	8b 45 f0             	mov    -0x10(%rbp),%eax
    44a9:	39 c2                	cmp    %eax,%edx
    44ab:	7d 42                	jge    44ef <printArray+0x62>
    44ad:	8b 45 f4             	mov    -0xc(%rbp),%eax
    44b0:	48 98                	cltq   
    44b2:	48 8d 14 85 00 00 00 	lea    0x0(,%rax,4),%rdx
    44b9:	00 
    44ba:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    44be:	48 01 d0             	add    %rdx,%rax
    44c1:	8b 00                	mov    (%rax),%eax
    44c3:	89 c6                	mov    %eax,%esi
    44c5:	48 8d 3d b5 32 02 00 	lea    0x232b5(%rip),%rdi        # 27781 <_IO_stdin_used+0x781>
    44cc:	b8 00 00 00 00       	mov    $0x0,%eax
    44d1:	e8 0a e0 ff ff       	callq  24e0 <printf@plt>
    44d6:	8b 55 f0             	mov    -0x10(%rbp),%edx
    44d9:	8b 45 f4             	mov    -0xc(%rbp),%eax
    44dc:	8d 48 01             	lea    0x1(%rax),%ecx
    44df:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    44e3:	89 ce                	mov    %ecx,%esi
    44e5:	48 89 c7             	mov    %rax,%rdi
    44e8:	e8 a0 ff ff ff       	callq  448d <printArray>
    44ed:	eb 01                	jmp    44f0 <printArray+0x63>
    44ef:	90                   	nop
    44f0:	c9                   	leaveq 
    44f1:	c3                   	retq   

00000000000044f2 <fact>:
    44f2:	f3 0f 1e fa          	endbr64 
    44f6:	55                   	push   %rbp
    44f7:	48 89 e5             	mov    %rsp,%rbp
    44fa:	53                   	push   %rbx
    44fb:	48 83 ec 48          	sub    $0x48,%rsp
    44ff:	89 7d bc             	mov    %edi,-0x44(%rbp)
    4502:	64 48 8b 04 25 28 00 	mov    %fs:0x28,%rax
    4509:	00 00 
    450b:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
    450f:	31 c0                	xor    %eax,%eax
    4511:	bf 00 00 00 00       	mov    $0x0,%edi
    4516:	e8 52 b0 00 00       	callq  f56d <uxTaskGetStackHighWaterMark>
    451b:	48 89 c6             	mov    %rax,%rsi
    451e:	48 8d 3d 63 32 02 00 	lea    0x23263(%rip),%rdi        # 27788 <_IO_stdin_used+0x788>
    4525:	b8 00 00 00 00       	mov    $0x0,%eax
    452a:	e8 b1 df ff ff       	callq  24e0 <printf@plt>
    452f:	8b 45 bc             	mov    -0x44(%rbp),%eax
    4532:	8b 55 bc             	mov    -0x44(%rbp),%edx
    4535:	89 54 85 c0          	mov    %edx,-0x40(%rbp,%rax,4)
    4539:	83 7d bc 00          	cmpl   $0x0,-0x44(%rbp)
    453d:	75 07                	jne    4546 <fact+0x54>
    453f:	b8 01 00 00 00       	mov    $0x1,%eax
    4544:	eb 17                	jmp    455d <fact+0x6b>
    4546:	8b 45 bc             	mov    -0x44(%rbp),%eax
    4549:	8b 5c 85 c0          	mov    -0x40(%rbp,%rax,4),%ebx
    454d:	8b 45 bc             	mov    -0x44(%rbp),%eax
    4550:	83 e8 01             	sub    $0x1,%eax
    4553:	89 c7                	mov    %eax,%edi
    4555:	e8 98 ff ff ff       	callq  44f2 <fact>
    455a:	0f af c3             	imul   %ebx,%eax
    455d:	48 8b 4d e8          	mov    -0x18(%rbp),%rcx
    4561:	64 48 33 0c 25 28 00 	xor    %fs:0x28,%rcx
    4568:	00 00 
    456a:	74 05                	je     4571 <fact+0x7f>
    456c:	e8 5f df ff ff       	callq  24d0 <__stack_chk_fail@plt>
    4571:	48 83 c4 48          	add    $0x48,%rsp
    4575:	5b                   	pop    %rbx
    4576:	5d                   	pop    %rbp
    4577:	c3                   	retq   

0000000000004578 <dummy>:
    4578:	f3 0f 1e fa          	endbr64 
    457c:	55                   	push   %rbp
    457d:	48 89 e5             	mov    %rsp,%rbp
    4580:	48 83 ec 20          	sub    $0x20,%rsp
    4584:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
    4588:	c7 45 f8 02 00 00 00 	movl   $0x2,-0x8(%rbp)
    458f:	c7 45 fc 00 00 00 00 	movl   $0x0,-0x4(%rbp)
    4596:	eb 15                	jmp    45ad <dummy+0x35>
    4598:	48 8d 3d 0c 32 02 00 	lea    0x2320c(%rip),%rdi        # 277ab <_IO_stdin_used+0x7ab>
    459f:	b8 00 00 00 00       	mov    $0x0,%eax
    45a4:	e8 37 df ff ff       	callq  24e0 <printf@plt>
    45a9:	83 45 fc 01          	addl   $0x1,-0x4(%rbp)
    45ad:	8b 45 f8             	mov    -0x8(%rbp),%eax
    45b0:	39 45 fc             	cmp    %eax,-0x4(%rbp)
    45b3:	7c e3                	jl     4598 <dummy+0x20>
    45b5:	90                   	nop
    45b6:	90                   	nop
    45b7:	c9                   	leaveq 
    45b8:	c3                   	retq   

00000000000045b9 <dummy2>:
    45b9:	f3 0f 1e fa          	endbr64 
    45bd:	55                   	push   %rbp
    45be:	48 89 e5             	mov    %rsp,%rbp
    45c1:	48 83 ec 10          	sub    $0x10,%rsp
    45c5:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
    45c9:	48 8d 3d e8 31 02 00 	lea    0x231e8(%rip),%rdi        # 277b8 <_IO_stdin_used+0x7b8>
    45d0:	b8 00 00 00 00       	mov    $0x0,%eax
    45d5:	e8 06 df ff ff       	callq  24e0 <printf@plt>
    45da:	48 8d 3d 05 32 02 00 	lea    0x23205(%rip),%rdi        # 277e6 <_IO_stdin_used+0x7e6>
    45e1:	b8 00 00 00 00       	mov    $0x0,%eax
    45e6:	e8 f5 de ff ff       	callq  24e0 <printf@plt>
    45eb:	eb ed                	jmp    45da <dummy2+0x21>

00000000000045ed <main_ctfs>:
    45ed:	f3 0f 1e fa          	endbr64 
    45f1:	55                   	push   %rbp
    45f2:	48 89 e5             	mov    %rsp,%rbp
    45f5:	48 81 ec 30 0a 00 00 	sub    $0xa30,%rsp
    45fc:	64 48 8b 04 25 28 00 	mov    %fs:0x28,%rax
    4603:	00 00 
    4605:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
    4609:	31 c0                	xor    %eax,%eax
    460b:	48 8d 95 30 f7 ff ff 	lea    -0x8d0(%rbp),%rdx
    4612:	48 83 ec 08          	sub    $0x8,%rsp
    4616:	48 8d 85 d0 f5 ff ff 	lea    -0xa30(%rbp),%rax
    461d:	50                   	push   %rax
    461e:	49 89 d1             	mov    %rdx,%r9
    4621:	41 b8 03 00 00 00    	mov    $0x3,%r8d
    4627:	b9 00 00 00 00       	mov    $0x0,%ecx
    462c:	ba 0a 00 00 00       	mov    $0xa,%edx
    4631:	48 8d 35 c1 31 02 00 	lea    0x231c1(%rip),%rsi        # 277f9 <_IO_stdin_used+0x7f9>
    4638:	48 8d 3d 39 ff ff ff 	lea    -0xc7(%rip),%rdi        # 4578 <dummy>
    463f:	e8 95 75 00 00       	callq  bbd9 <xTaskCreateStatic>
    4644:	48 83 c4 10          	add    $0x10,%rsp
    4648:	48 8d 95 90 fb ff ff 	lea    -0x470(%rbp),%rdx
    464f:	48 83 ec 08          	sub    $0x8,%rsp
    4653:	48 8d 85 80 f6 ff ff 	lea    -0x980(%rbp),%rax
    465a:	50                   	push   %rax
    465b:	49 89 d1             	mov    %rdx,%r9
    465e:	41 b8 03 00 00 00    	mov    $0x3,%r8d
    4664:	b9 00 00 00 00       	mov    $0x0,%ecx
    4669:	ba 0a 00 00 00       	mov    $0xa,%edx
    466e:	48 8d 35 93 31 02 00 	lea    0x23193(%rip),%rsi        # 27808 <_IO_stdin_used+0x808>
    4675:	48 8d 3d 3d ff ff ff 	lea    -0xc3(%rip),%rdi        # 45b9 <dummy2>
    467c:	e8 58 75 00 00       	callq  bbd9 <xTaskCreateStatic>
    4681:	48 83 c4 10          	add    $0x10,%rsp
    4685:	e8 39 8d 00 00       	callq  d3c3 <vTaskStartScheduler>
    468a:	90                   	nop
    468b:	48 8b 4d f8          	mov    -0x8(%rbp),%rcx
    468f:	64 48 33 0c 25 28 00 	xor    %fs:0x28,%rcx
    4696:	00 00 
    4698:	74 05                	je     469f <main_ctfs+0xb2>
    469a:	e8 31 de ff ff       	callq  24d0 <__stack_chk_fail@plt>
    469f:	c9                   	leaveq 
    46a0:	c3                   	retq   

00000000000046a1 <prvStaticAllocationsWithNullBuffers>:
    46a1:	f3 0f 1e fa          	endbr64 
    46a5:	55                   	push   %rbp
    46a6:	48 89 e5             	mov    %rsp,%rbp
    46a9:	48 83 ec 20          	sub    $0x20,%rsp
    46ad:	64 48 8b 04 25 28 00 	mov    %fs:0x28,%rax
    46b4:	00 00 
    46b6:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
    46ba:	31 c0                	xor    %eax,%eax
    46bc:	48 c7 45 e8 00 00 00 	movq   $0x0,-0x18(%rbp)
    46c3:	00 
    46c4:	48 c7 45 e0 01 00 00 	movq   $0x1,-0x20(%rbp)
    46cb:	00 
    46cc:	48 c7 45 f0 0a 00 00 	movq   $0xa,-0x10(%rbp)
    46d3:	00 
    46d4:	bf 00 00 00 00       	mov    $0x0,%edi
    46d9:	e8 25 65 00 00       	callq  ac03 <xEventGroupCreateStatic>
    46de:	48 09 45 e8          	or     %rax,-0x18(%rbp)
    46e2:	48 83 ec 08          	sub    $0x8,%rsp
    46e6:	48 8d 45 e0          	lea    -0x20(%rbp),%rax
    46ea:	50                   	push   %rax
    46eb:	41 b9 00 00 00 00    	mov    $0x0,%r9d
    46f1:	41 b8 00 00 00 00    	mov    $0x0,%r8d
    46f7:	b9 00 00 00 00       	mov    $0x0,%ecx
    46fc:	ba 46 00 00 00       	mov    $0x46,%edx
    4701:	48 8d 35 07 31 02 00 	lea    0x23107(%rip),%rsi        # 2780f <_IO_stdin_used+0x80f>
    4708:	bf 00 00 00 00       	mov    $0x0,%edi
    470d:	e8 c7 74 00 00       	callq  bbd9 <xTaskCreateStatic>
    4712:	48 83 c4 10          	add    $0x10,%rsp
    4716:	48 09 45 e8          	or     %rax,-0x18(%rbp)
    471a:	48 8d 45 e0          	lea    -0x20(%rbp),%rax
    471e:	48 83 ec 08          	sub    $0x8,%rsp
    4722:	6a 00                	pushq  $0x0
    4724:	49 89 c1             	mov    %rax,%r9
    4727:	41 b8 00 00 00 00    	mov    $0x0,%r8d
    472d:	b9 00 00 00 00       	mov    $0x0,%ecx
    4732:	ba 46 00 00 00       	mov    $0x46,%edx
    4737:	48 8d 35 d1 30 02 00 	lea    0x230d1(%rip),%rsi        # 2780f <_IO_stdin_used+0x80f>
    473e:	bf 00 00 00 00       	mov    $0x0,%edi
    4743:	e8 91 74 00 00       	callq  bbd9 <xTaskCreateStatic>
    4748:	48 83 c4 10          	add    $0x10,%rsp
    474c:	48 09 45 e8          	or     %rax,-0x18(%rbp)
    4750:	48 8d 55 e0          	lea    -0x20(%rbp),%rdx
    4754:	48 8b 75 f0          	mov    -0x10(%rbp),%rsi
    4758:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
    475c:	41 b8 00 00 00 00    	mov    $0x0,%r8d
    4762:	b9 00 00 00 00       	mov    $0x0,%ecx
    4767:	48 89 c7             	mov    %rax,%rdi
    476a:	e8 99 0d 00 00       	callq  5508 <xQueueGenericCreateStatic>
    476f:	48 09 45 e8          	or     %rax,-0x18(%rbp)
    4773:	48 8d 55 e0          	lea    -0x20(%rbp),%rdx
    4777:	48 8b 75 f0          	mov    -0x10(%rbp),%rsi
    477b:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
    477f:	49 89 d0             	mov    %rdx,%r8
    4782:	b9 00 00 00 00       	mov    $0x0,%ecx
    4787:	ba 00 00 00 00       	mov    $0x0,%edx
    478c:	48 89 c7             	mov    %rax,%rdi
    478f:	e8 1d 49 00 00       	callq  90b1 <xStreamBufferGenericCreateStatic>
    4794:	48 09 45 e8          	or     %rax,-0x18(%rbp)
    4798:	48 8d 55 e0          	lea    -0x20(%rbp),%rdx
    479c:	48 8b 75 f0          	mov    -0x10(%rbp),%rsi
    47a0:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
    47a4:	41 b8 00 00 00 00    	mov    $0x0,%r8d
    47aa:	48 89 d1             	mov    %rdx,%rcx
    47ad:	ba 00 00 00 00       	mov    $0x0,%edx
    47b2:	48 89 c7             	mov    %rax,%rdi
    47b5:	e8 f7 48 00 00       	callq  90b1 <xStreamBufferGenericCreateStatic>
    47ba:	48 09 45 e8          	or     %rax,-0x18(%rbp)
    47be:	48 83 7d e8 00       	cmpq   $0x0,-0x18(%rbp)
    47c3:	74 08                	je     47cd <prvStaticAllocationsWithNullBuffers+0x12c>
    47c5:	48 c7 45 e0 00 00 00 	movq   $0x0,-0x20(%rbp)
    47cc:	00 
    47cd:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
    47d1:	48 8b 4d f8          	mov    -0x8(%rbp),%rcx
    47d5:	64 48 33 0c 25 28 00 	xor    %fs:0x28,%rcx
    47dc:	00 00 
    47de:	74 05                	je     47e5 <prvStaticAllocationsWithNullBuffers+0x144>
    47e0:	e8 eb dc ff ff       	callq  24d0 <__stack_chk_fail@plt>
    47e5:	c9                   	leaveq 
    47e6:	c3                   	retq   

00000000000047e7 <prvTraceUtils>:
    47e7:	f3 0f 1e fa          	endbr64 
    47eb:	55                   	push   %rbp
    47ec:	48 89 e5             	mov    %rsp,%rbp
    47ef:	48 83 ec 50          	sub    $0x50,%rsp
    47f3:	48 c7 45 b8 01 00 00 	movq   $0x1,-0x48(%rbp)
    47fa:	00 
    47fb:	48 c7 45 c0 64 00 00 	movq   $0x64,-0x40(%rbp)
    4802:	00 
    4803:	48 c7 45 c8 01 00 00 	movq   $0x1,-0x38(%rbp)
    480a:	00 
    480b:	e8 69 65 00 00       	callq  ad79 <xEventGroupCreate>
    4810:	48 89 45 d0          	mov    %rax,-0x30(%rbp)
    4814:	48 83 7d d0 00       	cmpq   $0x0,-0x30(%rbp)
    4819:	74 52                	je     486d <prvTraceUtils+0x86>
    481b:	48 8b 55 c0          	mov    -0x40(%rbp),%rdx
    481f:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
    4823:	48 89 d6             	mov    %rdx,%rsi
    4826:	48 89 c7             	mov    %rax,%rdi
    4829:	e8 8c 73 00 00       	callq  bbba <vEventGroupSetNumber>
    482e:	bf 00 00 00 00       	mov    $0x0,%edi
    4833:	e8 4b 73 00 00       	callq  bb83 <uxEventGroupGetNumber>
    4838:	48 85 c0             	test   %rax,%rax
    483b:	74 08                	je     4845 <prvTraceUtils+0x5e>
    483d:	48 c7 45 b8 00 00 00 	movq   $0x0,-0x48(%rbp)
    4844:	00 
    4845:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
    4849:	48 89 c7             	mov    %rax,%rdi
    484c:	e8 32 73 00 00       	callq  bb83 <uxEventGroupGetNumber>
    4851:	48 39 45 c0          	cmp    %rax,-0x40(%rbp)
    4855:	74 08                	je     485f <prvTraceUtils+0x78>
    4857:	48 c7 45 b8 00 00 00 	movq   $0x0,-0x48(%rbp)
    485e:	00 
    485f:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
    4863:	48 89 c7             	mov    %rax,%rdi
    4866:	e8 78 70 00 00       	callq  b8e3 <vEventGroupDelete>
    486b:	eb 08                	jmp    4875 <prvTraceUtils+0x8e>
    486d:	48 c7 45 b8 00 00 00 	movq   $0x0,-0x48(%rbp)
    4874:	00 
    4875:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
    4879:	ba 00 00 00 00       	mov    $0x0,%edx
    487e:	be 08 00 00 00       	mov    $0x8,%esi
    4883:	48 89 c7             	mov    %rax,%rdi
    4886:	e8 68 0d 00 00       	callq  55f3 <xQueueGenericCreate>
    488b:	48 89 45 d8          	mov    %rax,-0x28(%rbp)
    488f:	48 83 7d d8 00       	cmpq   $0x0,-0x28(%rbp)
    4894:	74 53                	je     48e9 <prvTraceUtils+0x102>
    4896:	48 8b 55 c0          	mov    -0x40(%rbp),%rdx
    489a:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
    489e:	48 89 d6             	mov    %rdx,%rsi
    48a1:	48 89 c7             	mov    %rax,%rdi
    48a4:	e8 4f 38 00 00       	callq  80f8 <vQueueSetQueueNumber>
    48a9:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
    48ad:	48 89 c7             	mov    %rax,%rdi
    48b0:	e8 2a 38 00 00       	callq  80df <uxQueueGetQueueNumber>
    48b5:	48 39 45 c0          	cmp    %rax,-0x40(%rbp)
    48b9:	74 08                	je     48c3 <prvTraceUtils+0xdc>
    48bb:	48 c7 45 b8 00 00 00 	movq   $0x0,-0x48(%rbp)
    48c2:	00 
    48c3:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
    48c7:	48 89 c7             	mov    %rax,%rdi
    48ca:	e8 4b 38 00 00       	callq  811a <ucQueueGetQueueType>
    48cf:	84 c0                	test   %al,%al
    48d1:	74 08                	je     48db <prvTraceUtils+0xf4>
    48d3:	48 c7 45 b8 00 00 00 	movq   $0x0,-0x48(%rbp)
    48da:	00 
    48db:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
    48df:	48 89 c7             	mov    %rax,%rdi
    48e2:	e8 07 36 00 00       	callq  7eee <vQueueDelete>
    48e7:	eb 08                	jmp    48f1 <prvTraceUtils+0x10a>
    48e9:	48 c7 45 b8 00 00 00 	movq   $0x0,-0x48(%rbp)
    48f0:	00 
    48f1:	48 c7 45 e0 64 00 00 	movq   $0x64,-0x20(%rbp)
    48f8:	00 
    48f9:	e8 80 ad 00 00       	callq  f67e <xTaskGetCurrentTaskHandle>
    48fe:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
    4902:	48 8b 55 e0          	mov    -0x20(%rbp),%rdx
    4906:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
    490a:	48 89 d6             	mov    %rdx,%rsi
    490d:	48 89 c7             	mov    %rax,%rdi
    4910:	e8 06 a8 00 00       	callq  f11b <vTaskSetTaskNumber>
    4915:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
    4919:	48 89 c7             	mov    %rax,%rdi
    491c:	e8 c0 a7 00 00       	callq  f0e1 <uxTaskGetTaskNumber>
    4921:	48 39 45 e0          	cmp    %rax,-0x20(%rbp)
    4925:	74 08                	je     492f <prvTraceUtils+0x148>
    4927:	48 c7 45 b8 00 00 00 	movq   $0x0,-0x48(%rbp)
    492e:	00 
    492f:	bf 00 00 00 00       	mov    $0x0,%edi
    4934:	e8 a8 a7 00 00       	callq  f0e1 <uxTaskGetTaskNumber>
    4939:	48 85 c0             	test   %rax,%rax
    493c:	74 08                	je     4946 <prvTraceUtils+0x15f>
    493e:	48 c7 45 b8 00 00 00 	movq   $0x0,-0x48(%rbp)
    4945:	00 
    4946:	ba 00 00 00 00       	mov    $0x0,%edx
    494b:	be 00 00 00 00       	mov    $0x0,%esi
    4950:	bf 04 00 00 00       	mov    $0x4,%edi
    4955:	e8 08 45 00 00       	callq  8e62 <xStreamBufferGenericCreate>
    495a:	48 89 45 f0          	mov    %rax,-0x10(%rbp)
    495e:	48 83 7d f0 00       	cmpq   $0x0,-0x10(%rbp)
    4963:	74 53                	je     49b8 <prvTraceUtils+0x1d1>
    4965:	48 8b 55 e0          	mov    -0x20(%rbp),%rdx
    4969:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
    496d:	48 89 d6             	mov    %rdx,%rsi
    4970:	48 89 c7             	mov    %rax,%rdi
    4973:	e8 53 62 00 00       	callq  abcb <vStreamBufferSetStreamBufferNumber>
    4978:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
    497c:	48 89 c7             	mov    %rax,%rdi
    497f:	e8 31 62 00 00       	callq  abb5 <uxStreamBufferGetStreamBufferNumber>
    4984:	48 39 45 e0          	cmp    %rax,-0x20(%rbp)
    4988:	74 08                	je     4992 <prvTraceUtils+0x1ab>
    498a:	48 c7 45 b8 00 00 00 	movq   $0x0,-0x48(%rbp)
    4991:	00 
    4992:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
    4996:	48 89 c7             	mov    %rax,%rdi
    4999:	e8 4c 62 00 00       	callq  abea <ucStreamBufferGetStreamBufferType>
    499e:	84 c0                	test   %al,%al
    49a0:	74 08                	je     49aa <prvTraceUtils+0x1c3>
    49a2:	48 c7 45 b8 00 00 00 	movq   $0x0,-0x48(%rbp)
    49a9:	00 
    49aa:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
    49ae:	48 89 c7             	mov    %rax,%rdi
    49b1:	e8 96 49 00 00       	callq  934c <vStreamBufferDelete>
    49b6:	eb 08                	jmp    49c0 <prvTraceUtils+0x1d9>
    49b8:	48 c7 45 b8 00 00 00 	movq   $0x0,-0x48(%rbp)
    49bf:	00 
    49c0:	ba 01 00 00 00       	mov    $0x1,%edx
    49c5:	be 00 00 00 00       	mov    $0x0,%esi
    49ca:	bf 04 00 00 00       	mov    $0x4,%edi
    49cf:	e8 8e 44 00 00       	callq  8e62 <xStreamBufferGenericCreate>
    49d4:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
    49d8:	48 83 7d f8 00       	cmpq   $0x0,-0x8(%rbp)
    49dd:	74 26                	je     4a05 <prvTraceUtils+0x21e>
    49df:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    49e3:	48 89 c7             	mov    %rax,%rdi
    49e6:	e8 ff 61 00 00       	callq  abea <ucStreamBufferGetStreamBufferType>
    49eb:	84 c0                	test   %al,%al
    49ed:	75 08                	jne    49f7 <prvTraceUtils+0x210>
    49ef:	48 c7 45 b8 00 00 00 	movq   $0x0,-0x48(%rbp)
    49f6:	00 
    49f7:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    49fb:	48 89 c7             	mov    %rax,%rdi
    49fe:	e8 49 49 00 00       	callq  934c <vStreamBufferDelete>
    4a03:	eb 08                	jmp    4a0d <prvTraceUtils+0x226>
    4a05:	48 c7 45 b8 00 00 00 	movq   $0x0,-0x48(%rbp)
    4a0c:	00 
    4a0d:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
    4a11:	c9                   	leaveq 
    4a12:	c3                   	retq   

0000000000004a13 <prvPeekTimeout>:
    4a13:	f3 0f 1e fa          	endbr64 
    4a17:	55                   	push   %rbp
    4a18:	48 89 e5             	mov    %rsp,%rbp
    4a1b:	48 83 ec 30          	sub    $0x30,%rsp
    4a1f:	64 48 8b 04 25 28 00 	mov    %fs:0x28,%rax
    4a26:	00 00 
    4a28:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
    4a2c:	31 c0                	xor    %eax,%eax
    4a2e:	48 c7 45 e0 01 00 00 	movq   $0x1,-0x20(%rbp)
    4a35:	00 
    4a36:	48 c7 45 d8 01 00 00 	movq   $0x1,-0x28(%rbp)
    4a3d:	00 
    4a3e:	48 c7 45 e8 02 00 00 	movq   $0x2,-0x18(%rbp)
    4a45:	00 
    4a46:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
    4a4a:	ba 00 00 00 00       	mov    $0x0,%edx
    4a4f:	be 08 00 00 00       	mov    $0x8,%esi
    4a54:	48 89 c7             	mov    %rax,%rdi
    4a57:	e8 97 0b 00 00       	callq  55f3 <xQueueGenericCreate>
    4a5c:	48 89 45 f0          	mov    %rax,-0x10(%rbp)
    4a60:	48 83 7d f0 00       	cmpq   $0x0,-0x10(%rbp)
    4a65:	74 4b                	je     4ab2 <prvPeekTimeout+0x9f>
    4a67:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
    4a6b:	48 89 c7             	mov    %rax,%rdi
    4a6e:	e8 9b 33 00 00       	callq  7e0e <uxQueueMessagesWaiting>
    4a73:	48 85 c0             	test   %rax,%rax
    4a76:	74 08                	je     4a80 <prvPeekTimeout+0x6d>
    4a78:	48 c7 45 d8 00 00 00 	movq   $0x0,-0x28(%rbp)
    4a7f:	00 
    4a80:	48 8b 55 e8          	mov    -0x18(%rbp),%rdx
    4a84:	48 8d 4d d0          	lea    -0x30(%rbp),%rcx
    4a88:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
    4a8c:	48 89 ce             	mov    %rcx,%rsi
    4a8f:	48 89 c7             	mov    %rax,%rdi
    4a92:	e8 db 2a 00 00       	callq  7572 <xQueuePeek>
    4a97:	48 85 c0             	test   %rax,%rax
    4a9a:	74 08                	je     4aa4 <prvPeekTimeout+0x91>
    4a9c:	48 c7 45 d8 00 00 00 	movq   $0x0,-0x28(%rbp)
    4aa3:	00 
    4aa4:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
    4aa8:	48 89 c7             	mov    %rax,%rdi
    4aab:	e8 3e 34 00 00       	callq  7eee <vQueueDelete>
    4ab0:	eb 08                	jmp    4aba <prvPeekTimeout+0xa7>
    4ab2:	48 c7 45 d8 00 00 00 	movq   $0x0,-0x28(%rbp)
    4ab9:	00 
    4aba:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
    4abe:	48 8b 4d f8          	mov    -0x8(%rbp),%rcx
    4ac2:	64 48 33 0c 25 28 00 	xor    %fs:0x28,%rcx
    4ac9:	00 00 
    4acb:	74 05                	je     4ad2 <prvPeekTimeout+0xbf>
    4acd:	e8 fe d9 ff ff       	callq  24d0 <__stack_chk_fail@plt>
    4ad2:	c9                   	leaveq 
    4ad3:	c3                   	retq   

0000000000004ad4 <prvQueueQueryFromISR>:
    4ad4:	f3 0f 1e fa          	endbr64 
    4ad8:	55                   	push   %rbp
    4ad9:	48 89 e5             	mov    %rsp,%rbp
    4adc:	48 83 ec 30          	sub    $0x30,%rsp
    4ae0:	64 48 8b 04 25 28 00 	mov    %fs:0x28,%rax
    4ae7:	00 00 
    4ae9:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
    4aed:	31 c0                	xor    %eax,%eax
    4aef:	48 c7 45 d8 01 00 00 	movq   $0x1,-0x28(%rbp)
    4af6:	00 
    4af7:	48 c7 45 d0 01 00 00 	movq   $0x1,-0x30(%rbp)
    4afe:	00 
    4aff:	48 c7 45 e0 01 00 00 	movq   $0x1,-0x20(%rbp)
    4b06:	00 
    4b07:	48 8d 05 07 2d 02 00 	lea    0x22d07(%rip),%rax        # 27815 <_IO_stdin_used+0x815>
    4b0e:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
    4b12:	48 c7 45 f0 00 00 00 	movq   $0x0,-0x10(%rbp)
    4b19:	00 
    4b1a:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
    4b1e:	ba 00 00 00 00       	mov    $0x0,%edx
    4b23:	be 08 00 00 00       	mov    $0x8,%esi
    4b28:	48 89 c7             	mov    %rax,%rdi
    4b2b:	e8 c3 0a 00 00       	callq  55f3 <xQueueGenericCreate>
    4b30:	48 89 45 f0          	mov    %rax,-0x10(%rbp)
    4b34:	48 83 7d f0 00       	cmpq   $0x0,-0x10(%rbp)
    4b39:	0f 84 0c 01 00 00    	je     4c4b <prvQueueQueryFromISR+0x177>
    4b3f:	48 8b 55 e8          	mov    -0x18(%rbp),%rdx
    4b43:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
    4b47:	48 89 d6             	mov    %rdx,%rsi
    4b4a:	48 89 c7             	mov    %rax,%rdi
    4b4d:	e8 66 3a 00 00       	callq  85b8 <vQueueAddToRegistry>
    4b52:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
    4b56:	48 89 c7             	mov    %rax,%rdi
    4b59:	e8 83 3b 00 00       	callq  86e1 <pcQueueGetName>
    4b5e:	48 89 c2             	mov    %rax,%rdx
    4b61:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
    4b65:	48 89 c6             	mov    %rax,%rsi
    4b68:	48 89 d7             	mov    %rdx,%rdi
    4b6b:	e8 e0 d9 ff ff       	callq  2550 <strcmp@plt>
    4b70:	85 c0                	test   %eax,%eax
    4b72:	74 08                	je     4b7c <prvQueueQueryFromISR+0xa8>
    4b74:	48 c7 45 d8 00 00 00 	movq   $0x0,-0x28(%rbp)
    4b7b:	00 
    4b7c:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
    4b80:	48 89 c7             	mov    %rax,%rdi
    4b83:	e8 24 33 00 00       	callq  7eac <uxQueueMessagesWaitingFromISR>
    4b88:	48 85 c0             	test   %rax,%rax
    4b8b:	74 08                	je     4b95 <prvQueueQueryFromISR+0xc1>
    4b8d:	48 c7 45 d8 00 00 00 	movq   $0x0,-0x28(%rbp)
    4b94:	00 
    4b95:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
    4b99:	48 89 c7             	mov    %rax,%rdi
    4b9c:	e8 1e 39 00 00       	callq  84bf <xQueueIsQueueEmptyFromISR>
    4ba1:	48 83 f8 01          	cmp    $0x1,%rax
    4ba5:	74 08                	je     4baf <prvQueueQueryFromISR+0xdb>
    4ba7:	48 c7 45 d8 00 00 00 	movq   $0x0,-0x28(%rbp)
    4bae:	00 
    4baf:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
    4bb3:	48 89 c7             	mov    %rax,%rdi
    4bb6:	e8 a0 39 00 00       	callq  855b <xQueueIsQueueFullFromISR>
    4bbb:	48 85 c0             	test   %rax,%rax
    4bbe:	74 08                	je     4bc8 <prvQueueQueryFromISR+0xf4>
    4bc0:	48 c7 45 d8 00 00 00 	movq   $0x0,-0x28(%rbp)
    4bc7:	00 
    4bc8:	48 8d 75 d0          	lea    -0x30(%rbp),%rsi
    4bcc:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
    4bd0:	b9 00 00 00 00       	mov    $0x0,%ecx
    4bd5:	ba 00 00 00 00       	mov    $0x0,%edx
    4bda:	48 89 c7             	mov    %rax,%rdi
    4bdd:	e8 a7 17 00 00       	callq  6389 <xQueueGenericSendFromISR>
    4be2:	48 83 f8 01          	cmp    $0x1,%rax
    4be6:	74 08                	je     4bf0 <prvQueueQueryFromISR+0x11c>
    4be8:	48 c7 45 d8 00 00 00 	movq   $0x0,-0x28(%rbp)
    4bef:	00 
    4bf0:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
    4bf4:	48 89 c7             	mov    %rax,%rdi
    4bf7:	e8 b0 32 00 00       	callq  7eac <uxQueueMessagesWaitingFromISR>
    4bfc:	48 83 f8 01          	cmp    $0x1,%rax
    4c00:	74 08                	je     4c0a <prvQueueQueryFromISR+0x136>
    4c02:	48 c7 45 d8 00 00 00 	movq   $0x0,-0x28(%rbp)
    4c09:	00 
    4c0a:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
    4c0e:	48 89 c7             	mov    %rax,%rdi
    4c11:	e8 a9 38 00 00       	callq  84bf <xQueueIsQueueEmptyFromISR>
    4c16:	48 85 c0             	test   %rax,%rax
    4c19:	74 08                	je     4c23 <prvQueueQueryFromISR+0x14f>
    4c1b:	48 c7 45 d8 00 00 00 	movq   $0x0,-0x28(%rbp)
    4c22:	00 
    4c23:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
    4c27:	48 89 c7             	mov    %rax,%rdi
    4c2a:	e8 2c 39 00 00       	callq  855b <xQueueIsQueueFullFromISR>
    4c2f:	48 83 f8 01          	cmp    $0x1,%rax
    4c33:	74 08                	je     4c3d <prvQueueQueryFromISR+0x169>
    4c35:	48 c7 45 d8 00 00 00 	movq   $0x0,-0x28(%rbp)
    4c3c:	00 
    4c3d:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
    4c41:	48 89 c7             	mov    %rax,%rdi
    4c44:	e8 a5 32 00 00       	callq  7eee <vQueueDelete>
    4c49:	eb 08                	jmp    4c53 <prvQueueQueryFromISR+0x17f>
    4c4b:	48 c7 45 d8 00 00 00 	movq   $0x0,-0x28(%rbp)
    4c52:	00 
    4c53:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
    4c57:	48 8b 4d f8          	mov    -0x8(%rbp),%rcx
    4c5b:	64 48 33 0c 25 28 00 	xor    %fs:0x28,%rcx
    4c62:	00 00 
    4c64:	74 05                	je     4c6b <prvQueueQueryFromISR+0x197>
    4c66:	e8 65 d8 ff ff       	callq  24d0 <__stack_chk_fail@plt>
    4c6b:	c9                   	leaveq 
    4c6c:	c3                   	retq   

0000000000004c6d <prvTaskQueryFunctions>:
    4c6d:	f3 0f 1e fa          	endbr64 
    4c71:	55                   	push   %rbp
    4c72:	48 89 e5             	mov    %rsp,%rbp
    4c75:	53                   	push   %rbx
    4c76:	48 83 ec 58          	sub    $0x58,%rsp
    4c7a:	64 48 8b 04 25 28 00 	mov    %fs:0x28,%rax
    4c81:	00 00 
    4c83:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
    4c87:	31 c0                	xor    %eax,%eax
    4c89:	48 c7 45 b8 01 00 00 	movq   $0x1,-0x48(%rbp)
    4c90:	00 
    4c91:	c7 45 b4 ff 0f 00 00 	movl   $0xfff,-0x4c(%rbp)
    4c98:	b9 00 00 00 00       	mov    $0x0,%ecx
    4c9d:	ba 01 00 00 00       	mov    $0x1,%edx
    4ca2:	48 8d 35 77 c8 02 00 	lea    0x2c877(%rip),%rsi        # 31520 <xStatus.3312>
    4ca9:	bf 00 00 00 00       	mov    $0x0,%edi
    4cae:	e8 df a5 00 00       	callq  f292 <vTaskGetInfo>
    4cb3:	bf 00 00 00 00       	mov    $0x0,%edi
    4cb8:	e8 b0 a8 00 00       	callq  f56d <uxTaskGetStackHighWaterMark>
    4cbd:	8b 15 9d c8 02 00    	mov    0x2c89d(%rip),%edx        # 31560 <xStatus.3312+0x40>
    4cc3:	89 d2                	mov    %edx,%edx
    4cc5:	48 39 d0             	cmp    %rdx,%rax
    4cc8:	74 08                	je     4cd2 <prvTaskQueryFunctions+0x65>
    4cca:	48 c7 45 b8 00 00 00 	movq   $0x0,-0x48(%rbp)
    4cd1:	00 
    4cd2:	bf 00 00 00 00       	mov    $0x0,%edi
    4cd7:	e8 49 a8 00 00       	callq  f525 <uxTaskGetStackHighWaterMark2>
    4cdc:	8b 15 7e c8 02 00    	mov    0x2c87e(%rip),%edx        # 31560 <xStatus.3312+0x40>
    4ce2:	39 d0                	cmp    %edx,%eax
    4ce4:	74 08                	je     4cee <prvTaskQueryFunctions+0x81>
    4ce6:	48 c7 45 b8 00 00 00 	movq   $0x0,-0x48(%rbp)
    4ced:	00 
    4cee:	e8 82 cc 00 00       	callq  11975 <xTimerGetTimerDaemonTaskHandle>
    4cf3:	48 89 45 c8          	mov    %rax,-0x38(%rbp)
    4cf7:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
    4cfb:	48 89 c7             	mov    %rax,%rdi
    4cfe:	e8 5e 80 00 00       	callq  cd61 <vTaskSuspend>
    4d03:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
    4d07:	b9 05 00 00 00       	mov    $0x5,%ecx
    4d0c:	ba 00 00 00 00       	mov    $0x0,%edx
    4d11:	48 8d 35 08 c8 02 00 	lea    0x2c808(%rip),%rsi        # 31520 <xStatus.3312>
    4d18:	48 89 c7             	mov    %rax,%rdi
    4d1b:	e8 72 a5 00 00       	callq  f292 <vTaskGetInfo>
    4d20:	8b 05 12 c8 02 00    	mov    0x2c812(%rip),%eax        # 31538 <xStatus.3312+0x18>
    4d26:	83 f8 03             	cmp    $0x3,%eax
    4d29:	74 08                	je     4d33 <prvTaskQueryFunctions+0xc6>
    4d2b:	48 c7 45 b8 00 00 00 	movq   $0x0,-0x48(%rbp)
    4d32:	00 
    4d33:	48 8b 1d 0e c8 02 00 	mov    0x2c80e(%rip),%rbx        # 31548 <xStatus.3312+0x28>
    4d3a:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
    4d3e:	48 89 c7             	mov    %rax,%rdi
    4d41:	e8 a7 7c 00 00       	callq  c9ed <uxTaskPriorityGetFromISR>
    4d46:	48 39 c3             	cmp    %rax,%rbx
    4d49:	74 08                	je     4d53 <prvTaskQueryFunctions+0xe6>
    4d4b:	48 c7 45 b8 00 00 00 	movq   $0x0,-0x48(%rbp)
    4d52:	00 
    4d53:	48 8b 05 ee c7 02 00 	mov    0x2c7ee(%rip),%rax        # 31548 <xStatus.3312+0x28>
    4d5a:	48 83 f8 06          	cmp    $0x6,%rax
    4d5e:	74 08                	je     4d68 <prvTaskQueryFunctions+0xfb>
    4d60:	48 c7 45 b8 00 00 00 	movq   $0x0,-0x48(%rbp)
    4d67:	00 
    4d68:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
    4d6c:	48 89 c7             	mov    %rax,%rdi
    4d6f:	e8 22 84 00 00       	callq  d196 <xTaskResumeFromISR>
    4d74:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
    4d78:	b9 05 00 00 00       	mov    $0x5,%ecx
    4d7d:	ba 01 00 00 00       	mov    $0x1,%edx
    4d82:	48 8d 35 97 c7 02 00 	lea    0x2c797(%rip),%rsi        # 31520 <xStatus.3312>
    4d89:	48 89 c7             	mov    %rax,%rdi
    4d8c:	e8 01 a5 00 00       	callq  f292 <vTaskGetInfo>
    4d91:	8b 05 a1 c7 02 00    	mov    0x2c7a1(%rip),%eax        # 31538 <xStatus.3312+0x18>
    4d97:	83 f8 01             	cmp    $0x1,%eax
    4d9a:	74 13                	je     4daf <prvTaskQueryFunctions+0x142>
    4d9c:	8b 05 96 c7 02 00    	mov    0x2c796(%rip),%eax        # 31538 <xStatus.3312+0x18>
    4da2:	83 f8 02             	cmp    $0x2,%eax
    4da5:	74 08                	je     4daf <prvTaskQueryFunctions+0x142>
    4da7:	48 c7 45 b8 00 00 00 	movq   $0x0,-0x48(%rbp)
    4dae:	00 
    4daf:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
    4db3:	48 89 c7             	mov    %rax,%rdi
    4db6:	e8 b2 a7 00 00       	callq  f56d <uxTaskGetStackHighWaterMark>
    4dbb:	8b 15 9f c7 02 00    	mov    0x2c79f(%rip),%edx        # 31560 <xStatus.3312+0x40>
    4dc1:	89 d2                	mov    %edx,%edx
    4dc3:	48 39 d0             	cmp    %rdx,%rax
    4dc6:	74 08                	je     4dd0 <prvTaskQueryFunctions+0x163>
    4dc8:	48 c7 45 b8 00 00 00 	movq   $0x0,-0x48(%rbp)
    4dcf:	00 
    4dd0:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
    4dd4:	48 89 c7             	mov    %rax,%rdi
    4dd7:	e8 49 a7 00 00       	callq  f525 <uxTaskGetStackHighWaterMark2>
    4ddc:	8b 15 7e c7 02 00    	mov    0x2c77e(%rip),%edx        # 31560 <xStatus.3312+0x40>
    4de2:	39 d0                	cmp    %edx,%eax
    4de4:	74 08                	je     4dee <prvTaskQueryFunctions+0x181>
    4de6:	48 c7 45 b8 00 00 00 	movq   $0x0,-0x48(%rbp)
    4ded:	00 
    4dee:	e8 34 8f 00 00       	callq  dd27 <xTaskGetIdleTaskHandle>
    4df3:	48 89 45 d0          	mov    %rax,-0x30(%rbp)
    4df7:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
    4dfb:	48 89 c7             	mov    %rax,%rdi
    4dfe:	e8 a8 8f 00 00       	callq  ddab <xTaskAbortDelay>
    4e03:	48 85 c0             	test   %rax,%rax
    4e06:	74 08                	je     4e10 <prvTaskQueryFunctions+0x1a3>
    4e08:	48 c7 45 b8 00 00 00 	movq   $0x0,-0x48(%rbp)
    4e0f:	00 
    4e10:	e8 bd 8a 00 00       	callq  d8d2 <uxTaskGetNumberOfTasks>
    4e15:	48 89 45 d8          	mov    %rax,-0x28(%rbp)
    4e19:	48 8b 55 d8          	mov    -0x28(%rbp),%rdx
    4e1d:	48 89 d0             	mov    %rdx,%rax
    4e20:	48 c1 e0 03          	shl    $0x3,%rax
    4e24:	48 01 d0             	add    %rdx,%rax
    4e27:	48 c1 e0 03          	shl    $0x3,%rax
    4e2b:	48 89 c7             	mov    %rax,%rdi
    4e2e:	e8 4d d8 00 00       	callq  12680 <pvPortMalloc>
    4e33:	48 89 05 2e c7 02 00 	mov    %rax,0x2c72e(%rip)        # 31568 <pxStatusArray.3313>
    4e3a:	48 8b 05 27 c7 02 00 	mov    0x2c727(%rip),%rax        # 31568 <pxStatusArray.3313>
    4e41:	48 85 c0             	test   %rax,%rax
    4e44:	0f 84 30 01 00 00    	je     4f7a <prvTaskQueryFunctions+0x30d>
    4e4a:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
    4e4e:	48 d1 e8             	shr    %rax
    4e51:	48 89 c1             	mov    %rax,%rcx
    4e54:	48 8b 05 0d c7 02 00 	mov    0x2c70d(%rip),%rax        # 31568 <pxStatusArray.3313>
    4e5b:	ba 00 00 00 00       	mov    $0x0,%edx
    4e60:	48 89 ce             	mov    %rcx,%rsi
    4e63:	48 89 c7             	mov    %rax,%rdi
    4e66:	e8 30 8d 00 00       	callq  db9b <uxTaskGetSystemState>
    4e6b:	48 89 45 e0          	mov    %rax,-0x20(%rbp)
    4e6f:	48 83 7d e0 00       	cmpq   $0x0,-0x20(%rbp)
    4e74:	74 08                	je     4e7e <prvTaskQueryFunctions+0x211>
    4e76:	48 c7 45 b8 00 00 00 	movq   $0x0,-0x48(%rbp)
    4e7d:	00 
    4e7e:	48 8b 05 e3 c6 02 00 	mov    0x2c6e3(%rip),%rax        # 31568 <pxStatusArray.3313>
    4e85:	48 8d 55 ac          	lea    -0x54(%rbp),%rdx
    4e89:	48 8b 4d d8          	mov    -0x28(%rbp),%rcx
    4e8d:	48 89 ce             	mov    %rcx,%rsi
    4e90:	48 89 c7             	mov    %rax,%rdi
    4e93:	e8 03 8d 00 00       	callq  db9b <uxTaskGetSystemState>
    4e98:	48 8b 55 d8          	mov    -0x28(%rbp),%rdx
    4e9c:	48 89 d0             	mov    %rdx,%rax
    4e9f:	48 c1 e0 03          	shl    $0x3,%rax
    4ea3:	48 01 d0             	add    %rdx,%rax
    4ea6:	48 c1 e0 03          	shl    $0x3,%rax
    4eaa:	48 89 c2             	mov    %rax,%rdx
    4ead:	48 8b 05 b4 c6 02 00 	mov    0x2c6b4(%rip),%rax        # 31568 <pxStatusArray.3313>
    4eb4:	be aa 00 00 00       	mov    $0xaa,%esi
    4eb9:	48 89 c7             	mov    %rax,%rdi
    4ebc:	e8 4f d6 ff ff       	callq  2510 <memset@plt>
    4ec1:	48 8b 05 a0 c6 02 00 	mov    0x2c6a0(%rip),%rax        # 31568 <pxStatusArray.3313>
    4ec8:	48 8d 55 b0          	lea    -0x50(%rbp),%rdx
    4ecc:	48 8b 4d d8          	mov    -0x28(%rbp),%rcx
    4ed0:	48 89 ce             	mov    %rcx,%rsi
    4ed3:	48 89 c7             	mov    %rax,%rdi
    4ed6:	e8 c0 8c 00 00       	callq  db9b <uxTaskGetSystemState>
    4edb:	48 89 45 e0          	mov    %rax,-0x20(%rbp)
    4edf:	8b 55 b0             	mov    -0x50(%rbp),%edx
    4ee2:	8b 45 ac             	mov    -0x54(%rbp),%eax
    4ee5:	29 c2                	sub    %eax,%edx
    4ee7:	89 d0                	mov    %edx,%eax
    4ee9:	39 45 b4             	cmp    %eax,-0x4c(%rbp)
    4eec:	73 08                	jae    4ef6 <prvTaskQueryFunctions+0x289>
    4eee:	48 c7 45 b8 00 00 00 	movq   $0x0,-0x48(%rbp)
    4ef5:	00 
    4ef6:	48 c7 45 c0 00 00 00 	movq   $0x0,-0x40(%rbp)
    4efd:	00 
    4efe:	eb 5f                	jmp    4f5f <prvTaskQueryFunctions+0x2f2>
    4f00:	48 8b 0d 61 c6 02 00 	mov    0x2c661(%rip),%rcx        # 31568 <pxStatusArray.3313>
    4f07:	48 8b 55 c0          	mov    -0x40(%rbp),%rdx
    4f0b:	48 89 d0             	mov    %rdx,%rax
    4f0e:	48 c1 e0 03          	shl    $0x3,%rax
    4f12:	48 01 d0             	add    %rdx,%rax
    4f15:	48 c1 e0 03          	shl    $0x3,%rax
    4f19:	48 01 c8             	add    %rcx,%rax
    4f1c:	8b 40 18             	mov    0x18(%rax),%eax
    4f1f:	83 f8 04             	cmp    $0x4,%eax
    4f22:	76 08                	jbe    4f2c <prvTaskQueryFunctions+0x2bf>
    4f24:	48 c7 45 b8 00 00 00 	movq   $0x0,-0x48(%rbp)
    4f2b:	00 
    4f2c:	48 8b 0d 35 c6 02 00 	mov    0x2c635(%rip),%rcx        # 31568 <pxStatusArray.3313>
    4f33:	48 8b 55 c0          	mov    -0x40(%rbp),%rdx
    4f37:	48 89 d0             	mov    %rdx,%rax
    4f3a:	48 c1 e0 03          	shl    $0x3,%rax
    4f3e:	48 01 d0             	add    %rdx,%rax
    4f41:	48 c1 e0 03          	shl    $0x3,%rax
    4f45:	48 01 c8             	add    %rcx,%rax
    4f48:	48 8b 40 20          	mov    0x20(%rax),%rax
    4f4c:	48 83 f8 06          	cmp    $0x6,%rax
    4f50:	76 08                	jbe    4f5a <prvTaskQueryFunctions+0x2ed>
    4f52:	48 c7 45 b8 00 00 00 	movq   $0x0,-0x48(%rbp)
    4f59:	00 
    4f5a:	48 83 45 c0 01       	addq   $0x1,-0x40(%rbp)
    4f5f:	48 8b 45 c0          	mov    -0x40(%rbp),%rax
    4f63:	48 3b 45 e0          	cmp    -0x20(%rbp),%rax
    4f67:	72 97                	jb     4f00 <prvTaskQueryFunctions+0x293>
    4f69:	48 8b 05 f8 c5 02 00 	mov    0x2c5f8(%rip),%rax        # 31568 <pxStatusArray.3313>
    4f70:	48 89 c7             	mov    %rax,%rdi
    4f73:	e8 28 d8 00 00       	callq  127a0 <vPortFree>
    4f78:	eb 08                	jmp    4f82 <prvTaskQueryFunctions+0x315>
    4f7a:	48 c7 45 b8 00 00 00 	movq   $0x0,-0x48(%rbp)
    4f81:	00 
    4f82:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
    4f86:	48 8b 5d e8          	mov    -0x18(%rbp),%rbx
    4f8a:	64 48 33 1c 25 28 00 	xor    %fs:0x28,%rbx
    4f91:	00 00 
    4f93:	74 05                	je     4f9a <prvTaskQueryFunctions+0x32d>
    4f95:	e8 36 d5 ff ff       	callq  24d0 <__stack_chk_fail@plt>
    4f9a:	48 83 c4 58          	add    $0x58,%rsp
    4f9e:	5b                   	pop    %rbx
    4f9f:	5d                   	pop    %rbp
    4fa0:	c3                   	retq   

0000000000004fa1 <prvDummyTagFunction>:
    4fa1:	f3 0f 1e fa          	endbr64 
    4fa5:	55                   	push   %rbp
    4fa6:	48 89 e5             	mov    %rsp,%rbp
    4fa9:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
    4fad:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    4fb1:	5d                   	pop    %rbp
    4fb2:	c3                   	retq   

0000000000004fb3 <prvTaskTags>:
    4fb3:	f3 0f 1e fa          	endbr64 
    4fb7:	55                   	push   %rbp
    4fb8:	48 89 e5             	mov    %rsp,%rbp
    4fbb:	48 83 ec 20          	sub    $0x20,%rsp
    4fbf:	48 c7 45 e8 01 00 00 	movq   $0x1,-0x18(%rbp)
    4fc6:	00 
    4fc7:	b8 ef be ad de       	mov    $0xdeadbeef,%eax
    4fcc:	48 89 45 f0          	mov    %rax,-0x10(%rbp)
    4fd0:	e8 a0 c9 00 00       	callq  11975 <xTimerGetTimerDaemonTaskHandle>
    4fd5:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
    4fd9:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    4fdd:	48 8d 35 bd ff ff ff 	lea    -0x43(%rip),%rsi        # 4fa1 <prvDummyTagFunction>
    4fe4:	48 89 c7             	mov    %rax,%rdi
    4fe7:	e8 d3 93 00 00       	callq  e3bf <vTaskSetApplicationTaskTag>
    4fec:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    4ff0:	48 89 c7             	mov    %rax,%rdi
    4ff3:	e8 13 94 00 00       	callq  e40b <xTaskGetApplicationTaskTag>
    4ff8:	48 8d 15 a2 ff ff ff 	lea    -0x5e(%rip),%rdx        # 4fa1 <prvDummyTagFunction>
    4fff:	48 39 d0             	cmp    %rdx,%rax
    5002:	74 0a                	je     500e <prvTaskTags+0x5b>
    5004:	48 c7 45 e8 00 00 00 	movq   $0x0,-0x18(%rbp)
    500b:	00 
    500c:	eb 3f                	jmp    504d <prvTaskTags+0x9a>
    500e:	48 8b 55 f0          	mov    -0x10(%rbp),%rdx
    5012:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    5016:	48 89 d6             	mov    %rdx,%rsi
    5019:	48 89 c7             	mov    %rax,%rdi
    501c:	e8 83 94 00 00       	callq  e4a4 <xTaskCallApplicationTaskHook>
    5021:	48 39 45 f0          	cmp    %rax,-0x10(%rbp)
    5025:	74 08                	je     502f <prvTaskTags+0x7c>
    5027:	48 c7 45 e8 00 00 00 	movq   $0x0,-0x18(%rbp)
    502e:	00 
    502f:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    5033:	be 00 00 00 00       	mov    $0x0,%esi
    5038:	48 89 c7             	mov    %rax,%rdi
    503b:	e8 64 94 00 00       	callq  e4a4 <xTaskCallApplicationTaskHook>
    5040:	48 85 c0             	test   %rax,%rax
    5043:	74 08                	je     504d <prvTaskTags+0x9a>
    5045:	48 c7 45 e8 00 00 00 	movq   $0x0,-0x18(%rbp)
    504c:	00 
    504d:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    5051:	48 89 c7             	mov    %rax,%rdi
    5054:	e8 f9 93 00 00       	callq  e452 <xTaskGetApplicationTaskTagFromISR>
    5059:	48 8d 15 41 ff ff ff 	lea    -0xbf(%rip),%rdx        # 4fa1 <prvDummyTagFunction>
    5060:	48 39 d0             	cmp    %rdx,%rax
    5063:	74 08                	je     506d <prvTaskTags+0xba>
    5065:	48 c7 45 e8 00 00 00 	movq   $0x0,-0x18(%rbp)
    506c:	00 
    506d:	be 00 00 00 00       	mov    $0x0,%esi
    5072:	bf 00 00 00 00       	mov    $0x0,%edi
    5077:	e8 43 93 00 00       	callq  e3bf <vTaskSetApplicationTaskTag>
    507c:	bf 00 00 00 00       	mov    $0x0,%edi
    5081:	e8 85 93 00 00       	callq  e40b <xTaskGetApplicationTaskTag>
    5086:	48 85 c0             	test   %rax,%rax
    5089:	74 08                	je     5093 <prvTaskTags+0xe0>
    508b:	48 c7 45 e8 00 00 00 	movq   $0x0,-0x18(%rbp)
    5092:	00 
    5093:	bf 00 00 00 00       	mov    $0x0,%edi
    5098:	e8 b5 93 00 00       	callq  e452 <xTaskGetApplicationTaskTagFromISR>
    509d:	48 85 c0             	test   %rax,%rax
    50a0:	74 08                	je     50aa <prvTaskTags+0xf7>
    50a2:	48 c7 45 e8 00 00 00 	movq   $0x0,-0x18(%rbp)
    50a9:	00 
    50aa:	48 8d 35 f0 fe ff ff 	lea    -0x110(%rip),%rsi        # 4fa1 <prvDummyTagFunction>
    50b1:	bf 00 00 00 00       	mov    $0x0,%edi
    50b6:	e8 04 93 00 00       	callq  e3bf <vTaskSetApplicationTaskTag>
    50bb:	bf 00 00 00 00       	mov    $0x0,%edi
    50c0:	e8 46 93 00 00       	callq  e40b <xTaskGetApplicationTaskTag>
    50c5:	48 8d 15 d5 fe ff ff 	lea    -0x12b(%rip),%rdx        # 4fa1 <prvDummyTagFunction>
    50cc:	48 39 d0             	cmp    %rdx,%rax
    50cf:	74 0a                	je     50db <prvTaskTags+0x128>
    50d1:	48 c7 45 e8 00 00 00 	movq   $0x0,-0x18(%rbp)
    50d8:	00 
    50d9:	eb 3b                	jmp    5116 <prvTaskTags+0x163>
    50db:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
    50df:	48 89 c6             	mov    %rax,%rsi
    50e2:	bf 00 00 00 00       	mov    $0x0,%edi
    50e7:	e8 b8 93 00 00       	callq  e4a4 <xTaskCallApplicationTaskHook>
    50ec:	48 39 45 f0          	cmp    %rax,-0x10(%rbp)
    50f0:	74 08                	je     50fa <prvTaskTags+0x147>
    50f2:	48 c7 45 e8 00 00 00 	movq   $0x0,-0x18(%rbp)
    50f9:	00 
    50fa:	be 00 00 00 00       	mov    $0x0,%esi
    50ff:	bf 00 00 00 00       	mov    $0x0,%edi
    5104:	e8 9b 93 00 00       	callq  e4a4 <xTaskCallApplicationTaskHook>
    5109:	48 85 c0             	test   %rax,%rax
    510c:	74 08                	je     5116 <prvTaskTags+0x163>
    510e:	48 c7 45 e8 00 00 00 	movq   $0x0,-0x18(%rbp)
    5115:	00 
    5116:	bf 00 00 00 00       	mov    $0x0,%edi
    511b:	e8 32 93 00 00       	callq  e452 <xTaskGetApplicationTaskTagFromISR>
    5120:	48 8d 15 7a fe ff ff 	lea    -0x186(%rip),%rdx        # 4fa1 <prvDummyTagFunction>
    5127:	48 39 d0             	cmp    %rdx,%rax
    512a:	74 08                	je     5134 <prvTaskTags+0x181>
    512c:	48 c7 45 e8 00 00 00 	movq   $0x0,-0x18(%rbp)
    5133:	00 
    5134:	be 00 00 00 00       	mov    $0x0,%esi
    5139:	bf 00 00 00 00       	mov    $0x0,%edi
    513e:	e8 7c 92 00 00       	callq  e3bf <vTaskSetApplicationTaskTag>
    5143:	bf 00 00 00 00       	mov    $0x0,%edi
    5148:	e8 be 92 00 00       	callq  e40b <xTaskGetApplicationTaskTag>
    514d:	48 85 c0             	test   %rax,%rax
    5150:	74 08                	je     515a <prvTaskTags+0x1a7>
    5152:	48 c7 45 e8 00 00 00 	movq   $0x0,-0x18(%rbp)
    5159:	00 
    515a:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
    515e:	c9                   	leaveq 
    515f:	c3                   	retq   

0000000000005160 <prvTimerQuery>:
    5160:	f3 0f 1e fa          	endbr64 
    5164:	55                   	push   %rbp
    5165:	48 89 e5             	mov    %rsp,%rbp
    5168:	48 83 ec 30          	sub    $0x30,%rsp
    516c:	48 c7 45 d8 01 00 00 	movq   $0x1,-0x28(%rbp)
    5173:	00 
    5174:	48 8d 05 a3 26 02 00 	lea    0x226a3(%rip),%rax        # 2781e <_IO_stdin_used+0x81e>
    517b:	48 89 45 e0          	mov    %rax,-0x20(%rbp)
    517f:	48 c7 45 e8 64 00 00 	movq   $0x64,-0x18(%rbp)
    5186:	00 
    5187:	48 c7 45 f0 37 00 00 	movq   $0x37,-0x10(%rbp)
    518e:	00 
    518f:	48 8b 55 e8          	mov    -0x18(%rbp),%rdx
    5193:	48 8b 75 e8          	mov    -0x18(%rbp),%rsi
    5197:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
    519b:	41 b8 00 00 00 00    	mov    $0x0,%r8d
    51a1:	48 89 d1             	mov    %rdx,%rcx
    51a4:	ba 00 00 00 00       	mov    $0x0,%edx
    51a9:	48 89 c7             	mov    %rax,%rdi
    51ac:	e8 14 c2 00 00       	callq  113c5 <xTimerCreate>
    51b1:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
    51b5:	48 83 7d f8 00       	cmpq   $0x0,-0x8(%rbp)
    51ba:	0f 84 95 00 00 00    	je     5255 <prvTimerQuery+0xf5>
    51c0:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    51c4:	48 89 c7             	mov    %rax,%rdi
    51c7:	e8 d7 c7 00 00       	callq  119a3 <xTimerGetPeriod>
    51cc:	48 39 45 e8          	cmp    %rax,-0x18(%rbp)
    51d0:	74 08                	je     51da <prvTimerQuery+0x7a>
    51d2:	48 c7 45 d8 00 00 00 	movq   $0x0,-0x28(%rbp)
    51d9:	00 
    51da:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    51de:	48 89 c7             	mov    %rax,%rdi
    51e1:	e8 0f c9 00 00       	callq  11af5 <pcTimerGetName>
    51e6:	48 89 c2             	mov    %rax,%rdx
    51e9:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
    51ed:	48 89 c6             	mov    %rax,%rsi
    51f0:	48 89 d7             	mov    %rdx,%rdi
    51f3:	e8 58 d3 ff ff       	callq  2550 <strcmp@plt>
    51f8:	85 c0                	test   %eax,%eax
    51fa:	74 08                	je     5204 <prvTimerQuery+0xa4>
    51fc:	48 c7 45 d8 00 00 00 	movq   $0x0,-0x28(%rbp)
    5203:	00 
    5204:	48 8b 55 f0          	mov    -0x10(%rbp),%rdx
    5208:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    520c:	48 89 d6             	mov    %rdx,%rsi
    520f:	48 89 c7             	mov    %rax,%rdi
    5212:	e8 4a d4 00 00       	callq  12661 <vTimerSetTimerNumber>
    5217:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    521b:	48 89 c7             	mov    %rax,%rdi
    521e:	e8 28 d4 00 00       	callq  1264b <uxTimerGetTimerNumber>
    5223:	48 39 45 f0          	cmp    %rax,-0x10(%rbp)
    5227:	74 08                	je     5231 <prvTimerQuery+0xd1>
    5229:	48 c7 45 d8 00 00 00 	movq   $0x0,-0x28(%rbp)
    5230:	00 
    5231:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    5235:	49 c7 c0 ff ff ff ff 	mov    $0xffffffffffffffff,%r8
    523c:	b9 00 00 00 00       	mov    $0x0,%ecx
    5241:	ba 00 00 00 00       	mov    $0x0,%edx
    5246:	be 05 00 00 00       	mov    $0x5,%esi
    524b:	48 89 c7             	mov    %rax,%rdi
    524e:	e8 e2 c3 00 00       	callq  11635 <xTimerGenericCommand>
    5253:	eb 08                	jmp    525d <prvTimerQuery+0xfd>
    5255:	48 c7 45 d8 00 00 00 	movq   $0x0,-0x28(%rbp)
    525c:	00 
    525d:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
    5261:	c9                   	leaveq 
    5262:	c3                   	retq   

0000000000005263 <xRunCodeCoverageTestAdditions>:
    5263:	f3 0f 1e fa          	endbr64 
    5267:	55                   	push   %rbp
    5268:	48 89 e5             	mov    %rsp,%rbp
    526b:	48 83 ec 10          	sub    $0x10,%rsp
    526f:	48 c7 45 f8 01 00 00 	movq   $0x1,-0x8(%rbp)
    5276:	00 
    5277:	e8 25 f4 ff ff       	callq  46a1 <prvStaticAllocationsWithNullBuffers>
    527c:	48 21 45 f8          	and    %rax,-0x8(%rbp)
    5280:	e8 62 f5 ff ff       	callq  47e7 <prvTraceUtils>
    5285:	48 21 45 f8          	and    %rax,-0x8(%rbp)
    5289:	e8 85 f7 ff ff       	callq  4a13 <prvPeekTimeout>
    528e:	48 21 45 f8          	and    %rax,-0x8(%rbp)
    5292:	e8 3d f8 ff ff       	callq  4ad4 <prvQueueQueryFromISR>
    5297:	48 21 45 f8          	and    %rax,-0x8(%rbp)
    529b:	e8 cd f9 ff ff       	callq  4c6d <prvTaskQueryFunctions>
    52a0:	48 21 45 f8          	and    %rax,-0x8(%rbp)
    52a4:	e8 0a fd ff ff       	callq  4fb3 <prvTaskTags>
    52a9:	48 21 45 f8          	and    %rax,-0x8(%rbp)
    52ad:	e8 ae fe ff ff       	callq  5160 <prvTimerQuery>
    52b2:	48 21 45 f8          	and    %rax,-0x8(%rbp)
    52b6:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    52ba:	c9                   	leaveq 
    52bb:	c3                   	retq   

00000000000052bc <vConfigureTimerForRunTimeStats>:
    52bc:	f3 0f 1e fa          	endbr64 
    52c0:	55                   	push   %rbp
    52c1:	48 89 e5             	mov    %rsp,%rbp
    52c4:	48 83 ec 20          	sub    $0x20,%rsp
    52c8:	64 48 8b 04 25 28 00 	mov    %fs:0x28,%rax
    52cf:	00 00 
    52d1:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
    52d5:	31 c0                	xor    %eax,%eax
    52d7:	48 8d 45 e0          	lea    -0x20(%rbp),%rax
    52db:	48 89 c6             	mov    %rax,%rsi
    52de:	bf 01 00 00 00       	mov    $0x1,%edi
    52e3:	e8 78 d1 ff ff       	callq  2460 <clock_gettime@plt>
    52e8:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
    52ec:	48 69 c0 00 ca 9a 3b 	imul   $0x3b9aca00,%rax,%rax
    52f3:	48 8b 55 e8          	mov    -0x18(%rbp),%rdx
    52f7:	48 01 d0             	add    %rdx,%rax
    52fa:	48 89 05 6f c2 02 00 	mov    %rax,0x2c26f(%rip)        # 31570 <ulStartTimeNs>
    5301:	90                   	nop
    5302:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    5306:	64 48 33 04 25 28 00 	xor    %fs:0x28,%rax
    530d:	00 00 
    530f:	74 05                	je     5316 <vConfigureTimerForRunTimeStats+0x5a>
    5311:	e8 ba d1 ff ff       	callq  24d0 <__stack_chk_fail@plt>
    5316:	c9                   	leaveq 
    5317:	c3                   	retq   

0000000000005318 <ulGetRunTimeCounterValue>:
    5318:	f3 0f 1e fa          	endbr64 
    531c:	55                   	push   %rbp
    531d:	48 89 e5             	mov    %rsp,%rbp
    5320:	48 83 ec 20          	sub    $0x20,%rsp
    5324:	64 48 8b 04 25 28 00 	mov    %fs:0x28,%rax
    532b:	00 00 
    532d:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
    5331:	31 c0                	xor    %eax,%eax
    5333:	48 8d 45 e0          	lea    -0x20(%rbp),%rax
    5337:	48 89 c6             	mov    %rax,%rsi
    533a:	bf 01 00 00 00       	mov    $0x1,%edi
    533f:	e8 1c d1 ff ff       	callq  2460 <clock_gettime@plt>
    5344:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
    5348:	48 69 c0 00 ca 9a 3b 	imul   $0x3b9aca00,%rax,%rax
    534f:	48 8b 55 e8          	mov    -0x18(%rbp),%rdx
    5353:	48 01 c2             	add    %rax,%rdx
    5356:	48 8b 05 13 c2 02 00 	mov    0x2c213(%rip),%rax        # 31570 <ulStartTimeNs>
    535d:	48 29 c2             	sub    %rax,%rdx
    5360:	48 89 d0             	mov    %rdx,%rax
    5363:	48 8b 4d f8          	mov    -0x8(%rbp),%rcx
    5367:	64 48 33 0c 25 28 00 	xor    %fs:0x28,%rcx
    536e:	00 00 
    5370:	74 05                	je     5377 <ulGetRunTimeCounterValue+0x5f>
    5372:	e8 59 d1 ff ff       	callq  24d0 <__stack_chk_fail@plt>
    5377:	c9                   	leaveq 
    5378:	c3                   	retq   

0000000000005379 <xQueueGenericReset>:
    5379:	f3 0f 1e fa          	endbr64 
    537d:	55                   	push   %rbp
    537e:	48 89 e5             	mov    %rsp,%rbp
    5381:	48 83 ec 20          	sub    $0x20,%rsp
    5385:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
    5389:	48 89 75 e0          	mov    %rsi,-0x20(%rbp)
    538d:	48 c7 45 f0 01 00 00 	movq   $0x1,-0x10(%rbp)
    5394:	00 
    5395:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
    5399:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
    539d:	48 83 7d f8 00       	cmpq   $0x0,-0x8(%rbp)
    53a2:	75 11                	jne    53b5 <xQueueGenericReset+0x3c>
    53a4:	be 10 01 00 00       	mov    $0x110,%esi
    53a9:	48 8d 3d 78 24 02 00 	lea    0x22478(%rip),%rdi        # 27828 <_IO_stdin_used+0x828>
    53b0:	e8 57 e9 ff ff       	callq  3d0c <vAssertCalled>
    53b5:	48 83 7d f8 00       	cmpq   $0x0,-0x8(%rbp)
    53ba:	0f 84 22 01 00 00    	je     54e2 <xQueueGenericReset+0x169>
    53c0:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    53c4:	48 8b 40 78          	mov    0x78(%rax),%rax
    53c8:	48 85 c0             	test   %rax,%rax
    53cb:	0f 84 11 01 00 00    	je     54e2 <xQueueGenericReset+0x169>
    53d1:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    53d5:	48 8b 80 80 00 00 00 	mov    0x80(%rax),%rax
    53dc:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
    53e0:	48 8b 52 78          	mov    0x78(%rdx),%rdx
    53e4:	b9 00 00 00 00       	mov    $0x0,%ecx
    53e9:	48 f7 e2             	mul    %rdx
    53ec:	71 05                	jno    53f3 <xQueueGenericReset+0x7a>
    53ee:	b9 01 00 00 00       	mov    $0x1,%ecx
    53f3:	48 89 c8             	mov    %rcx,%rax
    53f6:	48 85 c0             	test   %rax,%rax
    53f9:	0f 85 e3 00 00 00    	jne    54e2 <xQueueGenericReset+0x169>
    53ff:	e8 cb d9 00 00       	callq  12dcf <vPortEnterCritical>
    5404:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    5408:	48 8b 10             	mov    (%rax),%rdx
    540b:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    540f:	48 8b 48 78          	mov    0x78(%rax),%rcx
    5413:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    5417:	48 8b 80 80 00 00 00 	mov    0x80(%rax),%rax
    541e:	48 0f af c1          	imul   %rcx,%rax
    5422:	48 01 c2             	add    %rax,%rdx
    5425:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    5429:	48 89 50 10          	mov    %rdx,0x10(%rax)
    542d:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    5431:	48 c7 40 70 00 00 00 	movq   $0x0,0x70(%rax)
    5438:	00 
    5439:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    543d:	48 8b 10             	mov    (%rax),%rdx
    5440:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    5444:	48 89 50 08          	mov    %rdx,0x8(%rax)
    5448:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    544c:	48 8b 10             	mov    (%rax),%rdx
    544f:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    5453:	48 8b 40 78          	mov    0x78(%rax),%rax
    5457:	48 8d 48 ff          	lea    -0x1(%rax),%rcx
    545b:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    545f:	48 8b 80 80 00 00 00 	mov    0x80(%rax),%rax
    5466:	48 0f af c1          	imul   %rcx,%rax
    546a:	48 01 c2             	add    %rax,%rdx
    546d:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    5471:	48 89 50 18          	mov    %rdx,0x18(%rax)
    5475:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    5479:	c6 80 88 00 00 00 ff 	movb   $0xff,0x88(%rax)
    5480:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    5484:	c6 80 89 00 00 00 ff 	movb   $0xff,0x89(%rax)
    548b:	48 83 7d e0 00       	cmpq   $0x0,-0x20(%rbp)
    5490:	75 29                	jne    54bb <xQueueGenericReset+0x142>
    5492:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    5496:	48 8b 40 20          	mov    0x20(%rax),%rax
    549a:	48 85 c0             	test   %rax,%rax
    549d:	74 3c                	je     54db <xQueueGenericReset+0x162>
    549f:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    54a3:	48 83 c0 20          	add    $0x20,%rax
    54a7:	48 89 c7             	mov    %rax,%rdi
    54aa:	e8 bf 94 00 00       	callq  e96e <xTaskRemoveFromEventList>
    54af:	48 85 c0             	test   %rax,%rax
    54b2:	74 27                	je     54db <xQueueGenericReset+0x162>
    54b4:	e8 bb d9 00 00       	callq  12e74 <vPortYield>
    54b9:	eb 20                	jmp    54db <xQueueGenericReset+0x162>
    54bb:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    54bf:	48 83 c0 20          	add    $0x20,%rax
    54c3:	48 89 c7             	mov    %rax,%rdi
    54c6:	e8 78 37 00 00       	callq  8c43 <vListInitialise>
    54cb:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    54cf:	48 83 c0 48          	add    $0x48,%rax
    54d3:	48 89 c7             	mov    %rax,%rdi
    54d6:	e8 68 37 00 00       	callq  8c43 <vListInitialise>
    54db:	e8 1d d9 00 00       	callq  12dfd <vPortExitCritical>
    54e0:	eb 08                	jmp    54ea <xQueueGenericReset+0x171>
    54e2:	48 c7 45 f0 00 00 00 	movq   $0x0,-0x10(%rbp)
    54e9:	00 
    54ea:	48 83 7d f0 00       	cmpq   $0x0,-0x10(%rbp)
    54ef:	75 11                	jne    5502 <xQueueGenericReset+0x189>
    54f1:	be 45 01 00 00       	mov    $0x145,%esi
    54f6:	48 8d 3d 2b 23 02 00 	lea    0x2232b(%rip),%rdi        # 27828 <_IO_stdin_used+0x828>
    54fd:	e8 0a e8 ff ff       	callq  3d0c <vAssertCalled>
    5502:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
    5506:	c9                   	leaveq 
    5507:	c3                   	retq   

0000000000005508 <xQueueGenericCreateStatic>:
    5508:	f3 0f 1e fa          	endbr64 
    550c:	55                   	push   %rbp
    550d:	48 89 e5             	mov    %rsp,%rbp
    5510:	48 83 ec 40          	sub    $0x40,%rsp
    5514:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
    5518:	48 89 75 e0          	mov    %rsi,-0x20(%rbp)
    551c:	48 89 55 d8          	mov    %rdx,-0x28(%rbp)
    5520:	48 89 4d d0          	mov    %rcx,-0x30(%rbp)
    5524:	44 89 c0             	mov    %r8d,%eax
    5527:	88 45 cc             	mov    %al,-0x34(%rbp)
    552a:	48 c7 45 f8 00 00 00 	movq   $0x0,-0x8(%rbp)
    5531:	00 
    5532:	48 83 7d d0 00       	cmpq   $0x0,-0x30(%rbp)
    5537:	75 11                	jne    554a <xQueueGenericCreateStatic+0x42>
    5539:	be 59 01 00 00       	mov    $0x159,%esi
    553e:	48 8d 3d e3 22 02 00 	lea    0x222e3(%rip),%rdi        # 27828 <_IO_stdin_used+0x828>
    5545:	e8 c2 e7 ff ff       	callq  3d0c <vAssertCalled>
    554a:	48 83 7d e8 00       	cmpq   $0x0,-0x18(%rbp)
    554f:	0f 84 80 00 00 00    	je     55d5 <xQueueGenericCreateStatic+0xcd>
    5555:	48 83 7d d0 00       	cmpq   $0x0,-0x30(%rbp)
    555a:	74 79                	je     55d5 <xQueueGenericCreateStatic+0xcd>
    555c:	48 83 7d d8 00       	cmpq   $0x0,-0x28(%rbp)
    5561:	74 07                	je     556a <xQueueGenericCreateStatic+0x62>
    5563:	48 83 7d e0 00       	cmpq   $0x0,-0x20(%rbp)
    5568:	74 6b                	je     55d5 <xQueueGenericCreateStatic+0xcd>
    556a:	48 83 7d d8 00       	cmpq   $0x0,-0x28(%rbp)
    556f:	75 07                	jne    5578 <xQueueGenericCreateStatic+0x70>
    5571:	48 83 7d e0 00       	cmpq   $0x0,-0x20(%rbp)
    5576:	75 5d                	jne    55d5 <xQueueGenericCreateStatic+0xcd>
    5578:	48 c7 45 f0 a8 00 00 	movq   $0xa8,-0x10(%rbp)
    557f:	00 
    5580:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
    5584:	48 3d a8 00 00 00    	cmp    $0xa8,%rax
    558a:	74 11                	je     559d <xQueueGenericCreateStatic+0x95>
    558c:	be 6b 01 00 00       	mov    $0x16b,%esi
    5591:	48 8d 3d 90 22 02 00 	lea    0x22290(%rip),%rdi        # 27828 <_IO_stdin_used+0x828>
    5598:	e8 6f e7 ff ff       	callq  3d0c <vAssertCalled>
    559d:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
    55a1:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
    55a5:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
    55a9:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    55ad:	c6 80 8a 00 00 00 01 	movb   $0x1,0x8a(%rax)
    55b4:	0f b6 4d cc          	movzbl -0x34(%rbp),%ecx
    55b8:	48 8b 7d f8          	mov    -0x8(%rbp),%rdi
    55bc:	48 8b 55 d8          	mov    -0x28(%rbp),%rdx
    55c0:	48 8b 75 e0          	mov    -0x20(%rbp),%rsi
    55c4:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
    55c8:	49 89 f8             	mov    %rdi,%r8
    55cb:	48 89 c7             	mov    %rax,%rdi
    55ce:	e8 48 01 00 00       	callq  571b <prvInitialiseNewQueue>
    55d3:	eb 18                	jmp    55ed <xQueueGenericCreateStatic+0xe5>
    55d5:	48 83 7d f8 00       	cmpq   $0x0,-0x8(%rbp)
    55da:	75 11                	jne    55ed <xQueueGenericCreateStatic+0xe5>
    55dc:	be 82 01 00 00       	mov    $0x182,%esi
    55e1:	48 8d 3d 40 22 02 00 	lea    0x22240(%rip),%rdi        # 27828 <_IO_stdin_used+0x828>
    55e8:	e8 1f e7 ff ff       	callq  3d0c <vAssertCalled>
    55ed:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    55f1:	c9                   	leaveq 
    55f2:	c3                   	retq   

00000000000055f3 <xQueueGenericCreate>:
    55f3:	f3 0f 1e fa          	endbr64 
    55f7:	55                   	push   %rbp
    55f8:	48 89 e5             	mov    %rsp,%rbp
    55fb:	48 83 ec 40          	sub    $0x40,%rsp
    55ff:	48 89 7d d8          	mov    %rdi,-0x28(%rbp)
    5603:	48 89 75 d0          	mov    %rsi,-0x30(%rbp)
    5607:	89 d0                	mov    %edx,%eax
    5609:	88 45 cc             	mov    %al,-0x34(%rbp)
    560c:	48 c7 45 e8 00 00 00 	movq   $0x0,-0x18(%rbp)
    5613:	00 
    5614:	48 83 7d d8 00       	cmpq   $0x0,-0x28(%rbp)
    5619:	0f 84 db 00 00 00    	je     56fa <xQueueGenericCreate+0x107>
    561f:	b9 00 00 00 00       	mov    $0x0,%ecx
    5624:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
    5628:	48 f7 65 d8          	mulq   -0x28(%rbp)
    562c:	71 05                	jno    5633 <xQueueGenericCreate+0x40>
    562e:	b9 01 00 00 00       	mov    $0x1,%ecx
    5633:	48 89 c8             	mov    %rcx,%rax
    5636:	48 85 c0             	test   %rax,%rax
    5639:	0f 85 bb 00 00 00    	jne    56fa <xQueueGenericCreate+0x107>
    563f:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
    5643:	48 0f af 45 d0       	imul   -0x30(%rbp),%rax
    5648:	48 3d 57 ff ff ff    	cmp    $0xffffffffffffff57,%rax
    564e:	0f 87 a6 00 00 00    	ja     56fa <xQueueGenericCreate+0x107>
    5654:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
    5658:	48 0f af 45 d0       	imul   -0x30(%rbp),%rax
    565d:	48 89 45 f0          	mov    %rax,-0x10(%rbp)
    5661:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
    5665:	48 05 a8 00 00 00    	add    $0xa8,%rax
    566b:	48 89 c7             	mov    %rax,%rdi
    566e:	e8 0d d0 00 00       	callq  12680 <pvPortMalloc>
    5673:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
    5677:	48 83 7d e8 00       	cmpq   $0x0,-0x18(%rbp)
    567c:	74 3c                	je     56ba <xQueueGenericCreate+0xc7>
    567e:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
    5682:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
    5686:	48 81 45 f8 a8 00 00 	addq   $0xa8,-0x8(%rbp)
    568d:	00 
    568e:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
    5692:	c6 80 8a 00 00 00 00 	movb   $0x0,0x8a(%rax)
    5699:	0f b6 4d cc          	movzbl -0x34(%rbp),%ecx
    569d:	48 8b 7d e8          	mov    -0x18(%rbp),%rdi
    56a1:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
    56a5:	48 8b 75 d0          	mov    -0x30(%rbp),%rsi
    56a9:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
    56ad:	49 89 f8             	mov    %rdi,%r8
    56b0:	48 89 c7             	mov    %rax,%rdi
    56b3:	e8 63 00 00 00       	callq  571b <prvInitialiseNewQueue>
    56b8:	eb 5a                	jmp    5714 <xQueueGenericCreate+0x121>
    56ba:	e8 9d df 01 00       	callq  2365c <prvTraceGetCurrentTaskHandle>
    56bf:	48 89 c7             	mov    %rax,%rdi
    56c2:	e8 94 da 01 00       	callq  2315b <prvTraceGetTaskNumberHigh16>
    56c7:	0f b7 15 0e ba 02 00 	movzwl 0x2ba0e(%rip),%edx        # 310dc <CurrentFilterMask>
    56ce:	21 d0                	and    %edx,%eax
    56d0:	66 85 c0             	test   %ax,%ax
    56d3:	74 3f                	je     5714 <xQueueGenericCreate+0x121>
    56d5:	0f b6 45 cc          	movzbl -0x34(%rbp),%eax
    56d9:	48 98                	cltq   
    56db:	48 8d 15 ee b9 02 00 	lea    0x2b9ee(%rip),%rdx        # 310d0 <TraceQueueClassTable>
    56e2:	0f b6 04 10          	movzbl (%rax,%rdx,1),%eax
    56e6:	83 c0 40             	add    $0x40,%eax
    56e9:	0f b6 c0             	movzbl %al,%eax
    56ec:	be 00 00 00 00       	mov    $0x0,%esi
    56f1:	89 c7                	mov    %eax,%edi
    56f3:	e8 46 fc 01 00       	callq  2533e <prvTraceStoreKernelCallWithNumericParamOnly>
    56f8:	eb 1a                	jmp    5714 <xQueueGenericCreate+0x121>
    56fa:	48 83 7d e8 00       	cmpq   $0x0,-0x18(%rbp)
    56ff:	75 14                	jne    5715 <xQueueGenericCreate+0x122>
    5701:	be c6 01 00 00       	mov    $0x1c6,%esi
    5706:	48 8d 3d 1b 21 02 00 	lea    0x2211b(%rip),%rdi        # 27828 <_IO_stdin_used+0x828>
    570d:	e8 fa e5 ff ff       	callq  3d0c <vAssertCalled>
    5712:	eb 01                	jmp    5715 <xQueueGenericCreate+0x122>
    5714:	90                   	nop
    5715:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
    5719:	c9                   	leaveq 
    571a:	c3                   	retq   

000000000000571b <prvInitialiseNewQueue>:
    571b:	f3 0f 1e fa          	endbr64 
    571f:	55                   	push   %rbp
    5720:	48 89 e5             	mov    %rsp,%rbp
    5723:	41 54                	push   %r12
    5725:	53                   	push   %rbx
    5726:	48 83 ec 30          	sub    $0x30,%rsp
    572a:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
    572e:	48 89 75 e0          	mov    %rsi,-0x20(%rbp)
    5732:	48 89 55 d8          	mov    %rdx,-0x28(%rbp)
    5736:	89 c8                	mov    %ecx,%eax
    5738:	4c 89 45 c8          	mov    %r8,-0x38(%rbp)
    573c:	88 45 d4             	mov    %al,-0x2c(%rbp)
    573f:	48 83 7d e0 00       	cmpq   $0x0,-0x20(%rbp)
    5744:	75 0d                	jne    5753 <prvInitialiseNewQueue+0x38>
    5746:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
    574a:	48 8b 55 c8          	mov    -0x38(%rbp),%rdx
    574e:	48 89 10             	mov    %rdx,(%rax)
    5751:	eb 0b                	jmp    575e <prvInitialiseNewQueue+0x43>
    5753:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
    5757:	48 8b 55 d8          	mov    -0x28(%rbp),%rdx
    575b:	48 89 10             	mov    %rdx,(%rax)
    575e:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
    5762:	48 8b 55 e8          	mov    -0x18(%rbp),%rdx
    5766:	48 89 50 78          	mov    %rdx,0x78(%rax)
    576a:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
    576e:	48 8b 55 e0          	mov    -0x20(%rbp),%rdx
    5772:	48 89 90 80 00 00 00 	mov    %rdx,0x80(%rax)
    5779:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
    577d:	be 01 00 00 00       	mov    $0x1,%esi
    5782:	48 89 c7             	mov    %rax,%rdi
    5785:	e8 ef fb ff ff       	callq  5379 <xQueueGenericReset>
    578a:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
    578e:	0f b6 55 d4          	movzbl -0x2c(%rbp),%edx
    5792:	88 90 a0 00 00 00    	mov    %dl,0xa0(%rax)
    5798:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
    579c:	48 c7 80 90 00 00 00 	movq   $0x0,0x90(%rax)
    57a3:	00 00 00 00 
    57a7:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
    57ab:	48 89 c7             	mov    %rax,%rdi
    57ae:	e8 6c d9 01 00       	callq  2311f <prvTraceGetQueueType>
    57b3:	0f b6 c0             	movzbl %al,%eax
    57b6:	48 98                	cltq   
    57b8:	48 8d 15 11 b9 02 00 	lea    0x2b911(%rip),%rdx        # 310d0 <TraceQueueClassTable>
    57bf:	0f b6 04 10          	movzbl (%rax,%rdx,1),%eax
    57c3:	0f b6 c0             	movzbl %al,%eax
    57c6:	89 c7                	mov    %eax,%edi
    57c8:	e8 56 06 02 00       	callq  25e23 <prvTraceGetObjectHandle>
    57cd:	0f b6 d0             	movzbl %al,%edx
    57d0:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
    57d4:	89 d6                	mov    %edx,%esi
    57d6:	48 89 c7             	mov    %rax,%rdi
    57d9:	e8 64 da 01 00       	callq  23242 <prvTraceSetQueueNumberLow16>
    57de:	0f b7 05 f9 b8 02 00 	movzwl 0x2b8f9(%rip),%eax        # 310de <CurrentFilterGroup>
    57e5:	0f b7 d0             	movzwl %ax,%edx
    57e8:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
    57ec:	89 d6                	mov    %edx,%esi
    57ee:	48 89 c7             	mov    %rax,%rdi
    57f1:	e8 8e da 01 00       	callq  23284 <prvTraceSetQueueNumberHigh16>
    57f6:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
    57fa:	48 89 c7             	mov    %rax,%rdi
    57fd:	e8 01 da 01 00       	callq  23203 <prvTraceGetQueueNumberLow16>
    5802:	0f b6 d8             	movzbl %al,%ebx
    5805:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
    5809:	48 89 c7             	mov    %rax,%rdi
    580c:	e8 0e d9 01 00       	callq  2311f <prvTraceGetQueueType>
    5811:	0f b6 c0             	movzbl %al,%eax
    5814:	48 98                	cltq   
    5816:	48 8d 15 b3 b8 02 00 	lea    0x2b8b3(%rip),%rdx        # 310d0 <TraceQueueClassTable>
    581d:	0f b6 04 10          	movzbl (%rax,%rdx,1),%eax
    5821:	0f b6 c0             	movzbl %al,%eax
    5824:	89 de                	mov    %ebx,%esi
    5826:	89 c7                	mov    %eax,%edi
    5828:	e8 e3 08 02 00       	callq  26110 <prvMarkObjectAsUsed>
    582d:	e8 2a de 01 00       	callq  2365c <prvTraceGetCurrentTaskHandle>
    5832:	48 89 c7             	mov    %rax,%rdi
    5835:	e8 21 d9 01 00       	callq  2315b <prvTraceGetTaskNumberHigh16>
    583a:	0f b7 15 9b b8 02 00 	movzwl 0x2b89b(%rip),%edx        # 310dc <CurrentFilterMask>
    5841:	21 d0                	and    %edx,%eax
    5843:	66 85 c0             	test   %ax,%ax
    5846:	74 77                	je     58bf <prvInitialiseNewQueue+0x1a4>
    5848:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
    584c:	48 89 c7             	mov    %rax,%rdi
    584f:	e8 cd d9 01 00       	callq  23221 <prvTraceGetQueueNumberHigh16>
    5854:	0f b7 15 81 b8 02 00 	movzwl 0x2b881(%rip),%edx        # 310dc <CurrentFilterMask>
    585b:	21 d0                	and    %edx,%eax
    585d:	66 85 c0             	test   %ax,%ax
    5860:	74 5d                	je     58bf <prvInitialiseNewQueue+0x1a4>
    5862:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
    5866:	48 89 c7             	mov    %rax,%rdi
    5869:	e8 95 d9 01 00       	callq  23203 <prvTraceGetQueueNumberLow16>
    586e:	44 0f b6 e0          	movzbl %al,%r12d
    5872:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
    5876:	48 89 c7             	mov    %rax,%rdi
    5879:	e8 a1 d8 01 00       	callq  2311f <prvTraceGetQueueType>
    587e:	0f b6 c0             	movzbl %al,%eax
    5881:	48 98                	cltq   
    5883:	48 8d 15 46 b8 02 00 	lea    0x2b846(%rip),%rdx        # 310d0 <TraceQueueClassTable>
    588a:	0f b6 04 10          	movzbl (%rax,%rdx,1),%eax
    588e:	0f b6 d8             	movzbl %al,%ebx
    5891:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
    5895:	48 89 c7             	mov    %rax,%rdi
    5898:	e8 82 d8 01 00       	callq  2311f <prvTraceGetQueueType>
    589d:	0f b6 c0             	movzbl %al,%eax
    58a0:	48 98                	cltq   
    58a2:	48 8d 15 27 b8 02 00 	lea    0x2b827(%rip),%rdx        # 310d0 <TraceQueueClassTable>
    58a9:	0f b6 04 10          	movzbl (%rax,%rdx,1),%eax
    58ad:	83 c0 18             	add    $0x18,%eax
    58b0:	0f b6 c0             	movzbl %al,%eax
    58b3:	44 89 e2             	mov    %r12d,%edx
    58b6:	89 de                	mov    %ebx,%esi
    58b8:	89 c7                	mov    %eax,%edi
    58ba:	e8 93 f7 01 00       	callq  25052 <prvTraceStoreKernelCall>
    58bf:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
    58c3:	48 89 c7             	mov    %rax,%rdi
    58c6:	e8 38 d9 01 00       	callq  23203 <prvTraceGetQueueNumberLow16>
    58cb:	0f b6 d8             	movzbl %al,%ebx
    58ce:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
    58d2:	48 89 c7             	mov    %rax,%rdi
    58d5:	e8 45 d8 01 00       	callq  2311f <prvTraceGetQueueType>
    58da:	0f b6 c0             	movzbl %al,%eax
    58dd:	48 98                	cltq   
    58df:	48 8d 15 ea b7 02 00 	lea    0x2b7ea(%rip),%rdx        # 310d0 <TraceQueueClassTable>
    58e6:	0f b6 04 10          	movzbl (%rax,%rdx,1),%eax
    58ea:	0f b6 c0             	movzbl %al,%eax
    58ed:	ba 00 00 00 00       	mov    $0x0,%edx
    58f2:	89 de                	mov    %ebx,%esi
    58f4:	89 c7                	mov    %eax,%edi
    58f6:	e8 91 ff 01 00       	callq  2588c <prvTraceSetObjectState>
    58fb:	90                   	nop
    58fc:	48 83 c4 30          	add    $0x30,%rsp
    5900:	5b                   	pop    %rbx
    5901:	41 5c                	pop    %r12
    5903:	5d                   	pop    %rbp
    5904:	c3                   	retq   

0000000000005905 <prvInitialiseMutex>:
    5905:	f3 0f 1e fa          	endbr64 
    5909:	55                   	push   %rbp
    590a:	48 89 e5             	mov    %rsp,%rbp
    590d:	48 83 ec 10          	sub    $0x10,%rsp
    5911:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
    5915:	48 83 7d f8 00       	cmpq   $0x0,-0x8(%rbp)
    591a:	74 3e                	je     595a <prvInitialiseMutex+0x55>
    591c:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    5920:	48 c7 40 10 00 00 00 	movq   $0x0,0x10(%rax)
    5927:	00 
    5928:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    592c:	48 c7 00 00 00 00 00 	movq   $0x0,(%rax)
    5933:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    5937:	48 c7 40 18 00 00 00 	movq   $0x0,0x18(%rax)
    593e:	00 
    593f:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    5943:	b9 00 00 00 00       	mov    $0x0,%ecx
    5948:	ba 00 00 00 00       	mov    $0x0,%edx
    594d:	be 00 00 00 00       	mov    $0x0,%esi
    5952:	48 89 c7             	mov    %rax,%rdi
    5955:	e8 3d 04 00 00       	callq  5d97 <xQueueGenericSend>
    595a:	90                   	nop
    595b:	c9                   	leaveq 
    595c:	c3                   	retq   

000000000000595d <xQueueCreateMutex>:
    595d:	f3 0f 1e fa          	endbr64 
    5961:	55                   	push   %rbp
    5962:	48 89 e5             	mov    %rsp,%rbp
    5965:	48 83 ec 30          	sub    $0x30,%rsp
    5969:	89 f8                	mov    %edi,%eax
    596b:	88 45 dc             	mov    %al,-0x24(%rbp)
    596e:	48 c7 45 e8 01 00 00 	movq   $0x1,-0x18(%rbp)
    5975:	00 
    5976:	48 c7 45 f0 00 00 00 	movq   $0x0,-0x10(%rbp)
    597d:	00 
    597e:	0f b6 55 dc          	movzbl -0x24(%rbp),%edx
    5982:	48 8b 4d f0          	mov    -0x10(%rbp),%rcx
    5986:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
    598a:	48 89 ce             	mov    %rcx,%rsi
    598d:	48 89 c7             	mov    %rax,%rdi
    5990:	e8 5e fc ff ff       	callq  55f3 <xQueueGenericCreate>
    5995:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
    5999:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    599d:	48 89 c7             	mov    %rax,%rdi
    59a0:	e8 60 ff ff ff       	callq  5905 <prvInitialiseMutex>
    59a5:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    59a9:	c9                   	leaveq 
    59aa:	c3                   	retq   

00000000000059ab <xQueueCreateMutexStatic>:
    59ab:	f3 0f 1e fa          	endbr64 
    59af:	55                   	push   %rbp
    59b0:	48 89 e5             	mov    %rsp,%rbp
    59b3:	48 83 ec 30          	sub    $0x30,%rsp
    59b7:	89 f8                	mov    %edi,%eax
    59b9:	48 89 75 d0          	mov    %rsi,-0x30(%rbp)
    59bd:	88 45 dc             	mov    %al,-0x24(%rbp)
    59c0:	48 c7 45 e8 01 00 00 	movq   $0x1,-0x18(%rbp)
    59c7:	00 
    59c8:	48 c7 45 f0 00 00 00 	movq   $0x0,-0x10(%rbp)
    59cf:	00 
    59d0:	0f b6 4d dc          	movzbl -0x24(%rbp),%ecx
    59d4:	48 8b 55 d0          	mov    -0x30(%rbp),%rdx
    59d8:	48 8b 75 f0          	mov    -0x10(%rbp),%rsi
    59dc:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
    59e0:	41 89 c8             	mov    %ecx,%r8d
    59e3:	48 89 d1             	mov    %rdx,%rcx
    59e6:	ba 00 00 00 00       	mov    $0x0,%edx
    59eb:	48 89 c7             	mov    %rax,%rdi
    59ee:	e8 15 fb ff ff       	callq  5508 <xQueueGenericCreateStatic>
    59f3:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
    59f7:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    59fb:	48 89 c7             	mov    %rax,%rdi
    59fe:	e8 02 ff ff ff       	callq  5905 <prvInitialiseMutex>
    5a03:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    5a07:	c9                   	leaveq 
    5a08:	c3                   	retq   

0000000000005a09 <xQueueGetMutexHolder>:
    5a09:	f3 0f 1e fa          	endbr64 
    5a0d:	55                   	push   %rbp
    5a0e:	48 89 e5             	mov    %rsp,%rbp
    5a11:	48 83 ec 20          	sub    $0x20,%rsp
    5a15:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
    5a19:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
    5a1d:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
    5a21:	48 83 7d e8 00       	cmpq   $0x0,-0x18(%rbp)
    5a26:	75 11                	jne    5a39 <xQueueGetMutexHolder+0x30>
    5a28:	be 48 02 00 00       	mov    $0x248,%esi
    5a2d:	48 8d 3d f4 1d 02 00 	lea    0x21df4(%rip),%rdi        # 27828 <_IO_stdin_used+0x828>
    5a34:	e8 d3 e2 ff ff       	callq  3d0c <vAssertCalled>
    5a39:	e8 91 d3 00 00       	callq  12dcf <vPortEnterCritical>
    5a3e:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    5a42:	48 8b 00             	mov    (%rax),%rax
    5a45:	48 85 c0             	test   %rax,%rax
    5a48:	75 0e                	jne    5a58 <xQueueGetMutexHolder+0x4f>
    5a4a:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    5a4e:	48 8b 40 10          	mov    0x10(%rax),%rax
    5a52:	48 89 45 f0          	mov    %rax,-0x10(%rbp)
    5a56:	eb 08                	jmp    5a60 <xQueueGetMutexHolder+0x57>
    5a58:	48 c7 45 f0 00 00 00 	movq   $0x0,-0x10(%rbp)
    5a5f:	00 
    5a60:	e8 98 d3 00 00       	callq  12dfd <vPortExitCritical>
    5a65:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
    5a69:	c9                   	leaveq 
    5a6a:	c3                   	retq   

0000000000005a6b <xQueueGetMutexHolderFromISR>:
    5a6b:	f3 0f 1e fa          	endbr64 
    5a6f:	55                   	push   %rbp
    5a70:	48 89 e5             	mov    %rsp,%rbp
    5a73:	48 83 ec 20          	sub    $0x20,%rsp
    5a77:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
    5a7b:	48 83 7d e8 00       	cmpq   $0x0,-0x18(%rbp)
    5a80:	75 11                	jne    5a93 <xQueueGetMutexHolderFromISR+0x28>
    5a82:	be 68 02 00 00       	mov    $0x268,%esi
    5a87:	48 8d 3d 9a 1d 02 00 	lea    0x21d9a(%rip),%rdi        # 27828 <_IO_stdin_used+0x828>
    5a8e:	e8 79 e2 ff ff       	callq  3d0c <vAssertCalled>
    5a93:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
    5a97:	48 8b 00             	mov    (%rax),%rax
    5a9a:	48 85 c0             	test   %rax,%rax
    5a9d:	75 0e                	jne    5aad <xQueueGetMutexHolderFromISR+0x42>
    5a9f:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
    5aa3:	48 8b 40 10          	mov    0x10(%rax),%rax
    5aa7:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
    5aab:	eb 08                	jmp    5ab5 <xQueueGetMutexHolderFromISR+0x4a>
    5aad:	48 c7 45 f8 00 00 00 	movq   $0x0,-0x8(%rbp)
    5ab4:	00 
    5ab5:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    5ab9:	c9                   	leaveq 
    5aba:	c3                   	retq   

0000000000005abb <xQueueGiveMutexRecursive>:
    5abb:	f3 0f 1e fa          	endbr64 
    5abf:	55                   	push   %rbp
    5ac0:	48 89 e5             	mov    %rsp,%rbp
    5ac3:	41 54                	push   %r12
    5ac5:	53                   	push   %rbx
    5ac6:	48 83 ec 20          	sub    $0x20,%rsp
    5aca:	48 89 7d d8          	mov    %rdi,-0x28(%rbp)
    5ace:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
    5ad2:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
    5ad6:	48 83 7d e8 00       	cmpq   $0x0,-0x18(%rbp)
    5adb:	75 11                	jne    5aee <xQueueGiveMutexRecursive+0x33>
    5add:	be 83 02 00 00       	mov    $0x283,%esi
    5ae2:	48 8d 3d 3f 1d 02 00 	lea    0x21d3f(%rip),%rdi        # 27828 <_IO_stdin_used+0x828>
    5ae9:	e8 1e e2 ff ff       	callq  3d0c <vAssertCalled>
    5aee:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
    5af2:	48 8b 58 10          	mov    0x10(%rax),%rbx
    5af6:	e8 83 9b 00 00       	callq  f67e <xTaskGetCurrentTaskHandle>
    5afb:	48 39 c3             	cmp    %rax,%rbx
    5afe:	75 49                	jne    5b49 <xQueueGiveMutexRecursive+0x8e>
    5b00:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
    5b04:	48 8b 40 18          	mov    0x18(%rax),%rax
    5b08:	48 8d 50 ff          	lea    -0x1(%rax),%rdx
    5b0c:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
    5b10:	48 89 50 18          	mov    %rdx,0x18(%rax)
    5b14:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
    5b18:	48 8b 40 18          	mov    0x18(%rax),%rax
    5b1c:	48 85 c0             	test   %rax,%rax
    5b1f:	75 1b                	jne    5b3c <xQueueGiveMutexRecursive+0x81>
    5b21:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
    5b25:	b9 00 00 00 00       	mov    $0x0,%ecx
    5b2a:	ba 00 00 00 00       	mov    $0x0,%edx
    5b2f:	be 00 00 00 00       	mov    $0x0,%esi
    5b34:	48 89 c7             	mov    %rax,%rdi
    5b37:	e8 5b 02 00 00       	callq  5d97 <xQueueGenericSend>
    5b3c:	48 c7 45 e0 01 00 00 	movq   $0x1,-0x20(%rbp)
    5b43:	00 
    5b44:	e9 9a 00 00 00       	jmpq   5be3 <xQueueGiveMutexRecursive+0x128>
    5b49:	48 c7 45 e0 00 00 00 	movq   $0x0,-0x20(%rbp)
    5b50:	00 
    5b51:	e8 06 db 01 00       	callq  2365c <prvTraceGetCurrentTaskHandle>
    5b56:	48 89 c7             	mov    %rax,%rdi
    5b59:	e8 fd d5 01 00       	callq  2315b <prvTraceGetTaskNumberHigh16>
    5b5e:	0f b7 15 77 b5 02 00 	movzwl 0x2b577(%rip),%edx        # 310dc <CurrentFilterMask>
    5b65:	21 d0                	and    %edx,%eax
    5b67:	66 85 c0             	test   %ax,%ax
    5b6a:	74 77                	je     5be3 <xQueueGiveMutexRecursive+0x128>
    5b6c:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
    5b70:	48 89 c7             	mov    %rax,%rdi
    5b73:	e8 a9 d6 01 00       	callq  23221 <prvTraceGetQueueNumberHigh16>
    5b78:	0f b7 15 5d b5 02 00 	movzwl 0x2b55d(%rip),%edx        # 310dc <CurrentFilterMask>
    5b7f:	21 d0                	and    %edx,%eax
    5b81:	66 85 c0             	test   %ax,%ax
    5b84:	74 5d                	je     5be3 <xQueueGiveMutexRecursive+0x128>
    5b86:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
    5b8a:	48 89 c7             	mov    %rax,%rdi
    5b8d:	e8 71 d6 01 00       	callq  23203 <prvTraceGetQueueNumberLow16>
    5b92:	44 0f b6 e0          	movzbl %al,%r12d
    5b96:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
    5b9a:	48 89 c7             	mov    %rax,%rdi
    5b9d:	e8 7d d5 01 00       	callq  2311f <prvTraceGetQueueType>
    5ba2:	0f b6 c0             	movzbl %al,%eax
    5ba5:	48 98                	cltq   
    5ba7:	48 8d 15 22 b5 02 00 	lea    0x2b522(%rip),%rdx        # 310d0 <TraceQueueClassTable>
    5bae:	0f b6 04 10          	movzbl (%rax,%rdx,1),%eax
    5bb2:	0f b6 d8             	movzbl %al,%ebx
    5bb5:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
    5bb9:	48 89 c7             	mov    %rax,%rdi
    5bbc:	e8 5e d5 01 00       	callq  2311f <prvTraceGetQueueType>
    5bc1:	0f b6 c0             	movzbl %al,%eax
    5bc4:	48 98                	cltq   
    5bc6:	48 8d 15 03 b5 02 00 	lea    0x2b503(%rip),%rdx        # 310d0 <TraceQueueClassTable>
    5bcd:	0f b6 04 10          	movzbl (%rax,%rdx,1),%eax
    5bd1:	83 c0 48             	add    $0x48,%eax
    5bd4:	0f b6 c0             	movzbl %al,%eax
    5bd7:	44 89 e2             	mov    %r12d,%edx
    5bda:	89 de                	mov    %ebx,%esi
    5bdc:	89 c7                	mov    %eax,%edi
    5bde:	e8 6f f4 01 00       	callq  25052 <prvTraceStoreKernelCall>
    5be3:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
    5be7:	48 83 c4 20          	add    $0x20,%rsp
    5beb:	5b                   	pop    %rbx
    5bec:	41 5c                	pop    %r12
    5bee:	5d                   	pop    %rbp
    5bef:	c3                   	retq   

0000000000005bf0 <xQueueTakeMutexRecursive>:
    5bf0:	f3 0f 1e fa          	endbr64 
    5bf4:	55                   	push   %rbp
    5bf5:	48 89 e5             	mov    %rsp,%rbp
    5bf8:	53                   	push   %rbx
    5bf9:	48 83 ec 28          	sub    $0x28,%rsp
    5bfd:	48 89 7d d8          	mov    %rdi,-0x28(%rbp)
    5c01:	48 89 75 d0          	mov    %rsi,-0x30(%rbp)
    5c05:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
    5c09:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
    5c0d:	48 83 7d e8 00       	cmpq   $0x0,-0x18(%rbp)
    5c12:	75 11                	jne    5c25 <xQueueTakeMutexRecursive+0x35>
    5c14:	be bb 02 00 00       	mov    $0x2bb,%esi
    5c19:	48 8d 3d 08 1c 02 00 	lea    0x21c08(%rip),%rdi        # 27828 <_IO_stdin_used+0x828>
    5c20:	e8 e7 e0 ff ff       	callq  3d0c <vAssertCalled>
    5c25:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
    5c29:	48 8b 58 10          	mov    0x10(%rax),%rbx
    5c2d:	e8 4c 9a 00 00       	callq  f67e <xTaskGetCurrentTaskHandle>
    5c32:	48 39 c3             	cmp    %rax,%rbx
    5c35:	75 1e                	jne    5c55 <xQueueTakeMutexRecursive+0x65>
    5c37:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
    5c3b:	48 8b 40 18          	mov    0x18(%rax),%rax
    5c3f:	48 8d 50 01          	lea    0x1(%rax),%rdx
    5c43:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
    5c47:	48 89 50 18          	mov    %rdx,0x18(%rax)
    5c4b:	48 c7 45 e0 01 00 00 	movq   $0x1,-0x20(%rbp)
    5c52:	00 
    5c53:	eb 32                	jmp    5c87 <xQueueTakeMutexRecursive+0x97>
    5c55:	48 8b 55 d0          	mov    -0x30(%rbp),%rdx
    5c59:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
    5c5d:	48 89 d6             	mov    %rdx,%rsi
    5c60:	48 89 c7             	mov    %rax,%rdi
    5c63:	e8 0c 13 00 00       	callq  6f74 <xQueueSemaphoreTake>
    5c68:	48 89 45 e0          	mov    %rax,-0x20(%rbp)
    5c6c:	48 83 7d e0 00       	cmpq   $0x0,-0x20(%rbp)
    5c71:	74 14                	je     5c87 <xQueueTakeMutexRecursive+0x97>
    5c73:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
    5c77:	48 8b 40 18          	mov    0x18(%rax),%rax
    5c7b:	48 8d 50 01          	lea    0x1(%rax),%rdx
    5c7f:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
    5c83:	48 89 50 18          	mov    %rdx,0x18(%rax)
    5c87:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
    5c8b:	48 83 c4 28          	add    $0x28,%rsp
    5c8f:	5b                   	pop    %rbx
    5c90:	5d                   	pop    %rbp
    5c91:	c3                   	retq   

0000000000005c92 <xQueueCreateCountingSemaphoreStatic>:
    5c92:	f3 0f 1e fa          	endbr64 
    5c96:	55                   	push   %rbp
    5c97:	48 89 e5             	mov    %rsp,%rbp
    5c9a:	48 83 ec 30          	sub    $0x30,%rsp
    5c9e:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
    5ca2:	48 89 75 e0          	mov    %rsi,-0x20(%rbp)
    5ca6:	48 89 55 d8          	mov    %rdx,-0x28(%rbp)
    5caa:	48 c7 45 f8 00 00 00 	movq   $0x0,-0x8(%rbp)
    5cb1:	00 
    5cb2:	48 83 7d e8 00       	cmpq   $0x0,-0x18(%rbp)
    5cb7:	74 46                	je     5cff <xQueueCreateCountingSemaphoreStatic+0x6d>
    5cb9:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
    5cbd:	48 3b 45 e8          	cmp    -0x18(%rbp),%rax
    5cc1:	77 3c                	ja     5cff <xQueueCreateCountingSemaphoreStatic+0x6d>
    5cc3:	48 8b 55 d8          	mov    -0x28(%rbp),%rdx
    5cc7:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
    5ccb:	41 b8 02 00 00 00    	mov    $0x2,%r8d
    5cd1:	48 89 d1             	mov    %rdx,%rcx
    5cd4:	ba 00 00 00 00       	mov    $0x0,%edx
    5cd9:	be 00 00 00 00       	mov    $0x0,%esi
    5cde:	48 89 c7             	mov    %rax,%rdi
    5ce1:	e8 22 f8 ff ff       	callq  5508 <xQueueGenericCreateStatic>
    5ce6:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
    5cea:	48 83 7d f8 00       	cmpq   $0x0,-0x8(%rbp)
    5cef:	74 26                	je     5d17 <xQueueCreateCountingSemaphoreStatic+0x85>
    5cf1:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    5cf5:	48 8b 55 e0          	mov    -0x20(%rbp),%rdx
    5cf9:	48 89 50 70          	mov    %rdx,0x70(%rax)
    5cfd:	eb 18                	jmp    5d17 <xQueueCreateCountingSemaphoreStatic+0x85>
    5cff:	48 83 7d f8 00       	cmpq   $0x0,-0x8(%rbp)
    5d04:	75 11                	jne    5d17 <xQueueCreateCountingSemaphoreStatic+0x85>
    5d06:	be f8 02 00 00       	mov    $0x2f8,%esi
    5d0b:	48 8d 3d 16 1b 02 00 	lea    0x21b16(%rip),%rdi        # 27828 <_IO_stdin_used+0x828>
    5d12:	e8 f5 df ff ff       	callq  3d0c <vAssertCalled>
    5d17:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    5d1b:	c9                   	leaveq 
    5d1c:	c3                   	retq   

0000000000005d1d <xQueueCreateCountingSemaphore>:
    5d1d:	f3 0f 1e fa          	endbr64 
    5d21:	55                   	push   %rbp
    5d22:	48 89 e5             	mov    %rsp,%rbp
    5d25:	48 83 ec 20          	sub    $0x20,%rsp
    5d29:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
    5d2d:	48 89 75 e0          	mov    %rsi,-0x20(%rbp)
    5d31:	48 c7 45 f8 00 00 00 	movq   $0x0,-0x8(%rbp)
    5d38:	00 
    5d39:	48 83 7d e8 00       	cmpq   $0x0,-0x18(%rbp)
    5d3e:	74 39                	je     5d79 <xQueueCreateCountingSemaphore+0x5c>
    5d40:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
    5d44:	48 3b 45 e8          	cmp    -0x18(%rbp),%rax
    5d48:	77 2f                	ja     5d79 <xQueueCreateCountingSemaphore+0x5c>
    5d4a:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
    5d4e:	ba 02 00 00 00       	mov    $0x2,%edx
    5d53:	be 00 00 00 00       	mov    $0x0,%esi
    5d58:	48 89 c7             	mov    %rax,%rdi
    5d5b:	e8 93 f8 ff ff       	callq  55f3 <xQueueGenericCreate>
    5d60:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
    5d64:	48 83 7d f8 00       	cmpq   $0x0,-0x8(%rbp)
    5d69:	74 26                	je     5d91 <xQueueCreateCountingSemaphore+0x74>
    5d6b:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    5d6f:	48 8b 55 e0          	mov    -0x20(%rbp),%rdx
    5d73:	48 89 50 70          	mov    %rdx,0x70(%rax)
    5d77:	eb 18                	jmp    5d91 <xQueueCreateCountingSemaphore+0x74>
    5d79:	48 83 7d f8 00       	cmpq   $0x0,-0x8(%rbp)
    5d7e:	75 11                	jne    5d91 <xQueueCreateCountingSemaphore+0x74>
    5d80:	be 1b 03 00 00       	mov    $0x31b,%esi
    5d85:	48 8d 3d 9c 1a 02 00 	lea    0x21a9c(%rip),%rdi        # 27828 <_IO_stdin_used+0x828>
    5d8c:	e8 7b df ff ff       	callq  3d0c <vAssertCalled>
    5d91:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    5d95:	c9                   	leaveq 
    5d96:	c3                   	retq   

0000000000005d97 <xQueueGenericSend>:
    5d97:	f3 0f 1e fa          	endbr64 
    5d9b:	55                   	push   %rbp
    5d9c:	48 89 e5             	mov    %rsp,%rbp
    5d9f:	41 54                	push   %r12
    5da1:	53                   	push   %rbx
    5da2:	48 83 ec 60          	sub    $0x60,%rsp
    5da6:	48 89 7d a8          	mov    %rdi,-0x58(%rbp)
    5daa:	48 89 75 a0          	mov    %rsi,-0x60(%rbp)
    5dae:	48 89 55 98          	mov    %rdx,-0x68(%rbp)
    5db2:	48 89 4d 90          	mov    %rcx,-0x70(%rbp)
    5db6:	64 48 8b 04 25 28 00 	mov    %fs:0x28,%rax
    5dbd:	00 00 
    5dbf:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
    5dc3:	31 c0                	xor    %eax,%eax
    5dc5:	48 c7 45 b0 00 00 00 	movq   $0x0,-0x50(%rbp)
    5dcc:	00 
    5dcd:	48 8b 45 a8          	mov    -0x58(%rbp),%rax
    5dd1:	48 89 45 b8          	mov    %rax,-0x48(%rbp)
    5dd5:	48 83 7d b8 00       	cmpq   $0x0,-0x48(%rbp)
    5dda:	75 11                	jne    5ded <xQueueGenericSend+0x56>
    5ddc:	be 2e 03 00 00       	mov    $0x32e,%esi
    5de1:	48 8d 3d 40 1a 02 00 	lea    0x21a40(%rip),%rdi        # 27828 <_IO_stdin_used+0x828>
    5de8:	e8 1f df ff ff       	callq  3d0c <vAssertCalled>
    5ded:	48 83 7d a0 00       	cmpq   $0x0,-0x60(%rbp)
    5df2:	75 10                	jne    5e04 <xQueueGenericSend+0x6d>
    5df4:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
    5df8:	48 8b 80 80 00 00 00 	mov    0x80(%rax),%rax
    5dff:	48 85 c0             	test   %rax,%rax
    5e02:	75 07                	jne    5e0b <xQueueGenericSend+0x74>
    5e04:	b8 01 00 00 00       	mov    $0x1,%eax
    5e09:	eb 05                	jmp    5e10 <xQueueGenericSend+0x79>
    5e0b:	b8 00 00 00 00       	mov    $0x0,%eax
    5e10:	85 c0                	test   %eax,%eax
    5e12:	75 11                	jne    5e25 <xQueueGenericSend+0x8e>
    5e14:	be 2f 03 00 00       	mov    $0x32f,%esi
    5e19:	48 8d 3d 08 1a 02 00 	lea    0x21a08(%rip),%rdi        # 27828 <_IO_stdin_used+0x828>
    5e20:	e8 e7 de ff ff       	callq  3d0c <vAssertCalled>
    5e25:	48 83 7d 90 02       	cmpq   $0x2,-0x70(%rbp)
    5e2a:	75 0e                	jne    5e3a <xQueueGenericSend+0xa3>
    5e2c:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
    5e30:	48 8b 40 78          	mov    0x78(%rax),%rax
    5e34:	48 83 f8 01          	cmp    $0x1,%rax
    5e38:	75 07                	jne    5e41 <xQueueGenericSend+0xaa>
    5e3a:	b8 01 00 00 00       	mov    $0x1,%eax
    5e3f:	eb 05                	jmp    5e46 <xQueueGenericSend+0xaf>
    5e41:	b8 00 00 00 00       	mov    $0x0,%eax
    5e46:	85 c0                	test   %eax,%eax
    5e48:	75 11                	jne    5e5b <xQueueGenericSend+0xc4>
    5e4a:	be 30 03 00 00       	mov    $0x330,%esi
    5e4f:	48 8d 3d d2 19 02 00 	lea    0x219d2(%rip),%rdi        # 27828 <_IO_stdin_used+0x828>
    5e56:	e8 b1 de ff ff       	callq  3d0c <vAssertCalled>
    5e5b:	e8 37 98 00 00       	callq  f697 <xTaskGetSchedulerState>
    5e60:	48 85 c0             	test   %rax,%rax
    5e63:	75 09                	jne    5e6e <xQueueGenericSend+0xd7>
    5e65:	48 8b 45 98          	mov    -0x68(%rbp),%rax
    5e69:	48 85 c0             	test   %rax,%rax
    5e6c:	75 07                	jne    5e75 <xQueueGenericSend+0xde>
    5e6e:	b8 01 00 00 00       	mov    $0x1,%eax
    5e73:	eb 05                	jmp    5e7a <xQueueGenericSend+0xe3>
    5e75:	b8 00 00 00 00       	mov    $0x0,%eax
    5e7a:	85 c0                	test   %eax,%eax
    5e7c:	75 11                	jne    5e8f <xQueueGenericSend+0xf8>
    5e7e:	be 33 03 00 00       	mov    $0x333,%esi
    5e83:	48 8d 3d 9e 19 02 00 	lea    0x2199e(%rip),%rdi        # 27828 <_IO_stdin_used+0x828>
    5e8a:	e8 7d de ff ff       	callq  3d0c <vAssertCalled>
    5e8f:	e8 3b cf 00 00       	callq  12dcf <vPortEnterCritical>
    5e94:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
    5e98:	48 8b 50 70          	mov    0x70(%rax),%rdx
    5e9c:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
    5ea0:	48 8b 40 78          	mov    0x78(%rax),%rax
    5ea4:	48 39 c2             	cmp    %rax,%rdx
    5ea7:	72 0b                	jb     5eb4 <xQueueGenericSend+0x11d>
    5ea9:	48 83 7d 90 02       	cmpq   $0x2,-0x70(%rbp)
    5eae:	0f 85 b5 01 00 00    	jne    6069 <xQueueGenericSend+0x2d2>
    5eb4:	e8 a3 d7 01 00       	callq  2365c <prvTraceGetCurrentTaskHandle>
    5eb9:	48 89 c7             	mov    %rax,%rdi
    5ebc:	e8 9a d2 01 00       	callq  2315b <prvTraceGetTaskNumberHigh16>
    5ec1:	0f b7 15 14 b2 02 00 	movzwl 0x2b214(%rip),%edx        # 310dc <CurrentFilterMask>
    5ec8:	21 d0                	and    %edx,%eax
    5eca:	66 85 c0             	test   %ax,%ax
    5ecd:	0f 84 85 00 00 00    	je     5f58 <xQueueGenericSend+0x1c1>
    5ed3:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
    5ed7:	48 89 c7             	mov    %rax,%rdi
    5eda:	e8 42 d3 01 00       	callq  23221 <prvTraceGetQueueNumberHigh16>
    5edf:	0f b7 15 f6 b1 02 00 	movzwl 0x2b1f6(%rip),%edx        # 310dc <CurrentFilterMask>
    5ee6:	21 d0                	and    %edx,%eax
    5ee8:	66 85 c0             	test   %ax,%ax
    5eeb:	74 6b                	je     5f58 <xQueueGenericSend+0x1c1>
    5eed:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
    5ef1:	48 89 c7             	mov    %rax,%rdi
    5ef4:	e8 0a d3 01 00       	callq  23203 <prvTraceGetQueueNumberLow16>
    5ef9:	44 0f b6 e0          	movzbl %al,%r12d
    5efd:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
    5f01:	48 89 c7             	mov    %rax,%rdi
    5f04:	e8 16 d2 01 00       	callq  2311f <prvTraceGetQueueType>
    5f09:	0f b6 c0             	movzbl %al,%eax
    5f0c:	48 98                	cltq   
    5f0e:	48 8d 15 bb b1 02 00 	lea    0x2b1bb(%rip),%rdx        # 310d0 <TraceQueueClassTable>
    5f15:	0f b6 04 10          	movzbl (%rax,%rdx,1),%eax
    5f19:	0f b6 d8             	movzbl %al,%ebx
    5f1c:	48 83 7d 90 00       	cmpq   $0x0,-0x70(%rbp)
    5f21:	75 24                	jne    5f47 <xQueueGenericSend+0x1b0>
    5f23:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
    5f27:	48 89 c7             	mov    %rax,%rdi
    5f2a:	e8 f0 d1 01 00       	callq  2311f <prvTraceGetQueueType>
    5f2f:	0f b6 c0             	movzbl %al,%eax
    5f32:	48 98                	cltq   
    5f34:	48 8d 15 95 b1 02 00 	lea    0x2b195(%rip),%rdx        # 310d0 <TraceQueueClassTable>
    5f3b:	0f b6 04 10          	movzbl (%rax,%rdx,1),%eax
    5f3f:	83 c0 20             	add    $0x20,%eax
    5f42:	0f b6 c0             	movzbl %al,%eax
    5f45:	eb 05                	jmp    5f4c <xQueueGenericSend+0x1b5>
    5f47:	b8 25 00 00 00       	mov    $0x25,%eax
    5f4c:	44 89 e2             	mov    %r12d,%edx
    5f4f:	89 de                	mov    %ebx,%esi
    5f51:	89 c7                	mov    %eax,%edi
    5f53:	e8 fa f0 01 00       	callq  25052 <prvTraceStoreKernelCall>
    5f58:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
    5f5c:	48 89 c7             	mov    %rax,%rdi
    5f5f:	e8 bb d1 01 00       	callq  2311f <prvTraceGetQueueType>
    5f64:	0f b6 c0             	movzbl %al,%eax
    5f67:	48 98                	cltq   
    5f69:	48 8d 15 60 b1 02 00 	lea    0x2b160(%rip),%rdx        # 310d0 <TraceQueueClassTable>
    5f70:	0f b6 04 10          	movzbl (%rax,%rdx,1),%eax
    5f74:	3c 02                	cmp    $0x2,%al
    5f76:	74 10                	je     5f88 <xQueueGenericSend+0x1f1>
    5f78:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
    5f7c:	48 8b 40 70          	mov    0x70(%rax),%rax
    5f80:	83 c0 01             	add    $0x1,%eax
    5f83:	0f b6 d8             	movzbl %al,%ebx
    5f86:	eb 05                	jmp    5f8d <xQueueGenericSend+0x1f6>
    5f88:	bb 00 00 00 00       	mov    $0x0,%ebx
    5f8d:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
    5f91:	48 89 c7             	mov    %rax,%rdi
    5f94:	e8 6a d2 01 00       	callq  23203 <prvTraceGetQueueNumberLow16>
    5f99:	44 0f b6 e0          	movzbl %al,%r12d
    5f9d:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
    5fa1:	48 89 c7             	mov    %rax,%rdi
    5fa4:	e8 76 d1 01 00       	callq  2311f <prvTraceGetQueueType>
    5fa9:	0f b6 c0             	movzbl %al,%eax
    5fac:	48 98                	cltq   
    5fae:	48 8d 15 1b b1 02 00 	lea    0x2b11b(%rip),%rdx        # 310d0 <TraceQueueClassTable>
    5fb5:	0f b6 04 10          	movzbl (%rax,%rdx,1),%eax
    5fb9:	0f b6 c0             	movzbl %al,%eax
    5fbc:	89 da                	mov    %ebx,%edx
    5fbe:	44 89 e6             	mov    %r12d,%esi
    5fc1:	89 c7                	mov    %eax,%edi
    5fc3:	e8 c4 f8 01 00       	callq  2588c <prvTraceSetObjectState>
    5fc8:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
    5fcc:	48 8b 40 70          	mov    0x70(%rax),%rax
    5fd0:	48 89 45 c0          	mov    %rax,-0x40(%rbp)
    5fd4:	48 8b 55 90          	mov    -0x70(%rbp),%rdx
    5fd8:	48 8b 4d a0          	mov    -0x60(%rbp),%rcx
    5fdc:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
    5fe0:	48 89 ce             	mov    %rcx,%rsi
    5fe3:	48 89 c7             	mov    %rax,%rdi
    5fe6:	e8 8b 21 00 00       	callq  8176 <prvCopyDataToQueue>
    5feb:	48 89 45 c8          	mov    %rax,-0x38(%rbp)
    5fef:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
    5ff3:	48 8b 80 90 00 00 00 	mov    0x90(%rax),%rax
    5ffa:	48 85 c0             	test   %rax,%rax
    5ffd:	74 26                	je     6025 <xQueueGenericSend+0x28e>
    5fff:	48 83 7d 90 02       	cmpq   $0x2,-0x70(%rbp)
    6004:	75 07                	jne    600d <xQueueGenericSend+0x276>
    6006:	48 83 7d c0 00       	cmpq   $0x0,-0x40(%rbp)
    600b:	75 4d                	jne    605a <xQueueGenericSend+0x2c3>
    600d:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
    6011:	48 89 c7             	mov    %rax,%rdi
    6014:	e8 3b 2a 00 00       	callq  8a54 <prvNotifyQueueSetContainer>
    6019:	48 85 c0             	test   %rax,%rax
    601c:	74 3c                	je     605a <xQueueGenericSend+0x2c3>
    601e:	e8 51 ce 00 00       	callq  12e74 <vPortYield>
    6023:	eb 35                	jmp    605a <xQueueGenericSend+0x2c3>
    6025:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
    6029:	48 8b 40 48          	mov    0x48(%rax),%rax
    602d:	48 85 c0             	test   %rax,%rax
    6030:	74 1c                	je     604e <xQueueGenericSend+0x2b7>
    6032:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
    6036:	48 83 c0 48          	add    $0x48,%rax
    603a:	48 89 c7             	mov    %rax,%rdi
    603d:	e8 2c 89 00 00       	callq  e96e <xTaskRemoveFromEventList>
    6042:	48 85 c0             	test   %rax,%rax
    6045:	74 13                	je     605a <xQueueGenericSend+0x2c3>
    6047:	e8 28 ce 00 00       	callq  12e74 <vPortYield>
    604c:	eb 0c                	jmp    605a <xQueueGenericSend+0x2c3>
    604e:	48 83 7d c8 00       	cmpq   $0x0,-0x38(%rbp)
    6053:	74 05                	je     605a <xQueueGenericSend+0x2c3>
    6055:	e8 1a ce 00 00       	callq  12e74 <vPortYield>
    605a:	e8 9e cd 00 00       	callq  12dfd <vPortExitCritical>
    605f:	b8 01 00 00 00       	mov    $0x1,%eax
    6064:	e9 03 03 00 00       	jmpq   636c <xQueueGenericSend+0x5d5>
    6069:	48 8b 45 98          	mov    -0x68(%rbp),%rax
    606d:	48 85 c0             	test   %rax,%rax
    6070:	0f 85 b3 00 00 00    	jne    6129 <xQueueGenericSend+0x392>
    6076:	e8 82 cd 00 00       	callq  12dfd <vPortExitCritical>
    607b:	e8 dc d5 01 00       	callq  2365c <prvTraceGetCurrentTaskHandle>
    6080:	48 89 c7             	mov    %rax,%rdi
    6083:	e8 d3 d0 01 00       	callq  2315b <prvTraceGetTaskNumberHigh16>
    6088:	0f b7 15 4d b0 02 00 	movzwl 0x2b04d(%rip),%edx        # 310dc <CurrentFilterMask>
    608f:	21 d0                	and    %edx,%eax
    6091:	66 85 c0             	test   %ax,%ax
    6094:	0f 84 85 00 00 00    	je     611f <xQueueGenericSend+0x388>
    609a:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
    609e:	48 89 c7             	mov    %rax,%rdi
    60a1:	e8 7b d1 01 00       	callq  23221 <prvTraceGetQueueNumberHigh16>
    60a6:	0f b7 15 2f b0 02 00 	movzwl 0x2b02f(%rip),%edx        # 310dc <CurrentFilterMask>
    60ad:	21 d0                	and    %edx,%eax
    60af:	66 85 c0             	test   %ax,%ax
    60b2:	74 6b                	je     611f <xQueueGenericSend+0x388>
    60b4:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
    60b8:	48 89 c7             	mov    %rax,%rdi
    60bb:	e8 43 d1 01 00       	callq  23203 <prvTraceGetQueueNumberLow16>
    60c0:	44 0f b6 e0          	movzbl %al,%r12d
    60c4:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
    60c8:	48 89 c7             	mov    %rax,%rdi
    60cb:	e8 4f d0 01 00       	callq  2311f <prvTraceGetQueueType>
    60d0:	0f b6 c0             	movzbl %al,%eax
    60d3:	48 98                	cltq   
    60d5:	48 8d 15 f4 af 02 00 	lea    0x2aff4(%rip),%rdx        # 310d0 <TraceQueueClassTable>
    60dc:	0f b6 04 10          	movzbl (%rax,%rdx,1),%eax
    60e0:	0f b6 d8             	movzbl %al,%ebx
    60e3:	48 83 7d 90 00       	cmpq   $0x0,-0x70(%rbp)
    60e8:	75 24                	jne    610e <xQueueGenericSend+0x377>
    60ea:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
    60ee:	48 89 c7             	mov    %rax,%rdi
    60f1:	e8 29 d0 01 00       	callq  2311f <prvTraceGetQueueType>
    60f6:	0f b6 c0             	movzbl %al,%eax
    60f9:	48 98                	cltq   
    60fb:	48 8d 15 ce af 02 00 	lea    0x2afce(%rip),%rdx        # 310d0 <TraceQueueClassTable>
    6102:	0f b6 04 10          	movzbl (%rax,%rdx,1),%eax
    6106:	83 c0 48             	add    $0x48,%eax
    6109:	0f b6 c0             	movzbl %al,%eax
    610c:	eb 05                	jmp    6113 <xQueueGenericSend+0x37c>
    610e:	b8 4d 00 00 00       	mov    $0x4d,%eax
    6113:	44 89 e2             	mov    %r12d,%edx
    6116:	89 de                	mov    %ebx,%esi
    6118:	89 c7                	mov    %eax,%edi
    611a:	e8 33 ef 01 00       	callq  25052 <prvTraceStoreKernelCall>
    611f:	b8 00 00 00 00       	mov    $0x0,%eax
    6124:	e9 43 02 00 00       	jmpq   636c <xQueueGenericSend+0x5d5>
    6129:	48 83 7d b0 00       	cmpq   $0x0,-0x50(%rbp)
    612e:	75 14                	jne    6144 <xQueueGenericSend+0x3ad>
    6130:	48 8d 45 d0          	lea    -0x30(%rbp),%rax
    6134:	48 89 c7             	mov    %rax,%rdi
    6137:	e8 26 8e 00 00       	callq  ef62 <vTaskInternalSetTimeOutState>
    613c:	48 c7 45 b0 01 00 00 	movq   $0x1,-0x50(%rbp)
    6143:	00 
    6144:	e8 b4 cc 00 00       	callq  12dfd <vPortExitCritical>
    6149:	e8 f3 73 00 00       	callq  d541 <vTaskSuspendAll>
    614e:	e8 7c cc 00 00       	callq  12dcf <vPortEnterCritical>
    6153:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
    6157:	0f b6 80 88 00 00 00 	movzbl 0x88(%rax),%eax
    615e:	3c ff                	cmp    $0xff,%al
    6160:	75 0b                	jne    616d <xQueueGenericSend+0x3d6>
    6162:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
    6166:	c6 80 88 00 00 00 00 	movb   $0x0,0x88(%rax)
    616d:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
    6171:	0f b6 80 89 00 00 00 	movzbl 0x89(%rax),%eax
    6178:	3c ff                	cmp    $0xff,%al
    617a:	75 0b                	jne    6187 <xQueueGenericSend+0x3f0>
    617c:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
    6180:	c6 80 89 00 00 00 00 	movb   $0x0,0x89(%rax)
    6187:	e8 71 cc 00 00       	callq  12dfd <vPortExitCritical>
    618c:	48 8d 55 98          	lea    -0x68(%rbp),%rdx
    6190:	48 8d 45 d0          	lea    -0x30(%rbp),%rax
    6194:	48 89 d6             	mov    %rdx,%rsi
    6197:	48 89 c7             	mov    %rax,%rdi
    619a:	e8 ef 8d 00 00       	callq  ef8e <xTaskCheckForTimeOut>
    619f:	48 85 c0             	test   %rax,%rax
    61a2:	0f 85 0a 01 00 00    	jne    62b2 <xQueueGenericSend+0x51b>
    61a8:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
    61ac:	48 89 c7             	mov    %rax,%rdi
    61af:	e8 60 23 00 00       	callq  8514 <prvIsQueueFull>
    61b4:	48 85 c0             	test   %rax,%rax
    61b7:	0f 84 df 00 00 00    	je     629c <xQueueGenericSend+0x505>
    61bd:	e8 9a d4 01 00       	callq  2365c <prvTraceGetCurrentTaskHandle>
    61c2:	48 89 c7             	mov    %rax,%rdi
    61c5:	e8 91 cf 01 00       	callq  2315b <prvTraceGetTaskNumberHigh16>
    61ca:	0f b7 15 0b af 02 00 	movzwl 0x2af0b(%rip),%edx        # 310dc <CurrentFilterMask>
    61d1:	21 d0                	and    %edx,%eax
    61d3:	66 85 c0             	test   %ax,%ax
    61d6:	0f 84 85 00 00 00    	je     6261 <xQueueGenericSend+0x4ca>
    61dc:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
    61e0:	48 89 c7             	mov    %rax,%rdi
    61e3:	e8 39 d0 01 00       	callq  23221 <prvTraceGetQueueNumberHigh16>
    61e8:	0f b7 15 ed ae 02 00 	movzwl 0x2aeed(%rip),%edx        # 310dc <CurrentFilterMask>
    61ef:	21 d0                	and    %edx,%eax
    61f1:	66 85 c0             	test   %ax,%ax
    61f4:	74 6b                	je     6261 <xQueueGenericSend+0x4ca>
    61f6:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
    61fa:	48 89 c7             	mov    %rax,%rdi
    61fd:	e8 01 d0 01 00       	callq  23203 <prvTraceGetQueueNumberLow16>
    6202:	44 0f b6 e0          	movzbl %al,%r12d
    6206:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
    620a:	48 89 c7             	mov    %rax,%rdi
    620d:	e8 0d cf 01 00       	callq  2311f <prvTraceGetQueueType>
    6212:	0f b6 c0             	movzbl %al,%eax
    6215:	48 98                	cltq   
    6217:	48 8d 15 b2 ae 02 00 	lea    0x2aeb2(%rip),%rdx        # 310d0 <TraceQueueClassTable>
    621e:	0f b6 04 10          	movzbl (%rax,%rdx,1),%eax
    6222:	0f b6 d8             	movzbl %al,%ebx
    6225:	48 83 7d 90 00       	cmpq   $0x0,-0x70(%rbp)
    622a:	75 24                	jne    6250 <xQueueGenericSend+0x4b9>
    622c:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
    6230:	48 89 c7             	mov    %rax,%rdi
    6233:	e8 e7 ce 01 00       	callq  2311f <prvTraceGetQueueType>
    6238:	0f b6 c0             	movzbl %al,%eax
    623b:	48 98                	cltq   
    623d:	48 8d 15 8c ae 02 00 	lea    0x2ae8c(%rip),%rdx        # 310d0 <TraceQueueClassTable>
    6244:	0f b6 04 10          	movzbl (%rax,%rdx,1),%eax
    6248:	83 c0 70             	add    $0x70,%eax
    624b:	0f b6 c0             	movzbl %al,%eax
    624e:	eb 05                	jmp    6255 <xQueueGenericSend+0x4be>
    6250:	b8 75 00 00 00       	mov    $0x75,%eax
    6255:	44 89 e2             	mov    %r12d,%edx
    6258:	89 de                	mov    %ebx,%esi
    625a:	89 c7                	mov    %eax,%edi
    625c:	e8 f1 ed 01 00       	callq  25052 <prvTraceStoreKernelCall>
    6261:	48 8b 45 98          	mov    -0x68(%rbp),%rax
    6265:	48 8b 55 b8          	mov    -0x48(%rbp),%rdx
    6269:	48 83 c2 20          	add    $0x20,%rdx
    626d:	48 89 c6             	mov    %rax,%rsi
    6270:	48 89 d7             	mov    %rdx,%rdi
    6273:	e8 5d 84 00 00       	callq  e6d5 <vTaskPlaceOnEventList>
    6278:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
    627c:	48 89 c7             	mov    %rax,%rdi
    627f:	e8 03 21 00 00       	callq  8387 <prvUnlockQueue>
    6284:	e8 d5 72 00 00       	callq  d55e <xTaskResumeAll>
    6289:	48 85 c0             	test   %rax,%rax
    628c:	0f 85 fd fb ff ff    	jne    5e8f <xQueueGenericSend+0xf8>
    6292:	e8 dd cb 00 00       	callq  12e74 <vPortYield>
    6297:	e9 f3 fb ff ff       	jmpq   5e8f <xQueueGenericSend+0xf8>
    629c:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
    62a0:	48 89 c7             	mov    %rax,%rdi
    62a3:	e8 df 20 00 00       	callq  8387 <prvUnlockQueue>
    62a8:	e8 b1 72 00 00       	callq  d55e <xTaskResumeAll>
    62ad:	e9 dd fb ff ff       	jmpq   5e8f <xQueueGenericSend+0xf8>
    62b2:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
    62b6:	48 89 c7             	mov    %rax,%rdi
    62b9:	e8 c9 20 00 00       	callq  8387 <prvUnlockQueue>
    62be:	e8 9b 72 00 00       	callq  d55e <xTaskResumeAll>
    62c3:	e8 94 d3 01 00       	callq  2365c <prvTraceGetCurrentTaskHandle>
    62c8:	48 89 c7             	mov    %rax,%rdi
    62cb:	e8 8b ce 01 00       	callq  2315b <prvTraceGetTaskNumberHigh16>
    62d0:	0f b7 15 05 ae 02 00 	movzwl 0x2ae05(%rip),%edx        # 310dc <CurrentFilterMask>
    62d7:	21 d0                	and    %edx,%eax
    62d9:	66 85 c0             	test   %ax,%ax
    62dc:	0f 84 85 00 00 00    	je     6367 <xQueueGenericSend+0x5d0>
    62e2:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
    62e6:	48 89 c7             	mov    %rax,%rdi
    62e9:	e8 33 cf 01 00       	callq  23221 <prvTraceGetQueueNumberHigh16>
    62ee:	0f b7 15 e7 ad 02 00 	movzwl 0x2ade7(%rip),%edx        # 310dc <CurrentFilterMask>
    62f5:	21 d0                	and    %edx,%eax
    62f7:	66 85 c0             	test   %ax,%ax
    62fa:	74 6b                	je     6367 <xQueueGenericSend+0x5d0>
    62fc:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
    6300:	48 89 c7             	mov    %rax,%rdi
    6303:	e8 fb ce 01 00       	callq  23203 <prvTraceGetQueueNumberLow16>
    6308:	44 0f b6 e0          	movzbl %al,%r12d
    630c:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
    6310:	48 89 c7             	mov    %rax,%rdi
    6313:	e8 07 ce 01 00       	callq  2311f <prvTraceGetQueueType>
    6318:	0f b6 c0             	movzbl %al,%eax
    631b:	48 98                	cltq   
    631d:	48 8d 15 ac ad 02 00 	lea    0x2adac(%rip),%rdx        # 310d0 <TraceQueueClassTable>
    6324:	0f b6 04 10          	movzbl (%rax,%rdx,1),%eax
    6328:	0f b6 d8             	movzbl %al,%ebx
    632b:	48 83 7d 90 00       	cmpq   $0x0,-0x70(%rbp)
    6330:	75 24                	jne    6356 <xQueueGenericSend+0x5bf>
    6332:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
    6336:	48 89 c7             	mov    %rax,%rdi
    6339:	e8 e1 cd 01 00       	callq  2311f <prvTraceGetQueueType>
    633e:	0f b6 c0             	movzbl %al,%eax
    6341:	48 98                	cltq   
    6343:	48 8d 15 86 ad 02 00 	lea    0x2ad86(%rip),%rdx        # 310d0 <TraceQueueClassTable>
    634a:	0f b6 04 10          	movzbl (%rax,%rdx,1),%eax
    634e:	83 c0 48             	add    $0x48,%eax
    6351:	0f b6 c0             	movzbl %al,%eax
    6354:	eb 05                	jmp    635b <xQueueGenericSend+0x5c4>
    6356:	b8 4d 00 00 00       	mov    $0x4d,%eax
    635b:	44 89 e2             	mov    %r12d,%edx
    635e:	89 de                	mov    %ebx,%esi
    6360:	89 c7                	mov    %eax,%edi
    6362:	e8 eb ec 01 00       	callq  25052 <prvTraceStoreKernelCall>
    6367:	b8 00 00 00 00       	mov    $0x0,%eax
    636c:	48 8b 4d e8          	mov    -0x18(%rbp),%rcx
    6370:	64 48 33 0c 25 28 00 	xor    %fs:0x28,%rcx
    6377:	00 00 
    6379:	74 05                	je     6380 <xQueueGenericSend+0x5e9>
    637b:	e8 50 c1 ff ff       	callq  24d0 <__stack_chk_fail@plt>
    6380:	48 83 c4 60          	add    $0x60,%rsp
    6384:	5b                   	pop    %rbx
    6385:	41 5c                	pop    %r12
    6387:	5d                   	pop    %rbp
    6388:	c3                   	retq   

0000000000006389 <xQueueGenericSendFromISR>:
    6389:	f3 0f 1e fa          	endbr64 
    638d:	55                   	push   %rbp
    638e:	48 89 e5             	mov    %rsp,%rbp
    6391:	41 54                	push   %r12
    6393:	53                   	push   %rbx
    6394:	48 83 ec 50          	sub    $0x50,%rsp
    6398:	48 89 7d b8          	mov    %rdi,-0x48(%rbp)
    639c:	48 89 75 b0          	mov    %rsi,-0x50(%rbp)
    63a0:	48 89 55 a8          	mov    %rdx,-0x58(%rbp)
    63a4:	48 89 4d a0          	mov    %rcx,-0x60(%rbp)
    63a8:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
    63ac:	48 89 45 d8          	mov    %rax,-0x28(%rbp)
    63b0:	48 83 7d d8 00       	cmpq   $0x0,-0x28(%rbp)
    63b5:	75 11                	jne    63c8 <xQueueGenericSendFromISR+0x3f>
    63b7:	be 02 04 00 00       	mov    $0x402,%esi
    63bc:	48 8d 3d 65 14 02 00 	lea    0x21465(%rip),%rdi        # 27828 <_IO_stdin_used+0x828>
    63c3:	e8 44 d9 ff ff       	callq  3d0c <vAssertCalled>
    63c8:	48 83 7d b0 00       	cmpq   $0x0,-0x50(%rbp)
    63cd:	75 10                	jne    63df <xQueueGenericSendFromISR+0x56>
    63cf:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
    63d3:	48 8b 80 80 00 00 00 	mov    0x80(%rax),%rax
    63da:	48 85 c0             	test   %rax,%rax
    63dd:	75 07                	jne    63e6 <xQueueGenericSendFromISR+0x5d>
    63df:	b8 01 00 00 00       	mov    $0x1,%eax
    63e4:	eb 05                	jmp    63eb <xQueueGenericSendFromISR+0x62>
    63e6:	b8 00 00 00 00       	mov    $0x0,%eax
    63eb:	85 c0                	test   %eax,%eax
    63ed:	75 11                	jne    6400 <xQueueGenericSendFromISR+0x77>
    63ef:	be 03 04 00 00       	mov    $0x403,%esi
    63f4:	48 8d 3d 2d 14 02 00 	lea    0x2142d(%rip),%rdi        # 27828 <_IO_stdin_used+0x828>
    63fb:	e8 0c d9 ff ff       	callq  3d0c <vAssertCalled>
    6400:	48 83 7d a0 02       	cmpq   $0x2,-0x60(%rbp)
    6405:	75 0e                	jne    6415 <xQueueGenericSendFromISR+0x8c>
    6407:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
    640b:	48 8b 40 78          	mov    0x78(%rax),%rax
    640f:	48 83 f8 01          	cmp    $0x1,%rax
    6413:	75 07                	jne    641c <xQueueGenericSendFromISR+0x93>
    6415:	b8 01 00 00 00       	mov    $0x1,%eax
    641a:	eb 05                	jmp    6421 <xQueueGenericSendFromISR+0x98>
    641c:	b8 00 00 00 00       	mov    $0x0,%eax
    6421:	85 c0                	test   %eax,%eax
    6423:	75 11                	jne    6436 <xQueueGenericSendFromISR+0xad>
    6425:	be 04 04 00 00       	mov    $0x404,%esi
    642a:	48 8d 3d f7 13 02 00 	lea    0x213f7(%rip),%rdi        # 27828 <_IO_stdin_used+0x828>
    6431:	e8 d6 d8 ff ff       	callq  3d0c <vAssertCalled>
    6436:	e8 95 ca 00 00       	callq  12ed0 <xPortSetInterruptMask>
    643b:	48 89 45 e0          	mov    %rax,-0x20(%rbp)
    643f:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
    6443:	48 8b 50 70          	mov    0x70(%rax),%rdx
    6447:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
    644b:	48 8b 40 78          	mov    0x78(%rax),%rax
    644f:	48 39 c2             	cmp    %rax,%rdx
    6452:	72 0b                	jb     645f <xQueueGenericSendFromISR+0xd6>
    6454:	48 83 7d a0 02       	cmpq   $0x2,-0x60(%rbp)
    6459:	0f 85 b9 01 00 00    	jne    6618 <xQueueGenericSendFromISR+0x28f>
    645f:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
    6463:	0f b6 80 89 00 00 00 	movzbl 0x89(%rax),%eax
    646a:	88 45 cf             	mov    %al,-0x31(%rbp)
    646d:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
    6471:	48 8b 40 70          	mov    0x70(%rax),%rax
    6475:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
    6479:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
    647d:	48 89 c7             	mov    %rax,%rdi
    6480:	e8 9c cd 01 00       	callq  23221 <prvTraceGetQueueNumberHigh16>
    6485:	0f b7 15 50 ac 02 00 	movzwl 0x2ac50(%rip),%edx        # 310dc <CurrentFilterMask>
    648c:	21 d0                	and    %edx,%eax
    648e:	66 85 c0             	test   %ax,%ax
    6491:	74 6b                	je     64fe <xQueueGenericSendFromISR+0x175>
    6493:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
    6497:	48 89 c7             	mov    %rax,%rdi
    649a:	e8 64 cd 01 00       	callq  23203 <prvTraceGetQueueNumberLow16>
    649f:	44 0f b6 e0          	movzbl %al,%r12d
    64a3:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
    64a7:	48 89 c7             	mov    %rax,%rdi
    64aa:	e8 70 cc 01 00       	callq  2311f <prvTraceGetQueueType>
    64af:	0f b6 c0             	movzbl %al,%eax
    64b2:	48 98                	cltq   
    64b4:	48 8d 15 15 ac 02 00 	lea    0x2ac15(%rip),%rdx        # 310d0 <TraceQueueClassTable>
    64bb:	0f b6 04 10          	movzbl (%rax,%rdx,1),%eax
    64bf:	0f b6 d8             	movzbl %al,%ebx
    64c2:	48 83 7d a0 00       	cmpq   $0x0,-0x60(%rbp)
    64c7:	75 24                	jne    64ed <xQueueGenericSendFromISR+0x164>
    64c9:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
    64cd:	48 89 c7             	mov    %rax,%rdi
    64d0:	e8 4a cc 01 00       	callq  2311f <prvTraceGetQueueType>
    64d5:	0f b6 c0             	movzbl %al,%eax
    64d8:	48 98                	cltq   
    64da:	48 8d 15 ef ab 02 00 	lea    0x2abef(%rip),%rdx        # 310d0 <TraceQueueClassTable>
    64e1:	0f b6 04 10          	movzbl (%rax,%rdx,1),%eax
    64e5:	83 c0 30             	add    $0x30,%eax
    64e8:	0f b6 c0             	movzbl %al,%eax
    64eb:	eb 05                	jmp    64f2 <xQueueGenericSendFromISR+0x169>
    64ed:	b8 35 00 00 00       	mov    $0x35,%eax
    64f2:	44 89 e2             	mov    %r12d,%edx
    64f5:	89 de                	mov    %ebx,%esi
    64f7:	89 c7                	mov    %eax,%edi
    64f9:	e8 54 eb 01 00       	callq  25052 <prvTraceStoreKernelCall>
    64fe:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
    6502:	48 8b 40 70          	mov    0x70(%rax),%rax
    6506:	83 c0 01             	add    $0x1,%eax
    6509:	44 0f b6 e0          	movzbl %al,%r12d
    650d:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
    6511:	48 89 c7             	mov    %rax,%rdi
    6514:	e8 ea cc 01 00       	callq  23203 <prvTraceGetQueueNumberLow16>
    6519:	0f b6 d8             	movzbl %al,%ebx
    651c:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
    6520:	48 89 c7             	mov    %rax,%rdi
    6523:	e8 f7 cb 01 00       	callq  2311f <prvTraceGetQueueType>
    6528:	0f b6 c0             	movzbl %al,%eax
    652b:	48 98                	cltq   
    652d:	48 8d 15 9c ab 02 00 	lea    0x2ab9c(%rip),%rdx        # 310d0 <TraceQueueClassTable>
    6534:	0f b6 04 10          	movzbl (%rax,%rdx,1),%eax
    6538:	0f b6 c0             	movzbl %al,%eax
    653b:	44 89 e2             	mov    %r12d,%edx
    653e:	89 de                	mov    %ebx,%esi
    6540:	89 c7                	mov    %eax,%edi
    6542:	e8 45 f3 01 00       	callq  2588c <prvTraceSetObjectState>
    6547:	48 8b 55 a0          	mov    -0x60(%rbp),%rdx
    654b:	48 8b 4d b0          	mov    -0x50(%rbp),%rcx
    654f:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
    6553:	48 89 ce             	mov    %rcx,%rsi
    6556:	48 89 c7             	mov    %rax,%rdi
    6559:	e8 18 1c 00 00       	callq  8176 <prvCopyDataToQueue>
    655e:	80 7d cf ff          	cmpb   $0xff,-0x31(%rbp)
    6562:	75 7d                	jne    65e1 <xQueueGenericSendFromISR+0x258>
    6564:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
    6568:	48 8b 80 90 00 00 00 	mov    0x90(%rax),%rax
    656f:	48 85 c0             	test   %rax,%rax
    6572:	74 37                	je     65ab <xQueueGenericSendFromISR+0x222>
    6574:	48 83 7d a0 02       	cmpq   $0x2,-0x60(%rbp)
    6579:	75 0b                	jne    6586 <xQueueGenericSendFromISR+0x1fd>
    657b:	48 83 7d e8 00       	cmpq   $0x0,-0x18(%rbp)
    6580:	0f 85 85 00 00 00    	jne    660b <xQueueGenericSendFromISR+0x282>
    6586:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
    658a:	48 89 c7             	mov    %rax,%rdi
    658d:	e8 c2 24 00 00       	callq  8a54 <prvNotifyQueueSetContainer>
    6592:	48 85 c0             	test   %rax,%rax
    6595:	74 74                	je     660b <xQueueGenericSendFromISR+0x282>
    6597:	48 83 7d a8 00       	cmpq   $0x0,-0x58(%rbp)
    659c:	74 6d                	je     660b <xQueueGenericSendFromISR+0x282>
    659e:	48 8b 45 a8          	mov    -0x58(%rbp),%rax
    65a2:	48 c7 00 01 00 00 00 	movq   $0x1,(%rax)
    65a9:	eb 60                	jmp    660b <xQueueGenericSendFromISR+0x282>
    65ab:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
    65af:	48 8b 40 48          	mov    0x48(%rax),%rax
    65b3:	48 85 c0             	test   %rax,%rax
    65b6:	74 53                	je     660b <xQueueGenericSendFromISR+0x282>
    65b8:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
    65bc:	48 83 c0 48          	add    $0x48,%rax
    65c0:	48 89 c7             	mov    %rax,%rdi
    65c3:	e8 a6 83 00 00       	callq  e96e <xTaskRemoveFromEventList>
    65c8:	48 85 c0             	test   %rax,%rax
    65cb:	74 3e                	je     660b <xQueueGenericSendFromISR+0x282>
    65cd:	48 83 7d a8 00       	cmpq   $0x0,-0x58(%rbp)
    65d2:	74 37                	je     660b <xQueueGenericSendFromISR+0x282>
    65d4:	48 8b 45 a8          	mov    -0x58(%rbp),%rax
    65d8:	48 c7 00 01 00 00 00 	movq   $0x1,(%rax)
    65df:	eb 2a                	jmp    660b <xQueueGenericSendFromISR+0x282>
    65e1:	80 7d cf 7f          	cmpb   $0x7f,-0x31(%rbp)
    65e5:	75 11                	jne    65f8 <xQueueGenericSendFromISR+0x26f>
    65e7:	be 8d 04 00 00       	mov    $0x48d,%esi
    65ec:	48 8d 3d 35 12 02 00 	lea    0x21235(%rip),%rdi        # 27828 <_IO_stdin_used+0x828>
    65f3:	e8 14 d7 ff ff       	callq  3d0c <vAssertCalled>
    65f8:	0f b6 45 cf          	movzbl -0x31(%rbp),%eax
    65fc:	83 c0 01             	add    $0x1,%eax
    65ff:	89 c2                	mov    %eax,%edx
    6601:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
    6605:	88 90 89 00 00 00    	mov    %dl,0x89(%rax)
    660b:	48 c7 45 d0 01 00 00 	movq   $0x1,-0x30(%rbp)
    6612:	00 
    6613:	e9 8d 00 00 00       	jmpq   66a5 <xQueueGenericSendFromISR+0x31c>
    6618:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
    661c:	48 89 c7             	mov    %rax,%rdi
    661f:	e8 fd cb 01 00       	callq  23221 <prvTraceGetQueueNumberHigh16>
    6624:	0f b7 15 b1 aa 02 00 	movzwl 0x2aab1(%rip),%edx        # 310dc <CurrentFilterMask>
    662b:	21 d0                	and    %edx,%eax
    662d:	66 85 c0             	test   %ax,%ax
    6630:	74 6b                	je     669d <xQueueGenericSendFromISR+0x314>
    6632:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
    6636:	48 89 c7             	mov    %rax,%rdi
    6639:	e8 c5 cb 01 00       	callq  23203 <prvTraceGetQueueNumberLow16>
    663e:	44 0f b6 e0          	movzbl %al,%r12d
    6642:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
    6646:	48 89 c7             	mov    %rax,%rdi
    6649:	e8 d1 ca 01 00       	callq  2311f <prvTraceGetQueueType>
    664e:	0f b6 c0             	movzbl %al,%eax
    6651:	48 98                	cltq   
    6653:	48 8d 15 76 aa 02 00 	lea    0x2aa76(%rip),%rdx        # 310d0 <TraceQueueClassTable>
    665a:	0f b6 04 10          	movzbl (%rax,%rdx,1),%eax
    665e:	0f b6 d8             	movzbl %al,%ebx
    6661:	48 83 7d a0 00       	cmpq   $0x0,-0x60(%rbp)
    6666:	75 24                	jne    668c <xQueueGenericSendFromISR+0x303>
    6668:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
    666c:	48 89 c7             	mov    %rax,%rdi
    666f:	e8 ab ca 01 00       	callq  2311f <prvTraceGetQueueType>
    6674:	0f b6 c0             	movzbl %al,%eax
    6677:	48 98                	cltq   
    6679:	48 8d 15 50 aa 02 00 	lea    0x2aa50(%rip),%rdx        # 310d0 <TraceQueueClassTable>
    6680:	0f b6 04 10          	movzbl (%rax,%rdx,1),%eax
    6684:	83 c0 58             	add    $0x58,%eax
    6687:	0f b6 c0             	movzbl %al,%eax
    668a:	eb 05                	jmp    6691 <xQueueGenericSendFromISR+0x308>
    668c:	b8 5d 00 00 00       	mov    $0x5d,%eax
    6691:	44 89 e2             	mov    %r12d,%edx
    6694:	89 de                	mov    %ebx,%esi
    6696:	89 c7                	mov    %eax,%edi
    6698:	e8 b5 e9 01 00       	callq  25052 <prvTraceStoreKernelCall>
    669d:	48 c7 45 d0 00 00 00 	movq   $0x0,-0x30(%rbp)
    66a4:	00 
    66a5:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
    66a9:	48 89 c7             	mov    %rax,%rdi
    66ac:	e8 2e c8 00 00       	callq  12edf <vPortClearInterruptMask>
    66b1:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
    66b5:	48 83 c4 50          	add    $0x50,%rsp
    66b9:	5b                   	pop    %rbx
    66ba:	41 5c                	pop    %r12
    66bc:	5d                   	pop    %rbp
    66bd:	c3                   	retq   

00000000000066be <xQueueGiveFromISR>:
    66be:	f3 0f 1e fa          	endbr64 
    66c2:	55                   	push   %rbp
    66c3:	48 89 e5             	mov    %rsp,%rbp
    66c6:	48 83 ec 10          	sub    $0x10,%rsp
    66ca:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
    66ce:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
    66d2:	48 8b 4d f0          	mov    -0x10(%rbp),%rcx
    66d6:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    66da:	ba 00 00 00 00       	mov    $0x0,%edx
    66df:	48 89 ce             	mov    %rcx,%rsi
    66e2:	48 89 c7             	mov    %rax,%rdi
    66e5:	e8 02 00 00 00       	callq  66ec <MyWrapper_xQueueGiveFromISR>
    66ea:	c9                   	leaveq 
    66eb:	c3                   	retq   

00000000000066ec <MyWrapper_xQueueGiveFromISR>:
    66ec:	f3 0f 1e fa          	endbr64 
    66f0:	55                   	push   %rbp
    66f1:	48 89 e5             	mov    %rsp,%rbp
    66f4:	41 54                	push   %r12
    66f6:	53                   	push   %rbx
    66f7:	48 83 ec 50          	sub    $0x50,%rsp
    66fb:	48 89 7d b8          	mov    %rdi,-0x48(%rbp)
    66ff:	48 89 75 b0          	mov    %rsi,-0x50(%rbp)
    6703:	48 89 55 a8          	mov    %rdx,-0x58(%rbp)
    6707:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
    670b:	48 89 45 d8          	mov    %rax,-0x28(%rbp)
    670f:	48 83 7d d8 00       	cmpq   $0x0,-0x28(%rbp)
    6714:	75 11                	jne    6727 <MyWrapper_xQueueGiveFromISR+0x3b>
    6716:	be ad 04 00 00       	mov    $0x4ad,%esi
    671b:	48 8d 3d 06 11 02 00 	lea    0x21106(%rip),%rdi        # 27828 <_IO_stdin_used+0x828>
    6722:	e8 e5 d5 ff ff       	callq  3d0c <vAssertCalled>
    6727:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
    672b:	48 8b 80 80 00 00 00 	mov    0x80(%rax),%rax
    6732:	48 85 c0             	test   %rax,%rax
    6735:	74 11                	je     6748 <MyWrapper_xQueueGiveFromISR+0x5c>
    6737:	be b1 04 00 00       	mov    $0x4b1,%esi
    673c:	48 8d 3d e5 10 02 00 	lea    0x210e5(%rip),%rdi        # 27828 <_IO_stdin_used+0x828>
    6743:	e8 c4 d5 ff ff       	callq  3d0c <vAssertCalled>
    6748:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
    674c:	48 8b 00             	mov    (%rax),%rax
    674f:	48 85 c0             	test   %rax,%rax
    6752:	75 0d                	jne    6761 <MyWrapper_xQueueGiveFromISR+0x75>
    6754:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
    6758:	48 8b 40 10          	mov    0x10(%rax),%rax
    675c:	48 85 c0             	test   %rax,%rax
    675f:	75 07                	jne    6768 <MyWrapper_xQueueGiveFromISR+0x7c>
    6761:	b8 01 00 00 00       	mov    $0x1,%eax
    6766:	eb 05                	jmp    676d <MyWrapper_xQueueGiveFromISR+0x81>
    6768:	b8 00 00 00 00       	mov    $0x0,%eax
    676d:	85 c0                	test   %eax,%eax
    676f:	75 11                	jne    6782 <MyWrapper_xQueueGiveFromISR+0x96>
    6771:	be b6 04 00 00       	mov    $0x4b6,%esi
    6776:	48 8d 3d ab 10 02 00 	lea    0x210ab(%rip),%rdi        # 27828 <_IO_stdin_used+0x828>
    677d:	e8 8a d5 ff ff       	callq  3d0c <vAssertCalled>
    6782:	e8 49 c7 00 00       	callq  12ed0 <xPortSetInterruptMask>
    6787:	48 89 45 e0          	mov    %rax,-0x20(%rbp)
    678b:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
    678f:	48 8b 40 70          	mov    0x70(%rax),%rax
    6793:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
    6797:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
    679b:	48 8b 40 78          	mov    0x78(%rax),%rax
    679f:	48 39 45 e8          	cmp    %rax,-0x18(%rbp)
    67a3:	0f 83 94 01 00 00    	jae    693d <MyWrapper_xQueueGiveFromISR+0x251>
    67a9:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
    67ad:	0f b6 80 89 00 00 00 	movzbl 0x89(%rax),%eax
    67b4:	88 45 cf             	mov    %al,-0x31(%rbp)
    67b7:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
    67bb:	48 89 c7             	mov    %rax,%rdi
    67be:	e8 5e ca 01 00       	callq  23221 <prvTraceGetQueueNumberHigh16>
    67c3:	0f b7 15 12 a9 02 00 	movzwl 0x2a912(%rip),%edx        # 310dc <CurrentFilterMask>
    67ca:	21 d0                	and    %edx,%eax
    67cc:	66 85 c0             	test   %ax,%ax
    67cf:	74 6b                	je     683c <MyWrapper_xQueueGiveFromISR+0x150>
    67d1:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
    67d5:	48 89 c7             	mov    %rax,%rdi
    67d8:	e8 26 ca 01 00       	callq  23203 <prvTraceGetQueueNumberLow16>
    67dd:	44 0f b6 e0          	movzbl %al,%r12d
    67e1:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
    67e5:	48 89 c7             	mov    %rax,%rdi
    67e8:	e8 32 c9 01 00       	callq  2311f <prvTraceGetQueueType>
    67ed:	0f b6 c0             	movzbl %al,%eax
    67f0:	48 98                	cltq   
    67f2:	48 8d 15 d7 a8 02 00 	lea    0x2a8d7(%rip),%rdx        # 310d0 <TraceQueueClassTable>
    67f9:	0f b6 04 10          	movzbl (%rax,%rdx,1),%eax
    67fd:	0f b6 d8             	movzbl %al,%ebx
    6800:	48 83 7d a8 00       	cmpq   $0x0,-0x58(%rbp)
    6805:	75 24                	jne    682b <MyWrapper_xQueueGiveFromISR+0x13f>
    6807:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
    680b:	48 89 c7             	mov    %rax,%rdi
    680e:	e8 0c c9 01 00       	callq  2311f <prvTraceGetQueueType>
    6813:	0f b6 c0             	movzbl %al,%eax
    6816:	48 98                	cltq   
    6818:	48 8d 15 b1 a8 02 00 	lea    0x2a8b1(%rip),%rdx        # 310d0 <TraceQueueClassTable>
    681f:	0f b6 04 10          	movzbl (%rax,%rdx,1),%eax
    6823:	83 c0 30             	add    $0x30,%eax
    6826:	0f b6 c0             	movzbl %al,%eax
    6829:	eb 05                	jmp    6830 <MyWrapper_xQueueGiveFromISR+0x144>
    682b:	b8 35 00 00 00       	mov    $0x35,%eax
    6830:	44 89 e2             	mov    %r12d,%edx
    6833:	89 de                	mov    %ebx,%esi
    6835:	89 c7                	mov    %eax,%edi
    6837:	e8 16 e8 01 00       	callq  25052 <prvTraceStoreKernelCall>
    683c:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
    6840:	48 8b 40 70          	mov    0x70(%rax),%rax
    6844:	83 c0 01             	add    $0x1,%eax
    6847:	44 0f b6 e0          	movzbl %al,%r12d
    684b:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
    684f:	48 89 c7             	mov    %rax,%rdi
    6852:	e8 ac c9 01 00       	callq  23203 <prvTraceGetQueueNumberLow16>
    6857:	0f b6 d8             	movzbl %al,%ebx
    685a:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
    685e:	48 89 c7             	mov    %rax,%rdi
    6861:	e8 b9 c8 01 00       	callq  2311f <prvTraceGetQueueType>
    6866:	0f b6 c0             	movzbl %al,%eax
    6869:	48 98                	cltq   
    686b:	48 8d 15 5e a8 02 00 	lea    0x2a85e(%rip),%rdx        # 310d0 <TraceQueueClassTable>
    6872:	0f b6 04 10          	movzbl (%rax,%rdx,1),%eax
    6876:	0f b6 c0             	movzbl %al,%eax
    6879:	44 89 e2             	mov    %r12d,%edx
    687c:	89 de                	mov    %ebx,%esi
    687e:	89 c7                	mov    %eax,%edi
    6880:	e8 07 f0 01 00       	callq  2588c <prvTraceSetObjectState>
    6885:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
    6889:	48 8d 50 01          	lea    0x1(%rax),%rdx
    688d:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
    6891:	48 89 50 70          	mov    %rdx,0x70(%rax)
    6895:	80 7d cf ff          	cmpb   $0xff,-0x31(%rbp)
    6899:	75 6b                	jne    6906 <MyWrapper_xQueueGiveFromISR+0x21a>
    689b:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
    689f:	48 8b 80 90 00 00 00 	mov    0x90(%rax),%rax
    68a6:	48 85 c0             	test   %rax,%rax
    68a9:	74 25                	je     68d0 <MyWrapper_xQueueGiveFromISR+0x1e4>
    68ab:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
    68af:	48 89 c7             	mov    %rax,%rdi
    68b2:	e8 9d 21 00 00       	callq  8a54 <prvNotifyQueueSetContainer>
    68b7:	48 85 c0             	test   %rax,%rax
    68ba:	74 74                	je     6930 <MyWrapper_xQueueGiveFromISR+0x244>
    68bc:	48 83 7d b0 00       	cmpq   $0x0,-0x50(%rbp)
    68c1:	74 6d                	je     6930 <MyWrapper_xQueueGiveFromISR+0x244>
    68c3:	48 8b 45 b0          	mov    -0x50(%rbp),%rax
    68c7:	48 c7 00 01 00 00 00 	movq   $0x1,(%rax)
    68ce:	eb 60                	jmp    6930 <MyWrapper_xQueueGiveFromISR+0x244>
    68d0:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
    68d4:	48 8b 40 48          	mov    0x48(%rax),%rax
    68d8:	48 85 c0             	test   %rax,%rax
    68db:	74 53                	je     6930 <MyWrapper_xQueueGiveFromISR+0x244>
    68dd:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
    68e1:	48 83 c0 48          	add    $0x48,%rax
    68e5:	48 89 c7             	mov    %rax,%rdi
    68e8:	e8 81 80 00 00       	callq  e96e <xTaskRemoveFromEventList>
    68ed:	48 85 c0             	test   %rax,%rax
    68f0:	74 3e                	je     6930 <MyWrapper_xQueueGiveFromISR+0x244>
    68f2:	48 83 7d b0 00       	cmpq   $0x0,-0x50(%rbp)
    68f7:	74 37                	je     6930 <MyWrapper_xQueueGiveFromISR+0x244>
    68f9:	48 8b 45 b0          	mov    -0x50(%rbp),%rax
    68fd:	48 c7 00 01 00 00 00 	movq   $0x1,(%rax)
    6904:	eb 2a                	jmp    6930 <MyWrapper_xQueueGiveFromISR+0x244>
    6906:	80 7d cf 7f          	cmpb   $0x7f,-0x31(%rbp)
    690a:	75 11                	jne    691d <MyWrapper_xQueueGiveFromISR+0x231>
    690c:	be 35 05 00 00       	mov    $0x535,%esi
    6911:	48 8d 3d 10 0f 02 00 	lea    0x20f10(%rip),%rdi        # 27828 <_IO_stdin_used+0x828>
    6918:	e8 ef d3 ff ff       	callq  3d0c <vAssertCalled>
    691d:	0f b6 45 cf          	movzbl -0x31(%rbp),%eax
    6921:	83 c0 01             	add    $0x1,%eax
    6924:	89 c2                	mov    %eax,%edx
    6926:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
    692a:	88 90 89 00 00 00    	mov    %dl,0x89(%rax)
    6930:	48 c7 45 d0 01 00 00 	movq   $0x1,-0x30(%rbp)
    6937:	00 
    6938:	e9 8d 00 00 00       	jmpq   69ca <MyWrapper_xQueueGiveFromISR+0x2de>
    693d:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
    6941:	48 89 c7             	mov    %rax,%rdi
    6944:	e8 d8 c8 01 00       	callq  23221 <prvTraceGetQueueNumberHigh16>
    6949:	0f b7 15 8c a7 02 00 	movzwl 0x2a78c(%rip),%edx        # 310dc <CurrentFilterMask>
    6950:	21 d0                	and    %edx,%eax
    6952:	66 85 c0             	test   %ax,%ax
    6955:	74 6b                	je     69c2 <MyWrapper_xQueueGiveFromISR+0x2d6>
    6957:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
    695b:	48 89 c7             	mov    %rax,%rdi
    695e:	e8 a0 c8 01 00       	callq  23203 <prvTraceGetQueueNumberLow16>
    6963:	44 0f b6 e0          	movzbl %al,%r12d
    6967:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
    696b:	48 89 c7             	mov    %rax,%rdi
    696e:	e8 ac c7 01 00       	callq  2311f <prvTraceGetQueueType>
    6973:	0f b6 c0             	movzbl %al,%eax
    6976:	48 98                	cltq   
    6978:	48 8d 15 51 a7 02 00 	lea    0x2a751(%rip),%rdx        # 310d0 <TraceQueueClassTable>
    697f:	0f b6 04 10          	movzbl (%rax,%rdx,1),%eax
    6983:	0f b6 d8             	movzbl %al,%ebx
    6986:	48 83 7d a8 00       	cmpq   $0x0,-0x58(%rbp)
    698b:	75 24                	jne    69b1 <MyWrapper_xQueueGiveFromISR+0x2c5>
    698d:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
    6991:	48 89 c7             	mov    %rax,%rdi
    6994:	e8 86 c7 01 00       	callq  2311f <prvTraceGetQueueType>
    6999:	0f b6 c0             	movzbl %al,%eax
    699c:	48 98                	cltq   
    699e:	48 8d 15 2b a7 02 00 	lea    0x2a72b(%rip),%rdx        # 310d0 <TraceQueueClassTable>
    69a5:	0f b6 04 10          	movzbl (%rax,%rdx,1),%eax
    69a9:	83 c0 58             	add    $0x58,%eax
    69ac:	0f b6 c0             	movzbl %al,%eax
    69af:	eb 05                	jmp    69b6 <MyWrapper_xQueueGiveFromISR+0x2ca>
    69b1:	b8 5d 00 00 00       	mov    $0x5d,%eax
    69b6:	44 89 e2             	mov    %r12d,%edx
    69b9:	89 de                	mov    %ebx,%esi
    69bb:	89 c7                	mov    %eax,%edi
    69bd:	e8 90 e6 01 00       	callq  25052 <prvTraceStoreKernelCall>
    69c2:	48 c7 45 d0 00 00 00 	movq   $0x0,-0x30(%rbp)
    69c9:	00 
    69ca:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
    69ce:	48 89 c7             	mov    %rax,%rdi
    69d1:	e8 09 c5 00 00       	callq  12edf <vPortClearInterruptMask>
    69d6:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
    69da:	48 83 c4 50          	add    $0x50,%rsp
    69de:	5b                   	pop    %rbx
    69df:	41 5c                	pop    %r12
    69e1:	5d                   	pop    %rbp
    69e2:	c3                   	retq   

00000000000069e3 <xQueueReceive>:
    69e3:	f3 0f 1e fa          	endbr64 
    69e7:	55                   	push   %rbp
    69e8:	48 89 e5             	mov    %rsp,%rbp
    69eb:	41 54                	push   %r12
    69ed:	53                   	push   %rbx
    69ee:	48 83 ec 60          	sub    $0x60,%rsp
    69f2:	48 89 7d a8          	mov    %rdi,-0x58(%rbp)
    69f6:	48 89 75 a0          	mov    %rsi,-0x60(%rbp)
    69fa:	48 89 55 98          	mov    %rdx,-0x68(%rbp)
    69fe:	64 48 8b 04 25 28 00 	mov    %fs:0x28,%rax
    6a05:	00 00 
    6a07:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
    6a0b:	31 c0                	xor    %eax,%eax
    6a0d:	48 c7 45 c0 00 00 00 	movq   $0x0,-0x40(%rbp)
    6a14:	00 
    6a15:	48 8b 45 a8          	mov    -0x58(%rbp),%rax
    6a19:	48 89 45 c8          	mov    %rax,-0x38(%rbp)
    6a1d:	48 83 7d c8 00       	cmpq   $0x0,-0x38(%rbp)
    6a22:	75 11                	jne    6a35 <xQueueReceive+0x52>
    6a24:	be 51 05 00 00       	mov    $0x551,%esi
    6a29:	48 8d 3d f8 0d 02 00 	lea    0x20df8(%rip),%rdi        # 27828 <_IO_stdin_used+0x828>
    6a30:	e8 d7 d2 ff ff       	callq  3d0c <vAssertCalled>
    6a35:	48 83 7d a0 00       	cmpq   $0x0,-0x60(%rbp)
    6a3a:	75 10                	jne    6a4c <xQueueReceive+0x69>
    6a3c:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
    6a40:	48 8b 80 80 00 00 00 	mov    0x80(%rax),%rax
    6a47:	48 85 c0             	test   %rax,%rax
    6a4a:	75 07                	jne    6a53 <xQueueReceive+0x70>
    6a4c:	b8 01 00 00 00       	mov    $0x1,%eax
    6a51:	eb 05                	jmp    6a58 <xQueueReceive+0x75>
    6a53:	b8 00 00 00 00       	mov    $0x0,%eax
    6a58:	85 c0                	test   %eax,%eax
    6a5a:	75 11                	jne    6a6d <xQueueReceive+0x8a>
    6a5c:	be 55 05 00 00       	mov    $0x555,%esi
    6a61:	48 8d 3d c0 0d 02 00 	lea    0x20dc0(%rip),%rdi        # 27828 <_IO_stdin_used+0x828>
    6a68:	e8 9f d2 ff ff       	callq  3d0c <vAssertCalled>
    6a6d:	e8 25 8c 00 00       	callq  f697 <xTaskGetSchedulerState>
    6a72:	48 85 c0             	test   %rax,%rax
    6a75:	75 09                	jne    6a80 <xQueueReceive+0x9d>
    6a77:	48 8b 45 98          	mov    -0x68(%rbp),%rax
    6a7b:	48 85 c0             	test   %rax,%rax
    6a7e:	75 07                	jne    6a87 <xQueueReceive+0xa4>
    6a80:	b8 01 00 00 00       	mov    $0x1,%eax
    6a85:	eb 05                	jmp    6a8c <xQueueReceive+0xa9>
    6a87:	b8 00 00 00 00       	mov    $0x0,%eax
    6a8c:	85 c0                	test   %eax,%eax
    6a8e:	75 11                	jne    6aa1 <xQueueReceive+0xbe>
    6a90:	be 5a 05 00 00       	mov    $0x55a,%esi
    6a95:	48 8d 3d 8c 0d 02 00 	lea    0x20d8c(%rip),%rdi        # 27828 <_IO_stdin_used+0x828>
    6a9c:	e8 6b d2 ff ff       	callq  3d0c <vAssertCalled>
    6aa1:	e8 29 c3 00 00       	callq  12dcf <vPortEnterCritical>
    6aa6:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
    6aaa:	48 8b 40 70          	mov    0x70(%rax),%rax
    6aae:	48 89 45 b8          	mov    %rax,-0x48(%rbp)
    6ab2:	48 83 7d b8 00       	cmpq   $0x0,-0x48(%rbp)
    6ab7:	0f 84 66 01 00 00    	je     6c23 <xQueueReceive+0x240>
    6abd:	48 8b 55 a0          	mov    -0x60(%rbp),%rdx
    6ac1:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
    6ac5:	48 89 d6             	mov    %rdx,%rsi
    6ac8:	48 89 c7             	mov    %rax,%rdi
    6acb:	e8 2c 18 00 00       	callq  82fc <prvCopyDataFromQueue>
    6ad0:	e8 87 cb 01 00       	callq  2365c <prvTraceGetCurrentTaskHandle>
    6ad5:	48 89 c7             	mov    %rax,%rdi
    6ad8:	e8 7e c6 01 00       	callq  2315b <prvTraceGetTaskNumberHigh16>
    6add:	0f b7 15 f8 a5 02 00 	movzwl 0x2a5f8(%rip),%edx        # 310dc <CurrentFilterMask>
    6ae4:	21 d0                	and    %edx,%eax
    6ae6:	66 85 c0             	test   %ax,%ax
    6ae9:	74 77                	je     6b62 <xQueueReceive+0x17f>
    6aeb:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
    6aef:	48 89 c7             	mov    %rax,%rdi
    6af2:	e8 2a c7 01 00       	callq  23221 <prvTraceGetQueueNumberHigh16>
    6af7:	0f b7 15 de a5 02 00 	movzwl 0x2a5de(%rip),%edx        # 310dc <CurrentFilterMask>
    6afe:	21 d0                	and    %edx,%eax
    6b00:	66 85 c0             	test   %ax,%ax
    6b03:	74 5d                	je     6b62 <xQueueReceive+0x17f>
    6b05:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
    6b09:	48 89 c7             	mov    %rax,%rdi
    6b0c:	e8 f2 c6 01 00       	callq  23203 <prvTraceGetQueueNumberLow16>
    6b11:	44 0f b6 e0          	movzbl %al,%r12d
    6b15:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
    6b19:	48 89 c7             	mov    %rax,%rdi
    6b1c:	e8 fe c5 01 00       	callq  2311f <prvTraceGetQueueType>
    6b21:	0f b6 c0             	movzbl %al,%eax
    6b24:	48 98                	cltq   
    6b26:	48 8d 15 a3 a5 02 00 	lea    0x2a5a3(%rip),%rdx        # 310d0 <TraceQueueClassTable>
    6b2d:	0f b6 04 10          	movzbl (%rax,%rdx,1),%eax
    6b31:	0f b6 d8             	movzbl %al,%ebx
    6b34:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
    6b38:	48 89 c7             	mov    %rax,%rdi
    6b3b:	e8 df c5 01 00       	callq  2311f <prvTraceGetQueueType>
    6b40:	0f b6 c0             	movzbl %al,%eax
    6b43:	48 98                	cltq   
    6b45:	48 8d 15 84 a5 02 00 	lea    0x2a584(%rip),%rdx        # 310d0 <TraceQueueClassTable>
    6b4c:	0f b6 04 10          	movzbl (%rax,%rdx,1),%eax
    6b50:	83 c0 28             	add    $0x28,%eax
    6b53:	0f b6 c0             	movzbl %al,%eax
    6b56:	44 89 e2             	mov    %r12d,%edx
    6b59:	89 de                	mov    %ebx,%esi
    6b5b:	89 c7                	mov    %eax,%edi
    6b5d:	e8 f0 e4 01 00       	callq  25052 <prvTraceStoreKernelCall>
    6b62:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
    6b66:	48 89 c7             	mov    %rax,%rdi
    6b69:	e8 b1 c5 01 00       	callq  2311f <prvTraceGetQueueType>
    6b6e:	0f b6 c0             	movzbl %al,%eax
    6b71:	48 98                	cltq   
    6b73:	48 8d 15 56 a5 02 00 	lea    0x2a556(%rip),%rdx        # 310d0 <TraceQueueClassTable>
    6b7a:	0f b6 04 10          	movzbl (%rax,%rdx,1),%eax
    6b7e:	3c 02                	cmp    $0x2,%al
    6b80:	75 12                	jne    6b94 <xQueueReceive+0x1b1>
    6b82:	e8 d5 ca 01 00       	callq  2365c <prvTraceGetCurrentTaskHandle>
    6b87:	48 89 c7             	mov    %rax,%rdi
    6b8a:	e8 ae c5 01 00       	callq  2313d <prvTraceGetTaskNumberLow16>
    6b8f:	0f b6 d8             	movzbl %al,%ebx
    6b92:	eb 0e                	jmp    6ba2 <xQueueReceive+0x1bf>
    6b94:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
    6b98:	48 8b 40 70          	mov    0x70(%rax),%rax
    6b9c:	83 e8 01             	sub    $0x1,%eax
    6b9f:	0f b6 d8             	movzbl %al,%ebx
    6ba2:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
    6ba6:	48 89 c7             	mov    %rax,%rdi
    6ba9:	e8 55 c6 01 00       	callq  23203 <prvTraceGetQueueNumberLow16>
    6bae:	44 0f b6 e0          	movzbl %al,%r12d
    6bb2:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
    6bb6:	48 89 c7             	mov    %rax,%rdi
    6bb9:	e8 61 c5 01 00       	callq  2311f <prvTraceGetQueueType>
    6bbe:	0f b6 c0             	movzbl %al,%eax
    6bc1:	48 98                	cltq   
    6bc3:	48 8d 15 06 a5 02 00 	lea    0x2a506(%rip),%rdx        # 310d0 <TraceQueueClassTable>
    6bca:	0f b6 04 10          	movzbl (%rax,%rdx,1),%eax
    6bce:	0f b6 c0             	movzbl %al,%eax
    6bd1:	89 da                	mov    %ebx,%edx
    6bd3:	44 89 e6             	mov    %r12d,%esi
    6bd6:	89 c7                	mov    %eax,%edi
    6bd8:	e8 af ec 01 00       	callq  2588c <prvTraceSetObjectState>
    6bdd:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
    6be1:	48 8d 50 ff          	lea    -0x1(%rax),%rdx
    6be5:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
    6be9:	48 89 50 70          	mov    %rdx,0x70(%rax)
    6bed:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
    6bf1:	48 8b 40 20          	mov    0x20(%rax),%rax
    6bf5:	48 85 c0             	test   %rax,%rax
    6bf8:	74 1a                	je     6c14 <xQueueReceive+0x231>
    6bfa:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
    6bfe:	48 83 c0 20          	add    $0x20,%rax
    6c02:	48 89 c7             	mov    %rax,%rdi
    6c05:	e8 64 7d 00 00       	callq  e96e <xTaskRemoveFromEventList>
    6c0a:	48 85 c0             	test   %rax,%rax
    6c0d:	74 05                	je     6c14 <xQueueReceive+0x231>
    6c0f:	e8 60 c2 00 00       	callq  12e74 <vPortYield>
    6c14:	e8 e4 c1 00 00       	callq  12dfd <vPortExitCritical>
    6c19:	b8 01 00 00 00       	mov    $0x1,%eax
    6c1e:	e9 34 03 00 00       	jmpq   6f57 <xQueueReceive+0x574>
    6c23:	48 8b 45 98          	mov    -0x68(%rbp),%rax
    6c27:	48 85 c0             	test   %rax,%rax
    6c2a:	0f 85 a1 00 00 00    	jne    6cd1 <xQueueReceive+0x2ee>
    6c30:	e8 c8 c1 00 00       	callq  12dfd <vPortExitCritical>
    6c35:	e8 22 ca 01 00       	callq  2365c <prvTraceGetCurrentTaskHandle>
    6c3a:	48 89 c7             	mov    %rax,%rdi
    6c3d:	e8 19 c5 01 00       	callq  2315b <prvTraceGetTaskNumberHigh16>
    6c42:	0f b7 15 93 a4 02 00 	movzwl 0x2a493(%rip),%edx        # 310dc <CurrentFilterMask>
    6c49:	21 d0                	and    %edx,%eax
    6c4b:	66 85 c0             	test   %ax,%ax
    6c4e:	74 77                	je     6cc7 <xQueueReceive+0x2e4>
    6c50:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
    6c54:	48 89 c7             	mov    %rax,%rdi
    6c57:	e8 c5 c5 01 00       	callq  23221 <prvTraceGetQueueNumberHigh16>
    6c5c:	0f b7 15 79 a4 02 00 	movzwl 0x2a479(%rip),%edx        # 310dc <CurrentFilterMask>
    6c63:	21 d0                	and    %edx,%eax
    6c65:	66 85 c0             	test   %ax,%ax
    6c68:	74 5d                	je     6cc7 <xQueueReceive+0x2e4>
    6c6a:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
    6c6e:	48 89 c7             	mov    %rax,%rdi
    6c71:	e8 8d c5 01 00       	callq  23203 <prvTraceGetQueueNumberLow16>
    6c76:	44 0f b6 e0          	movzbl %al,%r12d
    6c7a:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
    6c7e:	48 89 c7             	mov    %rax,%rdi
    6c81:	e8 99 c4 01 00       	callq  2311f <prvTraceGetQueueType>
    6c86:	0f b6 c0             	movzbl %al,%eax
    6c89:	48 98                	cltq   
    6c8b:	48 8d 15 3e a4 02 00 	lea    0x2a43e(%rip),%rdx        # 310d0 <TraceQueueClassTable>
    6c92:	0f b6 04 10          	movzbl (%rax,%rdx,1),%eax
    6c96:	0f b6 d8             	movzbl %al,%ebx
    6c99:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
    6c9d:	48 89 c7             	mov    %rax,%rdi
    6ca0:	e8 7a c4 01 00       	callq  2311f <prvTraceGetQueueType>
    6ca5:	0f b6 c0             	movzbl %al,%eax
    6ca8:	48 98                	cltq   
    6caa:	48 8d 15 1f a4 02 00 	lea    0x2a41f(%rip),%rdx        # 310d0 <TraceQueueClassTable>
    6cb1:	0f b6 04 10          	movzbl (%rax,%rdx,1),%eax
    6cb5:	83 c0 50             	add    $0x50,%eax
    6cb8:	0f b6 c0             	movzbl %al,%eax
    6cbb:	44 89 e2             	mov    %r12d,%edx
    6cbe:	89 de                	mov    %ebx,%esi
    6cc0:	89 c7                	mov    %eax,%edi
    6cc2:	e8 8b e3 01 00       	callq  25052 <prvTraceStoreKernelCall>
    6cc7:	b8 00 00 00 00       	mov    $0x0,%eax
    6ccc:	e9 86 02 00 00       	jmpq   6f57 <xQueueReceive+0x574>
    6cd1:	48 83 7d c0 00       	cmpq   $0x0,-0x40(%rbp)
    6cd6:	75 14                	jne    6cec <xQueueReceive+0x309>
    6cd8:	48 8d 45 d0          	lea    -0x30(%rbp),%rax
    6cdc:	48 89 c7             	mov    %rax,%rdi
    6cdf:	e8 7e 82 00 00       	callq  ef62 <vTaskInternalSetTimeOutState>
    6ce4:	48 c7 45 c0 01 00 00 	movq   $0x1,-0x40(%rbp)
    6ceb:	00 
    6cec:	e8 0c c1 00 00       	callq  12dfd <vPortExitCritical>
    6cf1:	e8 4b 68 00 00       	callq  d541 <vTaskSuspendAll>
    6cf6:	e8 d4 c0 00 00       	callq  12dcf <vPortEnterCritical>
    6cfb:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
    6cff:	0f b6 80 88 00 00 00 	movzbl 0x88(%rax),%eax
    6d06:	3c ff                	cmp    $0xff,%al
    6d08:	75 0b                	jne    6d15 <xQueueReceive+0x332>
    6d0a:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
    6d0e:	c6 80 88 00 00 00 00 	movb   $0x0,0x88(%rax)
    6d15:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
    6d19:	0f b6 80 89 00 00 00 	movzbl 0x89(%rax),%eax
    6d20:	3c ff                	cmp    $0xff,%al
    6d22:	75 0b                	jne    6d2f <xQueueReceive+0x34c>
    6d24:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
    6d28:	c6 80 89 00 00 00 00 	movb   $0x0,0x89(%rax)
    6d2f:	e8 c9 c0 00 00       	callq  12dfd <vPortExitCritical>
    6d34:	48 8d 55 98          	lea    -0x68(%rbp),%rdx
    6d38:	48 8d 45 d0          	lea    -0x30(%rbp),%rax
    6d3c:	48 89 d6             	mov    %rdx,%rsi
    6d3f:	48 89 c7             	mov    %rax,%rdi
    6d42:	e8 47 82 00 00       	callq  ef8e <xTaskCheckForTimeOut>
    6d47:	48 85 c0             	test   %rax,%rax
    6d4a:	0f 85 4a 01 00 00    	jne    6e9a <xQueueReceive+0x4b7>
    6d50:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
    6d54:	48 89 c7             	mov    %rax,%rdi
    6d57:	e8 24 17 00 00       	callq  8480 <prvIsQueueEmpty>
    6d5c:	48 85 c0             	test   %rax,%rax
    6d5f:	0f 84 1f 01 00 00    	je     6e84 <xQueueReceive+0x4a1>
    6d65:	e8 f2 c8 01 00       	callq  2365c <prvTraceGetCurrentTaskHandle>
    6d6a:	48 89 c7             	mov    %rax,%rdi
    6d6d:	e8 e9 c3 01 00       	callq  2315b <prvTraceGetTaskNumberHigh16>
    6d72:	0f b7 15 63 a3 02 00 	movzwl 0x2a363(%rip),%edx        # 310dc <CurrentFilterMask>
    6d79:	21 d0                	and    %edx,%eax
    6d7b:	66 85 c0             	test   %ax,%ax
    6d7e:	74 77                	je     6df7 <xQueueReceive+0x414>
    6d80:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
    6d84:	48 89 c7             	mov    %rax,%rdi
    6d87:	e8 95 c4 01 00       	callq  23221 <prvTraceGetQueueNumberHigh16>
    6d8c:	0f b7 15 49 a3 02 00 	movzwl 0x2a349(%rip),%edx        # 310dc <CurrentFilterMask>
    6d93:	21 d0                	and    %edx,%eax
    6d95:	66 85 c0             	test   %ax,%ax
    6d98:	74 5d                	je     6df7 <xQueueReceive+0x414>
    6d9a:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
    6d9e:	48 89 c7             	mov    %rax,%rdi
    6da1:	e8 5d c4 01 00       	callq  23203 <prvTraceGetQueueNumberLow16>
    6da6:	44 0f b6 e0          	movzbl %al,%r12d
    6daa:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
    6dae:	48 89 c7             	mov    %rax,%rdi
    6db1:	e8 69 c3 01 00       	callq  2311f <prvTraceGetQueueType>
    6db6:	0f b6 c0             	movzbl %al,%eax
    6db9:	48 98                	cltq   
    6dbb:	48 8d 15 0e a3 02 00 	lea    0x2a30e(%rip),%rdx        # 310d0 <TraceQueueClassTable>
    6dc2:	0f b6 04 10          	movzbl (%rax,%rdx,1),%eax
    6dc6:	0f b6 d8             	movzbl %al,%ebx
    6dc9:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
    6dcd:	48 89 c7             	mov    %rax,%rdi
    6dd0:	e8 4a c3 01 00       	callq  2311f <prvTraceGetQueueType>
    6dd5:	0f b6 c0             	movzbl %al,%eax
    6dd8:	48 98                	cltq   
    6dda:	48 8d 15 ef a2 02 00 	lea    0x2a2ef(%rip),%rdx        # 310d0 <TraceQueueClassTable>
    6de1:	0f b6 04 10          	movzbl (%rax,%rdx,1),%eax
    6de5:	83 c0 68             	add    $0x68,%eax
    6de8:	0f b6 c0             	movzbl %al,%eax
    6deb:	44 89 e2             	mov    %r12d,%edx
    6dee:	89 de                	mov    %ebx,%esi
    6df0:	89 c7                	mov    %eax,%edi
    6df2:	e8 5b e2 01 00       	callq  25052 <prvTraceStoreKernelCall>
    6df7:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
    6dfb:	48 89 c7             	mov    %rax,%rdi
    6dfe:	e8 1c c3 01 00       	callq  2311f <prvTraceGetQueueType>
    6e03:	0f b6 c0             	movzbl %al,%eax
    6e06:	48 98                	cltq   
    6e08:	48 8d 15 c1 a2 02 00 	lea    0x2a2c1(%rip),%rdx        # 310d0 <TraceQueueClassTable>
    6e0f:	0f b6 04 10          	movzbl (%rax,%rdx,1),%eax
    6e13:	3c 02                	cmp    $0x2,%al
    6e15:	74 32                	je     6e49 <xQueueReceive+0x466>
    6e17:	e8 40 c8 01 00       	callq  2365c <prvTraceGetCurrentTaskHandle>
    6e1c:	48 89 c7             	mov    %rax,%rdi
    6e1f:	e8 37 c3 01 00       	callq  2315b <prvTraceGetTaskNumberHigh16>
    6e24:	0f b7 15 b1 a2 02 00 	movzwl 0x2a2b1(%rip),%edx        # 310dc <CurrentFilterMask>
    6e2b:	21 d0                	and    %edx,%eax
    6e2d:	66 85 c0             	test   %ax,%ax
    6e30:	74 17                	je     6e49 <xQueueReceive+0x466>
    6e32:	e8 25 c8 01 00       	callq  2365c <prvTraceGetCurrentTaskHandle>
    6e37:	48 89 c7             	mov    %rax,%rdi
    6e3a:	e8 fe c2 01 00       	callq  2313d <prvTraceGetTaskNumberLow16>
    6e3f:	0f b6 c0             	movzbl %al,%eax
    6e42:	89 c7                	mov    %eax,%edi
    6e44:	e8 7d eb 01 00       	callq  259c6 <prvTraceSetTaskInstanceFinished>
    6e49:	48 8b 45 98          	mov    -0x68(%rbp),%rax
    6e4d:	48 8b 55 c8          	mov    -0x38(%rbp),%rdx
    6e51:	48 83 c2 48          	add    $0x48,%rdx
    6e55:	48 89 c6             	mov    %rax,%rsi
    6e58:	48 89 d7             	mov    %rdx,%rdi
    6e5b:	e8 75 78 00 00       	callq  e6d5 <vTaskPlaceOnEventList>
    6e60:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
    6e64:	48 89 c7             	mov    %rax,%rdi
    6e67:	e8 1b 15 00 00       	callq  8387 <prvUnlockQueue>
    6e6c:	e8 ed 66 00 00       	callq  d55e <xTaskResumeAll>
    6e71:	48 85 c0             	test   %rax,%rax
    6e74:	0f 85 27 fc ff ff    	jne    6aa1 <xQueueReceive+0xbe>
    6e7a:	e8 f5 bf 00 00       	callq  12e74 <vPortYield>
    6e7f:	e9 1d fc ff ff       	jmpq   6aa1 <xQueueReceive+0xbe>
    6e84:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
    6e88:	48 89 c7             	mov    %rax,%rdi
    6e8b:	e8 f7 14 00 00       	callq  8387 <prvUnlockQueue>
    6e90:	e8 c9 66 00 00       	callq  d55e <xTaskResumeAll>
    6e95:	e9 07 fc ff ff       	jmpq   6aa1 <xQueueReceive+0xbe>
    6e9a:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
    6e9e:	48 89 c7             	mov    %rax,%rdi
    6ea1:	e8 e1 14 00 00       	callq  8387 <prvUnlockQueue>
    6ea6:	e8 b3 66 00 00       	callq  d55e <xTaskResumeAll>
    6eab:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
    6eaf:	48 89 c7             	mov    %rax,%rdi
    6eb2:	e8 c9 15 00 00       	callq  8480 <prvIsQueueEmpty>
    6eb7:	48 85 c0             	test   %rax,%rax
    6eba:	0f 84 e1 fb ff ff    	je     6aa1 <xQueueReceive+0xbe>
    6ec0:	e8 97 c7 01 00       	callq  2365c <prvTraceGetCurrentTaskHandle>
    6ec5:	48 89 c7             	mov    %rax,%rdi
    6ec8:	e8 8e c2 01 00       	callq  2315b <prvTraceGetTaskNumberHigh16>
    6ecd:	0f b7 15 08 a2 02 00 	movzwl 0x2a208(%rip),%edx        # 310dc <CurrentFilterMask>
    6ed4:	21 d0                	and    %edx,%eax
    6ed6:	66 85 c0             	test   %ax,%ax
    6ed9:	74 77                	je     6f52 <xQueueReceive+0x56f>
    6edb:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
    6edf:	48 89 c7             	mov    %rax,%rdi
    6ee2:	e8 3a c3 01 00       	callq  23221 <prvTraceGetQueueNumberHigh16>
    6ee7:	0f b7 15 ee a1 02 00 	movzwl 0x2a1ee(%rip),%edx        # 310dc <CurrentFilterMask>
    6eee:	21 d0                	and    %edx,%eax
    6ef0:	66 85 c0             	test   %ax,%ax
    6ef3:	74 5d                	je     6f52 <xQueueReceive+0x56f>
    6ef5:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
    6ef9:	48 89 c7             	mov    %rax,%rdi
    6efc:	e8 02 c3 01 00       	callq  23203 <prvTraceGetQueueNumberLow16>
    6f01:	44 0f b6 e0          	movzbl %al,%r12d
    6f05:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
    6f09:	48 89 c7             	mov    %rax,%rdi
    6f0c:	e8 0e c2 01 00       	callq  2311f <prvTraceGetQueueType>
    6f11:	0f b6 c0             	movzbl %al,%eax
    6f14:	48 98                	cltq   
    6f16:	48 8d 15 b3 a1 02 00 	lea    0x2a1b3(%rip),%rdx        # 310d0 <TraceQueueClassTable>
    6f1d:	0f b6 04 10          	movzbl (%rax,%rdx,1),%eax
    6f21:	0f b6 d8             	movzbl %al,%ebx
    6f24:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
    6f28:	48 89 c7             	mov    %rax,%rdi
    6f2b:	e8 ef c1 01 00       	callq  2311f <prvTraceGetQueueType>
    6f30:	0f b6 c0             	movzbl %al,%eax
    6f33:	48 98                	cltq   
    6f35:	48 8d 15 94 a1 02 00 	lea    0x2a194(%rip),%rdx        # 310d0 <TraceQueueClassTable>
    6f3c:	0f b6 04 10          	movzbl (%rax,%rdx,1),%eax
    6f40:	83 c0 50             	add    $0x50,%eax
    6f43:	0f b6 c0             	movzbl %al,%eax
    6f46:	44 89 e2             	mov    %r12d,%edx
    6f49:	89 de                	mov    %ebx,%esi
    6f4b:	89 c7                	mov    %eax,%edi
    6f4d:	e8 00 e1 01 00       	callq  25052 <prvTraceStoreKernelCall>
    6f52:	b8 00 00 00 00       	mov    $0x0,%eax
    6f57:	48 8b 4d e8          	mov    -0x18(%rbp),%rcx
    6f5b:	64 48 33 0c 25 28 00 	xor    %fs:0x28,%rcx
    6f62:	00 00 
    6f64:	74 05                	je     6f6b <xQueueReceive+0x588>
    6f66:	e8 65 b5 ff ff       	callq  24d0 <__stack_chk_fail@plt>
    6f6b:	48 83 c4 60          	add    $0x60,%rsp
    6f6f:	5b                   	pop    %rbx
    6f70:	41 5c                	pop    %r12
    6f72:	5d                   	pop    %rbp
    6f73:	c3                   	retq   

0000000000006f74 <xQueueSemaphoreTake>:
    6f74:	f3 0f 1e fa          	endbr64 
    6f78:	55                   	push   %rbp
    6f79:	48 89 e5             	mov    %rsp,%rbp
    6f7c:	41 54                	push   %r12
    6f7e:	53                   	push   %rbx
    6f7f:	48 83 ec 60          	sub    $0x60,%rsp
    6f83:	48 89 7d 98          	mov    %rdi,-0x68(%rbp)
    6f87:	48 89 75 90          	mov    %rsi,-0x70(%rbp)
    6f8b:	64 48 8b 04 25 28 00 	mov    %fs:0x28,%rax
    6f92:	00 00 
    6f94:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
    6f98:	31 c0                	xor    %eax,%eax
    6f9a:	48 c7 45 b8 00 00 00 	movq   $0x0,-0x48(%rbp)
    6fa1:	00 
    6fa2:	48 8b 45 98          	mov    -0x68(%rbp),%rax
    6fa6:	48 89 45 c0          	mov    %rax,-0x40(%rbp)
    6faa:	48 c7 45 c8 00 00 00 	movq   $0x0,-0x38(%rbp)
    6fb1:	00 
    6fb2:	48 83 7d c0 00       	cmpq   $0x0,-0x40(%rbp)
    6fb7:	75 11                	jne    6fca <xQueueSemaphoreTake+0x56>
    6fb9:	be e3 05 00 00       	mov    $0x5e3,%esi
    6fbe:	48 8d 3d 63 08 02 00 	lea    0x20863(%rip),%rdi        # 27828 <_IO_stdin_used+0x828>
    6fc5:	e8 42 cd ff ff       	callq  3d0c <vAssertCalled>
    6fca:	48 8b 45 c0          	mov    -0x40(%rbp),%rax
    6fce:	48 8b 80 80 00 00 00 	mov    0x80(%rax),%rax
    6fd5:	48 85 c0             	test   %rax,%rax
    6fd8:	74 11                	je     6feb <xQueueSemaphoreTake+0x77>
    6fda:	be e7 05 00 00       	mov    $0x5e7,%esi
    6fdf:	48 8d 3d 42 08 02 00 	lea    0x20842(%rip),%rdi        # 27828 <_IO_stdin_used+0x828>
    6fe6:	e8 21 cd ff ff       	callq  3d0c <vAssertCalled>
    6feb:	e8 a7 86 00 00       	callq  f697 <xTaskGetSchedulerState>
    6ff0:	48 85 c0             	test   %rax,%rax
    6ff3:	75 09                	jne    6ffe <xQueueSemaphoreTake+0x8a>
    6ff5:	48 8b 45 90          	mov    -0x70(%rbp),%rax
    6ff9:	48 85 c0             	test   %rax,%rax
    6ffc:	75 07                	jne    7005 <xQueueSemaphoreTake+0x91>
    6ffe:	b8 01 00 00 00       	mov    $0x1,%eax
    7003:	eb 05                	jmp    700a <xQueueSemaphoreTake+0x96>
    7005:	b8 00 00 00 00       	mov    $0x0,%eax
    700a:	85 c0                	test   %eax,%eax
    700c:	75 11                	jne    701f <xQueueSemaphoreTake+0xab>
    700e:	be ec 05 00 00       	mov    $0x5ec,%esi
    7013:	48 8d 3d 0e 08 02 00 	lea    0x2080e(%rip),%rdi        # 27828 <_IO_stdin_used+0x828>
    701a:	e8 ed cc ff ff       	callq  3d0c <vAssertCalled>
    701f:	e8 ab bd 00 00       	callq  12dcf <vPortEnterCritical>
    7024:	48 8b 45 c0          	mov    -0x40(%rbp),%rax
    7028:	48 8b 40 70          	mov    0x70(%rax),%rax
    702c:	48 89 45 b0          	mov    %rax,-0x50(%rbp)
    7030:	48 83 7d b0 00       	cmpq   $0x0,-0x50(%rbp)
    7035:	0f 84 6c 01 00 00    	je     71a7 <xQueueSemaphoreTake+0x233>
    703b:	e8 1c c6 01 00       	callq  2365c <prvTraceGetCurrentTaskHandle>
    7040:	48 89 c7             	mov    %rax,%rdi
    7043:	e8 13 c1 01 00       	callq  2315b <prvTraceGetTaskNumberHigh16>
    7048:	0f b7 15 8d a0 02 00 	movzwl 0x2a08d(%rip),%edx        # 310dc <CurrentFilterMask>
    704f:	21 d0                	and    %edx,%eax
    7051:	66 85 c0             	test   %ax,%ax
    7054:	74 77                	je     70cd <xQueueSemaphoreTake+0x159>
    7056:	48 8b 45 c0          	mov    -0x40(%rbp),%rax
    705a:	48 89 c7             	mov    %rax,%rdi
    705d:	e8 bf c1 01 00       	callq  23221 <prvTraceGetQueueNumberHigh16>
    7062:	0f b7 15 73 a0 02 00 	movzwl 0x2a073(%rip),%edx        # 310dc <CurrentFilterMask>
    7069:	21 d0                	and    %edx,%eax
    706b:	66 85 c0             	test   %ax,%ax
    706e:	74 5d                	je     70cd <xQueueSemaphoreTake+0x159>
    7070:	48 8b 45 c0          	mov    -0x40(%rbp),%rax
    7074:	48 89 c7             	mov    %rax,%rdi
    7077:	e8 87 c1 01 00       	callq  23203 <prvTraceGetQueueNumberLow16>
    707c:	44 0f b6 e0          	movzbl %al,%r12d
    7080:	48 8b 45 c0          	mov    -0x40(%rbp),%rax
    7084:	48 89 c7             	mov    %rax,%rdi
    7087:	e8 93 c0 01 00       	callq  2311f <prvTraceGetQueueType>
    708c:	0f b6 c0             	movzbl %al,%eax
    708f:	48 98                	cltq   
    7091:	48 8d 15 38 a0 02 00 	lea    0x2a038(%rip),%rdx        # 310d0 <TraceQueueClassTable>
    7098:	0f b6 04 10          	movzbl (%rax,%rdx,1),%eax
    709c:	0f b6 d8             	movzbl %al,%ebx
    709f:	48 8b 45 c0          	mov    -0x40(%rbp),%rax
    70a3:	48 89 c7             	mov    %rax,%rdi
    70a6:	e8 74 c0 01 00       	callq  2311f <prvTraceGetQueueType>
    70ab:	0f b6 c0             	movzbl %al,%eax
    70ae:	48 98                	cltq   
    70b0:	48 8d 15 19 a0 02 00 	lea    0x2a019(%rip),%rdx        # 310d0 <TraceQueueClassTable>
    70b7:	0f b6 04 10          	movzbl (%rax,%rdx,1),%eax
    70bb:	83 c0 28             	add    $0x28,%eax
    70be:	0f b6 c0             	movzbl %al,%eax
    70c1:	44 89 e2             	mov    %r12d,%edx
    70c4:	89 de                	mov    %ebx,%esi
    70c6:	89 c7                	mov    %eax,%edi
    70c8:	e8 85 df 01 00       	callq  25052 <prvTraceStoreKernelCall>
    70cd:	48 8b 45 c0          	mov    -0x40(%rbp),%rax
    70d1:	48 89 c7             	mov    %rax,%rdi
    70d4:	e8 46 c0 01 00       	callq  2311f <prvTraceGetQueueType>
    70d9:	0f b6 c0             	movzbl %al,%eax
    70dc:	48 98                	cltq   
    70de:	48 8d 15 eb 9f 02 00 	lea    0x29feb(%rip),%rdx        # 310d0 <TraceQueueClassTable>
    70e5:	0f b6 04 10          	movzbl (%rax,%rdx,1),%eax
    70e9:	3c 02                	cmp    $0x2,%al
    70eb:	75 12                	jne    70ff <xQueueSemaphoreTake+0x18b>
    70ed:	e8 6a c5 01 00       	callq  2365c <prvTraceGetCurrentTaskHandle>
    70f2:	48 89 c7             	mov    %rax,%rdi
    70f5:	e8 43 c0 01 00       	callq  2313d <prvTraceGetTaskNumberLow16>
    70fa:	0f b6 d8             	movzbl %al,%ebx
    70fd:	eb 0e                	jmp    710d <xQueueSemaphoreTake+0x199>
    70ff:	48 8b 45 c0          	mov    -0x40(%rbp),%rax
    7103:	48 8b 40 70          	mov    0x70(%rax),%rax
    7107:	83 e8 01             	sub    $0x1,%eax
    710a:	0f b6 d8             	movzbl %al,%ebx
    710d:	48 8b 45 c0          	mov    -0x40(%rbp),%rax
    7111:	48 89 c7             	mov    %rax,%rdi
    7114:	e8 ea c0 01 00       	callq  23203 <prvTraceGetQueueNumberLow16>
    7119:	44 0f b6 e0          	movzbl %al,%r12d
    711d:	48 8b 45 c0          	mov    -0x40(%rbp),%rax
    7121:	48 89 c7             	mov    %rax,%rdi
    7124:	e8 f6 bf 01 00       	callq  2311f <prvTraceGetQueueType>
    7129:	0f b6 c0             	movzbl %al,%eax
    712c:	48 98                	cltq   
    712e:	48 8d 15 9b 9f 02 00 	lea    0x29f9b(%rip),%rdx        # 310d0 <TraceQueueClassTable>
    7135:	0f b6 04 10          	movzbl (%rax,%rdx,1),%eax
    7139:	0f b6 c0             	movzbl %al,%eax
    713c:	89 da                	mov    %ebx,%edx
    713e:	44 89 e6             	mov    %r12d,%esi
    7141:	89 c7                	mov    %eax,%edi
    7143:	e8 44 e7 01 00       	callq  2588c <prvTraceSetObjectState>
    7148:	48 8b 45 b0          	mov    -0x50(%rbp),%rax
    714c:	48 8d 50 ff          	lea    -0x1(%rax),%rdx
    7150:	48 8b 45 c0          	mov    -0x40(%rbp),%rax
    7154:	48 89 50 70          	mov    %rdx,0x70(%rax)
    7158:	48 8b 45 c0          	mov    -0x40(%rbp),%rax
    715c:	48 8b 00             	mov    (%rax),%rax
    715f:	48 85 c0             	test   %rax,%rax
    7162:	75 0d                	jne    7171 <xQueueSemaphoreTake+0x1fd>
    7164:	e8 07 8e 00 00       	callq  ff70 <pvTaskIncrementMutexHeldCount>
    7169:	48 8b 55 c0          	mov    -0x40(%rbp),%rdx
    716d:	48 89 42 10          	mov    %rax,0x10(%rdx)
    7171:	48 8b 45 c0          	mov    -0x40(%rbp),%rax
    7175:	48 8b 40 20          	mov    0x20(%rax),%rax
    7179:	48 85 c0             	test   %rax,%rax
    717c:	74 1a                	je     7198 <xQueueSemaphoreTake+0x224>
    717e:	48 8b 45 c0          	mov    -0x40(%rbp),%rax
    7182:	48 83 c0 20          	add    $0x20,%rax
    7186:	48 89 c7             	mov    %rax,%rdi
    7189:	e8 e0 77 00 00       	callq  e96e <xTaskRemoveFromEventList>
    718e:	48 85 c0             	test   %rax,%rax
    7191:	74 05                	je     7198 <xQueueSemaphoreTake+0x224>
    7193:	e8 dc bc 00 00       	callq  12e74 <vPortYield>
    7198:	e8 60 bc 00 00       	callq  12dfd <vPortExitCritical>
    719d:	b8 01 00 00 00       	mov    $0x1,%eax
    71a2:	e9 ae 03 00 00       	jmpq   7555 <xQueueSemaphoreTake+0x5e1>
    71a7:	48 8b 45 90          	mov    -0x70(%rbp),%rax
    71ab:	48 85 c0             	test   %rax,%rax
    71ae:	0f 85 b9 00 00 00    	jne    726d <xQueueSemaphoreTake+0x2f9>
    71b4:	48 83 7d c8 00       	cmpq   $0x0,-0x38(%rbp)
    71b9:	74 11                	je     71cc <xQueueSemaphoreTake+0x258>
    71bb:	be 32 06 00 00       	mov    $0x632,%esi
    71c0:	48 8d 3d 61 06 02 00 	lea    0x20661(%rip),%rdi        # 27828 <_IO_stdin_used+0x828>
    71c7:	e8 40 cb ff ff       	callq  3d0c <vAssertCalled>
    71cc:	e8 2c bc 00 00       	callq  12dfd <vPortExitCritical>
    71d1:	e8 86 c4 01 00       	callq  2365c <prvTraceGetCurrentTaskHandle>
    71d6:	48 89 c7             	mov    %rax,%rdi
    71d9:	e8 7d bf 01 00       	callq  2315b <prvTraceGetTaskNumberHigh16>
    71de:	0f b7 15 f7 9e 02 00 	movzwl 0x29ef7(%rip),%edx        # 310dc <CurrentFilterMask>
    71e5:	21 d0                	and    %edx,%eax
    71e7:	66 85 c0             	test   %ax,%ax
    71ea:	74 77                	je     7263 <xQueueSemaphoreTake+0x2ef>
    71ec:	48 8b 45 c0          	mov    -0x40(%rbp),%rax
    71f0:	48 89 c7             	mov    %rax,%rdi
    71f3:	e8 29 c0 01 00       	callq  23221 <prvTraceGetQueueNumberHigh16>
    71f8:	0f b7 15 dd 9e 02 00 	movzwl 0x29edd(%rip),%edx        # 310dc <CurrentFilterMask>
    71ff:	21 d0                	and    %edx,%eax
    7201:	66 85 c0             	test   %ax,%ax
    7204:	74 5d                	je     7263 <xQueueSemaphoreTake+0x2ef>
    7206:	48 8b 45 c0          	mov    -0x40(%rbp),%rax
    720a:	48 89 c7             	mov    %rax,%rdi
    720d:	e8 f1 bf 01 00       	callq  23203 <prvTraceGetQueueNumberLow16>
    7212:	44 0f b6 e0          	movzbl %al,%r12d
    7216:	48 8b 45 c0          	mov    -0x40(%rbp),%rax
    721a:	48 89 c7             	mov    %rax,%rdi
    721d:	e8 fd be 01 00       	callq  2311f <prvTraceGetQueueType>
    7222:	0f b6 c0             	movzbl %al,%eax
    7225:	48 98                	cltq   
    7227:	48 8d 15 a2 9e 02 00 	lea    0x29ea2(%rip),%rdx        # 310d0 <TraceQueueClassTable>
    722e:	0f b6 04 10          	movzbl (%rax,%rdx,1),%eax
    7232:	0f b6 d8             	movzbl %al,%ebx
    7235:	48 8b 45 c0          	mov    -0x40(%rbp),%rax
    7239:	48 89 c7             	mov    %rax,%rdi
    723c:	e8 de be 01 00       	callq  2311f <prvTraceGetQueueType>
    7241:	0f b6 c0             	movzbl %al,%eax
    7244:	48 98                	cltq   
    7246:	48 8d 15 83 9e 02 00 	lea    0x29e83(%rip),%rdx        # 310d0 <TraceQueueClassTable>
    724d:	0f b6 04 10          	movzbl (%rax,%rdx,1),%eax
    7251:	83 c0 50             	add    $0x50,%eax
    7254:	0f b6 c0             	movzbl %al,%eax
    7257:	44 89 e2             	mov    %r12d,%edx
    725a:	89 de                	mov    %ebx,%esi
    725c:	89 c7                	mov    %eax,%edi
    725e:	e8 ef dd 01 00       	callq  25052 <prvTraceStoreKernelCall>
    7263:	b8 00 00 00 00       	mov    $0x0,%eax
    7268:	e9 e8 02 00 00       	jmpq   7555 <xQueueSemaphoreTake+0x5e1>
    726d:	48 83 7d b8 00       	cmpq   $0x0,-0x48(%rbp)
    7272:	75 14                	jne    7288 <xQueueSemaphoreTake+0x314>
    7274:	48 8d 45 d0          	lea    -0x30(%rbp),%rax
    7278:	48 89 c7             	mov    %rax,%rdi
    727b:	e8 e2 7c 00 00       	callq  ef62 <vTaskInternalSetTimeOutState>
    7280:	48 c7 45 b8 01 00 00 	movq   $0x1,-0x48(%rbp)
    7287:	00 
    7288:	e8 70 bb 00 00       	callq  12dfd <vPortExitCritical>
    728d:	e8 af 62 00 00       	callq  d541 <vTaskSuspendAll>
    7292:	e8 38 bb 00 00       	callq  12dcf <vPortEnterCritical>
    7297:	48 8b 45 c0          	mov    -0x40(%rbp),%rax
    729b:	0f b6 80 88 00 00 00 	movzbl 0x88(%rax),%eax
    72a2:	3c ff                	cmp    $0xff,%al
    72a4:	75 0b                	jne    72b1 <xQueueSemaphoreTake+0x33d>
    72a6:	48 8b 45 c0          	mov    -0x40(%rbp),%rax
    72aa:	c6 80 88 00 00 00 00 	movb   $0x0,0x88(%rax)
    72b1:	48 8b 45 c0          	mov    -0x40(%rbp),%rax
    72b5:	0f b6 80 89 00 00 00 	movzbl 0x89(%rax),%eax
    72bc:	3c ff                	cmp    $0xff,%al
    72be:	75 0b                	jne    72cb <xQueueSemaphoreTake+0x357>
    72c0:	48 8b 45 c0          	mov    -0x40(%rbp),%rax
    72c4:	c6 80 89 00 00 00 00 	movb   $0x0,0x89(%rax)
    72cb:	e8 2d bb 00 00       	callq  12dfd <vPortExitCritical>
    72d0:	48 8d 55 90          	lea    -0x70(%rbp),%rdx
    72d4:	48 8d 45 d0          	lea    -0x30(%rbp),%rax
    72d8:	48 89 d6             	mov    %rdx,%rsi
    72db:	48 89 c7             	mov    %rax,%rdi
    72de:	e8 ab 7c 00 00       	callq  ef8e <xTaskCheckForTimeOut>
    72e3:	48 85 c0             	test   %rax,%rax
    72e6:	0f 85 74 01 00 00    	jne    7460 <xQueueSemaphoreTake+0x4ec>
    72ec:	48 8b 45 c0          	mov    -0x40(%rbp),%rax
    72f0:	48 89 c7             	mov    %rax,%rdi
    72f3:	e8 88 11 00 00       	callq  8480 <prvIsQueueEmpty>
    72f8:	48 85 c0             	test   %rax,%rax
    72fb:	0f 84 49 01 00 00    	je     744a <xQueueSemaphoreTake+0x4d6>
    7301:	e8 56 c3 01 00       	callq  2365c <prvTraceGetCurrentTaskHandle>
    7306:	48 89 c7             	mov    %rax,%rdi
    7309:	e8 4d be 01 00       	callq  2315b <prvTraceGetTaskNumberHigh16>
    730e:	0f b7 15 c7 9d 02 00 	movzwl 0x29dc7(%rip),%edx        # 310dc <CurrentFilterMask>
    7315:	21 d0                	and    %edx,%eax
    7317:	66 85 c0             	test   %ax,%ax
    731a:	74 77                	je     7393 <xQueueSemaphoreTake+0x41f>
    731c:	48 8b 45 c0          	mov    -0x40(%rbp),%rax
    7320:	48 89 c7             	mov    %rax,%rdi
    7323:	e8 f9 be 01 00       	callq  23221 <prvTraceGetQueueNumberHigh16>
    7328:	0f b7 15 ad 9d 02 00 	movzwl 0x29dad(%rip),%edx        # 310dc <CurrentFilterMask>
    732f:	21 d0                	and    %edx,%eax
    7331:	66 85 c0             	test   %ax,%ax
    7334:	74 5d                	je     7393 <xQueueSemaphoreTake+0x41f>
    7336:	48 8b 45 c0          	mov    -0x40(%rbp),%rax
    733a:	48 89 c7             	mov    %rax,%rdi
    733d:	e8 c1 be 01 00       	callq  23203 <prvTraceGetQueueNumberLow16>
    7342:	44 0f b6 e0          	movzbl %al,%r12d
    7346:	48 8b 45 c0          	mov    -0x40(%rbp),%rax
    734a:	48 89 c7             	mov    %rax,%rdi
    734d:	e8 cd bd 01 00       	callq  2311f <prvTraceGetQueueType>
    7352:	0f b6 c0             	movzbl %al,%eax
    7355:	48 98                	cltq   
    7357:	48 8d 15 72 9d 02 00 	lea    0x29d72(%rip),%rdx        # 310d0 <TraceQueueClassTable>
    735e:	0f b6 04 10          	movzbl (%rax,%rdx,1),%eax
    7362:	0f b6 d8             	movzbl %al,%ebx
    7365:	48 8b 45 c0          	mov    -0x40(%rbp),%rax
    7369:	48 89 c7             	mov    %rax,%rdi
    736c:	e8 ae bd 01 00       	callq  2311f <prvTraceGetQueueType>
    7371:	0f b6 c0             	movzbl %al,%eax
    7374:	48 98                	cltq   
    7376:	48 8d 15 53 9d 02 00 	lea    0x29d53(%rip),%rdx        # 310d0 <TraceQueueClassTable>
    737d:	0f b6 04 10          	movzbl (%rax,%rdx,1),%eax
    7381:	83 c0 68             	add    $0x68,%eax
    7384:	0f b6 c0             	movzbl %al,%eax
    7387:	44 89 e2             	mov    %r12d,%edx
    738a:	89 de                	mov    %ebx,%esi
    738c:	89 c7                	mov    %eax,%edi
    738e:	e8 bf dc 01 00       	callq  25052 <prvTraceStoreKernelCall>
    7393:	48 8b 45 c0          	mov    -0x40(%rbp),%rax
    7397:	48 89 c7             	mov    %rax,%rdi
    739a:	e8 80 bd 01 00       	callq  2311f <prvTraceGetQueueType>
    739f:	0f b6 c0             	movzbl %al,%eax
    73a2:	48 98                	cltq   
    73a4:	48 8d 15 25 9d 02 00 	lea    0x29d25(%rip),%rdx        # 310d0 <TraceQueueClassTable>
    73ab:	0f b6 04 10          	movzbl (%rax,%rdx,1),%eax
    73af:	3c 02                	cmp    $0x2,%al
    73b1:	74 32                	je     73e5 <xQueueSemaphoreTake+0x471>
    73b3:	e8 a4 c2 01 00       	callq  2365c <prvTraceGetCurrentTaskHandle>
    73b8:	48 89 c7             	mov    %rax,%rdi
    73bb:	e8 9b bd 01 00       	callq  2315b <prvTraceGetTaskNumberHigh16>
    73c0:	0f b7 15 15 9d 02 00 	movzwl 0x29d15(%rip),%edx        # 310dc <CurrentFilterMask>
    73c7:	21 d0                	and    %edx,%eax
    73c9:	66 85 c0             	test   %ax,%ax
    73cc:	74 17                	je     73e5 <xQueueSemaphoreTake+0x471>
    73ce:	e8 89 c2 01 00       	callq  2365c <prvTraceGetCurrentTaskHandle>
    73d3:	48 89 c7             	mov    %rax,%rdi
    73d6:	e8 62 bd 01 00       	callq  2313d <prvTraceGetTaskNumberLow16>
    73db:	0f b6 c0             	movzbl %al,%eax
    73de:	89 c7                	mov    %eax,%edi
    73e0:	e8 e1 e5 01 00       	callq  259c6 <prvTraceSetTaskInstanceFinished>
    73e5:	48 8b 45 c0          	mov    -0x40(%rbp),%rax
    73e9:	48 8b 00             	mov    (%rax),%rax
    73ec:	48 85 c0             	test   %rax,%rax
    73ef:	75 1e                	jne    740f <xQueueSemaphoreTake+0x49b>
    73f1:	e8 d9 b9 00 00       	callq  12dcf <vPortEnterCritical>
    73f6:	48 8b 45 c0          	mov    -0x40(%rbp),%rax
    73fa:	48 8b 40 10          	mov    0x10(%rax),%rax
    73fe:	48 89 c7             	mov    %rax,%rdi
    7401:	e8 d3 82 00 00       	callq  f6d9 <xTaskPriorityInherit>
    7406:	48 89 45 c8          	mov    %rax,-0x38(%rbp)
    740a:	e8 ee b9 00 00       	callq  12dfd <vPortExitCritical>
    740f:	48 8b 45 90          	mov    -0x70(%rbp),%rax
    7413:	48 8b 55 c0          	mov    -0x40(%rbp),%rdx
    7417:	48 83 c2 48          	add    $0x48,%rdx
    741b:	48 89 c6             	mov    %rax,%rsi
    741e:	48 89 d7             	mov    %rdx,%rdi
    7421:	e8 af 72 00 00       	callq  e6d5 <vTaskPlaceOnEventList>
    7426:	48 8b 45 c0          	mov    -0x40(%rbp),%rax
    742a:	48 89 c7             	mov    %rax,%rdi
    742d:	e8 55 0f 00 00       	callq  8387 <prvUnlockQueue>
    7432:	e8 27 61 00 00       	callq  d55e <xTaskResumeAll>
    7437:	48 85 c0             	test   %rax,%rax
    743a:	0f 85 df fb ff ff    	jne    701f <xQueueSemaphoreTake+0xab>
    7440:	e8 2f ba 00 00       	callq  12e74 <vPortYield>
    7445:	e9 d5 fb ff ff       	jmpq   701f <xQueueSemaphoreTake+0xab>
    744a:	48 8b 45 c0          	mov    -0x40(%rbp),%rax
    744e:	48 89 c7             	mov    %rax,%rdi
    7451:	e8 31 0f 00 00       	callq  8387 <prvUnlockQueue>
    7456:	e8 03 61 00 00       	callq  d55e <xTaskResumeAll>
    745b:	e9 bf fb ff ff       	jmpq   701f <xQueueSemaphoreTake+0xab>
    7460:	48 8b 45 c0          	mov    -0x40(%rbp),%rax
    7464:	48 89 c7             	mov    %rax,%rdi
    7467:	e8 1b 0f 00 00       	callq  8387 <prvUnlockQueue>
    746c:	e8 ed 60 00 00       	callq  d55e <xTaskResumeAll>
    7471:	48 8b 45 c0          	mov    -0x40(%rbp),%rax
    7475:	48 89 c7             	mov    %rax,%rdi
    7478:	e8 03 10 00 00       	callq  8480 <prvIsQueueEmpty>
    747d:	48 85 c0             	test   %rax,%rax
    7480:	0f 84 99 fb ff ff    	je     701f <xQueueSemaphoreTake+0xab>
    7486:	48 83 7d c8 00       	cmpq   $0x0,-0x38(%rbp)
    748b:	74 31                	je     74be <xQueueSemaphoreTake+0x54a>
    748d:	e8 3d b9 00 00       	callq  12dcf <vPortEnterCritical>
    7492:	48 8b 45 c0          	mov    -0x40(%rbp),%rax
    7496:	48 89 c7             	mov    %rax,%rdi
    7499:	e8 95 0c 00 00       	callq  8133 <prvGetDisinheritPriorityAfterTimeout>
    749e:	48 89 45 a8          	mov    %rax,-0x58(%rbp)
    74a2:	48 8b 45 c0          	mov    -0x40(%rbp),%rax
    74a6:	48 8b 40 10          	mov    0x10(%rax),%rax
    74aa:	48 8b 55 a8          	mov    -0x58(%rbp),%rdx
    74ae:	48 89 d6             	mov    %rdx,%rsi
    74b1:	48 89 c7             	mov    %rax,%rdi
    74b4:	e8 91 87 00 00       	callq  fc4a <vTaskPriorityDisinheritAfterTimeout>
    74b9:	e8 3f b9 00 00       	callq  12dfd <vPortExitCritical>
    74be:	e8 99 c1 01 00       	callq  2365c <prvTraceGetCurrentTaskHandle>
    74c3:	48 89 c7             	mov    %rax,%rdi
    74c6:	e8 90 bc 01 00       	callq  2315b <prvTraceGetTaskNumberHigh16>
    74cb:	0f b7 15 0a 9c 02 00 	movzwl 0x29c0a(%rip),%edx        # 310dc <CurrentFilterMask>
    74d2:	21 d0                	and    %edx,%eax
    74d4:	66 85 c0             	test   %ax,%ax
    74d7:	74 77                	je     7550 <xQueueSemaphoreTake+0x5dc>
    74d9:	48 8b 45 c0          	mov    -0x40(%rbp),%rax
    74dd:	48 89 c7             	mov    %rax,%rdi
    74e0:	e8 3c bd 01 00       	callq  23221 <prvTraceGetQueueNumberHigh16>
    74e5:	0f b7 15 f0 9b 02 00 	movzwl 0x29bf0(%rip),%edx        # 310dc <CurrentFilterMask>
    74ec:	21 d0                	and    %edx,%eax
    74ee:	66 85 c0             	test   %ax,%ax
    74f1:	74 5d                	je     7550 <xQueueSemaphoreTake+0x5dc>
    74f3:	48 8b 45 c0          	mov    -0x40(%rbp),%rax
    74f7:	48 89 c7             	mov    %rax,%rdi
    74fa:	e8 04 bd 01 00       	callq  23203 <prvTraceGetQueueNumberLow16>
    74ff:	44 0f b6 e0          	movzbl %al,%r12d
    7503:	48 8b 45 c0          	mov    -0x40(%rbp),%rax
    7507:	48 89 c7             	mov    %rax,%rdi
    750a:	e8 10 bc 01 00       	callq  2311f <prvTraceGetQueueType>
    750f:	0f b6 c0             	movzbl %al,%eax
    7512:	48 98                	cltq   
    7514:	48 8d 15 b5 9b 02 00 	lea    0x29bb5(%rip),%rdx        # 310d0 <TraceQueueClassTable>
    751b:	0f b6 04 10          	movzbl (%rax,%rdx,1),%eax
    751f:	0f b6 d8             	movzbl %al,%ebx
    7522:	48 8b 45 c0          	mov    -0x40(%rbp),%rax
    7526:	48 89 c7             	mov    %rax,%rdi
    7529:	e8 f1 bb 01 00       	callq  2311f <prvTraceGetQueueType>
    752e:	0f b6 c0             	movzbl %al,%eax
    7531:	48 98                	cltq   
    7533:	48 8d 15 96 9b 02 00 	lea    0x29b96(%rip),%rdx        # 310d0 <TraceQueueClassTable>
    753a:	0f b6 04 10          	movzbl (%rax,%rdx,1),%eax
    753e:	83 c0 50             	add    $0x50,%eax
    7541:	0f b6 c0             	movzbl %al,%eax
    7544:	44 89 e2             	mov    %r12d,%edx
    7547:	89 de                	mov    %ebx,%esi
    7549:	89 c7                	mov    %eax,%edi
    754b:	e8 02 db 01 00       	callq  25052 <prvTraceStoreKernelCall>
    7550:	b8 00 00 00 00       	mov    $0x0,%eax
    7555:	48 8b 4d e8          	mov    -0x18(%rbp),%rcx
    7559:	64 48 33 0c 25 28 00 	xor    %fs:0x28,%rcx
    7560:	00 00 
    7562:	74 05                	je     7569 <xQueueSemaphoreTake+0x5f5>
    7564:	e8 67 af ff ff       	callq  24d0 <__stack_chk_fail@plt>
    7569:	48 83 c4 60          	add    $0x60,%rsp
    756d:	5b                   	pop    %rbx
    756e:	41 5c                	pop    %r12
    7570:	5d                   	pop    %rbp
    7571:	c3                   	retq   

0000000000007572 <xQueuePeek>:
    7572:	f3 0f 1e fa          	endbr64 
    7576:	55                   	push   %rbp
    7577:	48 89 e5             	mov    %rsp,%rbp
    757a:	41 54                	push   %r12
    757c:	53                   	push   %rbx
    757d:	48 83 ec 60          	sub    $0x60,%rsp
    7581:	48 89 7d a8          	mov    %rdi,-0x58(%rbp)
    7585:	48 89 75 a0          	mov    %rsi,-0x60(%rbp)
    7589:	48 89 55 98          	mov    %rdx,-0x68(%rbp)
    758d:	64 48 8b 04 25 28 00 	mov    %fs:0x28,%rax
    7594:	00 00 
    7596:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
    759a:	31 c0                	xor    %eax,%eax
    759c:	48 c7 45 b0 00 00 00 	movq   $0x0,-0x50(%rbp)
    75a3:	00 
    75a4:	48 8b 45 a8          	mov    -0x58(%rbp),%rax
    75a8:	48 89 45 b8          	mov    %rax,-0x48(%rbp)
    75ac:	48 83 7d b8 00       	cmpq   $0x0,-0x48(%rbp)
    75b1:	75 11                	jne    75c4 <xQueuePeek+0x52>
    75b3:	be bc 06 00 00       	mov    $0x6bc,%esi
    75b8:	48 8d 3d 69 02 02 00 	lea    0x20269(%rip),%rdi        # 27828 <_IO_stdin_used+0x828>
    75bf:	e8 48 c7 ff ff       	callq  3d0c <vAssertCalled>
    75c4:	48 83 7d a0 00       	cmpq   $0x0,-0x60(%rbp)
    75c9:	75 10                	jne    75db <xQueuePeek+0x69>
    75cb:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
    75cf:	48 8b 80 80 00 00 00 	mov    0x80(%rax),%rax
    75d6:	48 85 c0             	test   %rax,%rax
    75d9:	75 07                	jne    75e2 <xQueuePeek+0x70>
    75db:	b8 01 00 00 00       	mov    $0x1,%eax
    75e0:	eb 05                	jmp    75e7 <xQueuePeek+0x75>
    75e2:	b8 00 00 00 00       	mov    $0x0,%eax
    75e7:	85 c0                	test   %eax,%eax
    75e9:	75 11                	jne    75fc <xQueuePeek+0x8a>
    75eb:	be c0 06 00 00       	mov    $0x6c0,%esi
    75f0:	48 8d 3d 31 02 02 00 	lea    0x20231(%rip),%rdi        # 27828 <_IO_stdin_used+0x828>
    75f7:	e8 10 c7 ff ff       	callq  3d0c <vAssertCalled>
    75fc:	e8 96 80 00 00       	callq  f697 <xTaskGetSchedulerState>
    7601:	48 85 c0             	test   %rax,%rax
    7604:	75 09                	jne    760f <xQueuePeek+0x9d>
    7606:	48 8b 45 98          	mov    -0x68(%rbp),%rax
    760a:	48 85 c0             	test   %rax,%rax
    760d:	75 07                	jne    7616 <xQueuePeek+0xa4>
    760f:	b8 01 00 00 00       	mov    $0x1,%eax
    7614:	eb 05                	jmp    761b <xQueuePeek+0xa9>
    7616:	b8 00 00 00 00       	mov    $0x0,%eax
    761b:	85 c0                	test   %eax,%eax
    761d:	75 11                	jne    7630 <xQueuePeek+0xbe>
    761f:	be c5 06 00 00       	mov    $0x6c5,%esi
    7624:	48 8d 3d fd 01 02 00 	lea    0x201fd(%rip),%rdi        # 27828 <_IO_stdin_used+0x828>
    762b:	e8 dc c6 ff ff       	callq  3d0c <vAssertCalled>
    7630:	e8 9a b7 00 00       	callq  12dcf <vPortEnterCritical>
    7635:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
    7639:	48 8b 40 70          	mov    0x70(%rax),%rax
    763d:	48 89 45 c0          	mov    %rax,-0x40(%rbp)
    7641:	48 83 7d c0 00       	cmpq   $0x0,-0x40(%rbp)
    7646:	0f 84 f3 00 00 00    	je     773f <xQueuePeek+0x1cd>
    764c:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
    7650:	48 8b 40 18          	mov    0x18(%rax),%rax
    7654:	48 89 45 c8          	mov    %rax,-0x38(%rbp)
    7658:	48 8b 55 a0          	mov    -0x60(%rbp),%rdx
    765c:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
    7660:	48 89 d6             	mov    %rdx,%rsi
    7663:	48 89 c7             	mov    %rax,%rdi
    7666:	e8 91 0c 00 00       	callq  82fc <prvCopyDataFromQueue>
    766b:	e8 ec bf 01 00       	callq  2365c <prvTraceGetCurrentTaskHandle>
    7670:	48 89 c7             	mov    %rax,%rdi
    7673:	e8 e3 ba 01 00       	callq  2315b <prvTraceGetTaskNumberHigh16>
    7678:	0f b7 15 5d 9a 02 00 	movzwl 0x29a5d(%rip),%edx        # 310dc <CurrentFilterMask>
    767f:	21 d0                	and    %edx,%eax
    7681:	66 85 c0             	test   %ax,%ax
    7684:	74 77                	je     76fd <xQueuePeek+0x18b>
    7686:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
    768a:	48 89 c7             	mov    %rax,%rdi
    768d:	e8 8f bb 01 00       	callq  23221 <prvTraceGetQueueNumberHigh16>
    7692:	0f b7 15 43 9a 02 00 	movzwl 0x29a43(%rip),%edx        # 310dc <CurrentFilterMask>
    7699:	21 d0                	and    %edx,%eax
    769b:	66 85 c0             	test   %ax,%ax
    769e:	74 5d                	je     76fd <xQueuePeek+0x18b>
    76a0:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
    76a4:	48 89 c7             	mov    %rax,%rdi
    76a7:	e8 57 bb 01 00       	callq  23203 <prvTraceGetQueueNumberLow16>
    76ac:	44 0f b6 e0          	movzbl %al,%r12d
    76b0:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
    76b4:	48 89 c7             	mov    %rax,%rdi
    76b7:	e8 63 ba 01 00       	callq  2311f <prvTraceGetQueueType>
    76bc:	0f b6 c0             	movzbl %al,%eax
    76bf:	48 98                	cltq   
    76c1:	48 8d 15 08 9a 02 00 	lea    0x29a08(%rip),%rdx        # 310d0 <TraceQueueClassTable>
    76c8:	0f b6 04 10          	movzbl (%rax,%rdx,1),%eax
    76cc:	0f b6 d8             	movzbl %al,%ebx
    76cf:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
    76d3:	48 89 c7             	mov    %rax,%rdi
    76d6:	e8 44 ba 01 00       	callq  2311f <prvTraceGetQueueType>
    76db:	0f b6 c0             	movzbl %al,%eax
    76de:	48 98                	cltq   
    76e0:	48 8d 15 e9 99 02 00 	lea    0x299e9(%rip),%rdx        # 310d0 <TraceQueueClassTable>
    76e7:	0f b6 04 10          	movzbl (%rax,%rdx,1),%eax
    76eb:	83 c0 78             	add    $0x78,%eax
    76ee:	0f b6 c0             	movzbl %al,%eax
    76f1:	44 89 e2             	mov    %r12d,%edx
    76f4:	89 de                	mov    %ebx,%esi
    76f6:	89 c7                	mov    %eax,%edi
    76f8:	e8 55 d9 01 00       	callq  25052 <prvTraceStoreKernelCall>
    76fd:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
    7701:	48 8b 55 c8          	mov    -0x38(%rbp),%rdx
    7705:	48 89 50 18          	mov    %rdx,0x18(%rax)
    7709:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
    770d:	48 8b 40 48          	mov    0x48(%rax),%rax
    7711:	48 85 c0             	test   %rax,%rax
    7714:	74 1a                	je     7730 <xQueuePeek+0x1be>
    7716:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
    771a:	48 83 c0 48          	add    $0x48,%rax
    771e:	48 89 c7             	mov    %rax,%rdi
    7721:	e8 48 72 00 00       	callq  e96e <xTaskRemoveFromEventList>
    7726:	48 85 c0             	test   %rax,%rax
    7729:	74 05                	je     7730 <xQueuePeek+0x1be>
    772b:	e8 44 b7 00 00       	callq  12e74 <vPortYield>
    7730:	e8 c8 b6 00 00       	callq  12dfd <vPortExitCritical>
    7735:	b8 01 00 00 00       	mov    $0x1,%eax
    773a:	e9 34 03 00 00       	jmpq   7a73 <xQueuePeek+0x501>
    773f:	48 8b 45 98          	mov    -0x68(%rbp),%rax
    7743:	48 85 c0             	test   %rax,%rax
    7746:	0f 85 a1 00 00 00    	jne    77ed <xQueuePeek+0x27b>
    774c:	e8 ac b6 00 00       	callq  12dfd <vPortExitCritical>
    7751:	e8 06 bf 01 00       	callq  2365c <prvTraceGetCurrentTaskHandle>
    7756:	48 89 c7             	mov    %rax,%rdi
    7759:	e8 fd b9 01 00       	callq  2315b <prvTraceGetTaskNumberHigh16>
    775e:	0f b7 15 77 99 02 00 	movzwl 0x29977(%rip),%edx        # 310dc <CurrentFilterMask>
    7765:	21 d0                	and    %edx,%eax
    7767:	66 85 c0             	test   %ax,%ax
    776a:	74 77                	je     77e3 <xQueuePeek+0x271>
    776c:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
    7770:	48 89 c7             	mov    %rax,%rdi
    7773:	e8 a9 ba 01 00       	callq  23221 <prvTraceGetQueueNumberHigh16>
    7778:	0f b7 15 5d 99 02 00 	movzwl 0x2995d(%rip),%edx        # 310dc <CurrentFilterMask>
    777f:	21 d0                	and    %edx,%eax
    7781:	66 85 c0             	test   %ax,%ax
    7784:	74 5d                	je     77e3 <xQueuePeek+0x271>
    7786:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
    778a:	48 89 c7             	mov    %rax,%rdi
    778d:	e8 71 ba 01 00       	callq  23203 <prvTraceGetQueueNumberLow16>
    7792:	44 0f b6 e0          	movzbl %al,%r12d
    7796:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
    779a:	48 89 c7             	mov    %rax,%rdi
    779d:	e8 7d b9 01 00       	callq  2311f <prvTraceGetQueueType>
    77a2:	0f b6 c0             	movzbl %al,%eax
    77a5:	48 98                	cltq   
    77a7:	48 8d 15 22 99 02 00 	lea    0x29922(%rip),%rdx        # 310d0 <TraceQueueClassTable>
    77ae:	0f b6 04 10          	movzbl (%rax,%rdx,1),%eax
    77b2:	0f b6 d8             	movzbl %al,%ebx
    77b5:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
    77b9:	48 89 c7             	mov    %rax,%rdi
    77bc:	e8 5e b9 01 00       	callq  2311f <prvTraceGetQueueType>
    77c1:	0f b6 c0             	movzbl %al,%eax
    77c4:	48 98                	cltq   
    77c6:	48 8d 15 03 99 02 00 	lea    0x29903(%rip),%rdx        # 310d0 <TraceQueueClassTable>
    77cd:	0f b6 04 10          	movzbl (%rax,%rdx,1),%eax
    77d1:	83 e8 21             	sub    $0x21,%eax
    77d4:	0f b6 c0             	movzbl %al,%eax
    77d7:	44 89 e2             	mov    %r12d,%edx
    77da:	89 de                	mov    %ebx,%esi
    77dc:	89 c7                	mov    %eax,%edi
    77de:	e8 6f d8 01 00       	callq  25052 <prvTraceStoreKernelCall>
    77e3:	b8 00 00 00 00       	mov    $0x0,%eax
    77e8:	e9 86 02 00 00       	jmpq   7a73 <xQueuePeek+0x501>
    77ed:	48 83 7d b0 00       	cmpq   $0x0,-0x50(%rbp)
    77f2:	75 14                	jne    7808 <xQueuePeek+0x296>
    77f4:	48 8d 45 d0          	lea    -0x30(%rbp),%rax
    77f8:	48 89 c7             	mov    %rax,%rdi
    77fb:	e8 62 77 00 00       	callq  ef62 <vTaskInternalSetTimeOutState>
    7800:	48 c7 45 b0 01 00 00 	movq   $0x1,-0x50(%rbp)
    7807:	00 
    7808:	e8 f0 b5 00 00       	callq  12dfd <vPortExitCritical>
    780d:	e8 2f 5d 00 00       	callq  d541 <vTaskSuspendAll>
    7812:	e8 b8 b5 00 00       	callq  12dcf <vPortEnterCritical>
    7817:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
    781b:	0f b6 80 88 00 00 00 	movzbl 0x88(%rax),%eax
    7822:	3c ff                	cmp    $0xff,%al
    7824:	75 0b                	jne    7831 <xQueuePeek+0x2bf>
    7826:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
    782a:	c6 80 88 00 00 00 00 	movb   $0x0,0x88(%rax)
    7831:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
    7835:	0f b6 80 89 00 00 00 	movzbl 0x89(%rax),%eax
    783c:	3c ff                	cmp    $0xff,%al
    783e:	75 0b                	jne    784b <xQueuePeek+0x2d9>
    7840:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
    7844:	c6 80 89 00 00 00 00 	movb   $0x0,0x89(%rax)
    784b:	e8 ad b5 00 00       	callq  12dfd <vPortExitCritical>
    7850:	48 8d 55 98          	lea    -0x68(%rbp),%rdx
    7854:	48 8d 45 d0          	lea    -0x30(%rbp),%rax
    7858:	48 89 d6             	mov    %rdx,%rsi
    785b:	48 89 c7             	mov    %rax,%rdi
    785e:	e8 2b 77 00 00       	callq  ef8e <xTaskCheckForTimeOut>
    7863:	48 85 c0             	test   %rax,%rax
    7866:	0f 85 4a 01 00 00    	jne    79b6 <xQueuePeek+0x444>
    786c:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
    7870:	48 89 c7             	mov    %rax,%rdi
    7873:	e8 08 0c 00 00       	callq  8480 <prvIsQueueEmpty>
    7878:	48 85 c0             	test   %rax,%rax
    787b:	0f 84 1f 01 00 00    	je     79a0 <xQueuePeek+0x42e>
    7881:	e8 d6 bd 01 00       	callq  2365c <prvTraceGetCurrentTaskHandle>
    7886:	48 89 c7             	mov    %rax,%rdi
    7889:	e8 cd b8 01 00       	callq  2315b <prvTraceGetTaskNumberHigh16>
    788e:	0f b7 15 47 98 02 00 	movzwl 0x29847(%rip),%edx        # 310dc <CurrentFilterMask>
    7895:	21 d0                	and    %edx,%eax
    7897:	66 85 c0             	test   %ax,%ax
    789a:	74 77                	je     7913 <xQueuePeek+0x3a1>
    789c:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
    78a0:	48 89 c7             	mov    %rax,%rdi
    78a3:	e8 79 b9 01 00       	callq  23221 <prvTraceGetQueueNumberHigh16>
    78a8:	0f b7 15 2d 98 02 00 	movzwl 0x2982d(%rip),%edx        # 310dc <CurrentFilterMask>
    78af:	21 d0                	and    %edx,%eax
    78b1:	66 85 c0             	test   %ax,%ax
    78b4:	74 5d                	je     7913 <xQueuePeek+0x3a1>
    78b6:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
    78ba:	48 89 c7             	mov    %rax,%rdi
    78bd:	e8 41 b9 01 00       	callq  23203 <prvTraceGetQueueNumberLow16>
    78c2:	44 0f b6 e0          	movzbl %al,%r12d
    78c6:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
    78ca:	48 89 c7             	mov    %rax,%rdi
    78cd:	e8 4d b8 01 00       	callq  2311f <prvTraceGetQueueType>
    78d2:	0f b6 c0             	movzbl %al,%eax
    78d5:	48 98                	cltq   
    78d7:	48 8d 15 f2 97 02 00 	lea    0x297f2(%rip),%rdx        # 310d0 <TraceQueueClassTable>
    78de:	0f b6 04 10          	movzbl (%rax,%rdx,1),%eax
    78e2:	0f b6 d8             	movzbl %al,%ebx
    78e5:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
    78e9:	48 89 c7             	mov    %rax,%rdi
    78ec:	e8 2e b8 01 00       	callq  2311f <prvTraceGetQueueType>
    78f1:	0f b6 c0             	movzbl %al,%eax
    78f4:	48 98                	cltq   
    78f6:	48 8d 15 d3 97 02 00 	lea    0x297d3(%rip),%rdx        # 310d0 <TraceQueueClassTable>
    78fd:	0f b6 04 10          	movzbl (%rax,%rdx,1),%eax
    7901:	83 e8 24             	sub    $0x24,%eax
    7904:	0f b6 c0             	movzbl %al,%eax
    7907:	44 89 e2             	mov    %r12d,%edx
    790a:	89 de                	mov    %ebx,%esi
    790c:	89 c7                	mov    %eax,%edi
    790e:	e8 3f d7 01 00       	callq  25052 <prvTraceStoreKernelCall>
    7913:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
    7917:	48 89 c7             	mov    %rax,%rdi
    791a:	e8 00 b8 01 00       	callq  2311f <prvTraceGetQueueType>
    791f:	0f b6 c0             	movzbl %al,%eax
    7922:	48 98                	cltq   
    7924:	48 8d 15 a5 97 02 00 	lea    0x297a5(%rip),%rdx        # 310d0 <TraceQueueClassTable>
    792b:	0f b6 04 10          	movzbl (%rax,%rdx,1),%eax
    792f:	3c 02                	cmp    $0x2,%al
    7931:	74 32                	je     7965 <xQueuePeek+0x3f3>
    7933:	e8 24 bd 01 00       	callq  2365c <prvTraceGetCurrentTaskHandle>
    7938:	48 89 c7             	mov    %rax,%rdi
    793b:	e8 1b b8 01 00       	callq  2315b <prvTraceGetTaskNumberHigh16>
    7940:	0f b7 15 95 97 02 00 	movzwl 0x29795(%rip),%edx        # 310dc <CurrentFilterMask>
    7947:	21 d0                	and    %edx,%eax
    7949:	66 85 c0             	test   %ax,%ax
    794c:	74 17                	je     7965 <xQueuePeek+0x3f3>
    794e:	e8 09 bd 01 00       	callq  2365c <prvTraceGetCurrentTaskHandle>
    7953:	48 89 c7             	mov    %rax,%rdi
    7956:	e8 e2 b7 01 00       	callq  2313d <prvTraceGetTaskNumberLow16>
    795b:	0f b6 c0             	movzbl %al,%eax
    795e:	89 c7                	mov    %eax,%edi
    7960:	e8 61 e0 01 00       	callq  259c6 <prvTraceSetTaskInstanceFinished>
    7965:	48 8b 45 98          	mov    -0x68(%rbp),%rax
    7969:	48 8b 55 b8          	mov    -0x48(%rbp),%rdx
    796d:	48 83 c2 48          	add    $0x48,%rdx
    7971:	48 89 c6             	mov    %rax,%rsi
    7974:	48 89 d7             	mov    %rdx,%rdi
    7977:	e8 59 6d 00 00       	callq  e6d5 <vTaskPlaceOnEventList>
    797c:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
    7980:	48 89 c7             	mov    %rax,%rdi
    7983:	e8 ff 09 00 00       	callq  8387 <prvUnlockQueue>
    7988:	e8 d1 5b 00 00       	callq  d55e <xTaskResumeAll>
    798d:	48 85 c0             	test   %rax,%rax
    7990:	0f 85 9a fc ff ff    	jne    7630 <xQueuePeek+0xbe>
    7996:	e8 d9 b4 00 00       	callq  12e74 <vPortYield>
    799b:	e9 90 fc ff ff       	jmpq   7630 <xQueuePeek+0xbe>
    79a0:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
    79a4:	48 89 c7             	mov    %rax,%rdi
    79a7:	e8 db 09 00 00       	callq  8387 <prvUnlockQueue>
    79ac:	e8 ad 5b 00 00       	callq  d55e <xTaskResumeAll>
    79b1:	e9 7a fc ff ff       	jmpq   7630 <xQueuePeek+0xbe>
    79b6:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
    79ba:	48 89 c7             	mov    %rax,%rdi
    79bd:	e8 c5 09 00 00       	callq  8387 <prvUnlockQueue>
    79c2:	e8 97 5b 00 00       	callq  d55e <xTaskResumeAll>
    79c7:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
    79cb:	48 89 c7             	mov    %rax,%rdi
    79ce:	e8 ad 0a 00 00       	callq  8480 <prvIsQueueEmpty>
    79d3:	48 85 c0             	test   %rax,%rax
    79d6:	0f 84 54 fc ff ff    	je     7630 <xQueuePeek+0xbe>
    79dc:	e8 7b bc 01 00       	callq  2365c <prvTraceGetCurrentTaskHandle>
    79e1:	48 89 c7             	mov    %rax,%rdi
    79e4:	e8 72 b7 01 00       	callq  2315b <prvTraceGetTaskNumberHigh16>
    79e9:	0f b7 15 ec 96 02 00 	movzwl 0x296ec(%rip),%edx        # 310dc <CurrentFilterMask>
    79f0:	21 d0                	and    %edx,%eax
    79f2:	66 85 c0             	test   %ax,%ax
    79f5:	74 77                	je     7a6e <xQueuePeek+0x4fc>
    79f7:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
    79fb:	48 89 c7             	mov    %rax,%rdi
    79fe:	e8 1e b8 01 00       	callq  23221 <prvTraceGetQueueNumberHigh16>
    7a03:	0f b7 15 d2 96 02 00 	movzwl 0x296d2(%rip),%edx        # 310dc <CurrentFilterMask>
    7a0a:	21 d0                	and    %edx,%eax
    7a0c:	66 85 c0             	test   %ax,%ax
    7a0f:	74 5d                	je     7a6e <xQueuePeek+0x4fc>
    7a11:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
    7a15:	48 89 c7             	mov    %rax,%rdi
    7a18:	e8 e6 b7 01 00       	callq  23203 <prvTraceGetQueueNumberLow16>
    7a1d:	44 0f b6 e0          	movzbl %al,%r12d
    7a21:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
    7a25:	48 89 c7             	mov    %rax,%rdi
    7a28:	e8 f2 b6 01 00       	callq  2311f <prvTraceGetQueueType>
    7a2d:	0f b6 c0             	movzbl %al,%eax
    7a30:	48 98                	cltq   
    7a32:	48 8d 15 97 96 02 00 	lea    0x29697(%rip),%rdx        # 310d0 <TraceQueueClassTable>
    7a39:	0f b6 04 10          	movzbl (%rax,%rdx,1),%eax
    7a3d:	0f b6 d8             	movzbl %al,%ebx
    7a40:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
    7a44:	48 89 c7             	mov    %rax,%rdi
    7a47:	e8 d3 b6 01 00       	callq  2311f <prvTraceGetQueueType>
    7a4c:	0f b6 c0             	movzbl %al,%eax
    7a4f:	48 98                	cltq   
    7a51:	48 8d 15 78 96 02 00 	lea    0x29678(%rip),%rdx        # 310d0 <TraceQueueClassTable>
    7a58:	0f b6 04 10          	movzbl (%rax,%rdx,1),%eax
    7a5c:	83 e8 21             	sub    $0x21,%eax
    7a5f:	0f b6 c0             	movzbl %al,%eax
    7a62:	44 89 e2             	mov    %r12d,%edx
    7a65:	89 de                	mov    %ebx,%esi
    7a67:	89 c7                	mov    %eax,%edi
    7a69:	e8 e4 d5 01 00       	callq  25052 <prvTraceStoreKernelCall>
    7a6e:	b8 00 00 00 00       	mov    $0x0,%eax
    7a73:	48 8b 4d e8          	mov    -0x18(%rbp),%rcx
    7a77:	64 48 33 0c 25 28 00 	xor    %fs:0x28,%rcx
    7a7e:	00 00 
    7a80:	74 05                	je     7a87 <xQueuePeek+0x515>
    7a82:	e8 49 aa ff ff       	callq  24d0 <__stack_chk_fail@plt>
    7a87:	48 83 c4 60          	add    $0x60,%rsp
    7a8b:	5b                   	pop    %rbx
    7a8c:	41 5c                	pop    %r12
    7a8e:	5d                   	pop    %rbp
    7a8f:	c3                   	retq   

0000000000007a90 <xQueueReceiveFromISR>:
    7a90:	f3 0f 1e fa          	endbr64 
    7a94:	55                   	push   %rbp
    7a95:	48 89 e5             	mov    %rsp,%rbp
    7a98:	41 54                	push   %r12
    7a9a:	53                   	push   %rbx
    7a9b:	48 83 ec 50          	sub    $0x50,%rsp
    7a9f:	48 89 7d b8          	mov    %rdi,-0x48(%rbp)
    7aa3:	48 89 75 b0          	mov    %rsi,-0x50(%rbp)
    7aa7:	48 89 55 a8          	mov    %rdx,-0x58(%rbp)
    7aab:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
    7aaf:	48 89 45 d8          	mov    %rax,-0x28(%rbp)
    7ab3:	48 83 7d d8 00       	cmpq   $0x0,-0x28(%rbp)
    7ab8:	75 11                	jne    7acb <xQueueReceiveFromISR+0x3b>
    7aba:	be 51 07 00 00       	mov    $0x751,%esi
    7abf:	48 8d 3d 62 fd 01 00 	lea    0x1fd62(%rip),%rdi        # 27828 <_IO_stdin_used+0x828>
    7ac6:	e8 41 c2 ff ff       	callq  3d0c <vAssertCalled>
    7acb:	48 83 7d b0 00       	cmpq   $0x0,-0x50(%rbp)
    7ad0:	75 10                	jne    7ae2 <xQueueReceiveFromISR+0x52>
    7ad2:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
    7ad6:	48 8b 80 80 00 00 00 	mov    0x80(%rax),%rax
    7add:	48 85 c0             	test   %rax,%rax
    7ae0:	75 07                	jne    7ae9 <xQueueReceiveFromISR+0x59>
    7ae2:	b8 01 00 00 00       	mov    $0x1,%eax
    7ae7:	eb 05                	jmp    7aee <xQueueReceiveFromISR+0x5e>
    7ae9:	b8 00 00 00 00       	mov    $0x0,%eax
    7aee:	85 c0                	test   %eax,%eax
    7af0:	75 11                	jne    7b03 <xQueueReceiveFromISR+0x73>
    7af2:	be 52 07 00 00       	mov    $0x752,%esi
    7af7:	48 8d 3d 2a fd 01 00 	lea    0x1fd2a(%rip),%rdi        # 27828 <_IO_stdin_used+0x828>
    7afe:	e8 09 c2 ff ff       	callq  3d0c <vAssertCalled>
    7b03:	e8 c8 b3 00 00       	callq  12ed0 <xPortSetInterruptMask>
    7b08:	48 89 45 e0          	mov    %rax,-0x20(%rbp)
    7b0c:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
    7b10:	48 8b 40 70          	mov    0x70(%rax),%rax
    7b14:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
    7b18:	48 83 7d e8 00       	cmpq   $0x0,-0x18(%rbp)
    7b1d:	0f 84 61 01 00 00    	je     7c84 <xQueueReceiveFromISR+0x1f4>
    7b23:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
    7b27:	0f b6 80 88 00 00 00 	movzbl 0x88(%rax),%eax
    7b2e:	88 45 cf             	mov    %al,-0x31(%rbp)
    7b31:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
    7b35:	48 89 c7             	mov    %rax,%rdi
    7b38:	e8 e4 b6 01 00       	callq  23221 <prvTraceGetQueueNumberHigh16>
    7b3d:	0f b7 15 98 95 02 00 	movzwl 0x29598(%rip),%edx        # 310dc <CurrentFilterMask>
    7b44:	21 d0                	and    %edx,%eax
    7b46:	66 85 c0             	test   %ax,%ax
    7b49:	74 5d                	je     7ba8 <xQueueReceiveFromISR+0x118>
    7b4b:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
    7b4f:	48 89 c7             	mov    %rax,%rdi
    7b52:	e8 ac b6 01 00       	callq  23203 <prvTraceGetQueueNumberLow16>
    7b57:	44 0f b6 e0          	movzbl %al,%r12d
    7b5b:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
    7b5f:	48 89 c7             	mov    %rax,%rdi
    7b62:	e8 b8 b5 01 00       	callq  2311f <prvTraceGetQueueType>
    7b67:	0f b6 c0             	movzbl %al,%eax
    7b6a:	48 98                	cltq   
    7b6c:	48 8d 15 5d 95 02 00 	lea    0x2955d(%rip),%rdx        # 310d0 <TraceQueueClassTable>
    7b73:	0f b6 04 10          	movzbl (%rax,%rdx,1),%eax
    7b77:	0f b6 d8             	movzbl %al,%ebx
    7b7a:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
    7b7e:	48 89 c7             	mov    %rax,%rdi
    7b81:	e8 99 b5 01 00       	callq  2311f <prvTraceGetQueueType>
    7b86:	0f b6 c0             	movzbl %al,%eax
    7b89:	48 98                	cltq   
    7b8b:	48 8d 15 3e 95 02 00 	lea    0x2953e(%rip),%rdx        # 310d0 <TraceQueueClassTable>
    7b92:	0f b6 04 10          	movzbl (%rax,%rdx,1),%eax
    7b96:	83 c0 38             	add    $0x38,%eax
    7b99:	0f b6 c0             	movzbl %al,%eax
    7b9c:	44 89 e2             	mov    %r12d,%edx
    7b9f:	89 de                	mov    %ebx,%esi
    7ba1:	89 c7                	mov    %eax,%edi
    7ba3:	e8 aa d4 01 00       	callq  25052 <prvTraceStoreKernelCall>
    7ba8:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
    7bac:	48 8b 40 70          	mov    0x70(%rax),%rax
    7bb0:	83 e8 01             	sub    $0x1,%eax
    7bb3:	44 0f b6 e0          	movzbl %al,%r12d
    7bb7:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
    7bbb:	48 89 c7             	mov    %rax,%rdi
    7bbe:	e8 40 b6 01 00       	callq  23203 <prvTraceGetQueueNumberLow16>
    7bc3:	0f b6 d8             	movzbl %al,%ebx
    7bc6:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
    7bca:	48 89 c7             	mov    %rax,%rdi
    7bcd:	e8 4d b5 01 00       	callq  2311f <prvTraceGetQueueType>
    7bd2:	0f b6 c0             	movzbl %al,%eax
    7bd5:	48 98                	cltq   
    7bd7:	48 8d 15 f2 94 02 00 	lea    0x294f2(%rip),%rdx        # 310d0 <TraceQueueClassTable>
    7bde:	0f b6 04 10          	movzbl (%rax,%rdx,1),%eax
    7be2:	0f b6 c0             	movzbl %al,%eax
    7be5:	44 89 e2             	mov    %r12d,%edx
    7be8:	89 de                	mov    %ebx,%esi
    7bea:	89 c7                	mov    %eax,%edi
    7bec:	e8 9b dc 01 00       	callq  2588c <prvTraceSetObjectState>
    7bf1:	48 8b 55 b0          	mov    -0x50(%rbp),%rdx
    7bf5:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
    7bf9:	48 89 d6             	mov    %rdx,%rsi
    7bfc:	48 89 c7             	mov    %rax,%rdi
    7bff:	e8 f8 06 00 00       	callq  82fc <prvCopyDataFromQueue>
    7c04:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
    7c08:	48 8d 50 ff          	lea    -0x1(%rax),%rdx
    7c0c:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
    7c10:	48 89 50 70          	mov    %rdx,0x70(%rax)
    7c14:	80 7d cf ff          	cmpb   $0xff,-0x31(%rbp)
    7c18:	75 36                	jne    7c50 <xQueueReceiveFromISR+0x1c0>
    7c1a:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
    7c1e:	48 8b 40 20          	mov    0x20(%rax),%rax
    7c22:	48 85 c0             	test   %rax,%rax
    7c25:	74 53                	je     7c7a <xQueueReceiveFromISR+0x1ea>
    7c27:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
    7c2b:	48 83 c0 20          	add    $0x20,%rax
    7c2f:	48 89 c7             	mov    %rax,%rdi
    7c32:	e8 37 6d 00 00       	callq  e96e <xTaskRemoveFromEventList>
    7c37:	48 85 c0             	test   %rax,%rax
    7c3a:	74 3e                	je     7c7a <xQueueReceiveFromISR+0x1ea>
    7c3c:	48 83 7d a8 00       	cmpq   $0x0,-0x58(%rbp)
    7c41:	74 37                	je     7c7a <xQueueReceiveFromISR+0x1ea>
    7c43:	48 8b 45 a8          	mov    -0x58(%rbp),%rax
    7c47:	48 c7 00 01 00 00 00 	movq   $0x1,(%rax)
    7c4e:	eb 2a                	jmp    7c7a <xQueueReceiveFromISR+0x1ea>
    7c50:	80 7d cf 7f          	cmpb   $0x7f,-0x31(%rbp)
    7c54:	75 11                	jne    7c67 <xQueueReceiveFromISR+0x1d7>
    7c56:	be 95 07 00 00       	mov    $0x795,%esi
    7c5b:	48 8d 3d c6 fb 01 00 	lea    0x1fbc6(%rip),%rdi        # 27828 <_IO_stdin_used+0x828>
    7c62:	e8 a5 c0 ff ff       	callq  3d0c <vAssertCalled>
    7c67:	0f b6 45 cf          	movzbl -0x31(%rbp),%eax
    7c6b:	83 c0 01             	add    $0x1,%eax
    7c6e:	89 c2                	mov    %eax,%edx
    7c70:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
    7c74:	88 90 88 00 00 00    	mov    %dl,0x88(%rax)
    7c7a:	48 c7 45 d0 01 00 00 	movq   $0x1,-0x30(%rbp)
    7c81:	00 
    7c82:	eb 7f                	jmp    7d03 <xQueueReceiveFromISR+0x273>
    7c84:	48 c7 45 d0 00 00 00 	movq   $0x0,-0x30(%rbp)
    7c8b:	00 
    7c8c:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
    7c90:	48 89 c7             	mov    %rax,%rdi
    7c93:	e8 89 b5 01 00       	callq  23221 <prvTraceGetQueueNumberHigh16>
    7c98:	0f b7 15 3d 94 02 00 	movzwl 0x2943d(%rip),%edx        # 310dc <CurrentFilterMask>
    7c9f:	21 d0                	and    %edx,%eax
    7ca1:	66 85 c0             	test   %ax,%ax
    7ca4:	74 5d                	je     7d03 <xQueueReceiveFromISR+0x273>
    7ca6:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
    7caa:	48 89 c7             	mov    %rax,%rdi
    7cad:	e8 51 b5 01 00       	callq  23203 <prvTraceGetQueueNumberLow16>
    7cb2:	44 0f b6 e0          	movzbl %al,%r12d
    7cb6:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
    7cba:	48 89 c7             	mov    %rax,%rdi
    7cbd:	e8 5d b4 01 00       	callq  2311f <prvTraceGetQueueType>
    7cc2:	0f b6 c0             	movzbl %al,%eax
    7cc5:	48 98                	cltq   
    7cc7:	48 8d 15 02 94 02 00 	lea    0x29402(%rip),%rdx        # 310d0 <TraceQueueClassTable>
    7cce:	0f b6 04 10          	movzbl (%rax,%rdx,1),%eax
    7cd2:	0f b6 d8             	movzbl %al,%ebx
    7cd5:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
    7cd9:	48 89 c7             	mov    %rax,%rdi
    7cdc:	e8 3e b4 01 00       	callq  2311f <prvTraceGetQueueType>
    7ce1:	0f b6 c0             	movzbl %al,%eax
    7ce4:	48 98                	cltq   
    7ce6:	48 8d 15 e3 93 02 00 	lea    0x293e3(%rip),%rdx        # 310d0 <TraceQueueClassTable>
    7ced:	0f b6 04 10          	movzbl (%rax,%rdx,1),%eax
    7cf1:	83 c0 60             	add    $0x60,%eax
    7cf4:	0f b6 c0             	movzbl %al,%eax
    7cf7:	44 89 e2             	mov    %r12d,%edx
    7cfa:	89 de                	mov    %ebx,%esi
    7cfc:	89 c7                	mov    %eax,%edi
    7cfe:	e8 4f d3 01 00       	callq  25052 <prvTraceStoreKernelCall>
    7d03:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
    7d07:	48 89 c7             	mov    %rax,%rdi
    7d0a:	e8 d0 b1 00 00       	callq  12edf <vPortClearInterruptMask>
    7d0f:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
    7d13:	48 83 c4 50          	add    $0x50,%rsp
    7d17:	5b                   	pop    %rbx
    7d18:	41 5c                	pop    %r12
    7d1a:	5d                   	pop    %rbp
    7d1b:	c3                   	retq   

0000000000007d1c <xQueuePeekFromISR>:
    7d1c:	f3 0f 1e fa          	endbr64 
    7d20:	55                   	push   %rbp
    7d21:	48 89 e5             	mov    %rsp,%rbp
    7d24:	48 83 ec 30          	sub    $0x30,%rsp
    7d28:	48 89 7d d8          	mov    %rdi,-0x28(%rbp)
    7d2c:	48 89 75 d0          	mov    %rsi,-0x30(%rbp)
    7d30:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
    7d34:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
    7d38:	48 83 7d e8 00       	cmpq   $0x0,-0x18(%rbp)
    7d3d:	75 11                	jne    7d50 <xQueuePeekFromISR+0x34>
    7d3f:	be b0 07 00 00       	mov    $0x7b0,%esi
    7d44:	48 8d 3d dd fa 01 00 	lea    0x1fadd(%rip),%rdi        # 27828 <_IO_stdin_used+0x828>
    7d4b:	e8 bc bf ff ff       	callq  3d0c <vAssertCalled>
    7d50:	48 83 7d d0 00       	cmpq   $0x0,-0x30(%rbp)
    7d55:	75 10                	jne    7d67 <xQueuePeekFromISR+0x4b>
    7d57:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
    7d5b:	48 8b 80 80 00 00 00 	mov    0x80(%rax),%rax
    7d62:	48 85 c0             	test   %rax,%rax
    7d65:	75 07                	jne    7d6e <xQueuePeekFromISR+0x52>
    7d67:	b8 01 00 00 00       	mov    $0x1,%eax
    7d6c:	eb 05                	jmp    7d73 <xQueuePeekFromISR+0x57>
    7d6e:	b8 00 00 00 00       	mov    $0x0,%eax
    7d73:	85 c0                	test   %eax,%eax
    7d75:	75 11                	jne    7d88 <xQueuePeekFromISR+0x6c>
    7d77:	be b1 07 00 00       	mov    $0x7b1,%esi
    7d7c:	48 8d 3d a5 fa 01 00 	lea    0x1faa5(%rip),%rdi        # 27828 <_IO_stdin_used+0x828>
    7d83:	e8 84 bf ff ff       	callq  3d0c <vAssertCalled>
    7d88:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
    7d8c:	48 8b 80 80 00 00 00 	mov    0x80(%rax),%rax
    7d93:	48 85 c0             	test   %rax,%rax
    7d96:	75 11                	jne    7da9 <xQueuePeekFromISR+0x8d>
    7d98:	be b2 07 00 00       	mov    $0x7b2,%esi
    7d9d:	48 8d 3d 84 fa 01 00 	lea    0x1fa84(%rip),%rdi        # 27828 <_IO_stdin_used+0x828>
    7da4:	e8 63 bf ff ff       	callq  3d0c <vAssertCalled>
    7da9:	e8 22 b1 00 00       	callq  12ed0 <xPortSetInterruptMask>
    7dae:	48 89 45 f0          	mov    %rax,-0x10(%rbp)
    7db2:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
    7db6:	48 8b 40 70          	mov    0x70(%rax),%rax
    7dba:	48 85 c0             	test   %rax,%rax
    7dbd:	74 35                	je     7df4 <xQueuePeekFromISR+0xd8>
    7dbf:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
    7dc3:	48 8b 40 18          	mov    0x18(%rax),%rax
    7dc7:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
    7dcb:	48 8b 55 d0          	mov    -0x30(%rbp),%rdx
    7dcf:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
    7dd3:	48 89 d6             	mov    %rdx,%rsi
    7dd6:	48 89 c7             	mov    %rax,%rdi
    7dd9:	e8 1e 05 00 00       	callq  82fc <prvCopyDataFromQueue>
    7dde:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
    7de2:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
    7de6:	48 89 50 18          	mov    %rdx,0x18(%rax)
    7dea:	48 c7 45 e0 01 00 00 	movq   $0x1,-0x20(%rbp)
    7df1:	00 
    7df2:	eb 08                	jmp    7dfc <xQueuePeekFromISR+0xe0>
    7df4:	48 c7 45 e0 00 00 00 	movq   $0x0,-0x20(%rbp)
    7dfb:	00 
    7dfc:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
    7e00:	48 89 c7             	mov    %rax,%rdi
    7e03:	e8 d7 b0 00 00       	callq  12edf <vPortClearInterruptMask>
    7e08:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
    7e0c:	c9                   	leaveq 
    7e0d:	c3                   	retq   

0000000000007e0e <uxQueueMessagesWaiting>:
    7e0e:	f3 0f 1e fa          	endbr64 
    7e12:	55                   	push   %rbp
    7e13:	48 89 e5             	mov    %rsp,%rbp
    7e16:	48 83 ec 20          	sub    $0x20,%rsp
    7e1a:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
    7e1e:	48 83 7d e8 00       	cmpq   $0x0,-0x18(%rbp)
    7e23:	75 11                	jne    7e36 <uxQueueMessagesWaiting+0x28>
    7e25:	be e3 07 00 00       	mov    $0x7e3,%esi
    7e2a:	48 8d 3d f7 f9 01 00 	lea    0x1f9f7(%rip),%rdi        # 27828 <_IO_stdin_used+0x828>
    7e31:	e8 d6 be ff ff       	callq  3d0c <vAssertCalled>
    7e36:	e8 94 af 00 00       	callq  12dcf <vPortEnterCritical>
    7e3b:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
    7e3f:	48 8b 40 70          	mov    0x70(%rax),%rax
    7e43:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
    7e47:	e8 b1 af 00 00       	callq  12dfd <vPortExitCritical>
    7e4c:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    7e50:	c9                   	leaveq 
    7e51:	c3                   	retq   

0000000000007e52 <uxQueueSpacesAvailable>:
    7e52:	f3 0f 1e fa          	endbr64 
    7e56:	55                   	push   %rbp
    7e57:	48 89 e5             	mov    %rsp,%rbp
    7e5a:	48 83 ec 20          	sub    $0x20,%rsp
    7e5e:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
    7e62:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
    7e66:	48 89 45 f0          	mov    %rax,-0x10(%rbp)
    7e6a:	48 83 7d f0 00       	cmpq   $0x0,-0x10(%rbp)
    7e6f:	75 11                	jne    7e82 <uxQueueSpacesAvailable+0x30>
    7e71:	be f4 07 00 00       	mov    $0x7f4,%esi
    7e76:	48 8d 3d ab f9 01 00 	lea    0x1f9ab(%rip),%rdi        # 27828 <_IO_stdin_used+0x828>
    7e7d:	e8 8a be ff ff       	callq  3d0c <vAssertCalled>
    7e82:	e8 48 af 00 00       	callq  12dcf <vPortEnterCritical>
    7e87:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
    7e8b:	48 8b 50 78          	mov    0x78(%rax),%rdx
    7e8f:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
    7e93:	48 8b 40 70          	mov    0x70(%rax),%rax
    7e97:	48 29 c2             	sub    %rax,%rdx
    7e9a:	48 89 d0             	mov    %rdx,%rax
    7e9d:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
    7ea1:	e8 57 af 00 00       	callq  12dfd <vPortExitCritical>
    7ea6:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    7eaa:	c9                   	leaveq 
    7eab:	c3                   	retq   

0000000000007eac <uxQueueMessagesWaitingFromISR>:
    7eac:	f3 0f 1e fa          	endbr64 
    7eb0:	55                   	push   %rbp
    7eb1:	48 89 e5             	mov    %rsp,%rbp
    7eb4:	48 83 ec 20          	sub    $0x20,%rsp
    7eb8:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
    7ebc:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
    7ec0:	48 89 45 f0          	mov    %rax,-0x10(%rbp)
    7ec4:	48 83 7d f0 00       	cmpq   $0x0,-0x10(%rbp)
    7ec9:	75 11                	jne    7edc <uxQueueMessagesWaitingFromISR+0x30>
    7ecb:	be 05 08 00 00       	mov    $0x805,%esi
    7ed0:	48 8d 3d 51 f9 01 00 	lea    0x1f951(%rip),%rdi        # 27828 <_IO_stdin_used+0x828>
    7ed7:	e8 30 be ff ff       	callq  3d0c <vAssertCalled>
    7edc:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
    7ee0:	48 8b 40 70          	mov    0x70(%rax),%rax
    7ee4:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
    7ee8:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    7eec:	c9                   	leaveq 
    7eed:	c3                   	retq   

0000000000007eee <vQueueDelete>:
    7eee:	f3 0f 1e fa          	endbr64 
    7ef2:	55                   	push   %rbp
    7ef3:	48 89 e5             	mov    %rsp,%rbp
    7ef6:	41 54                	push   %r12
    7ef8:	53                   	push   %rbx
    7ef9:	48 83 ec 20          	sub    $0x20,%rsp
    7efd:	48 89 7d d8          	mov    %rdi,-0x28(%rbp)
    7f01:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
    7f05:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
    7f09:	48 83 7d e8 00       	cmpq   $0x0,-0x18(%rbp)
    7f0e:	75 11                	jne    7f21 <vQueueDelete+0x33>
    7f10:	be 10 08 00 00       	mov    $0x810,%esi
    7f15:	48 8d 3d 0c f9 01 00 	lea    0x1f90c(%rip),%rdi        # 27828 <_IO_stdin_used+0x828>
    7f1c:	e8 eb bd ff ff       	callq  3d0c <vAssertCalled>
    7f21:	e8 a9 ae 00 00       	callq  12dcf <vPortEnterCritical>
    7f26:	e8 31 b7 01 00       	callq  2365c <prvTraceGetCurrentTaskHandle>
    7f2b:	48 89 c7             	mov    %rax,%rdi
    7f2e:	e8 28 b2 01 00       	callq  2315b <prvTraceGetTaskNumberHigh16>
    7f33:	0f b7 15 a2 91 02 00 	movzwl 0x291a2(%rip),%edx        # 310dc <CurrentFilterMask>
    7f3a:	21 d0                	and    %edx,%eax
    7f3c:	66 85 c0             	test   %ax,%ax
    7f3f:	74 77                	je     7fb8 <vQueueDelete+0xca>
    7f41:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
    7f45:	48 89 c7             	mov    %rax,%rdi
    7f48:	e8 d4 b2 01 00       	callq  23221 <prvTraceGetQueueNumberHigh16>
    7f4d:	0f b7 15 88 91 02 00 	movzwl 0x29188(%rip),%edx        # 310dc <CurrentFilterMask>
    7f54:	21 d0                	and    %edx,%eax
    7f56:	66 85 c0             	test   %ax,%ax
    7f59:	74 5d                	je     7fb8 <vQueueDelete+0xca>
    7f5b:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
    7f5f:	48 89 c7             	mov    %rax,%rdi
    7f62:	e8 9c b2 01 00       	callq  23203 <prvTraceGetQueueNumberLow16>
    7f67:	44 0f b6 e0          	movzbl %al,%r12d
    7f6b:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
    7f6f:	48 89 c7             	mov    %rax,%rdi
    7f72:	e8 a8 b1 01 00       	callq  2311f <prvTraceGetQueueType>
    7f77:	0f b6 c0             	movzbl %al,%eax
    7f7a:	48 98                	cltq   
    7f7c:	48 8d 15 4d 91 02 00 	lea    0x2914d(%rip),%rdx        # 310d0 <TraceQueueClassTable>
    7f83:	0f b6 04 10          	movzbl (%rax,%rdx,1),%eax
    7f87:	0f b6 d8             	movzbl %al,%ebx
    7f8a:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
    7f8e:	48 89 c7             	mov    %rax,%rdi
    7f91:	e8 89 b1 01 00       	callq  2311f <prvTraceGetQueueType>
    7f96:	0f b6 c0             	movzbl %al,%eax
    7f99:	48 98                	cltq   
    7f9b:	48 8d 15 2e 91 02 00 	lea    0x2912e(%rip),%rdx        # 310d0 <TraceQueueClassTable>
    7fa2:	0f b6 04 10          	movzbl (%rax,%rdx,1),%eax
    7fa6:	83 c0 80             	add    $0xffffff80,%eax
    7fa9:	0f b6 c0             	movzbl %al,%eax
    7fac:	44 89 e2             	mov    %r12d,%edx
    7faf:	89 de                	mov    %ebx,%esi
    7fb1:	89 c7                	mov    %eax,%edi
    7fb3:	e8 9a d0 01 00       	callq  25052 <prvTraceStoreKernelCall>
    7fb8:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
    7fbc:	48 89 c7             	mov    %rax,%rdi
    7fbf:	e8 5b b1 01 00       	callq  2311f <prvTraceGetQueueType>
    7fc4:	0f b6 c0             	movzbl %al,%eax
    7fc7:	48 98                	cltq   
    7fc9:	48 8d 15 00 91 02 00 	lea    0x29100(%rip),%rdx        # 310d0 <TraceQueueClassTable>
    7fd0:	0f b6 04 10          	movzbl (%rax,%rdx,1),%eax
    7fd4:	44 0f b6 e0          	movzbl %al,%r12d
    7fd8:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
    7fdc:	48 89 c7             	mov    %rax,%rdi
    7fdf:	e8 1f b2 01 00       	callq  23203 <prvTraceGetQueueNumberLow16>
    7fe4:	0f b6 d8             	movzbl %al,%ebx
    7fe7:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
    7feb:	48 89 c7             	mov    %rax,%rdi
    7fee:	e8 2c b1 01 00       	callq  2311f <prvTraceGetQueueType>
    7ff3:	0f b6 c0             	movzbl %al,%eax
    7ff6:	48 98                	cltq   
    7ff8:	48 8d 15 d1 90 02 00 	lea    0x290d1(%rip),%rdx        # 310d0 <TraceQueueClassTable>
    7fff:	0f b6 04 10          	movzbl (%rax,%rdx,1),%eax
    8003:	83 c0 08             	add    $0x8,%eax
    8006:	0f b6 c0             	movzbl %al,%eax
    8009:	44 89 e2             	mov    %r12d,%edx
    800c:	89 de                	mov    %ebx,%esi
    800e:	89 c7                	mov    %eax,%edi
    8010:	e8 17 d5 01 00       	callq  2552c <prvTraceStoreObjectNameOnCloseEvent>
    8015:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
    8019:	48 89 c7             	mov    %rax,%rdi
    801c:	e8 fe b0 01 00       	callq  2311f <prvTraceGetQueueType>
    8021:	0f b6 c0             	movzbl %al,%eax
    8024:	48 98                	cltq   
    8026:	48 8d 15 a3 90 02 00 	lea    0x290a3(%rip),%rdx        # 310d0 <TraceQueueClassTable>
    802d:	0f b6 04 10          	movzbl (%rax,%rdx,1),%eax
    8031:	44 0f b6 e0          	movzbl %al,%r12d
    8035:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
    8039:	48 89 c7             	mov    %rax,%rdi
    803c:	e8 c2 b1 01 00       	callq  23203 <prvTraceGetQueueNumberLow16>
    8041:	0f b6 d8             	movzbl %al,%ebx
    8044:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
    8048:	48 89 c7             	mov    %rax,%rdi
    804b:	e8 cf b0 01 00       	callq  2311f <prvTraceGetQueueType>
    8050:	0f b6 c0             	movzbl %al,%eax
    8053:	48 98                	cltq   
    8055:	48 8d 15 74 90 02 00 	lea    0x29074(%rip),%rdx        # 310d0 <TraceQueueClassTable>
    805c:	0f b6 04 10          	movzbl (%rax,%rdx,1),%eax
    8060:	83 c0 10             	add    $0x10,%eax
    8063:	0f b6 c0             	movzbl %al,%eax
    8066:	44 89 e2             	mov    %r12d,%edx
    8069:	89 de                	mov    %ebx,%esi
    806b:	89 c7                	mov    %eax,%edi
    806d:	e8 b0 d5 01 00       	callq  25622 <prvTraceStoreObjectPropertiesOnCloseEvent>
    8072:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
    8076:	48 89 c7             	mov    %rax,%rdi
    8079:	e8 85 b1 01 00       	callq  23203 <prvTraceGetQueueNumberLow16>
    807e:	0f b6 d8             	movzbl %al,%ebx
    8081:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
    8085:	48 89 c7             	mov    %rax,%rdi
    8088:	e8 92 b0 01 00       	callq  2311f <prvTraceGetQueueType>
    808d:	0f b6 c0             	movzbl %al,%eax
    8090:	48 98                	cltq   
    8092:	48 8d 15 37 90 02 00 	lea    0x29037(%rip),%rdx        # 310d0 <TraceQueueClassTable>
    8099:	0f b6 04 10          	movzbl (%rax,%rdx,1),%eax
    809d:	0f b6 c0             	movzbl %al,%eax
    80a0:	89 de                	mov    %ebx,%esi
    80a2:	89 c7                	mov    %eax,%edi
    80a4:	e8 71 df 01 00       	callq  2601a <prvTraceFreeObjectHandle>
    80a9:	e8 4f ad 00 00       	callq  12dfd <vPortExitCritical>
    80ae:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
    80b2:	48 89 c7             	mov    %rax,%rdi
    80b5:	e8 ab 06 00 00       	callq  8765 <vQueueUnregisterQueue>
    80ba:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
    80be:	0f b6 80 8a 00 00 00 	movzbl 0x8a(%rax),%eax
    80c5:	84 c0                	test   %al,%al
    80c7:	75 0c                	jne    80d5 <vQueueDelete+0x1e7>
    80c9:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
    80cd:	48 89 c7             	mov    %rax,%rdi
    80d0:	e8 cb a6 00 00       	callq  127a0 <vPortFree>
    80d5:	90                   	nop
    80d6:	48 83 c4 20          	add    $0x20,%rsp
    80da:	5b                   	pop    %rbx
    80db:	41 5c                	pop    %r12
    80dd:	5d                   	pop    %rbp
    80de:	c3                   	retq   

00000000000080df <uxQueueGetQueueNumber>:
    80df:	f3 0f 1e fa          	endbr64 
    80e3:	55                   	push   %rbp
    80e4:	48 89 e5             	mov    %rsp,%rbp
    80e7:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
    80eb:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    80ef:	48 8b 80 98 00 00 00 	mov    0x98(%rax),%rax
    80f6:	5d                   	pop    %rbp
    80f7:	c3                   	retq   

00000000000080f8 <vQueueSetQueueNumber>:
    80f8:	f3 0f 1e fa          	endbr64 
    80fc:	55                   	push   %rbp
    80fd:	48 89 e5             	mov    %rsp,%rbp
    8100:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
    8104:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
    8108:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    810c:	48 8b 55 f0          	mov    -0x10(%rbp),%rdx
    8110:	48 89 90 98 00 00 00 	mov    %rdx,0x98(%rax)
    8117:	90                   	nop
    8118:	5d                   	pop    %rbp
    8119:	c3                   	retq   

000000000000811a <ucQueueGetQueueType>:
    811a:	f3 0f 1e fa          	endbr64 
    811e:	55                   	push   %rbp
    811f:	48 89 e5             	mov    %rsp,%rbp
    8122:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
    8126:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    812a:	0f b6 80 a0 00 00 00 	movzbl 0xa0(%rax),%eax
    8131:	5d                   	pop    %rbp
    8132:	c3                   	retq   

0000000000008133 <prvGetDisinheritPriorityAfterTimeout>:
    8133:	f3 0f 1e fa          	endbr64 
    8137:	55                   	push   %rbp
    8138:	48 89 e5             	mov    %rsp,%rbp
    813b:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
    813f:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
    8143:	48 8b 40 48          	mov    0x48(%rax),%rax
    8147:	48 85 c0             	test   %rax,%rax
    814a:	74 1c                	je     8168 <prvGetDisinheritPriorityAfterTimeout+0x35>
    814c:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
    8150:	48 8b 40 60          	mov    0x60(%rax),%rax
    8154:	48 8b 00             	mov    (%rax),%rax
    8157:	ba 07 00 00 00       	mov    $0x7,%edx
    815c:	48 29 c2             	sub    %rax,%rdx
    815f:	48 89 d0             	mov    %rdx,%rax
    8162:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
    8166:	eb 08                	jmp    8170 <prvGetDisinheritPriorityAfterTimeout+0x3d>
    8168:	48 c7 45 f8 00 00 00 	movq   $0x0,-0x8(%rbp)
    816f:	00 
    8170:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    8174:	5d                   	pop    %rbp
    8175:	c3                   	retq   

0000000000008176 <prvCopyDataToQueue>:
    8176:	f3 0f 1e fa          	endbr64 
    817a:	55                   	push   %rbp
    817b:	48 89 e5             	mov    %rsp,%rbp
    817e:	48 83 ec 30          	sub    $0x30,%rsp
    8182:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
    8186:	48 89 75 e0          	mov    %rsi,-0x20(%rbp)
    818a:	48 89 55 d8          	mov    %rdx,-0x28(%rbp)
    818e:	48 c7 45 f0 00 00 00 	movq   $0x0,-0x10(%rbp)
    8195:	00 
    8196:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
    819a:	48 8b 40 70          	mov    0x70(%rax),%rax
    819e:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
    81a2:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
    81a6:	48 8b 80 80 00 00 00 	mov    0x80(%rax),%rax
    81ad:	48 85 c0             	test   %rax,%rax
    81b0:	75 35                	jne    81e7 <prvCopyDataToQueue+0x71>
    81b2:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
    81b6:	48 8b 00             	mov    (%rax),%rax
    81b9:	48 85 c0             	test   %rax,%rax
    81bc:	0f 85 24 01 00 00    	jne    82e6 <prvCopyDataToQueue+0x170>
    81c2:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
    81c6:	48 8b 40 10          	mov    0x10(%rax),%rax
    81ca:	48 89 c7             	mov    %rax,%rdi
    81cd:	e8 c9 77 00 00       	callq  f99b <xTaskPriorityDisinherit>
    81d2:	48 89 45 f0          	mov    %rax,-0x10(%rbp)
    81d6:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
    81da:	48 c7 40 10 00 00 00 	movq   $0x0,0x10(%rax)
    81e1:	00 
    81e2:	e9 ff 00 00 00       	jmpq   82e6 <prvCopyDataToQueue+0x170>
    81e7:	48 83 7d d8 00       	cmpq   $0x0,-0x28(%rbp)
    81ec:	75 6d                	jne    825b <prvCopyDataToQueue+0xe5>
    81ee:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
    81f2:	48 8b 90 80 00 00 00 	mov    0x80(%rax),%rdx
    81f9:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
    81fd:	48 8b 40 08          	mov    0x8(%rax),%rax
    8201:	48 8b 4d e0          	mov    -0x20(%rbp),%rcx
    8205:	48 89 ce             	mov    %rcx,%rsi
    8208:	48 89 c7             	mov    %rax,%rdi
    820b:	e8 a0 a3 ff ff       	callq  25b0 <memcpy@plt>
    8210:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
    8214:	48 8b 50 08          	mov    0x8(%rax),%rdx
    8218:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
    821c:	48 8b 80 80 00 00 00 	mov    0x80(%rax),%rax
    8223:	48 01 c2             	add    %rax,%rdx
    8226:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
    822a:	48 89 50 08          	mov    %rdx,0x8(%rax)
    822e:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
    8232:	48 8b 50 08          	mov    0x8(%rax),%rdx
    8236:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
    823a:	48 8b 40 10          	mov    0x10(%rax),%rax
    823e:	48 39 c2             	cmp    %rax,%rdx
    8241:	0f 82 9f 00 00 00    	jb     82e6 <prvCopyDataToQueue+0x170>
    8247:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
    824b:	48 8b 10             	mov    (%rax),%rdx
    824e:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
    8252:	48 89 50 08          	mov    %rdx,0x8(%rax)
    8256:	e9 8b 00 00 00       	jmpq   82e6 <prvCopyDataToQueue+0x170>
    825b:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
    825f:	48 8b 90 80 00 00 00 	mov    0x80(%rax),%rdx
    8266:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
    826a:	48 8b 40 18          	mov    0x18(%rax),%rax
    826e:	48 8b 4d e0          	mov    -0x20(%rbp),%rcx
    8272:	48 89 ce             	mov    %rcx,%rsi
    8275:	48 89 c7             	mov    %rax,%rdi
    8278:	e8 33 a3 ff ff       	callq  25b0 <memcpy@plt>
    827d:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
    8281:	48 8b 50 18          	mov    0x18(%rax),%rdx
    8285:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
    8289:	48 8b 80 80 00 00 00 	mov    0x80(%rax),%rax
    8290:	48 f7 d8             	neg    %rax
    8293:	48 01 c2             	add    %rax,%rdx
    8296:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
    829a:	48 89 50 18          	mov    %rdx,0x18(%rax)
    829e:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
    82a2:	48 8b 50 18          	mov    0x18(%rax),%rdx
    82a6:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
    82aa:	48 8b 00             	mov    (%rax),%rax
    82ad:	48 39 c2             	cmp    %rax,%rdx
    82b0:	73 21                	jae    82d3 <prvCopyDataToQueue+0x15d>
    82b2:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
    82b6:	48 8b 50 10          	mov    0x10(%rax),%rdx
    82ba:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
    82be:	48 8b 80 80 00 00 00 	mov    0x80(%rax),%rax
    82c5:	48 f7 d8             	neg    %rax
    82c8:	48 01 c2             	add    %rax,%rdx
    82cb:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
    82cf:	48 89 50 18          	mov    %rdx,0x18(%rax)
    82d3:	48 83 7d d8 02       	cmpq   $0x2,-0x28(%rbp)
    82d8:	75 0c                	jne    82e6 <prvCopyDataToQueue+0x170>
    82da:	48 83 7d f8 00       	cmpq   $0x0,-0x8(%rbp)
    82df:	74 05                	je     82e6 <prvCopyDataToQueue+0x170>
    82e1:	48 83 6d f8 01       	subq   $0x1,-0x8(%rbp)
    82e6:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    82ea:	48 8d 50 01          	lea    0x1(%rax),%rdx
    82ee:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
    82f2:	48 89 50 70          	mov    %rdx,0x70(%rax)
    82f6:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
    82fa:	c9                   	leaveq 
    82fb:	c3                   	retq   

00000000000082fc <prvCopyDataFromQueue>:
    82fc:	f3 0f 1e fa          	endbr64 
    8300:	55                   	push   %rbp
    8301:	48 89 e5             	mov    %rsp,%rbp
    8304:	48 83 ec 10          	sub    $0x10,%rsp
    8308:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
    830c:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
    8310:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    8314:	48 8b 80 80 00 00 00 	mov    0x80(%rax),%rax
    831b:	48 85 c0             	test   %rax,%rax
    831e:	74 64                	je     8384 <prvCopyDataFromQueue+0x88>
    8320:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    8324:	48 8b 50 18          	mov    0x18(%rax),%rdx
    8328:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    832c:	48 8b 80 80 00 00 00 	mov    0x80(%rax),%rax
    8333:	48 01 c2             	add    %rax,%rdx
    8336:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    833a:	48 89 50 18          	mov    %rdx,0x18(%rax)
    833e:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    8342:	48 8b 50 18          	mov    0x18(%rax),%rdx
    8346:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    834a:	48 8b 40 10          	mov    0x10(%rax),%rax
    834e:	48 39 c2             	cmp    %rax,%rdx
    8351:	72 0f                	jb     8362 <prvCopyDataFromQueue+0x66>
    8353:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    8357:	48 8b 10             	mov    (%rax),%rdx
    835a:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    835e:	48 89 50 18          	mov    %rdx,0x18(%rax)
    8362:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    8366:	48 8b 90 80 00 00 00 	mov    0x80(%rax),%rdx
    836d:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    8371:	48 8b 48 18          	mov    0x18(%rax),%rcx
    8375:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
    8379:	48 89 ce             	mov    %rcx,%rsi
    837c:	48 89 c7             	mov    %rax,%rdi
    837f:	e8 2c a2 ff ff       	callq  25b0 <memcpy@plt>
    8384:	90                   	nop
    8385:	c9                   	leaveq 
    8386:	c3                   	retq   

0000000000008387 <prvUnlockQueue>:
    8387:	f3 0f 1e fa          	endbr64 
    838b:	55                   	push   %rbp
    838c:	48 89 e5             	mov    %rsp,%rbp
    838f:	48 83 ec 20          	sub    $0x20,%rsp
    8393:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
    8397:	e8 33 aa 00 00       	callq  12dcf <vPortEnterCritical>
    839c:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
    83a0:	0f b6 80 89 00 00 00 	movzbl 0x89(%rax),%eax
    83a7:	88 45 fe             	mov    %al,-0x2(%rbp)
    83aa:	eb 59                	jmp    8405 <prvUnlockQueue+0x7e>
    83ac:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
    83b0:	48 8b 80 90 00 00 00 	mov    0x90(%rax),%rax
    83b7:	48 85 c0             	test   %rax,%rax
    83ba:	74 18                	je     83d4 <prvUnlockQueue+0x4d>
    83bc:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
    83c0:	48 89 c7             	mov    %rax,%rdi
    83c3:	e8 8c 06 00 00       	callq  8a54 <prvNotifyQueueSetContainer>
    83c8:	48 85 c0             	test   %rax,%rax
    83cb:	74 2e                	je     83fb <prvUnlockQueue+0x74>
    83cd:	e8 f9 6c 00 00       	callq  f0cb <vTaskMissedYield>
    83d2:	eb 27                	jmp    83fb <prvUnlockQueue+0x74>
    83d4:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
    83d8:	48 8b 40 48          	mov    0x48(%rax),%rax
    83dc:	48 85 c0             	test   %rax,%rax
    83df:	74 2c                	je     840d <prvUnlockQueue+0x86>
    83e1:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
    83e5:	48 83 c0 48          	add    $0x48,%rax
    83e9:	48 89 c7             	mov    %rax,%rdi
    83ec:	e8 7d 65 00 00       	callq  e96e <xTaskRemoveFromEventList>
    83f1:	48 85 c0             	test   %rax,%rax
    83f4:	74 05                	je     83fb <prvUnlockQueue+0x74>
    83f6:	e8 d0 6c 00 00       	callq  f0cb <vTaskMissedYield>
    83fb:	0f b6 45 fe          	movzbl -0x2(%rbp),%eax
    83ff:	83 e8 01             	sub    $0x1,%eax
    8402:	88 45 fe             	mov    %al,-0x2(%rbp)
    8405:	80 7d fe 00          	cmpb   $0x0,-0x2(%rbp)
    8409:	7f a1                	jg     83ac <prvUnlockQueue+0x25>
    840b:	eb 01                	jmp    840e <prvUnlockQueue+0x87>
    840d:	90                   	nop
    840e:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
    8412:	c6 80 89 00 00 00 ff 	movb   $0xff,0x89(%rax)
    8419:	e8 df a9 00 00       	callq  12dfd <vPortExitCritical>
    841e:	e8 ac a9 00 00       	callq  12dcf <vPortEnterCritical>
    8423:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
    8427:	0f b6 80 88 00 00 00 	movzbl 0x88(%rax),%eax
    842e:	88 45 ff             	mov    %al,-0x1(%rbp)
    8431:	eb 31                	jmp    8464 <prvUnlockQueue+0xdd>
    8433:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
    8437:	48 8b 40 20          	mov    0x20(%rax),%rax
    843b:	48 85 c0             	test   %rax,%rax
    843e:	74 2c                	je     846c <prvUnlockQueue+0xe5>
    8440:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
    8444:	48 83 c0 20          	add    $0x20,%rax
    8448:	48 89 c7             	mov    %rax,%rdi
    844b:	e8 1e 65 00 00       	callq  e96e <xTaskRemoveFromEventList>
    8450:	48 85 c0             	test   %rax,%rax
    8453:	74 05                	je     845a <prvUnlockQueue+0xd3>
    8455:	e8 71 6c 00 00       	callq  f0cb <vTaskMissedYield>
    845a:	0f b6 45 ff          	movzbl -0x1(%rbp),%eax
    845e:	83 e8 01             	sub    $0x1,%eax
    8461:	88 45 ff             	mov    %al,-0x1(%rbp)
    8464:	80 7d ff 00          	cmpb   $0x0,-0x1(%rbp)
    8468:	7f c9                	jg     8433 <prvUnlockQueue+0xac>
    846a:	eb 01                	jmp    846d <prvUnlockQueue+0xe6>
    846c:	90                   	nop
    846d:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
    8471:	c6 80 88 00 00 00 ff 	movb   $0xff,0x88(%rax)
    8478:	e8 80 a9 00 00       	callq  12dfd <vPortExitCritical>
    847d:	90                   	nop
    847e:	c9                   	leaveq 
    847f:	c3                   	retq   

0000000000008480 <prvIsQueueEmpty>:
    8480:	f3 0f 1e fa          	endbr64 
    8484:	55                   	push   %rbp
    8485:	48 89 e5             	mov    %rsp,%rbp
    8488:	48 83 ec 20          	sub    $0x20,%rsp
    848c:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
    8490:	e8 3a a9 00 00       	callq  12dcf <vPortEnterCritical>
    8495:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
    8499:	48 8b 40 70          	mov    0x70(%rax),%rax
    849d:	48 85 c0             	test   %rax,%rax
    84a0:	75 0a                	jne    84ac <prvIsQueueEmpty+0x2c>
    84a2:	48 c7 45 f8 01 00 00 	movq   $0x1,-0x8(%rbp)
    84a9:	00 
    84aa:	eb 08                	jmp    84b4 <prvIsQueueEmpty+0x34>
    84ac:	48 c7 45 f8 00 00 00 	movq   $0x0,-0x8(%rbp)
    84b3:	00 
    84b4:	e8 44 a9 00 00       	callq  12dfd <vPortExitCritical>
    84b9:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    84bd:	c9                   	leaveq 
    84be:	c3                   	retq   

00000000000084bf <xQueueIsQueueEmptyFromISR>:
    84bf:	f3 0f 1e fa          	endbr64 
    84c3:	55                   	push   %rbp
    84c4:	48 89 e5             	mov    %rsp,%rbp
    84c7:	48 83 ec 20          	sub    $0x20,%rsp
    84cb:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
    84cf:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
    84d3:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
    84d7:	48 83 7d f8 00       	cmpq   $0x0,-0x8(%rbp)
    84dc:	75 11                	jne    84ef <xQueueIsQueueEmptyFromISR+0x30>
    84de:	be 6a 09 00 00       	mov    $0x96a,%esi
    84e3:	48 8d 3d 3e f3 01 00 	lea    0x1f33e(%rip),%rdi        # 27828 <_IO_stdin_used+0x828>
    84ea:	e8 1d b8 ff ff       	callq  3d0c <vAssertCalled>
    84ef:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    84f3:	48 8b 40 70          	mov    0x70(%rax),%rax
    84f7:	48 85 c0             	test   %rax,%rax
    84fa:	75 0a                	jne    8506 <xQueueIsQueueEmptyFromISR+0x47>
    84fc:	48 c7 45 f0 01 00 00 	movq   $0x1,-0x10(%rbp)
    8503:	00 
    8504:	eb 08                	jmp    850e <xQueueIsQueueEmptyFromISR+0x4f>
    8506:	48 c7 45 f0 00 00 00 	movq   $0x0,-0x10(%rbp)
    850d:	00 
    850e:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
    8512:	c9                   	leaveq 
    8513:	c3                   	retq   

0000000000008514 <prvIsQueueFull>:
    8514:	f3 0f 1e fa          	endbr64 
    8518:	55                   	push   %rbp
    8519:	48 89 e5             	mov    %rsp,%rbp
    851c:	48 83 ec 20          	sub    $0x20,%rsp
    8520:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
    8524:	e8 a6 a8 00 00       	callq  12dcf <vPortEnterCritical>
    8529:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
    852d:	48 8b 50 70          	mov    0x70(%rax),%rdx
    8531:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
    8535:	48 8b 40 78          	mov    0x78(%rax),%rax
    8539:	48 39 c2             	cmp    %rax,%rdx
    853c:	75 0a                	jne    8548 <prvIsQueueFull+0x34>
    853e:	48 c7 45 f8 01 00 00 	movq   $0x1,-0x8(%rbp)
    8545:	00 
    8546:	eb 08                	jmp    8550 <prvIsQueueFull+0x3c>
    8548:	48 c7 45 f8 00 00 00 	movq   $0x0,-0x8(%rbp)
    854f:	00 
    8550:	e8 a8 a8 00 00       	callq  12dfd <vPortExitCritical>
    8555:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    8559:	c9                   	leaveq 
    855a:	c3                   	retq   

000000000000855b <xQueueIsQueueFullFromISR>:
    855b:	f3 0f 1e fa          	endbr64 
    855f:	55                   	push   %rbp
    8560:	48 89 e5             	mov    %rsp,%rbp
    8563:	48 83 ec 20          	sub    $0x20,%rsp
    8567:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
    856b:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
    856f:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
    8573:	48 83 7d f8 00       	cmpq   $0x0,-0x8(%rbp)
    8578:	75 11                	jne    858b <xQueueIsQueueFullFromISR+0x30>
    857a:	be 93 09 00 00       	mov    $0x993,%esi
    857f:	48 8d 3d a2 f2 01 00 	lea    0x1f2a2(%rip),%rdi        # 27828 <_IO_stdin_used+0x828>
    8586:	e8 81 b7 ff ff       	callq  3d0c <vAssertCalled>
    858b:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    858f:	48 8b 50 70          	mov    0x70(%rax),%rdx
    8593:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    8597:	48 8b 40 78          	mov    0x78(%rax),%rax
    859b:	48 39 c2             	cmp    %rax,%rdx
    859e:	75 0a                	jne    85aa <xQueueIsQueueFullFromISR+0x4f>
    85a0:	48 c7 45 f0 01 00 00 	movq   $0x1,-0x10(%rbp)
    85a7:	00 
    85a8:	eb 08                	jmp    85b2 <xQueueIsQueueFullFromISR+0x57>
    85aa:	48 c7 45 f0 00 00 00 	movq   $0x0,-0x10(%rbp)
    85b1:	00 
    85b2:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
    85b6:	c9                   	leaveq 
    85b7:	c3                   	retq   

00000000000085b8 <vQueueAddToRegistry>:
    85b8:	f3 0f 1e fa          	endbr64 
    85bc:	55                   	push   %rbp
    85bd:	48 89 e5             	mov    %rsp,%rbp
    85c0:	53                   	push   %rbx
    85c1:	48 83 ec 28          	sub    $0x28,%rsp
    85c5:	48 89 7d d8          	mov    %rdi,-0x28(%rbp)
    85c9:	48 89 75 d0          	mov    %rsi,-0x30(%rbp)
    85cd:	48 83 7d d8 00       	cmpq   $0x0,-0x28(%rbp)
    85d2:	75 11                	jne    85e5 <vQueueAddToRegistry+0x2d>
    85d4:	be c8 0a 00 00       	mov    $0xac8,%esi
    85d9:	48 8d 3d 48 f2 01 00 	lea    0x1f248(%rip),%rdi        # 27828 <_IO_stdin_used+0x828>
    85e0:	e8 27 b7 ff ff       	callq  3d0c <vAssertCalled>
    85e5:	48 c7 45 e8 00 00 00 	movq   $0x0,-0x18(%rbp)
    85ec:	00 
    85ed:	48 83 7d d0 00       	cmpq   $0x0,-0x30(%rbp)
    85f2:	0f 84 88 00 00 00    	je     8680 <vQueueAddToRegistry+0xc8>
    85f8:	48 c7 45 e0 00 00 00 	movq   $0x0,-0x20(%rbp)
    85ff:	00 
    8600:	eb 77                	jmp    8679 <vQueueAddToRegistry+0xc1>
    8602:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
    8606:	48 c1 e0 04          	shl    $0x4,%rax
    860a:	48 89 c2             	mov    %rax,%rdx
    860d:	48 8d 05 b4 f5 12 00 	lea    0x12f5b4(%rip),%rax        # 137bc8 <xQueueRegistry+0x8>
    8614:	48 8b 04 02          	mov    (%rdx,%rax,1),%rax
    8618:	48 39 45 d8          	cmp    %rax,-0x28(%rbp)
    861c:	75 1b                	jne    8639 <vQueueAddToRegistry+0x81>
    861e:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
    8622:	48 c1 e0 04          	shl    $0x4,%rax
    8626:	48 89 c2             	mov    %rax,%rdx
    8629:	48 8d 05 90 f5 12 00 	lea    0x12f590(%rip),%rax        # 137bc0 <xQueueRegistry>
    8630:	48 01 d0             	add    %rdx,%rax
    8633:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
    8637:	eb 47                	jmp    8680 <vQueueAddToRegistry+0xc8>
    8639:	48 83 7d e8 00       	cmpq   $0x0,-0x18(%rbp)
    863e:	75 34                	jne    8674 <vQueueAddToRegistry+0xbc>
    8640:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
    8644:	48 c1 e0 04          	shl    $0x4,%rax
    8648:	48 89 c2             	mov    %rax,%rdx
    864b:	48 8d 05 6e f5 12 00 	lea    0x12f56e(%rip),%rax        # 137bc0 <xQueueRegistry>
    8652:	48 8b 04 02          	mov    (%rdx,%rax,1),%rax
    8656:	48 85 c0             	test   %rax,%rax
    8659:	75 19                	jne    8674 <vQueueAddToRegistry+0xbc>
    865b:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
    865f:	48 c1 e0 04          	shl    $0x4,%rax
    8663:	48 89 c2             	mov    %rax,%rdx
    8666:	48 8d 05 53 f5 12 00 	lea    0x12f553(%rip),%rax        # 137bc0 <xQueueRegistry>
    866d:	48 01 d0             	add    %rdx,%rax
    8670:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
    8674:	48 83 45 e0 01       	addq   $0x1,-0x20(%rbp)
    8679:	48 83 7d e0 13       	cmpq   $0x13,-0x20(%rbp)
    867e:	76 82                	jbe    8602 <vQueueAddToRegistry+0x4a>
    8680:	48 83 7d e8 00       	cmpq   $0x0,-0x18(%rbp)
    8685:	74 52                	je     86d9 <vQueueAddToRegistry+0x121>
    8687:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
    868b:	48 8b 55 d0          	mov    -0x30(%rbp),%rdx
    868f:	48 89 10             	mov    %rdx,(%rax)
    8692:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
    8696:	48 8b 55 d8          	mov    -0x28(%rbp),%rdx
    869a:	48 89 50 08          	mov    %rdx,0x8(%rax)
    869e:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
    86a2:	48 89 c7             	mov    %rax,%rdi
    86a5:	e8 59 ab 01 00       	callq  23203 <prvTraceGetQueueNumberLow16>
    86aa:	0f b6 d8             	movzbl %al,%ebx
    86ad:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
    86b1:	48 89 c7             	mov    %rax,%rdi
    86b4:	e8 66 aa 01 00       	callq  2311f <prvTraceGetQueueType>
    86b9:	0f b6 c0             	movzbl %al,%eax
    86bc:	48 98                	cltq   
    86be:	48 8d 15 0b 8a 02 00 	lea    0x28a0b(%rip),%rdx        # 310d0 <TraceQueueClassTable>
    86c5:	0f b6 04 10          	movzbl (%rax,%rdx,1),%eax
    86c9:	0f b6 c0             	movzbl %al,%eax
    86cc:	48 8b 55 d0          	mov    -0x30(%rbp),%rdx
    86d0:	89 de                	mov    %ebx,%esi
    86d2:	89 c7                	mov    %eax,%edi
    86d4:	e8 d2 da 01 00       	callq  261ab <prvTraceSetObjectName>
    86d9:	90                   	nop
    86da:	48 83 c4 28          	add    $0x28,%rsp
    86de:	5b                   	pop    %rbx
    86df:	5d                   	pop    %rbp
    86e0:	c3                   	retq   

00000000000086e1 <pcQueueGetName>:
    86e1:	f3 0f 1e fa          	endbr64 
    86e5:	55                   	push   %rbp
    86e6:	48 89 e5             	mov    %rsp,%rbp
    86e9:	48 83 ec 20          	sub    $0x20,%rsp
    86ed:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
    86f1:	48 c7 45 f8 00 00 00 	movq   $0x0,-0x8(%rbp)
    86f8:	00 
    86f9:	48 83 7d e8 00       	cmpq   $0x0,-0x18(%rbp)
    86fe:	75 11                	jne    8711 <pcQueueGetName+0x30>
    8700:	be f8 0a 00 00       	mov    $0xaf8,%esi
    8705:	48 8d 3d 1c f1 01 00 	lea    0x1f11c(%rip),%rdi        # 27828 <_IO_stdin_used+0x828>
    870c:	e8 fb b5 ff ff       	callq  3d0c <vAssertCalled>
    8711:	48 c7 45 f0 00 00 00 	movq   $0x0,-0x10(%rbp)
    8718:	00 
    8719:	eb 3d                	jmp    8758 <pcQueueGetName+0x77>
    871b:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
    871f:	48 c1 e0 04          	shl    $0x4,%rax
    8723:	48 89 c2             	mov    %rax,%rdx
    8726:	48 8d 05 9b f4 12 00 	lea    0x12f49b(%rip),%rax        # 137bc8 <xQueueRegistry+0x8>
    872d:	48 8b 04 02          	mov    (%rdx,%rax,1),%rax
    8731:	48 39 45 e8          	cmp    %rax,-0x18(%rbp)
    8735:	75 1c                	jne    8753 <pcQueueGetName+0x72>
    8737:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
    873b:	48 c1 e0 04          	shl    $0x4,%rax
    873f:	48 89 c2             	mov    %rax,%rdx
    8742:	48 8d 05 77 f4 12 00 	lea    0x12f477(%rip),%rax        # 137bc0 <xQueueRegistry>
    8749:	48 8b 04 02          	mov    (%rdx,%rax,1),%rax
    874d:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
    8751:	eb 0c                	jmp    875f <pcQueueGetName+0x7e>
    8753:	48 83 45 f0 01       	addq   $0x1,-0x10(%rbp)
    8758:	48 83 7d f0 13       	cmpq   $0x13,-0x10(%rbp)
    875d:	76 bc                	jbe    871b <pcQueueGetName+0x3a>
    875f:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    8763:	c9                   	leaveq 
    8764:	c3                   	retq   

0000000000008765 <vQueueUnregisterQueue>:
    8765:	f3 0f 1e fa          	endbr64 
    8769:	55                   	push   %rbp
    876a:	48 89 e5             	mov    %rsp,%rbp
    876d:	48 83 ec 20          	sub    $0x20,%rsp
    8771:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
    8775:	48 83 7d e8 00       	cmpq   $0x0,-0x18(%rbp)
    877a:	75 11                	jne    878d <vQueueUnregisterQueue+0x28>
    877c:	be 16 0b 00 00       	mov    $0xb16,%esi
    8781:	48 8d 3d a0 f0 01 00 	lea    0x1f0a0(%rip),%rdi        # 27828 <_IO_stdin_used+0x828>
    8788:	e8 7f b5 ff ff       	callq  3d0c <vAssertCalled>
    878d:	48 c7 45 f8 00 00 00 	movq   $0x0,-0x8(%rbp)
    8794:	00 
    8795:	eb 57                	jmp    87ee <vQueueUnregisterQueue+0x89>
    8797:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    879b:	48 c1 e0 04          	shl    $0x4,%rax
    879f:	48 89 c2             	mov    %rax,%rdx
    87a2:	48 8d 05 1f f4 12 00 	lea    0x12f41f(%rip),%rax        # 137bc8 <xQueueRegistry+0x8>
    87a9:	48 8b 04 02          	mov    (%rdx,%rax,1),%rax
    87ad:	48 39 45 e8          	cmp    %rax,-0x18(%rbp)
    87b1:	75 36                	jne    87e9 <vQueueUnregisterQueue+0x84>
    87b3:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    87b7:	48 c1 e0 04          	shl    $0x4,%rax
    87bb:	48 89 c2             	mov    %rax,%rdx
    87be:	48 8d 05 fb f3 12 00 	lea    0x12f3fb(%rip),%rax        # 137bc0 <xQueueRegistry>
    87c5:	48 c7 04 02 00 00 00 	movq   $0x0,(%rdx,%rax,1)
    87cc:	00 
    87cd:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    87d1:	48 c1 e0 04          	shl    $0x4,%rax
    87d5:	48 89 c2             	mov    %rax,%rdx
    87d8:	48 8d 05 e9 f3 12 00 	lea    0x12f3e9(%rip),%rax        # 137bc8 <xQueueRegistry+0x8>
    87df:	48 c7 04 02 00 00 00 	movq   $0x0,(%rdx,%rax,1)
    87e6:	00 
    87e7:	eb 0d                	jmp    87f6 <vQueueUnregisterQueue+0x91>
    87e9:	48 83 45 f8 01       	addq   $0x1,-0x8(%rbp)
    87ee:	48 83 7d f8 13       	cmpq   $0x13,-0x8(%rbp)
    87f3:	76 a2                	jbe    8797 <vQueueUnregisterQueue+0x32>
    87f5:	90                   	nop
    87f6:	90                   	nop
    87f7:	c9                   	leaveq 
    87f8:	c3                   	retq   

00000000000087f9 <vQueueWaitForMessageRestricted>:
    87f9:	f3 0f 1e fa          	endbr64 
    87fd:	55                   	push   %rbp
    87fe:	48 89 e5             	mov    %rsp,%rbp
    8801:	48 83 ec 30          	sub    $0x30,%rsp
    8805:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
    8809:	48 89 75 e0          	mov    %rsi,-0x20(%rbp)
    880d:	48 89 55 d8          	mov    %rdx,-0x28(%rbp)
    8811:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
    8815:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
    8819:	e8 b1 a5 00 00       	callq  12dcf <vPortEnterCritical>
    881e:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    8822:	0f b6 80 88 00 00 00 	movzbl 0x88(%rax),%eax
    8829:	3c ff                	cmp    $0xff,%al
    882b:	75 0b                	jne    8838 <vQueueWaitForMessageRestricted+0x3f>
    882d:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    8831:	c6 80 88 00 00 00 00 	movb   $0x0,0x88(%rax)
    8838:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    883c:	0f b6 80 89 00 00 00 	movzbl 0x89(%rax),%eax
    8843:	3c ff                	cmp    $0xff,%al
    8845:	75 0b                	jne    8852 <vQueueWaitForMessageRestricted+0x59>
    8847:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    884b:	c6 80 89 00 00 00 00 	movb   $0x0,0x89(%rax)
    8852:	e8 a6 a5 00 00       	callq  12dfd <vPortExitCritical>
    8857:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    885b:	48 8b 40 70          	mov    0x70(%rax),%rax
    885f:	48 85 c0             	test   %rax,%rax
    8862:	75 1b                	jne    887f <vQueueWaitForMessageRestricted+0x86>
    8864:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    8868:	48 8d 48 48          	lea    0x48(%rax),%rcx
    886c:	48 8b 55 d8          	mov    -0x28(%rbp),%rdx
    8870:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
    8874:	48 89 c6             	mov    %rax,%rsi
    8877:	48 89 cf             	mov    %rcx,%rdi
    887a:	e8 9e 5f 00 00       	callq  e81d <vTaskPlaceOnEventListRestricted>
    887f:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    8883:	48 89 c7             	mov    %rax,%rdi
    8886:	e8 fc fa ff ff       	callq  8387 <prvUnlockQueue>
    888b:	90                   	nop
    888c:	c9                   	leaveq 
    888d:	c3                   	retq   

000000000000888e <xQueueCreateSet>:
    888e:	f3 0f 1e fa          	endbr64 
    8892:	55                   	push   %rbp
    8893:	48 89 e5             	mov    %rsp,%rbp
    8896:	48 83 ec 20          	sub    $0x20,%rsp
    889a:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
    889e:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
    88a2:	ba 00 00 00 00       	mov    $0x0,%edx
    88a7:	be 08 00 00 00       	mov    $0x8,%esi
    88ac:	48 89 c7             	mov    %rax,%rdi
    88af:	e8 3f cd ff ff       	callq  55f3 <xQueueGenericCreate>
    88b4:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
    88b8:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    88bc:	c9                   	leaveq 
    88bd:	c3                   	retq   

00000000000088be <xQueueAddToSet>:
    88be:	f3 0f 1e fa          	endbr64 
    88c2:	55                   	push   %rbp
    88c3:	48 89 e5             	mov    %rsp,%rbp
    88c6:	48 83 ec 20          	sub    $0x20,%rsp
    88ca:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
    88ce:	48 89 75 e0          	mov    %rsi,-0x20(%rbp)
    88d2:	e8 f8 a4 00 00       	callq  12dcf <vPortEnterCritical>
    88d7:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
    88db:	48 8b 80 90 00 00 00 	mov    0x90(%rax),%rax
    88e2:	48 85 c0             	test   %rax,%rax
    88e5:	74 0a                	je     88f1 <xQueueAddToSet+0x33>
    88e7:	48 c7 45 f8 00 00 00 	movq   $0x0,-0x8(%rbp)
    88ee:	00 
    88ef:	eb 2e                	jmp    891f <xQueueAddToSet+0x61>
    88f1:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
    88f5:	48 8b 40 70          	mov    0x70(%rax),%rax
    88f9:	48 85 c0             	test   %rax,%rax
    88fc:	74 0a                	je     8908 <xQueueAddToSet+0x4a>
    88fe:	48 c7 45 f8 00 00 00 	movq   $0x0,-0x8(%rbp)
    8905:	00 
    8906:	eb 17                	jmp    891f <xQueueAddToSet+0x61>
    8908:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
    890c:	48 8b 55 e0          	mov    -0x20(%rbp),%rdx
    8910:	48 89 90 90 00 00 00 	mov    %rdx,0x90(%rax)
    8917:	48 c7 45 f8 01 00 00 	movq   $0x1,-0x8(%rbp)
    891e:	00 
    891f:	e8 d9 a4 00 00       	callq  12dfd <vPortExitCritical>
    8924:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    8928:	c9                   	leaveq 
    8929:	c3                   	retq   

000000000000892a <xQueueRemoveFromSet>:
    892a:	f3 0f 1e fa          	endbr64 
    892e:	55                   	push   %rbp
    892f:	48 89 e5             	mov    %rsp,%rbp
    8932:	48 83 ec 20          	sub    $0x20,%rsp
    8936:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
    893a:	48 89 75 e0          	mov    %rsi,-0x20(%rbp)
    893e:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
    8942:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
    8946:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    894a:	48 8b 80 90 00 00 00 	mov    0x90(%rax),%rax
    8951:	48 39 45 e0          	cmp    %rax,-0x20(%rbp)
    8955:	74 0a                	je     8961 <xQueueRemoveFromSet+0x37>
    8957:	48 c7 45 f0 00 00 00 	movq   $0x0,-0x10(%rbp)
    895e:	00 
    895f:	eb 38                	jmp    8999 <xQueueRemoveFromSet+0x6f>
    8961:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    8965:	48 8b 40 70          	mov    0x70(%rax),%rax
    8969:	48 85 c0             	test   %rax,%rax
    896c:	74 0a                	je     8978 <xQueueRemoveFromSet+0x4e>
    896e:	48 c7 45 f0 00 00 00 	movq   $0x0,-0x10(%rbp)
    8975:	00 
    8976:	eb 21                	jmp    8999 <xQueueRemoveFromSet+0x6f>
    8978:	e8 52 a4 00 00       	callq  12dcf <vPortEnterCritical>
    897d:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    8981:	48 c7 80 90 00 00 00 	movq   $0x0,0x90(%rax)
    8988:	00 00 00 00 
    898c:	e8 6c a4 00 00       	callq  12dfd <vPortExitCritical>
    8991:	48 c7 45 f0 01 00 00 	movq   $0x1,-0x10(%rbp)
    8998:	00 
    8999:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
    899d:	c9                   	leaveq 
    899e:	c3                   	retq   

000000000000899f <xQueueSelectFromSet>:
    899f:	f3 0f 1e fa          	endbr64 
    89a3:	55                   	push   %rbp
    89a4:	48 89 e5             	mov    %rsp,%rbp
    89a7:	48 83 ec 20          	sub    $0x20,%rsp
    89ab:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
    89af:	48 89 75 e0          	mov    %rsi,-0x20(%rbp)
    89b3:	64 48 8b 04 25 28 00 	mov    %fs:0x28,%rax
    89ba:	00 00 
    89bc:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
    89c0:	31 c0                	xor    %eax,%eax
    89c2:	48 c7 45 f0 00 00 00 	movq   $0x0,-0x10(%rbp)
    89c9:	00 
    89ca:	48 8b 55 e0          	mov    -0x20(%rbp),%rdx
    89ce:	48 8d 4d f0          	lea    -0x10(%rbp),%rcx
    89d2:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
    89d6:	48 89 ce             	mov    %rcx,%rsi
    89d9:	48 89 c7             	mov    %rax,%rdi
    89dc:	e8 02 e0 ff ff       	callq  69e3 <xQueueReceive>
    89e1:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
    89e5:	48 8b 4d f8          	mov    -0x8(%rbp),%rcx
    89e9:	64 48 33 0c 25 28 00 	xor    %fs:0x28,%rcx
    89f0:	00 00 
    89f2:	74 05                	je     89f9 <xQueueSelectFromSet+0x5a>
    89f4:	e8 d7 9a ff ff       	callq  24d0 <__stack_chk_fail@plt>
    89f9:	c9                   	leaveq 
    89fa:	c3                   	retq   

00000000000089fb <xQueueSelectFromSetFromISR>:
    89fb:	f3 0f 1e fa          	endbr64 
    89ff:	55                   	push   %rbp
    8a00:	48 89 e5             	mov    %rsp,%rbp
    8a03:	48 83 ec 20          	sub    $0x20,%rsp
    8a07:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
    8a0b:	64 48 8b 04 25 28 00 	mov    %fs:0x28,%rax
    8a12:	00 00 
    8a14:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
    8a18:	31 c0                	xor    %eax,%eax
    8a1a:	48 c7 45 f0 00 00 00 	movq   $0x0,-0x10(%rbp)
    8a21:	00 
    8a22:	48 8d 4d f0          	lea    -0x10(%rbp),%rcx
    8a26:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
    8a2a:	ba 00 00 00 00       	mov    $0x0,%edx
    8a2f:	48 89 ce             	mov    %rcx,%rsi
    8a32:	48 89 c7             	mov    %rax,%rdi
    8a35:	e8 56 f0 ff ff       	callq  7a90 <xQueueReceiveFromISR>
    8a3a:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
    8a3e:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
    8a42:	64 48 33 14 25 28 00 	xor    %fs:0x28,%rdx
    8a49:	00 00 
    8a4b:	74 05                	je     8a52 <xQueueSelectFromSetFromISR+0x57>
    8a4d:	e8 7e 9a ff ff       	callq  24d0 <__stack_chk_fail@plt>
    8a52:	c9                   	leaveq 
    8a53:	c3                   	retq   

0000000000008a54 <prvNotifyQueueSetContainer>:
    8a54:	f3 0f 1e fa          	endbr64 
    8a58:	55                   	push   %rbp
    8a59:	48 89 e5             	mov    %rsp,%rbp
    8a5c:	41 54                	push   %r12
    8a5e:	53                   	push   %rbx
    8a5f:	48 83 ec 30          	sub    $0x30,%rsp
    8a63:	48 89 7d c8          	mov    %rdi,-0x38(%rbp)
    8a67:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
    8a6b:	48 8b 80 90 00 00 00 	mov    0x90(%rax),%rax
    8a72:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
    8a76:	48 c7 45 e0 00 00 00 	movq   $0x0,-0x20(%rbp)
    8a7d:	00 
    8a7e:	48 83 7d e8 00       	cmpq   $0x0,-0x18(%rbp)
    8a83:	75 11                	jne    8a96 <prvNotifyQueueSetContainer+0x42>
    8a85:	be d5 0b 00 00       	mov    $0xbd5,%esi
    8a8a:	48 8d 3d 97 ed 01 00 	lea    0x1ed97(%rip),%rdi        # 27828 <_IO_stdin_used+0x828>
    8a91:	e8 76 b2 ff ff       	callq  3d0c <vAssertCalled>
    8a96:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
    8a9a:	48 8b 50 70          	mov    0x70(%rax),%rdx
    8a9e:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
    8aa2:	48 8b 40 78          	mov    0x78(%rax),%rax
    8aa6:	48 39 c2             	cmp    %rax,%rdx
    8aa9:	72 11                	jb     8abc <prvNotifyQueueSetContainer+0x68>
    8aab:	be d6 0b 00 00       	mov    $0xbd6,%esi
    8ab0:	48 8d 3d 71 ed 01 00 	lea    0x1ed71(%rip),%rdi        # 27828 <_IO_stdin_used+0x828>
    8ab7:	e8 50 b2 ff ff       	callq  3d0c <vAssertCalled>
    8abc:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
    8ac0:	48 8b 50 70          	mov    0x70(%rax),%rdx
    8ac4:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
    8ac8:	48 8b 40 78          	mov    0x78(%rax),%rax
    8acc:	48 39 c2             	cmp    %rax,%rdx
    8acf:	0f 83 61 01 00 00    	jae    8c36 <prvNotifyQueueSetContainer+0x1e2>
    8ad5:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
    8ad9:	0f b6 80 89 00 00 00 	movzbl 0x89(%rax),%eax
    8ae0:	88 45 df             	mov    %al,-0x21(%rbp)
    8ae3:	e8 74 ab 01 00       	callq  2365c <prvTraceGetCurrentTaskHandle>
    8ae8:	48 89 c7             	mov    %rax,%rdi
    8aeb:	e8 6b a6 01 00       	callq  2315b <prvTraceGetTaskNumberHigh16>
    8af0:	0f b7 15 e5 85 02 00 	movzwl 0x285e5(%rip),%edx        # 310dc <CurrentFilterMask>
    8af7:	21 d0                	and    %edx,%eax
    8af9:	66 85 c0             	test   %ax,%ax
    8afc:	74 77                	je     8b75 <prvNotifyQueueSetContainer+0x121>
    8afe:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
    8b02:	48 89 c7             	mov    %rax,%rdi
    8b05:	e8 17 a7 01 00       	callq  23221 <prvTraceGetQueueNumberHigh16>
    8b0a:	0f b7 15 cb 85 02 00 	movzwl 0x285cb(%rip),%edx        # 310dc <CurrentFilterMask>
    8b11:	21 d0                	and    %edx,%eax
    8b13:	66 85 c0             	test   %ax,%ax
    8b16:	74 5d                	je     8b75 <prvNotifyQueueSetContainer+0x121>
    8b18:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
    8b1c:	48 89 c7             	mov    %rax,%rdi
    8b1f:	e8 df a6 01 00       	callq  23203 <prvTraceGetQueueNumberLow16>
    8b24:	44 0f b6 e0          	movzbl %al,%r12d
    8b28:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
    8b2c:	48 89 c7             	mov    %rax,%rdi
    8b2f:	e8 eb a5 01 00       	callq  2311f <prvTraceGetQueueType>
    8b34:	0f b6 c0             	movzbl %al,%eax
    8b37:	48 98                	cltq   
    8b39:	48 8d 15 90 85 02 00 	lea    0x28590(%rip),%rdx        # 310d0 <TraceQueueClassTable>
    8b40:	0f b6 04 10          	movzbl (%rax,%rdx,1),%eax
    8b44:	0f b6 d8             	movzbl %al,%ebx
    8b47:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
    8b4b:	48 89 c7             	mov    %rax,%rdi
    8b4e:	e8 cc a5 01 00       	callq  2311f <prvTraceGetQueueType>
    8b53:	0f b6 c0             	movzbl %al,%eax
    8b56:	48 98                	cltq   
    8b58:	48 8d 15 71 85 02 00 	lea    0x28571(%rip),%rdx        # 310d0 <TraceQueueClassTable>
    8b5f:	0f b6 04 10          	movzbl (%rax,%rdx,1),%eax
    8b63:	83 c0 20             	add    $0x20,%eax
    8b66:	0f b6 c0             	movzbl %al,%eax
    8b69:	44 89 e2             	mov    %r12d,%edx
    8b6c:	89 de                	mov    %ebx,%esi
    8b6e:	89 c7                	mov    %eax,%edi
    8b70:	e8 dd c4 01 00       	callq  25052 <prvTraceStoreKernelCall>
    8b75:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
    8b79:	48 8b 40 70          	mov    0x70(%rax),%rax
    8b7d:	83 c0 01             	add    $0x1,%eax
    8b80:	44 0f b6 e0          	movzbl %al,%r12d
    8b84:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
    8b88:	48 89 c7             	mov    %rax,%rdi
    8b8b:	e8 73 a6 01 00       	callq  23203 <prvTraceGetQueueNumberLow16>
    8b90:	0f b6 d8             	movzbl %al,%ebx
    8b93:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
    8b97:	48 89 c7             	mov    %rax,%rdi
    8b9a:	e8 80 a5 01 00       	callq  2311f <prvTraceGetQueueType>
    8b9f:	0f b6 c0             	movzbl %al,%eax
    8ba2:	48 98                	cltq   
    8ba4:	48 8d 15 25 85 02 00 	lea    0x28525(%rip),%rdx        # 310d0 <TraceQueueClassTable>
    8bab:	0f b6 04 10          	movzbl (%rax,%rdx,1),%eax
    8baf:	0f b6 c0             	movzbl %al,%eax
    8bb2:	44 89 e2             	mov    %r12d,%edx
    8bb5:	89 de                	mov    %ebx,%esi
    8bb7:	89 c7                	mov    %eax,%edi
    8bb9:	e8 ce cc 01 00       	callq  2588c <prvTraceSetObjectState>
    8bbe:	48 8d 4d c8          	lea    -0x38(%rbp),%rcx
    8bc2:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
    8bc6:	ba 00 00 00 00       	mov    $0x0,%edx
    8bcb:	48 89 ce             	mov    %rcx,%rsi
    8bce:	48 89 c7             	mov    %rax,%rdi
    8bd1:	e8 a0 f5 ff ff       	callq  8176 <prvCopyDataToQueue>
    8bd6:	48 89 45 e0          	mov    %rax,-0x20(%rbp)
    8bda:	80 7d df ff          	cmpb   $0xff,-0x21(%rbp)
    8bde:	75 2c                	jne    8c0c <prvNotifyQueueSetContainer+0x1b8>
    8be0:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
    8be4:	48 8b 40 48          	mov    0x48(%rax),%rax
    8be8:	48 85 c0             	test   %rax,%rax
    8beb:	74 49                	je     8c36 <prvNotifyQueueSetContainer+0x1e2>
    8bed:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
    8bf1:	48 83 c0 48          	add    $0x48,%rax
    8bf5:	48 89 c7             	mov    %rax,%rdi
    8bf8:	e8 71 5d 00 00       	callq  e96e <xTaskRemoveFromEventList>
    8bfd:	48 85 c0             	test   %rax,%rax
    8c00:	74 34                	je     8c36 <prvNotifyQueueSetContainer+0x1e2>
    8c02:	48 c7 45 e0 01 00 00 	movq   $0x1,-0x20(%rbp)
    8c09:	00 
    8c0a:	eb 2a                	jmp    8c36 <prvNotifyQueueSetContainer+0x1e2>
    8c0c:	80 7d df 7f          	cmpb   $0x7f,-0x21(%rbp)
    8c10:	75 11                	jne    8c23 <prvNotifyQueueSetContainer+0x1cf>
    8c12:	be f6 0b 00 00       	mov    $0xbf6,%esi
    8c17:	48 8d 3d 0a ec 01 00 	lea    0x1ec0a(%rip),%rdi        # 27828 <_IO_stdin_used+0x828>
    8c1e:	e8 e9 b0 ff ff       	callq  3d0c <vAssertCalled>
    8c23:	0f b6 45 df          	movzbl -0x21(%rbp),%eax
    8c27:	83 c0 01             	add    $0x1,%eax
    8c2a:	89 c2                	mov    %eax,%edx
    8c2c:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
    8c30:	88 90 89 00 00 00    	mov    %dl,0x89(%rax)
    8c36:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
    8c3a:	48 83 c4 30          	add    $0x30,%rsp
    8c3e:	5b                   	pop    %rbx
    8c3f:	41 5c                	pop    %r12
    8c41:	5d                   	pop    %rbp
    8c42:	c3                   	retq   

0000000000008c43 <vListInitialise>:
    8c43:	f3 0f 1e fa          	endbr64 
    8c47:	55                   	push   %rbp
    8c48:	48 89 e5             	mov    %rsp,%rbp
    8c4b:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
    8c4f:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    8c53:	48 8d 50 10          	lea    0x10(%rax),%rdx
    8c57:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    8c5b:	48 89 50 08          	mov    %rdx,0x8(%rax)
    8c5f:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    8c63:	48 c7 40 10 ff ff ff 	movq   $0xffffffffffffffff,0x10(%rax)
    8c6a:	ff 
    8c6b:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    8c6f:	48 8d 50 10          	lea    0x10(%rax),%rdx
    8c73:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    8c77:	48 89 50 18          	mov    %rdx,0x18(%rax)
    8c7b:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    8c7f:	48 8d 50 10          	lea    0x10(%rax),%rdx
    8c83:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    8c87:	48 89 50 20          	mov    %rdx,0x20(%rax)
    8c8b:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    8c8f:	48 c7 00 00 00 00 00 	movq   $0x0,(%rax)
    8c96:	90                   	nop
    8c97:	5d                   	pop    %rbp
    8c98:	c3                   	retq   

0000000000008c99 <vListInitialiseItem>:
    8c99:	f3 0f 1e fa          	endbr64 
    8c9d:	55                   	push   %rbp
    8c9e:	48 89 e5             	mov    %rsp,%rbp
    8ca1:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
    8ca5:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    8ca9:	48 c7 40 20 00 00 00 	movq   $0x0,0x20(%rax)
    8cb0:	00 
    8cb1:	90                   	nop
    8cb2:	5d                   	pop    %rbp
    8cb3:	c3                   	retq   

0000000000008cb4 <vListInsertEnd>:
    8cb4:	f3 0f 1e fa          	endbr64 
    8cb8:	55                   	push   %rbp
    8cb9:	48 89 e5             	mov    %rsp,%rbp
    8cbc:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
    8cc0:	48 89 75 e0          	mov    %rsi,-0x20(%rbp)
    8cc4:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
    8cc8:	48 8b 40 08          	mov    0x8(%rax),%rax
    8ccc:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
    8cd0:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
    8cd4:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
    8cd8:	48 89 50 08          	mov    %rdx,0x8(%rax)
    8cdc:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    8ce0:	48 8b 50 10          	mov    0x10(%rax),%rdx
    8ce4:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
    8ce8:	48 89 50 10          	mov    %rdx,0x10(%rax)
    8cec:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    8cf0:	48 8b 40 10          	mov    0x10(%rax),%rax
    8cf4:	48 8b 55 e0          	mov    -0x20(%rbp),%rdx
    8cf8:	48 89 50 08          	mov    %rdx,0x8(%rax)
    8cfc:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    8d00:	48 8b 55 e0          	mov    -0x20(%rbp),%rdx
    8d04:	48 89 50 10          	mov    %rdx,0x10(%rax)
    8d08:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
    8d0c:	48 8b 55 e8          	mov    -0x18(%rbp),%rdx
    8d10:	48 89 50 20          	mov    %rdx,0x20(%rax)
    8d14:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
    8d18:	48 8b 00             	mov    (%rax),%rax
    8d1b:	48 8d 50 01          	lea    0x1(%rax),%rdx
    8d1f:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
    8d23:	48 89 10             	mov    %rdx,(%rax)
    8d26:	90                   	nop
    8d27:	5d                   	pop    %rbp
    8d28:	c3                   	retq   

0000000000008d29 <vListInsert>:
    8d29:	f3 0f 1e fa          	endbr64 
    8d2d:	55                   	push   %rbp
    8d2e:	48 89 e5             	mov    %rsp,%rbp
    8d31:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
    8d35:	48 89 75 e0          	mov    %rsi,-0x20(%rbp)
    8d39:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
    8d3d:	48 8b 00             	mov    (%rax),%rax
    8d40:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
    8d44:	48 83 7d f8 ff       	cmpq   $0xffffffffffffffff,-0x8(%rbp)
    8d49:	75 0e                	jne    8d59 <vListInsert+0x30>
    8d4b:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
    8d4f:	48 8b 40 20          	mov    0x20(%rax),%rax
    8d53:	48 89 45 f0          	mov    %rax,-0x10(%rbp)
    8d57:	eb 2b                	jmp    8d84 <vListInsert+0x5b>
    8d59:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
    8d5d:	48 83 c0 10          	add    $0x10,%rax
    8d61:	48 89 45 f0          	mov    %rax,-0x10(%rbp)
    8d65:	eb 0c                	jmp    8d73 <vListInsert+0x4a>
    8d67:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
    8d6b:	48 8b 40 08          	mov    0x8(%rax),%rax
    8d6f:	48 89 45 f0          	mov    %rax,-0x10(%rbp)
    8d73:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
    8d77:	48 8b 40 08          	mov    0x8(%rax),%rax
    8d7b:	48 8b 00             	mov    (%rax),%rax
    8d7e:	48 39 45 f8          	cmp    %rax,-0x8(%rbp)
    8d82:	73 e3                	jae    8d67 <vListInsert+0x3e>
    8d84:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
    8d88:	48 8b 50 08          	mov    0x8(%rax),%rdx
    8d8c:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
    8d90:	48 89 50 08          	mov    %rdx,0x8(%rax)
    8d94:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
    8d98:	48 8b 40 08          	mov    0x8(%rax),%rax
    8d9c:	48 8b 55 e0          	mov    -0x20(%rbp),%rdx
    8da0:	48 89 50 10          	mov    %rdx,0x10(%rax)
    8da4:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
    8da8:	48 8b 55 f0          	mov    -0x10(%rbp),%rdx
    8dac:	48 89 50 10          	mov    %rdx,0x10(%rax)
    8db0:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
    8db4:	48 8b 55 e0          	mov    -0x20(%rbp),%rdx
    8db8:	48 89 50 08          	mov    %rdx,0x8(%rax)
    8dbc:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
    8dc0:	48 8b 55 e8          	mov    -0x18(%rbp),%rdx
    8dc4:	48 89 50 20          	mov    %rdx,0x20(%rax)
    8dc8:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
    8dcc:	48 8b 00             	mov    (%rax),%rax
    8dcf:	48 8d 50 01          	lea    0x1(%rax),%rdx
    8dd3:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
    8dd7:	48 89 10             	mov    %rdx,(%rax)
    8dda:	90                   	nop
    8ddb:	5d                   	pop    %rbp
    8ddc:	c3                   	retq   

0000000000008ddd <uxListRemove>:
    8ddd:	f3 0f 1e fa          	endbr64 
    8de1:	55                   	push   %rbp
    8de2:	48 89 e5             	mov    %rsp,%rbp
    8de5:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
    8de9:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
    8ded:	48 8b 40 20          	mov    0x20(%rax),%rax
    8df1:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
    8df5:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
    8df9:	48 8b 40 08          	mov    0x8(%rax),%rax
    8dfd:	48 8b 55 e8          	mov    -0x18(%rbp),%rdx
    8e01:	48 8b 52 10          	mov    0x10(%rdx),%rdx
    8e05:	48 89 50 10          	mov    %rdx,0x10(%rax)
    8e09:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
    8e0d:	48 8b 40 10          	mov    0x10(%rax),%rax
    8e11:	48 8b 55 e8          	mov    -0x18(%rbp),%rdx
    8e15:	48 8b 52 08          	mov    0x8(%rdx),%rdx
    8e19:	48 89 50 08          	mov    %rdx,0x8(%rax)
    8e1d:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    8e21:	48 8b 40 08          	mov    0x8(%rax),%rax
    8e25:	48 39 45 e8          	cmp    %rax,-0x18(%rbp)
    8e29:	75 10                	jne    8e3b <uxListRemove+0x5e>
    8e2b:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
    8e2f:	48 8b 50 10          	mov    0x10(%rax),%rdx
    8e33:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    8e37:	48 89 50 08          	mov    %rdx,0x8(%rax)
    8e3b:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
    8e3f:	48 c7 40 20 00 00 00 	movq   $0x0,0x20(%rax)
    8e46:	00 
    8e47:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    8e4b:	48 8b 00             	mov    (%rax),%rax
    8e4e:	48 8d 50 ff          	lea    -0x1(%rax),%rdx
    8e52:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    8e56:	48 89 10             	mov    %rdx,(%rax)
    8e59:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    8e5d:	48 8b 00             	mov    (%rax),%rax
    8e60:	5d                   	pop    %rbp
    8e61:	c3                   	retq   

0000000000008e62 <xStreamBufferGenericCreate>:
    8e62:	f3 0f 1e fa          	endbr64 
    8e66:	55                   	push   %rbp
    8e67:	48 89 e5             	mov    %rsp,%rbp
    8e6a:	48 83 ec 30          	sub    $0x30,%rsp
    8e6e:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
    8e72:	48 89 75 e0          	mov    %rsi,-0x20(%rbp)
    8e76:	48 89 55 d8          	mov    %rdx,-0x28(%rbp)
    8e7a:	48 83 7d d8 01       	cmpq   $0x1,-0x28(%rbp)
    8e7f:	75 1e                	jne    8e9f <xStreamBufferGenericCreate+0x3d>
    8e81:	c6 45 f7 01          	movb   $0x1,-0x9(%rbp)
    8e85:	48 83 7d e8 08       	cmpq   $0x8,-0x18(%rbp)
    8e8a:	77 2f                	ja     8ebb <xStreamBufferGenericCreate+0x59>
    8e8c:	be fa 00 00 00       	mov    $0xfa,%esi
    8e91:	48 8d 3d c8 e9 01 00 	lea    0x1e9c8(%rip),%rdi        # 27860 <_IO_stdin_used+0x860>
    8e98:	e8 6f ae ff ff       	callq  3d0c <vAssertCalled>
    8e9d:	eb 1c                	jmp    8ebb <xStreamBufferGenericCreate+0x59>
    8e9f:	c6 45 f7 00          	movb   $0x0,-0x9(%rbp)
    8ea3:	48 83 7d e8 00       	cmpq   $0x0,-0x18(%rbp)
    8ea8:	75 11                	jne    8ebb <xStreamBufferGenericCreate+0x59>
    8eaa:	be 00 01 00 00       	mov    $0x100,%esi
    8eaf:	48 8d 3d aa e9 01 00 	lea    0x1e9aa(%rip),%rdi        # 27860 <_IO_stdin_used+0x860>
    8eb6:	e8 51 ae ff ff       	callq  3d0c <vAssertCalled>
    8ebb:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
    8ebf:	48 3b 45 e8          	cmp    -0x18(%rbp),%rax
    8ec3:	76 11                	jbe    8ed6 <xStreamBufferGenericCreate+0x74>
    8ec5:	be 03 01 00 00       	mov    $0x103,%esi
    8eca:	48 8d 3d 8f e9 01 00 	lea    0x1e98f(%rip),%rdi        # 27860 <_IO_stdin_used+0x860>
    8ed1:	e8 36 ae ff ff       	callq  3d0c <vAssertCalled>
    8ed6:	48 83 7d e0 00       	cmpq   $0x0,-0x20(%rbp)
    8edb:	75 08                	jne    8ee5 <xStreamBufferGenericCreate+0x83>
    8edd:	48 c7 45 e0 01 00 00 	movq   $0x1,-0x20(%rbp)
    8ee4:	00 
    8ee5:	48 83 7d e8 b6       	cmpq   $0xffffffffffffffb6,-0x18(%rbp)
    8eea:	77 1b                	ja     8f07 <xStreamBufferGenericCreate+0xa5>
    8eec:	48 83 45 e8 01       	addq   $0x1,-0x18(%rbp)
    8ef1:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
    8ef5:	48 83 c0 48          	add    $0x48,%rax
    8ef9:	48 89 c7             	mov    %rax,%rdi
    8efc:	e8 7f 97 00 00       	callq  12680 <pvPortMalloc>
    8f01:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
    8f05:	eb 08                	jmp    8f0f <xStreamBufferGenericCreate+0xad>
    8f07:	48 c7 45 f8 00 00 00 	movq   $0x0,-0x8(%rbp)
    8f0e:	00 
    8f0f:	48 83 7d f8 00       	cmpq   $0x0,-0x8(%rbp)
    8f14:	0f 84 60 01 00 00    	je     907a <xStreamBufferGenericCreate+0x218>
    8f1a:	0f b6 7d f7          	movzbl -0x9(%rbp),%edi
    8f1e:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    8f22:	48 8d 70 48          	lea    0x48(%rax),%rsi
    8f26:	48 8b 4d e0          	mov    -0x20(%rbp),%rcx
    8f2a:	48 8b 55 e8          	mov    -0x18(%rbp),%rdx
    8f2e:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    8f32:	41 89 f8             	mov    %edi,%r8d
    8f35:	48 89 c7             	mov    %rax,%rdi
    8f38:	e8 d7 1b 00 00       	callq  ab14 <prvInitialiseNewStreamBuffer>
    8f3d:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    8f41:	0f b6 40 38          	movzbl 0x38(%rax),%eax
    8f45:	0f b6 c0             	movzbl %al,%eax
    8f48:	83 e0 01             	and    $0x1,%eax
    8f4b:	85 c0                	test   %eax,%eax
    8f4d:	74 07                	je     8f56 <xStreamBufferGenericCreate+0xf4>
    8f4f:	b8 08 00 00 00       	mov    $0x8,%eax
    8f54:	eb 05                	jmp    8f5b <xStreamBufferGenericCreate+0xf9>
    8f56:	b8 07 00 00 00       	mov    $0x7,%eax
    8f5b:	89 c7                	mov    %eax,%edi
    8f5d:	e8 c1 ce 01 00       	callq  25e23 <prvTraceGetObjectHandle>
    8f62:	0f b6 d0             	movzbl %al,%edx
    8f65:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    8f69:	89 d6                	mov    %edx,%esi
    8f6b:	48 89 c7             	mov    %rax,%rdi
    8f6e:	e8 1f a5 01 00       	callq  23492 <prvTraceSetStreamBufferNumberLow16>
    8f73:	0f b7 05 64 81 02 00 	movzwl 0x28164(%rip),%eax        # 310de <CurrentFilterGroup>
    8f7a:	0f b7 d0             	movzwl %ax,%edx
    8f7d:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    8f81:	89 d6                	mov    %edx,%esi
    8f83:	48 89 c7             	mov    %rax,%rdi
    8f86:	e8 4a a5 01 00       	callq  234d5 <prvTraceSetStreamBufferNumberHigh16>
    8f8b:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    8f8f:	48 89 c7             	mov    %rax,%rdi
    8f92:	e8 bb a4 01 00       	callq  23452 <prvTraceGetStreamBufferNumberLow16>
    8f97:	0f b6 c0             	movzbl %al,%eax
    8f9a:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
    8f9e:	0f b6 52 38          	movzbl 0x38(%rdx),%edx
    8fa2:	0f b6 d2             	movzbl %dl,%edx
    8fa5:	83 e2 01             	and    $0x1,%edx
    8fa8:	85 d2                	test   %edx,%edx
    8faa:	74 07                	je     8fb3 <xStreamBufferGenericCreate+0x151>
    8fac:	ba 08 00 00 00       	mov    $0x8,%edx
    8fb1:	eb 05                	jmp    8fb8 <xStreamBufferGenericCreate+0x156>
    8fb3:	ba 07 00 00 00       	mov    $0x7,%edx
    8fb8:	89 c6                	mov    %eax,%esi
    8fba:	89 d7                	mov    %edx,%edi
    8fbc:	e8 4f d1 01 00       	callq  26110 <prvMarkObjectAsUsed>
    8fc1:	e8 96 a6 01 00       	callq  2365c <prvTraceGetCurrentTaskHandle>
    8fc6:	48 89 c7             	mov    %rax,%rdi
    8fc9:	e8 8d a1 01 00       	callq  2315b <prvTraceGetTaskNumberHigh16>
    8fce:	0f b7 15 07 81 02 00 	movzwl 0x28107(%rip),%edx        # 310dc <CurrentFilterMask>
    8fd5:	21 d0                	and    %edx,%eax
    8fd7:	66 85 c0             	test   %ax,%ax
    8fda:	74 61                	je     903d <xStreamBufferGenericCreate+0x1db>
    8fdc:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    8fe0:	48 89 c7             	mov    %rax,%rdi
    8fe3:	e8 88 a4 01 00       	callq  23470 <prvTraceGetStreamBufferNumberHigh16>
    8fe8:	0f b7 15 ed 80 02 00 	movzwl 0x280ed(%rip),%edx        # 310dc <CurrentFilterMask>
    8fef:	21 d0                	and    %edx,%eax
    8ff1:	66 85 c0             	test   %ax,%ax
    8ff4:	74 47                	je     903d <xStreamBufferGenericCreate+0x1db>
    8ff6:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    8ffa:	48 89 c7             	mov    %rax,%rdi
    8ffd:	e8 50 a4 01 00       	callq  23452 <prvTraceGetStreamBufferNumberLow16>
    9002:	0f b6 d0             	movzbl %al,%edx
    9005:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    9009:	0f b6 40 38          	movzbl 0x38(%rax),%eax
    900d:	0f b6 c0             	movzbl %al,%eax
    9010:	83 e0 01             	and    $0x1,%eax
    9013:	85 c0                	test   %eax,%eax
    9015:	74 07                	je     901e <xStreamBufferGenericCreate+0x1bc>
    9017:	b9 08 00 00 00       	mov    $0x8,%ecx
    901c:	eb 05                	jmp    9023 <xStreamBufferGenericCreate+0x1c1>
    901e:	b9 07 00 00 00       	mov    $0x7,%ecx
    9023:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    9027:	0f b6 40 38          	movzbl 0x38(%rax),%eax
    902b:	83 e0 01             	and    $0x1,%eax
    902e:	83 c0 1c             	add    $0x1c,%eax
    9031:	0f b6 c0             	movzbl %al,%eax
    9034:	89 ce                	mov    %ecx,%esi
    9036:	89 c7                	mov    %eax,%edi
    9038:	e8 15 c0 01 00       	callq  25052 <prvTraceStoreKernelCall>
    903d:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    9041:	48 89 c7             	mov    %rax,%rdi
    9044:	e8 09 a4 01 00       	callq  23452 <prvTraceGetStreamBufferNumberLow16>
    9049:	0f b6 c0             	movzbl %al,%eax
    904c:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
    9050:	0f b6 52 38          	movzbl 0x38(%rdx),%edx
    9054:	0f b6 d2             	movzbl %dl,%edx
    9057:	83 e2 01             	and    $0x1,%edx
    905a:	85 d2                	test   %edx,%edx
    905c:	74 07                	je     9065 <xStreamBufferGenericCreate+0x203>
    905e:	b9 08 00 00 00       	mov    $0x8,%ecx
    9063:	eb 05                	jmp    906a <xStreamBufferGenericCreate+0x208>
    9065:	b9 07 00 00 00       	mov    $0x7,%ecx
    906a:	ba 00 00 00 00       	mov    $0x0,%edx
    906f:	89 c6                	mov    %eax,%esi
    9071:	89 cf                	mov    %ecx,%edi
    9073:	e8 14 c8 01 00       	callq  2588c <prvTraceSetObjectState>
    9078:	eb 31                	jmp    90ab <xStreamBufferGenericCreate+0x249>
    907a:	e8 dd a5 01 00       	callq  2365c <prvTraceGetCurrentTaskHandle>
    907f:	48 89 c7             	mov    %rax,%rdi
    9082:	e8 d4 a0 01 00       	callq  2315b <prvTraceGetTaskNumberHigh16>
    9087:	0f b7 15 4e 80 02 00 	movzwl 0x2804e(%rip),%edx        # 310dc <CurrentFilterMask>
    908e:	21 d0                	and    %edx,%eax
    9090:	66 85 c0             	test   %ax,%ax
    9093:	74 16                	je     90ab <xStreamBufferGenericCreate+0x249>
    9095:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
    9099:	83 c0 44             	add    $0x44,%eax
    909c:	0f b6 c0             	movzbl %al,%eax
    909f:	be 00 00 00 00       	mov    $0x0,%esi
    90a4:	89 c7                	mov    %eax,%edi
    90a6:	e8 93 c2 01 00       	callq  2533e <prvTraceStoreKernelCallWithNumericParamOnly>
    90ab:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    90af:	c9                   	leaveq 
    90b0:	c3                   	retq   

00000000000090b1 <xStreamBufferGenericCreateStatic>:
    90b1:	f3 0f 1e fa          	endbr64 
    90b5:	55                   	push   %rbp
    90b6:	48 89 e5             	mov    %rsp,%rbp
    90b9:	48 83 ec 50          	sub    $0x50,%rsp
    90bd:	48 89 7d d8          	mov    %rdi,-0x28(%rbp)
    90c1:	48 89 75 d0          	mov    %rsi,-0x30(%rbp)
    90c5:	48 89 55 c8          	mov    %rdx,-0x38(%rbp)
    90c9:	48 89 4d c0          	mov    %rcx,-0x40(%rbp)
    90cd:	4c 89 45 b8          	mov    %r8,-0x48(%rbp)
    90d1:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
    90d5:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
    90d9:	48 83 7d c0 00       	cmpq   $0x0,-0x40(%rbp)
    90de:	75 11                	jne    90f1 <xStreamBufferGenericCreateStatic+0x40>
    90e0:	be 3f 01 00 00       	mov    $0x13f,%esi
    90e5:	48 8d 3d 74 e7 01 00 	lea    0x1e774(%rip),%rdi        # 27860 <_IO_stdin_used+0x860>
    90ec:	e8 1b ac ff ff       	callq  3d0c <vAssertCalled>
    90f1:	48 83 7d b8 00       	cmpq   $0x0,-0x48(%rbp)
    90f6:	75 11                	jne    9109 <xStreamBufferGenericCreateStatic+0x58>
    90f8:	be 40 01 00 00       	mov    $0x140,%esi
    90fd:	48 8d 3d 5c e7 01 00 	lea    0x1e75c(%rip),%rdi        # 27860 <_IO_stdin_used+0x860>
    9104:	e8 03 ac ff ff       	callq  3d0c <vAssertCalled>
    9109:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
    910d:	48 3b 45 d8          	cmp    -0x28(%rbp),%rax
    9111:	76 11                	jbe    9124 <xStreamBufferGenericCreateStatic+0x73>
    9113:	be 41 01 00 00       	mov    $0x141,%esi
    9118:	48 8d 3d 41 e7 01 00 	lea    0x1e741(%rip),%rdi        # 27860 <_IO_stdin_used+0x860>
    911f:	e8 e8 ab ff ff       	callq  3d0c <vAssertCalled>
    9124:	48 83 7d d0 00       	cmpq   $0x0,-0x30(%rbp)
    9129:	75 08                	jne    9133 <xStreamBufferGenericCreateStatic+0x82>
    912b:	48 c7 45 d0 01 00 00 	movq   $0x1,-0x30(%rbp)
    9132:	00 
    9133:	48 83 7d c8 00       	cmpq   $0x0,-0x38(%rbp)
    9138:	74 06                	je     9140 <xStreamBufferGenericCreateStatic+0x8f>
    913a:	c6 45 e7 03          	movb   $0x3,-0x19(%rbp)
    913e:	eb 04                	jmp    9144 <xStreamBufferGenericCreateStatic+0x93>
    9140:	c6 45 e7 02          	movb   $0x2,-0x19(%rbp)
    9144:	48 83 7d d8 08       	cmpq   $0x8,-0x28(%rbp)
    9149:	77 11                	ja     915c <xStreamBufferGenericCreateStatic+0xab>
    914b:	be 59 01 00 00       	mov    $0x159,%esi
    9150:	48 8d 3d 09 e7 01 00 	lea    0x1e709(%rip),%rdi        # 27860 <_IO_stdin_used+0x860>
    9157:	e8 b0 ab ff ff       	callq  3d0c <vAssertCalled>
    915c:	48 c7 45 e8 48 00 00 	movq   $0x48,-0x18(%rbp)
    9163:	00 
    9164:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
    9168:	48 83 f8 48          	cmp    $0x48,%rax
    916c:	74 11                	je     917f <xStreamBufferGenericCreateStatic+0xce>
    916e:	be 61 01 00 00       	mov    $0x161,%esi
    9173:	48 8d 3d e6 e6 01 00 	lea    0x1e6e6(%rip),%rdi        # 27860 <_IO_stdin_used+0x860>
    917a:	e8 8d ab ff ff       	callq  3d0c <vAssertCalled>
    917f:	48 83 7d c0 00       	cmpq   $0x0,-0x40(%rbp)
    9184:	0f 84 83 01 00 00    	je     930d <xStreamBufferGenericCreateStatic+0x25c>
    918a:	48 83 7d b8 00       	cmpq   $0x0,-0x48(%rbp)
    918f:	0f 84 78 01 00 00    	je     930d <xStreamBufferGenericCreateStatic+0x25c>
    9195:	0f b6 7d e7          	movzbl -0x19(%rbp),%edi
    9199:	48 8b 4d d0          	mov    -0x30(%rbp),%rcx
    919d:	48 8b 55 d8          	mov    -0x28(%rbp),%rdx
    91a1:	48 8b 75 c0          	mov    -0x40(%rbp),%rsi
    91a5:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    91a9:	41 89 f8             	mov    %edi,%r8d
    91ac:	48 89 c7             	mov    %rax,%rdi
    91af:	e8 60 19 00 00       	callq  ab14 <prvInitialiseNewStreamBuffer>
    91b4:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    91b8:	0f b6 40 38          	movzbl 0x38(%rax),%eax
    91bc:	83 c8 02             	or     $0x2,%eax
    91bf:	89 c2                	mov    %eax,%edx
    91c1:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    91c5:	88 50 38             	mov    %dl,0x38(%rax)
    91c8:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    91cc:	0f b6 40 38          	movzbl 0x38(%rax),%eax
    91d0:	0f b6 c0             	movzbl %al,%eax
    91d3:	83 e0 01             	and    $0x1,%eax
    91d6:	85 c0                	test   %eax,%eax
    91d8:	74 07                	je     91e1 <xStreamBufferGenericCreateStatic+0x130>
    91da:	b8 08 00 00 00       	mov    $0x8,%eax
    91df:	eb 05                	jmp    91e6 <xStreamBufferGenericCreateStatic+0x135>
    91e1:	b8 07 00 00 00       	mov    $0x7,%eax
    91e6:	89 c7                	mov    %eax,%edi
    91e8:	e8 36 cc 01 00       	callq  25e23 <prvTraceGetObjectHandle>
    91ed:	0f b6 d0             	movzbl %al,%edx
    91f0:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    91f4:	89 d6                	mov    %edx,%esi
    91f6:	48 89 c7             	mov    %rax,%rdi
    91f9:	e8 94 a2 01 00       	callq  23492 <prvTraceSetStreamBufferNumberLow16>
    91fe:	0f b7 05 d9 7e 02 00 	movzwl 0x27ed9(%rip),%eax        # 310de <CurrentFilterGroup>
    9205:	0f b7 d0             	movzwl %ax,%edx
    9208:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    920c:	89 d6                	mov    %edx,%esi
    920e:	48 89 c7             	mov    %rax,%rdi
    9211:	e8 bf a2 01 00       	callq  234d5 <prvTraceSetStreamBufferNumberHigh16>
    9216:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    921a:	48 89 c7             	mov    %rax,%rdi
    921d:	e8 30 a2 01 00       	callq  23452 <prvTraceGetStreamBufferNumberLow16>
    9222:	0f b6 c0             	movzbl %al,%eax
    9225:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
    9229:	0f b6 52 38          	movzbl 0x38(%rdx),%edx
    922d:	0f b6 d2             	movzbl %dl,%edx
    9230:	83 e2 01             	and    $0x1,%edx
    9233:	85 d2                	test   %edx,%edx
    9235:	74 07                	je     923e <xStreamBufferGenericCreateStatic+0x18d>
    9237:	ba 08 00 00 00       	mov    $0x8,%edx
    923c:	eb 05                	jmp    9243 <xStreamBufferGenericCreateStatic+0x192>
    923e:	ba 07 00 00 00       	mov    $0x7,%edx
    9243:	89 c6                	mov    %eax,%esi
    9245:	89 d7                	mov    %edx,%edi
    9247:	e8 c4 ce 01 00       	callq  26110 <prvMarkObjectAsUsed>
    924c:	e8 0b a4 01 00       	callq  2365c <prvTraceGetCurrentTaskHandle>
    9251:	48 89 c7             	mov    %rax,%rdi
    9254:	e8 02 9f 01 00       	callq  2315b <prvTraceGetTaskNumberHigh16>
    9259:	0f b7 15 7c 7e 02 00 	movzwl 0x27e7c(%rip),%edx        # 310dc <CurrentFilterMask>
    9260:	21 d0                	and    %edx,%eax
    9262:	66 85 c0             	test   %ax,%ax
    9265:	74 61                	je     92c8 <xStreamBufferGenericCreateStatic+0x217>
    9267:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    926b:	48 89 c7             	mov    %rax,%rdi
    926e:	e8 fd a1 01 00       	callq  23470 <prvTraceGetStreamBufferNumberHigh16>
    9273:	0f b7 15 62 7e 02 00 	movzwl 0x27e62(%rip),%edx        # 310dc <CurrentFilterMask>
    927a:	21 d0                	and    %edx,%eax
    927c:	66 85 c0             	test   %ax,%ax
    927f:	74 47                	je     92c8 <xStreamBufferGenericCreateStatic+0x217>
    9281:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    9285:	48 89 c7             	mov    %rax,%rdi
    9288:	e8 c5 a1 01 00       	callq  23452 <prvTraceGetStreamBufferNumberLow16>
    928d:	0f b6 d0             	movzbl %al,%edx
    9290:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    9294:	0f b6 40 38          	movzbl 0x38(%rax),%eax
    9298:	0f b6 c0             	movzbl %al,%eax
    929b:	83 e0 01             	and    $0x1,%eax
    929e:	85 c0                	test   %eax,%eax
    92a0:	74 07                	je     92a9 <xStreamBufferGenericCreateStatic+0x1f8>
    92a2:	b9 08 00 00 00       	mov    $0x8,%ecx
    92a7:	eb 05                	jmp    92ae <xStreamBufferGenericCreateStatic+0x1fd>
    92a9:	b9 07 00 00 00       	mov    $0x7,%ecx
    92ae:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    92b2:	0f b6 40 38          	movzbl 0x38(%rax),%eax
    92b6:	83 e0 01             	and    $0x1,%eax
    92b9:	83 c0 1c             	add    $0x1c,%eax
    92bc:	0f b6 c0             	movzbl %al,%eax
    92bf:	89 ce                	mov    %ecx,%esi
    92c1:	89 c7                	mov    %eax,%edi
    92c3:	e8 8a bd 01 00       	callq  25052 <prvTraceStoreKernelCall>
    92c8:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    92cc:	48 89 c7             	mov    %rax,%rdi
    92cf:	e8 7e a1 01 00       	callq  23452 <prvTraceGetStreamBufferNumberLow16>
    92d4:	0f b6 c0             	movzbl %al,%eax
    92d7:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
    92db:	0f b6 52 38          	movzbl 0x38(%rdx),%edx
    92df:	0f b6 d2             	movzbl %dl,%edx
    92e2:	83 e2 01             	and    $0x1,%edx
    92e5:	85 d2                	test   %edx,%edx
    92e7:	74 07                	je     92f0 <xStreamBufferGenericCreateStatic+0x23f>
    92e9:	b9 08 00 00 00       	mov    $0x8,%ecx
    92ee:	eb 05                	jmp    92f5 <xStreamBufferGenericCreateStatic+0x244>
    92f0:	b9 07 00 00 00       	mov    $0x7,%ecx
    92f5:	ba 00 00 00 00       	mov    $0x0,%edx
    92fa:	89 c6                	mov    %eax,%esi
    92fc:	89 cf                	mov    %ecx,%edi
    92fe:	e8 89 c5 01 00       	callq  2588c <prvTraceSetObjectState>
    9303:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
    9307:	48 89 45 f0          	mov    %rax,-0x10(%rbp)
    930b:	eb 39                	jmp    9346 <xStreamBufferGenericCreateStatic+0x295>
    930d:	48 c7 45 f0 00 00 00 	movq   $0x0,-0x10(%rbp)
    9314:	00 
    9315:	e8 42 a3 01 00       	callq  2365c <prvTraceGetCurrentTaskHandle>
    931a:	48 89 c7             	mov    %rax,%rdi
    931d:	e8 39 9e 01 00       	callq  2315b <prvTraceGetTaskNumberHigh16>
    9322:	0f b7 15 b3 7d 02 00 	movzwl 0x27db3(%rip),%edx        # 310dc <CurrentFilterMask>
    9329:	21 d0                	and    %edx,%eax
    932b:	66 85 c0             	test   %ax,%ax
    932e:	74 16                	je     9346 <xStreamBufferGenericCreateStatic+0x295>
    9330:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
    9334:	83 c0 44             	add    $0x44,%eax
    9337:	0f b6 c0             	movzbl %al,%eax
    933a:	be 00 00 00 00       	mov    $0x0,%esi
    933f:	89 c7                	mov    %eax,%edi
    9341:	e8 f8 bf 01 00       	callq  2533e <prvTraceStoreKernelCallWithNumericParamOnly>
    9346:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
    934a:	c9                   	leaveq 
    934b:	c3                   	retq   

000000000000934c <vStreamBufferDelete>:
    934c:	f3 0f 1e fa          	endbr64 
    9350:	55                   	push   %rbp
    9351:	48 89 e5             	mov    %rsp,%rbp
    9354:	53                   	push   %rbx
    9355:	48 83 ec 28          	sub    $0x28,%rsp
    9359:	48 89 7d d8          	mov    %rdi,-0x28(%rbp)
    935d:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
    9361:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
    9365:	48 83 7d e8 00       	cmpq   $0x0,-0x18(%rbp)
    936a:	75 11                	jne    937d <vStreamBufferDelete+0x31>
    936c:	be 85 01 00 00       	mov    $0x185,%esi
    9371:	48 8d 3d e8 e4 01 00 	lea    0x1e4e8(%rip),%rdi        # 27860 <_IO_stdin_used+0x860>
    9378:	e8 8f a9 ff ff       	callq  3d0c <vAssertCalled>
    937d:	e8 da a2 01 00       	callq  2365c <prvTraceGetCurrentTaskHandle>
    9382:	48 89 c7             	mov    %rax,%rdi
    9385:	e8 d1 9d 01 00       	callq  2315b <prvTraceGetTaskNumberHigh16>
    938a:	0f b7 15 4b 7d 02 00 	movzwl 0x27d4b(%rip),%edx        # 310dc <CurrentFilterMask>
    9391:	21 d0                	and    %edx,%eax
    9393:	66 85 c0             	test   %ax,%ax
    9396:	74 61                	je     93f9 <vStreamBufferDelete+0xad>
    9398:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
    939c:	48 89 c7             	mov    %rax,%rdi
    939f:	e8 cc a0 01 00       	callq  23470 <prvTraceGetStreamBufferNumberHigh16>
    93a4:	0f b7 15 31 7d 02 00 	movzwl 0x27d31(%rip),%edx        # 310dc <CurrentFilterMask>
    93ab:	21 d0                	and    %edx,%eax
    93ad:	66 85 c0             	test   %ax,%ax
    93b0:	74 47                	je     93f9 <vStreamBufferDelete+0xad>
    93b2:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
    93b6:	48 89 c7             	mov    %rax,%rdi
    93b9:	e8 94 a0 01 00       	callq  23452 <prvTraceGetStreamBufferNumberLow16>
    93be:	0f b6 d0             	movzbl %al,%edx
    93c1:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
    93c5:	0f b6 40 38          	movzbl 0x38(%rax),%eax
    93c9:	0f b6 c0             	movzbl %al,%eax
    93cc:	83 e0 01             	and    $0x1,%eax
    93cf:	85 c0                	test   %eax,%eax
    93d1:	74 07                	je     93da <vStreamBufferDelete+0x8e>
    93d3:	b9 08 00 00 00       	mov    $0x8,%ecx
    93d8:	eb 05                	jmp    93df <vStreamBufferDelete+0x93>
    93da:	b9 07 00 00 00       	mov    $0x7,%ecx
    93df:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
    93e3:	0f b6 40 38          	movzbl 0x38(%rax),%eax
    93e7:	83 e0 01             	and    $0x1,%eax
    93ea:	83 e8 7c             	sub    $0x7c,%eax
    93ed:	0f b6 c0             	movzbl %al,%eax
    93f0:	89 ce                	mov    %ecx,%esi
    93f2:	89 c7                	mov    %eax,%edi
    93f4:	e8 59 bc 01 00       	callq  25052 <prvTraceStoreKernelCall>
    93f9:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
    93fd:	0f b6 40 38          	movzbl 0x38(%rax),%eax
    9401:	0f b6 c0             	movzbl %al,%eax
    9404:	83 e0 01             	and    $0x1,%eax
    9407:	85 c0                	test   %eax,%eax
    9409:	74 07                	je     9412 <vStreamBufferDelete+0xc6>
    940b:	bb 08 00 00 00       	mov    $0x8,%ebx
    9410:	eb 05                	jmp    9417 <vStreamBufferDelete+0xcb>
    9412:	bb 07 00 00 00       	mov    $0x7,%ebx
    9417:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
    941b:	48 89 c7             	mov    %rax,%rdi
    941e:	e8 2f a0 01 00       	callq  23452 <prvTraceGetStreamBufferNumberLow16>
    9423:	0f b6 c8             	movzbl %al,%ecx
    9426:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
    942a:	0f b6 40 38          	movzbl 0x38(%rax),%eax
    942e:	83 e0 01             	and    $0x1,%eax
    9431:	83 e8 1c             	sub    $0x1c,%eax
    9434:	0f b6 c0             	movzbl %al,%eax
    9437:	89 da                	mov    %ebx,%edx
    9439:	89 ce                	mov    %ecx,%esi
    943b:	89 c7                	mov    %eax,%edi
    943d:	e8 ea c0 01 00       	callq  2552c <prvTraceStoreObjectNameOnCloseEvent>
    9442:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
    9446:	0f b6 40 38          	movzbl 0x38(%rax),%eax
    944a:	0f b6 c0             	movzbl %al,%eax
    944d:	83 e0 01             	and    $0x1,%eax
    9450:	85 c0                	test   %eax,%eax
    9452:	74 07                	je     945b <vStreamBufferDelete+0x10f>
    9454:	bb 08 00 00 00       	mov    $0x8,%ebx
    9459:	eb 05                	jmp    9460 <vStreamBufferDelete+0x114>
    945b:	bb 07 00 00 00       	mov    $0x7,%ebx
    9460:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
    9464:	48 89 c7             	mov    %rax,%rdi
    9467:	e8 e6 9f 01 00       	callq  23452 <prvTraceGetStreamBufferNumberLow16>
    946c:	0f b6 c8             	movzbl %al,%ecx
    946f:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
    9473:	0f b6 40 38          	movzbl 0x38(%rax),%eax
    9477:	83 e0 01             	and    $0x1,%eax
    947a:	83 e8 1a             	sub    $0x1a,%eax
    947d:	0f b6 c0             	movzbl %al,%eax
    9480:	89 da                	mov    %ebx,%edx
    9482:	89 ce                	mov    %ecx,%esi
    9484:	89 c7                	mov    %eax,%edi
    9486:	e8 97 c1 01 00       	callq  25622 <prvTraceStoreObjectPropertiesOnCloseEvent>
    948b:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
    948f:	48 89 c7             	mov    %rax,%rdi
    9492:	e8 bb 9f 01 00       	callq  23452 <prvTraceGetStreamBufferNumberLow16>
    9497:	0f b6 c0             	movzbl %al,%eax
    949a:	48 8b 55 d8          	mov    -0x28(%rbp),%rdx
    949e:	0f b6 52 38          	movzbl 0x38(%rdx),%edx
    94a2:	0f b6 d2             	movzbl %dl,%edx
    94a5:	83 e2 01             	and    $0x1,%edx
    94a8:	85 d2                	test   %edx,%edx
    94aa:	74 07                	je     94b3 <vStreamBufferDelete+0x167>
    94ac:	ba 08 00 00 00       	mov    $0x8,%edx
    94b1:	eb 05                	jmp    94b8 <vStreamBufferDelete+0x16c>
    94b3:	ba 07 00 00 00       	mov    $0x7,%edx
    94b8:	89 c6                	mov    %eax,%esi
    94ba:	89 d7                	mov    %edx,%edi
    94bc:	e8 59 cb 01 00       	callq  2601a <prvTraceFreeObjectHandle>
    94c1:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
    94c5:	0f b6 40 38          	movzbl 0x38(%rax),%eax
    94c9:	0f b6 c0             	movzbl %al,%eax
    94cc:	83 e0 02             	and    $0x2,%eax
    94cf:	85 c0                	test   %eax,%eax
    94d1:	75 0e                	jne    94e1 <vStreamBufferDelete+0x195>
    94d3:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
    94d7:	48 89 c7             	mov    %rax,%rdi
    94da:	e8 c1 92 00 00       	callq  127a0 <vPortFree>
    94df:	eb 16                	jmp    94f7 <vStreamBufferDelete+0x1ab>
    94e1:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
    94e5:	ba 48 00 00 00       	mov    $0x48,%edx
    94ea:	be 00 00 00 00       	mov    $0x0,%esi
    94ef:	48 89 c7             	mov    %rax,%rdi
    94f2:	e8 19 90 ff ff       	callq  2510 <memset@plt>
    94f7:	90                   	nop
    94f8:	48 83 c4 28          	add    $0x28,%rsp
    94fc:	5b                   	pop    %rbx
    94fd:	5d                   	pop    %rbp
    94fe:	c3                   	retq   

00000000000094ff <xStreamBufferReset>:
    94ff:	f3 0f 1e fa          	endbr64 
    9503:	55                   	push   %rbp
    9504:	48 89 e5             	mov    %rsp,%rbp
    9507:	48 83 ec 30          	sub    $0x30,%rsp
    950b:	48 89 7d d8          	mov    %rdi,-0x28(%rbp)
    950f:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
    9513:	48 89 45 f0          	mov    %rax,-0x10(%rbp)
    9517:	48 c7 45 e8 00 00 00 	movq   $0x0,-0x18(%rbp)
    951e:	00 
    951f:	48 83 7d f0 00       	cmpq   $0x0,-0x10(%rbp)
    9524:	75 11                	jne    9537 <xStreamBufferReset+0x38>
    9526:	be ab 01 00 00       	mov    $0x1ab,%esi
    952b:	48 8d 3d 2e e3 01 00 	lea    0x1e32e(%rip),%rdi        # 27860 <_IO_stdin_used+0x860>
    9532:	e8 d5 a7 ff ff       	callq  3d0c <vAssertCalled>
    9537:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
    953b:	48 8b 40 40          	mov    0x40(%rax),%rax
    953f:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
    9543:	e8 87 98 00 00       	callq  12dcf <vPortEnterCritical>
    9548:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
    954c:	48 8b 40 20          	mov    0x20(%rax),%rax
    9550:	48 85 c0             	test   %rax,%rax
    9553:	0f 85 1b 01 00 00    	jne    9674 <xStreamBufferReset+0x175>
    9559:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
    955d:	48 8b 40 28          	mov    0x28(%rax),%rax
    9561:	48 85 c0             	test   %rax,%rax
    9564:	0f 85 0a 01 00 00    	jne    9674 <xStreamBufferReset+0x175>
    956a:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
    956e:	0f b6 40 38          	movzbl 0x38(%rax),%eax
    9572:	0f b6 f8             	movzbl %al,%edi
    9575:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
    9579:	48 8b 48 18          	mov    0x18(%rax),%rcx
    957d:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
    9581:	48 8b 50 10          	mov    0x10(%rax),%rdx
    9585:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
    9589:	48 8b 70 30          	mov    0x30(%rax),%rsi
    958d:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
    9591:	41 89 f8             	mov    %edi,%r8d
    9594:	48 89 c7             	mov    %rax,%rdi
    9597:	e8 78 15 00 00       	callq  ab14 <prvInitialiseNewStreamBuffer>
    959c:	48 c7 45 e8 01 00 00 	movq   $0x1,-0x18(%rbp)
    95a3:	00 
    95a4:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
    95a8:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
    95ac:	48 89 50 40          	mov    %rdx,0x40(%rax)
    95b0:	e8 a7 a0 01 00       	callq  2365c <prvTraceGetCurrentTaskHandle>
    95b5:	48 89 c7             	mov    %rax,%rdi
    95b8:	e8 9e 9b 01 00       	callq  2315b <prvTraceGetTaskNumberHigh16>
    95bd:	0f b7 15 18 7b 02 00 	movzwl 0x27b18(%rip),%edx        # 310dc <CurrentFilterMask>
    95c4:	21 d0                	and    %edx,%eax
    95c6:	66 85 c0             	test   %ax,%ax
    95c9:	74 6e                	je     9639 <xStreamBufferReset+0x13a>
    95cb:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
    95cf:	48 89 c7             	mov    %rax,%rdi
    95d2:	e8 99 9e 01 00       	callq  23470 <prvTraceGetStreamBufferNumberHigh16>
    95d7:	0f b7 15 fe 7a 02 00 	movzwl 0x27afe(%rip),%edx        # 310dc <CurrentFilterMask>
    95de:	21 d0                	and    %edx,%eax
    95e0:	66 85 c0             	test   %ax,%ax
    95e3:	74 54                	je     9639 <xStreamBufferReset+0x13a>
    95e5:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
    95e9:	48 89 c7             	mov    %rax,%rdi
    95ec:	e8 61 9e 01 00       	callq  23452 <prvTraceGetStreamBufferNumberLow16>
    95f1:	0f b6 c0             	movzbl %al,%eax
    95f4:	48 8b 55 d8          	mov    -0x28(%rbp),%rdx
    95f8:	0f b6 52 38          	movzbl 0x38(%rdx),%edx
    95fc:	0f b6 d2             	movzbl %dl,%edx
    95ff:	83 e2 01             	and    $0x1,%edx
    9602:	85 d2                	test   %edx,%edx
    9604:	74 07                	je     960d <xStreamBufferReset+0x10e>
    9606:	be 08 00 00 00       	mov    $0x8,%esi
    960b:	eb 05                	jmp    9612 <xStreamBufferReset+0x113>
    960d:	be 07 00 00 00       	mov    $0x7,%esi
    9612:	48 8b 55 d8          	mov    -0x28(%rbp),%rdx
    9616:	0f b6 52 38          	movzbl 0x38(%rdx),%edx
    961a:	0f b6 d2             	movzbl %dl,%edx
    961d:	83 e2 01             	and    $0x1,%edx
    9620:	85 d2                	test   %edx,%edx
    9622:	7e 07                	jle    962b <xStreamBufferReset+0x12c>
    9624:	b9 e3 00 00 00       	mov    $0xe3,%ecx
    9629:	eb 05                	jmp    9630 <xStreamBufferReset+0x131>
    962b:	b9 e2 00 00 00       	mov    $0xe2,%ecx
    9630:	89 c2                	mov    %eax,%edx
    9632:	89 cf                	mov    %ecx,%edi
    9634:	e8 19 ba 01 00       	callq  25052 <prvTraceStoreKernelCall>
    9639:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
    963d:	48 89 c7             	mov    %rax,%rdi
    9640:	e8 0d 9e 01 00       	callq  23452 <prvTraceGetStreamBufferNumberLow16>
    9645:	0f b6 c0             	movzbl %al,%eax
    9648:	48 8b 55 d8          	mov    -0x28(%rbp),%rdx
    964c:	0f b6 52 38          	movzbl 0x38(%rdx),%edx
    9650:	0f b6 d2             	movzbl %dl,%edx
    9653:	83 e2 01             	and    $0x1,%edx
    9656:	85 d2                	test   %edx,%edx
    9658:	74 07                	je     9661 <xStreamBufferReset+0x162>
    965a:	b9 08 00 00 00       	mov    $0x8,%ecx
    965f:	eb 05                	jmp    9666 <xStreamBufferReset+0x167>
    9661:	b9 07 00 00 00       	mov    $0x7,%ecx
    9666:	ba 00 00 00 00       	mov    $0x0,%edx
    966b:	89 c6                	mov    %eax,%esi
    966d:	89 cf                	mov    %ecx,%edi
    966f:	e8 18 c2 01 00       	callq  2588c <prvTraceSetObjectState>
    9674:	e8 84 97 00 00       	callq  12dfd <vPortExitCritical>
    9679:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
    967d:	c9                   	leaveq 
    967e:	c3                   	retq   

000000000000967f <xStreamBufferSetTriggerLevel>:
    967f:	f3 0f 1e fa          	endbr64 
    9683:	55                   	push   %rbp
    9684:	48 89 e5             	mov    %rsp,%rbp
    9687:	48 83 ec 20          	sub    $0x20,%rsp
    968b:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
    968f:	48 89 75 e0          	mov    %rsi,-0x20(%rbp)
    9693:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
    9697:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
    969b:	48 83 7d f8 00       	cmpq   $0x0,-0x8(%rbp)
    96a0:	75 11                	jne    96b3 <xStreamBufferSetTriggerLevel+0x34>
    96a2:	be d9 01 00 00       	mov    $0x1d9,%esi
    96a7:	48 8d 3d b2 e1 01 00 	lea    0x1e1b2(%rip),%rdi        # 27860 <_IO_stdin_used+0x860>
    96ae:	e8 59 a6 ff ff       	callq  3d0c <vAssertCalled>
    96b3:	48 83 7d e0 00       	cmpq   $0x0,-0x20(%rbp)
    96b8:	75 08                	jne    96c2 <xStreamBufferSetTriggerLevel+0x43>
    96ba:	48 c7 45 e0 01 00 00 	movq   $0x1,-0x20(%rbp)
    96c1:	00 
    96c2:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    96c6:	48 8b 40 10          	mov    0x10(%rax),%rax
    96ca:	48 39 45 e0          	cmp    %rax,-0x20(%rbp)
    96ce:	73 16                	jae    96e6 <xStreamBufferSetTriggerLevel+0x67>
    96d0:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    96d4:	48 8b 55 e0          	mov    -0x20(%rbp),%rdx
    96d8:	48 89 50 18          	mov    %rdx,0x18(%rax)
    96dc:	48 c7 45 f0 01 00 00 	movq   $0x1,-0x10(%rbp)
    96e3:	00 
    96e4:	eb 08                	jmp    96ee <xStreamBufferSetTriggerLevel+0x6f>
    96e6:	48 c7 45 f0 00 00 00 	movq   $0x0,-0x10(%rbp)
    96ed:	00 
    96ee:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
    96f2:	c9                   	leaveq 
    96f3:	c3                   	retq   

00000000000096f4 <xStreamBufferSpacesAvailable>:
    96f4:	f3 0f 1e fa          	endbr64 
    96f8:	55                   	push   %rbp
    96f9:	48 89 e5             	mov    %rsp,%rbp
    96fc:	48 83 ec 30          	sub    $0x30,%rsp
    9700:	48 89 7d d8          	mov    %rdi,-0x28(%rbp)
    9704:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
    9708:	48 89 45 f0          	mov    %rax,-0x10(%rbp)
    970c:	48 83 7d f0 00       	cmpq   $0x0,-0x10(%rbp)
    9711:	75 11                	jne    9724 <xStreamBufferSpacesAvailable+0x30>
    9713:	be f7 01 00 00       	mov    $0x1f7,%esi
    9718:	48 8d 3d 41 e1 01 00 	lea    0x1e141(%rip),%rdi        # 27860 <_IO_stdin_used+0x860>
    971f:	e8 e8 a5 ff ff       	callq  3d0c <vAssertCalled>
    9724:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
    9728:	48 8b 00             	mov    (%rax),%rax
    972b:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
    972f:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
    9733:	48 8b 50 10          	mov    0x10(%rax),%rdx
    9737:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
    973b:	48 8b 00             	mov    (%rax),%rax
    973e:	48 01 d0             	add    %rdx,%rax
    9741:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
    9745:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
    9749:	48 8b 40 08          	mov    0x8(%rax),%rax
    974d:	48 29 45 e8          	sub    %rax,-0x18(%rbp)
    9751:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
    9755:	48 8b 00             	mov    (%rax),%rax
    9758:	48 39 45 f8          	cmp    %rax,-0x8(%rbp)
    975c:	75 c6                	jne    9724 <xStreamBufferSpacesAvailable+0x30>
    975e:	48 83 6d e8 01       	subq   $0x1,-0x18(%rbp)
    9763:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
    9767:	48 8b 40 10          	mov    0x10(%rax),%rax
    976b:	48 39 45 e8          	cmp    %rax,-0x18(%rbp)
    976f:	72 0c                	jb     977d <xStreamBufferSpacesAvailable+0x89>
    9771:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
    9775:	48 8b 40 10          	mov    0x10(%rax),%rax
    9779:	48 29 45 e8          	sub    %rax,-0x18(%rbp)
    977d:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
    9781:	c9                   	leaveq 
    9782:	c3                   	retq   

0000000000009783 <xStreamBufferBytesAvailable>:
    9783:	f3 0f 1e fa          	endbr64 
    9787:	55                   	push   %rbp
    9788:	48 89 e5             	mov    %rsp,%rbp
    978b:	48 83 ec 20          	sub    $0x20,%rsp
    978f:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
    9793:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
    9797:	48 89 45 f0          	mov    %rax,-0x10(%rbp)
    979b:	48 83 7d f0 00       	cmpq   $0x0,-0x10(%rbp)
    97a0:	75 11                	jne    97b3 <xStreamBufferBytesAvailable+0x30>
    97a2:	be 17 02 00 00       	mov    $0x217,%esi
    97a7:	48 8d 3d b2 e0 01 00 	lea    0x1e0b2(%rip),%rdi        # 27860 <_IO_stdin_used+0x860>
    97ae:	e8 59 a5 ff ff       	callq  3d0c <vAssertCalled>
    97b3:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
    97b7:	48 89 c7             	mov    %rax,%rdi
    97ba:	e8 07 13 00 00       	callq  aac6 <prvBytesInBuffer>
    97bf:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
    97c3:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    97c7:	c9                   	leaveq 
    97c8:	c3                   	retq   

00000000000097c9 <xStreamBufferSend>:
    97c9:	f3 0f 1e fa          	endbr64 
    97cd:	55                   	push   %rbp
    97ce:	48 89 e5             	mov    %rsp,%rbp
    97d1:	53                   	push   %rbx
    97d2:	48 83 ec 78          	sub    $0x78,%rsp
    97d6:	48 89 7d 98          	mov    %rdi,-0x68(%rbp)
    97da:	48 89 75 90          	mov    %rsi,-0x70(%rbp)
    97de:	48 89 55 88          	mov    %rdx,-0x78(%rbp)
    97e2:	48 89 4d 80          	mov    %rcx,-0x80(%rbp)
    97e6:	64 48 8b 04 25 28 00 	mov    %fs:0x28,%rax
    97ed:	00 00 
    97ef:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
    97f3:	31 c0                	xor    %eax,%eax
    97f5:	48 8b 45 98          	mov    -0x68(%rbp),%rax
    97f9:	48 89 45 b8          	mov    %rax,-0x48(%rbp)
    97fd:	48 c7 45 a8 00 00 00 	movq   $0x0,-0x58(%rbp)
    9804:	00 
    9805:	48 8b 45 88          	mov    -0x78(%rbp),%rax
    9809:	48 89 45 b0          	mov    %rax,-0x50(%rbp)
    980d:	48 c7 45 c0 00 00 00 	movq   $0x0,-0x40(%rbp)
    9814:	00 
    9815:	48 83 7d 90 00       	cmpq   $0x0,-0x70(%rbp)
    981a:	75 11                	jne    982d <xStreamBufferSend+0x64>
    981c:	be 29 02 00 00       	mov    $0x229,%esi
    9821:	48 8d 3d 38 e0 01 00 	lea    0x1e038(%rip),%rdi        # 27860 <_IO_stdin_used+0x860>
    9828:	e8 df a4 ff ff       	callq  3d0c <vAssertCalled>
    982d:	48 83 7d b8 00       	cmpq   $0x0,-0x48(%rbp)
    9832:	75 11                	jne    9845 <xStreamBufferSend+0x7c>
    9834:	be 2a 02 00 00       	mov    $0x22a,%esi
    9839:	48 8d 3d 20 e0 01 00 	lea    0x1e020(%rip),%rdi        # 27860 <_IO_stdin_used+0x860>
    9840:	e8 c7 a4 ff ff       	callq  3d0c <vAssertCalled>
    9845:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
    9849:	48 8b 40 10          	mov    0x10(%rax),%rax
    984d:	48 83 e8 01          	sub    $0x1,%rax
    9851:	48 89 45 c0          	mov    %rax,-0x40(%rbp)
    9855:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
    9859:	0f b6 40 38          	movzbl 0x38(%rax),%eax
    985d:	0f b6 c0             	movzbl %al,%eax
    9860:	83 e0 01             	and    $0x1,%eax
    9863:	85 c0                	test   %eax,%eax
    9865:	74 34                	je     989b <xStreamBufferSend+0xd2>
    9867:	48 83 45 b0 08       	addq   $0x8,-0x50(%rbp)
    986c:	48 8b 45 b0          	mov    -0x50(%rbp),%rax
    9870:	48 3b 45 88          	cmp    -0x78(%rbp),%rax
    9874:	77 11                	ja     9887 <xStreamBufferSend+0xbe>
    9876:	be 39 02 00 00       	mov    $0x239,%esi
    987b:	48 8d 3d de df 01 00 	lea    0x1dfde(%rip),%rdi        # 27860 <_IO_stdin_used+0x860>
    9882:	e8 85 a4 ff ff       	callq  3d0c <vAssertCalled>
    9887:	48 8b 45 b0          	mov    -0x50(%rbp),%rax
    988b:	48 3b 45 c0          	cmp    -0x40(%rbp),%rax
    988f:	76 1c                	jbe    98ad <xStreamBufferSend+0xe4>
    9891:	48 c7 45 80 00 00 00 	movq   $0x0,-0x80(%rbp)
    9898:	00 
    9899:	eb 12                	jmp    98ad <xStreamBufferSend+0xe4>
    989b:	48 8b 45 b0          	mov    -0x50(%rbp),%rax
    989f:	48 3b 45 c0          	cmp    -0x40(%rbp),%rax
    98a3:	76 08                	jbe    98ad <xStreamBufferSend+0xe4>
    98a5:	48 8b 45 c0          	mov    -0x40(%rbp),%rax
    98a9:	48 89 45 b0          	mov    %rax,-0x50(%rbp)
    98ad:	48 8b 45 80          	mov    -0x80(%rbp),%rax
    98b1:	48 85 c0             	test   %rax,%rax
    98b4:	0f 84 3a 01 00 00    	je     99f4 <xStreamBufferSend+0x22b>
    98ba:	48 8d 45 d0          	lea    -0x30(%rbp),%rax
    98be:	48 89 c7             	mov    %rax,%rdi
    98c1:	e8 4a 56 00 00       	callq  ef10 <vTaskSetTimeOutState>
    98c6:	e8 04 95 00 00       	callq  12dcf <vPortEnterCritical>
    98cb:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
    98cf:	48 89 c7             	mov    %rax,%rdi
    98d2:	e8 1d fe ff ff       	callq  96f4 <xStreamBufferSpacesAvailable>
    98d7:	48 89 45 a8          	mov    %rax,-0x58(%rbp)
    98db:	48 8b 45 a8          	mov    -0x58(%rbp),%rax
    98df:	48 3b 45 b0          	cmp    -0x50(%rbp),%rax
    98e3:	73 5c                	jae    9941 <xStreamBufferSend+0x178>
    98e5:	be 00 00 00 00       	mov    $0x0,%esi
    98ea:	bf 00 00 00 00       	mov    $0x0,%edi
    98ef:	e8 2a 77 00 00       	callq  1101e <xTaskGenericNotifyStateClear>
    98f4:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
    98f8:	48 8b 40 28          	mov    0x28(%rax),%rax
    98fc:	48 85 c0             	test   %rax,%rax
    98ff:	74 11                	je     9912 <xStreamBufferSend+0x149>
    9901:	be 69 02 00 00       	mov    $0x269,%esi
    9906:	48 8d 3d 53 df 01 00 	lea    0x1df53(%rip),%rdi        # 27860 <_IO_stdin_used+0x860>
    990d:	e8 fa a3 ff ff       	callq  3d0c <vAssertCalled>
    9912:	e8 67 5d 00 00       	callq  f67e <xTaskGetCurrentTaskHandle>
    9917:	48 8b 55 b8          	mov    -0x48(%rbp),%rdx
    991b:	48 89 42 28          	mov    %rax,0x28(%rdx)
    991f:	e8 d9 94 00 00       	callq  12dfd <vPortExitCritical>
    9924:	e8 33 9d 01 00       	callq  2365c <prvTraceGetCurrentTaskHandle>
    9929:	48 89 c7             	mov    %rax,%rdi
    992c:	e8 2a 98 01 00       	callq  2315b <prvTraceGetTaskNumberHigh16>
    9931:	0f b7 15 a4 77 02 00 	movzwl 0x277a4(%rip),%edx        # 310dc <CurrentFilterMask>
    9938:	21 d0                	and    %edx,%eax
    993a:	66 85 c0             	test   %ax,%ax
    993d:	74 6d                	je     99ac <xStreamBufferSend+0x1e3>
    993f:	eb 0a                	jmp    994b <xStreamBufferSend+0x182>
    9941:	e8 b7 94 00 00       	callq  12dfd <vPortExitCritical>
    9946:	e9 a9 00 00 00       	jmpq   99f4 <xStreamBufferSend+0x22b>
    994b:	48 8b 45 98          	mov    -0x68(%rbp),%rax
    994f:	48 89 c7             	mov    %rax,%rdi
    9952:	e8 19 9b 01 00       	callq  23470 <prvTraceGetStreamBufferNumberHigh16>
    9957:	0f b7 15 7e 77 02 00 	movzwl 0x2777e(%rip),%edx        # 310dc <CurrentFilterMask>
    995e:	21 d0                	and    %edx,%eax
    9960:	66 85 c0             	test   %ax,%ax
    9963:	74 47                	je     99ac <xStreamBufferSend+0x1e3>
    9965:	48 8b 45 98          	mov    -0x68(%rbp),%rax
    9969:	48 89 c7             	mov    %rax,%rdi
    996c:	e8 e1 9a 01 00       	callq  23452 <prvTraceGetStreamBufferNumberLow16>
    9971:	0f b6 d0             	movzbl %al,%edx
    9974:	48 8b 45 98          	mov    -0x68(%rbp),%rax
    9978:	0f b6 40 38          	movzbl 0x38(%rax),%eax
    997c:	0f b6 c0             	movzbl %al,%eax
    997f:	83 e0 01             	and    $0x1,%eax
    9982:	85 c0                	test   %eax,%eax
    9984:	74 07                	je     998d <xStreamBufferSend+0x1c4>
    9986:	b9 08 00 00 00       	mov    $0x8,%ecx
    998b:	eb 05                	jmp    9992 <xStreamBufferSend+0x1c9>
    998d:	b9 07 00 00 00       	mov    $0x7,%ecx
    9992:	48 8b 45 98          	mov    -0x68(%rbp),%rax
    9996:	0f b6 40 38          	movzbl 0x38(%rax),%eax
    999a:	83 e0 01             	and    $0x1,%eax
    999d:	83 c0 73             	add    $0x73,%eax
    99a0:	0f b6 c0             	movzbl %al,%eax
    99a3:	89 ce                	mov    %ecx,%esi
    99a5:	89 c7                	mov    %eax,%edi
    99a7:	e8 a6 b6 01 00       	callq  25052 <prvTraceStoreKernelCall>
    99ac:	48 8b 45 80          	mov    -0x80(%rbp),%rax
    99b0:	49 89 c0             	mov    %rax,%r8
    99b3:	b9 00 00 00 00       	mov    $0x0,%ecx
    99b8:	ba 00 00 00 00       	mov    $0x0,%edx
    99bd:	be 00 00 00 00       	mov    $0x0,%esi
    99c2:	bf 00 00 00 00       	mov    $0x0,%edi
    99c7:	e8 68 68 00 00       	callq  10234 <xTaskGenericNotifyWait>
    99cc:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
    99d0:	48 c7 40 28 00 00 00 	movq   $0x0,0x28(%rax)
    99d7:	00 
    99d8:	48 8d 55 80          	lea    -0x80(%rbp),%rdx
    99dc:	48 8d 45 d0          	lea    -0x30(%rbp),%rax
    99e0:	48 89 d6             	mov    %rdx,%rsi
    99e3:	48 89 c7             	mov    %rax,%rdi
    99e6:	e8 a3 55 00 00       	callq  ef8e <xTaskCheckForTimeOut>
    99eb:	48 85 c0             	test   %rax,%rax
    99ee:	0f 84 d2 fe ff ff    	je     98c6 <xStreamBufferSend+0xfd>
    99f4:	48 83 7d a8 00       	cmpq   $0x0,-0x58(%rbp)
    99f9:	75 10                	jne    9a0b <xStreamBufferSend+0x242>
    99fb:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
    99ff:	48 89 c7             	mov    %rax,%rdi
    9a02:	e8 ed fc ff ff       	callq  96f4 <xStreamBufferSpacesAvailable>
    9a07:	48 89 45 a8          	mov    %rax,-0x58(%rbp)
    9a0b:	48 8b 7d b0          	mov    -0x50(%rbp),%rdi
    9a0f:	48 8b 4d a8          	mov    -0x58(%rbp),%rcx
    9a13:	48 8b 55 88          	mov    -0x78(%rbp),%rdx
    9a17:	48 8b 75 90          	mov    -0x70(%rbp),%rsi
    9a1b:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
    9a1f:	49 89 f8             	mov    %rdi,%r8
    9a22:	48 89 c7             	mov    %rax,%rdi
    9a25:	e8 16 04 00 00       	callq  9e40 <prvWriteMessageToBuffer>
    9a2a:	48 89 45 c8          	mov    %rax,-0x38(%rbp)
    9a2e:	48 83 7d c8 00       	cmpq   $0x0,-0x38(%rbp)
    9a33:	0f 84 2a 01 00 00    	je     9b63 <xStreamBufferSend+0x39a>
    9a39:	e8 1e 9c 01 00       	callq  2365c <prvTraceGetCurrentTaskHandle>
    9a3e:	48 89 c7             	mov    %rax,%rdi
    9a41:	e8 15 97 01 00       	callq  2315b <prvTraceGetTaskNumberHigh16>
    9a46:	0f b7 15 8f 76 02 00 	movzwl 0x2768f(%rip),%edx        # 310dc <CurrentFilterMask>
    9a4d:	21 d0                	and    %edx,%eax
    9a4f:	66 85 c0             	test   %ax,%ax
    9a52:	74 61                	je     9ab5 <xStreamBufferSend+0x2ec>
    9a54:	48 8b 45 98          	mov    -0x68(%rbp),%rax
    9a58:	48 89 c7             	mov    %rax,%rdi
    9a5b:	e8 10 9a 01 00       	callq  23470 <prvTraceGetStreamBufferNumberHigh16>
    9a60:	0f b7 15 75 76 02 00 	movzwl 0x27675(%rip),%edx        # 310dc <CurrentFilterMask>
    9a67:	21 d0                	and    %edx,%eax
    9a69:	66 85 c0             	test   %ax,%ax
    9a6c:	74 47                	je     9ab5 <xStreamBufferSend+0x2ec>
    9a6e:	48 8b 45 98          	mov    -0x68(%rbp),%rax
    9a72:	48 89 c7             	mov    %rax,%rdi
    9a75:	e8 d8 99 01 00       	callq  23452 <prvTraceGetStreamBufferNumberLow16>
    9a7a:	0f b6 d0             	movzbl %al,%edx
    9a7d:	48 8b 45 98          	mov    -0x68(%rbp),%rax
    9a81:	0f b6 40 38          	movzbl 0x38(%rax),%eax
    9a85:	0f b6 c0             	movzbl %al,%eax
    9a88:	83 e0 01             	and    $0x1,%eax
    9a8b:	85 c0                	test   %eax,%eax
    9a8d:	74 07                	je     9a96 <xStreamBufferSend+0x2cd>
    9a8f:	b9 08 00 00 00       	mov    $0x8,%ecx
    9a94:	eb 05                	jmp    9a9b <xStreamBufferSend+0x2d2>
    9a96:	b9 07 00 00 00       	mov    $0x7,%ecx
    9a9b:	48 8b 45 98          	mov    -0x68(%rbp),%rax
    9a9f:	0f b6 40 38          	movzbl 0x38(%rax),%eax
    9aa3:	83 e0 01             	and    $0x1,%eax
    9aa6:	83 c0 23             	add    $0x23,%eax
    9aa9:	0f b6 c0             	movzbl %al,%eax
    9aac:	89 ce                	mov    %ecx,%esi
    9aae:	89 c7                	mov    %eax,%edi
    9ab0:	e8 9d b5 01 00       	callq  25052 <prvTraceStoreKernelCall>
    9ab5:	48 8b 45 98          	mov    -0x68(%rbp),%rax
    9ab9:	48 89 c7             	mov    %rax,%rdi
    9abc:	e8 05 10 00 00       	callq  aac6 <prvBytesInBuffer>
    9ac1:	0f b6 d8             	movzbl %al,%ebx
    9ac4:	48 8b 45 98          	mov    -0x68(%rbp),%rax
    9ac8:	48 89 c7             	mov    %rax,%rdi
    9acb:	e8 82 99 01 00       	callq  23452 <prvTraceGetStreamBufferNumberLow16>
    9ad0:	0f b6 c0             	movzbl %al,%eax
    9ad3:	48 8b 55 98          	mov    -0x68(%rbp),%rdx
    9ad7:	0f b6 52 38          	movzbl 0x38(%rdx),%edx
    9adb:	0f b6 d2             	movzbl %dl,%edx
    9ade:	83 e2 01             	and    $0x1,%edx
    9ae1:	85 d2                	test   %edx,%edx
    9ae3:	74 07                	je     9aec <xStreamBufferSend+0x323>
    9ae5:	b9 08 00 00 00       	mov    $0x8,%ecx
    9aea:	eb 05                	jmp    9af1 <xStreamBufferSend+0x328>
    9aec:	b9 07 00 00 00       	mov    $0x7,%ecx
    9af1:	89 da                	mov    %ebx,%edx
    9af3:	89 c6                	mov    %eax,%esi
    9af5:	89 cf                	mov    %ecx,%edi
    9af7:	e8 90 bd 01 00       	callq  2588c <prvTraceSetObjectState>
    9afc:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
    9b00:	48 89 c7             	mov    %rax,%rdi
    9b03:	e8 be 0f 00 00       	callq  aac6 <prvBytesInBuffer>
    9b08:	48 8b 55 b8          	mov    -0x48(%rbp),%rdx
    9b0c:	48 8b 52 18          	mov    0x18(%rdx),%rdx
    9b10:	48 39 d0             	cmp    %rdx,%rax
    9b13:	0f 82 c6 00 00 00    	jb     9bdf <xStreamBufferSend+0x416>
    9b19:	e8 23 3a 00 00       	callq  d541 <vTaskSuspendAll>
    9b1e:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
    9b22:	48 8b 40 20          	mov    0x20(%rax),%rax
    9b26:	48 85 c0             	test   %rax,%rax
    9b29:	74 31                	je     9b5c <xStreamBufferSend+0x393>
    9b2b:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
    9b2f:	48 8b 40 20          	mov    0x20(%rax),%rax
    9b33:	41 b8 00 00 00 00    	mov    $0x0,%r8d
    9b39:	b9 00 00 00 00       	mov    $0x0,%ecx
    9b3e:	ba 00 00 00 00       	mov    $0x0,%edx
    9b43:	be 00 00 00 00       	mov    $0x0,%esi
    9b48:	48 89 c7             	mov    %rax,%rdi
    9b4b:	e8 4b 69 00 00       	callq  1049b <xTaskGenericNotify>
    9b50:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
    9b54:	48 c7 40 20 00 00 00 	movq   $0x0,0x20(%rax)
    9b5b:	00 
    9b5c:	e8 fd 39 00 00       	callq  d55e <xTaskResumeAll>
    9b61:	eb 7c                	jmp    9bdf <xStreamBufferSend+0x416>
    9b63:	e8 f4 9a 01 00       	callq  2365c <prvTraceGetCurrentTaskHandle>
    9b68:	48 89 c7             	mov    %rax,%rdi
    9b6b:	e8 eb 95 01 00       	callq  2315b <prvTraceGetTaskNumberHigh16>
    9b70:	0f b7 15 65 75 02 00 	movzwl 0x27565(%rip),%edx        # 310dc <CurrentFilterMask>
    9b77:	21 d0                	and    %edx,%eax
    9b79:	66 85 c0             	test   %ax,%ax
    9b7c:	74 61                	je     9bdf <xStreamBufferSend+0x416>
    9b7e:	48 8b 45 98          	mov    -0x68(%rbp),%rax
    9b82:	48 89 c7             	mov    %rax,%rdi
    9b85:	e8 e6 98 01 00       	callq  23470 <prvTraceGetStreamBufferNumberHigh16>
    9b8a:	0f b7 15 4b 75 02 00 	movzwl 0x2754b(%rip),%edx        # 310dc <CurrentFilterMask>
    9b91:	21 d0                	and    %edx,%eax
    9b93:	66 85 c0             	test   %ax,%ax
    9b96:	74 47                	je     9bdf <xStreamBufferSend+0x416>
    9b98:	48 8b 45 98          	mov    -0x68(%rbp),%rax
    9b9c:	48 89 c7             	mov    %rax,%rdi
    9b9f:	e8 ae 98 01 00       	callq  23452 <prvTraceGetStreamBufferNumberLow16>
    9ba4:	0f b6 d0             	movzbl %al,%edx
    9ba7:	48 8b 45 98          	mov    -0x68(%rbp),%rax
    9bab:	0f b6 40 38          	movzbl 0x38(%rax),%eax
    9baf:	0f b6 c0             	movzbl %al,%eax
    9bb2:	83 e0 01             	and    $0x1,%eax
    9bb5:	85 c0                	test   %eax,%eax
    9bb7:	74 07                	je     9bc0 <xStreamBufferSend+0x3f7>
    9bb9:	b9 08 00 00 00       	mov    $0x8,%ecx
    9bbe:	eb 05                	jmp    9bc5 <xStreamBufferSend+0x3fc>
    9bc0:	b9 07 00 00 00       	mov    $0x7,%ecx
    9bc5:	48 8b 45 98          	mov    -0x68(%rbp),%rax
    9bc9:	0f b6 40 38          	movzbl 0x38(%rax),%eax
    9bcd:	83 e0 01             	and    $0x1,%eax
    9bd0:	83 c0 4b             	add    $0x4b,%eax
    9bd3:	0f b6 c0             	movzbl %al,%eax
    9bd6:	89 ce                	mov    %ecx,%esi
    9bd8:	89 c7                	mov    %eax,%edi
    9bda:	e8 73 b4 01 00       	callq  25052 <prvTraceStoreKernelCall>
    9bdf:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
    9be3:	48 8b 5d e8          	mov    -0x18(%rbp),%rbx
    9be7:	64 48 33 1c 25 28 00 	xor    %fs:0x28,%rbx
    9bee:	00 00 
    9bf0:	74 05                	je     9bf7 <xStreamBufferSend+0x42e>
    9bf2:	e8 d9 88 ff ff       	callq  24d0 <__stack_chk_fail@plt>
    9bf7:	48 83 c4 78          	add    $0x78,%rsp
    9bfb:	5b                   	pop    %rbx
    9bfc:	5d                   	pop    %rbp
    9bfd:	c3                   	retq   

0000000000009bfe <xStreamBufferSendFromISR>:
    9bfe:	f3 0f 1e fa          	endbr64 
    9c02:	55                   	push   %rbp
    9c03:	48 89 e5             	mov    %rsp,%rbp
    9c06:	53                   	push   %rbx
    9c07:	48 83 ec 58          	sub    $0x58,%rsp
    9c0b:	48 89 7d b8          	mov    %rdi,-0x48(%rbp)
    9c0f:	48 89 75 b0          	mov    %rsi,-0x50(%rbp)
    9c13:	48 89 55 a8          	mov    %rdx,-0x58(%rbp)
    9c17:	48 89 4d a0          	mov    %rcx,-0x60(%rbp)
    9c1b:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
    9c1f:	48 89 45 d0          	mov    %rax,-0x30(%rbp)
    9c23:	48 8b 45 a8          	mov    -0x58(%rbp),%rax
    9c27:	48 89 45 c8          	mov    %rax,-0x38(%rbp)
    9c2b:	48 83 7d b0 00       	cmpq   $0x0,-0x50(%rbp)
    9c30:	75 11                	jne    9c43 <xStreamBufferSendFromISR+0x45>
    9c32:	be aa 02 00 00       	mov    $0x2aa,%esi
    9c37:	48 8d 3d 22 dc 01 00 	lea    0x1dc22(%rip),%rdi        # 27860 <_IO_stdin_used+0x860>
    9c3e:	e8 c9 a0 ff ff       	callq  3d0c <vAssertCalled>
    9c43:	48 83 7d d0 00       	cmpq   $0x0,-0x30(%rbp)
    9c48:	75 11                	jne    9c5b <xStreamBufferSendFromISR+0x5d>
    9c4a:	be ab 02 00 00       	mov    $0x2ab,%esi
    9c4f:	48 8d 3d 0a dc 01 00 	lea    0x1dc0a(%rip),%rdi        # 27860 <_IO_stdin_used+0x860>
    9c56:	e8 b1 a0 ff ff       	callq  3d0c <vAssertCalled>
    9c5b:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
    9c5f:	0f b6 40 38          	movzbl 0x38(%rax),%eax
    9c63:	0f b6 c0             	movzbl %al,%eax
    9c66:	83 e0 01             	and    $0x1,%eax
    9c69:	85 c0                	test   %eax,%eax
    9c6b:	74 05                	je     9c72 <xStreamBufferSendFromISR+0x74>
    9c6d:	48 83 45 c8 08       	addq   $0x8,-0x38(%rbp)
    9c72:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
    9c76:	48 89 c7             	mov    %rax,%rdi
    9c79:	e8 76 fa ff ff       	callq  96f4 <xStreamBufferSpacesAvailable>
    9c7e:	48 89 45 d8          	mov    %rax,-0x28(%rbp)
    9c82:	48 8b 7d c8          	mov    -0x38(%rbp),%rdi
    9c86:	48 8b 4d d8          	mov    -0x28(%rbp),%rcx
    9c8a:	48 8b 55 a8          	mov    -0x58(%rbp),%rdx
    9c8e:	48 8b 75 b0          	mov    -0x50(%rbp),%rsi
    9c92:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
    9c96:	49 89 f8             	mov    %rdi,%r8
    9c99:	48 89 c7             	mov    %rax,%rdi
    9c9c:	e8 9f 01 00 00       	callq  9e40 <prvWriteMessageToBuffer>
    9ca1:	48 89 45 e0          	mov    %rax,-0x20(%rbp)
    9ca5:	48 83 7d e0 00       	cmpq   $0x0,-0x20(%rbp)
    9caa:	74 73                	je     9d1f <xStreamBufferSendFromISR+0x121>
    9cac:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
    9cb0:	48 89 c7             	mov    %rax,%rdi
    9cb3:	e8 0e 0e 00 00       	callq  aac6 <prvBytesInBuffer>
    9cb8:	48 8b 55 d0          	mov    -0x30(%rbp),%rdx
    9cbc:	48 8b 52 18          	mov    0x18(%rdx),%rdx
    9cc0:	48 39 d0             	cmp    %rdx,%rax
    9cc3:	72 5a                	jb     9d1f <xStreamBufferSendFromISR+0x121>
    9cc5:	e8 06 92 00 00       	callq  12ed0 <xPortSetInterruptMask>
    9cca:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
    9cce:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
    9cd2:	48 8b 40 20          	mov    0x20(%rax),%rax
    9cd6:	48 85 c0             	test   %rax,%rax
    9cd9:	74 38                	je     9d13 <xStreamBufferSendFromISR+0x115>
    9cdb:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
    9cdf:	48 8b 40 20          	mov    0x20(%rax),%rax
    9ce3:	48 8b 55 a0          	mov    -0x60(%rbp),%rdx
    9ce7:	49 89 d1             	mov    %rdx,%r9
    9cea:	41 b8 00 00 00 00    	mov    $0x0,%r8d
    9cf0:	b9 00 00 00 00       	mov    $0x0,%ecx
    9cf5:	ba 00 00 00 00       	mov    $0x0,%edx
    9cfa:	be 00 00 00 00       	mov    $0x0,%esi
    9cff:	48 89 c7             	mov    %rax,%rdi
    9d02:	e8 5c 6b 00 00       	callq  10863 <xTaskGenericNotifyFromISR>
    9d07:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
    9d0b:	48 c7 40 20 00 00 00 	movq   $0x0,0x20(%rax)
    9d12:	00 
    9d13:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
    9d17:	48 89 c7             	mov    %rax,%rdi
    9d1a:	e8 c0 91 00 00       	callq  12edf <vPortClearInterruptMask>
    9d1f:	48 83 7d e0 00       	cmpq   $0x0,-0x20(%rbp)
    9d24:	0f 84 aa 00 00 00    	je     9dd4 <xStreamBufferSendFromISR+0x1d6>
    9d2a:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
    9d2e:	48 89 c7             	mov    %rax,%rdi
    9d31:	e8 3a 97 01 00       	callq  23470 <prvTraceGetStreamBufferNumberHigh16>
    9d36:	0f b7 15 9f 73 02 00 	movzwl 0x2739f(%rip),%edx        # 310dc <CurrentFilterMask>
    9d3d:	21 d0                	and    %edx,%eax
    9d3f:	66 85 c0             	test   %ax,%ax
    9d42:	74 47                	je     9d8b <xStreamBufferSendFromISR+0x18d>
    9d44:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
    9d48:	48 89 c7             	mov    %rax,%rdi
    9d4b:	e8 02 97 01 00       	callq  23452 <prvTraceGetStreamBufferNumberLow16>
    9d50:	0f b6 d0             	movzbl %al,%edx
    9d53:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
    9d57:	0f b6 40 38          	movzbl 0x38(%rax),%eax
    9d5b:	0f b6 c0             	movzbl %al,%eax
    9d5e:	83 e0 01             	and    $0x1,%eax
    9d61:	85 c0                	test   %eax,%eax
    9d63:	74 07                	je     9d6c <xStreamBufferSendFromISR+0x16e>
    9d65:	b9 08 00 00 00       	mov    $0x8,%ecx
    9d6a:	eb 05                	jmp    9d71 <xStreamBufferSendFromISR+0x173>
    9d6c:	b9 07 00 00 00       	mov    $0x7,%ecx
    9d71:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
    9d75:	0f b6 40 38          	movzbl 0x38(%rax),%eax
    9d79:	83 e0 01             	and    $0x1,%eax
    9d7c:	83 c0 33             	add    $0x33,%eax
    9d7f:	0f b6 c0             	movzbl %al,%eax
    9d82:	89 ce                	mov    %ecx,%esi
    9d84:	89 c7                	mov    %eax,%edi
    9d86:	e8 c7 b2 01 00       	callq  25052 <prvTraceStoreKernelCall>
    9d8b:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
    9d8f:	48 89 c7             	mov    %rax,%rdi
    9d92:	e8 2f 0d 00 00       	callq  aac6 <prvBytesInBuffer>
    9d97:	0f b6 d8             	movzbl %al,%ebx
    9d9a:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
    9d9e:	48 89 c7             	mov    %rax,%rdi
    9da1:	e8 ac 96 01 00       	callq  23452 <prvTraceGetStreamBufferNumberLow16>
    9da6:	0f b6 c0             	movzbl %al,%eax
    9da9:	48 8b 55 b8          	mov    -0x48(%rbp),%rdx
    9dad:	0f b6 52 38          	movzbl 0x38(%rdx),%edx
    9db1:	0f b6 d2             	movzbl %dl,%edx
    9db4:	83 e2 01             	and    $0x1,%edx
    9db7:	85 d2                	test   %edx,%edx
    9db9:	74 07                	je     9dc2 <xStreamBufferSendFromISR+0x1c4>
    9dbb:	b9 08 00 00 00       	mov    $0x8,%ecx
    9dc0:	eb 05                	jmp    9dc7 <xStreamBufferSendFromISR+0x1c9>
    9dc2:	b9 07 00 00 00       	mov    $0x7,%ecx
    9dc7:	89 da                	mov    %ebx,%edx
    9dc9:	89 c6                	mov    %eax,%esi
    9dcb:	89 cf                	mov    %ecx,%edi
    9dcd:	e8 ba ba 01 00       	callq  2588c <prvTraceSetObjectState>
    9dd2:	eb 61                	jmp    9e35 <xStreamBufferSendFromISR+0x237>
    9dd4:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
    9dd8:	48 89 c7             	mov    %rax,%rdi
    9ddb:	e8 90 96 01 00       	callq  23470 <prvTraceGetStreamBufferNumberHigh16>
    9de0:	0f b7 15 f5 72 02 00 	movzwl 0x272f5(%rip),%edx        # 310dc <CurrentFilterMask>
    9de7:	21 d0                	and    %edx,%eax
    9de9:	66 85 c0             	test   %ax,%ax
    9dec:	74 47                	je     9e35 <xStreamBufferSendFromISR+0x237>
    9dee:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
    9df2:	48 89 c7             	mov    %rax,%rdi
    9df5:	e8 58 96 01 00       	callq  23452 <prvTraceGetStreamBufferNumberLow16>
    9dfa:	0f b6 d0             	movzbl %al,%edx
    9dfd:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
    9e01:	0f b6 40 38          	movzbl 0x38(%rax),%eax
    9e05:	0f b6 c0             	movzbl %al,%eax
    9e08:	83 e0 01             	and    $0x1,%eax
    9e0b:	85 c0                	test   %eax,%eax
    9e0d:	74 07                	je     9e16 <xStreamBufferSendFromISR+0x218>
    9e0f:	b9 08 00 00 00       	mov    $0x8,%ecx
    9e14:	eb 05                	jmp    9e1b <xStreamBufferSendFromISR+0x21d>
    9e16:	b9 07 00 00 00       	mov    $0x7,%ecx
    9e1b:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
    9e1f:	0f b6 40 38          	movzbl 0x38(%rax),%eax
    9e23:	83 e0 01             	and    $0x1,%eax
    9e26:	83 c0 5b             	add    $0x5b,%eax
    9e29:	0f b6 c0             	movzbl %al,%eax
    9e2c:	89 ce                	mov    %ecx,%esi
    9e2e:	89 c7                	mov    %eax,%edi
    9e30:	e8 1d b2 01 00       	callq  25052 <prvTraceStoreKernelCall>
    9e35:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
    9e39:	48 83 c4 58          	add    $0x58,%rsp
    9e3d:	5b                   	pop    %rbx
    9e3e:	5d                   	pop    %rbp
    9e3f:	c3                   	retq   

0000000000009e40 <prvWriteMessageToBuffer>:
    9e40:	f3 0f 1e fa          	endbr64 
    9e44:	55                   	push   %rbp
    9e45:	48 89 e5             	mov    %rsp,%rbp
    9e48:	48 83 ec 40          	sub    $0x40,%rsp
    9e4c:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
    9e50:	48 89 75 e0          	mov    %rsi,-0x20(%rbp)
    9e54:	48 89 55 d8          	mov    %rdx,-0x28(%rbp)
    9e58:	48 89 4d d0          	mov    %rcx,-0x30(%rbp)
    9e5c:	4c 89 45 c8          	mov    %r8,-0x38(%rbp)
    9e60:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
    9e64:	48 8b 40 08          	mov    0x8(%rax),%rax
    9e68:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
    9e6c:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
    9e70:	0f b6 40 38          	movzbl 0x38(%rax),%eax
    9e74:	0f b6 c0             	movzbl %al,%eax
    9e77:	83 e0 01             	and    $0x1,%eax
    9e7a:	85 c0                	test   %eax,%eax
    9e7c:	74 36                	je     9eb4 <prvWriteMessageToBuffer+0x74>
    9e7e:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
    9e82:	48 3b 45 c8          	cmp    -0x38(%rbp),%rax
    9e86:	72 22                	jb     9eaa <prvWriteMessageToBuffer+0x6a>
    9e88:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
    9e8c:	48 8d 75 d8          	lea    -0x28(%rbp),%rsi
    9e90:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
    9e94:	48 89 d1             	mov    %rdx,%rcx
    9e97:	ba 08 00 00 00       	mov    $0x8,%edx
    9e9c:	48 89 c7             	mov    %rax,%rdi
    9e9f:	e8 f6 09 00 00       	callq  a89a <prvWriteBytesToBuffer>
    9ea4:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
    9ea8:	eb 1b                	jmp    9ec5 <prvWriteMessageToBuffer+0x85>
    9eaa:	48 c7 45 d8 00 00 00 	movq   $0x0,-0x28(%rbp)
    9eb1:	00 
    9eb2:	eb 11                	jmp    9ec5 <prvWriteMessageToBuffer+0x85>
    9eb4:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
    9eb8:	48 39 45 d0          	cmp    %rax,-0x30(%rbp)
    9ebc:	48 0f 46 45 d0       	cmovbe -0x30(%rbp),%rax
    9ec1:	48 89 45 d8          	mov    %rax,-0x28(%rbp)
    9ec5:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
    9ec9:	48 85 c0             	test   %rax,%rax
    9ecc:	74 20                	je     9eee <prvWriteMessageToBuffer+0xae>
    9ece:	48 8b 55 d8          	mov    -0x28(%rbp),%rdx
    9ed2:	48 8b 4d f8          	mov    -0x8(%rbp),%rcx
    9ed6:	48 8b 75 e0          	mov    -0x20(%rbp),%rsi
    9eda:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
    9ede:	48 89 c7             	mov    %rax,%rdi
    9ee1:	e8 b4 09 00 00       	callq  a89a <prvWriteBytesToBuffer>
    9ee6:	48 8b 55 e8          	mov    -0x18(%rbp),%rdx
    9eea:	48 89 42 08          	mov    %rax,0x8(%rdx)
    9eee:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
    9ef2:	c9                   	leaveq 
    9ef3:	c3                   	retq   

0000000000009ef4 <xStreamBufferReceive>:
    9ef4:	f3 0f 1e fa          	endbr64 
    9ef8:	55                   	push   %rbp
    9ef9:	48 89 e5             	mov    %rsp,%rbp
    9efc:	53                   	push   %rbx
    9efd:	48 83 ec 48          	sub    $0x48,%rsp
    9f01:	48 89 7d c8          	mov    %rdi,-0x38(%rbp)
    9f05:	48 89 75 c0          	mov    %rsi,-0x40(%rbp)
    9f09:	48 89 55 b8          	mov    %rdx,-0x48(%rbp)
    9f0d:	48 89 4d b0          	mov    %rcx,-0x50(%rbp)
    9f11:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
    9f15:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
    9f19:	48 c7 45 d0 00 00 00 	movq   $0x0,-0x30(%rbp)
    9f20:	00 
    9f21:	48 83 7d c0 00       	cmpq   $0x0,-0x40(%rbp)
    9f26:	75 11                	jne    9f39 <xStreamBufferReceive+0x45>
    9f28:	be 07 03 00 00       	mov    $0x307,%esi
    9f2d:	48 8d 3d 2c d9 01 00 	lea    0x1d92c(%rip),%rdi        # 27860 <_IO_stdin_used+0x860>
    9f34:	e8 d3 9d ff ff       	callq  3d0c <vAssertCalled>
    9f39:	48 83 7d e8 00       	cmpq   $0x0,-0x18(%rbp)
    9f3e:	75 11                	jne    9f51 <xStreamBufferReceive+0x5d>
    9f40:	be 08 03 00 00       	mov    $0x308,%esi
    9f45:	48 8d 3d 14 d9 01 00 	lea    0x1d914(%rip),%rdi        # 27860 <_IO_stdin_used+0x860>
    9f4c:	e8 bb 9d ff ff       	callq  3d0c <vAssertCalled>
    9f51:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
    9f55:	0f b6 40 38          	movzbl 0x38(%rax),%eax
    9f59:	0f b6 c0             	movzbl %al,%eax
    9f5c:	83 e0 01             	and    $0x1,%eax
    9f5f:	85 c0                	test   %eax,%eax
    9f61:	74 0a                	je     9f6d <xStreamBufferReceive+0x79>
    9f63:	48 c7 45 e0 08 00 00 	movq   $0x8,-0x20(%rbp)
    9f6a:	00 
    9f6b:	eb 08                	jmp    9f75 <xStreamBufferReceive+0x81>
    9f6d:	48 c7 45 e0 00 00 00 	movq   $0x0,-0x20(%rbp)
    9f74:	00 
    9f75:	48 83 7d b0 00       	cmpq   $0x0,-0x50(%rbp)
    9f7a:	0f 84 26 01 00 00    	je     a0a6 <xStreamBufferReceive+0x1b2>
    9f80:	e8 4a 8e 00 00       	callq  12dcf <vPortEnterCritical>
    9f85:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
    9f89:	48 89 c7             	mov    %rax,%rdi
    9f8c:	e8 35 0b 00 00       	callq  aac6 <prvBytesInBuffer>
    9f91:	48 89 45 d8          	mov    %rax,-0x28(%rbp)
    9f95:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
    9f99:	48 3b 45 e0          	cmp    -0x20(%rbp),%rax
    9f9d:	77 3a                	ja     9fd9 <xStreamBufferReceive+0xe5>
    9f9f:	be 00 00 00 00       	mov    $0x0,%esi
    9fa4:	bf 00 00 00 00       	mov    $0x0,%edi
    9fa9:	e8 70 70 00 00       	callq  1101e <xTaskGenericNotifyStateClear>
    9fae:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
    9fb2:	48 8b 40 20          	mov    0x20(%rax),%rax
    9fb6:	48 85 c0             	test   %rax,%rax
    9fb9:	74 11                	je     9fcc <xStreamBufferReceive+0xd8>
    9fbb:	be 2b 03 00 00       	mov    $0x32b,%esi
    9fc0:	48 8d 3d 99 d8 01 00 	lea    0x1d899(%rip),%rdi        # 27860 <_IO_stdin_used+0x860>
    9fc7:	e8 40 9d ff ff       	callq  3d0c <vAssertCalled>
    9fcc:	e8 ad 56 00 00       	callq  f67e <xTaskGetCurrentTaskHandle>
    9fd1:	48 8b 55 e8          	mov    -0x18(%rbp),%rdx
    9fd5:	48 89 42 20          	mov    %rax,0x20(%rdx)
    9fd9:	e8 1f 8e 00 00       	callq  12dfd <vPortExitCritical>
    9fde:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
    9fe2:	48 3b 45 e0          	cmp    -0x20(%rbp),%rax
    9fe6:	0f 87 ca 00 00 00    	ja     a0b6 <xStreamBufferReceive+0x1c2>
    9fec:	e8 6b 96 01 00       	callq  2365c <prvTraceGetCurrentTaskHandle>
    9ff1:	48 89 c7             	mov    %rax,%rdi
    9ff4:	e8 62 91 01 00       	callq  2315b <prvTraceGetTaskNumberHigh16>
    9ff9:	0f b7 15 dc 70 02 00 	movzwl 0x270dc(%rip),%edx        # 310dc <CurrentFilterMask>
    a000:	21 d0                	and    %edx,%eax
    a002:	66 85 c0             	test   %ax,%ax
    a005:	74 61                	je     a068 <xStreamBufferReceive+0x174>
    a007:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
    a00b:	48 89 c7             	mov    %rax,%rdi
    a00e:	e8 5d 94 01 00       	callq  23470 <prvTraceGetStreamBufferNumberHigh16>
    a013:	0f b7 15 c2 70 02 00 	movzwl 0x270c2(%rip),%edx        # 310dc <CurrentFilterMask>
    a01a:	21 d0                	and    %edx,%eax
    a01c:	66 85 c0             	test   %ax,%ax
    a01f:	74 47                	je     a068 <xStreamBufferReceive+0x174>
    a021:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
    a025:	48 89 c7             	mov    %rax,%rdi
    a028:	e8 25 94 01 00       	callq  23452 <prvTraceGetStreamBufferNumberLow16>
    a02d:	0f b6 d0             	movzbl %al,%edx
    a030:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
    a034:	0f b6 40 38          	movzbl 0x38(%rax),%eax
    a038:	0f b6 c0             	movzbl %al,%eax
    a03b:	83 e0 01             	and    $0x1,%eax
    a03e:	85 c0                	test   %eax,%eax
    a040:	74 07                	je     a049 <xStreamBufferReceive+0x155>
    a042:	b9 08 00 00 00       	mov    $0x8,%ecx
    a047:	eb 05                	jmp    a04e <xStreamBufferReceive+0x15a>
    a049:	b9 07 00 00 00       	mov    $0x7,%ecx
    a04e:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
    a052:	0f b6 40 38          	movzbl 0x38(%rax),%eax
    a056:	83 e0 01             	and    $0x1,%eax
    a059:	83 c0 6b             	add    $0x6b,%eax
    a05c:	0f b6 c0             	movzbl %al,%eax
    a05f:	89 ce                	mov    %ecx,%esi
    a061:	89 c7                	mov    %eax,%edi
    a063:	e8 ea af 01 00       	callq  25052 <prvTraceStoreKernelCall>
    a068:	48 8b 45 b0          	mov    -0x50(%rbp),%rax
    a06c:	49 89 c0             	mov    %rax,%r8
    a06f:	b9 00 00 00 00       	mov    $0x0,%ecx
    a074:	ba 00 00 00 00       	mov    $0x0,%edx
    a079:	be 00 00 00 00       	mov    $0x0,%esi
    a07e:	bf 00 00 00 00       	mov    $0x0,%edi
    a083:	e8 ac 61 00 00       	callq  10234 <xTaskGenericNotifyWait>
    a088:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
    a08c:	48 c7 40 20 00 00 00 	movq   $0x0,0x20(%rax)
    a093:	00 
    a094:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
    a098:	48 89 c7             	mov    %rax,%rdi
    a09b:	e8 26 0a 00 00       	callq  aac6 <prvBytesInBuffer>
    a0a0:	48 89 45 d8          	mov    %rax,-0x28(%rbp)
    a0a4:	eb 10                	jmp    a0b6 <xStreamBufferReceive+0x1c2>
    a0a6:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
    a0aa:	48 89 c7             	mov    %rax,%rdi
    a0ad:	e8 14 0a 00 00       	callq  aac6 <prvBytesInBuffer>
    a0b2:	48 89 45 d8          	mov    %rax,-0x28(%rbp)
    a0b6:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
    a0ba:	48 3b 45 e0          	cmp    -0x20(%rbp),%rax
    a0be:	0f 86 34 01 00 00    	jbe    a1f8 <xStreamBufferReceive+0x304>
    a0c4:	48 8b 4d d8          	mov    -0x28(%rbp),%rcx
    a0c8:	48 8b 55 b8          	mov    -0x48(%rbp),%rdx
    a0cc:	48 8b 75 c0          	mov    -0x40(%rbp),%rsi
    a0d0:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
    a0d4:	48 89 c7             	mov    %rax,%rdi
    a0d7:	e8 b1 04 00 00       	callq  a58d <prvReadMessageFromBuffer>
    a0dc:	48 89 45 d0          	mov    %rax,-0x30(%rbp)
    a0e0:	48 83 7d d0 00       	cmpq   $0x0,-0x30(%rbp)
    a0e5:	0f 84 89 01 00 00    	je     a274 <xStreamBufferReceive+0x380>
    a0eb:	e8 6c 95 01 00       	callq  2365c <prvTraceGetCurrentTaskHandle>
    a0f0:	48 89 c7             	mov    %rax,%rdi
    a0f3:	e8 63 90 01 00       	callq  2315b <prvTraceGetTaskNumberHigh16>
    a0f8:	0f b7 15 dd 6f 02 00 	movzwl 0x26fdd(%rip),%edx        # 310dc <CurrentFilterMask>
    a0ff:	21 d0                	and    %edx,%eax
    a101:	66 85 c0             	test   %ax,%ax
    a104:	74 61                	je     a167 <xStreamBufferReceive+0x273>
    a106:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
    a10a:	48 89 c7             	mov    %rax,%rdi
    a10d:	e8 5e 93 01 00       	callq  23470 <prvTraceGetStreamBufferNumberHigh16>
    a112:	0f b7 15 c3 6f 02 00 	movzwl 0x26fc3(%rip),%edx        # 310dc <CurrentFilterMask>
    a119:	21 d0                	and    %edx,%eax
    a11b:	66 85 c0             	test   %ax,%ax
    a11e:	74 47                	je     a167 <xStreamBufferReceive+0x273>
    a120:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
    a124:	48 89 c7             	mov    %rax,%rdi
    a127:	e8 26 93 01 00       	callq  23452 <prvTraceGetStreamBufferNumberLow16>
    a12c:	0f b6 d0             	movzbl %al,%edx
    a12f:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
    a133:	0f b6 40 38          	movzbl 0x38(%rax),%eax
    a137:	0f b6 c0             	movzbl %al,%eax
    a13a:	83 e0 01             	and    $0x1,%eax
    a13d:	85 c0                	test   %eax,%eax
    a13f:	74 07                	je     a148 <xStreamBufferReceive+0x254>
    a141:	b9 08 00 00 00       	mov    $0x8,%ecx
    a146:	eb 05                	jmp    a14d <xStreamBufferReceive+0x259>
    a148:	b9 07 00 00 00       	mov    $0x7,%ecx
    a14d:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
    a151:	0f b6 40 38          	movzbl 0x38(%rax),%eax
    a155:	83 e0 01             	and    $0x1,%eax
    a158:	83 c0 2b             	add    $0x2b,%eax
    a15b:	0f b6 c0             	movzbl %al,%eax
    a15e:	89 ce                	mov    %ecx,%esi
    a160:	89 c7                	mov    %eax,%edi
    a162:	e8 eb ae 01 00       	callq  25052 <prvTraceStoreKernelCall>
    a167:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
    a16b:	48 89 c7             	mov    %rax,%rdi
    a16e:	e8 53 09 00 00       	callq  aac6 <prvBytesInBuffer>
    a173:	0f b6 d8             	movzbl %al,%ebx
    a176:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
    a17a:	48 89 c7             	mov    %rax,%rdi
    a17d:	e8 d0 92 01 00       	callq  23452 <prvTraceGetStreamBufferNumberLow16>
    a182:	0f b6 c0             	movzbl %al,%eax
    a185:	48 8b 55 c8          	mov    -0x38(%rbp),%rdx
    a189:	0f b6 52 38          	movzbl 0x38(%rdx),%edx
    a18d:	0f b6 d2             	movzbl %dl,%edx
    a190:	83 e2 01             	and    $0x1,%edx
    a193:	85 d2                	test   %edx,%edx
    a195:	74 07                	je     a19e <xStreamBufferReceive+0x2aa>
    a197:	b9 08 00 00 00       	mov    $0x8,%ecx
    a19c:	eb 05                	jmp    a1a3 <xStreamBufferReceive+0x2af>
    a19e:	b9 07 00 00 00       	mov    $0x7,%ecx
    a1a3:	89 da                	mov    %ebx,%edx
    a1a5:	89 c6                	mov    %eax,%esi
    a1a7:	89 cf                	mov    %ecx,%edi
    a1a9:	e8 de b6 01 00       	callq  2588c <prvTraceSetObjectState>
    a1ae:	e8 8e 33 00 00       	callq  d541 <vTaskSuspendAll>
    a1b3:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
    a1b7:	48 8b 40 28          	mov    0x28(%rax),%rax
    a1bb:	48 85 c0             	test   %rax,%rax
    a1be:	74 31                	je     a1f1 <xStreamBufferReceive+0x2fd>
    a1c0:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
    a1c4:	48 8b 40 28          	mov    0x28(%rax),%rax
    a1c8:	41 b8 00 00 00 00    	mov    $0x0,%r8d
    a1ce:	b9 00 00 00 00       	mov    $0x0,%ecx
    a1d3:	ba 00 00 00 00       	mov    $0x0,%edx
    a1d8:	be 00 00 00 00       	mov    $0x0,%esi
    a1dd:	48 89 c7             	mov    %rax,%rdi
    a1e0:	e8 b6 62 00 00       	callq  1049b <xTaskGenericNotify>
    a1e5:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
    a1e9:	48 c7 40 28 00 00 00 	movq   $0x0,0x28(%rax)
    a1f0:	00 
    a1f1:	e8 68 33 00 00       	callq  d55e <xTaskResumeAll>
    a1f6:	eb 7c                	jmp    a274 <xStreamBufferReceive+0x380>
    a1f8:	e8 5f 94 01 00       	callq  2365c <prvTraceGetCurrentTaskHandle>
    a1fd:	48 89 c7             	mov    %rax,%rdi
    a200:	e8 56 8f 01 00       	callq  2315b <prvTraceGetTaskNumberHigh16>
    a205:	0f b7 15 d0 6e 02 00 	movzwl 0x26ed0(%rip),%edx        # 310dc <CurrentFilterMask>
    a20c:	21 d0                	and    %edx,%eax
    a20e:	66 85 c0             	test   %ax,%ax
    a211:	74 61                	je     a274 <xStreamBufferReceive+0x380>
    a213:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
    a217:	48 89 c7             	mov    %rax,%rdi
    a21a:	e8 51 92 01 00       	callq  23470 <prvTraceGetStreamBufferNumberHigh16>
    a21f:	0f b7 15 b6 6e 02 00 	movzwl 0x26eb6(%rip),%edx        # 310dc <CurrentFilterMask>
    a226:	21 d0                	and    %edx,%eax
    a228:	66 85 c0             	test   %ax,%ax
    a22b:	74 47                	je     a274 <xStreamBufferReceive+0x380>
    a22d:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
    a231:	48 89 c7             	mov    %rax,%rdi
    a234:	e8 19 92 01 00       	callq  23452 <prvTraceGetStreamBufferNumberLow16>
    a239:	0f b6 d0             	movzbl %al,%edx
    a23c:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
    a240:	0f b6 40 38          	movzbl 0x38(%rax),%eax
    a244:	0f b6 c0             	movzbl %al,%eax
    a247:	83 e0 01             	and    $0x1,%eax
    a24a:	85 c0                	test   %eax,%eax
    a24c:	74 07                	je     a255 <xStreamBufferReceive+0x361>
    a24e:	b9 08 00 00 00       	mov    $0x8,%ecx
    a253:	eb 05                	jmp    a25a <xStreamBufferReceive+0x366>
    a255:	b9 07 00 00 00       	mov    $0x7,%ecx
    a25a:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
    a25e:	0f b6 40 38          	movzbl 0x38(%rax),%eax
    a262:	83 e0 01             	and    $0x1,%eax
    a265:	83 c0 53             	add    $0x53,%eax
    a268:	0f b6 c0             	movzbl %al,%eax
    a26b:	89 ce                	mov    %ecx,%esi
    a26d:	89 c7                	mov    %eax,%edi
    a26f:	e8 de ad 01 00       	callq  25052 <prvTraceStoreKernelCall>
    a274:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
    a278:	48 83 c4 48          	add    $0x48,%rsp
    a27c:	5b                   	pop    %rbx
    a27d:	5d                   	pop    %rbp
    a27e:	c3                   	retq   

000000000000a27f <xStreamBufferNextMessageLengthBytes>:
    a27f:	f3 0f 1e fa          	endbr64 
    a283:	55                   	push   %rbp
    a284:	48 89 e5             	mov    %rsp,%rbp
    a287:	48 83 ec 40          	sub    $0x40,%rsp
    a28b:	48 89 7d c8          	mov    %rdi,-0x38(%rbp)
    a28f:	64 48 8b 04 25 28 00 	mov    %fs:0x28,%rax
    a296:	00 00 
    a298:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
    a29c:	31 c0                	xor    %eax,%eax
    a29e:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
    a2a2:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
    a2a6:	48 83 7d e8 00       	cmpq   $0x0,-0x18(%rbp)
    a2ab:	75 11                	jne    a2be <xStreamBufferNextMessageLengthBytes+0x3f>
    a2ad:	be 6d 03 00 00       	mov    $0x36d,%esi
    a2b2:	48 8d 3d a7 d5 01 00 	lea    0x1d5a7(%rip),%rdi        # 27860 <_IO_stdin_used+0x860>
    a2b9:	e8 4e 9a ff ff       	callq  3d0c <vAssertCalled>
    a2be:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
    a2c2:	0f b6 40 38          	movzbl 0x38(%rax),%eax
    a2c6:	0f b6 c0             	movzbl %al,%eax
    a2c9:	83 e0 01             	and    $0x1,%eax
    a2cc:	85 c0                	test   %eax,%eax
    a2ce:	74 62                	je     a332 <xStreamBufferNextMessageLengthBytes+0xb3>
    a2d0:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
    a2d4:	48 89 c7             	mov    %rax,%rdi
    a2d7:	e8 ea 07 00 00       	callq  aac6 <prvBytesInBuffer>
    a2dc:	48 89 45 f0          	mov    %rax,-0x10(%rbp)
    a2e0:	48 83 7d f0 08       	cmpq   $0x8,-0x10(%rbp)
    a2e5:	76 29                	jbe    a310 <xStreamBufferNextMessageLengthBytes+0x91>
    a2e7:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
    a2eb:	48 8b 10             	mov    (%rax),%rdx
    a2ee:	48 8d 75 d8          	lea    -0x28(%rbp),%rsi
    a2f2:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
    a2f6:	48 89 d1             	mov    %rdx,%rcx
    a2f9:	ba 08 00 00 00       	mov    $0x8,%edx
    a2fe:	48 89 c7             	mov    %rax,%rdi
    a301:	e8 b1 06 00 00       	callq  a9b7 <prvReadBytesFromBuffer>
    a306:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
    a30a:	48 89 45 e0          	mov    %rax,-0x20(%rbp)
    a30e:	eb 2a                	jmp    a33a <xStreamBufferNextMessageLengthBytes+0xbb>
    a310:	48 83 7d f0 00       	cmpq   $0x0,-0x10(%rbp)
    a315:	74 11                	je     a328 <xStreamBufferNextMessageLengthBytes+0xa9>
    a317:	be 82 03 00 00       	mov    $0x382,%esi
    a31c:	48 8d 3d 3d d5 01 00 	lea    0x1d53d(%rip),%rdi        # 27860 <_IO_stdin_used+0x860>
    a323:	e8 e4 99 ff ff       	callq  3d0c <vAssertCalled>
    a328:	48 c7 45 e0 00 00 00 	movq   $0x0,-0x20(%rbp)
    a32f:	00 
    a330:	eb 08                	jmp    a33a <xStreamBufferNextMessageLengthBytes+0xbb>
    a332:	48 c7 45 e0 00 00 00 	movq   $0x0,-0x20(%rbp)
    a339:	00 
    a33a:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
    a33e:	48 8b 4d f8          	mov    -0x8(%rbp),%rcx
    a342:	64 48 33 0c 25 28 00 	xor    %fs:0x28,%rcx
    a349:	00 00 
    a34b:	74 05                	je     a352 <xStreamBufferNextMessageLengthBytes+0xd3>
    a34d:	e8 7e 81 ff ff       	callq  24d0 <__stack_chk_fail@plt>
    a352:	c9                   	leaveq 
    a353:	c3                   	retq   

000000000000a354 <xStreamBufferReceiveFromISR>:
    a354:	f3 0f 1e fa          	endbr64 
    a358:	55                   	push   %rbp
    a359:	48 89 e5             	mov    %rsp,%rbp
    a35c:	53                   	push   %rbx
    a35d:	48 83 ec 58          	sub    $0x58,%rsp
    a361:	48 89 7d b8          	mov    %rdi,-0x48(%rbp)
    a365:	48 89 75 b0          	mov    %rsi,-0x50(%rbp)
    a369:	48 89 55 a8          	mov    %rdx,-0x58(%rbp)
    a36d:	48 89 4d a0          	mov    %rcx,-0x60(%rbp)
    a371:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
    a375:	48 89 45 d8          	mov    %rax,-0x28(%rbp)
    a379:	48 c7 45 c8 00 00 00 	movq   $0x0,-0x38(%rbp)
    a380:	00 
    a381:	48 83 7d b0 00       	cmpq   $0x0,-0x50(%rbp)
    a386:	75 11                	jne    a399 <xStreamBufferReceiveFromISR+0x45>
    a388:	be 97 03 00 00       	mov    $0x397,%esi
    a38d:	48 8d 3d cc d4 01 00 	lea    0x1d4cc(%rip),%rdi        # 27860 <_IO_stdin_used+0x860>
    a394:	e8 73 99 ff ff       	callq  3d0c <vAssertCalled>
    a399:	48 83 7d d8 00       	cmpq   $0x0,-0x28(%rbp)
    a39e:	75 11                	jne    a3b1 <xStreamBufferReceiveFromISR+0x5d>
    a3a0:	be 98 03 00 00       	mov    $0x398,%esi
    a3a5:	48 8d 3d b4 d4 01 00 	lea    0x1d4b4(%rip),%rdi        # 27860 <_IO_stdin_used+0x860>
    a3ac:	e8 5b 99 ff ff       	callq  3d0c <vAssertCalled>
    a3b1:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
    a3b5:	0f b6 40 38          	movzbl 0x38(%rax),%eax
    a3b9:	0f b6 c0             	movzbl %al,%eax
    a3bc:	83 e0 01             	and    $0x1,%eax
    a3bf:	85 c0                	test   %eax,%eax
    a3c1:	74 0a                	je     a3cd <xStreamBufferReceiveFromISR+0x79>
    a3c3:	48 c7 45 d0 08 00 00 	movq   $0x8,-0x30(%rbp)
    a3ca:	00 
    a3cb:	eb 08                	jmp    a3d5 <xStreamBufferReceiveFromISR+0x81>
    a3cd:	48 c7 45 d0 00 00 00 	movq   $0x0,-0x30(%rbp)
    a3d4:	00 
    a3d5:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
    a3d9:	48 89 c7             	mov    %rax,%rdi
    a3dc:	e8 e5 06 00 00       	callq  aac6 <prvBytesInBuffer>
    a3e1:	48 89 45 e0          	mov    %rax,-0x20(%rbp)
    a3e5:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
    a3e9:	48 3b 45 d0          	cmp    -0x30(%rbp),%rax
    a3ed:	76 7d                	jbe    a46c <xStreamBufferReceiveFromISR+0x118>
    a3ef:	48 8b 4d e0          	mov    -0x20(%rbp),%rcx
    a3f3:	48 8b 55 a8          	mov    -0x58(%rbp),%rdx
    a3f7:	48 8b 75 b0          	mov    -0x50(%rbp),%rsi
    a3fb:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
    a3ff:	48 89 c7             	mov    %rax,%rdi
    a402:	e8 86 01 00 00       	callq  a58d <prvReadMessageFromBuffer>
    a407:	48 89 45 c8          	mov    %rax,-0x38(%rbp)
    a40b:	48 83 7d c8 00       	cmpq   $0x0,-0x38(%rbp)
    a410:	74 5a                	je     a46c <xStreamBufferReceiveFromISR+0x118>
    a412:	e8 b9 8a 00 00       	callq  12ed0 <xPortSetInterruptMask>
    a417:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
    a41b:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
    a41f:	48 8b 40 28          	mov    0x28(%rax),%rax
    a423:	48 85 c0             	test   %rax,%rax
    a426:	74 38                	je     a460 <xStreamBufferReceiveFromISR+0x10c>
    a428:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
    a42c:	48 8b 40 28          	mov    0x28(%rax),%rax
    a430:	48 8b 55 a0          	mov    -0x60(%rbp),%rdx
    a434:	49 89 d1             	mov    %rdx,%r9
    a437:	41 b8 00 00 00 00    	mov    $0x0,%r8d
    a43d:	b9 00 00 00 00       	mov    $0x0,%ecx
    a442:	ba 00 00 00 00       	mov    $0x0,%edx
    a447:	be 00 00 00 00       	mov    $0x0,%esi
    a44c:	48 89 c7             	mov    %rax,%rdi
    a44f:	e8 0f 64 00 00       	callq  10863 <xTaskGenericNotifyFromISR>
    a454:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
    a458:	48 c7 40 28 00 00 00 	movq   $0x0,0x28(%rax)
    a45f:	00 
    a460:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
    a464:	48 89 c7             	mov    %rax,%rdi
    a467:	e8 73 8a 00 00       	callq  12edf <vPortClearInterruptMask>
    a46c:	48 83 7d c8 00       	cmpq   $0x0,-0x38(%rbp)
    a471:	0f 84 aa 00 00 00    	je     a521 <xStreamBufferReceiveFromISR+0x1cd>
    a477:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
    a47b:	48 89 c7             	mov    %rax,%rdi
    a47e:	e8 ed 8f 01 00       	callq  23470 <prvTraceGetStreamBufferNumberHigh16>
    a483:	0f b7 15 52 6c 02 00 	movzwl 0x26c52(%rip),%edx        # 310dc <CurrentFilterMask>
    a48a:	21 d0                	and    %edx,%eax
    a48c:	66 85 c0             	test   %ax,%ax
    a48f:	74 47                	je     a4d8 <xStreamBufferReceiveFromISR+0x184>
    a491:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
    a495:	48 89 c7             	mov    %rax,%rdi
    a498:	e8 b5 8f 01 00       	callq  23452 <prvTraceGetStreamBufferNumberLow16>
    a49d:	0f b6 d0             	movzbl %al,%edx
    a4a0:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
    a4a4:	0f b6 40 38          	movzbl 0x38(%rax),%eax
    a4a8:	0f b6 c0             	movzbl %al,%eax
    a4ab:	83 e0 01             	and    $0x1,%eax
    a4ae:	85 c0                	test   %eax,%eax
    a4b0:	74 07                	je     a4b9 <xStreamBufferReceiveFromISR+0x165>
    a4b2:	b9 08 00 00 00       	mov    $0x8,%ecx
    a4b7:	eb 05                	jmp    a4be <xStreamBufferReceiveFromISR+0x16a>
    a4b9:	b9 07 00 00 00       	mov    $0x7,%ecx
    a4be:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
    a4c2:	0f b6 40 38          	movzbl 0x38(%rax),%eax
    a4c6:	83 e0 01             	and    $0x1,%eax
    a4c9:	83 c0 3b             	add    $0x3b,%eax
    a4cc:	0f b6 c0             	movzbl %al,%eax
    a4cf:	89 ce                	mov    %ecx,%esi
    a4d1:	89 c7                	mov    %eax,%edi
    a4d3:	e8 7a ab 01 00       	callq  25052 <prvTraceStoreKernelCall>
    a4d8:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
    a4dc:	48 89 c7             	mov    %rax,%rdi
    a4df:	e8 e2 05 00 00       	callq  aac6 <prvBytesInBuffer>
    a4e4:	0f b6 d8             	movzbl %al,%ebx
    a4e7:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
    a4eb:	48 89 c7             	mov    %rax,%rdi
    a4ee:	e8 5f 8f 01 00       	callq  23452 <prvTraceGetStreamBufferNumberLow16>
    a4f3:	0f b6 c0             	movzbl %al,%eax
    a4f6:	48 8b 55 b8          	mov    -0x48(%rbp),%rdx
    a4fa:	0f b6 52 38          	movzbl 0x38(%rdx),%edx
    a4fe:	0f b6 d2             	movzbl %dl,%edx
    a501:	83 e2 01             	and    $0x1,%edx
    a504:	85 d2                	test   %edx,%edx
    a506:	74 07                	je     a50f <xStreamBufferReceiveFromISR+0x1bb>
    a508:	b9 08 00 00 00       	mov    $0x8,%ecx
    a50d:	eb 05                	jmp    a514 <xStreamBufferReceiveFromISR+0x1c0>
    a50f:	b9 07 00 00 00       	mov    $0x7,%ecx
    a514:	89 da                	mov    %ebx,%edx
    a516:	89 c6                	mov    %eax,%esi
    a518:	89 cf                	mov    %ecx,%edi
    a51a:	e8 6d b3 01 00       	callq  2588c <prvTraceSetObjectState>
    a51f:	eb 61                	jmp    a582 <xStreamBufferReceiveFromISR+0x22e>
    a521:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
    a525:	48 89 c7             	mov    %rax,%rdi
    a528:	e8 43 8f 01 00       	callq  23470 <prvTraceGetStreamBufferNumberHigh16>
    a52d:	0f b7 15 a8 6b 02 00 	movzwl 0x26ba8(%rip),%edx        # 310dc <CurrentFilterMask>
    a534:	21 d0                	and    %edx,%eax
    a536:	66 85 c0             	test   %ax,%ax
    a539:	74 47                	je     a582 <xStreamBufferReceiveFromISR+0x22e>
    a53b:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
    a53f:	48 89 c7             	mov    %rax,%rdi
    a542:	e8 0b 8f 01 00       	callq  23452 <prvTraceGetStreamBufferNumberLow16>
    a547:	0f b6 d0             	movzbl %al,%edx
    a54a:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
    a54e:	0f b6 40 38          	movzbl 0x38(%rax),%eax
    a552:	0f b6 c0             	movzbl %al,%eax
    a555:	83 e0 01             	and    $0x1,%eax
    a558:	85 c0                	test   %eax,%eax
    a55a:	74 07                	je     a563 <xStreamBufferReceiveFromISR+0x20f>
    a55c:	b9 08 00 00 00       	mov    $0x8,%ecx
    a561:	eb 05                	jmp    a568 <xStreamBufferReceiveFromISR+0x214>
    a563:	b9 07 00 00 00       	mov    $0x7,%ecx
    a568:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
    a56c:	0f b6 40 38          	movzbl 0x38(%rax),%eax
    a570:	83 e0 01             	and    $0x1,%eax
    a573:	83 c0 63             	add    $0x63,%eax
    a576:	0f b6 c0             	movzbl %al,%eax
    a579:	89 ce                	mov    %ecx,%esi
    a57b:	89 c7                	mov    %eax,%edi
    a57d:	e8 d0 aa 01 00       	callq  25052 <prvTraceStoreKernelCall>
    a582:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
    a586:	48 83 c4 58          	add    $0x58,%rsp
    a58a:	5b                   	pop    %rbx
    a58b:	5d                   	pop    %rbp
    a58c:	c3                   	retq   

000000000000a58d <prvReadMessageFromBuffer>:
    a58d:	f3 0f 1e fa          	endbr64 
    a591:	55                   	push   %rbp
    a592:	48 89 e5             	mov    %rsp,%rbp
    a595:	48 83 ec 50          	sub    $0x50,%rsp
    a599:	48 89 7d c8          	mov    %rdi,-0x38(%rbp)
    a59d:	48 89 75 c0          	mov    %rsi,-0x40(%rbp)
    a5a1:	48 89 55 b8          	mov    %rdx,-0x48(%rbp)
    a5a5:	48 89 4d b0          	mov    %rcx,-0x50(%rbp)
    a5a9:	64 48 8b 04 25 28 00 	mov    %fs:0x28,%rax
    a5b0:	00 00 
    a5b2:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
    a5b6:	31 c0                	xor    %eax,%eax
    a5b8:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
    a5bc:	48 8b 00             	mov    (%rax),%rax
    a5bf:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
    a5c3:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
    a5c7:	0f b6 40 38          	movzbl 0x38(%rax),%eax
    a5cb:	0f b6 c0             	movzbl %al,%eax
    a5ce:	83 e0 01             	and    $0x1,%eax
    a5d1:	85 c0                	test   %eax,%eax
    a5d3:	74 41                	je     a616 <prvReadMessageFromBuffer+0x89>
    a5d5:	48 8b 55 e8          	mov    -0x18(%rbp),%rdx
    a5d9:	48 8d 75 d8          	lea    -0x28(%rbp),%rsi
    a5dd:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
    a5e1:	48 89 d1             	mov    %rdx,%rcx
    a5e4:	ba 08 00 00 00       	mov    $0x8,%edx
    a5e9:	48 89 c7             	mov    %rax,%rdi
    a5ec:	e8 c6 03 00 00       	callq  a9b7 <prvReadBytesFromBuffer>
    a5f1:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
    a5f5:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
    a5f9:	48 89 45 e0          	mov    %rax,-0x20(%rbp)
    a5fd:	48 83 6d b0 08       	subq   $0x8,-0x50(%rbp)
    a602:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
    a606:	48 3b 45 b8          	cmp    -0x48(%rbp),%rax
    a60a:	76 12                	jbe    a61e <prvReadMessageFromBuffer+0x91>
    a60c:	48 c7 45 e0 00 00 00 	movq   $0x0,-0x20(%rbp)
    a613:	00 
    a614:	eb 08                	jmp    a61e <prvReadMessageFromBuffer+0x91>
    a616:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
    a61a:	48 89 45 e0          	mov    %rax,-0x20(%rbp)
    a61e:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
    a622:	48 39 45 b0          	cmp    %rax,-0x50(%rbp)
    a626:	48 0f 46 45 b0       	cmovbe -0x50(%rbp),%rax
    a62b:	48 89 45 f0          	mov    %rax,-0x10(%rbp)
    a62f:	48 83 7d f0 00       	cmpq   $0x0,-0x10(%rbp)
    a634:	74 1f                	je     a655 <prvReadMessageFromBuffer+0xc8>
    a636:	48 8b 4d e8          	mov    -0x18(%rbp),%rcx
    a63a:	48 8b 55 f0          	mov    -0x10(%rbp),%rdx
    a63e:	48 8b 75 c0          	mov    -0x40(%rbp),%rsi
    a642:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
    a646:	48 89 c7             	mov    %rax,%rdi
    a649:	e8 69 03 00 00       	callq  a9b7 <prvReadBytesFromBuffer>
    a64e:	48 8b 55 c8          	mov    -0x38(%rbp),%rdx
    a652:	48 89 02             	mov    %rax,(%rdx)
    a655:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
    a659:	48 8b 7d f8          	mov    -0x8(%rbp),%rdi
    a65d:	64 48 33 3c 25 28 00 	xor    %fs:0x28,%rdi
    a664:	00 00 
    a666:	74 05                	je     a66d <prvReadMessageFromBuffer+0xe0>
    a668:	e8 63 7e ff ff       	callq  24d0 <__stack_chk_fail@plt>
    a66d:	c9                   	leaveq 
    a66e:	c3                   	retq   

000000000000a66f <xStreamBufferIsEmpty>:
    a66f:	f3 0f 1e fa          	endbr64 
    a673:	55                   	push   %rbp
    a674:	48 89 e5             	mov    %rsp,%rbp
    a677:	48 83 ec 30          	sub    $0x30,%rsp
    a67b:	48 89 7d d8          	mov    %rdi,-0x28(%rbp)
    a67f:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
    a683:	48 89 45 f0          	mov    %rax,-0x10(%rbp)
    a687:	48 83 7d f0 00       	cmpq   $0x0,-0x10(%rbp)
    a68c:	75 11                	jne    a69f <xStreamBufferIsEmpty+0x30>
    a68e:	be 02 04 00 00       	mov    $0x402,%esi
    a693:	48 8d 3d c6 d1 01 00 	lea    0x1d1c6(%rip),%rdi        # 27860 <_IO_stdin_used+0x860>
    a69a:	e8 6d 96 ff ff       	callq  3d0c <vAssertCalled>
    a69f:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
    a6a3:	48 8b 00             	mov    (%rax),%rax
    a6a6:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
    a6aa:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
    a6ae:	48 8b 40 08          	mov    0x8(%rax),%rax
    a6b2:	48 39 45 f8          	cmp    %rax,-0x8(%rbp)
    a6b6:	75 0a                	jne    a6c2 <xStreamBufferIsEmpty+0x53>
    a6b8:	48 c7 45 e8 01 00 00 	movq   $0x1,-0x18(%rbp)
    a6bf:	00 
    a6c0:	eb 08                	jmp    a6ca <xStreamBufferIsEmpty+0x5b>
    a6c2:	48 c7 45 e8 00 00 00 	movq   $0x0,-0x18(%rbp)
    a6c9:	00 
    a6ca:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
    a6ce:	c9                   	leaveq 
    a6cf:	c3                   	retq   

000000000000a6d0 <xStreamBufferIsFull>:
    a6d0:	f3 0f 1e fa          	endbr64 
    a6d4:	55                   	push   %rbp
    a6d5:	48 89 e5             	mov    %rsp,%rbp
    a6d8:	48 83 ec 30          	sub    $0x30,%rsp
    a6dc:	48 89 7d d8          	mov    %rdi,-0x28(%rbp)
    a6e0:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
    a6e4:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
    a6e8:	48 83 7d f8 00       	cmpq   $0x0,-0x8(%rbp)
    a6ed:	75 11                	jne    a700 <xStreamBufferIsFull+0x30>
    a6ef:	be 1a 04 00 00       	mov    $0x41a,%esi
    a6f4:	48 8d 3d 65 d1 01 00 	lea    0x1d165(%rip),%rdi        # 27860 <_IO_stdin_used+0x860>
    a6fb:	e8 0c 96 ff ff       	callq  3d0c <vAssertCalled>
    a700:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    a704:	0f b6 40 38          	movzbl 0x38(%rax),%eax
    a708:	0f b6 c0             	movzbl %al,%eax
    a70b:	83 e0 01             	and    $0x1,%eax
    a70e:	85 c0                	test   %eax,%eax
    a710:	74 0a                	je     a71c <xStreamBufferIsFull+0x4c>
    a712:	48 c7 45 f0 08 00 00 	movq   $0x8,-0x10(%rbp)
    a719:	00 
    a71a:	eb 08                	jmp    a724 <xStreamBufferIsFull+0x54>
    a71c:	48 c7 45 f0 00 00 00 	movq   $0x0,-0x10(%rbp)
    a723:	00 
    a724:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
    a728:	48 89 c7             	mov    %rax,%rdi
    a72b:	e8 c4 ef ff ff       	callq  96f4 <xStreamBufferSpacesAvailable>
    a730:	48 39 45 f0          	cmp    %rax,-0x10(%rbp)
    a734:	72 0a                	jb     a740 <xStreamBufferIsFull+0x70>
    a736:	48 c7 45 e8 01 00 00 	movq   $0x1,-0x18(%rbp)
    a73d:	00 
    a73e:	eb 08                	jmp    a748 <xStreamBufferIsFull+0x78>
    a740:	48 c7 45 e8 00 00 00 	movq   $0x0,-0x18(%rbp)
    a747:	00 
    a748:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
    a74c:	c9                   	leaveq 
    a74d:	c3                   	retq   

000000000000a74e <xStreamBufferSendCompletedFromISR>:
    a74e:	f3 0f 1e fa          	endbr64 
    a752:	55                   	push   %rbp
    a753:	48 89 e5             	mov    %rsp,%rbp
    a756:	48 83 ec 30          	sub    $0x30,%rsp
    a75a:	48 89 7d d8          	mov    %rdi,-0x28(%rbp)
    a75e:	48 89 75 d0          	mov    %rsi,-0x30(%rbp)
    a762:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
    a766:	48 89 45 f0          	mov    %rax,-0x10(%rbp)
    a76a:	48 83 7d f0 00       	cmpq   $0x0,-0x10(%rbp)
    a76f:	75 11                	jne    a782 <xStreamBufferSendCompletedFromISR+0x34>
    a771:	be 3e 04 00 00       	mov    $0x43e,%esi
    a776:	48 8d 3d e3 d0 01 00 	lea    0x1d0e3(%rip),%rdi        # 27860 <_IO_stdin_used+0x860>
    a77d:	e8 8a 95 ff ff       	callq  3d0c <vAssertCalled>
    a782:	e8 49 87 00 00       	callq  12ed0 <xPortSetInterruptMask>
    a787:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
    a78b:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
    a78f:	48 8b 40 20          	mov    0x20(%rax),%rax
    a793:	48 85 c0             	test   %rax,%rax
    a796:	74 42                	je     a7da <xStreamBufferSendCompletedFromISR+0x8c>
    a798:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
    a79c:	48 8b 40 20          	mov    0x20(%rax),%rax
    a7a0:	48 8b 55 d0          	mov    -0x30(%rbp),%rdx
    a7a4:	49 89 d1             	mov    %rdx,%r9
    a7a7:	41 b8 00 00 00 00    	mov    $0x0,%r8d
    a7ad:	b9 00 00 00 00       	mov    $0x0,%ecx
    a7b2:	ba 00 00 00 00       	mov    $0x0,%edx
    a7b7:	be 00 00 00 00       	mov    $0x0,%esi
    a7bc:	48 89 c7             	mov    %rax,%rdi
    a7bf:	e8 9f 60 00 00       	callq  10863 <xTaskGenericNotifyFromISR>
    a7c4:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
    a7c8:	48 c7 40 20 00 00 00 	movq   $0x0,0x20(%rax)
    a7cf:	00 
    a7d0:	48 c7 45 e8 01 00 00 	movq   $0x1,-0x18(%rbp)
    a7d7:	00 
    a7d8:	eb 08                	jmp    a7e2 <xStreamBufferSendCompletedFromISR+0x94>
    a7da:	48 c7 45 e8 00 00 00 	movq   $0x0,-0x18(%rbp)
    a7e1:	00 
    a7e2:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    a7e6:	48 89 c7             	mov    %rax,%rdi
    a7e9:	e8 f1 86 00 00       	callq  12edf <vPortClearInterruptMask>
    a7ee:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
    a7f2:	c9                   	leaveq 
    a7f3:	c3                   	retq   

000000000000a7f4 <xStreamBufferReceiveCompletedFromISR>:
    a7f4:	f3 0f 1e fa          	endbr64 
    a7f8:	55                   	push   %rbp
    a7f9:	48 89 e5             	mov    %rsp,%rbp
    a7fc:	48 83 ec 30          	sub    $0x30,%rsp
    a800:	48 89 7d d8          	mov    %rdi,-0x28(%rbp)
    a804:	48 89 75 d0          	mov    %rsi,-0x30(%rbp)
    a808:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
    a80c:	48 89 45 f0          	mov    %rax,-0x10(%rbp)
    a810:	48 83 7d f0 00       	cmpq   $0x0,-0x10(%rbp)
    a815:	75 11                	jne    a828 <xStreamBufferReceiveCompletedFromISR+0x34>
    a817:	be 5d 04 00 00       	mov    $0x45d,%esi
    a81c:	48 8d 3d 3d d0 01 00 	lea    0x1d03d(%rip),%rdi        # 27860 <_IO_stdin_used+0x860>
    a823:	e8 e4 94 ff ff       	callq  3d0c <vAssertCalled>
    a828:	e8 a3 86 00 00       	callq  12ed0 <xPortSetInterruptMask>
    a82d:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
    a831:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
    a835:	48 8b 40 28          	mov    0x28(%rax),%rax
    a839:	48 85 c0             	test   %rax,%rax
    a83c:	74 42                	je     a880 <xStreamBufferReceiveCompletedFromISR+0x8c>
    a83e:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
    a842:	48 8b 40 28          	mov    0x28(%rax),%rax
    a846:	48 8b 55 d0          	mov    -0x30(%rbp),%rdx
    a84a:	49 89 d1             	mov    %rdx,%r9
    a84d:	41 b8 00 00 00 00    	mov    $0x0,%r8d
    a853:	b9 00 00 00 00       	mov    $0x0,%ecx
    a858:	ba 00 00 00 00       	mov    $0x0,%edx
    a85d:	be 00 00 00 00       	mov    $0x0,%esi
    a862:	48 89 c7             	mov    %rax,%rdi
    a865:	e8 f9 5f 00 00       	callq  10863 <xTaskGenericNotifyFromISR>
    a86a:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
    a86e:	48 c7 40 28 00 00 00 	movq   $0x0,0x28(%rax)
    a875:	00 
    a876:	48 c7 45 e8 01 00 00 	movq   $0x1,-0x18(%rbp)
    a87d:	00 
    a87e:	eb 08                	jmp    a888 <xStreamBufferReceiveCompletedFromISR+0x94>
    a880:	48 c7 45 e8 00 00 00 	movq   $0x0,-0x18(%rbp)
    a887:	00 
    a888:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    a88c:	48 89 c7             	mov    %rax,%rdi
    a88f:	e8 4b 86 00 00       	callq  12edf <vPortClearInterruptMask>
    a894:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
    a898:	c9                   	leaveq 
    a899:	c3                   	retq   

000000000000a89a <prvWriteBytesToBuffer>:
    a89a:	f3 0f 1e fa          	endbr64 
    a89e:	55                   	push   %rbp
    a89f:	48 89 e5             	mov    %rsp,%rbp
    a8a2:	48 83 ec 30          	sub    $0x30,%rsp
    a8a6:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
    a8aa:	48 89 75 e0          	mov    %rsi,-0x20(%rbp)
    a8ae:	48 89 55 d8          	mov    %rdx,-0x28(%rbp)
    a8b2:	48 89 4d d0          	mov    %rcx,-0x30(%rbp)
    a8b6:	48 83 7d d8 00       	cmpq   $0x0,-0x28(%rbp)
    a8bb:	75 11                	jne    a8ce <prvWriteBytesToBuffer+0x34>
    a8bd:	be 7c 04 00 00       	mov    $0x47c,%esi
    a8c2:	48 8d 3d 97 cf 01 00 	lea    0x1cf97(%rip),%rdi        # 27860 <_IO_stdin_used+0x860>
    a8c9:	e8 3e 94 ff ff       	callq  3d0c <vAssertCalled>
    a8ce:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
    a8d2:	48 8b 40 10          	mov    0x10(%rax),%rax
    a8d6:	48 2b 45 d0          	sub    -0x30(%rbp),%rax
    a8da:	48 39 45 d8          	cmp    %rax,-0x28(%rbp)
    a8de:	48 0f 46 45 d8       	cmovbe -0x28(%rbp),%rax
    a8e3:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
    a8e7:	48 8b 55 d0          	mov    -0x30(%rbp),%rdx
    a8eb:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    a8ef:	48 01 c2             	add    %rax,%rdx
    a8f2:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
    a8f6:	48 8b 40 10          	mov    0x10(%rax),%rax
    a8fa:	48 39 c2             	cmp    %rax,%rdx
    a8fd:	76 11                	jbe    a910 <prvWriteBytesToBuffer+0x76>
    a8ff:	be 84 04 00 00       	mov    $0x484,%esi
    a904:	48 8d 3d 55 cf 01 00 	lea    0x1cf55(%rip),%rdi        # 27860 <_IO_stdin_used+0x860>
    a90b:	e8 fc 93 ff ff       	callq  3d0c <vAssertCalled>
    a910:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
    a914:	48 8b 50 30          	mov    0x30(%rax),%rdx
    a918:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
    a91c:	48 8d 0c 02          	lea    (%rdx,%rax,1),%rcx
    a920:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
    a924:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
    a928:	48 89 c6             	mov    %rax,%rsi
    a92b:	48 89 cf             	mov    %rcx,%rdi
    a92e:	e8 7d 7c ff ff       	callq  25b0 <memcpy@plt>
    a933:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
    a937:	48 3b 45 f8          	cmp    -0x8(%rbp),%rax
    a93b:	76 52                	jbe    a98f <prvWriteBytesToBuffer+0xf5>
    a93d:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
    a941:	48 2b 45 f8          	sub    -0x8(%rbp),%rax
    a945:	48 89 c2             	mov    %rax,%rdx
    a948:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
    a94c:	48 8b 40 10          	mov    0x10(%rax),%rax
    a950:	48 39 c2             	cmp    %rax,%rdx
    a953:	76 11                	jbe    a966 <prvWriteBytesToBuffer+0xcc>
    a955:	be 8c 04 00 00       	mov    $0x48c,%esi
    a95a:	48 8d 3d ff ce 01 00 	lea    0x1ceff(%rip),%rdi        # 27860 <_IO_stdin_used+0x860>
    a961:	e8 a6 93 ff ff       	callq  3d0c <vAssertCalled>
    a966:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
    a96a:	48 2b 45 f8          	sub    -0x8(%rbp),%rax
    a96e:	48 89 c2             	mov    %rax,%rdx
    a971:	48 8b 4d e0          	mov    -0x20(%rbp),%rcx
    a975:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    a979:	48 01 c1             	add    %rax,%rcx
    a97c:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
    a980:	48 8b 40 30          	mov    0x30(%rax),%rax
    a984:	48 89 ce             	mov    %rcx,%rsi
    a987:	48 89 c7             	mov    %rax,%rdi
    a98a:	e8 21 7c ff ff       	callq  25b0 <memcpy@plt>
    a98f:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
    a993:	48 01 45 d0          	add    %rax,-0x30(%rbp)
    a997:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
    a99b:	48 8b 40 10          	mov    0x10(%rax),%rax
    a99f:	48 39 45 d0          	cmp    %rax,-0x30(%rbp)
    a9a3:	72 0c                	jb     a9b1 <prvWriteBytesToBuffer+0x117>
    a9a5:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
    a9a9:	48 8b 40 10          	mov    0x10(%rax),%rax
    a9ad:	48 29 45 d0          	sub    %rax,-0x30(%rbp)
    a9b1:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
    a9b5:	c9                   	leaveq 
    a9b6:	c3                   	retq   

000000000000a9b7 <prvReadBytesFromBuffer>:
    a9b7:	f3 0f 1e fa          	endbr64 
    a9bb:	55                   	push   %rbp
    a9bc:	48 89 e5             	mov    %rsp,%rbp
    a9bf:	48 83 ec 30          	sub    $0x30,%rsp
    a9c3:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
    a9c7:	48 89 75 e0          	mov    %rsi,-0x20(%rbp)
    a9cb:	48 89 55 d8          	mov    %rdx,-0x28(%rbp)
    a9cf:	48 89 4d d0          	mov    %rcx,-0x30(%rbp)
    a9d3:	48 83 7d d8 00       	cmpq   $0x0,-0x28(%rbp)
    a9d8:	75 11                	jne    a9eb <prvReadBytesFromBuffer+0x34>
    a9da:	be aa 04 00 00       	mov    $0x4aa,%esi
    a9df:	48 8d 3d 7a ce 01 00 	lea    0x1ce7a(%rip),%rdi        # 27860 <_IO_stdin_used+0x860>
    a9e6:	e8 21 93 ff ff       	callq  3d0c <vAssertCalled>
    a9eb:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
    a9ef:	48 8b 40 10          	mov    0x10(%rax),%rax
    a9f3:	48 2b 45 d0          	sub    -0x30(%rbp),%rax
    a9f7:	48 39 45 d8          	cmp    %rax,-0x28(%rbp)
    a9fb:	48 0f 46 45 d8       	cmovbe -0x28(%rbp),%rax
    aa00:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
    aa04:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    aa08:	48 3b 45 d8          	cmp    -0x28(%rbp),%rax
    aa0c:	76 11                	jbe    aa1f <prvReadBytesFromBuffer+0x68>
    aa0e:	be b3 04 00 00       	mov    $0x4b3,%esi
    aa13:	48 8d 3d 46 ce 01 00 	lea    0x1ce46(%rip),%rdi        # 27860 <_IO_stdin_used+0x860>
    aa1a:	e8 ed 92 ff ff       	callq  3d0c <vAssertCalled>
    aa1f:	48 8b 55 d0          	mov    -0x30(%rbp),%rdx
    aa23:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    aa27:	48 01 c2             	add    %rax,%rdx
    aa2a:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
    aa2e:	48 8b 40 10          	mov    0x10(%rax),%rax
    aa32:	48 39 c2             	cmp    %rax,%rdx
    aa35:	76 11                	jbe    aa48 <prvReadBytesFromBuffer+0x91>
    aa37:	be b4 04 00 00       	mov    $0x4b4,%esi
    aa3c:	48 8d 3d 1d ce 01 00 	lea    0x1ce1d(%rip),%rdi        # 27860 <_IO_stdin_used+0x860>
    aa43:	e8 c4 92 ff ff       	callq  3d0c <vAssertCalled>
    aa48:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
    aa4c:	48 8b 50 30          	mov    0x30(%rax),%rdx
    aa50:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
    aa54:	48 8d 0c 02          	lea    (%rdx,%rax,1),%rcx
    aa58:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
    aa5c:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
    aa60:	48 89 ce             	mov    %rcx,%rsi
    aa63:	48 89 c7             	mov    %rax,%rdi
    aa66:	e8 45 7b ff ff       	callq  25b0 <memcpy@plt>
    aa6b:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
    aa6f:	48 3b 45 f8          	cmp    -0x8(%rbp),%rax
    aa73:	76 29                	jbe    aa9e <prvReadBytesFromBuffer+0xe7>
    aa75:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
    aa79:	48 2b 45 f8          	sub    -0x8(%rbp),%rax
    aa7d:	48 89 c2             	mov    %rax,%rdx
    aa80:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
    aa84:	48 8b 40 30          	mov    0x30(%rax),%rax
    aa88:	48 8b 75 e0          	mov    -0x20(%rbp),%rsi
    aa8c:	48 8b 4d f8          	mov    -0x8(%rbp),%rcx
    aa90:	48 01 f1             	add    %rsi,%rcx
    aa93:	48 89 c6             	mov    %rax,%rsi
    aa96:	48 89 cf             	mov    %rcx,%rdi
    aa99:	e8 12 7b ff ff       	callq  25b0 <memcpy@plt>
    aa9e:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
    aaa2:	48 01 45 d0          	add    %rax,-0x30(%rbp)
    aaa6:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
    aaaa:	48 8b 40 10          	mov    0x10(%rax),%rax
    aaae:	48 39 45 d0          	cmp    %rax,-0x30(%rbp)
    aab2:	72 0c                	jb     aac0 <prvReadBytesFromBuffer+0x109>
    aab4:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
    aab8:	48 8b 40 10          	mov    0x10(%rax),%rax
    aabc:	48 29 45 d0          	sub    %rax,-0x30(%rbp)
    aac0:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
    aac4:	c9                   	leaveq 
    aac5:	c3                   	retq   

000000000000aac6 <prvBytesInBuffer>:
    aac6:	f3 0f 1e fa          	endbr64 
    aaca:	55                   	push   %rbp
    aacb:	48 89 e5             	mov    %rsp,%rbp
    aace:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
    aad2:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
    aad6:	48 8b 50 10          	mov    0x10(%rax),%rdx
    aada:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
    aade:	48 8b 40 08          	mov    0x8(%rax),%rax
    aae2:	48 01 d0             	add    %rdx,%rax
    aae5:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
    aae9:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
    aaed:	48 8b 00             	mov    (%rax),%rax
    aaf0:	48 29 45 f8          	sub    %rax,-0x8(%rbp)
    aaf4:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
    aaf8:	48 8b 40 10          	mov    0x10(%rax),%rax
    aafc:	48 39 45 f8          	cmp    %rax,-0x8(%rbp)
    ab00:	72 0c                	jb     ab0e <prvBytesInBuffer+0x48>
    ab02:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
    ab06:	48 8b 40 10          	mov    0x10(%rax),%rax
    ab0a:	48 29 45 f8          	sub    %rax,-0x8(%rbp)
    ab0e:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    ab12:	5d                   	pop    %rbp
    ab13:	c3                   	retq   

000000000000ab14 <prvInitialiseNewStreamBuffer>:
    ab14:	f3 0f 1e fa          	endbr64 
    ab18:	55                   	push   %rbp
    ab19:	48 89 e5             	mov    %rsp,%rbp
    ab1c:	48 83 ec 40          	sub    $0x40,%rsp
    ab20:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
    ab24:	48 89 75 e0          	mov    %rsi,-0x20(%rbp)
    ab28:	48 89 55 d8          	mov    %rdx,-0x28(%rbp)
    ab2c:	48 89 4d d0          	mov    %rcx,-0x30(%rbp)
    ab30:	44 89 c0             	mov    %r8d,%eax
    ab33:	88 45 cc             	mov    %al,-0x34(%rbp)
    ab36:	48 c7 45 f8 55 00 00 	movq   $0x55,-0x8(%rbp)
    ab3d:	00 
    ab3e:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    ab42:	89 c1                	mov    %eax,%ecx
    ab44:	48 8b 55 d8          	mov    -0x28(%rbp),%rdx
    ab48:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
    ab4c:	89 ce                	mov    %ecx,%esi
    ab4e:	48 89 c7             	mov    %rax,%rdi
    ab51:	e8 ba 79 ff ff       	callq  2510 <memset@plt>
    ab56:	48 39 45 e0          	cmp    %rax,-0x20(%rbp)
    ab5a:	74 11                	je     ab6d <prvInitialiseNewStreamBuffer+0x59>
    ab5c:	be f3 04 00 00       	mov    $0x4f3,%esi
    ab61:	48 8d 3d f8 cc 01 00 	lea    0x1ccf8(%rip),%rdi        # 27860 <_IO_stdin_used+0x860>
    ab68:	e8 9f 91 ff ff       	callq  3d0c <vAssertCalled>
    ab6d:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
    ab71:	ba 48 00 00 00       	mov    $0x48,%edx
    ab76:	be 00 00 00 00       	mov    $0x0,%esi
    ab7b:	48 89 c7             	mov    %rax,%rdi
    ab7e:	e8 8d 79 ff ff       	callq  2510 <memset@plt>
    ab83:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
    ab87:	48 8b 55 e0          	mov    -0x20(%rbp),%rdx
    ab8b:	48 89 50 30          	mov    %rdx,0x30(%rax)
    ab8f:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
    ab93:	48 8b 55 d8          	mov    -0x28(%rbp),%rdx
    ab97:	48 89 50 10          	mov    %rdx,0x10(%rax)
    ab9b:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
    ab9f:	48 8b 55 d0          	mov    -0x30(%rbp),%rdx
    aba3:	48 89 50 18          	mov    %rdx,0x18(%rax)
    aba7:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
    abab:	0f b6 55 cc          	movzbl -0x34(%rbp),%edx
    abaf:	88 50 38             	mov    %dl,0x38(%rax)
    abb2:	90                   	nop
    abb3:	c9                   	leaveq 
    abb4:	c3                   	retq   

000000000000abb5 <uxStreamBufferGetStreamBufferNumber>:
    abb5:	f3 0f 1e fa          	endbr64 
    abb9:	55                   	push   %rbp
    abba:	48 89 e5             	mov    %rsp,%rbp
    abbd:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
    abc1:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    abc5:	48 8b 40 40          	mov    0x40(%rax),%rax
    abc9:	5d                   	pop    %rbp
    abca:	c3                   	retq   

000000000000abcb <vStreamBufferSetStreamBufferNumber>:
    abcb:	f3 0f 1e fa          	endbr64 
    abcf:	55                   	push   %rbp
    abd0:	48 89 e5             	mov    %rsp,%rbp
    abd3:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
    abd7:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
    abdb:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    abdf:	48 8b 55 f0          	mov    -0x10(%rbp),%rdx
    abe3:	48 89 50 40          	mov    %rdx,0x40(%rax)
    abe7:	90                   	nop
    abe8:	5d                   	pop    %rbp
    abe9:	c3                   	retq   

000000000000abea <ucStreamBufferGetStreamBufferType>:
    abea:	f3 0f 1e fa          	endbr64 
    abee:	55                   	push   %rbp
    abef:	48 89 e5             	mov    %rsp,%rbp
    abf2:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
    abf6:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    abfa:	0f b6 40 38          	movzbl 0x38(%rax),%eax
    abfe:	83 e0 01             	and    $0x1,%eax
    ac01:	5d                   	pop    %rbp
    ac02:	c3                   	retq   

000000000000ac03 <xEventGroupCreateStatic>:
    ac03:	f3 0f 1e fa          	endbr64 
    ac07:	55                   	push   %rbp
    ac08:	48 89 e5             	mov    %rsp,%rbp
    ac0b:	48 83 ec 20          	sub    $0x20,%rsp
    ac0f:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
    ac13:	48 83 7d e8 00       	cmpq   $0x0,-0x18(%rbp)
    ac18:	75 11                	jne    ac2b <xEventGroupCreateStatic+0x28>
    ac1a:	be 65 00 00 00       	mov    $0x65,%esi
    ac1f:	48 8d 3d 7a cc 01 00 	lea    0x1cc7a(%rip),%rdi        # 278a0 <_IO_stdin_used+0x8a0>
    ac26:	e8 e1 90 ff ff       	callq  3d0c <vAssertCalled>
    ac2b:	48 c7 45 f0 40 00 00 	movq   $0x40,-0x10(%rbp)
    ac32:	00 
    ac33:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
    ac37:	48 83 f8 40          	cmp    $0x40,%rax
    ac3b:	74 11                	je     ac4e <xEventGroupCreateStatic+0x4b>
    ac3d:	be 6d 00 00 00       	mov    $0x6d,%esi
    ac42:	48 8d 3d 57 cc 01 00 	lea    0x1cc57(%rip),%rdi        # 278a0 <_IO_stdin_used+0x8a0>
    ac49:	e8 be 90 ff ff       	callq  3d0c <vAssertCalled>
    ac4e:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
    ac52:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
    ac56:	48 83 7d f8 00       	cmpq   $0x0,-0x8(%rbp)
    ac5b:	0f 84 e8 00 00 00    	je     ad49 <xEventGroupCreateStatic+0x146>
    ac61:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    ac65:	48 c7 00 00 00 00 00 	movq   $0x0,(%rax)
    ac6c:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    ac70:	48 83 c0 08          	add    $0x8,%rax
    ac74:	48 89 c7             	mov    %rax,%rdi
    ac77:	e8 c7 df ff ff       	callq  8c43 <vListInitialise>
    ac7c:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    ac80:	c6 40 38 01          	movb   $0x1,0x38(%rax)
    ac84:	bf 06 00 00 00       	mov    $0x6,%edi
    ac89:	e8 95 b1 01 00       	callq  25e23 <prvTraceGetObjectHandle>
    ac8e:	0f b6 d0             	movzbl %al,%edx
    ac91:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    ac95:	89 d6                	mov    %edx,%esi
    ac97:	48 89 c7             	mov    %rax,%rdi
    ac9a:	e8 2d 87 01 00       	callq  233cc <prvTraceSetEventGroupNumberLow16>
    ac9f:	0f b7 05 38 64 02 00 	movzwl 0x26438(%rip),%eax        # 310de <CurrentFilterGroup>
    aca6:	0f b7 d0             	movzwl %ax,%edx
    aca9:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    acad:	89 d6                	mov    %edx,%esi
    acaf:	48 89 c7             	mov    %rax,%rdi
    acb2:	e8 58 87 01 00       	callq  2340f <prvTraceSetEventGroupNumberHigh16>
    acb7:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    acbb:	48 89 c7             	mov    %rax,%rdi
    acbe:	e8 c9 86 01 00       	callq  2338c <prvTraceGetEventGroupNumberLow16>
    acc3:	0f b6 c0             	movzbl %al,%eax
    acc6:	89 c6                	mov    %eax,%esi
    acc8:	bf 06 00 00 00       	mov    $0x6,%edi
    accd:	e8 3e b4 01 00       	callq  26110 <prvMarkObjectAsUsed>
    acd2:	e8 85 89 01 00       	callq  2365c <prvTraceGetCurrentTaskHandle>
    acd7:	48 89 c7             	mov    %rax,%rdi
    acda:	e8 7c 84 01 00       	callq  2315b <prvTraceGetTaskNumberHigh16>
    acdf:	0f b7 15 f6 63 02 00 	movzwl 0x263f6(%rip),%edx        # 310dc <CurrentFilterMask>
    ace6:	21 d0                	and    %edx,%eax
    ace8:	66 85 c0             	test   %ax,%ax
    aceb:	74 3a                	je     ad27 <xEventGroupCreateStatic+0x124>
    aced:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    acf1:	48 89 c7             	mov    %rax,%rdi
    acf4:	e8 b1 86 01 00       	callq  233aa <prvTraceGetEventGroupNumberHigh16>
    acf9:	0f b7 15 dc 63 02 00 	movzwl 0x263dc(%rip),%edx        # 310dc <CurrentFilterMask>
    ad00:	21 d0                	and    %edx,%eax
    ad02:	66 85 c0             	test   %ax,%ax
    ad05:	74 20                	je     ad27 <xEventGroupCreateStatic+0x124>
    ad07:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    ad0b:	48 89 c7             	mov    %rax,%rdi
    ad0e:	e8 79 86 01 00       	callq  2338c <prvTraceGetEventGroupNumberLow16>
    ad13:	0f b6 c0             	movzbl %al,%eax
    ad16:	89 c2                	mov    %eax,%edx
    ad18:	be 06 00 00 00       	mov    $0x6,%esi
    ad1d:	bf c2 00 00 00       	mov    $0xc2,%edi
    ad22:	e8 2b a3 01 00       	callq  25052 <prvTraceStoreKernelCall>
    ad27:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    ad2b:	48 89 c7             	mov    %rax,%rdi
    ad2e:	e8 59 86 01 00       	callq  2338c <prvTraceGetEventGroupNumberLow16>
    ad33:	0f b6 c0             	movzbl %al,%eax
    ad36:	ba 00 00 00 00       	mov    $0x0,%edx
    ad3b:	89 c6                	mov    %eax,%esi
    ad3d:	bf 06 00 00 00       	mov    $0x6,%edi
    ad42:	e8 45 ab 01 00       	callq  2588c <prvTraceSetObjectState>
    ad47:	eb 2a                	jmp    ad73 <xEventGroupCreateStatic+0x170>
    ad49:	e8 0e 89 01 00       	callq  2365c <prvTraceGetCurrentTaskHandle>
    ad4e:	48 89 c7             	mov    %rax,%rdi
    ad51:	e8 05 84 01 00       	callq  2315b <prvTraceGetTaskNumberHigh16>
    ad56:	0f b7 15 7f 63 02 00 	movzwl 0x2637f(%rip),%edx        # 310dc <CurrentFilterMask>
    ad5d:	21 d0                	and    %edx,%eax
    ad5f:	66 85 c0             	test   %ax,%ax
    ad62:	74 0f                	je     ad73 <xEventGroupCreateStatic+0x170>
    ad64:	be 00 00 00 00       	mov    $0x0,%esi
    ad69:	bf c3 00 00 00       	mov    $0xc3,%edi
    ad6e:	e8 cb a5 01 00       	callq  2533e <prvTraceStoreKernelCallWithNumericParamOnly>
    ad73:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    ad77:	c9                   	leaveq 
    ad78:	c3                   	retq   

000000000000ad79 <xEventGroupCreate>:
    ad79:	f3 0f 1e fa          	endbr64 
    ad7d:	55                   	push   %rbp
    ad7e:	48 89 e5             	mov    %rsp,%rbp
    ad81:	48 83 ec 10          	sub    $0x10,%rsp
    ad85:	bf 40 00 00 00       	mov    $0x40,%edi
    ad8a:	e8 f1 78 00 00       	callq  12680 <pvPortMalloc>
    ad8f:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
    ad93:	48 83 7d f8 00       	cmpq   $0x0,-0x8(%rbp)
    ad98:	0f 84 e8 00 00 00    	je     ae86 <xEventGroupCreate+0x10d>
    ad9e:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    ada2:	48 c7 00 00 00 00 00 	movq   $0x0,(%rax)
    ada9:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    adad:	48 83 c0 08          	add    $0x8,%rax
    adb1:	48 89 c7             	mov    %rax,%rdi
    adb4:	e8 8a de ff ff       	callq  8c43 <vListInitialise>
    adb9:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    adbd:	c6 40 38 00          	movb   $0x0,0x38(%rax)
    adc1:	bf 06 00 00 00       	mov    $0x6,%edi
    adc6:	e8 58 b0 01 00       	callq  25e23 <prvTraceGetObjectHandle>
    adcb:	0f b6 d0             	movzbl %al,%edx
    adce:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    add2:	89 d6                	mov    %edx,%esi
    add4:	48 89 c7             	mov    %rax,%rdi
    add7:	e8 f0 85 01 00       	callq  233cc <prvTraceSetEventGroupNumberLow16>
    addc:	0f b7 05 fb 62 02 00 	movzwl 0x262fb(%rip),%eax        # 310de <CurrentFilterGroup>
    ade3:	0f b7 d0             	movzwl %ax,%edx
    ade6:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    adea:	89 d6                	mov    %edx,%esi
    adec:	48 89 c7             	mov    %rax,%rdi
    adef:	e8 1b 86 01 00       	callq  2340f <prvTraceSetEventGroupNumberHigh16>
    adf4:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    adf8:	48 89 c7             	mov    %rax,%rdi
    adfb:	e8 8c 85 01 00       	callq  2338c <prvTraceGetEventGroupNumberLow16>
    ae00:	0f b6 c0             	movzbl %al,%eax
    ae03:	89 c6                	mov    %eax,%esi
    ae05:	bf 06 00 00 00       	mov    $0x6,%edi
    ae0a:	e8 01 b3 01 00       	callq  26110 <prvMarkObjectAsUsed>
    ae0f:	e8 48 88 01 00       	callq  2365c <prvTraceGetCurrentTaskHandle>
    ae14:	48 89 c7             	mov    %rax,%rdi
    ae17:	e8 3f 83 01 00       	callq  2315b <prvTraceGetTaskNumberHigh16>
    ae1c:	0f b7 15 b9 62 02 00 	movzwl 0x262b9(%rip),%edx        # 310dc <CurrentFilterMask>
    ae23:	21 d0                	and    %edx,%eax
    ae25:	66 85 c0             	test   %ax,%ax
    ae28:	74 3a                	je     ae64 <xEventGroupCreate+0xeb>
    ae2a:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    ae2e:	48 89 c7             	mov    %rax,%rdi
    ae31:	e8 74 85 01 00       	callq  233aa <prvTraceGetEventGroupNumberHigh16>
    ae36:	0f b7 15 9f 62 02 00 	movzwl 0x2629f(%rip),%edx        # 310dc <CurrentFilterMask>
    ae3d:	21 d0                	and    %edx,%eax
    ae3f:	66 85 c0             	test   %ax,%ax
    ae42:	74 20                	je     ae64 <xEventGroupCreate+0xeb>
    ae44:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    ae48:	48 89 c7             	mov    %rax,%rdi
    ae4b:	e8 3c 85 01 00       	callq  2338c <prvTraceGetEventGroupNumberLow16>
    ae50:	0f b6 c0             	movzbl %al,%eax
    ae53:	89 c2                	mov    %eax,%edx
    ae55:	be 06 00 00 00       	mov    $0x6,%esi
    ae5a:	bf c2 00 00 00       	mov    $0xc2,%edi
    ae5f:	e8 ee a1 01 00       	callq  25052 <prvTraceStoreKernelCall>
    ae64:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    ae68:	48 89 c7             	mov    %rax,%rdi
    ae6b:	e8 1c 85 01 00       	callq  2338c <prvTraceGetEventGroupNumberLow16>
    ae70:	0f b6 c0             	movzbl %al,%eax
    ae73:	ba 00 00 00 00       	mov    $0x0,%edx
    ae78:	89 c6                	mov    %eax,%esi
    ae7a:	bf 06 00 00 00       	mov    $0x6,%edi
    ae7f:	e8 08 aa 01 00       	callq  2588c <prvTraceSetObjectState>
    ae84:	eb 2a                	jmp    aeb0 <xEventGroupCreate+0x137>
    ae86:	e8 d1 87 01 00       	callq  2365c <prvTraceGetCurrentTaskHandle>
    ae8b:	48 89 c7             	mov    %rax,%rdi
    ae8e:	e8 c8 82 01 00       	callq  2315b <prvTraceGetTaskNumberHigh16>
    ae93:	0f b7 15 42 62 02 00 	movzwl 0x26242(%rip),%edx        # 310dc <CurrentFilterMask>
    ae9a:	21 d0                	and    %edx,%eax
    ae9c:	66 85 c0             	test   %ax,%ax
    ae9f:	74 0f                	je     aeb0 <xEventGroupCreate+0x137>
    aea1:	be 00 00 00 00       	mov    $0x0,%esi
    aea6:	bf c3 00 00 00       	mov    $0xc3,%edi
    aeab:	e8 8e a4 01 00       	callq  2533e <prvTraceStoreKernelCallWithNumericParamOnly>
    aeb0:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    aeb4:	c9                   	leaveq 
    aeb5:	c3                   	retq   

000000000000aeb6 <xEventGroupSync>:
    aeb6:	f3 0f 1e fa          	endbr64 
    aeba:	55                   	push   %rbp
    aebb:	48 89 e5             	mov    %rsp,%rbp
    aebe:	53                   	push   %rbx
    aebf:	48 83 ec 58          	sub    $0x58,%rsp
    aec3:	48 89 7d b8          	mov    %rdi,-0x48(%rbp)
    aec7:	48 89 75 b0          	mov    %rsi,-0x50(%rbp)
    aecb:	48 89 55 a8          	mov    %rdx,-0x58(%rbp)
    aecf:	48 89 4d a0          	mov    %rcx,-0x60(%rbp)
    aed3:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
    aed7:	48 89 45 d8          	mov    %rax,-0x28(%rbp)
    aedb:	48 c7 45 d0 00 00 00 	movq   $0x0,-0x30(%rbp)
    aee2:	00 
    aee3:	48 8b 45 a8          	mov    -0x58(%rbp),%rax
    aee7:	25 00 00 00 ff       	and    $0xff000000,%eax
    aeec:	48 85 c0             	test   %rax,%rax
    aeef:	74 11                	je     af02 <xEventGroupSync+0x4c>
    aef1:	be cc 00 00 00       	mov    $0xcc,%esi
    aef6:	48 8d 3d a3 c9 01 00 	lea    0x1c9a3(%rip),%rdi        # 278a0 <_IO_stdin_used+0x8a0>
    aefd:	e8 0a 8e ff ff       	callq  3d0c <vAssertCalled>
    af02:	48 83 7d a8 00       	cmpq   $0x0,-0x58(%rbp)
    af07:	75 11                	jne    af1a <xEventGroupSync+0x64>
    af09:	be cd 00 00 00       	mov    $0xcd,%esi
    af0e:	48 8d 3d 8b c9 01 00 	lea    0x1c98b(%rip),%rdi        # 278a0 <_IO_stdin_used+0x8a0>
    af15:	e8 f2 8d ff ff       	callq  3d0c <vAssertCalled>
    af1a:	e8 78 47 00 00       	callq  f697 <xTaskGetSchedulerState>
    af1f:	48 85 c0             	test   %rax,%rax
    af22:	75 07                	jne    af2b <xEventGroupSync+0x75>
    af24:	48 83 7d a0 00       	cmpq   $0x0,-0x60(%rbp)
    af29:	75 07                	jne    af32 <xEventGroupSync+0x7c>
    af2b:	b8 01 00 00 00       	mov    $0x1,%eax
    af30:	eb 05                	jmp    af37 <xEventGroupSync+0x81>
    af32:	b8 00 00 00 00       	mov    $0x0,%eax
    af37:	85 c0                	test   %eax,%eax
    af39:	75 11                	jne    af4c <xEventGroupSync+0x96>
    af3b:	be d0 00 00 00       	mov    $0xd0,%esi
    af40:	48 8d 3d 59 c9 01 00 	lea    0x1c959(%rip),%rdi        # 278a0 <_IO_stdin_used+0x8a0>
    af47:	e8 c0 8d ff ff       	callq  3d0c <vAssertCalled>
    af4c:	e8 f0 25 00 00       	callq  d541 <vTaskSuspendAll>
    af51:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
    af55:	48 8b 00             	mov    (%rax),%rax
    af58:	48 89 45 e0          	mov    %rax,-0x20(%rbp)
    af5c:	48 8b 55 b0          	mov    -0x50(%rbp),%rdx
    af60:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
    af64:	48 89 d6             	mov    %rdx,%rsi
    af67:	48 89 c7             	mov    %rax,%rdi
    af6a:	e8 78 07 00 00       	callq  b6e7 <xEventGroupSetBits>
    af6f:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
    af73:	48 0b 45 b0          	or     -0x50(%rbp),%rax
    af77:	48 23 45 a8          	and    -0x58(%rbp),%rax
    af7b:	48 39 45 a8          	cmp    %rax,-0x58(%rbp)
    af7f:	75 31                	jne    afb2 <xEventGroupSync+0xfc>
    af81:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
    af85:	48 0b 45 b0          	or     -0x50(%rbp),%rax
    af89:	48 89 45 c8          	mov    %rax,-0x38(%rbp)
    af8d:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
    af91:	48 8b 00             	mov    (%rax),%rax
    af94:	48 8b 55 a8          	mov    -0x58(%rbp),%rdx
    af98:	48 f7 d2             	not    %rdx
    af9b:	48 21 c2             	and    %rax,%rdx
    af9e:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
    afa2:	48 89 10             	mov    %rdx,(%rax)
    afa5:	48 c7 45 a0 00 00 00 	movq   $0x0,-0x60(%rbp)
    afac:	00 
    afad:	e9 a9 00 00 00       	jmpq   b05b <xEventGroupSync+0x1a5>
    afb2:	48 83 7d a0 00       	cmpq   $0x0,-0x60(%rbp)
    afb7:	0f 84 8b 00 00 00    	je     b048 <xEventGroupSync+0x192>
    afbd:	e8 9a 86 01 00       	callq  2365c <prvTraceGetCurrentTaskHandle>
    afc2:	48 89 c7             	mov    %rax,%rdi
    afc5:	e8 91 81 01 00       	callq  2315b <prvTraceGetTaskNumberHigh16>
    afca:	0f b7 15 0b 61 02 00 	movzwl 0x2610b(%rip),%edx        # 310dc <CurrentFilterMask>
    afd1:	21 d0                	and    %edx,%eax
    afd3:	66 85 c0             	test   %ax,%ax
    afd6:	74 42                	je     b01a <xEventGroupSync+0x164>
    afd8:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
    afdc:	48 89 c7             	mov    %rax,%rdi
    afdf:	e8 c6 83 01 00       	callq  233aa <prvTraceGetEventGroupNumberHigh16>
    afe4:	0f b7 15 f1 60 02 00 	movzwl 0x260f1(%rip),%edx        # 310dc <CurrentFilterMask>
    afeb:	21 d0                	and    %edx,%eax
    afed:	66 85 c0             	test   %ax,%ax
    aff0:	74 28                	je     b01a <xEventGroupSync+0x164>
    aff2:	48 8b 45 a8          	mov    -0x58(%rbp),%rax
    aff6:	89 c3                	mov    %eax,%ebx
    aff8:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
    affc:	48 89 c7             	mov    %rax,%rdi
    afff:	e8 88 83 01 00       	callq  2338c <prvTraceGetEventGroupNumberLow16>
    b004:	0f b6 c0             	movzbl %al,%eax
    b007:	89 d9                	mov    %ebx,%ecx
    b009:	89 c2                	mov    %eax,%edx
    b00b:	be 06 00 00 00       	mov    $0x6,%esi
    b010:	bf c4 00 00 00       	mov    $0xc4,%edi
    b015:	e8 5b a1 01 00       	callq  25175 <prvTraceStoreKernelCallWithParam>
    b01a:	48 8b 45 a8          	mov    -0x58(%rbp),%rax
    b01e:	48 0d 00 00 00 05    	or     $0x5000000,%rax
    b024:	48 89 c6             	mov    %rax,%rsi
    b027:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
    b02b:	48 8d 48 08          	lea    0x8(%rax),%rcx
    b02f:	48 8b 45 a0          	mov    -0x60(%rbp),%rax
    b033:	48 89 c2             	mov    %rax,%rdx
    b036:	48 89 cf             	mov    %rcx,%rdi
    b039:	e8 f1 36 00 00       	callq  e72f <vTaskPlaceOnUnorderedEventList>
    b03e:	48 c7 45 c8 00 00 00 	movq   $0x0,-0x38(%rbp)
    b045:	00 
    b046:	eb 13                	jmp    b05b <xEventGroupSync+0x1a5>
    b048:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
    b04c:	48 8b 00             	mov    (%rax),%rax
    b04f:	48 89 45 c8          	mov    %rax,-0x38(%rbp)
    b053:	48 c7 45 d0 01 00 00 	movq   $0x1,-0x30(%rbp)
    b05a:	00 
    b05b:	e8 fe 24 00 00       	callq  d55e <xTaskResumeAll>
    b060:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
    b064:	48 83 7d a0 00       	cmpq   $0x0,-0x60(%rbp)
    b069:	74 74                	je     b0df <xEventGroupSync+0x229>
    b06b:	48 83 7d e8 00       	cmpq   $0x0,-0x18(%rbp)
    b070:	75 05                	jne    b077 <xEventGroupSync+0x1c1>
    b072:	e8 fd 7d 00 00       	callq  12e74 <vPortYield>
    b077:	e8 b6 4e 00 00       	callq  ff32 <uxTaskResetEventItemValue>
    b07c:	48 89 45 c8          	mov    %rax,-0x38(%rbp)
    b080:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
    b084:	25 00 00 00 02       	and    $0x2000000,%eax
    b089:	48 85 c0             	test   %rax,%rax
    b08c:	75 43                	jne    b0d1 <xEventGroupSync+0x21b>
    b08e:	e8 3c 7d 00 00       	callq  12dcf <vPortEnterCritical>
    b093:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
    b097:	48 8b 00             	mov    (%rax),%rax
    b09a:	48 89 45 c8          	mov    %rax,-0x38(%rbp)
    b09e:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
    b0a2:	48 23 45 a8          	and    -0x58(%rbp),%rax
    b0a6:	48 39 45 a8          	cmp    %rax,-0x58(%rbp)
    b0aa:	75 18                	jne    b0c4 <xEventGroupSync+0x20e>
    b0ac:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
    b0b0:	48 8b 00             	mov    (%rax),%rax
    b0b3:	48 8b 55 a8          	mov    -0x58(%rbp),%rdx
    b0b7:	48 f7 d2             	not    %rdx
    b0ba:	48 21 c2             	and    %rax,%rdx
    b0bd:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
    b0c1:	48 89 10             	mov    %rdx,(%rax)
    b0c4:	e8 34 7d 00 00       	callq  12dfd <vPortExitCritical>
    b0c9:	48 c7 45 d0 01 00 00 	movq   $0x1,-0x30(%rbp)
    b0d0:	00 
    b0d1:	48 b8 ff ff ff 00 ff 	movabs $0xffffffff00ffffff,%rax
    b0d8:	ff ff ff 
    b0db:	48 21 45 c8          	and    %rax,-0x38(%rbp)
    b0df:	48 83 7d d0 00       	cmpq   $0x0,-0x30(%rbp)
    b0e4:	74 67                	je     b14d <xEventGroupSync+0x297>
    b0e6:	e8 71 85 01 00       	callq  2365c <prvTraceGetCurrentTaskHandle>
    b0eb:	48 89 c7             	mov    %rax,%rdi
    b0ee:	e8 68 80 01 00       	callq  2315b <prvTraceGetTaskNumberHigh16>
    b0f3:	0f b7 15 e2 5f 02 00 	movzwl 0x25fe2(%rip),%edx        # 310dc <CurrentFilterMask>
    b0fa:	21 d0                	and    %edx,%eax
    b0fc:	66 85 c0             	test   %ax,%ax
    b0ff:	0f 84 a5 00 00 00    	je     b1aa <xEventGroupSync+0x2f4>
    b105:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
    b109:	48 89 c7             	mov    %rax,%rdi
    b10c:	e8 99 82 01 00       	callq  233aa <prvTraceGetEventGroupNumberHigh16>
    b111:	0f b7 15 c4 5f 02 00 	movzwl 0x25fc4(%rip),%edx        # 310dc <CurrentFilterMask>
    b118:	21 d0                	and    %edx,%eax
    b11a:	66 85 c0             	test   %ax,%ax
    b11d:	0f 84 87 00 00 00    	je     b1aa <xEventGroupSync+0x2f4>
    b123:	48 8b 45 a8          	mov    -0x58(%rbp),%rax
    b127:	89 c3                	mov    %eax,%ebx
    b129:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
    b12d:	48 89 c7             	mov    %rax,%rdi
    b130:	e8 57 82 01 00       	callq  2338c <prvTraceGetEventGroupNumberLow16>
    b135:	0f b6 c0             	movzbl %al,%eax
    b138:	89 d9                	mov    %ebx,%ecx
    b13a:	89 c2                	mov    %eax,%edx
    b13c:	be 06 00 00 00       	mov    $0x6,%esi
    b141:	bf cc 00 00 00       	mov    $0xcc,%edi
    b146:	e8 2a a0 01 00       	callq  25175 <prvTraceStoreKernelCallWithParam>
    b14b:	eb 5d                	jmp    b1aa <xEventGroupSync+0x2f4>
    b14d:	e8 0a 85 01 00       	callq  2365c <prvTraceGetCurrentTaskHandle>
    b152:	48 89 c7             	mov    %rax,%rdi
    b155:	e8 01 80 01 00       	callq  2315b <prvTraceGetTaskNumberHigh16>
    b15a:	0f b7 15 7b 5f 02 00 	movzwl 0x25f7b(%rip),%edx        # 310dc <CurrentFilterMask>
    b161:	21 d0                	and    %edx,%eax
    b163:	66 85 c0             	test   %ax,%ax
    b166:	74 42                	je     b1aa <xEventGroupSync+0x2f4>
    b168:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
    b16c:	48 89 c7             	mov    %rax,%rdi
    b16f:	e8 36 82 01 00       	callq  233aa <prvTraceGetEventGroupNumberHigh16>
    b174:	0f b7 15 61 5f 02 00 	movzwl 0x25f61(%rip),%edx        # 310dc <CurrentFilterMask>
    b17b:	21 d0                	and    %edx,%eax
    b17d:	66 85 c0             	test   %ax,%ax
    b180:	74 28                	je     b1aa <xEventGroupSync+0x2f4>
    b182:	48 8b 45 a8          	mov    -0x58(%rbp),%rax
    b186:	89 c3                	mov    %eax,%ebx
    b188:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
    b18c:	48 89 c7             	mov    %rax,%rdi
    b18f:	e8 f8 81 01 00       	callq  2338c <prvTraceGetEventGroupNumberLow16>
    b194:	0f b6 c0             	movzbl %al,%eax
    b197:	89 d9                	mov    %ebx,%ecx
    b199:	89 c2                	mov    %eax,%edx
    b19b:	be 06 00 00 00       	mov    $0x6,%esi
    b1a0:	bf c5 00 00 00       	mov    $0xc5,%edi
    b1a5:	e8 cb 9f 01 00       	callq  25175 <prvTraceStoreKernelCallWithParam>
    b1aa:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
    b1ae:	48 83 c4 58          	add    $0x58,%rsp
    b1b2:	5b                   	pop    %rbx
    b1b3:	5d                   	pop    %rbp
    b1b4:	c3                   	retq   

000000000000b1b5 <xEventGroupWaitBits>:
    b1b5:	f3 0f 1e fa          	endbr64 
    b1b9:	55                   	push   %rbp
    b1ba:	48 89 e5             	mov    %rsp,%rbp
    b1bd:	53                   	push   %rbx
    b1be:	48 83 ec 78          	sub    $0x78,%rsp
    b1c2:	48 89 7d a8          	mov    %rdi,-0x58(%rbp)
    b1c6:	48 89 75 a0          	mov    %rsi,-0x60(%rbp)
    b1ca:	48 89 55 98          	mov    %rdx,-0x68(%rbp)
    b1ce:	48 89 4d 90          	mov    %rcx,-0x70(%rbp)
    b1d2:	4c 89 45 88          	mov    %r8,-0x78(%rbp)
    b1d6:	48 8b 45 a8          	mov    -0x58(%rbp),%rax
    b1da:	48 89 45 d0          	mov    %rax,-0x30(%rbp)
    b1de:	48 c7 45 c0 00 00 00 	movq   $0x0,-0x40(%rbp)
    b1e5:	00 
    b1e6:	48 c7 45 c8 00 00 00 	movq   $0x0,-0x38(%rbp)
    b1ed:	00 
    b1ee:	48 83 7d a8 00       	cmpq   $0x0,-0x58(%rbp)
    b1f3:	75 11                	jne    b206 <xEventGroupWaitBits+0x51>
    b1f5:	be 4a 01 00 00       	mov    $0x14a,%esi
    b1fa:	48 8d 3d 9f c6 01 00 	lea    0x1c69f(%rip),%rdi        # 278a0 <_IO_stdin_used+0x8a0>
    b201:	e8 06 8b ff ff       	callq  3d0c <vAssertCalled>
    b206:	48 8b 45 a0          	mov    -0x60(%rbp),%rax
    b20a:	25 00 00 00 ff       	and    $0xff000000,%eax
    b20f:	48 85 c0             	test   %rax,%rax
    b212:	74 11                	je     b225 <xEventGroupWaitBits+0x70>
    b214:	be 4b 01 00 00       	mov    $0x14b,%esi
    b219:	48 8d 3d 80 c6 01 00 	lea    0x1c680(%rip),%rdi        # 278a0 <_IO_stdin_used+0x8a0>
    b220:	e8 e7 8a ff ff       	callq  3d0c <vAssertCalled>
    b225:	48 83 7d a0 00       	cmpq   $0x0,-0x60(%rbp)
    b22a:	75 11                	jne    b23d <xEventGroupWaitBits+0x88>
    b22c:	be 4c 01 00 00       	mov    $0x14c,%esi
    b231:	48 8d 3d 68 c6 01 00 	lea    0x1c668(%rip),%rdi        # 278a0 <_IO_stdin_used+0x8a0>
    b238:	e8 cf 8a ff ff       	callq  3d0c <vAssertCalled>
    b23d:	e8 55 44 00 00       	callq  f697 <xTaskGetSchedulerState>
    b242:	48 85 c0             	test   %rax,%rax
    b245:	75 07                	jne    b24e <xEventGroupWaitBits+0x99>
    b247:	48 83 7d 88 00       	cmpq   $0x0,-0x78(%rbp)
    b24c:	75 07                	jne    b255 <xEventGroupWaitBits+0xa0>
    b24e:	b8 01 00 00 00       	mov    $0x1,%eax
    b253:	eb 05                	jmp    b25a <xEventGroupWaitBits+0xa5>
    b255:	b8 00 00 00 00       	mov    $0x0,%eax
    b25a:	85 c0                	test   %eax,%eax
    b25c:	75 11                	jne    b26f <xEventGroupWaitBits+0xba>
    b25e:	be 4f 01 00 00       	mov    $0x14f,%esi
    b263:	48 8d 3d 36 c6 01 00 	lea    0x1c636(%rip),%rdi        # 278a0 <_IO_stdin_used+0x8a0>
    b26a:	e8 9d 8a ff ff       	callq  3d0c <vAssertCalled>
    b26f:	e8 cd 22 00 00       	callq  d541 <vTaskSuspendAll>
    b274:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
    b278:	48 8b 00             	mov    (%rax),%rax
    b27b:	48 89 45 d8          	mov    %rax,-0x28(%rbp)
    b27f:	48 8b 55 90          	mov    -0x70(%rbp),%rdx
    b283:	48 8b 4d a0          	mov    -0x60(%rbp),%rcx
    b287:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
    b28b:	48 89 ce             	mov    %rcx,%rsi
    b28e:	48 89 c7             	mov    %rax,%rdi
    b291:	e8 01 08 00 00       	callq  ba97 <prvTestWaitCondition>
    b296:	48 89 45 e0          	mov    %rax,-0x20(%rbp)
    b29a:	48 83 7d e0 00       	cmpq   $0x0,-0x20(%rbp)
    b29f:	74 38                	je     b2d9 <xEventGroupWaitBits+0x124>
    b2a1:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
    b2a5:	48 89 45 b8          	mov    %rax,-0x48(%rbp)
    b2a9:	48 c7 45 88 00 00 00 	movq   $0x0,-0x78(%rbp)
    b2b0:	00 
    b2b1:	48 83 7d 98 00       	cmpq   $0x0,-0x68(%rbp)
    b2b6:	0f 84 0d 01 00 00    	je     b3c9 <xEventGroupWaitBits+0x214>
    b2bc:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
    b2c0:	48 8b 00             	mov    (%rax),%rax
    b2c3:	48 8b 55 a0          	mov    -0x60(%rbp),%rdx
    b2c7:	48 f7 d2             	not    %rdx
    b2ca:	48 21 c2             	and    %rax,%rdx
    b2cd:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
    b2d1:	48 89 10             	mov    %rdx,(%rax)
    b2d4:	e9 f0 00 00 00       	jmpq   b3c9 <xEventGroupWaitBits+0x214>
    b2d9:	48 83 7d 88 00       	cmpq   $0x0,-0x78(%rbp)
    b2de:	75 15                	jne    b2f5 <xEventGroupWaitBits+0x140>
    b2e0:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
    b2e4:	48 89 45 b8          	mov    %rax,-0x48(%rbp)
    b2e8:	48 c7 45 c8 01 00 00 	movq   $0x1,-0x38(%rbp)
    b2ef:	00 
    b2f0:	e9 d4 00 00 00       	jmpq   b3c9 <xEventGroupWaitBits+0x214>
    b2f5:	48 83 7d 98 00       	cmpq   $0x0,-0x68(%rbp)
    b2fa:	74 08                	je     b304 <xEventGroupWaitBits+0x14f>
    b2fc:	48 81 4d c0 00 00 00 	orq    $0x1000000,-0x40(%rbp)
    b303:	01 
    b304:	48 83 7d 90 00       	cmpq   $0x0,-0x70(%rbp)
    b309:	74 08                	je     b313 <xEventGroupWaitBits+0x15e>
    b30b:	48 81 4d c0 00 00 00 	orq    $0x4000000,-0x40(%rbp)
    b312:	04 
    b313:	48 8b 45 a0          	mov    -0x60(%rbp),%rax
    b317:	48 0b 45 c0          	or     -0x40(%rbp),%rax
    b31b:	48 8b 55 d0          	mov    -0x30(%rbp),%rdx
    b31f:	48 8d 4a 08          	lea    0x8(%rdx),%rcx
    b323:	48 8b 55 88          	mov    -0x78(%rbp),%rdx
    b327:	48 89 c6             	mov    %rax,%rsi
    b32a:	48 89 cf             	mov    %rcx,%rdi
    b32d:	e8 fd 33 00 00       	callq  e72f <vTaskPlaceOnUnorderedEventList>
    b332:	48 c7 45 b8 00 00 00 	movq   $0x0,-0x48(%rbp)
    b339:	00 
    b33a:	e8 1d 83 01 00       	callq  2365c <prvTraceGetCurrentTaskHandle>
    b33f:	48 89 c7             	mov    %rax,%rdi
    b342:	e8 14 7e 01 00       	callq  2315b <prvTraceGetTaskNumberHigh16>
    b347:	0f b7 15 8e 5d 02 00 	movzwl 0x25d8e(%rip),%edx        # 310dc <CurrentFilterMask>
    b34e:	21 d0                	and    %edx,%eax
    b350:	66 85 c0             	test   %ax,%ax
    b353:	74 42                	je     b397 <xEventGroupWaitBits+0x1e2>
    b355:	48 8b 45 a8          	mov    -0x58(%rbp),%rax
    b359:	48 89 c7             	mov    %rax,%rdi
    b35c:	e8 49 80 01 00       	callq  233aa <prvTraceGetEventGroupNumberHigh16>
    b361:	0f b7 15 74 5d 02 00 	movzwl 0x25d74(%rip),%edx        # 310dc <CurrentFilterMask>
    b368:	21 d0                	and    %edx,%eax
    b36a:	66 85 c0             	test   %ax,%ax
    b36d:	74 28                	je     b397 <xEventGroupWaitBits+0x1e2>
    b36f:	48 8b 45 a0          	mov    -0x60(%rbp),%rax
    b373:	89 c3                	mov    %eax,%ebx
    b375:	48 8b 45 a8          	mov    -0x58(%rbp),%rax
    b379:	48 89 c7             	mov    %rax,%rdi
    b37c:	e8 0b 80 01 00       	callq  2338c <prvTraceGetEventGroupNumberLow16>
    b381:	0f b6 c0             	movzbl %al,%eax
    b384:	89 d9                	mov    %ebx,%ecx
    b386:	89 c2                	mov    %eax,%edx
    b388:	be 06 00 00 00       	mov    $0x6,%esi
    b38d:	bf c6 00 00 00       	mov    $0xc6,%edi
    b392:	e8 de 9d 01 00       	callq  25175 <prvTraceStoreKernelCallWithParam>
    b397:	e8 c0 82 01 00       	callq  2365c <prvTraceGetCurrentTaskHandle>
    b39c:	48 89 c7             	mov    %rax,%rdi
    b39f:	e8 b7 7d 01 00       	callq  2315b <prvTraceGetTaskNumberHigh16>
    b3a4:	0f b7 15 31 5d 02 00 	movzwl 0x25d31(%rip),%edx        # 310dc <CurrentFilterMask>
    b3ab:	21 d0                	and    %edx,%eax
    b3ad:	66 85 c0             	test   %ax,%ax
    b3b0:	74 17                	je     b3c9 <xEventGroupWaitBits+0x214>
    b3b2:	e8 a5 82 01 00       	callq  2365c <prvTraceGetCurrentTaskHandle>
    b3b7:	48 89 c7             	mov    %rax,%rdi
    b3ba:	e8 7e 7d 01 00       	callq  2313d <prvTraceGetTaskNumberLow16>
    b3bf:	0f b6 c0             	movzbl %al,%eax
    b3c2:	89 c7                	mov    %eax,%edi
    b3c4:	e8 fd a5 01 00       	callq  259c6 <prvTraceSetTaskInstanceFinished>
    b3c9:	e8 90 21 00 00       	callq  d55e <xTaskResumeAll>
    b3ce:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
    b3d2:	48 83 7d 88 00       	cmpq   $0x0,-0x78(%rbp)
    b3d7:	0f 84 89 00 00 00    	je     b466 <xEventGroupWaitBits+0x2b1>
    b3dd:	48 83 7d e8 00       	cmpq   $0x0,-0x18(%rbp)
    b3e2:	75 05                	jne    b3e9 <xEventGroupWaitBits+0x234>
    b3e4:	e8 8b 7a 00 00       	callq  12e74 <vPortYield>
    b3e9:	e8 44 4b 00 00       	callq  ff32 <uxTaskResetEventItemValue>
    b3ee:	48 89 45 b8          	mov    %rax,-0x48(%rbp)
    b3f2:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
    b3f6:	25 00 00 00 02       	and    $0x2000000,%eax
    b3fb:	48 85 c0             	test   %rax,%rax
    b3fe:	75 58                	jne    b458 <xEventGroupWaitBits+0x2a3>
    b400:	e8 ca 79 00 00       	callq  12dcf <vPortEnterCritical>
    b405:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
    b409:	48 8b 00             	mov    (%rax),%rax
    b40c:	48 89 45 b8          	mov    %rax,-0x48(%rbp)
    b410:	48 8b 55 90          	mov    -0x70(%rbp),%rdx
    b414:	48 8b 4d a0          	mov    -0x60(%rbp),%rcx
    b418:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
    b41c:	48 89 ce             	mov    %rcx,%rsi
    b41f:	48 89 c7             	mov    %rax,%rdi
    b422:	e8 70 06 00 00       	callq  ba97 <prvTestWaitCondition>
    b427:	48 85 c0             	test   %rax,%rax
    b42a:	74 1f                	je     b44b <xEventGroupWaitBits+0x296>
    b42c:	48 83 7d 98 00       	cmpq   $0x0,-0x68(%rbp)
    b431:	74 18                	je     b44b <xEventGroupWaitBits+0x296>
    b433:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
    b437:	48 8b 00             	mov    (%rax),%rax
    b43a:	48 8b 55 a0          	mov    -0x60(%rbp),%rdx
    b43e:	48 f7 d2             	not    %rdx
    b441:	48 21 c2             	and    %rax,%rdx
    b444:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
    b448:	48 89 10             	mov    %rdx,(%rax)
    b44b:	48 c7 45 c8 01 00 00 	movq   $0x1,-0x38(%rbp)
    b452:	00 
    b453:	e8 a5 79 00 00       	callq  12dfd <vPortExitCritical>
    b458:	48 b8 ff ff ff 00 ff 	movabs $0xffffffff00ffffff,%rax
    b45f:	ff ff ff 
    b462:	48 21 45 b8          	and    %rax,-0x48(%rbp)
    b466:	48 83 7d c8 00       	cmpq   $0x0,-0x38(%rbp)
    b46b:	74 67                	je     b4d4 <xEventGroupWaitBits+0x31f>
    b46d:	e8 ea 81 01 00       	callq  2365c <prvTraceGetCurrentTaskHandle>
    b472:	48 89 c7             	mov    %rax,%rdi
    b475:	e8 e1 7c 01 00       	callq  2315b <prvTraceGetTaskNumberHigh16>
    b47a:	0f b7 15 5b 5c 02 00 	movzwl 0x25c5b(%rip),%edx        # 310dc <CurrentFilterMask>
    b481:	21 d0                	and    %edx,%eax
    b483:	66 85 c0             	test   %ax,%ax
    b486:	0f 84 a5 00 00 00    	je     b531 <xEventGroupWaitBits+0x37c>
    b48c:	48 8b 45 a8          	mov    -0x58(%rbp),%rax
    b490:	48 89 c7             	mov    %rax,%rdi
    b493:	e8 12 7f 01 00       	callq  233aa <prvTraceGetEventGroupNumberHigh16>
    b498:	0f b7 15 3d 5c 02 00 	movzwl 0x25c3d(%rip),%edx        # 310dc <CurrentFilterMask>
    b49f:	21 d0                	and    %edx,%eax
    b4a1:	66 85 c0             	test   %ax,%ax
    b4a4:	0f 84 87 00 00 00    	je     b531 <xEventGroupWaitBits+0x37c>
    b4aa:	48 8b 45 a0          	mov    -0x60(%rbp),%rax
    b4ae:	89 c3                	mov    %eax,%ebx
    b4b0:	48 8b 45 a8          	mov    -0x58(%rbp),%rax
    b4b4:	48 89 c7             	mov    %rax,%rdi
    b4b7:	e8 d0 7e 01 00       	callq  2338c <prvTraceGetEventGroupNumberLow16>
    b4bc:	0f b6 c0             	movzbl %al,%eax
    b4bf:	89 d9                	mov    %ebx,%ecx
    b4c1:	89 c2                	mov    %eax,%edx
    b4c3:	be 06 00 00 00       	mov    $0x6,%esi
    b4c8:	bf cd 00 00 00       	mov    $0xcd,%edi
    b4cd:	e8 a3 9c 01 00       	callq  25175 <prvTraceStoreKernelCallWithParam>
    b4d2:	eb 5d                	jmp    b531 <xEventGroupWaitBits+0x37c>
    b4d4:	e8 83 81 01 00       	callq  2365c <prvTraceGetCurrentTaskHandle>
    b4d9:	48 89 c7             	mov    %rax,%rdi
    b4dc:	e8 7a 7c 01 00       	callq  2315b <prvTraceGetTaskNumberHigh16>
    b4e1:	0f b7 15 f4 5b 02 00 	movzwl 0x25bf4(%rip),%edx        # 310dc <CurrentFilterMask>
    b4e8:	21 d0                	and    %edx,%eax
    b4ea:	66 85 c0             	test   %ax,%ax
    b4ed:	74 42                	je     b531 <xEventGroupWaitBits+0x37c>
    b4ef:	48 8b 45 a8          	mov    -0x58(%rbp),%rax
    b4f3:	48 89 c7             	mov    %rax,%rdi
    b4f6:	e8 af 7e 01 00       	callq  233aa <prvTraceGetEventGroupNumberHigh16>
    b4fb:	0f b7 15 da 5b 02 00 	movzwl 0x25bda(%rip),%edx        # 310dc <CurrentFilterMask>
    b502:	21 d0                	and    %edx,%eax
    b504:	66 85 c0             	test   %ax,%ax
    b507:	74 28                	je     b531 <xEventGroupWaitBits+0x37c>
    b509:	48 8b 45 a0          	mov    -0x60(%rbp),%rax
    b50d:	89 c3                	mov    %eax,%ebx
    b50f:	48 8b 45 a8          	mov    -0x58(%rbp),%rax
    b513:	48 89 c7             	mov    %rax,%rdi
    b516:	e8 71 7e 01 00       	callq  2338c <prvTraceGetEventGroupNumberLow16>
    b51b:	0f b6 c0             	movzbl %al,%eax
    b51e:	89 d9                	mov    %ebx,%ecx
    b520:	89 c2                	mov    %eax,%edx
    b522:	be 06 00 00 00       	mov    $0x6,%esi
    b527:	bf c7 00 00 00       	mov    $0xc7,%edi
    b52c:	e8 44 9c 01 00       	callq  25175 <prvTraceStoreKernelCallWithParam>
    b531:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
    b535:	48 83 c4 78          	add    $0x78,%rsp
    b539:	5b                   	pop    %rbx
    b53a:	5d                   	pop    %rbp
    b53b:	c3                   	retq   

000000000000b53c <xEventGroupClearBits>:
    b53c:	f3 0f 1e fa          	endbr64 
    b540:	55                   	push   %rbp
    b541:	48 89 e5             	mov    %rsp,%rbp
    b544:	53                   	push   %rbx
    b545:	48 83 ec 28          	sub    $0x28,%rsp
    b549:	48 89 7d d8          	mov    %rdi,-0x28(%rbp)
    b54d:	48 89 75 d0          	mov    %rsi,-0x30(%rbp)
    b551:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
    b555:	48 89 45 e0          	mov    %rax,-0x20(%rbp)
    b559:	48 83 7d d8 00       	cmpq   $0x0,-0x28(%rbp)
    b55e:	75 11                	jne    b571 <xEventGroupClearBits+0x35>
    b560:	be e1 01 00 00       	mov    $0x1e1,%esi
    b565:	48 8d 3d 34 c3 01 00 	lea    0x1c334(%rip),%rdi        # 278a0 <_IO_stdin_used+0x8a0>
    b56c:	e8 9b 87 ff ff       	callq  3d0c <vAssertCalled>
    b571:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
    b575:	25 00 00 00 ff       	and    $0xff000000,%eax
    b57a:	48 85 c0             	test   %rax,%rax
    b57d:	74 11                	je     b590 <xEventGroupClearBits+0x54>
    b57f:	be e2 01 00 00       	mov    $0x1e2,%esi
    b584:	48 8d 3d 15 c3 01 00 	lea    0x1c315(%rip),%rdi        # 278a0 <_IO_stdin_used+0x8a0>
    b58b:	e8 7c 87 ff ff       	callq  3d0c <vAssertCalled>
    b590:	e8 3a 78 00 00       	callq  12dcf <vPortEnterCritical>
    b595:	e8 c2 80 01 00       	callq  2365c <prvTraceGetCurrentTaskHandle>
    b59a:	48 89 c7             	mov    %rax,%rdi
    b59d:	e8 b9 7b 01 00       	callq  2315b <prvTraceGetTaskNumberHigh16>
    b5a2:	0f b7 15 33 5b 02 00 	movzwl 0x25b33(%rip),%edx        # 310dc <CurrentFilterMask>
    b5a9:	21 d0                	and    %edx,%eax
    b5ab:	66 85 c0             	test   %ax,%ax
    b5ae:	74 42                	je     b5f2 <xEventGroupClearBits+0xb6>
    b5b0:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
    b5b4:	48 89 c7             	mov    %rax,%rdi
    b5b7:	e8 ee 7d 01 00       	callq  233aa <prvTraceGetEventGroupNumberHigh16>
    b5bc:	0f b7 15 19 5b 02 00 	movzwl 0x25b19(%rip),%edx        # 310dc <CurrentFilterMask>
    b5c3:	21 d0                	and    %edx,%eax
    b5c5:	66 85 c0             	test   %ax,%ax
    b5c8:	74 28                	je     b5f2 <xEventGroupClearBits+0xb6>
    b5ca:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
    b5ce:	89 c3                	mov    %eax,%ebx
    b5d0:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
    b5d4:	48 89 c7             	mov    %rax,%rdi
    b5d7:	e8 b0 7d 01 00       	callq  2338c <prvTraceGetEventGroupNumberLow16>
    b5dc:	0f b6 c0             	movzbl %al,%eax
    b5df:	89 d9                	mov    %ebx,%ecx
    b5e1:	89 c2                	mov    %eax,%edx
    b5e3:	be 06 00 00 00       	mov    $0x6,%esi
    b5e8:	bf c8 00 00 00       	mov    $0xc8,%edi
    b5ed:	e8 83 9b 01 00       	callq  25175 <prvTraceStoreKernelCallWithParam>
    b5f2:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
    b5f6:	48 8b 00             	mov    (%rax),%rax
    b5f9:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
    b5fd:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
    b601:	48 8b 00             	mov    (%rax),%rax
    b604:	48 8b 55 d0          	mov    -0x30(%rbp),%rdx
    b608:	48 f7 d2             	not    %rdx
    b60b:	48 21 c2             	and    %rax,%rdx
    b60e:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
    b612:	48 89 10             	mov    %rdx,(%rax)
    b615:	e8 e3 77 00 00       	callq  12dfd <vPortExitCritical>
    b61a:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
    b61e:	48 83 c4 28          	add    $0x28,%rsp
    b622:	5b                   	pop    %rbx
    b623:	5d                   	pop    %rbp
    b624:	c3                   	retq   

000000000000b625 <xEventGroupClearBitsFromISR>:
    b625:	f3 0f 1e fa          	endbr64 
    b629:	55                   	push   %rbp
    b62a:	48 89 e5             	mov    %rsp,%rbp
    b62d:	53                   	push   %rbx
    b62e:	48 83 ec 28          	sub    $0x28,%rsp
    b632:	48 89 7d d8          	mov    %rdi,-0x28(%rbp)
    b636:	48 89 75 d0          	mov    %rsi,-0x30(%rbp)
    b63a:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
    b63e:	48 89 c7             	mov    %rax,%rdi
    b641:	e8 64 7d 01 00       	callq  233aa <prvTraceGetEventGroupNumberHigh16>
    b646:	0f b7 15 8f 5a 02 00 	movzwl 0x25a8f(%rip),%edx        # 310dc <CurrentFilterMask>
    b64d:	21 d0                	and    %edx,%eax
    b64f:	66 85 c0             	test   %ax,%ax
    b652:	74 28                	je     b67c <xEventGroupClearBitsFromISR+0x57>
    b654:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
    b658:	89 c3                	mov    %eax,%ebx
    b65a:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
    b65e:	48 89 c7             	mov    %rax,%rdi
    b661:	e8 26 7d 01 00       	callq  2338c <prvTraceGetEventGroupNumberLow16>
    b666:	0f b6 c0             	movzbl %al,%eax
    b669:	89 d9                	mov    %ebx,%ecx
    b66b:	89 c2                	mov    %eax,%edx
    b66d:	be 06 00 00 00       	mov    $0x6,%esi
    b672:	bf c9 00 00 00       	mov    $0xc9,%edi
    b677:	e8 f9 9a 01 00       	callq  25175 <prvTraceStoreKernelCallWithParam>
    b67c:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
    b680:	89 c2                	mov    %eax,%edx
    b682:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
    b686:	b9 00 00 00 00       	mov    $0x0,%ecx
    b68b:	48 89 c6             	mov    %rax,%rsi
    b68e:	48 8d 3d da 03 00 00 	lea    0x3da(%rip),%rdi        # ba6f <vEventGroupClearBitsCallback>
    b695:	e8 a0 6d 00 00       	callq  1243a <xTimerPendFunctionCallFromISR>
    b69a:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
    b69e:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
    b6a2:	48 83 c4 28          	add    $0x28,%rsp
    b6a6:	5b                   	pop    %rbx
    b6a7:	5d                   	pop    %rbp
    b6a8:	c3                   	retq   

000000000000b6a9 <xEventGroupGetBitsFromISR>:
    b6a9:	f3 0f 1e fa          	endbr64 
    b6ad:	55                   	push   %rbp
    b6ae:	48 89 e5             	mov    %rsp,%rbp
    b6b1:	48 83 ec 30          	sub    $0x30,%rsp
    b6b5:	48 89 7d d8          	mov    %rdi,-0x28(%rbp)
    b6b9:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
    b6bd:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
    b6c1:	e8 0a 78 00 00       	callq  12ed0 <xPortSetInterruptMask>
    b6c6:	48 89 45 f0          	mov    %rax,-0x10(%rbp)
    b6ca:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
    b6ce:	48 8b 00             	mov    (%rax),%rax
    b6d1:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
    b6d5:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
    b6d9:	48 89 c7             	mov    %rax,%rdi
    b6dc:	e8 fe 77 00 00       	callq  12edf <vPortClearInterruptMask>
    b6e1:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    b6e5:	c9                   	leaveq 
    b6e6:	c3                   	retq   

000000000000b6e7 <xEventGroupSetBits>:
    b6e7:	f3 0f 1e fa          	endbr64 
    b6eb:	55                   	push   %rbp
    b6ec:	48 89 e5             	mov    %rsp,%rbp
    b6ef:	53                   	push   %rbx
    b6f0:	48 83 ec 68          	sub    $0x68,%rsp
    b6f4:	48 89 7d 98          	mov    %rdi,-0x68(%rbp)
    b6f8:	48 89 75 90          	mov    %rsi,-0x70(%rbp)
    b6fc:	48 c7 45 b0 00 00 00 	movq   $0x0,-0x50(%rbp)
    b703:	00 
    b704:	48 8b 45 98          	mov    -0x68(%rbp),%rax
    b708:	48 89 45 c0          	mov    %rax,-0x40(%rbp)
    b70c:	48 c7 45 b8 00 00 00 	movq   $0x0,-0x48(%rbp)
    b713:	00 
    b714:	48 83 7d 98 00       	cmpq   $0x0,-0x68(%rbp)
    b719:	75 11                	jne    b72c <xEventGroupSetBits+0x45>
    b71b:	be 21 02 00 00       	mov    $0x221,%esi
    b720:	48 8d 3d 79 c1 01 00 	lea    0x1c179(%rip),%rdi        # 278a0 <_IO_stdin_used+0x8a0>
    b727:	e8 e0 85 ff ff       	callq  3d0c <vAssertCalled>
    b72c:	48 8b 45 90          	mov    -0x70(%rbp),%rax
    b730:	25 00 00 00 ff       	and    $0xff000000,%eax
    b735:	48 85 c0             	test   %rax,%rax
    b738:	74 11                	je     b74b <xEventGroupSetBits+0x64>
    b73a:	be 22 02 00 00       	mov    $0x222,%esi
    b73f:	48 8d 3d 5a c1 01 00 	lea    0x1c15a(%rip),%rdi        # 278a0 <_IO_stdin_used+0x8a0>
    b746:	e8 c1 85 ff ff       	callq  3d0c <vAssertCalled>
    b74b:	48 8b 45 c0          	mov    -0x40(%rbp),%rax
    b74f:	48 83 c0 08          	add    $0x8,%rax
    b753:	48 89 45 c8          	mov    %rax,-0x38(%rbp)
    b757:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
    b75b:	48 83 c0 10          	add    $0x10,%rax
    b75f:	48 89 45 d0          	mov    %rax,-0x30(%rbp)
    b763:	e8 d9 1d 00 00       	callq  d541 <vTaskSuspendAll>
    b768:	e8 ef 7e 01 00       	callq  2365c <prvTraceGetCurrentTaskHandle>
    b76d:	48 89 c7             	mov    %rax,%rdi
    b770:	e8 e6 79 01 00       	callq  2315b <prvTraceGetTaskNumberHigh16>
    b775:	0f b7 15 60 59 02 00 	movzwl 0x25960(%rip),%edx        # 310dc <CurrentFilterMask>
    b77c:	21 d0                	and    %edx,%eax
    b77e:	66 85 c0             	test   %ax,%ax
    b781:	74 42                	je     b7c5 <xEventGroupSetBits+0xde>
    b783:	48 8b 45 98          	mov    -0x68(%rbp),%rax
    b787:	48 89 c7             	mov    %rax,%rdi
    b78a:	e8 1b 7c 01 00       	callq  233aa <prvTraceGetEventGroupNumberHigh16>
    b78f:	0f b7 15 46 59 02 00 	movzwl 0x25946(%rip),%edx        # 310dc <CurrentFilterMask>
    b796:	21 d0                	and    %edx,%eax
    b798:	66 85 c0             	test   %ax,%ax
    b79b:	74 28                	je     b7c5 <xEventGroupSetBits+0xde>
    b79d:	48 8b 45 90          	mov    -0x70(%rbp),%rax
    b7a1:	89 c3                	mov    %eax,%ebx
    b7a3:	48 8b 45 98          	mov    -0x68(%rbp),%rax
    b7a7:	48 89 c7             	mov    %rax,%rdi
    b7aa:	e8 dd 7b 01 00       	callq  2338c <prvTraceGetEventGroupNumberLow16>
    b7af:	0f b6 c0             	movzbl %al,%eax
    b7b2:	89 d9                	mov    %ebx,%ecx
    b7b4:	89 c2                	mov    %eax,%edx
    b7b6:	be 06 00 00 00       	mov    $0x6,%esi
    b7bb:	bf ca 00 00 00       	mov    $0xca,%edi
    b7c0:	e8 b0 99 01 00       	callq  25175 <prvTraceStoreKernelCallWithParam>
    b7c5:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
    b7c9:	48 8b 40 18          	mov    0x18(%rax),%rax
    b7cd:	48 89 45 a8          	mov    %rax,-0x58(%rbp)
    b7d1:	48 8b 45 c0          	mov    -0x40(%rbp),%rax
    b7d5:	48 8b 00             	mov    (%rax),%rax
    b7d8:	48 0b 45 90          	or     -0x70(%rbp),%rax
    b7dc:	48 89 c2             	mov    %rax,%rdx
    b7df:	48 8b 45 c0          	mov    -0x40(%rbp),%rax
    b7e3:	48 89 10             	mov    %rdx,(%rax)
    b7e6:	e9 bf 00 00 00       	jmpq   b8aa <xEventGroupSetBits+0x1c3>
    b7eb:	48 8b 45 a8          	mov    -0x58(%rbp),%rax
    b7ef:	48 8b 40 08          	mov    0x8(%rax),%rax
    b7f3:	48 89 45 d8          	mov    %rax,-0x28(%rbp)
    b7f7:	48 8b 45 a8          	mov    -0x58(%rbp),%rax
    b7fb:	48 8b 00             	mov    (%rax),%rax
    b7fe:	48 89 45 e0          	mov    %rax,-0x20(%rbp)
    b802:	48 c7 45 b8 00 00 00 	movq   $0x0,-0x48(%rbp)
    b809:	00 
    b80a:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
    b80e:	25 00 00 00 ff       	and    $0xff000000,%eax
    b813:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
    b817:	48 b8 ff ff ff 00 ff 	movabs $0xffffffff00ffffff,%rax
    b81e:	ff ff ff 
    b821:	48 21 45 e0          	and    %rax,-0x20(%rbp)
    b825:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
    b829:	25 00 00 00 04       	and    $0x4000000,%eax
    b82e:	48 85 c0             	test   %rax,%rax
    b831:	75 1a                	jne    b84d <xEventGroupSetBits+0x166>
    b833:	48 8b 45 c0          	mov    -0x40(%rbp),%rax
    b837:	48 8b 00             	mov    (%rax),%rax
    b83a:	48 23 45 e0          	and    -0x20(%rbp),%rax
    b83e:	48 85 c0             	test   %rax,%rax
    b841:	74 23                	je     b866 <xEventGroupSetBits+0x17f>
    b843:	48 c7 45 b8 01 00 00 	movq   $0x1,-0x48(%rbp)
    b84a:	00 
    b84b:	eb 19                	jmp    b866 <xEventGroupSetBits+0x17f>
    b84d:	48 8b 45 c0          	mov    -0x40(%rbp),%rax
    b851:	48 8b 00             	mov    (%rax),%rax
    b854:	48 23 45 e0          	and    -0x20(%rbp),%rax
    b858:	48 39 45 e0          	cmp    %rax,-0x20(%rbp)
    b85c:	75 08                	jne    b866 <xEventGroupSetBits+0x17f>
    b85e:	48 c7 45 b8 01 00 00 	movq   $0x1,-0x48(%rbp)
    b865:	00 
    b866:	48 83 7d b8 00       	cmpq   $0x0,-0x48(%rbp)
    b86b:	74 35                	je     b8a2 <xEventGroupSetBits+0x1bb>
    b86d:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
    b871:	25 00 00 00 01       	and    $0x1000000,%eax
    b876:	48 85 c0             	test   %rax,%rax
    b879:	74 08                	je     b883 <xEventGroupSetBits+0x19c>
    b87b:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
    b87f:	48 09 45 b0          	or     %rax,-0x50(%rbp)
    b883:	48 8b 45 c0          	mov    -0x40(%rbp),%rax
    b887:	48 8b 00             	mov    (%rax),%rax
    b88a:	48 0d 00 00 00 02    	or     $0x2000000,%rax
    b890:	48 89 c2             	mov    %rax,%rdx
    b893:	48 8b 45 a8          	mov    -0x58(%rbp),%rax
    b897:	48 89 d6             	mov    %rdx,%rsi
    b89a:	48 89 c7             	mov    %rax,%rdi
    b89d:	e8 d2 33 00 00       	callq  ec74 <vTaskRemoveFromUnorderedEventList>
    b8a2:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
    b8a6:	48 89 45 a8          	mov    %rax,-0x58(%rbp)
    b8aa:	48 8b 45 a8          	mov    -0x58(%rbp),%rax
    b8ae:	48 3b 45 d0          	cmp    -0x30(%rbp),%rax
    b8b2:	0f 85 33 ff ff ff    	jne    b7eb <xEventGroupSetBits+0x104>
    b8b8:	48 8b 45 c0          	mov    -0x40(%rbp),%rax
    b8bc:	48 8b 00             	mov    (%rax),%rax
    b8bf:	48 8b 55 b0          	mov    -0x50(%rbp),%rdx
    b8c3:	48 f7 d2             	not    %rdx
    b8c6:	48 21 c2             	and    %rax,%rdx
    b8c9:	48 8b 45 c0          	mov    -0x40(%rbp),%rax
    b8cd:	48 89 10             	mov    %rdx,(%rax)
    b8d0:	e8 89 1c 00 00       	callq  d55e <xTaskResumeAll>
    b8d5:	48 8b 45 c0          	mov    -0x40(%rbp),%rax
    b8d9:	48 8b 00             	mov    (%rax),%rax
    b8dc:	48 83 c4 68          	add    $0x68,%rsp
    b8e0:	5b                   	pop    %rbx
    b8e1:	5d                   	pop    %rbp
    b8e2:	c3                   	retq   

000000000000b8e3 <vEventGroupDelete>:
    b8e3:	f3 0f 1e fa          	endbr64 
    b8e7:	55                   	push   %rbp
    b8e8:	48 89 e5             	mov    %rsp,%rbp
    b8eb:	48 83 ec 20          	sub    $0x20,%rsp
    b8ef:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
    b8f3:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
    b8f7:	48 89 45 f0          	mov    %rax,-0x10(%rbp)
    b8fb:	48 83 7d f0 00       	cmpq   $0x0,-0x10(%rbp)
    b900:	75 11                	jne    b913 <vEventGroupDelete+0x30>
    b902:	be 79 02 00 00       	mov    $0x279,%esi
    b907:	48 8d 3d 92 bf 01 00 	lea    0x1bf92(%rip),%rdi        # 278a0 <_IO_stdin_used+0x8a0>
    b90e:	e8 f9 83 ff ff       	callq  3d0c <vAssertCalled>
    b913:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
    b917:	48 83 c0 08          	add    $0x8,%rax
    b91b:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
    b91f:	e8 1d 1c 00 00       	callq  d541 <vTaskSuspendAll>
    b924:	e8 a6 74 00 00       	callq  12dcf <vPortEnterCritical>
    b929:	e8 2e 7d 01 00       	callq  2365c <prvTraceGetCurrentTaskHandle>
    b92e:	48 89 c7             	mov    %rax,%rdi
    b931:	e8 25 78 01 00       	callq  2315b <prvTraceGetTaskNumberHigh16>
    b936:	0f b7 15 9f 57 02 00 	movzwl 0x2579f(%rip),%edx        # 310dc <CurrentFilterMask>
    b93d:	21 d0                	and    %edx,%eax
    b93f:	66 85 c0             	test   %ax,%ax
    b942:	74 3a                	je     b97e <vEventGroupDelete+0x9b>
    b944:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
    b948:	48 89 c7             	mov    %rax,%rdi
    b94b:	e8 5a 7a 01 00       	callq  233aa <prvTraceGetEventGroupNumberHigh16>
    b950:	0f b7 15 85 57 02 00 	movzwl 0x25785(%rip),%edx        # 310dc <CurrentFilterMask>
    b957:	21 d0                	and    %edx,%eax
    b959:	66 85 c0             	test   %ax,%ax
    b95c:	74 20                	je     b97e <vEventGroupDelete+0x9b>
    b95e:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
    b962:	48 89 c7             	mov    %rax,%rdi
    b965:	e8 22 7a 01 00       	callq  2338c <prvTraceGetEventGroupNumberLow16>
    b96a:	0f b6 c0             	movzbl %al,%eax
    b96d:	89 c2                	mov    %eax,%edx
    b96f:	be 06 00 00 00       	mov    $0x6,%esi
    b974:	bf cb 00 00 00       	mov    $0xcb,%edi
    b979:	e8 d4 96 01 00       	callq  25052 <prvTraceStoreKernelCall>
    b97e:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
    b982:	48 89 c7             	mov    %rax,%rdi
    b985:	e8 02 7a 01 00       	callq  2338c <prvTraceGetEventGroupNumberLow16>
    b98a:	0f b6 c0             	movzbl %al,%eax
    b98d:	ba 06 00 00 00       	mov    $0x6,%edx
    b992:	89 c6                	mov    %eax,%esi
    b994:	bf 0e 00 00 00       	mov    $0xe,%edi
    b999:	e8 8e 9b 01 00       	callq  2552c <prvTraceStoreObjectNameOnCloseEvent>
    b99e:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
    b9a2:	48 89 c7             	mov    %rax,%rdi
    b9a5:	e8 e2 79 01 00       	callq  2338c <prvTraceGetEventGroupNumberLow16>
    b9aa:	0f b6 c0             	movzbl %al,%eax
    b9ad:	ba 06 00 00 00       	mov    $0x6,%edx
    b9b2:	89 c6                	mov    %eax,%esi
    b9b4:	bf 0e 00 00 00       	mov    $0xe,%edi
    b9b9:	e8 64 9c 01 00       	callq  25622 <prvTraceStoreObjectPropertiesOnCloseEvent>
    b9be:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
    b9c2:	48 89 c7             	mov    %rax,%rdi
    b9c5:	e8 c2 79 01 00       	callq  2338c <prvTraceGetEventGroupNumberLow16>
    b9ca:	0f b6 c0             	movzbl %al,%eax
    b9cd:	89 c6                	mov    %eax,%esi
    b9cf:	bf 06 00 00 00       	mov    $0x6,%edi
    b9d4:	e8 41 a6 01 00       	callq  2601a <prvTraceFreeObjectHandle>
    b9d9:	e8 1f 74 00 00       	callq  12dfd <vPortExitCritical>
    b9de:	eb 3b                	jmp    ba1b <vEventGroupDelete+0x138>
    b9e0:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    b9e4:	48 8b 40 18          	mov    0x18(%rax),%rax
    b9e8:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
    b9ec:	48 83 c2 10          	add    $0x10,%rdx
    b9f0:	48 39 d0             	cmp    %rdx,%rax
    b9f3:	75 11                	jne    ba06 <vEventGroupDelete+0x123>
    b9f5:	be 85 02 00 00       	mov    $0x285,%esi
    b9fa:	48 8d 3d 9f be 01 00 	lea    0x1be9f(%rip),%rdi        # 278a0 <_IO_stdin_used+0x8a0>
    ba01:	e8 06 83 ff ff       	callq  3d0c <vAssertCalled>
    ba06:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    ba0a:	48 8b 40 18          	mov    0x18(%rax),%rax
    ba0e:	be 00 00 00 02       	mov    $0x2000000,%esi
    ba13:	48 89 c7             	mov    %rax,%rdi
    ba16:	e8 59 32 00 00       	callq  ec74 <vTaskRemoveFromUnorderedEventList>
    ba1b:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    ba1f:	48 8b 00             	mov    (%rax),%rax
    ba22:	48 85 c0             	test   %rax,%rax
    ba25:	75 b9                	jne    b9e0 <vEventGroupDelete+0xfd>
    ba27:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
    ba2b:	0f b6 40 38          	movzbl 0x38(%rax),%eax
    ba2f:	84 c0                	test   %al,%al
    ba31:	75 0c                	jne    ba3f <vEventGroupDelete+0x15c>
    ba33:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
    ba37:	48 89 c7             	mov    %rax,%rdi
    ba3a:	e8 61 6d 00 00       	callq  127a0 <vPortFree>
    ba3f:	e8 1a 1b 00 00       	callq  d55e <xTaskResumeAll>
    ba44:	90                   	nop
    ba45:	c9                   	leaveq 
    ba46:	c3                   	retq   

000000000000ba47 <vEventGroupSetBitsCallback>:
    ba47:	f3 0f 1e fa          	endbr64 
    ba4b:	55                   	push   %rbp
    ba4c:	48 89 e5             	mov    %rsp,%rbp
    ba4f:	48 83 ec 10          	sub    $0x10,%rsp
    ba53:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
    ba57:	89 75 f4             	mov    %esi,-0xc(%rbp)
    ba5a:	8b 55 f4             	mov    -0xc(%rbp),%edx
    ba5d:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    ba61:	48 89 d6             	mov    %rdx,%rsi
    ba64:	48 89 c7             	mov    %rax,%rdi
    ba67:	e8 7b fc ff ff       	callq  b6e7 <xEventGroupSetBits>
    ba6c:	90                   	nop
    ba6d:	c9                   	leaveq 
    ba6e:	c3                   	retq   

000000000000ba6f <vEventGroupClearBitsCallback>:
    ba6f:	f3 0f 1e fa          	endbr64 
    ba73:	55                   	push   %rbp
    ba74:	48 89 e5             	mov    %rsp,%rbp
    ba77:	48 83 ec 10          	sub    $0x10,%rsp
    ba7b:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
    ba7f:	89 75 f4             	mov    %esi,-0xc(%rbp)
    ba82:	8b 55 f4             	mov    -0xc(%rbp),%edx
    ba85:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    ba89:	48 89 d6             	mov    %rdx,%rsi
    ba8c:	48 89 c7             	mov    %rax,%rdi
    ba8f:	e8 a8 fa ff ff       	callq  b53c <xEventGroupClearBits>
    ba94:	90                   	nop
    ba95:	c9                   	leaveq 
    ba96:	c3                   	retq   

000000000000ba97 <prvTestWaitCondition>:
    ba97:	f3 0f 1e fa          	endbr64 
    ba9b:	55                   	push   %rbp
    ba9c:	48 89 e5             	mov    %rsp,%rbp
    ba9f:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
    baa3:	48 89 75 e0          	mov    %rsi,-0x20(%rbp)
    baa7:	48 89 55 d8          	mov    %rdx,-0x28(%rbp)
    baab:	48 c7 45 f8 00 00 00 	movq   $0x0,-0x8(%rbp)
    bab2:	00 
    bab3:	48 83 7d d8 00       	cmpq   $0x0,-0x28(%rbp)
    bab8:	75 17                	jne    bad1 <prvTestWaitCondition+0x3a>
    baba:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
    babe:	48 23 45 e0          	and    -0x20(%rbp),%rax
    bac2:	48 85 c0             	test   %rax,%rax
    bac5:	74 20                	je     bae7 <prvTestWaitCondition+0x50>
    bac7:	48 c7 45 f8 01 00 00 	movq   $0x1,-0x8(%rbp)
    bace:	00 
    bacf:	eb 16                	jmp    bae7 <prvTestWaitCondition+0x50>
    bad1:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
    bad5:	48 23 45 e0          	and    -0x20(%rbp),%rax
    bad9:	48 39 45 e0          	cmp    %rax,-0x20(%rbp)
    badd:	75 08                	jne    bae7 <prvTestWaitCondition+0x50>
    badf:	48 c7 45 f8 01 00 00 	movq   $0x1,-0x8(%rbp)
    bae6:	00 
    bae7:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    baeb:	5d                   	pop    %rbp
    baec:	c3                   	retq   

000000000000baed <xEventGroupSetBitsFromISR>:
    baed:	f3 0f 1e fa          	endbr64 
    baf1:	55                   	push   %rbp
    baf2:	48 89 e5             	mov    %rsp,%rbp
    baf5:	53                   	push   %rbx
    baf6:	48 83 ec 38          	sub    $0x38,%rsp
    bafa:	48 89 7d d8          	mov    %rdi,-0x28(%rbp)
    bafe:	48 89 75 d0          	mov    %rsi,-0x30(%rbp)
    bb02:	48 89 55 c8          	mov    %rdx,-0x38(%rbp)
    bb06:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
    bb0a:	48 89 c7             	mov    %rax,%rdi
    bb0d:	e8 98 78 01 00       	callq  233aa <prvTraceGetEventGroupNumberHigh16>
    bb12:	0f b7 15 c3 55 02 00 	movzwl 0x255c3(%rip),%edx        # 310dc <CurrentFilterMask>
    bb19:	21 d0                	and    %edx,%eax
    bb1b:	66 85 c0             	test   %ax,%ax
    bb1e:	74 28                	je     bb48 <xEventGroupSetBitsFromISR+0x5b>
    bb20:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
    bb24:	89 c3                	mov    %eax,%ebx
    bb26:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
    bb2a:	48 89 c7             	mov    %rax,%rdi
    bb2d:	e8 5a 78 01 00       	callq  2338c <prvTraceGetEventGroupNumberLow16>
    bb32:	0f b6 c0             	movzbl %al,%eax
    bb35:	89 d9                	mov    %ebx,%ecx
    bb37:	89 c2                	mov    %eax,%edx
    bb39:	be 06 00 00 00       	mov    $0x6,%esi
    bb3e:	bf ce 00 00 00       	mov    $0xce,%edi
    bb43:	e8 2d 96 01 00       	callq  25175 <prvTraceStoreKernelCallWithParam>
    bb48:	c7 05 0e b5 12 00 01 	movl   $0x1,0x12b50e(%rip)        # 137060 <uiInEventGroupSetBitsFromISR>
    bb4f:	00 00 00 
    bb52:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
    bb56:	89 c6                	mov    %eax,%esi
    bb58:	48 8b 55 c8          	mov    -0x38(%rbp),%rdx
    bb5c:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
    bb60:	48 89 d1             	mov    %rdx,%rcx
    bb63:	89 f2                	mov    %esi,%edx
    bb65:	48 89 c6             	mov    %rax,%rsi
    bb68:	48 8d 3d d8 fe ff ff 	lea    -0x128(%rip),%rdi        # ba47 <vEventGroupSetBitsCallback>
    bb6f:	e8 c6 68 00 00       	callq  1243a <xTimerPendFunctionCallFromISR>
    bb74:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
    bb78:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
    bb7c:	48 83 c4 38          	add    $0x38,%rsp
    bb80:	5b                   	pop    %rbx
    bb81:	5d                   	pop    %rbp
    bb82:	c3                   	retq   

000000000000bb83 <uxEventGroupGetNumber>:
    bb83:	f3 0f 1e fa          	endbr64 
    bb87:	55                   	push   %rbp
    bb88:	48 89 e5             	mov    %rsp,%rbp
    bb8b:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
    bb8f:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
    bb93:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
    bb97:	48 83 7d e8 00       	cmpq   $0x0,-0x18(%rbp)
    bb9c:	75 0a                	jne    bba8 <uxEventGroupGetNumber+0x25>
    bb9e:	48 c7 45 f0 00 00 00 	movq   $0x0,-0x10(%rbp)
    bba5:	00 
    bba6:	eb 0c                	jmp    bbb4 <uxEventGroupGetNumber+0x31>
    bba8:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    bbac:	48 8b 40 30          	mov    0x30(%rax),%rax
    bbb0:	48 89 45 f0          	mov    %rax,-0x10(%rbp)
    bbb4:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
    bbb8:	5d                   	pop    %rbp
    bbb9:	c3                   	retq   

000000000000bbba <vEventGroupSetNumber>:
    bbba:	f3 0f 1e fa          	endbr64 
    bbbe:	55                   	push   %rbp
    bbbf:	48 89 e5             	mov    %rsp,%rbp
    bbc2:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
    bbc6:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
    bbca:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    bbce:	48 8b 55 f0          	mov    -0x10(%rbp),%rdx
    bbd2:	48 89 50 30          	mov    %rdx,0x30(%rax)
    bbd6:	90                   	nop
    bbd7:	5d                   	pop    %rbp
    bbd8:	c3                   	retq   

000000000000bbd9 <xTaskCreateStatic>:
    bbd9:	f3 0f 1e fa          	endbr64 
    bbdd:	55                   	push   %rbp
    bbde:	48 89 e5             	mov    %rsp,%rbp
    bbe1:	48 83 ec 60          	sub    $0x60,%rsp
    bbe5:	48 89 7d d8          	mov    %rdi,-0x28(%rbp)
    bbe9:	48 89 75 d0          	mov    %rsi,-0x30(%rbp)
    bbed:	89 55 cc             	mov    %edx,-0x34(%rbp)
    bbf0:	48 89 4d c0          	mov    %rcx,-0x40(%rbp)
    bbf4:	4c 89 45 b8          	mov    %r8,-0x48(%rbp)
    bbf8:	4c 89 4d b0          	mov    %r9,-0x50(%rbp)
    bbfc:	48 8b 45 10          	mov    0x10(%rbp),%rax
    bc00:	48 89 45 a8          	mov    %rax,-0x58(%rbp)
    bc04:	64 48 8b 04 25 28 00 	mov    %fs:0x28,%rax
    bc0b:	00 00 
    bc0d:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
    bc11:	31 c0                	xor    %eax,%eax
    bc13:	48 83 7d b0 00       	cmpq   $0x0,-0x50(%rbp)
    bc18:	75 11                	jne    bc2b <xTaskCreateStatic+0x52>
    bc1a:	be 4a 02 00 00       	mov    $0x24a,%esi
    bc1f:	48 8d 3d ba bc 01 00 	lea    0x1bcba(%rip),%rdi        # 278e0 <_IO_stdin_used+0x8e0>
    bc26:	e8 e1 80 ff ff       	callq  3d0c <vAssertCalled>
    bc2b:	48 83 7d a8 00       	cmpq   $0x0,-0x58(%rbp)
    bc30:	75 11                	jne    bc43 <xTaskCreateStatic+0x6a>
    bc32:	be 4b 02 00 00       	mov    $0x24b,%esi
    bc37:	48 8d 3d a2 bc 01 00 	lea    0x1bca2(%rip),%rdi        # 278e0 <_IO_stdin_used+0x8e0>
    bc3e:	e8 c9 80 ff ff       	callq  3d0c <vAssertCalled>
    bc43:	48 c7 45 e8 b0 00 00 	movq   $0xb0,-0x18(%rbp)
    bc4a:	00 
    bc4b:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
    bc4f:	48 3d b0 00 00 00    	cmp    $0xb0,%rax
    bc55:	74 11                	je     bc68 <xTaskCreateStatic+0x8f>
    bc57:	be 53 02 00 00       	mov    $0x253,%esi
    bc5c:	48 8d 3d 7d bc 01 00 	lea    0x1bc7d(%rip),%rdi        # 278e0 <_IO_stdin_used+0x8e0>
    bc63:	e8 a4 80 ff ff       	callq  3d0c <vAssertCalled>
    bc68:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
    bc6c:	48 83 7d a8 00       	cmpq   $0x0,-0x58(%rbp)
    bc71:	74 62                	je     bcd5 <xTaskCreateStatic+0xfc>
    bc73:	48 83 7d b0 00       	cmpq   $0x0,-0x50(%rbp)
    bc78:	74 5b                	je     bcd5 <xTaskCreateStatic+0xfc>
    bc7a:	48 8b 45 a8          	mov    -0x58(%rbp),%rax
    bc7e:	48 89 45 f0          	mov    %rax,-0x10(%rbp)
    bc82:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
    bc86:	48 8b 55 b0          	mov    -0x50(%rbp),%rdx
    bc8a:	48 89 50 60          	mov    %rdx,0x60(%rax)
    bc8e:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
    bc92:	c6 80 a9 00 00 00 02 	movb   $0x2,0xa9(%rax)
    bc99:	4c 8d 45 e0          	lea    -0x20(%rbp),%r8
    bc9d:	48 8b 7d b8          	mov    -0x48(%rbp),%rdi
    bca1:	48 8b 4d c0          	mov    -0x40(%rbp),%rcx
    bca5:	8b 55 cc             	mov    -0x34(%rbp),%edx
    bca8:	48 8b 75 d0          	mov    -0x30(%rbp),%rsi
    bcac:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
    bcb0:	6a 00                	pushq  $0x0
    bcb2:	ff 75 f0             	pushq  -0x10(%rbp)
    bcb5:	4d 89 c1             	mov    %r8,%r9
    bcb8:	49 89 f8             	mov    %rdi,%r8
    bcbb:	48 89 c7             	mov    %rax,%rdi
    bcbe:	e8 0e 01 00 00       	callq  bdd1 <prvInitialiseNewTask>
    bcc3:	48 83 c4 10          	add    $0x10,%rsp
    bcc7:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
    bccb:	48 89 c7             	mov    %rax,%rdi
    bcce:	e8 1d 03 00 00       	callq  bff0 <prvAddNewTaskToReadyList>
    bcd3:	eb 08                	jmp    bcdd <xTaskCreateStatic+0x104>
    bcd5:	48 c7 45 e0 00 00 00 	movq   $0x0,-0x20(%rbp)
    bcdc:	00 
    bcdd:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
    bce1:	48 8b 4d f8          	mov    -0x8(%rbp),%rcx
    bce5:	64 48 33 0c 25 28 00 	xor    %fs:0x28,%rcx
    bcec:	00 00 
    bcee:	74 05                	je     bcf5 <xTaskCreateStatic+0x11c>
    bcf0:	e8 db 67 ff ff       	callq  24d0 <__stack_chk_fail@plt>
    bcf5:	c9                   	leaveq 
    bcf6:	c3                   	retq   

000000000000bcf7 <xTaskCreate>:
    bcf7:	f3 0f 1e fa          	endbr64 
    bcfb:	55                   	push   %rbp
    bcfc:	48 89 e5             	mov    %rsp,%rbp
    bcff:	48 83 ec 50          	sub    $0x50,%rsp
    bd03:	48 89 7d d8          	mov    %rdi,-0x28(%rbp)
    bd07:	48 89 75 d0          	mov    %rsi,-0x30(%rbp)
    bd0b:	89 55 cc             	mov    %edx,-0x34(%rbp)
    bd0e:	48 89 4d c0          	mov    %rcx,-0x40(%rbp)
    bd12:	4c 89 45 b8          	mov    %r8,-0x48(%rbp)
    bd16:	4c 89 4d b0          	mov    %r9,-0x50(%rbp)
    bd1a:	8b 45 cc             	mov    -0x34(%rbp),%eax
    bd1d:	48 c1 e0 03          	shl    $0x3,%rax
    bd21:	48 89 c7             	mov    %rax,%rdi
    bd24:	e8 57 69 00 00       	callq  12680 <pvPortMalloc>
    bd29:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
    bd2d:	48 83 7d f8 00       	cmpq   $0x0,-0x8(%rbp)
    bd32:	74 31                	je     bd65 <xTaskCreate+0x6e>
    bd34:	bf b0 00 00 00       	mov    $0xb0,%edi
    bd39:	e8 42 69 00 00       	callq  12680 <pvPortMalloc>
    bd3e:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
    bd42:	48 83 7d e8 00       	cmpq   $0x0,-0x18(%rbp)
    bd47:	74 0e                	je     bd57 <xTaskCreate+0x60>
    bd49:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
    bd4d:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
    bd51:	48 89 50 60          	mov    %rdx,0x60(%rax)
    bd55:	eb 16                	jmp    bd6d <xTaskCreate+0x76>
    bd57:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    bd5b:	48 89 c7             	mov    %rax,%rdi
    bd5e:	e8 3d 6a 00 00       	callq  127a0 <vPortFree>
    bd63:	eb 08                	jmp    bd6d <xTaskCreate+0x76>
    bd65:	48 c7 45 e8 00 00 00 	movq   $0x0,-0x18(%rbp)
    bd6c:	00 
    bd6d:	48 83 7d e8 00       	cmpq   $0x0,-0x18(%rbp)
    bd72:	74 4f                	je     bdc3 <xTaskCreate+0xcc>
    bd74:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
    bd78:	c6 80 a9 00 00 00 00 	movb   $0x0,0xa9(%rax)
    bd7f:	4c 8b 45 b0          	mov    -0x50(%rbp),%r8
    bd83:	48 8b 7d b8          	mov    -0x48(%rbp),%rdi
    bd87:	48 8b 4d c0          	mov    -0x40(%rbp),%rcx
    bd8b:	8b 55 cc             	mov    -0x34(%rbp),%edx
    bd8e:	48 8b 75 d0          	mov    -0x30(%rbp),%rsi
    bd92:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
    bd96:	6a 00                	pushq  $0x0
    bd98:	ff 75 e8             	pushq  -0x18(%rbp)
    bd9b:	4d 89 c1             	mov    %r8,%r9
    bd9e:	49 89 f8             	mov    %rdi,%r8
    bda1:	48 89 c7             	mov    %rax,%rdi
    bda4:	e8 28 00 00 00       	callq  bdd1 <prvInitialiseNewTask>
    bda9:	48 83 c4 10          	add    $0x10,%rsp
    bdad:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
    bdb1:	48 89 c7             	mov    %rax,%rdi
    bdb4:	e8 37 02 00 00       	callq  bff0 <prvAddNewTaskToReadyList>
    bdb9:	48 c7 45 f0 01 00 00 	movq   $0x1,-0x10(%rbp)
    bdc0:	00 
    bdc1:	eb 08                	jmp    bdcb <xTaskCreate+0xd4>
    bdc3:	48 c7 45 f0 ff ff ff 	movq   $0xffffffffffffffff,-0x10(%rbp)
    bdca:	ff 
    bdcb:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
    bdcf:	c9                   	leaveq 
    bdd0:	c3                   	retq   

000000000000bdd1 <prvInitialiseNewTask>:
    bdd1:	f3 0f 1e fa          	endbr64 
    bdd5:	55                   	push   %rbp
    bdd6:	48 89 e5             	mov    %rsp,%rbp
    bdd9:	48 83 ec 40          	sub    $0x40,%rsp
    bddd:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
    bde1:	48 89 75 e0          	mov    %rsi,-0x20(%rbp)
    bde5:	89 55 dc             	mov    %edx,-0x24(%rbp)
    bde8:	48 89 4d d0          	mov    %rcx,-0x30(%rbp)
    bdec:	4c 89 45 c8          	mov    %r8,-0x38(%rbp)
    bdf0:	4c 89 4d c0          	mov    %r9,-0x40(%rbp)
    bdf4:	8b 45 dc             	mov    -0x24(%rbp),%eax
    bdf7:	48 8d 14 c5 00 00 00 	lea    0x0(,%rax,8),%rdx
    bdfe:	00 
    bdff:	48 8b 45 10          	mov    0x10(%rbp),%rax
    be03:	48 8b 40 60          	mov    0x60(%rax),%rax
    be07:	be a5 00 00 00       	mov    $0xa5,%esi
    be0c:	48 89 c7             	mov    %rax,%rdi
    be0f:	e8 fc 66 ff ff       	callq  2510 <memset@plt>
    be14:	48 8b 45 10          	mov    0x10(%rbp),%rax
    be18:	48 8b 40 60          	mov    0x60(%rax),%rax
    be1c:	8b 55 dc             	mov    -0x24(%rbp),%edx
    be1f:	83 ea 01             	sub    $0x1,%edx
    be22:	89 d2                	mov    %edx,%edx
    be24:	48 c1 e2 03          	shl    $0x3,%rdx
    be28:	48 01 d0             	add    %rdx,%rax
    be2b:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
    be2f:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    be33:	48 83 e0 f8          	and    $0xfffffffffffffff8,%rax
    be37:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
    be3b:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    be3f:	83 e0 07             	and    $0x7,%eax
    be42:	48 85 c0             	test   %rax,%rax
    be45:	74 11                	je     be58 <prvInitialiseNewTask+0x87>
    be47:	be 60 03 00 00       	mov    $0x360,%esi
    be4c:	48 8d 3d 8d ba 01 00 	lea    0x1ba8d(%rip),%rdi        # 278e0 <_IO_stdin_used+0x8e0>
    be53:	e8 b4 7e ff ff       	callq  3d0c <vAssertCalled>
    be58:	48 83 7d e0 00       	cmpq   $0x0,-0x20(%rbp)
    be5d:	74 54                	je     beb3 <prvInitialiseNewTask+0xe2>
    be5f:	48 c7 45 f0 00 00 00 	movq   $0x0,-0x10(%rbp)
    be66:	00 
    be67:	eb 36                	jmp    be9f <prvInitialiseNewTask+0xce>
    be69:	48 8b 55 e0          	mov    -0x20(%rbp),%rdx
    be6d:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
    be71:	48 01 d0             	add    %rdx,%rax
    be74:	0f b6 00             	movzbl (%rax),%eax
    be77:	48 8b 4d 10          	mov    0x10(%rbp),%rcx
    be7b:	48 8b 55 f0          	mov    -0x10(%rbp),%rdx
    be7f:	48 01 ca             	add    %rcx,%rdx
    be82:	48 83 c2 68          	add    $0x68,%rdx
    be86:	88 02                	mov    %al,(%rdx)
    be88:	48 8b 55 e0          	mov    -0x20(%rbp),%rdx
    be8c:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
    be90:	48 01 d0             	add    %rdx,%rax
    be93:	0f b6 00             	movzbl (%rax),%eax
    be96:	84 c0                	test   %al,%al
    be98:	74 0e                	je     bea8 <prvInitialiseNewTask+0xd7>
    be9a:	48 83 45 f0 01       	addq   $0x1,-0x10(%rbp)
    be9f:	48 83 7d f0 0b       	cmpq   $0xb,-0x10(%rbp)
    bea4:	76 c3                	jbe    be69 <prvInitialiseNewTask+0x98>
    bea6:	eb 01                	jmp    bea9 <prvInitialiseNewTask+0xd8>
    bea8:	90                   	nop
    bea9:	48 8b 45 10          	mov    0x10(%rbp),%rax
    bead:	c6 40 73 00          	movb   $0x0,0x73(%rax)
    beb1:	eb 08                	jmp    bebb <prvInitialiseNewTask+0xea>
    beb3:	48 8b 45 10          	mov    0x10(%rbp),%rax
    beb7:	c6 40 68 00          	movb   $0x0,0x68(%rax)
    bebb:	48 83 7d c8 06       	cmpq   $0x6,-0x38(%rbp)
    bec0:	76 11                	jbe    bed3 <prvInitialiseNewTask+0x102>
    bec2:	be 97 03 00 00       	mov    $0x397,%esi
    bec7:	48 8d 3d 12 ba 01 00 	lea    0x1ba12(%rip),%rdi        # 278e0 <_IO_stdin_used+0x8e0>
    bece:	e8 39 7e ff ff       	callq  3d0c <vAssertCalled>
    bed3:	48 83 7d c8 06       	cmpq   $0x6,-0x38(%rbp)
    bed8:	76 08                	jbe    bee2 <prvInitialiseNewTask+0x111>
    beda:	48 c7 45 c8 06 00 00 	movq   $0x6,-0x38(%rbp)
    bee1:	00 
    bee2:	48 8b 45 10          	mov    0x10(%rbp),%rax
    bee6:	48 8b 55 c8          	mov    -0x38(%rbp),%rdx
    beea:	48 89 50 58          	mov    %rdx,0x58(%rax)
    beee:	48 8b 45 10          	mov    0x10(%rbp),%rax
    bef2:	48 8b 55 c8          	mov    -0x38(%rbp),%rdx
    bef6:	48 89 90 88 00 00 00 	mov    %rdx,0x88(%rax)
    befd:	48 8b 45 10          	mov    0x10(%rbp),%rax
    bf01:	48 c7 80 90 00 00 00 	movq   $0x0,0x90(%rax)
    bf08:	00 00 00 00 
    bf0c:	48 8b 45 10          	mov    0x10(%rbp),%rax
    bf10:	48 83 c0 08          	add    $0x8,%rax
    bf14:	48 89 c7             	mov    %rax,%rdi
    bf17:	e8 7d cd ff ff       	callq  8c99 <vListInitialiseItem>
    bf1c:	48 8b 45 10          	mov    0x10(%rbp),%rax
    bf20:	48 83 c0 30          	add    $0x30,%rax
    bf24:	48 89 c7             	mov    %rax,%rdi
    bf27:	e8 6d cd ff ff       	callq  8c99 <vListInitialiseItem>
    bf2c:	48 8b 45 10          	mov    0x10(%rbp),%rax
    bf30:	48 8b 55 10          	mov    0x10(%rbp),%rdx
    bf34:	48 89 50 20          	mov    %rdx,0x20(%rax)
    bf38:	b8 07 00 00 00       	mov    $0x7,%eax
    bf3d:	48 2b 45 c8          	sub    -0x38(%rbp),%rax
    bf41:	48 89 c2             	mov    %rax,%rdx
    bf44:	48 8b 45 10          	mov    0x10(%rbp),%rax
    bf48:	48 89 50 30          	mov    %rdx,0x30(%rax)
    bf4c:	48 8b 45 10          	mov    0x10(%rbp),%rax
    bf50:	48 8b 55 10          	mov    0x10(%rbp),%rdx
    bf54:	48 89 50 48          	mov    %rdx,0x48(%rax)
    bf58:	48 8b 45 10          	mov    0x10(%rbp),%rax
    bf5c:	48 c7 80 98 00 00 00 	movq   $0x0,0x98(%rax)
    bf63:	00 00 00 00 
    bf67:	48 8b 45 10          	mov    0x10(%rbp),%rax
    bf6b:	c7 80 a0 00 00 00 00 	movl   $0x0,0xa0(%rax)
    bf72:	00 00 00 
    bf75:	48 8b 45 10          	mov    0x10(%rbp),%rax
    bf79:	48 05 a4 00 00 00    	add    $0xa4,%rax
    bf7f:	ba 04 00 00 00       	mov    $0x4,%edx
    bf84:	be 00 00 00 00       	mov    $0x0,%esi
    bf89:	48 89 c7             	mov    %rax,%rdi
    bf8c:	e8 7f 65 ff ff       	callq  2510 <memset@plt>
    bf91:	48 8b 45 10          	mov    0x10(%rbp),%rax
    bf95:	48 05 a8 00 00 00    	add    $0xa8,%rax
    bf9b:	ba 01 00 00 00       	mov    $0x1,%edx
    bfa0:	be 00 00 00 00       	mov    $0x0,%esi
    bfa5:	48 89 c7             	mov    %rax,%rdi
    bfa8:	e8 63 65 ff ff       	callq  2510 <memset@plt>
    bfad:	48 8b 45 10          	mov    0x10(%rbp),%rax
    bfb1:	c6 80 aa 00 00 00 00 	movb   $0x0,0xaa(%rax)
    bfb8:	48 8b 45 10          	mov    0x10(%rbp),%rax
    bfbc:	48 8b 70 60          	mov    0x60(%rax),%rsi
    bfc0:	48 8b 4d d0          	mov    -0x30(%rbp),%rcx
    bfc4:	48 8b 55 e8          	mov    -0x18(%rbp),%rdx
    bfc8:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    bfcc:	48 89 c7             	mov    %rax,%rdi
    bfcf:	e8 ed 6a 00 00       	callq  12ac1 <pxPortInitialiseStack>
    bfd4:	48 8b 55 10          	mov    0x10(%rbp),%rdx
    bfd8:	48 89 02             	mov    %rax,(%rdx)
    bfdb:	48 83 7d c0 00       	cmpq   $0x0,-0x40(%rbp)
    bfe0:	74 0b                	je     bfed <prvInitialiseNewTask+0x21c>
    bfe2:	48 8b 45 c0          	mov    -0x40(%rbp),%rax
    bfe6:	48 8b 55 10          	mov    0x10(%rbp),%rdx
    bfea:	48 89 10             	mov    %rdx,(%rax)
    bfed:	90                   	nop
    bfee:	c9                   	leaveq 
    bfef:	c3                   	retq   

000000000000bff0 <prvAddNewTaskToReadyList>:
    bff0:	f3 0f 1e fa          	endbr64 
    bff4:	55                   	push   %rbp
    bff5:	48 89 e5             	mov    %rsp,%rbp
    bff8:	53                   	push   %rbx
    bff9:	48 83 ec 28          	sub    $0x28,%rsp
    bffd:	48 89 7d d8          	mov    %rdi,-0x28(%rbp)
    c001:	e8 c9 6d 00 00       	callq  12dcf <vPortEnterCritical>
    c006:	48 8b 05 db 57 02 00 	mov    0x257db(%rip),%rax        # 317e8 <uxCurrentNumberOfTasks>
    c00d:	48 83 c0 01          	add    $0x1,%rax
    c011:	48 89 05 d0 57 02 00 	mov    %rax,0x257d0(%rip)        # 317e8 <uxCurrentNumberOfTasks>
    c018:	48 8b 05 61 55 02 00 	mov    0x25561(%rip),%rax        # 31580 <pxCurrentTCB>
    c01f:	48 85 c0             	test   %rax,%rax
    c022:	75 1f                	jne    c043 <prvAddNewTaskToReadyList+0x53>
    c024:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
    c028:	48 89 05 51 55 02 00 	mov    %rax,0x25551(%rip)        # 31580 <pxCurrentTCB>
    c02f:	48 8b 05 b2 57 02 00 	mov    0x257b2(%rip),%rax        # 317e8 <uxCurrentNumberOfTasks>
    c036:	48 83 f8 01          	cmp    $0x1,%rax
    c03a:	75 36                	jne    c072 <prvAddNewTaskToReadyList+0x82>
    c03c:	e8 39 31 00 00       	callq  f17a <prvInitialiseTaskLists>
    c041:	eb 2f                	jmp    c072 <prvAddNewTaskToReadyList+0x82>
    c043:	48 8b 05 b6 57 02 00 	mov    0x257b6(%rip),%rax        # 31800 <xSchedulerRunning>
    c04a:	48 85 c0             	test   %rax,%rax
    c04d:	75 23                	jne    c072 <prvAddNewTaskToReadyList+0x82>
    c04f:	48 8b 05 2a 55 02 00 	mov    0x2552a(%rip),%rax        # 31580 <pxCurrentTCB>
    c056:	48 8b 50 58          	mov    0x58(%rax),%rdx
    c05a:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
    c05e:	48 8b 40 58          	mov    0x58(%rax),%rax
    c062:	48 39 c2             	cmp    %rax,%rdx
    c065:	77 0b                	ja     c072 <prvAddNewTaskToReadyList+0x82>
    c067:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
    c06b:	48 89 05 0e 55 02 00 	mov    %rax,0x2550e(%rip)        # 31580 <pxCurrentTCB>
    c072:	48 8b 05 a7 57 02 00 	mov    0x257a7(%rip),%rax        # 31820 <uxTaskNumber>
    c079:	48 83 c0 01          	add    $0x1,%rax
    c07d:	48 89 05 9c 57 02 00 	mov    %rax,0x2579c(%rip)        # 31820 <uxTaskNumber>
    c084:	48 8b 15 95 57 02 00 	mov    0x25795(%rip),%rdx        # 31820 <uxTaskNumber>
    c08b:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
    c08f:	48 89 50 78          	mov    %rdx,0x78(%rax)
    c093:	48 83 7d d8 00       	cmpq   $0x0,-0x28(%rbp)
    c098:	0f 84 d6 00 00 00    	je     c174 <prvAddNewTaskToReadyList+0x184>
    c09e:	bf 03 00 00 00       	mov    $0x3,%edi
    c0a3:	e8 7b 9d 01 00       	callq  25e23 <prvTraceGetObjectHandle>
    c0a8:	0f b6 d0             	movzbl %al,%edx
    c0ab:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
    c0af:	89 d6                	mov    %edx,%esi
    c0b1:	48 89 c7             	mov    %rax,%rdi
    c0b4:	e8 c4 70 01 00       	callq  2317d <prvTraceSetTaskNumberLow16>
    c0b9:	0f b7 05 1e 50 02 00 	movzwl 0x2501e(%rip),%eax        # 310de <CurrentFilterGroup>
    c0c0:	0f b7 d0             	movzwl %ax,%edx
    c0c3:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
    c0c7:	89 d6                	mov    %edx,%esi
    c0c9:	48 89 c7             	mov    %rax,%rdi
    c0cc:	e8 ef 70 01 00       	callq  231c0 <prvTraceSetTaskNumberHigh16>
    c0d1:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
    c0d5:	48 8d 58 68          	lea    0x68(%rax),%rbx
    c0d9:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
    c0dd:	48 89 c7             	mov    %rax,%rdi
    c0e0:	e8 58 70 01 00       	callq  2313d <prvTraceGetTaskNumberLow16>
    c0e5:	0f b6 c0             	movzbl %al,%eax
    c0e8:	48 89 da             	mov    %rbx,%rdx
    c0eb:	89 c6                	mov    %eax,%esi
    c0ed:	bf 03 00 00 00       	mov    $0x3,%edi
    c0f2:	e8 b4 a0 01 00       	callq  261ab <prvTraceSetObjectName>
    c0f7:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
    c0fb:	48 8b 40 58          	mov    0x58(%rax),%rax
    c0ff:	0f b6 d8             	movzbl %al,%ebx
    c102:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
    c106:	48 89 c7             	mov    %rax,%rdi
    c109:	e8 2f 70 01 00       	callq  2313d <prvTraceGetTaskNumberLow16>
    c10e:	0f b6 c0             	movzbl %al,%eax
    c111:	89 da                	mov    %ebx,%edx
    c113:	89 c6                	mov    %eax,%esi
    c115:	bf 03 00 00 00       	mov    $0x3,%edi
    c11a:	e8 2d 96 01 00       	callq  2574c <prvTraceSetPriorityProperty>
    c11f:	e8 38 75 01 00       	callq  2365c <prvTraceGetCurrentTaskHandle>
    c124:	48 89 c7             	mov    %rax,%rdi
    c127:	e8 2f 70 01 00       	callq  2315b <prvTraceGetTaskNumberHigh16>
    c12c:	0f b7 15 a9 4f 02 00 	movzwl 0x24fa9(%rip),%edx        # 310dc <CurrentFilterMask>
    c133:	21 d0                	and    %edx,%eax
    c135:	66 85 c0             	test   %ax,%ax
    c138:	74 3a                	je     c174 <prvAddNewTaskToReadyList+0x184>
    c13a:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
    c13e:	48 89 c7             	mov    %rax,%rdi
    c141:	e8 15 70 01 00       	callq  2315b <prvTraceGetTaskNumberHigh16>
    c146:	0f b7 15 8f 4f 02 00 	movzwl 0x24f8f(%rip),%edx        # 310dc <CurrentFilterMask>
    c14d:	21 d0                	and    %edx,%eax
    c14f:	66 85 c0             	test   %ax,%ax
    c152:	74 20                	je     c174 <prvAddNewTaskToReadyList+0x184>
    c154:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
    c158:	48 89 c7             	mov    %rax,%rdi
    c15b:	e8 dd 6f 01 00       	callq  2313d <prvTraceGetTaskNumberLow16>
    c160:	0f b6 c0             	movzbl %al,%eax
    c163:	89 c2                	mov    %eax,%edx
    c165:	be 03 00 00 00       	mov    $0x3,%esi
    c16a:	bf 1b 00 00 00       	mov    $0x1b,%edi
    c16f:	e8 de 8e 01 00       	callq  25052 <prvTraceStoreKernelCall>
    c174:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
    c178:	48 89 c7             	mov    %rax,%rdi
    c17b:	e8 db 6f 01 00       	callq  2315b <prvTraceGetTaskNumberHigh16>
    c180:	0f b7 15 55 4f 02 00 	movzwl 0x24f55(%rip),%edx        # 310dc <CurrentFilterMask>
    c187:	21 d0                	and    %edx,%eax
    c189:	66 85 c0             	test   %ax,%ax
    c18c:	74 16                	je     c1a4 <prvAddNewTaskToReadyList+0x1b4>
    c18e:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
    c192:	48 89 c7             	mov    %rax,%rdi
    c195:	e8 a3 6f 01 00       	callq  2313d <prvTraceGetTaskNumberLow16>
    c19a:	0f b6 c0             	movzbl %al,%eax
    c19d:	89 c7                	mov    %eax,%edi
    c19f:	e8 ca 8b 01 00       	callq  24d6e <prvTraceStoreTaskReady>
    c1a4:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
    c1a8:	48 8b 50 58          	mov    0x58(%rax),%rdx
    c1ac:	48 8b 05 45 56 02 00 	mov    0x25645(%rip),%rax        # 317f8 <uxTopReadyPriority>
    c1b3:	48 39 c2             	cmp    %rax,%rdx
    c1b6:	76 0f                	jbe    c1c7 <prvAddNewTaskToReadyList+0x1d7>
    c1b8:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
    c1bc:	48 8b 40 58          	mov    0x58(%rax),%rax
    c1c0:	48 89 05 31 56 02 00 	mov    %rax,0x25631(%rip)        # 317f8 <uxTopReadyPriority>
    c1c7:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
    c1cb:	48 8b 50 58          	mov    0x58(%rax),%rdx
    c1cf:	48 89 d0             	mov    %rdx,%rax
    c1d2:	48 c1 e0 02          	shl    $0x2,%rax
    c1d6:	48 01 d0             	add    %rdx,%rax
    c1d9:	48 c1 e0 03          	shl    $0x3,%rax
    c1dd:	48 89 c2             	mov    %rax,%rdx
    c1e0:	48 8d 05 c1 53 02 00 	lea    0x253c1(%rip),%rax        # 315a8 <pxReadyTasksLists+0x8>
    c1e7:	48 8b 04 02          	mov    (%rdx,%rax,1),%rax
    c1eb:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
    c1ef:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
    c1f3:	48 8b 55 e8          	mov    -0x18(%rbp),%rdx
    c1f7:	48 89 50 10          	mov    %rdx,0x10(%rax)
    c1fb:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
    c1ff:	48 8b 50 10          	mov    0x10(%rax),%rdx
    c203:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
    c207:	48 89 50 18          	mov    %rdx,0x18(%rax)
    c20b:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
    c20f:	48 8b 40 10          	mov    0x10(%rax),%rax
    c213:	48 8b 55 d8          	mov    -0x28(%rbp),%rdx
    c217:	48 83 c2 08          	add    $0x8,%rdx
    c21b:	48 89 50 08          	mov    %rdx,0x8(%rax)
    c21f:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
    c223:	48 8d 50 08          	lea    0x8(%rax),%rdx
    c227:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
    c22b:	48 89 50 10          	mov    %rdx,0x10(%rax)
    c22f:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
    c233:	48 8b 50 58          	mov    0x58(%rax),%rdx
    c237:	48 89 d0             	mov    %rdx,%rax
    c23a:	48 c1 e0 02          	shl    $0x2,%rax
    c23e:	48 01 d0             	add    %rdx,%rax
    c241:	48 c1 e0 03          	shl    $0x3,%rax
    c245:	48 8d 15 54 53 02 00 	lea    0x25354(%rip),%rdx        # 315a0 <pxReadyTasksLists>
    c24c:	48 01 c2             	add    %rax,%rdx
    c24f:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
    c253:	48 89 50 28          	mov    %rdx,0x28(%rax)
    c257:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
    c25b:	48 8b 50 58          	mov    0x58(%rax),%rdx
    c25f:	48 89 d0             	mov    %rdx,%rax
    c262:	48 c1 e0 02          	shl    $0x2,%rax
    c266:	48 01 d0             	add    %rdx,%rax
    c269:	48 c1 e0 03          	shl    $0x3,%rax
    c26d:	48 89 c1             	mov    %rax,%rcx
    c270:	48 8d 05 29 53 02 00 	lea    0x25329(%rip),%rax        # 315a0 <pxReadyTasksLists>
    c277:	48 8b 04 01          	mov    (%rcx,%rax,1),%rax
    c27b:	48 8d 48 01          	lea    0x1(%rax),%rcx
    c27f:	48 89 d0             	mov    %rdx,%rax
    c282:	48 c1 e0 02          	shl    $0x2,%rax
    c286:	48 01 d0             	add    %rdx,%rax
    c289:	48 c1 e0 03          	shl    $0x3,%rax
    c28d:	48 89 c2             	mov    %rax,%rdx
    c290:	48 8d 05 09 53 02 00 	lea    0x25309(%rip),%rax        # 315a0 <pxReadyTasksLists>
    c297:	48 89 0c 02          	mov    %rcx,(%rdx,%rax,1)
    c29b:	e8 5d 6b 00 00       	callq  12dfd <vPortExitCritical>
    c2a0:	48 8b 05 59 55 02 00 	mov    0x25559(%rip),%rax        # 31800 <xSchedulerRunning>
    c2a7:	48 85 c0             	test   %rax,%rax
    c2aa:	74 1d                	je     c2c9 <prvAddNewTaskToReadyList+0x2d9>
    c2ac:	48 8b 05 cd 52 02 00 	mov    0x252cd(%rip),%rax        # 31580 <pxCurrentTCB>
    c2b3:	48 8b 50 58          	mov    0x58(%rax),%rdx
    c2b7:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
    c2bb:	48 8b 40 58          	mov    0x58(%rax),%rax
    c2bf:	48 39 c2             	cmp    %rax,%rdx
    c2c2:	73 05                	jae    c2c9 <prvAddNewTaskToReadyList+0x2d9>
    c2c4:	e8 ab 6b 00 00       	callq  12e74 <vPortYield>
    c2c9:	90                   	nop
    c2ca:	48 83 c4 28          	add    $0x28,%rsp
    c2ce:	5b                   	pop    %rbx
    c2cf:	5d                   	pop    %rbp
    c2d0:	c3                   	retq   

000000000000c2d1 <vTaskDelete>:
    c2d1:	f3 0f 1e fa          	endbr64 
    c2d5:	55                   	push   %rbp
    c2d6:	48 89 e5             	mov    %rsp,%rbp
    c2d9:	53                   	push   %rbx
    c2da:	48 83 ec 28          	sub    $0x28,%rsp
    c2de:	48 89 7d d8          	mov    %rdi,-0x28(%rbp)
    c2e2:	e8 e8 6a 00 00       	callq  12dcf <vPortEnterCritical>
    c2e7:	48 83 7d d8 00       	cmpq   $0x0,-0x28(%rbp)
    c2ec:	75 09                	jne    c2f7 <vTaskDelete+0x26>
    c2ee:	48 8b 05 8b 52 02 00 	mov    0x2528b(%rip),%rax        # 31580 <pxCurrentTCB>
    c2f5:	eb 04                	jmp    c2fb <vTaskDelete+0x2a>
    c2f7:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
    c2fb:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
    c2ff:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
    c303:	48 83 c0 08          	add    $0x8,%rax
    c307:	48 89 c7             	mov    %rax,%rdi
    c30a:	e8 ce ca ff ff       	callq  8ddd <uxListRemove>
    c30f:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
    c313:	48 8b 40 50          	mov    0x50(%rax),%rax
    c317:	48 85 c0             	test   %rax,%rax
    c31a:	74 10                	je     c32c <vTaskDelete+0x5b>
    c31c:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
    c320:	48 83 c0 30          	add    $0x30,%rax
    c324:	48 89 c7             	mov    %rax,%rdi
    c327:	e8 b1 ca ff ff       	callq  8ddd <uxListRemove>
    c32c:	48 8b 05 ed 54 02 00 	mov    0x254ed(%rip),%rax        # 31820 <uxTaskNumber>
    c333:	48 83 c0 01          	add    $0x1,%rax
    c337:	48 89 05 e2 54 02 00 	mov    %rax,0x254e2(%rip)        # 31820 <uxTaskNumber>
    c33e:	48 8b 05 3b 52 02 00 	mov    0x2523b(%rip),%rax        # 31580 <pxCurrentTCB>
    c345:	48 39 45 e8          	cmp    %rax,-0x18(%rbp)
    c349:	0f 85 43 01 00 00    	jne    c492 <vTaskDelete+0x1c1>
    c34f:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
    c353:	48 83 c0 08          	add    $0x8,%rax
    c357:	48 89 c6             	mov    %rax,%rsi
    c35a:	48 8d 3d 1f 54 02 00 	lea    0x2541f(%rip),%rdi        # 31780 <xTasksWaitingTermination>
    c361:	e8 4e c9 ff ff       	callq  8cb4 <vListInsertEnd>
    c366:	48 8b 05 3b 54 02 00 	mov    0x2543b(%rip),%rax        # 317a8 <uxDeletedTasksWaitingCleanUp>
    c36d:	48 83 c0 01          	add    $0x1,%rax
    c371:	48 89 05 30 54 02 00 	mov    %rax,0x25430(%rip)        # 317a8 <uxDeletedTasksWaitingCleanUp>
    c378:	e8 52 6a 00 00       	callq  12dcf <vPortEnterCritical>
    c37d:	e8 da 72 01 00       	callq  2365c <prvTraceGetCurrentTaskHandle>
    c382:	48 89 c7             	mov    %rax,%rdi
    c385:	e8 d1 6d 01 00       	callq  2315b <prvTraceGetTaskNumberHigh16>
    c38a:	0f b7 15 4b 4d 02 00 	movzwl 0x24d4b(%rip),%edx        # 310dc <CurrentFilterMask>
    c391:	21 d0                	and    %edx,%eax
    c393:	66 85 c0             	test   %ax,%ax
    c396:	74 3a                	je     c3d2 <vTaskDelete+0x101>
    c398:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
    c39c:	48 89 c7             	mov    %rax,%rdi
    c39f:	e8 b7 6d 01 00       	callq  2315b <prvTraceGetTaskNumberHigh16>
    c3a4:	0f b7 15 31 4d 02 00 	movzwl 0x24d31(%rip),%edx        # 310dc <CurrentFilterMask>
    c3ab:	21 d0                	and    %edx,%eax
    c3ad:	66 85 c0             	test   %ax,%ax
    c3b0:	74 20                	je     c3d2 <vTaskDelete+0x101>
    c3b2:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
    c3b6:	48 89 c7             	mov    %rax,%rdi
    c3b9:	e8 7f 6d 01 00       	callq  2313d <prvTraceGetTaskNumberLow16>
    c3be:	0f b6 c0             	movzbl %al,%eax
    c3c1:	89 c2                	mov    %eax,%edx
    c3c3:	be 03 00 00 00       	mov    $0x3,%esi
    c3c8:	bf 83 00 00 00       	mov    $0x83,%edi
    c3cd:	e8 80 8c 01 00       	callq  25052 <prvTraceStoreKernelCall>
    c3d2:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
    c3d6:	48 89 c7             	mov    %rax,%rdi
    c3d9:	e8 5f 6d 01 00       	callq  2313d <prvTraceGetTaskNumberLow16>
    c3de:	0f b6 c0             	movzbl %al,%eax
    c3e1:	ba 03 00 00 00       	mov    $0x3,%edx
    c3e6:	89 c6                	mov    %eax,%esi
    c3e8:	bf 0b 00 00 00       	mov    $0xb,%edi
    c3ed:	e8 3a 91 01 00       	callq  2552c <prvTraceStoreObjectNameOnCloseEvent>
    c3f2:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
    c3f6:	48 89 c7             	mov    %rax,%rdi
    c3f9:	e8 3f 6d 01 00       	callq  2313d <prvTraceGetTaskNumberLow16>
    c3fe:	0f b6 c0             	movzbl %al,%eax
    c401:	ba 03 00 00 00       	mov    $0x3,%edx
    c406:	89 c6                	mov    %eax,%esi
    c408:	bf 13 00 00 00       	mov    $0x13,%edi
    c40d:	e8 10 92 01 00       	callq  25622 <prvTraceStoreObjectPropertiesOnCloseEvent>
    c412:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
    c416:	48 8b 40 58          	mov    0x58(%rax),%rax
    c41a:	0f b6 d8             	movzbl %al,%ebx
    c41d:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
    c421:	48 89 c7             	mov    %rax,%rdi
    c424:	e8 14 6d 01 00       	callq  2313d <prvTraceGetTaskNumberLow16>
    c429:	0f b6 c0             	movzbl %al,%eax
    c42c:	89 da                	mov    %ebx,%edx
    c42e:	89 c6                	mov    %eax,%esi
    c430:	bf 03 00 00 00       	mov    $0x3,%edi
    c435:	e8 12 93 01 00       	callq  2574c <prvTraceSetPriorityProperty>
    c43a:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
    c43e:	48 89 c7             	mov    %rax,%rdi
    c441:	e8 f7 6c 01 00       	callq  2313d <prvTraceGetTaskNumberLow16>
    c446:	0f b6 c0             	movzbl %al,%eax
    c449:	ba 00 00 00 00       	mov    $0x0,%edx
    c44e:	89 c6                	mov    %eax,%esi
    c450:	bf 03 00 00 00       	mov    $0x3,%edi
    c455:	e8 32 94 01 00       	callq  2588c <prvTraceSetObjectState>
    c45a:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
    c45e:	48 89 c7             	mov    %rax,%rdi
    c461:	e8 d7 6c 01 00       	callq  2313d <prvTraceGetTaskNumberLow16>
    c466:	0f b6 c0             	movzbl %al,%eax
    c469:	89 c6                	mov    %eax,%esi
    c46b:	bf 03 00 00 00       	mov    $0x3,%edi
    c470:	e8 a5 9b 01 00       	callq  2601a <prvTraceFreeObjectHandle>
    c475:	e8 83 69 00 00       	callq  12dfd <vPortExitCritical>
    c47a:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
    c47e:	48 8d 35 8b 53 02 00 	lea    0x2538b(%rip),%rsi        # 31810 <xYieldPending>
    c485:	48 89 c7             	mov    %rax,%rdi
    c488:	e8 eb 6b 00 00       	callq  13078 <vPortThreadDying>
    c48d:	e9 19 01 00 00       	jmpq   c5ab <vTaskDelete+0x2da>
    c492:	48 8b 05 4f 53 02 00 	mov    0x2534f(%rip),%rax        # 317e8 <uxCurrentNumberOfTasks>
    c499:	48 83 e8 01          	sub    $0x1,%rax
    c49d:	48 89 05 44 53 02 00 	mov    %rax,0x25344(%rip)        # 317e8 <uxCurrentNumberOfTasks>
    c4a4:	e8 26 69 00 00       	callq  12dcf <vPortEnterCritical>
    c4a9:	e8 ae 71 01 00       	callq  2365c <prvTraceGetCurrentTaskHandle>
    c4ae:	48 89 c7             	mov    %rax,%rdi
    c4b1:	e8 a5 6c 01 00       	callq  2315b <prvTraceGetTaskNumberHigh16>
    c4b6:	0f b7 15 1f 4c 02 00 	movzwl 0x24c1f(%rip),%edx        # 310dc <CurrentFilterMask>
    c4bd:	21 d0                	and    %edx,%eax
    c4bf:	66 85 c0             	test   %ax,%ax
    c4c2:	74 3a                	je     c4fe <vTaskDelete+0x22d>
    c4c4:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
    c4c8:	48 89 c7             	mov    %rax,%rdi
    c4cb:	e8 8b 6c 01 00       	callq  2315b <prvTraceGetTaskNumberHigh16>
    c4d0:	0f b7 15 05 4c 02 00 	movzwl 0x24c05(%rip),%edx        # 310dc <CurrentFilterMask>
    c4d7:	21 d0                	and    %edx,%eax
    c4d9:	66 85 c0             	test   %ax,%ax
    c4dc:	74 20                	je     c4fe <vTaskDelete+0x22d>
    c4de:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
    c4e2:	48 89 c7             	mov    %rax,%rdi
    c4e5:	e8 53 6c 01 00       	callq  2313d <prvTraceGetTaskNumberLow16>
    c4ea:	0f b6 c0             	movzbl %al,%eax
    c4ed:	89 c2                	mov    %eax,%edx
    c4ef:	be 03 00 00 00       	mov    $0x3,%esi
    c4f4:	bf 83 00 00 00       	mov    $0x83,%edi
    c4f9:	e8 54 8b 01 00       	callq  25052 <prvTraceStoreKernelCall>
    c4fe:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
    c502:	48 89 c7             	mov    %rax,%rdi
    c505:	e8 33 6c 01 00       	callq  2313d <prvTraceGetTaskNumberLow16>
    c50a:	0f b6 c0             	movzbl %al,%eax
    c50d:	ba 03 00 00 00       	mov    $0x3,%edx
    c512:	89 c6                	mov    %eax,%esi
    c514:	bf 0b 00 00 00       	mov    $0xb,%edi
    c519:	e8 0e 90 01 00       	callq  2552c <prvTraceStoreObjectNameOnCloseEvent>
    c51e:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
    c522:	48 89 c7             	mov    %rax,%rdi
    c525:	e8 13 6c 01 00       	callq  2313d <prvTraceGetTaskNumberLow16>
    c52a:	0f b6 c0             	movzbl %al,%eax
    c52d:	ba 03 00 00 00       	mov    $0x3,%edx
    c532:	89 c6                	mov    %eax,%esi
    c534:	bf 13 00 00 00       	mov    $0x13,%edi
    c539:	e8 e4 90 01 00       	callq  25622 <prvTraceStoreObjectPropertiesOnCloseEvent>
    c53e:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
    c542:	48 8b 40 58          	mov    0x58(%rax),%rax
    c546:	0f b6 d8             	movzbl %al,%ebx
    c549:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
    c54d:	48 89 c7             	mov    %rax,%rdi
    c550:	e8 e8 6b 01 00       	callq  2313d <prvTraceGetTaskNumberLow16>
    c555:	0f b6 c0             	movzbl %al,%eax
    c558:	89 da                	mov    %ebx,%edx
    c55a:	89 c6                	mov    %eax,%esi
    c55c:	bf 03 00 00 00       	mov    $0x3,%edi
    c561:	e8 e6 91 01 00       	callq  2574c <prvTraceSetPriorityProperty>
    c566:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
    c56a:	48 89 c7             	mov    %rax,%rdi
    c56d:	e8 cb 6b 01 00       	callq  2313d <prvTraceGetTaskNumberLow16>
    c572:	0f b6 c0             	movzbl %al,%eax
    c575:	ba 00 00 00 00       	mov    $0x0,%edx
    c57a:	89 c6                	mov    %eax,%esi
    c57c:	bf 03 00 00 00       	mov    $0x3,%edi
    c581:	e8 06 93 01 00       	callq  2588c <prvTraceSetObjectState>
    c586:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
    c58a:	48 89 c7             	mov    %rax,%rdi
    c58d:	e8 ab 6b 01 00       	callq  2313d <prvTraceGetTaskNumberLow16>
    c592:	0f b6 c0             	movzbl %al,%eax
    c595:	89 c6                	mov    %eax,%esi
    c597:	bf 03 00 00 00       	mov    $0x3,%edi
    c59c:	e8 79 9a 01 00       	callq  2601a <prvTraceFreeObjectHandle>
    c5a1:	e8 57 68 00 00       	callq  12dfd <vPortExitCritical>
    c5a6:	e8 97 30 00 00       	callq  f642 <prvResetNextTaskUnblockTime>
    c5ab:	e8 4d 68 00 00       	callq  12dfd <vPortExitCritical>
    c5b0:	48 8b 05 c9 4f 02 00 	mov    0x24fc9(%rip),%rax        # 31580 <pxCurrentTCB>
    c5b7:	48 39 45 e8          	cmp    %rax,-0x18(%rbp)
    c5bb:	74 0c                	je     c5c9 <vTaskDelete+0x2f8>
    c5bd:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
    c5c1:	48 89 c7             	mov    %rax,%rdi
    c5c4:	e8 f0 2f 00 00       	callq  f5b9 <prvDeleteTCB>
    c5c9:	48 8b 05 30 52 02 00 	mov    0x25230(%rip),%rax        # 31800 <xSchedulerRunning>
    c5d0:	48 85 c0             	test   %rax,%rax
    c5d3:	74 2f                	je     c604 <vTaskDelete+0x333>
    c5d5:	48 8b 05 a4 4f 02 00 	mov    0x24fa4(%rip),%rax        # 31580 <pxCurrentTCB>
    c5dc:	48 39 45 e8          	cmp    %rax,-0x18(%rbp)
    c5e0:	75 22                	jne    c604 <vTaskDelete+0x333>
    c5e2:	48 8b 05 4f 52 02 00 	mov    0x2524f(%rip),%rax        # 31838 <uxSchedulerSuspended>
    c5e9:	48 85 c0             	test   %rax,%rax
    c5ec:	74 11                	je     c5ff <vTaskDelete+0x32e>
    c5ee:	be dc 04 00 00       	mov    $0x4dc,%esi
    c5f3:	48 8d 3d e6 b2 01 00 	lea    0x1b2e6(%rip),%rdi        # 278e0 <_IO_stdin_used+0x8e0>
    c5fa:	e8 0d 77 ff ff       	callq  3d0c <vAssertCalled>
    c5ff:	e8 70 68 00 00       	callq  12e74 <vPortYield>
    c604:	90                   	nop
    c605:	48 83 c4 28          	add    $0x28,%rsp
    c609:	5b                   	pop    %rbx
    c60a:	5d                   	pop    %rbp
    c60b:	c3                   	retq   

000000000000c60c <xTaskDelayUntil>:
    c60c:	f3 0f 1e fa          	endbr64 
    c610:	55                   	push   %rbp
    c611:	48 89 e5             	mov    %rsp,%rbp
    c614:	48 83 ec 30          	sub    $0x30,%rsp
    c618:	48 89 7d d8          	mov    %rdi,-0x28(%rbp)
    c61c:	48 89 75 d0          	mov    %rsi,-0x30(%rbp)
    c620:	48 c7 45 e0 00 00 00 	movq   $0x0,-0x20(%rbp)
    c627:	00 
    c628:	48 83 7d d8 00       	cmpq   $0x0,-0x28(%rbp)
    c62d:	75 11                	jne    c640 <xTaskDelayUntil+0x34>
    c62f:	be f1 04 00 00       	mov    $0x4f1,%esi
    c634:	48 8d 3d a5 b2 01 00 	lea    0x1b2a5(%rip),%rdi        # 278e0 <_IO_stdin_used+0x8e0>
    c63b:	e8 cc 76 ff ff       	callq  3d0c <vAssertCalled>
    c640:	48 83 7d d0 00       	cmpq   $0x0,-0x30(%rbp)
    c645:	75 11                	jne    c658 <xTaskDelayUntil+0x4c>
    c647:	be f2 04 00 00       	mov    $0x4f2,%esi
    c64c:	48 8d 3d 8d b2 01 00 	lea    0x1b28d(%rip),%rdi        # 278e0 <_IO_stdin_used+0x8e0>
    c653:	e8 b4 76 ff ff       	callq  3d0c <vAssertCalled>
    c658:	48 8b 05 d9 51 02 00 	mov    0x251d9(%rip),%rax        # 31838 <uxSchedulerSuspended>
    c65f:	48 85 c0             	test   %rax,%rax
    c662:	74 11                	je     c675 <xTaskDelayUntil+0x69>
    c664:	be f3 04 00 00       	mov    $0x4f3,%esi
    c669:	48 8d 3d 70 b2 01 00 	lea    0x1b270(%rip),%rdi        # 278e0 <_IO_stdin_used+0x8e0>
    c670:	e8 97 76 ff ff       	callq  3d0c <vAssertCalled>
    c675:	e8 c7 0e 00 00       	callq  d541 <vTaskSuspendAll>
    c67a:	48 8b 05 6f 51 02 00 	mov    0x2516f(%rip),%rax        # 317f0 <xTickCount>
    c681:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
    c685:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
    c689:	48 8b 10             	mov    (%rax),%rdx
    c68c:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
    c690:	48 01 d0             	add    %rdx,%rax
    c693:	48 89 45 f0          	mov    %rax,-0x10(%rbp)
    c697:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
    c69b:	48 8b 00             	mov    (%rax),%rax
    c69e:	48 39 45 e8          	cmp    %rax,-0x18(%rbp)
    c6a2:	73 21                	jae    c6c5 <xTaskDelayUntil+0xb9>
    c6a4:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
    c6a8:	48 8b 00             	mov    (%rax),%rax
    c6ab:	48 39 45 f0          	cmp    %rax,-0x10(%rbp)
    c6af:	73 33                	jae    c6e4 <xTaskDelayUntil+0xd8>
    c6b1:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
    c6b5:	48 3b 45 e8          	cmp    -0x18(%rbp),%rax
    c6b9:	76 29                	jbe    c6e4 <xTaskDelayUntil+0xd8>
    c6bb:	48 c7 45 e0 01 00 00 	movq   $0x1,-0x20(%rbp)
    c6c2:	00 
    c6c3:	eb 1f                	jmp    c6e4 <xTaskDelayUntil+0xd8>
    c6c5:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
    c6c9:	48 8b 00             	mov    (%rax),%rax
    c6cc:	48 39 45 f0          	cmp    %rax,-0x10(%rbp)
    c6d0:	72 0a                	jb     c6dc <xTaskDelayUntil+0xd0>
    c6d2:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
    c6d6:	48 3b 45 e8          	cmp    -0x18(%rbp),%rax
    c6da:	76 08                	jbe    c6e4 <xTaskDelayUntil+0xd8>
    c6dc:	48 c7 45 e0 01 00 00 	movq   $0x1,-0x20(%rbp)
    c6e3:	00 
    c6e4:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
    c6e8:	48 8b 55 f0          	mov    -0x10(%rbp),%rdx
    c6ec:	48 89 10             	mov    %rdx,(%rax)
    c6ef:	48 83 7d e0 00       	cmpq   $0x0,-0x20(%rbp)
    c6f4:	0f 84 8d 00 00 00    	je     c787 <xTaskDelayUntil+0x17b>
    c6fa:	48 8b 05 7f 4e 02 00 	mov    0x24e7f(%rip),%rax        # 31580 <pxCurrentTCB>
    c701:	48 89 c7             	mov    %rax,%rdi
    c704:	e8 52 6a 01 00       	callq  2315b <prvTraceGetTaskNumberHigh16>
    c709:	0f b7 15 cc 49 02 00 	movzwl 0x249cc(%rip),%edx        # 310dc <CurrentFilterMask>
    c710:	21 d0                	and    %edx,%eax
    c712:	66 85 c0             	test   %ax,%ax
    c715:	74 29                	je     c740 <xTaskDelayUntil+0x134>
    c717:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
    c71b:	89 c6                	mov    %eax,%esi
    c71d:	bf 88 00 00 00       	mov    $0x88,%edi
    c722:	e8 17 8c 01 00       	callq  2533e <prvTraceStoreKernelCallWithNumericParamOnly>
    c727:	48 8b 05 52 4e 02 00 	mov    0x24e52(%rip),%rax        # 31580 <pxCurrentTCB>
    c72e:	48 89 c7             	mov    %rax,%rdi
    c731:	e8 07 6a 01 00       	callq  2313d <prvTraceGetTaskNumberLow16>
    c736:	0f b6 c0             	movzbl %al,%eax
    c739:	89 c7                	mov    %eax,%edi
    c73b:	e8 86 92 01 00       	callq  259c6 <prvTraceSetTaskInstanceFinished>
    c740:	e8 17 6f 01 00       	callq  2365c <prvTraceGetCurrentTaskHandle>
    c745:	48 89 c7             	mov    %rax,%rdi
    c748:	e8 0e 6a 01 00       	callq  2315b <prvTraceGetTaskNumberHigh16>
    c74d:	0f b7 15 88 49 02 00 	movzwl 0x24988(%rip),%edx        # 310dc <CurrentFilterMask>
    c754:	21 d0                	and    %edx,%eax
    c756:	66 85 c0             	test   %ax,%ax
    c759:	74 17                	je     c772 <xTaskDelayUntil+0x166>
    c75b:	e8 fc 6e 01 00       	callq  2365c <prvTraceGetCurrentTaskHandle>
    c760:	48 89 c7             	mov    %rax,%rdi
    c763:	e8 d5 69 01 00       	callq  2313d <prvTraceGetTaskNumberLow16>
    c768:	0f b6 c0             	movzbl %al,%eax
    c76b:	89 c7                	mov    %eax,%edi
    c76d:	e8 54 92 01 00       	callq  259c6 <prvTraceSetTaskInstanceFinished>
    c772:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
    c776:	48 2b 45 e8          	sub    -0x18(%rbp),%rax
    c77a:	be 00 00 00 00       	mov    $0x0,%esi
    c77f:	48 89 c7             	mov    %rax,%rdi
    c782:	e8 10 4a 00 00       	callq  11197 <prvAddCurrentTaskToDelayedList>
    c787:	e8 d2 0d 00 00       	callq  d55e <xTaskResumeAll>
    c78c:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
    c790:	48 83 7d f8 00       	cmpq   $0x0,-0x8(%rbp)
    c795:	75 05                	jne    c79c <xTaskDelayUntil+0x190>
    c797:	e8 d8 66 00 00       	callq  12e74 <vPortYield>
    c79c:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
    c7a0:	c9                   	leaveq 
    c7a1:	c3                   	retq   

000000000000c7a2 <vTaskDelay>:
    c7a2:	f3 0f 1e fa          	endbr64 
    c7a6:	55                   	push   %rbp
    c7a7:	48 89 e5             	mov    %rsp,%rbp
    c7aa:	48 83 ec 20          	sub    $0x20,%rsp
    c7ae:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
    c7b2:	48 c7 45 f8 00 00 00 	movq   $0x0,-0x8(%rbp)
    c7b9:	00 
    c7ba:	48 83 7d e8 00       	cmpq   $0x0,-0x18(%rbp)
    c7bf:	0f 84 b4 00 00 00    	je     c879 <vTaskDelay+0xd7>
    c7c5:	48 8b 05 6c 50 02 00 	mov    0x2506c(%rip),%rax        # 31838 <uxSchedulerSuspended>
    c7cc:	48 85 c0             	test   %rax,%rax
    c7cf:	74 11                	je     c7e2 <vTaskDelay+0x40>
    c7d1:	be 49 05 00 00       	mov    $0x549,%esi
    c7d6:	48 8d 3d 03 b1 01 00 	lea    0x1b103(%rip),%rdi        # 278e0 <_IO_stdin_used+0x8e0>
    c7dd:	e8 2a 75 ff ff       	callq  3d0c <vAssertCalled>
    c7e2:	e8 5a 0d 00 00       	callq  d541 <vTaskSuspendAll>
    c7e7:	48 8b 05 92 4d 02 00 	mov    0x24d92(%rip),%rax        # 31580 <pxCurrentTCB>
    c7ee:	48 89 c7             	mov    %rax,%rdi
    c7f1:	e8 65 69 01 00       	callq  2315b <prvTraceGetTaskNumberHigh16>
    c7f6:	0f b7 15 df 48 02 00 	movzwl 0x248df(%rip),%edx        # 310dc <CurrentFilterMask>
    c7fd:	21 d0                	and    %edx,%eax
    c7ff:	66 85 c0             	test   %ax,%ax
    c802:	74 29                	je     c82d <vTaskDelay+0x8b>
    c804:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
    c808:	89 c6                	mov    %eax,%esi
    c80a:	bf 89 00 00 00       	mov    $0x89,%edi
    c80f:	e8 2a 8b 01 00       	callq  2533e <prvTraceStoreKernelCallWithNumericParamOnly>
    c814:	48 8b 05 65 4d 02 00 	mov    0x24d65(%rip),%rax        # 31580 <pxCurrentTCB>
    c81b:	48 89 c7             	mov    %rax,%rdi
    c81e:	e8 1a 69 01 00       	callq  2313d <prvTraceGetTaskNumberLow16>
    c823:	0f b6 c0             	movzbl %al,%eax
    c826:	89 c7                	mov    %eax,%edi
    c828:	e8 99 91 01 00       	callq  259c6 <prvTraceSetTaskInstanceFinished>
    c82d:	e8 2a 6e 01 00       	callq  2365c <prvTraceGetCurrentTaskHandle>
    c832:	48 89 c7             	mov    %rax,%rdi
    c835:	e8 21 69 01 00       	callq  2315b <prvTraceGetTaskNumberHigh16>
    c83a:	0f b7 15 9b 48 02 00 	movzwl 0x2489b(%rip),%edx        # 310dc <CurrentFilterMask>
    c841:	21 d0                	and    %edx,%eax
    c843:	66 85 c0             	test   %ax,%ax
    c846:	74 17                	je     c85f <vTaskDelay+0xbd>
    c848:	e8 0f 6e 01 00       	callq  2365c <prvTraceGetCurrentTaskHandle>
    c84d:	48 89 c7             	mov    %rax,%rdi
    c850:	e8 e8 68 01 00       	callq  2313d <prvTraceGetTaskNumberLow16>
    c855:	0f b6 c0             	movzbl %al,%eax
    c858:	89 c7                	mov    %eax,%edi
    c85a:	e8 67 91 01 00       	callq  259c6 <prvTraceSetTaskInstanceFinished>
    c85f:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
    c863:	be 00 00 00 00       	mov    $0x0,%esi
    c868:	48 89 c7             	mov    %rax,%rdi
    c86b:	e8 27 49 00 00       	callq  11197 <prvAddCurrentTaskToDelayedList>
    c870:	e8 e9 0c 00 00       	callq  d55e <xTaskResumeAll>
    c875:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
    c879:	48 83 7d f8 00       	cmpq   $0x0,-0x8(%rbp)
    c87e:	75 05                	jne    c885 <vTaskDelay+0xe3>
    c880:	e8 ef 65 00 00       	callq  12e74 <vPortYield>
    c885:	90                   	nop
    c886:	c9                   	leaveq 
    c887:	c3                   	retq   

000000000000c888 <eTaskGetState>:
    c888:	f3 0f 1e fa          	endbr64 
    c88c:	55                   	push   %rbp
    c88d:	48 89 e5             	mov    %rsp,%rbp
    c890:	48 83 ec 40          	sub    $0x40,%rsp
    c894:	48 89 7d c8          	mov    %rdi,-0x38(%rbp)
    c898:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
    c89c:	48 89 45 e0          	mov    %rax,-0x20(%rbp)
    c8a0:	48 83 7d e0 00       	cmpq   $0x0,-0x20(%rbp)
    c8a5:	75 11                	jne    c8b8 <eTaskGetState+0x30>
    c8a7:	be 75 05 00 00       	mov    $0x575,%esi
    c8ac:	48 8d 3d 2d b0 01 00 	lea    0x1b02d(%rip),%rdi        # 278e0 <_IO_stdin_used+0x8e0>
    c8b3:	e8 54 74 ff ff       	callq  3d0c <vAssertCalled>
    c8b8:	48 8b 05 c1 4c 02 00 	mov    0x24cc1(%rip),%rax        # 31580 <pxCurrentTCB>
    c8bf:	48 39 45 e0          	cmp    %rax,-0x20(%rbp)
    c8c3:	75 0c                	jne    c8d1 <eTaskGetState+0x49>
    c8c5:	c7 45 d4 00 00 00 00 	movl   $0x0,-0x2c(%rbp)
    c8cc:	e9 d3 00 00 00       	jmpq   c9a4 <eTaskGetState+0x11c>
    c8d1:	e8 f9 64 00 00       	callq  12dcf <vPortEnterCritical>
    c8d6:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
    c8da:	48 8b 40 28          	mov    0x28(%rax),%rax
    c8de:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
    c8e2:	48 8b 05 3f 4e 02 00 	mov    0x24e3f(%rip),%rax        # 31728 <pxDelayedTaskList>
    c8e9:	48 89 45 f0          	mov    %rax,-0x10(%rbp)
    c8ed:	48 8b 05 3c 4e 02 00 	mov    0x24e3c(%rip),%rax        # 31730 <pxOverflowDelayedTaskList>
    c8f4:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
    c8f8:	e8 00 65 00 00       	callq  12dfd <vPortExitCritical>
    c8fd:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
    c901:	48 3b 45 f0          	cmp    -0x10(%rbp),%rax
    c905:	74 0a                	je     c911 <eTaskGetState+0x89>
    c907:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
    c90b:	48 3b 45 f8          	cmp    -0x8(%rbp),%rax
    c90f:	75 0c                	jne    c91d <eTaskGetState+0x95>
    c911:	c7 45 d4 02 00 00 00 	movl   $0x2,-0x2c(%rbp)
    c918:	e9 87 00 00 00       	jmpq   c9a4 <eTaskGetState+0x11c>
    c91d:	48 8d 05 9c 4e 02 00 	lea    0x24e9c(%rip),%rax        # 317c0 <xSuspendedTaskList>
    c924:	48 39 45 e8          	cmp    %rax,-0x18(%rbp)
    c928:	75 56                	jne    c980 <eTaskGetState+0xf8>
    c92a:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
    c92e:	48 8b 40 50          	mov    0x50(%rax),%rax
    c932:	48 85 c0             	test   %rax,%rax
    c935:	75 40                	jne    c977 <eTaskGetState+0xef>
    c937:	c7 45 d4 03 00 00 00 	movl   $0x3,-0x2c(%rbp)
    c93e:	48 c7 45 d8 00 00 00 	movq   $0x0,-0x28(%rbp)
    c945:	00 
    c946:	eb 26                	jmp    c96e <eTaskGetState+0xe6>
    c948:	48 8b 55 e0          	mov    -0x20(%rbp),%rdx
    c94c:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
    c950:	48 01 d0             	add    %rdx,%rax
    c953:	48 05 a8 00 00 00    	add    $0xa8,%rax
    c959:	0f b6 00             	movzbl (%rax),%eax
    c95c:	3c 01                	cmp    $0x1,%al
    c95e:	75 09                	jne    c969 <eTaskGetState+0xe1>
    c960:	c7 45 d4 02 00 00 00 	movl   $0x2,-0x2c(%rbp)
    c967:	eb 3b                	jmp    c9a4 <eTaskGetState+0x11c>
    c969:	48 83 45 d8 01       	addq   $0x1,-0x28(%rbp)
    c96e:	48 83 7d d8 00       	cmpq   $0x0,-0x28(%rbp)
    c973:	7e d3                	jle    c948 <eTaskGetState+0xc0>
    c975:	eb 2d                	jmp    c9a4 <eTaskGetState+0x11c>
    c977:	c7 45 d4 02 00 00 00 	movl   $0x2,-0x2c(%rbp)
    c97e:	eb 24                	jmp    c9a4 <eTaskGetState+0x11c>
    c980:	48 8d 05 f9 4d 02 00 	lea    0x24df9(%rip),%rax        # 31780 <xTasksWaitingTermination>
    c987:	48 39 45 e8          	cmp    %rax,-0x18(%rbp)
    c98b:	74 07                	je     c994 <eTaskGetState+0x10c>
    c98d:	48 83 7d e8 00       	cmpq   $0x0,-0x18(%rbp)
    c992:	75 09                	jne    c99d <eTaskGetState+0x115>
    c994:	c7 45 d4 04 00 00 00 	movl   $0x4,-0x2c(%rbp)
    c99b:	eb 07                	jmp    c9a4 <eTaskGetState+0x11c>
    c99d:	c7 45 d4 01 00 00 00 	movl   $0x1,-0x2c(%rbp)
    c9a4:	8b 45 d4             	mov    -0x2c(%rbp),%eax
    c9a7:	c9                   	leaveq 
    c9a8:	c3                   	retq   

000000000000c9a9 <uxTaskPriorityGet>:
    c9a9:	f3 0f 1e fa          	endbr64 
    c9ad:	55                   	push   %rbp
    c9ae:	48 89 e5             	mov    %rsp,%rbp
    c9b1:	48 83 ec 20          	sub    $0x20,%rsp
    c9b5:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
    c9b9:	e8 11 64 00 00       	callq  12dcf <vPortEnterCritical>
    c9be:	48 83 7d e8 00       	cmpq   $0x0,-0x18(%rbp)
    c9c3:	75 09                	jne    c9ce <uxTaskPriorityGet+0x25>
    c9c5:	48 8b 05 b4 4b 02 00 	mov    0x24bb4(%rip),%rax        # 31580 <pxCurrentTCB>
    c9cc:	eb 04                	jmp    c9d2 <uxTaskPriorityGet+0x29>
    c9ce:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
    c9d2:	48 89 45 f0          	mov    %rax,-0x10(%rbp)
    c9d6:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
    c9da:	48 8b 40 58          	mov    0x58(%rax),%rax
    c9de:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
    c9e2:	e8 16 64 00 00       	callq  12dfd <vPortExitCritical>
    c9e7:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    c9eb:	c9                   	leaveq 
    c9ec:	c3                   	retq   

000000000000c9ed <uxTaskPriorityGetFromISR>:
    c9ed:	f3 0f 1e fa          	endbr64 
    c9f1:	55                   	push   %rbp
    c9f2:	48 89 e5             	mov    %rsp,%rbp
    c9f5:	48 83 ec 30          	sub    $0x30,%rsp
    c9f9:	48 89 7d d8          	mov    %rdi,-0x28(%rbp)
    c9fd:	e8 ce 64 00 00       	callq  12ed0 <xPortSetInterruptMask>
    ca02:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
    ca06:	48 83 7d d8 00       	cmpq   $0x0,-0x28(%rbp)
    ca0b:	75 09                	jne    ca16 <uxTaskPriorityGetFromISR+0x29>
    ca0d:	48 8b 05 6c 4b 02 00 	mov    0x24b6c(%rip),%rax        # 31580 <pxCurrentTCB>
    ca14:	eb 04                	jmp    ca1a <uxTaskPriorityGetFromISR+0x2d>
    ca16:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
    ca1a:	48 89 45 f0          	mov    %rax,-0x10(%rbp)
    ca1e:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
    ca22:	48 8b 40 58          	mov    0x58(%rax),%rax
    ca26:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
    ca2a:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
    ca2e:	48 89 c7             	mov    %rax,%rdi
    ca31:	e8 a9 64 00 00       	callq  12edf <vPortClearInterruptMask>
    ca36:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    ca3a:	c9                   	leaveq 
    ca3b:	c3                   	retq   

000000000000ca3c <vTaskPrioritySet>:
    ca3c:	f3 0f 1e fa          	endbr64 
    ca40:	55                   	push   %rbp
    ca41:	48 89 e5             	mov    %rsp,%rbp
    ca44:	53                   	push   %rbx
    ca45:	48 83 ec 48          	sub    $0x48,%rsp
    ca49:	48 89 7d b8          	mov    %rdi,-0x48(%rbp)
    ca4d:	48 89 75 b0          	mov    %rsi,-0x50(%rbp)
    ca51:	48 c7 45 c8 00 00 00 	movq   $0x0,-0x38(%rbp)
    ca58:	00 
    ca59:	48 83 7d b0 06       	cmpq   $0x6,-0x50(%rbp)
    ca5e:	76 11                	jbe    ca71 <vTaskPrioritySet+0x35>
    ca60:	be 15 06 00 00       	mov    $0x615,%esi
    ca65:	48 8d 3d 74 ae 01 00 	lea    0x1ae74(%rip),%rdi        # 278e0 <_IO_stdin_used+0x8e0>
    ca6c:	e8 9b 72 ff ff       	callq  3d0c <vAssertCalled>
    ca71:	48 83 7d b0 06       	cmpq   $0x6,-0x50(%rbp)
    ca76:	76 08                	jbe    ca80 <vTaskPrioritySet+0x44>
    ca78:	48 c7 45 b0 06 00 00 	movq   $0x6,-0x50(%rbp)
    ca7f:	00 
    ca80:	e8 4a 63 00 00       	callq  12dcf <vPortEnterCritical>
    ca85:	48 83 7d b8 00       	cmpq   $0x0,-0x48(%rbp)
    ca8a:	75 09                	jne    ca95 <vTaskPrioritySet+0x59>
    ca8c:	48 8b 05 ed 4a 02 00 	mov    0x24aed(%rip),%rax        # 31580 <pxCurrentTCB>
    ca93:	eb 04                	jmp    ca99 <vTaskPrioritySet+0x5d>
    ca95:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
    ca99:	48 89 45 d0          	mov    %rax,-0x30(%rbp)
    ca9d:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
    caa1:	48 89 c7             	mov    %rax,%rdi
    caa4:	e8 b2 66 01 00       	callq  2315b <prvTraceGetTaskNumberHigh16>
    caa9:	0f b7 15 2c 46 02 00 	movzwl 0x2462c(%rip),%edx        # 310dc <CurrentFilterMask>
    cab0:	21 d0                	and    %edx,%eax
    cab2:	66 85 c0             	test   %ax,%ax
    cab5:	74 64                	je     cb1b <vTaskPrioritySet+0xdf>
    cab7:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
    cabb:	48 89 c7             	mov    %rax,%rdi
    cabe:	e8 7a 66 01 00       	callq  2313d <prvTraceGetTaskNumberLow16>
    cac3:	0f b6 c0             	movzbl %al,%eax
    cac6:	89 c6                	mov    %eax,%esi
    cac8:	bf 03 00 00 00       	mov    $0x3,%edi
    cacd:	e8 1a 8d 01 00       	callq  257ec <prvTraceGetPriorityProperty>
    cad2:	0f b6 d8             	movzbl %al,%ebx
    cad5:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
    cad9:	48 89 c7             	mov    %rax,%rdi
    cadc:	e8 5c 66 01 00       	callq  2313d <prvTraceGetTaskNumberLow16>
    cae1:	0f b6 c0             	movzbl %al,%eax
    cae4:	89 d9                	mov    %ebx,%ecx
    cae6:	89 c2                	mov    %eax,%edx
    cae8:	be 03 00 00 00       	mov    $0x3,%esi
    caed:	bf 8d 00 00 00       	mov    $0x8d,%edi
    caf2:	e8 7e 86 01 00       	callq  25175 <prvTraceStoreKernelCallWithParam>
    caf7:	48 8b 45 b0          	mov    -0x50(%rbp),%rax
    cafb:	0f b6 d8             	movzbl %al,%ebx
    cafe:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
    cb02:	48 89 c7             	mov    %rax,%rdi
    cb05:	e8 33 66 01 00       	callq  2313d <prvTraceGetTaskNumberLow16>
    cb0a:	0f b6 c0             	movzbl %al,%eax
    cb0d:	89 da                	mov    %ebx,%edx
    cb0f:	89 c6                	mov    %eax,%esi
    cb11:	bf 03 00 00 00       	mov    $0x3,%edi
    cb16:	e8 31 8c 01 00       	callq  2574c <prvTraceSetPriorityProperty>
    cb1b:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
    cb1f:	48 8b 80 88 00 00 00 	mov    0x88(%rax),%rax
    cb26:	48 89 45 d8          	mov    %rax,-0x28(%rbp)
    cb2a:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
    cb2e:	48 3b 45 b0          	cmp    -0x50(%rbp),%rax
    cb32:	0f 84 1c 02 00 00    	je     cd54 <vTaskPrioritySet+0x318>
    cb38:	48 8b 45 b0          	mov    -0x50(%rbp),%rax
    cb3c:	48 3b 45 d8          	cmp    -0x28(%rbp),%rax
    cb40:	76 28                	jbe    cb6a <vTaskPrioritySet+0x12e>
    cb42:	48 8b 05 37 4a 02 00 	mov    0x24a37(%rip),%rax        # 31580 <pxCurrentTCB>
    cb49:	48 39 45 d0          	cmp    %rax,-0x30(%rbp)
    cb4d:	74 30                	je     cb7f <vTaskPrioritySet+0x143>
    cb4f:	48 8b 05 2a 4a 02 00 	mov    0x24a2a(%rip),%rax        # 31580 <pxCurrentTCB>
    cb56:	48 8b 40 58          	mov    0x58(%rax),%rax
    cb5a:	48 39 45 b0          	cmp    %rax,-0x50(%rbp)
    cb5e:	72 1f                	jb     cb7f <vTaskPrioritySet+0x143>
    cb60:	48 c7 45 c8 01 00 00 	movq   $0x1,-0x38(%rbp)
    cb67:	00 
    cb68:	eb 15                	jmp    cb7f <vTaskPrioritySet+0x143>
    cb6a:	48 8b 05 0f 4a 02 00 	mov    0x24a0f(%rip),%rax        # 31580 <pxCurrentTCB>
    cb71:	48 39 45 d0          	cmp    %rax,-0x30(%rbp)
    cb75:	75 08                	jne    cb7f <vTaskPrioritySet+0x143>
    cb77:	48 c7 45 c8 01 00 00 	movq   $0x1,-0x38(%rbp)
    cb7e:	00 
    cb7f:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
    cb83:	48 8b 40 58          	mov    0x58(%rax),%rax
    cb87:	48 89 45 e0          	mov    %rax,-0x20(%rbp)
    cb8b:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
    cb8f:	48 8b 90 88 00 00 00 	mov    0x88(%rax),%rdx
    cb96:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
    cb9a:	48 8b 40 58          	mov    0x58(%rax),%rax
    cb9e:	48 39 c2             	cmp    %rax,%rdx
    cba1:	75 0c                	jne    cbaf <vTaskPrioritySet+0x173>
    cba3:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
    cba7:	48 8b 55 b0          	mov    -0x50(%rbp),%rdx
    cbab:	48 89 50 58          	mov    %rdx,0x58(%rax)
    cbaf:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
    cbb3:	48 8b 55 b0          	mov    -0x50(%rbp),%rdx
    cbb7:	48 89 90 88 00 00 00 	mov    %rdx,0x88(%rax)
    cbbe:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
    cbc2:	48 8b 40 30          	mov    0x30(%rax),%rax
    cbc6:	25 00 00 00 80       	and    $0x80000000,%eax
    cbcb:	48 85 c0             	test   %rax,%rax
    cbce:	75 14                	jne    cbe4 <vTaskPrioritySet+0x1a8>
    cbd0:	b8 07 00 00 00       	mov    $0x7,%eax
    cbd5:	48 2b 45 b0          	sub    -0x50(%rbp),%rax
    cbd9:	48 89 c2             	mov    %rax,%rdx
    cbdc:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
    cbe0:	48 89 50 30          	mov    %rdx,0x30(%rax)
    cbe4:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
    cbe8:	48 8b 48 28          	mov    0x28(%rax),%rcx
    cbec:	48 8b 55 e0          	mov    -0x20(%rbp),%rdx
    cbf0:	48 89 d0             	mov    %rdx,%rax
    cbf3:	48 c1 e0 02          	shl    $0x2,%rax
    cbf7:	48 01 d0             	add    %rdx,%rax
    cbfa:	48 c1 e0 03          	shl    $0x3,%rax
    cbfe:	48 8d 15 9b 49 02 00 	lea    0x2499b(%rip),%rdx        # 315a0 <pxReadyTasksLists>
    cc05:	48 01 d0             	add    %rdx,%rax
    cc08:	48 39 c1             	cmp    %rax,%rcx
    cc0b:	0f 85 37 01 00 00    	jne    cd48 <vTaskPrioritySet+0x30c>
    cc11:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
    cc15:	48 83 c0 08          	add    $0x8,%rax
    cc19:	48 89 c7             	mov    %rax,%rdi
    cc1c:	e8 bc c1 ff ff       	callq  8ddd <uxListRemove>
    cc21:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
    cc25:	48 89 c7             	mov    %rax,%rdi
    cc28:	e8 2e 65 01 00       	callq  2315b <prvTraceGetTaskNumberHigh16>
    cc2d:	0f b7 15 a8 44 02 00 	movzwl 0x244a8(%rip),%edx        # 310dc <CurrentFilterMask>
    cc34:	21 d0                	and    %edx,%eax
    cc36:	66 85 c0             	test   %ax,%ax
    cc39:	74 16                	je     cc51 <vTaskPrioritySet+0x215>
    cc3b:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
    cc3f:	48 89 c7             	mov    %rax,%rdi
    cc42:	e8 f6 64 01 00       	callq  2313d <prvTraceGetTaskNumberLow16>
    cc47:	0f b6 c0             	movzbl %al,%eax
    cc4a:	89 c7                	mov    %eax,%edi
    cc4c:	e8 1d 81 01 00       	callq  24d6e <prvTraceStoreTaskReady>
    cc51:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
    cc55:	48 8b 50 58          	mov    0x58(%rax),%rdx
    cc59:	48 8b 05 98 4b 02 00 	mov    0x24b98(%rip),%rax        # 317f8 <uxTopReadyPriority>
    cc60:	48 39 c2             	cmp    %rax,%rdx
    cc63:	76 0f                	jbe    cc74 <vTaskPrioritySet+0x238>
    cc65:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
    cc69:	48 8b 40 58          	mov    0x58(%rax),%rax
    cc6d:	48 89 05 84 4b 02 00 	mov    %rax,0x24b84(%rip)        # 317f8 <uxTopReadyPriority>
    cc74:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
    cc78:	48 8b 50 58          	mov    0x58(%rax),%rdx
    cc7c:	48 89 d0             	mov    %rdx,%rax
    cc7f:	48 c1 e0 02          	shl    $0x2,%rax
    cc83:	48 01 d0             	add    %rdx,%rax
    cc86:	48 c1 e0 03          	shl    $0x3,%rax
    cc8a:	48 89 c2             	mov    %rax,%rdx
    cc8d:	48 8d 05 14 49 02 00 	lea    0x24914(%rip),%rax        # 315a8 <pxReadyTasksLists+0x8>
    cc94:	48 8b 04 02          	mov    (%rdx,%rax,1),%rax
    cc98:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
    cc9c:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
    cca0:	48 8b 55 e8          	mov    -0x18(%rbp),%rdx
    cca4:	48 89 50 10          	mov    %rdx,0x10(%rax)
    cca8:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
    ccac:	48 8b 50 10          	mov    0x10(%rax),%rdx
    ccb0:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
    ccb4:	48 89 50 18          	mov    %rdx,0x18(%rax)
    ccb8:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
    ccbc:	48 8b 40 10          	mov    0x10(%rax),%rax
    ccc0:	48 8b 55 d0          	mov    -0x30(%rbp),%rdx
    ccc4:	48 83 c2 08          	add    $0x8,%rdx
    ccc8:	48 89 50 08          	mov    %rdx,0x8(%rax)
    cccc:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
    ccd0:	48 8d 50 08          	lea    0x8(%rax),%rdx
    ccd4:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
    ccd8:	48 89 50 10          	mov    %rdx,0x10(%rax)
    ccdc:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
    cce0:	48 8b 50 58          	mov    0x58(%rax),%rdx
    cce4:	48 89 d0             	mov    %rdx,%rax
    cce7:	48 c1 e0 02          	shl    $0x2,%rax
    cceb:	48 01 d0             	add    %rdx,%rax
    ccee:	48 c1 e0 03          	shl    $0x3,%rax
    ccf2:	48 8d 15 a7 48 02 00 	lea    0x248a7(%rip),%rdx        # 315a0 <pxReadyTasksLists>
    ccf9:	48 01 c2             	add    %rax,%rdx
    ccfc:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
    cd00:	48 89 50 28          	mov    %rdx,0x28(%rax)
    cd04:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
    cd08:	48 8b 50 58          	mov    0x58(%rax),%rdx
    cd0c:	48 89 d0             	mov    %rdx,%rax
    cd0f:	48 c1 e0 02          	shl    $0x2,%rax
    cd13:	48 01 d0             	add    %rdx,%rax
    cd16:	48 c1 e0 03          	shl    $0x3,%rax
    cd1a:	48 89 c1             	mov    %rax,%rcx
    cd1d:	48 8d 05 7c 48 02 00 	lea    0x2487c(%rip),%rax        # 315a0 <pxReadyTasksLists>
    cd24:	48 8b 04 01          	mov    (%rcx,%rax,1),%rax
    cd28:	48 8d 48 01          	lea    0x1(%rax),%rcx
    cd2c:	48 89 d0             	mov    %rdx,%rax
    cd2f:	48 c1 e0 02          	shl    $0x2,%rax
    cd33:	48 01 d0             	add    %rdx,%rax
    cd36:	48 c1 e0 03          	shl    $0x3,%rax
    cd3a:	48 89 c2             	mov    %rax,%rdx
    cd3d:	48 8d 05 5c 48 02 00 	lea    0x2485c(%rip),%rax        # 315a0 <pxReadyTasksLists>
    cd44:	48 89 0c 02          	mov    %rcx,(%rdx,%rax,1)
    cd48:	48 83 7d c8 00       	cmpq   $0x0,-0x38(%rbp)
    cd4d:	74 05                	je     cd54 <vTaskPrioritySet+0x318>
    cd4f:	e8 20 61 00 00       	callq  12e74 <vPortYield>
    cd54:	e8 a4 60 00 00       	callq  12dfd <vPortExitCritical>
    cd59:	90                   	nop
    cd5a:	48 83 c4 48          	add    $0x48,%rsp
    cd5e:	5b                   	pop    %rbx
    cd5f:	5d                   	pop    %rbp
    cd60:	c3                   	retq   

000000000000cd61 <vTaskSuspend>:
    cd61:	f3 0f 1e fa          	endbr64 
    cd65:	55                   	push   %rbp
    cd66:	48 89 e5             	mov    %rsp,%rbp
    cd69:	48 83 ec 20          	sub    $0x20,%rsp
    cd6d:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
    cd71:	e8 59 60 00 00       	callq  12dcf <vPortEnterCritical>
    cd76:	48 83 7d e8 00       	cmpq   $0x0,-0x18(%rbp)
    cd7b:	75 09                	jne    cd86 <vTaskSuspend+0x25>
    cd7d:	48 8b 05 fc 47 02 00 	mov    0x247fc(%rip),%rax        # 31580 <pxCurrentTCB>
    cd84:	eb 04                	jmp    cd8a <vTaskSuspend+0x29>
    cd86:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
    cd8a:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
    cd8e:	e8 c9 68 01 00       	callq  2365c <prvTraceGetCurrentTaskHandle>
    cd93:	48 89 c7             	mov    %rax,%rdi
    cd96:	e8 c0 63 01 00       	callq  2315b <prvTraceGetTaskNumberHigh16>
    cd9b:	0f b7 15 3a 43 02 00 	movzwl 0x2433a(%rip),%edx        # 310dc <CurrentFilterMask>
    cda2:	21 d0                	and    %edx,%eax
    cda4:	66 85 c0             	test   %ax,%ax
    cda7:	74 3a                	je     cde3 <vTaskSuspend+0x82>
    cda9:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    cdad:	48 89 c7             	mov    %rax,%rdi
    cdb0:	e8 a6 63 01 00       	callq  2315b <prvTraceGetTaskNumberHigh16>
    cdb5:	0f b7 15 20 43 02 00 	movzwl 0x24320(%rip),%edx        # 310dc <CurrentFilterMask>
    cdbc:	21 d0                	and    %edx,%eax
    cdbe:	66 85 c0             	test   %ax,%ax
    cdc1:	74 20                	je     cde3 <vTaskSuspend+0x82>
    cdc3:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    cdc7:	48 89 c7             	mov    %rax,%rdi
    cdca:	e8 6e 63 01 00       	callq  2313d <prvTraceGetTaskNumberLow16>
    cdcf:	0f b6 c0             	movzbl %al,%eax
    cdd2:	89 c2                	mov    %eax,%edx
    cdd4:	be 03 00 00 00       	mov    $0x3,%esi
    cdd9:	bf 8a 00 00 00       	mov    $0x8a,%edi
    cdde:	e8 6f 82 01 00       	callq  25052 <prvTraceStoreKernelCall>
    cde3:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    cde7:	48 89 c7             	mov    %rax,%rdi
    cdea:	e8 4e 63 01 00       	callq  2313d <prvTraceGetTaskNumberLow16>
    cdef:	0f b6 c0             	movzbl %al,%eax
    cdf2:	89 c7                	mov    %eax,%edi
    cdf4:	e8 cd 8b 01 00       	callq  259c6 <prvTraceSetTaskInstanceFinished>
    cdf9:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    cdfd:	48 83 c0 08          	add    $0x8,%rax
    ce01:	48 89 c7             	mov    %rax,%rdi
    ce04:	e8 d4 bf ff ff       	callq  8ddd <uxListRemove>
    ce09:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    ce0d:	48 8b 40 50          	mov    0x50(%rax),%rax
    ce11:	48 85 c0             	test   %rax,%rax
    ce14:	74 10                	je     ce26 <vTaskSuspend+0xc5>
    ce16:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    ce1a:	48 83 c0 30          	add    $0x30,%rax
    ce1e:	48 89 c7             	mov    %rax,%rdi
    ce21:	e8 b7 bf ff ff       	callq  8ddd <uxListRemove>
    ce26:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    ce2a:	48 83 c0 08          	add    $0x8,%rax
    ce2e:	48 89 c6             	mov    %rax,%rsi
    ce31:	48 8d 3d 88 49 02 00 	lea    0x24988(%rip),%rdi        # 317c0 <xSuspendedTaskList>
    ce38:	e8 77 be ff ff       	callq  8cb4 <vListInsertEnd>
    ce3d:	48 c7 45 f0 00 00 00 	movq   $0x0,-0x10(%rbp)
    ce44:	00 
    ce45:	eb 31                	jmp    ce78 <vTaskSuspend+0x117>
    ce47:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
    ce4b:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
    ce4f:	48 01 d0             	add    %rdx,%rax
    ce52:	48 05 a8 00 00 00    	add    $0xa8,%rax
    ce58:	0f b6 00             	movzbl (%rax),%eax
    ce5b:	3c 01                	cmp    $0x1,%al
    ce5d:	75 14                	jne    ce73 <vTaskSuspend+0x112>
    ce5f:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
    ce63:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
    ce67:	48 01 d0             	add    %rdx,%rax
    ce6a:	48 05 a8 00 00 00    	add    $0xa8,%rax
    ce70:	c6 00 00             	movb   $0x0,(%rax)
    ce73:	48 83 45 f0 01       	addq   $0x1,-0x10(%rbp)
    ce78:	48 83 7d f0 00       	cmpq   $0x0,-0x10(%rbp)
    ce7d:	7e c8                	jle    ce47 <vTaskSuspend+0xe6>
    ce7f:	e8 79 5f 00 00       	callq  12dfd <vPortExitCritical>
    ce84:	48 8b 05 75 49 02 00 	mov    0x24975(%rip),%rax        # 31800 <xSchedulerRunning>
    ce8b:	48 85 c0             	test   %rax,%rax
    ce8e:	74 0f                	je     ce9f <vTaskSuspend+0x13e>
    ce90:	e8 3a 5f 00 00       	callq  12dcf <vPortEnterCritical>
    ce95:	e8 a8 27 00 00       	callq  f642 <prvResetNextTaskUnblockTime>
    ce9a:	e8 5e 5f 00 00       	callq  12dfd <vPortExitCritical>
    ce9f:	48 8b 05 da 46 02 00 	mov    0x246da(%rip),%rax        # 31580 <pxCurrentTCB>
    cea6:	48 39 45 f8          	cmp    %rax,-0x8(%rbp)
    ceaa:	75 55                	jne    cf01 <vTaskSuspend+0x1a0>
    ceac:	48 8b 05 4d 49 02 00 	mov    0x2494d(%rip),%rax        # 31800 <xSchedulerRunning>
    ceb3:	48 85 c0             	test   %rax,%rax
    ceb6:	74 24                	je     cedc <vTaskSuspend+0x17b>
    ceb8:	48 8b 05 79 49 02 00 	mov    0x24979(%rip),%rax        # 31838 <uxSchedulerSuspended>
    cebf:	48 85 c0             	test   %rax,%rax
    cec2:	74 11                	je     ced5 <vTaskSuspend+0x174>
    cec4:	be fd 06 00 00       	mov    $0x6fd,%esi
    cec9:	48 8d 3d 10 aa 01 00 	lea    0x1aa10(%rip),%rdi        # 278e0 <_IO_stdin_used+0x8e0>
    ced0:	e8 37 6e ff ff       	callq  3d0c <vAssertCalled>
    ced5:	e8 9a 5f 00 00       	callq  12e74 <vPortYield>
    ceda:	eb 25                	jmp    cf01 <vTaskSuspend+0x1a0>
    cedc:	48 8b 15 dd 48 02 00 	mov    0x248dd(%rip),%rdx        # 317c0 <xSuspendedTaskList>
    cee3:	48 8b 05 fe 48 02 00 	mov    0x248fe(%rip),%rax        # 317e8 <uxCurrentNumberOfTasks>
    ceea:	48 39 c2             	cmp    %rax,%rdx
    ceed:	75 0d                	jne    cefc <vTaskSuspend+0x19b>
    ceef:	48 c7 05 86 46 02 00 	movq   $0x0,0x24686(%rip)        # 31580 <pxCurrentTCB>
    cef6:	00 00 00 00 
    cefa:	eb 05                	jmp    cf01 <vTaskSuspend+0x1a0>
    cefc:	e8 0b 16 00 00       	callq  e50c <vTaskSwitchContext>
    cf01:	90                   	nop
    cf02:	c9                   	leaveq 
    cf03:	c3                   	retq   

000000000000cf04 <prvTaskIsTaskSuspended>:
    cf04:	f3 0f 1e fa          	endbr64 
    cf08:	55                   	push   %rbp
    cf09:	48 89 e5             	mov    %rsp,%rbp
    cf0c:	48 83 ec 20          	sub    $0x20,%rsp
    cf10:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
    cf14:	48 c7 45 f0 00 00 00 	movq   $0x0,-0x10(%rbp)
    cf1b:	00 
    cf1c:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
    cf20:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
    cf24:	48 83 7d e8 00       	cmpq   $0x0,-0x18(%rbp)
    cf29:	75 11                	jne    cf3c <prvTaskIsTaskSuspended+0x38>
    cf2b:	be 27 07 00 00       	mov    $0x727,%esi
    cf30:	48 8d 3d a9 a9 01 00 	lea    0x1a9a9(%rip),%rdi        # 278e0 <_IO_stdin_used+0x8e0>
    cf37:	e8 d0 6d ff ff       	callq  3d0c <vAssertCalled>
    cf3c:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    cf40:	48 8b 40 28          	mov    0x28(%rax),%rax
    cf44:	48 8d 15 75 48 02 00 	lea    0x24875(%rip),%rdx        # 317c0 <xSuspendedTaskList>
    cf4b:	48 39 d0             	cmp    %rdx,%rax
    cf4e:	75 29                	jne    cf79 <prvTaskIsTaskSuspended+0x75>
    cf50:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    cf54:	48 8b 40 50          	mov    0x50(%rax),%rax
    cf58:	48 8d 15 e1 47 02 00 	lea    0x247e1(%rip),%rdx        # 31740 <xPendingReadyList>
    cf5f:	48 39 d0             	cmp    %rdx,%rax
    cf62:	74 15                	je     cf79 <prvTaskIsTaskSuspended+0x75>
    cf64:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    cf68:	48 8b 40 50          	mov    0x50(%rax),%rax
    cf6c:	48 85 c0             	test   %rax,%rax
    cf6f:	75 08                	jne    cf79 <prvTaskIsTaskSuspended+0x75>
    cf71:	48 c7 45 f0 01 00 00 	movq   $0x1,-0x10(%rbp)
    cf78:	00 
    cf79:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
    cf7d:	c9                   	leaveq 
    cf7e:	c3                   	retq   

000000000000cf7f <vTaskResume>:
    cf7f:	f3 0f 1e fa          	endbr64 
    cf83:	55                   	push   %rbp
    cf84:	48 89 e5             	mov    %rsp,%rbp
    cf87:	48 83 ec 20          	sub    $0x20,%rsp
    cf8b:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
    cf8f:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
    cf93:	48 89 45 f0          	mov    %rax,-0x10(%rbp)
    cf97:	48 83 7d e8 00       	cmpq   $0x0,-0x18(%rbp)
    cf9c:	75 11                	jne    cfaf <vTaskResume+0x30>
    cf9e:	be 51 07 00 00       	mov    $0x751,%esi
    cfa3:	48 8d 3d 36 a9 01 00 	lea    0x1a936(%rip),%rdi        # 278e0 <_IO_stdin_used+0x8e0>
    cfaa:	e8 5d 6d ff ff       	callq  3d0c <vAssertCalled>
    cfaf:	48 8b 05 ca 45 02 00 	mov    0x245ca(%rip),%rax        # 31580 <pxCurrentTCB>
    cfb6:	48 39 45 f0          	cmp    %rax,-0x10(%rbp)
    cfba:	0f 84 d3 01 00 00    	je     d193 <vTaskResume+0x214>
    cfc0:	48 83 7d f0 00       	cmpq   $0x0,-0x10(%rbp)
    cfc5:	0f 84 c8 01 00 00    	je     d193 <vTaskResume+0x214>
    cfcb:	e8 ff 5d 00 00       	callq  12dcf <vPortEnterCritical>
    cfd0:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
    cfd4:	48 89 c7             	mov    %rax,%rdi
    cfd7:	e8 28 ff ff ff       	callq  cf04 <prvTaskIsTaskSuspended>
    cfdc:	48 85 c0             	test   %rax,%rax
    cfdf:	0f 84 a9 01 00 00    	je     d18e <vTaskResume+0x20f>
    cfe5:	e8 72 66 01 00       	callq  2365c <prvTraceGetCurrentTaskHandle>
    cfea:	48 89 c7             	mov    %rax,%rdi
    cfed:	e8 69 61 01 00       	callq  2315b <prvTraceGetTaskNumberHigh16>
    cff2:	0f b7 15 e3 40 02 00 	movzwl 0x240e3(%rip),%edx        # 310dc <CurrentFilterMask>
    cff9:	21 d0                	and    %edx,%eax
    cffb:	66 85 c0             	test   %ax,%ax
    cffe:	74 3a                	je     d03a <vTaskResume+0xbb>
    d000:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
    d004:	48 89 c7             	mov    %rax,%rdi
    d007:	e8 4f 61 01 00       	callq  2315b <prvTraceGetTaskNumberHigh16>
    d00c:	0f b7 15 c9 40 02 00 	movzwl 0x240c9(%rip),%edx        # 310dc <CurrentFilterMask>
    d013:	21 d0                	and    %edx,%eax
    d015:	66 85 c0             	test   %ax,%ax
    d018:	74 20                	je     d03a <vTaskResume+0xbb>
    d01a:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
    d01e:	48 89 c7             	mov    %rax,%rdi
    d021:	e8 17 61 01 00       	callq  2313d <prvTraceGetTaskNumberLow16>
    d026:	0f b6 c0             	movzbl %al,%eax
    d029:	89 c2                	mov    %eax,%edx
    d02b:	be 03 00 00 00       	mov    $0x3,%esi
    d030:	bf 8b 00 00 00       	mov    $0x8b,%edi
    d035:	e8 18 80 01 00       	callq  25052 <prvTraceStoreKernelCall>
    d03a:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
    d03e:	48 83 c0 08          	add    $0x8,%rax
    d042:	48 89 c7             	mov    %rax,%rdi
    d045:	e8 93 bd ff ff       	callq  8ddd <uxListRemove>
    d04a:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
    d04e:	48 89 c7             	mov    %rax,%rdi
    d051:	e8 05 61 01 00       	callq  2315b <prvTraceGetTaskNumberHigh16>
    d056:	0f b7 15 7f 40 02 00 	movzwl 0x2407f(%rip),%edx        # 310dc <CurrentFilterMask>
    d05d:	21 d0                	and    %edx,%eax
    d05f:	66 85 c0             	test   %ax,%ax
    d062:	74 16                	je     d07a <vTaskResume+0xfb>
    d064:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
    d068:	48 89 c7             	mov    %rax,%rdi
    d06b:	e8 cd 60 01 00       	callq  2313d <prvTraceGetTaskNumberLow16>
    d070:	0f b6 c0             	movzbl %al,%eax
    d073:	89 c7                	mov    %eax,%edi
    d075:	e8 f4 7c 01 00       	callq  24d6e <prvTraceStoreTaskReady>
    d07a:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
    d07e:	48 8b 50 58          	mov    0x58(%rax),%rdx
    d082:	48 8b 05 6f 47 02 00 	mov    0x2476f(%rip),%rax        # 317f8 <uxTopReadyPriority>
    d089:	48 39 c2             	cmp    %rax,%rdx
    d08c:	76 0f                	jbe    d09d <vTaskResume+0x11e>
    d08e:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
    d092:	48 8b 40 58          	mov    0x58(%rax),%rax
    d096:	48 89 05 5b 47 02 00 	mov    %rax,0x2475b(%rip)        # 317f8 <uxTopReadyPriority>
    d09d:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
    d0a1:	48 8b 50 58          	mov    0x58(%rax),%rdx
    d0a5:	48 89 d0             	mov    %rdx,%rax
    d0a8:	48 c1 e0 02          	shl    $0x2,%rax
    d0ac:	48 01 d0             	add    %rdx,%rax
    d0af:	48 c1 e0 03          	shl    $0x3,%rax
    d0b3:	48 89 c2             	mov    %rax,%rdx
    d0b6:	48 8d 05 eb 44 02 00 	lea    0x244eb(%rip),%rax        # 315a8 <pxReadyTasksLists+0x8>
    d0bd:	48 8b 04 02          	mov    (%rdx,%rax,1),%rax
    d0c1:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
    d0c5:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
    d0c9:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
    d0cd:	48 89 50 10          	mov    %rdx,0x10(%rax)
    d0d1:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    d0d5:	48 8b 50 10          	mov    0x10(%rax),%rdx
    d0d9:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
    d0dd:	48 89 50 18          	mov    %rdx,0x18(%rax)
    d0e1:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    d0e5:	48 8b 40 10          	mov    0x10(%rax),%rax
    d0e9:	48 8b 55 f0          	mov    -0x10(%rbp),%rdx
    d0ed:	48 83 c2 08          	add    $0x8,%rdx
    d0f1:	48 89 50 08          	mov    %rdx,0x8(%rax)
    d0f5:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
    d0f9:	48 8d 50 08          	lea    0x8(%rax),%rdx
    d0fd:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    d101:	48 89 50 10          	mov    %rdx,0x10(%rax)
    d105:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
    d109:	48 8b 50 58          	mov    0x58(%rax),%rdx
    d10d:	48 89 d0             	mov    %rdx,%rax
    d110:	48 c1 e0 02          	shl    $0x2,%rax
    d114:	48 01 d0             	add    %rdx,%rax
    d117:	48 c1 e0 03          	shl    $0x3,%rax
    d11b:	48 8d 15 7e 44 02 00 	lea    0x2447e(%rip),%rdx        # 315a0 <pxReadyTasksLists>
    d122:	48 01 c2             	add    %rax,%rdx
    d125:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
    d129:	48 89 50 28          	mov    %rdx,0x28(%rax)
    d12d:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
    d131:	48 8b 50 58          	mov    0x58(%rax),%rdx
    d135:	48 89 d0             	mov    %rdx,%rax
    d138:	48 c1 e0 02          	shl    $0x2,%rax
    d13c:	48 01 d0             	add    %rdx,%rax
    d13f:	48 c1 e0 03          	shl    $0x3,%rax
    d143:	48 89 c1             	mov    %rax,%rcx
    d146:	48 8d 05 53 44 02 00 	lea    0x24453(%rip),%rax        # 315a0 <pxReadyTasksLists>
    d14d:	48 8b 04 01          	mov    (%rcx,%rax,1),%rax
    d151:	48 8d 48 01          	lea    0x1(%rax),%rcx
    d155:	48 89 d0             	mov    %rdx,%rax
    d158:	48 c1 e0 02          	shl    $0x2,%rax
    d15c:	48 01 d0             	add    %rdx,%rax
    d15f:	48 c1 e0 03          	shl    $0x3,%rax
    d163:	48 89 c2             	mov    %rax,%rdx
    d166:	48 8d 05 33 44 02 00 	lea    0x24433(%rip),%rax        # 315a0 <pxReadyTasksLists>
    d16d:	48 89 0c 02          	mov    %rcx,(%rdx,%rax,1)
    d171:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
    d175:	48 8b 50 58          	mov    0x58(%rax),%rdx
    d179:	48 8b 05 00 44 02 00 	mov    0x24400(%rip),%rax        # 31580 <pxCurrentTCB>
    d180:	48 8b 40 58          	mov    0x58(%rax),%rax
    d184:	48 39 c2             	cmp    %rax,%rdx
    d187:	72 05                	jb     d18e <vTaskResume+0x20f>
    d189:	e8 e6 5c 00 00       	callq  12e74 <vPortYield>
    d18e:	e8 6a 5c 00 00       	callq  12dfd <vPortExitCritical>
    d193:	90                   	nop
    d194:	c9                   	leaveq 
    d195:	c3                   	retq   

000000000000d196 <xTaskResumeFromISR>:
    d196:	f3 0f 1e fa          	endbr64 
    d19a:	55                   	push   %rbp
    d19b:	48 89 e5             	mov    %rsp,%rbp
    d19e:	48 83 ec 30          	sub    $0x30,%rsp
    d1a2:	48 89 7d d8          	mov    %rdi,-0x28(%rbp)
    d1a6:	48 c7 45 e0 00 00 00 	movq   $0x0,-0x20(%rbp)
    d1ad:	00 
    d1ae:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
    d1b2:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
    d1b6:	48 83 7d d8 00       	cmpq   $0x0,-0x28(%rbp)
    d1bb:	75 11                	jne    d1ce <xTaskResumeFromISR+0x38>
    d1bd:	be 88 07 00 00       	mov    $0x788,%esi
    d1c2:	48 8d 3d 17 a7 01 00 	lea    0x1a717(%rip),%rdi        # 278e0 <_IO_stdin_used+0x8e0>
    d1c9:	e8 3e 6b ff ff       	callq  3d0c <vAssertCalled>
    d1ce:	e8 fd 5c 00 00       	callq  12ed0 <xPortSetInterruptMask>
    d1d3:	48 89 45 f0          	mov    %rax,-0x10(%rbp)
    d1d7:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
    d1db:	48 89 c7             	mov    %rax,%rdi
    d1de:	e8 21 fd ff ff       	callq  cf04 <prvTaskIsTaskSuspended>
    d1e3:	48 85 c0             	test   %rax,%rax
    d1e6:	0f 84 c5 01 00 00    	je     d3b1 <xTaskResumeFromISR+0x21b>
    d1ec:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
    d1f0:	48 89 c7             	mov    %rax,%rdi
    d1f3:	e8 63 5f 01 00       	callq  2315b <prvTraceGetTaskNumberHigh16>
    d1f8:	0f b7 15 dd 3e 02 00 	movzwl 0x23edd(%rip),%edx        # 310dc <CurrentFilterMask>
    d1ff:	21 d0                	and    %edx,%eax
    d201:	66 85 c0             	test   %ax,%ax
    d204:	74 20                	je     d226 <xTaskResumeFromISR+0x90>
    d206:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
    d20a:	48 89 c7             	mov    %rax,%rdi
    d20d:	e8 2b 5f 01 00       	callq  2313d <prvTraceGetTaskNumberLow16>
    d212:	0f b6 c0             	movzbl %al,%eax
    d215:	89 c2                	mov    %eax,%edx
    d217:	be 03 00 00 00       	mov    $0x3,%esi
    d21c:	bf 8c 00 00 00       	mov    $0x8c,%edi
    d221:	e8 2c 7e 01 00       	callq  25052 <prvTraceStoreKernelCall>
    d226:	48 8b 05 0b 46 02 00 	mov    0x2460b(%rip),%rax        # 31838 <uxSchedulerSuspended>
    d22d:	48 85 c0             	test   %rax,%rax
    d230:	0f 85 64 01 00 00    	jne    d39a <xTaskResumeFromISR+0x204>
    d236:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
    d23a:	48 8b 50 58          	mov    0x58(%rax),%rdx
    d23e:	48 8b 05 3b 43 02 00 	mov    0x2433b(%rip),%rax        # 31580 <pxCurrentTCB>
    d245:	48 8b 40 58          	mov    0x58(%rax),%rax
    d249:	48 39 c2             	cmp    %rax,%rdx
    d24c:	72 13                	jb     d261 <xTaskResumeFromISR+0xcb>
    d24e:	48 c7 45 e0 01 00 00 	movq   $0x1,-0x20(%rbp)
    d255:	00 
    d256:	48 c7 05 af 45 02 00 	movq   $0x1,0x245af(%rip)        # 31810 <xYieldPending>
    d25d:	01 00 00 00 
    d261:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
    d265:	48 83 c0 08          	add    $0x8,%rax
    d269:	48 89 c7             	mov    %rax,%rdi
    d26c:	e8 6c bb ff ff       	callq  8ddd <uxListRemove>
    d271:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
    d275:	48 89 c7             	mov    %rax,%rdi
    d278:	e8 de 5e 01 00       	callq  2315b <prvTraceGetTaskNumberHigh16>
    d27d:	0f b7 15 58 3e 02 00 	movzwl 0x23e58(%rip),%edx        # 310dc <CurrentFilterMask>
    d284:	21 d0                	and    %edx,%eax
    d286:	66 85 c0             	test   %ax,%ax
    d289:	74 16                	je     d2a1 <xTaskResumeFromISR+0x10b>
    d28b:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
    d28f:	48 89 c7             	mov    %rax,%rdi
    d292:	e8 a6 5e 01 00       	callq  2313d <prvTraceGetTaskNumberLow16>
    d297:	0f b6 c0             	movzbl %al,%eax
    d29a:	89 c7                	mov    %eax,%edi
    d29c:	e8 cd 7a 01 00       	callq  24d6e <prvTraceStoreTaskReady>
    d2a1:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
    d2a5:	48 8b 50 58          	mov    0x58(%rax),%rdx
    d2a9:	48 8b 05 48 45 02 00 	mov    0x24548(%rip),%rax        # 317f8 <uxTopReadyPriority>
    d2b0:	48 39 c2             	cmp    %rax,%rdx
    d2b3:	76 0f                	jbe    d2c4 <xTaskResumeFromISR+0x12e>
    d2b5:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
    d2b9:	48 8b 40 58          	mov    0x58(%rax),%rax
    d2bd:	48 89 05 34 45 02 00 	mov    %rax,0x24534(%rip)        # 317f8 <uxTopReadyPriority>
    d2c4:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
    d2c8:	48 8b 50 58          	mov    0x58(%rax),%rdx
    d2cc:	48 89 d0             	mov    %rdx,%rax
    d2cf:	48 c1 e0 02          	shl    $0x2,%rax
    d2d3:	48 01 d0             	add    %rdx,%rax
    d2d6:	48 c1 e0 03          	shl    $0x3,%rax
    d2da:	48 89 c2             	mov    %rax,%rdx
    d2dd:	48 8d 05 c4 42 02 00 	lea    0x242c4(%rip),%rax        # 315a8 <pxReadyTasksLists+0x8>
    d2e4:	48 8b 04 02          	mov    (%rdx,%rax,1),%rax
    d2e8:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
    d2ec:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
    d2f0:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
    d2f4:	48 89 50 10          	mov    %rdx,0x10(%rax)
    d2f8:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    d2fc:	48 8b 50 10          	mov    0x10(%rax),%rdx
    d300:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
    d304:	48 89 50 18          	mov    %rdx,0x18(%rax)
    d308:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    d30c:	48 8b 40 10          	mov    0x10(%rax),%rax
    d310:	48 8b 55 e8          	mov    -0x18(%rbp),%rdx
    d314:	48 83 c2 08          	add    $0x8,%rdx
    d318:	48 89 50 08          	mov    %rdx,0x8(%rax)
    d31c:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
    d320:	48 8d 50 08          	lea    0x8(%rax),%rdx
    d324:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    d328:	48 89 50 10          	mov    %rdx,0x10(%rax)
    d32c:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
    d330:	48 8b 50 58          	mov    0x58(%rax),%rdx
    d334:	48 89 d0             	mov    %rdx,%rax
    d337:	48 c1 e0 02          	shl    $0x2,%rax
    d33b:	48 01 d0             	add    %rdx,%rax
    d33e:	48 c1 e0 03          	shl    $0x3,%rax
    d342:	48 8d 15 57 42 02 00 	lea    0x24257(%rip),%rdx        # 315a0 <pxReadyTasksLists>
    d349:	48 01 c2             	add    %rax,%rdx
    d34c:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
    d350:	48 89 50 28          	mov    %rdx,0x28(%rax)
    d354:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
    d358:	48 8b 50 58          	mov    0x58(%rax),%rdx
    d35c:	48 89 d0             	mov    %rdx,%rax
    d35f:	48 c1 e0 02          	shl    $0x2,%rax
    d363:	48 01 d0             	add    %rdx,%rax
    d366:	48 c1 e0 03          	shl    $0x3,%rax
    d36a:	48 89 c1             	mov    %rax,%rcx
    d36d:	48 8d 05 2c 42 02 00 	lea    0x2422c(%rip),%rax        # 315a0 <pxReadyTasksLists>
    d374:	48 8b 04 01          	mov    (%rcx,%rax,1),%rax
    d378:	48 8d 48 01          	lea    0x1(%rax),%rcx
    d37c:	48 89 d0             	mov    %rdx,%rax
    d37f:	48 c1 e0 02          	shl    $0x2,%rax
    d383:	48 01 d0             	add    %rdx,%rax
    d386:	48 c1 e0 03          	shl    $0x3,%rax
    d38a:	48 89 c2             	mov    %rax,%rdx
    d38d:	48 8d 05 0c 42 02 00 	lea    0x2420c(%rip),%rax        # 315a0 <pxReadyTasksLists>
    d394:	48 89 0c 02          	mov    %rcx,(%rdx,%rax,1)
    d398:	eb 17                	jmp    d3b1 <xTaskResumeFromISR+0x21b>
    d39a:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
    d39e:	48 83 c0 30          	add    $0x30,%rax
    d3a2:	48 89 c6             	mov    %rax,%rsi
    d3a5:	48 8d 3d 94 43 02 00 	lea    0x24394(%rip),%rdi        # 31740 <xPendingReadyList>
    d3ac:	e8 03 b9 ff ff       	callq  8cb4 <vListInsertEnd>
    d3b1:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
    d3b5:	48 89 c7             	mov    %rax,%rdi
    d3b8:	e8 22 5b 00 00       	callq  12edf <vPortClearInterruptMask>
    d3bd:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
    d3c1:	c9                   	leaveq 
    d3c2:	c3                   	retq   

000000000000d3c3 <vTaskStartScheduler>:
    d3c3:	f3 0f 1e fa          	endbr64 
    d3c7:	55                   	push   %rbp
    d3c8:	48 89 e5             	mov    %rsp,%rbp
    d3cb:	48 83 ec 30          	sub    $0x30,%rsp
    d3cf:	64 48 8b 04 25 28 00 	mov    %fs:0x28,%rax
    d3d6:	00 00 
    d3d8:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
    d3dc:	31 c0                	xor    %eax,%eax
    d3de:	48 c7 45 e0 00 00 00 	movq   $0x0,-0x20(%rbp)
    d3e5:	00 
    d3e6:	48 c7 45 e8 00 00 00 	movq   $0x0,-0x18(%rbp)
    d3ed:	00 
    d3ee:	48 8d 55 dc          	lea    -0x24(%rbp),%rdx
    d3f2:	48 8d 4d e8          	lea    -0x18(%rbp),%rcx
    d3f6:	48 8d 45 e0          	lea    -0x20(%rbp),%rax
    d3fa:	48 89 ce             	mov    %rcx,%rsi
    d3fd:	48 89 c7             	mov    %rax,%rdi
    d400:	e8 db 69 ff ff       	callq  3de0 <vApplicationGetIdleTaskMemory>
    d405:	48 8b 55 e0          	mov    -0x20(%rbp),%rdx
    d409:	48 8b 4d e8          	mov    -0x18(%rbp),%rcx
    d40d:	8b 45 dc             	mov    -0x24(%rbp),%eax
    d410:	48 83 ec 08          	sub    $0x8,%rsp
    d414:	52                   	push   %rdx
    d415:	49 89 c9             	mov    %rcx,%r9
    d418:	41 b8 00 00 00 00    	mov    $0x0,%r8d
    d41e:	b9 00 00 00 00       	mov    $0x0,%ecx
    d423:	89 c2                	mov    %eax,%edx
    d425:	48 8d 35 e9 a4 01 00 	lea    0x1a4e9(%rip),%rsi        # 27915 <_IO_stdin_used+0x915>
    d42c:	48 8d 3d 19 1d 00 00 	lea    0x1d19(%rip),%rdi        # f14c <prvIdleTask>
    d433:	e8 a1 e7 ff ff       	callq  bbd9 <xTaskCreateStatic>
    d438:	48 83 c4 10          	add    $0x10,%rsp
    d43c:	48 89 05 ed 43 02 00 	mov    %rax,0x243ed(%rip)        # 31830 <xIdleTaskHandle>
    d443:	48 8b 05 e6 43 02 00 	mov    0x243e6(%rip),%rax        # 31830 <xIdleTaskHandle>
    d44a:	48 85 c0             	test   %rax,%rax
    d44d:	74 0a                	je     d459 <vTaskStartScheduler+0x96>
    d44f:	48 c7 45 f0 01 00 00 	movq   $0x1,-0x10(%rbp)
    d456:	00 
    d457:	eb 08                	jmp    d461 <vTaskStartScheduler+0x9e>
    d459:	48 c7 45 f0 00 00 00 	movq   $0x0,-0x10(%rbp)
    d460:	00 
    d461:	48 83 7d f0 01       	cmpq   $0x1,-0x10(%rbp)
    d466:	75 09                	jne    d471 <vTaskStartScheduler+0xae>
    d468:	e8 79 3e 00 00       	callq  112e6 <xTimerCreateTimerTask>
    d46d:	48 89 45 f0          	mov    %rax,-0x10(%rbp)
    d471:	48 83 7d f0 01       	cmpq   $0x1,-0x10(%rbp)
    d476:	75 73                	jne    d4eb <vTaskStartScheduler+0x128>
    d478:	e8 11 5a 00 00       	callq  12e8e <vPortDisableInterrupts>
    d47d:	48 c7 05 a0 43 02 00 	movq   $0xffffffffffffffff,0x243a0(%rip)        # 31828 <xNextTaskUnblockTime>
    d484:	ff ff ff ff 
    d488:	48 c7 05 6d 43 02 00 	movq   $0x1,0x2436d(%rip)        # 31800 <xSchedulerRunning>
    d48f:	01 00 00 00 
    d493:	48 c7 05 52 43 02 00 	movq   $0x0,0x24352(%rip)        # 317f0 <xTickCount>
    d49a:	00 00 00 00 
    d49e:	c7 05 e4 9b 12 00 01 	movl   $0x1,0x129be4(%rip)        # 13708c <uiTraceSystemState>
    d4a5:	00 00 00 
    d4a8:	e8 af 61 01 00       	callq  2365c <prvTraceGetCurrentTaskHandle>
    d4ad:	48 89 c7             	mov    %rax,%rdi
    d4b0:	e8 a6 5c 01 00       	callq  2315b <prvTraceGetTaskNumberHigh16>
    d4b5:	0f b7 15 20 3c 02 00 	movzwl 0x23c20(%rip),%edx        # 310dc <CurrentFilterMask>
    d4bc:	21 d0                	and    %edx,%eax
    d4be:	66 85 c0             	test   %ax,%ax
    d4c1:	74 17                	je     d4da <vTaskStartScheduler+0x117>
    d4c3:	e8 94 61 01 00       	callq  2365c <prvTraceGetCurrentTaskHandle>
    d4c8:	48 89 c7             	mov    %rax,%rdi
    d4cb:	e8 6d 5c 01 00       	callq  2313d <prvTraceGetTaskNumberLow16>
    d4d0:	0f b6 c0             	movzbl %al,%eax
    d4d3:	89 c7                	mov    %eax,%edi
    d4d5:	e8 4b 7f 01 00       	callq  25425 <prvTraceStoreTaskswitch>
    d4da:	c7 05 a8 9b 12 00 02 	movl   $0x2,0x129ba8(%rip)        # 13708c <uiTraceSystemState>
    d4e1:	00 00 00 
    d4e4:	e8 23 57 00 00       	callq  12c0c <xPortStartScheduler>
    d4e9:	eb 18                	jmp    d503 <vTaskStartScheduler+0x140>
    d4eb:	48 83 7d f0 ff       	cmpq   $0xffffffffffffffff,-0x10(%rbp)
    d4f0:	75 11                	jne    d503 <vTaskStartScheduler+0x140>
    d4f2:	be 40 08 00 00       	mov    $0x840,%esi
    d4f7:	48 8d 3d e2 a3 01 00 	lea    0x1a3e2(%rip),%rdi        # 278e0 <_IO_stdin_used+0x8e0>
    d4fe:	e8 09 68 ff ff       	callq  3d0c <vAssertCalled>
    d503:	48 8b 05 26 3b 02 00 	mov    0x23b26(%rip),%rax        # 31030 <uxTopUsedPriority>
    d50a:	90                   	nop
    d50b:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    d50f:	64 48 33 04 25 28 00 	xor    %fs:0x28,%rax
    d516:	00 00 
    d518:	74 05                	je     d51f <vTaskStartScheduler+0x15c>
    d51a:	e8 b1 4f ff ff       	callq  24d0 <__stack_chk_fail@plt>
    d51f:	c9                   	leaveq 
    d520:	c3                   	retq   

000000000000d521 <vTaskEndScheduler>:
    d521:	f3 0f 1e fa          	endbr64 
    d525:	55                   	push   %rbp
    d526:	48 89 e5             	mov    %rsp,%rbp
    d529:	e8 60 59 00 00       	callq  12e8e <vPortDisableInterrupts>
    d52e:	48 c7 05 c7 42 02 00 	movq   $0x0,0x242c7(%rip)        # 31800 <xSchedulerRunning>
    d535:	00 00 00 00 
    d539:	e8 97 57 00 00       	callq  12cd5 <vPortEndScheduler>
    d53e:	90                   	nop
    d53f:	5d                   	pop    %rbp
    d540:	c3                   	retq   

000000000000d541 <vTaskSuspendAll>:
    d541:	f3 0f 1e fa          	endbr64 
    d545:	55                   	push   %rbp
    d546:	48 89 e5             	mov    %rsp,%rbp
    d549:	48 8b 05 e8 42 02 00 	mov    0x242e8(%rip),%rax        # 31838 <uxSchedulerSuspended>
    d550:	48 83 c0 01          	add    $0x1,%rax
    d554:	48 89 05 dd 42 02 00 	mov    %rax,0x242dd(%rip)        # 31838 <uxSchedulerSuspended>
    d55b:	90                   	nop
    d55c:	5d                   	pop    %rbp
    d55d:	c3                   	retq   

000000000000d55e <xTaskResumeAll>:
    d55e:	f3 0f 1e fa          	endbr64 
    d562:	55                   	push   %rbp
    d563:	48 89 e5             	mov    %rsp,%rbp
    d566:	48 83 ec 30          	sub    $0x30,%rsp
    d56a:	48 c7 45 d0 00 00 00 	movq   $0x0,-0x30(%rbp)
    d571:	00 
    d572:	48 c7 45 d8 00 00 00 	movq   $0x0,-0x28(%rbp)
    d579:	00 
    d57a:	48 8b 05 b7 42 02 00 	mov    0x242b7(%rip),%rax        # 31838 <uxSchedulerSuspended>
    d581:	48 85 c0             	test   %rax,%rax
    d584:	75 11                	jne    d597 <xTaskResumeAll+0x39>
    d586:	be b3 08 00 00       	mov    $0x8b3,%esi
    d58b:	48 8d 3d 4e a3 01 00 	lea    0x1a34e(%rip),%rdi        # 278e0 <_IO_stdin_used+0x8e0>
    d592:	e8 75 67 ff ff       	callq  3d0c <vAssertCalled>
    d597:	e8 33 58 00 00       	callq  12dcf <vPortEnterCritical>
    d59c:	48 8b 05 95 42 02 00 	mov    0x24295(%rip),%rax        # 31838 <uxSchedulerSuspended>
    d5a3:	48 83 e8 01          	sub    $0x1,%rax
    d5a7:	48 89 05 8a 42 02 00 	mov    %rax,0x2428a(%rip)        # 31838 <uxSchedulerSuspended>
    d5ae:	48 8b 05 83 42 02 00 	mov    0x24283(%rip),%rax        # 31838 <uxSchedulerSuspended>
    d5b5:	48 85 c0             	test   %rax,%rax
    d5b8:	0f 85 cf 02 00 00    	jne    d88d <xTaskResumeAll+0x32f>
    d5be:	48 8b 05 23 42 02 00 	mov    0x24223(%rip),%rax        # 317e8 <uxCurrentNumberOfTasks>
    d5c5:	48 85 c0             	test   %rax,%rax
    d5c8:	0f 84 bf 02 00 00    	je     d88d <xTaskResumeAll+0x32f>
    d5ce:	e9 47 02 00 00       	jmpq   d81a <xTaskResumeAll+0x2bc>
    d5d3:	48 8b 05 7e 41 02 00 	mov    0x2417e(%rip),%rax        # 31758 <xPendingReadyList+0x18>
    d5da:	48 8b 40 18          	mov    0x18(%rax),%rax
    d5de:	48 89 45 d0          	mov    %rax,-0x30(%rbp)
    d5e2:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
    d5e6:	48 8b 40 50          	mov    0x50(%rax),%rax
    d5ea:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
    d5ee:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
    d5f2:	48 8b 40 38          	mov    0x38(%rax),%rax
    d5f6:	48 8b 55 d0          	mov    -0x30(%rbp),%rdx
    d5fa:	48 8b 52 40          	mov    0x40(%rdx),%rdx
    d5fe:	48 89 50 10          	mov    %rdx,0x10(%rax)
    d602:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
    d606:	48 8b 40 40          	mov    0x40(%rax),%rax
    d60a:	48 8b 55 d0          	mov    -0x30(%rbp),%rdx
    d60e:	48 8b 52 38          	mov    0x38(%rdx),%rdx
    d612:	48 89 50 08          	mov    %rdx,0x8(%rax)
    d616:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
    d61a:	48 8b 40 08          	mov    0x8(%rax),%rax
    d61e:	48 8b 55 d0          	mov    -0x30(%rbp),%rdx
    d622:	48 83 c2 30          	add    $0x30,%rdx
    d626:	48 39 d0             	cmp    %rdx,%rax
    d629:	75 10                	jne    d63b <xTaskResumeAll+0xdd>
    d62b:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
    d62f:	48 8b 50 40          	mov    0x40(%rax),%rdx
    d633:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
    d637:	48 89 50 08          	mov    %rdx,0x8(%rax)
    d63b:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
    d63f:	48 c7 40 50 00 00 00 	movq   $0x0,0x50(%rax)
    d646:	00 
    d647:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
    d64b:	48 8b 00             	mov    (%rax),%rax
    d64e:	48 8d 50 ff          	lea    -0x1(%rax),%rdx
    d652:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
    d656:	48 89 10             	mov    %rdx,(%rax)
    d659:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
    d65d:	48 8b 40 28          	mov    0x28(%rax),%rax
    d661:	48 89 45 f0          	mov    %rax,-0x10(%rbp)
    d665:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
    d669:	48 8b 40 10          	mov    0x10(%rax),%rax
    d66d:	48 8b 55 d0          	mov    -0x30(%rbp),%rdx
    d671:	48 8b 52 18          	mov    0x18(%rdx),%rdx
    d675:	48 89 50 10          	mov    %rdx,0x10(%rax)
    d679:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
    d67d:	48 8b 40 18          	mov    0x18(%rax),%rax
    d681:	48 8b 55 d0          	mov    -0x30(%rbp),%rdx
    d685:	48 8b 52 10          	mov    0x10(%rdx),%rdx
    d689:	48 89 50 08          	mov    %rdx,0x8(%rax)
    d68d:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
    d691:	48 8b 40 08          	mov    0x8(%rax),%rax
    d695:	48 8b 55 d0          	mov    -0x30(%rbp),%rdx
    d699:	48 83 c2 08          	add    $0x8,%rdx
    d69d:	48 39 d0             	cmp    %rdx,%rax
    d6a0:	75 10                	jne    d6b2 <xTaskResumeAll+0x154>
    d6a2:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
    d6a6:	48 8b 50 18          	mov    0x18(%rax),%rdx
    d6aa:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
    d6ae:	48 89 50 08          	mov    %rdx,0x8(%rax)
    d6b2:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
    d6b6:	48 c7 40 28 00 00 00 	movq   $0x0,0x28(%rax)
    d6bd:	00 
    d6be:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
    d6c2:	48 8b 00             	mov    (%rax),%rax
    d6c5:	48 8d 50 ff          	lea    -0x1(%rax),%rdx
    d6c9:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
    d6cd:	48 89 10             	mov    %rdx,(%rax)
    d6d0:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
    d6d4:	48 89 c7             	mov    %rax,%rdi
    d6d7:	e8 7f 5a 01 00       	callq  2315b <prvTraceGetTaskNumberHigh16>
    d6dc:	0f b7 15 f9 39 02 00 	movzwl 0x239f9(%rip),%edx        # 310dc <CurrentFilterMask>
    d6e3:	21 d0                	and    %edx,%eax
    d6e5:	66 85 c0             	test   %ax,%ax
    d6e8:	74 16                	je     d700 <xTaskResumeAll+0x1a2>
    d6ea:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
    d6ee:	48 89 c7             	mov    %rax,%rdi
    d6f1:	e8 47 5a 01 00       	callq  2313d <prvTraceGetTaskNumberLow16>
    d6f6:	0f b6 c0             	movzbl %al,%eax
    d6f9:	89 c7                	mov    %eax,%edi
    d6fb:	e8 6e 76 01 00       	callq  24d6e <prvTraceStoreTaskReady>
    d700:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
    d704:	48 8b 50 58          	mov    0x58(%rax),%rdx
    d708:	48 8b 05 e9 40 02 00 	mov    0x240e9(%rip),%rax        # 317f8 <uxTopReadyPriority>
    d70f:	48 39 c2             	cmp    %rax,%rdx
    d712:	76 0f                	jbe    d723 <xTaskResumeAll+0x1c5>
    d714:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
    d718:	48 8b 40 58          	mov    0x58(%rax),%rax
    d71c:	48 89 05 d5 40 02 00 	mov    %rax,0x240d5(%rip)        # 317f8 <uxTopReadyPriority>
    d723:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
    d727:	48 8b 50 58          	mov    0x58(%rax),%rdx
    d72b:	48 89 d0             	mov    %rdx,%rax
    d72e:	48 c1 e0 02          	shl    $0x2,%rax
    d732:	48 01 d0             	add    %rdx,%rax
    d735:	48 c1 e0 03          	shl    $0x3,%rax
    d739:	48 89 c2             	mov    %rax,%rdx
    d73c:	48 8d 05 65 3e 02 00 	lea    0x23e65(%rip),%rax        # 315a8 <pxReadyTasksLists+0x8>
    d743:	48 8b 04 02          	mov    (%rdx,%rax,1),%rax
    d747:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
    d74b:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
    d74f:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
    d753:	48 89 50 10          	mov    %rdx,0x10(%rax)
    d757:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    d75b:	48 8b 50 10          	mov    0x10(%rax),%rdx
    d75f:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
    d763:	48 89 50 18          	mov    %rdx,0x18(%rax)
    d767:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    d76b:	48 8b 40 10          	mov    0x10(%rax),%rax
    d76f:	48 8b 55 d0          	mov    -0x30(%rbp),%rdx
    d773:	48 83 c2 08          	add    $0x8,%rdx
    d777:	48 89 50 08          	mov    %rdx,0x8(%rax)
    d77b:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
    d77f:	48 8d 50 08          	lea    0x8(%rax),%rdx
    d783:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    d787:	48 89 50 10          	mov    %rdx,0x10(%rax)
    d78b:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
    d78f:	48 8b 50 58          	mov    0x58(%rax),%rdx
    d793:	48 89 d0             	mov    %rdx,%rax
    d796:	48 c1 e0 02          	shl    $0x2,%rax
    d79a:	48 01 d0             	add    %rdx,%rax
    d79d:	48 c1 e0 03          	shl    $0x3,%rax
    d7a1:	48 8d 15 f8 3d 02 00 	lea    0x23df8(%rip),%rdx        # 315a0 <pxReadyTasksLists>
    d7a8:	48 01 c2             	add    %rax,%rdx
    d7ab:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
    d7af:	48 89 50 28          	mov    %rdx,0x28(%rax)
    d7b3:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
    d7b7:	48 8b 50 58          	mov    0x58(%rax),%rdx
    d7bb:	48 89 d0             	mov    %rdx,%rax
    d7be:	48 c1 e0 02          	shl    $0x2,%rax
    d7c2:	48 01 d0             	add    %rdx,%rax
    d7c5:	48 c1 e0 03          	shl    $0x3,%rax
    d7c9:	48 89 c1             	mov    %rax,%rcx
    d7cc:	48 8d 05 cd 3d 02 00 	lea    0x23dcd(%rip),%rax        # 315a0 <pxReadyTasksLists>
    d7d3:	48 8b 04 01          	mov    (%rcx,%rax,1),%rax
    d7d7:	48 8d 48 01          	lea    0x1(%rax),%rcx
    d7db:	48 89 d0             	mov    %rdx,%rax
    d7de:	48 c1 e0 02          	shl    $0x2,%rax
    d7e2:	48 01 d0             	add    %rdx,%rax
    d7e5:	48 c1 e0 03          	shl    $0x3,%rax
    d7e9:	48 89 c2             	mov    %rax,%rdx
    d7ec:	48 8d 05 ad 3d 02 00 	lea    0x23dad(%rip),%rax        # 315a0 <pxReadyTasksLists>
    d7f3:	48 89 0c 02          	mov    %rcx,(%rdx,%rax,1)
    d7f7:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
    d7fb:	48 8b 50 58          	mov    0x58(%rax),%rdx
    d7ff:	48 8b 05 7a 3d 02 00 	mov    0x23d7a(%rip),%rax        # 31580 <pxCurrentTCB>
    d806:	48 8b 40 58          	mov    0x58(%rax),%rax
    d80a:	48 39 c2             	cmp    %rax,%rdx
    d80d:	72 0b                	jb     d81a <xTaskResumeAll+0x2bc>
    d80f:	48 c7 05 f6 3f 02 00 	movq   $0x1,0x23ff6(%rip)        # 31810 <xYieldPending>
    d816:	01 00 00 00 
    d81a:	48 8b 05 1f 3f 02 00 	mov    0x23f1f(%rip),%rax        # 31740 <xPendingReadyList>
    d821:	48 85 c0             	test   %rax,%rax
    d824:	0f 85 a9 fd ff ff    	jne    d5d3 <xTaskResumeAll+0x75>
    d82a:	48 83 7d d0 00       	cmpq   $0x0,-0x30(%rbp)
    d82f:	74 05                	je     d836 <xTaskResumeAll+0x2d8>
    d831:	e8 0c 1e 00 00       	callq  f642 <prvResetNextTaskUnblockTime>
    d836:	48 8b 05 cb 3f 02 00 	mov    0x23fcb(%rip),%rax        # 31808 <xPendedTicks>
    d83d:	48 89 45 e0          	mov    %rax,-0x20(%rbp)
    d841:	48 83 7d e0 00       	cmpq   $0x0,-0x20(%rbp)
    d846:	74 2c                	je     d874 <xTaskResumeAll+0x316>
    d848:	e8 51 07 00 00       	callq  df9e <xTaskIncrementTick>
    d84d:	48 85 c0             	test   %rax,%rax
    d850:	74 0b                	je     d85d <xTaskResumeAll+0x2ff>
    d852:	48 c7 05 b3 3f 02 00 	movq   $0x1,0x23fb3(%rip)        # 31810 <xYieldPending>
    d859:	01 00 00 00 
    d85d:	48 83 6d e0 01       	subq   $0x1,-0x20(%rbp)
    d862:	48 83 7d e0 00       	cmpq   $0x0,-0x20(%rbp)
    d867:	75 df                	jne    d848 <xTaskResumeAll+0x2ea>
    d869:	48 c7 05 94 3f 02 00 	movq   $0x0,0x23f94(%rip)        # 31808 <xPendedTicks>
    d870:	00 00 00 00 
    d874:	48 8b 05 95 3f 02 00 	mov    0x23f95(%rip),%rax        # 31810 <xYieldPending>
    d87b:	48 85 c0             	test   %rax,%rax
    d87e:	74 0d                	je     d88d <xTaskResumeAll+0x32f>
    d880:	48 c7 45 d8 01 00 00 	movq   $0x1,-0x28(%rbp)
    d887:	00 
    d888:	e8 e7 55 00 00       	callq  12e74 <vPortYield>
    d88d:	e8 6b 55 00 00       	callq  12dfd <vPortExitCritical>
    d892:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
    d896:	c9                   	leaveq 
    d897:	c3                   	retq   

000000000000d898 <xTaskGetTickCount>:
    d898:	f3 0f 1e fa          	endbr64 
    d89c:	55                   	push   %rbp
    d89d:	48 89 e5             	mov    %rsp,%rbp
    d8a0:	48 8b 05 49 3f 02 00 	mov    0x23f49(%rip),%rax        # 317f0 <xTickCount>
    d8a7:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
    d8ab:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    d8af:	5d                   	pop    %rbp
    d8b0:	c3                   	retq   

000000000000d8b1 <xTaskGetTickCountFromISR>:
    d8b1:	f3 0f 1e fa          	endbr64 
    d8b5:	55                   	push   %rbp
    d8b6:	48 89 e5             	mov    %rsp,%rbp
    d8b9:	48 c7 45 f0 00 00 00 	movq   $0x0,-0x10(%rbp)
    d8c0:	00 
    d8c1:	48 8b 05 28 3f 02 00 	mov    0x23f28(%rip),%rax        # 317f0 <xTickCount>
    d8c8:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
    d8cc:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    d8d0:	5d                   	pop    %rbp
    d8d1:	c3                   	retq   

000000000000d8d2 <uxTaskGetNumberOfTasks>:
    d8d2:	f3 0f 1e fa          	endbr64 
    d8d6:	55                   	push   %rbp
    d8d7:	48 89 e5             	mov    %rsp,%rbp
    d8da:	48 8b 05 07 3f 02 00 	mov    0x23f07(%rip),%rax        # 317e8 <uxCurrentNumberOfTasks>
    d8e1:	5d                   	pop    %rbp
    d8e2:	c3                   	retq   

000000000000d8e3 <pcTaskGetName>:
    d8e3:	f3 0f 1e fa          	endbr64 
    d8e7:	55                   	push   %rbp
    d8e8:	48 89 e5             	mov    %rsp,%rbp
    d8eb:	48 83 ec 20          	sub    $0x20,%rsp
    d8ef:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
    d8f3:	48 83 7d e8 00       	cmpq   $0x0,-0x18(%rbp)
    d8f8:	75 09                	jne    d903 <pcTaskGetName+0x20>
    d8fa:	48 8b 05 7f 3c 02 00 	mov    0x23c7f(%rip),%rax        # 31580 <pxCurrentTCB>
    d901:	eb 04                	jmp    d907 <pcTaskGetName+0x24>
    d903:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
    d907:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
    d90b:	48 83 7d f8 00       	cmpq   $0x0,-0x8(%rbp)
    d910:	75 11                	jne    d923 <pcTaskGetName+0x40>
    d912:	be 59 09 00 00       	mov    $0x959,%esi
    d917:	48 8d 3d c2 9f 01 00 	lea    0x19fc2(%rip),%rdi        # 278e0 <_IO_stdin_used+0x8e0>
    d91e:	e8 e9 63 ff ff       	callq  3d0c <vAssertCalled>
    d923:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    d927:	48 83 c0 68          	add    $0x68,%rax
    d92b:	c9                   	leaveq 
    d92c:	c3                   	retq   

000000000000d92d <prvSearchForNameWithinSingleList>:
    d92d:	f3 0f 1e fa          	endbr64 
    d931:	55                   	push   %rbp
    d932:	48 89 e5             	mov    %rsp,%rbp
    d935:	48 89 7d b8          	mov    %rdi,-0x48(%rbp)
    d939:	48 89 75 b0          	mov    %rsi,-0x50(%rbp)
    d93d:	48 c7 45 c8 00 00 00 	movq   $0x0,-0x38(%rbp)
    d944:	00 
    d945:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
    d949:	48 8b 00             	mov    (%rax),%rax
    d94c:	48 85 c0             	test   %rax,%rax
    d94f:	0f 84 32 01 00 00    	je     da87 <prvSearchForNameWithinSingleList+0x15a>
    d955:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
    d959:	48 89 45 e0          	mov    %rax,-0x20(%rbp)
    d95d:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
    d961:	48 8b 40 08          	mov    0x8(%rax),%rax
    d965:	48 8b 50 08          	mov    0x8(%rax),%rdx
    d969:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
    d96d:	48 89 50 08          	mov    %rdx,0x8(%rax)
    d971:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
    d975:	48 8b 40 08          	mov    0x8(%rax),%rax
    d979:	48 8b 55 e0          	mov    -0x20(%rbp),%rdx
    d97d:	48 83 c2 10          	add    $0x10,%rdx
    d981:	48 39 d0             	cmp    %rdx,%rax
    d984:	75 14                	jne    d99a <prvSearchForNameWithinSingleList+0x6d>
    d986:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
    d98a:	48 8b 40 08          	mov    0x8(%rax),%rax
    d98e:	48 8b 50 08          	mov    0x8(%rax),%rdx
    d992:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
    d996:	48 89 50 08          	mov    %rdx,0x8(%rax)
    d99a:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
    d99e:	48 8b 40 08          	mov    0x8(%rax),%rax
    d9a2:	48 8b 40 18          	mov    0x18(%rax),%rax
    d9a6:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
    d9aa:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
    d9ae:	48 89 45 f0          	mov    %rax,-0x10(%rbp)
    d9b2:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
    d9b6:	48 8b 40 08          	mov    0x8(%rax),%rax
    d9ba:	48 8b 50 08          	mov    0x8(%rax),%rdx
    d9be:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
    d9c2:	48 89 50 08          	mov    %rdx,0x8(%rax)
    d9c6:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
    d9ca:	48 8b 40 08          	mov    0x8(%rax),%rax
    d9ce:	48 8b 55 f0          	mov    -0x10(%rbp),%rdx
    d9d2:	48 83 c2 10          	add    $0x10,%rdx
    d9d6:	48 39 d0             	cmp    %rdx,%rax
    d9d9:	75 14                	jne    d9ef <prvSearchForNameWithinSingleList+0xc2>
    d9db:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
    d9df:	48 8b 40 08          	mov    0x8(%rax),%rax
    d9e3:	48 8b 50 08          	mov    0x8(%rax),%rdx
    d9e7:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
    d9eb:	48 89 50 08          	mov    %rdx,0x8(%rax)
    d9ef:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
    d9f3:	48 8b 40 08          	mov    0x8(%rax),%rax
    d9f7:	48 8b 40 18          	mov    0x18(%rax),%rax
    d9fb:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
    d9ff:	48 c7 45 d8 00 00 00 	movq   $0x0,-0x28(%rbp)
    da06:	00 
    da07:	48 c7 45 d0 00 00 00 	movq   $0x0,-0x30(%rbp)
    da0e:	00 
    da0f:	eb 54                	jmp    da65 <prvSearchForNameWithinSingleList+0x138>
    da11:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
    da15:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
    da19:	48 01 d0             	add    %rdx,%rax
    da1c:	48 83 c0 68          	add    $0x68,%rax
    da20:	0f b6 00             	movzbl (%rax),%eax
    da23:	88 45 c7             	mov    %al,-0x39(%rbp)
    da26:	48 8b 55 b0          	mov    -0x50(%rbp),%rdx
    da2a:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
    da2e:	48 01 d0             	add    %rdx,%rax
    da31:	0f b6 00             	movzbl (%rax),%eax
    da34:	38 45 c7             	cmp    %al,-0x39(%rbp)
    da37:	74 0a                	je     da43 <prvSearchForNameWithinSingleList+0x116>
    da39:	48 c7 45 d8 01 00 00 	movq   $0x1,-0x28(%rbp)
    da40:	00 
    da41:	eb 16                	jmp    da59 <prvSearchForNameWithinSingleList+0x12c>
    da43:	80 7d c7 00          	cmpb   $0x0,-0x39(%rbp)
    da47:	75 10                	jne    da59 <prvSearchForNameWithinSingleList+0x12c>
    da49:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    da4d:	48 89 45 c8          	mov    %rax,-0x38(%rbp)
    da51:	48 c7 45 d8 01 00 00 	movq   $0x1,-0x28(%rbp)
    da58:	00 
    da59:	48 83 7d d8 00       	cmpq   $0x0,-0x28(%rbp)
    da5e:	75 0e                	jne    da6e <prvSearchForNameWithinSingleList+0x141>
    da60:	48 83 45 d0 01       	addq   $0x1,-0x30(%rbp)
    da65:	48 83 7d d0 0b       	cmpq   $0xb,-0x30(%rbp)
    da6a:	76 a5                	jbe    da11 <prvSearchForNameWithinSingleList+0xe4>
    da6c:	eb 01                	jmp    da6f <prvSearchForNameWithinSingleList+0x142>
    da6e:	90                   	nop
    da6f:	48 83 7d c8 00       	cmpq   $0x0,-0x38(%rbp)
    da74:	75 10                	jne    da86 <prvSearchForNameWithinSingleList+0x159>
    da76:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    da7a:	48 3b 45 e8          	cmp    -0x18(%rbp),%rax
    da7e:	0f 85 26 ff ff ff    	jne    d9aa <prvSearchForNameWithinSingleList+0x7d>
    da84:	eb 01                	jmp    da87 <prvSearchForNameWithinSingleList+0x15a>
    da86:	90                   	nop
    da87:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
    da8b:	5d                   	pop    %rbp
    da8c:	c3                   	retq   

000000000000da8d <xTaskGetHandle>:
    da8d:	f3 0f 1e fa          	endbr64 
    da91:	55                   	push   %rbp
    da92:	48 89 e5             	mov    %rsp,%rbp
    da95:	48 83 ec 20          	sub    $0x20,%rsp
    da99:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
    da9d:	48 c7 45 f0 07 00 00 	movq   $0x7,-0x10(%rbp)
    daa4:	00 
    daa5:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
    daa9:	48 89 c7             	mov    %rax,%rdi
    daac:	e8 ff 49 ff ff       	callq  24b0 <strlen@plt>
    dab1:	48 83 f8 0b          	cmp    $0xb,%rax
    dab5:	76 11                	jbe    dac8 <xTaskGetHandle+0x3b>
    dab7:	be ab 09 00 00       	mov    $0x9ab,%esi
    dabc:	48 8d 3d 1d 9e 01 00 	lea    0x19e1d(%rip),%rdi        # 278e0 <_IO_stdin_used+0x8e0>
    dac3:	e8 44 62 ff ff       	callq  3d0c <vAssertCalled>
    dac8:	e8 74 fa ff ff       	callq  d541 <vTaskSuspendAll>
    dacd:	48 83 6d f0 01       	subq   $0x1,-0x10(%rbp)
    dad2:	48 8b 55 f0          	mov    -0x10(%rbp),%rdx
    dad6:	48 89 d0             	mov    %rdx,%rax
    dad9:	48 c1 e0 02          	shl    $0x2,%rax
    dadd:	48 01 d0             	add    %rdx,%rax
    dae0:	48 c1 e0 03          	shl    $0x3,%rax
    dae4:	48 8d 15 b5 3a 02 00 	lea    0x23ab5(%rip),%rdx        # 315a0 <pxReadyTasksLists>
    daeb:	48 01 c2             	add    %rax,%rdx
    daee:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
    daf2:	48 89 c6             	mov    %rax,%rsi
    daf5:	48 89 d7             	mov    %rdx,%rdi
    daf8:	e8 30 fe ff ff       	callq  d92d <prvSearchForNameWithinSingleList>
    dafd:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
    db01:	48 83 7d f8 00       	cmpq   $0x0,-0x8(%rbp)
    db06:	75 09                	jne    db11 <xTaskGetHandle+0x84>
    db08:	48 83 7d f0 00       	cmpq   $0x0,-0x10(%rbp)
    db0d:	75 be                	jne    dacd <xTaskGetHandle+0x40>
    db0f:	eb 01                	jmp    db12 <xTaskGetHandle+0x85>
    db11:	90                   	nop
    db12:	48 83 7d f8 00       	cmpq   $0x0,-0x8(%rbp)
    db17:	75 1a                	jne    db33 <xTaskGetHandle+0xa6>
    db19:	48 8b 05 08 3c 02 00 	mov    0x23c08(%rip),%rax        # 31728 <pxDelayedTaskList>
    db20:	48 8b 55 e8          	mov    -0x18(%rbp),%rdx
    db24:	48 89 d6             	mov    %rdx,%rsi
    db27:	48 89 c7             	mov    %rax,%rdi
    db2a:	e8 fe fd ff ff       	callq  d92d <prvSearchForNameWithinSingleList>
    db2f:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
    db33:	48 83 7d f8 00       	cmpq   $0x0,-0x8(%rbp)
    db38:	75 1a                	jne    db54 <xTaskGetHandle+0xc7>
    db3a:	48 8b 05 ef 3b 02 00 	mov    0x23bef(%rip),%rax        # 31730 <pxOverflowDelayedTaskList>
    db41:	48 8b 55 e8          	mov    -0x18(%rbp),%rdx
    db45:	48 89 d6             	mov    %rdx,%rsi
    db48:	48 89 c7             	mov    %rax,%rdi
    db4b:	e8 dd fd ff ff       	callq  d92d <prvSearchForNameWithinSingleList>
    db50:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
    db54:	48 83 7d f8 00       	cmpq   $0x0,-0x8(%rbp)
    db59:	75 17                	jne    db72 <xTaskGetHandle+0xe5>
    db5b:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
    db5f:	48 89 c6             	mov    %rax,%rsi
    db62:	48 8d 3d 57 3c 02 00 	lea    0x23c57(%rip),%rdi        # 317c0 <xSuspendedTaskList>
    db69:	e8 bf fd ff ff       	callq  d92d <prvSearchForNameWithinSingleList>
    db6e:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
    db72:	48 83 7d f8 00       	cmpq   $0x0,-0x8(%rbp)
    db77:	75 17                	jne    db90 <xTaskGetHandle+0x103>
    db79:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
    db7d:	48 89 c6             	mov    %rax,%rsi
    db80:	48 8d 3d f9 3b 02 00 	lea    0x23bf9(%rip),%rdi        # 31780 <xTasksWaitingTermination>
    db87:	e8 a1 fd ff ff       	callq  d92d <prvSearchForNameWithinSingleList>
    db8c:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
    db90:	e8 c9 f9 ff ff       	callq  d55e <xTaskResumeAll>
    db95:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    db99:	c9                   	leaveq 
    db9a:	c3                   	retq   

000000000000db9b <uxTaskGetSystemState>:
    db9b:	f3 0f 1e fa          	endbr64 
    db9f:	55                   	push   %rbp
    dba0:	48 89 e5             	mov    %rsp,%rbp
    dba3:	48 83 ec 30          	sub    $0x30,%rsp
    dba7:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
    dbab:	48 89 75 e0          	mov    %rsi,-0x20(%rbp)
    dbaf:	48 89 55 d8          	mov    %rdx,-0x28(%rbp)
    dbb3:	48 c7 45 f0 00 00 00 	movq   $0x0,-0x10(%rbp)
    dbba:	00 
    dbbb:	48 c7 45 f8 07 00 00 	movq   $0x7,-0x8(%rbp)
    dbc2:	00 
    dbc3:	e8 79 f9 ff ff       	callq  d541 <vTaskSuspendAll>
    dbc8:	48 8b 05 19 3c 02 00 	mov    0x23c19(%rip),%rax        # 317e8 <uxCurrentNumberOfTasks>
    dbcf:	48 39 45 e0          	cmp    %rax,-0x20(%rbp)
    dbd3:	0f 82 43 01 00 00    	jb     dd1c <uxTaskGetSystemState+0x181>
    dbd9:	48 83 6d f8 01       	subq   $0x1,-0x8(%rbp)
    dbde:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
    dbe2:	48 89 d0             	mov    %rdx,%rax
    dbe5:	48 c1 e0 02          	shl    $0x2,%rax
    dbe9:	48 01 d0             	add    %rdx,%rax
    dbec:	48 c1 e0 03          	shl    $0x3,%rax
    dbf0:	48 8d 15 a9 39 02 00 	lea    0x239a9(%rip),%rdx        # 315a0 <pxReadyTasksLists>
    dbf7:	48 8d 0c 10          	lea    (%rax,%rdx,1),%rcx
    dbfb:	48 8b 55 f0          	mov    -0x10(%rbp),%rdx
    dbff:	48 89 d0             	mov    %rdx,%rax
    dc02:	48 c1 e0 03          	shl    $0x3,%rax
    dc06:	48 01 d0             	add    %rdx,%rax
    dc09:	48 c1 e0 03          	shl    $0x3,%rax
    dc0d:	48 89 c2             	mov    %rax,%rdx
    dc10:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
    dc14:	48 01 d0             	add    %rdx,%rax
    dc17:	ba 01 00 00 00       	mov    $0x1,%edx
    dc1c:	48 89 ce             	mov    %rcx,%rsi
    dc1f:	48 89 c7             	mov    %rax,%rdi
    dc22:	e8 a2 17 00 00       	callq  f3c9 <prvListTasksWithinSingleList>
    dc27:	48 01 45 f0          	add    %rax,-0x10(%rbp)
    dc2b:	48 83 7d f8 00       	cmpq   $0x0,-0x8(%rbp)
    dc30:	75 a7                	jne    dbd9 <uxTaskGetSystemState+0x3e>
    dc32:	48 8b 0d ef 3a 02 00 	mov    0x23aef(%rip),%rcx        # 31728 <pxDelayedTaskList>
    dc39:	48 8b 55 f0          	mov    -0x10(%rbp),%rdx
    dc3d:	48 89 d0             	mov    %rdx,%rax
    dc40:	48 c1 e0 03          	shl    $0x3,%rax
    dc44:	48 01 d0             	add    %rdx,%rax
    dc47:	48 c1 e0 03          	shl    $0x3,%rax
    dc4b:	48 89 c2             	mov    %rax,%rdx
    dc4e:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
    dc52:	48 01 d0             	add    %rdx,%rax
    dc55:	ba 02 00 00 00       	mov    $0x2,%edx
    dc5a:	48 89 ce             	mov    %rcx,%rsi
    dc5d:	48 89 c7             	mov    %rax,%rdi
    dc60:	e8 64 17 00 00       	callq  f3c9 <prvListTasksWithinSingleList>
    dc65:	48 01 45 f0          	add    %rax,-0x10(%rbp)
    dc69:	48 8b 0d c0 3a 02 00 	mov    0x23ac0(%rip),%rcx        # 31730 <pxOverflowDelayedTaskList>
    dc70:	48 8b 55 f0          	mov    -0x10(%rbp),%rdx
    dc74:	48 89 d0             	mov    %rdx,%rax
    dc77:	48 c1 e0 03          	shl    $0x3,%rax
    dc7b:	48 01 d0             	add    %rdx,%rax
    dc7e:	48 c1 e0 03          	shl    $0x3,%rax
    dc82:	48 89 c2             	mov    %rax,%rdx
    dc85:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
    dc89:	48 01 d0             	add    %rdx,%rax
    dc8c:	ba 02 00 00 00       	mov    $0x2,%edx
    dc91:	48 89 ce             	mov    %rcx,%rsi
    dc94:	48 89 c7             	mov    %rax,%rdi
    dc97:	e8 2d 17 00 00       	callq  f3c9 <prvListTasksWithinSingleList>
    dc9c:	48 01 45 f0          	add    %rax,-0x10(%rbp)
    dca0:	48 8b 55 f0          	mov    -0x10(%rbp),%rdx
    dca4:	48 89 d0             	mov    %rdx,%rax
    dca7:	48 c1 e0 03          	shl    $0x3,%rax
    dcab:	48 01 d0             	add    %rdx,%rax
    dcae:	48 c1 e0 03          	shl    $0x3,%rax
    dcb2:	48 89 c2             	mov    %rax,%rdx
    dcb5:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
    dcb9:	48 01 d0             	add    %rdx,%rax
    dcbc:	ba 04 00 00 00       	mov    $0x4,%edx
    dcc1:	48 8d 35 b8 3a 02 00 	lea    0x23ab8(%rip),%rsi        # 31780 <xTasksWaitingTermination>
    dcc8:	48 89 c7             	mov    %rax,%rdi
    dccb:	e8 f9 16 00 00       	callq  f3c9 <prvListTasksWithinSingleList>
    dcd0:	48 01 45 f0          	add    %rax,-0x10(%rbp)
    dcd4:	48 8b 55 f0          	mov    -0x10(%rbp),%rdx
    dcd8:	48 89 d0             	mov    %rdx,%rax
    dcdb:	48 c1 e0 03          	shl    $0x3,%rax
    dcdf:	48 01 d0             	add    %rdx,%rax
    dce2:	48 c1 e0 03          	shl    $0x3,%rax
    dce6:	48 89 c2             	mov    %rax,%rdx
    dce9:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
    dced:	48 01 d0             	add    %rdx,%rax
    dcf0:	ba 03 00 00 00       	mov    $0x3,%edx
    dcf5:	48 8d 35 c4 3a 02 00 	lea    0x23ac4(%rip),%rsi        # 317c0 <xSuspendedTaskList>
    dcfc:	48 89 c7             	mov    %rax,%rdi
    dcff:	e8 c5 16 00 00       	callq  f3c9 <prvListTasksWithinSingleList>
    dd04:	48 01 45 f0          	add    %rax,-0x10(%rbp)
    dd08:	48 83 7d d8 00       	cmpq   $0x0,-0x28(%rbp)
    dd0d:	74 0d                	je     dd1c <uxTaskGetSystemState+0x181>
    dd0f:	e8 68 56 00 00       	callq  1337c <ulPortGetRunTime>
    dd14:	89 c2                	mov    %eax,%edx
    dd16:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
    dd1a:	89 10                	mov    %edx,(%rax)
    dd1c:	e8 3d f8 ff ff       	callq  d55e <xTaskResumeAll>
    dd21:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
    dd25:	c9                   	leaveq 
    dd26:	c3                   	retq   

000000000000dd27 <xTaskGetIdleTaskHandle>:
    dd27:	f3 0f 1e fa          	endbr64 
    dd2b:	55                   	push   %rbp
    dd2c:	48 89 e5             	mov    %rsp,%rbp
    dd2f:	48 8b 05 fa 3a 02 00 	mov    0x23afa(%rip),%rax        # 31830 <xIdleTaskHandle>
    dd36:	48 85 c0             	test   %rax,%rax
    dd39:	75 11                	jne    dd4c <xTaskGetIdleTaskHandle+0x25>
    dd3b:	be 34 0a 00 00       	mov    $0xa34,%esi
    dd40:	48 8d 3d 99 9b 01 00 	lea    0x19b99(%rip),%rdi        # 278e0 <_IO_stdin_used+0x8e0>
    dd47:	e8 c0 5f ff ff       	callq  3d0c <vAssertCalled>
    dd4c:	48 8b 05 dd 3a 02 00 	mov    0x23add(%rip),%rax        # 31830 <xIdleTaskHandle>
    dd53:	5d                   	pop    %rbp
    dd54:	c3                   	retq   

000000000000dd55 <xTaskCatchUpTicks>:
    dd55:	f3 0f 1e fa          	endbr64 
    dd59:	55                   	push   %rbp
    dd5a:	48 89 e5             	mov    %rsp,%rbp
    dd5d:	48 83 ec 20          	sub    $0x20,%rsp
    dd61:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
    dd65:	48 8b 05 cc 3a 02 00 	mov    0x23acc(%rip),%rax        # 31838 <uxSchedulerSuspended>
    dd6c:	48 85 c0             	test   %rax,%rax
    dd6f:	74 11                	je     dd82 <xTaskCatchUpTicks+0x2d>
    dd71:	be 54 0a 00 00       	mov    $0xa54,%esi
    dd76:	48 8d 3d 63 9b 01 00 	lea    0x19b63(%rip),%rdi        # 278e0 <_IO_stdin_used+0x8e0>
    dd7d:	e8 8a 5f ff ff       	callq  3d0c <vAssertCalled>
    dd82:	e8 ba f7 ff ff       	callq  d541 <vTaskSuspendAll>
    dd87:	48 8b 15 7a 3a 02 00 	mov    0x23a7a(%rip),%rdx        # 31808 <xPendedTicks>
    dd8e:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
    dd92:	48 01 d0             	add    %rdx,%rax
    dd95:	48 89 05 6c 3a 02 00 	mov    %rax,0x23a6c(%rip)        # 31808 <xPendedTicks>
    dd9c:	e8 bd f7 ff ff       	callq  d55e <xTaskResumeAll>
    dda1:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
    dda5:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    dda9:	c9                   	leaveq 
    ddaa:	c3                   	retq   

000000000000ddab <xTaskAbortDelay>:
    ddab:	f3 0f 1e fa          	endbr64 
    ddaf:	55                   	push   %rbp
    ddb0:	48 89 e5             	mov    %rsp,%rbp
    ddb3:	48 83 ec 30          	sub    $0x30,%rsp
    ddb7:	48 89 7d d8          	mov    %rdi,-0x28(%rbp)
    ddbb:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
    ddbf:	48 89 45 f0          	mov    %rax,-0x10(%rbp)
    ddc3:	48 83 7d f0 00       	cmpq   $0x0,-0x10(%rbp)
    ddc8:	75 11                	jne    dddb <xTaskAbortDelay+0x30>
    ddca:	be 67 0a 00 00       	mov    $0xa67,%esi
    ddcf:	48 8d 3d 0a 9b 01 00 	lea    0x19b0a(%rip),%rdi        # 278e0 <_IO_stdin_used+0x8e0>
    ddd6:	e8 31 5f ff ff       	callq  3d0c <vAssertCalled>
    dddb:	e8 61 f7 ff ff       	callq  d541 <vTaskSuspendAll>
    dde0:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
    dde4:	48 89 c7             	mov    %rax,%rdi
    dde7:	e8 9c ea ff ff       	callq  c888 <eTaskGetState>
    ddec:	83 f8 02             	cmp    $0x2,%eax
    ddef:	0f 85 96 01 00 00    	jne    df8b <xTaskAbortDelay+0x1e0>
    ddf5:	48 c7 45 e8 01 00 00 	movq   $0x1,-0x18(%rbp)
    ddfc:	00 
    ddfd:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
    de01:	48 83 c0 08          	add    $0x8,%rax
    de05:	48 89 c7             	mov    %rax,%rdi
    de08:	e8 d0 af ff ff       	callq  8ddd <uxListRemove>
    de0d:	e8 bd 4f 00 00       	callq  12dcf <vPortEnterCritical>
    de12:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
    de16:	48 8b 40 50          	mov    0x50(%rax),%rax
    de1a:	48 85 c0             	test   %rax,%rax
    de1d:	74 1b                	je     de3a <xTaskAbortDelay+0x8f>
    de1f:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
    de23:	48 83 c0 30          	add    $0x30,%rax
    de27:	48 89 c7             	mov    %rax,%rdi
    de2a:	e8 ae af ff ff       	callq  8ddd <uxListRemove>
    de2f:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
    de33:	c6 80 aa 00 00 00 01 	movb   $0x1,0xaa(%rax)
    de3a:	e8 be 4f 00 00       	callq  12dfd <vPortExitCritical>
    de3f:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
    de43:	48 89 c7             	mov    %rax,%rdi
    de46:	e8 10 53 01 00       	callq  2315b <prvTraceGetTaskNumberHigh16>
    de4b:	0f b7 15 8a 32 02 00 	movzwl 0x2328a(%rip),%edx        # 310dc <CurrentFilterMask>
    de52:	21 d0                	and    %edx,%eax
    de54:	66 85 c0             	test   %ax,%ax
    de57:	74 16                	je     de6f <xTaskAbortDelay+0xc4>
    de59:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
    de5d:	48 89 c7             	mov    %rax,%rdi
    de60:	e8 d8 52 01 00       	callq  2313d <prvTraceGetTaskNumberLow16>
    de65:	0f b6 c0             	movzbl %al,%eax
    de68:	89 c7                	mov    %eax,%edi
    de6a:	e8 ff 6e 01 00       	callq  24d6e <prvTraceStoreTaskReady>
    de6f:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
    de73:	48 8b 50 58          	mov    0x58(%rax),%rdx
    de77:	48 8b 05 7a 39 02 00 	mov    0x2397a(%rip),%rax        # 317f8 <uxTopReadyPriority>
    de7e:	48 39 c2             	cmp    %rax,%rdx
    de81:	76 0f                	jbe    de92 <xTaskAbortDelay+0xe7>
    de83:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
    de87:	48 8b 40 58          	mov    0x58(%rax),%rax
    de8b:	48 89 05 66 39 02 00 	mov    %rax,0x23966(%rip)        # 317f8 <uxTopReadyPriority>
    de92:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
    de96:	48 8b 50 58          	mov    0x58(%rax),%rdx
    de9a:	48 89 d0             	mov    %rdx,%rax
    de9d:	48 c1 e0 02          	shl    $0x2,%rax
    dea1:	48 01 d0             	add    %rdx,%rax
    dea4:	48 c1 e0 03          	shl    $0x3,%rax
    dea8:	48 89 c2             	mov    %rax,%rdx
    deab:	48 8d 05 f6 36 02 00 	lea    0x236f6(%rip),%rax        # 315a8 <pxReadyTasksLists+0x8>
    deb2:	48 8b 04 02          	mov    (%rdx,%rax,1),%rax
    deb6:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
    deba:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
    debe:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
    dec2:	48 89 50 10          	mov    %rdx,0x10(%rax)
    dec6:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    deca:	48 8b 50 10          	mov    0x10(%rax),%rdx
    dece:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
    ded2:	48 89 50 18          	mov    %rdx,0x18(%rax)
    ded6:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    deda:	48 8b 40 10          	mov    0x10(%rax),%rax
    dede:	48 8b 55 f0          	mov    -0x10(%rbp),%rdx
    dee2:	48 83 c2 08          	add    $0x8,%rdx
    dee6:	48 89 50 08          	mov    %rdx,0x8(%rax)
    deea:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
    deee:	48 8d 50 08          	lea    0x8(%rax),%rdx
    def2:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    def6:	48 89 50 10          	mov    %rdx,0x10(%rax)
    defa:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
    defe:	48 8b 50 58          	mov    0x58(%rax),%rdx
    df02:	48 89 d0             	mov    %rdx,%rax
    df05:	48 c1 e0 02          	shl    $0x2,%rax
    df09:	48 01 d0             	add    %rdx,%rax
    df0c:	48 c1 e0 03          	shl    $0x3,%rax
    df10:	48 8d 15 89 36 02 00 	lea    0x23689(%rip),%rdx        # 315a0 <pxReadyTasksLists>
    df17:	48 01 c2             	add    %rax,%rdx
    df1a:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
    df1e:	48 89 50 28          	mov    %rdx,0x28(%rax)
    df22:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
    df26:	48 8b 50 58          	mov    0x58(%rax),%rdx
    df2a:	48 89 d0             	mov    %rdx,%rax
    df2d:	48 c1 e0 02          	shl    $0x2,%rax
    df31:	48 01 d0             	add    %rdx,%rax
    df34:	48 c1 e0 03          	shl    $0x3,%rax
    df38:	48 89 c1             	mov    %rax,%rcx
    df3b:	48 8d 05 5e 36 02 00 	lea    0x2365e(%rip),%rax        # 315a0 <pxReadyTasksLists>
    df42:	48 8b 04 01          	mov    (%rcx,%rax,1),%rax
    df46:	48 8d 48 01          	lea    0x1(%rax),%rcx
    df4a:	48 89 d0             	mov    %rdx,%rax
    df4d:	48 c1 e0 02          	shl    $0x2,%rax
    df51:	48 01 d0             	add    %rdx,%rax
    df54:	48 c1 e0 03          	shl    $0x3,%rax
    df58:	48 89 c2             	mov    %rax,%rdx
    df5b:	48 8d 05 3e 36 02 00 	lea    0x2363e(%rip),%rax        # 315a0 <pxReadyTasksLists>
    df62:	48 89 0c 02          	mov    %rcx,(%rdx,%rax,1)
    df66:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
    df6a:	48 8b 50 58          	mov    0x58(%rax),%rdx
    df6e:	48 8b 05 0b 36 02 00 	mov    0x2360b(%rip),%rax        # 31580 <pxCurrentTCB>
    df75:	48 8b 40 58          	mov    0x58(%rax),%rax
    df79:	48 39 c2             	cmp    %rax,%rdx
    df7c:	76 15                	jbe    df93 <xTaskAbortDelay+0x1e8>
    df7e:	48 c7 05 87 38 02 00 	movq   $0x1,0x23887(%rip)        # 31810 <xYieldPending>
    df85:	01 00 00 00 
    df89:	eb 08                	jmp    df93 <xTaskAbortDelay+0x1e8>
    df8b:	48 c7 45 e8 00 00 00 	movq   $0x0,-0x18(%rbp)
    df92:	00 
    df93:	e8 c6 f5 ff ff       	callq  d55e <xTaskResumeAll>
    df98:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
    df9c:	c9                   	leaveq 
    df9d:	c3                   	retq   

000000000000df9e <xTaskIncrementTick>:
    df9e:	f3 0f 1e fa          	endbr64 
    dfa2:	55                   	push   %rbp
    dfa3:	48 89 e5             	mov    %rsp,%rbp
    dfa6:	48 83 ec 40          	sub    $0x40,%rsp
    dfaa:	48 c7 45 c0 00 00 00 	movq   $0x0,-0x40(%rbp)
    dfb1:	00 
    dfb2:	48 8b 05 7f 38 02 00 	mov    0x2387f(%rip),%rax        # 31838 <uxSchedulerSuspended>
    dfb9:	48 83 f8 01          	cmp    $0x1,%rax
    dfbd:	74 0c                	je     dfcb <xTaskIncrementTick+0x2d>
    dfbf:	48 8b 05 42 38 02 00 	mov    0x23842(%rip),%rax        # 31808 <xPendedTicks>
    dfc6:	48 85 c0             	test   %rax,%rax
    dfc9:	75 19                	jne    dfe4 <xTaskIncrementTick+0x46>
    dfcb:	8b 05 b3 90 12 00    	mov    0x1290b3(%rip),%eax        # 137084 <uiTraceTickCount>
    dfd1:	83 c0 01             	add    $0x1,%eax
    dfd4:	89 05 aa 90 12 00    	mov    %eax,0x1290aa(%rip)        # 137084 <uiTraceTickCount>
    dfda:	bf 00 00 00 00       	mov    $0x0,%edi
    dfdf:	e8 54 8d 01 00       	callq  26d38 <prvTracePortGetTimeStamp>
    dfe4:	48 8b 05 4d 38 02 00 	mov    0x2384d(%rip),%rax        # 31838 <uxSchedulerSuspended>
    dfeb:	48 85 c0             	test   %rax,%rax
    dfee:	75 16                	jne    e006 <xTaskIncrementTick+0x68>
    dff0:	48 8b 05 f9 37 02 00 	mov    0x237f9(%rip),%rax        # 317f0 <xTickCount>
    dff7:	83 c0 01             	add    $0x1,%eax
    dffa:	89 c6                	mov    %eax,%esi
    dffc:	bf 03 00 00 00       	mov    $0x3,%edi
    e001:	e8 38 73 01 00       	callq  2533e <prvTraceStoreKernelCallWithNumericParamOnly>
    e006:	48 8b 05 2b 38 02 00 	mov    0x2382b(%rip),%rax        # 31838 <uxSchedulerSuspended>
    e00d:	48 85 c0             	test   %rax,%rax
    e010:	0f 85 8c 03 00 00    	jne    e3a2 <xTaskIncrementTick+0x404>
    e016:	48 8b 05 d3 37 02 00 	mov    0x237d3(%rip),%rax        # 317f0 <xTickCount>
    e01d:	48 83 c0 01          	add    $0x1,%rax
    e021:	48 89 45 c8          	mov    %rax,-0x38(%rbp)
    e025:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
    e029:	48 89 05 c0 37 02 00 	mov    %rax,0x237c0(%rip)        # 317f0 <xTickCount>
    e030:	48 83 7d c8 00       	cmpq   $0x0,-0x38(%rbp)
    e035:	75 5b                	jne    e092 <xTaskIncrementTick+0xf4>
    e037:	48 8b 05 ea 36 02 00 	mov    0x236ea(%rip),%rax        # 31728 <pxDelayedTaskList>
    e03e:	48 8b 00             	mov    (%rax),%rax
    e041:	48 85 c0             	test   %rax,%rax
    e044:	74 11                	je     e057 <xTaskIncrementTick+0xb9>
    e046:	be c7 0a 00 00       	mov    $0xac7,%esi
    e04b:	48 8d 3d 8e 98 01 00 	lea    0x1988e(%rip),%rdi        # 278e0 <_IO_stdin_used+0x8e0>
    e052:	e8 b5 5c ff ff       	callq  3d0c <vAssertCalled>
    e057:	48 8b 05 ca 36 02 00 	mov    0x236ca(%rip),%rax        # 31728 <pxDelayedTaskList>
    e05e:	48 89 45 d0          	mov    %rax,-0x30(%rbp)
    e062:	48 8b 05 c7 36 02 00 	mov    0x236c7(%rip),%rax        # 31730 <pxOverflowDelayedTaskList>
    e069:	48 89 05 b8 36 02 00 	mov    %rax,0x236b8(%rip)        # 31728 <pxDelayedTaskList>
    e070:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
    e074:	48 89 05 b5 36 02 00 	mov    %rax,0x236b5(%rip)        # 31730 <pxOverflowDelayedTaskList>
    e07b:	48 8b 05 96 37 02 00 	mov    0x23796(%rip),%rax        # 31818 <xNumOfOverflows>
    e082:	48 83 c0 01          	add    $0x1,%rax
    e086:	48 89 05 8b 37 02 00 	mov    %rax,0x2378b(%rip)        # 31818 <xNumOfOverflows>
    e08d:	e8 b0 15 00 00       	callq  f642 <prvResetNextTaskUnblockTime>
    e092:	48 8b 05 8f 37 02 00 	mov    0x2378f(%rip),%rax        # 31828 <xNextTaskUnblockTime>
    e099:	48 39 45 c8          	cmp    %rax,-0x38(%rbp)
    e09d:	0f 82 a3 02 00 00    	jb     e346 <xTaskIncrementTick+0x3a8>
    e0a3:	48 8b 05 7e 36 02 00 	mov    0x2367e(%rip),%rax        # 31728 <pxDelayedTaskList>
    e0aa:	48 8b 00             	mov    (%rax),%rax
    e0ad:	48 85 c0             	test   %rax,%rax
    e0b0:	75 10                	jne    e0c2 <xTaskIncrementTick+0x124>
    e0b2:	48 c7 05 6b 37 02 00 	movq   $0xffffffffffffffff,0x2376b(%rip)        # 31828 <xNextTaskUnblockTime>
    e0b9:	ff ff ff ff 
    e0bd:	e9 84 02 00 00       	jmpq   e346 <xTaskIncrementTick+0x3a8>
    e0c2:	48 8b 05 5f 36 02 00 	mov    0x2365f(%rip),%rax        # 31728 <pxDelayedTaskList>
    e0c9:	48 8b 40 18          	mov    0x18(%rax),%rax
    e0cd:	48 8b 40 18          	mov    0x18(%rax),%rax
    e0d1:	48 89 45 d8          	mov    %rax,-0x28(%rbp)
    e0d5:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
    e0d9:	48 8b 40 08          	mov    0x8(%rax),%rax
    e0dd:	48 89 45 e0          	mov    %rax,-0x20(%rbp)
    e0e1:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
    e0e5:	48 3b 45 e0          	cmp    -0x20(%rbp),%rax
    e0e9:	73 10                	jae    e0fb <xTaskIncrementTick+0x15d>
    e0eb:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
    e0ef:	48 89 05 32 37 02 00 	mov    %rax,0x23732(%rip)        # 31828 <xNextTaskUnblockTime>
    e0f6:	e9 4b 02 00 00       	jmpq   e346 <xTaskIncrementTick+0x3a8>
    e0fb:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
    e0ff:	48 8b 40 28          	mov    0x28(%rax),%rax
    e103:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
    e107:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
    e10b:	48 8b 40 10          	mov    0x10(%rax),%rax
    e10f:	48 8b 55 d8          	mov    -0x28(%rbp),%rdx
    e113:	48 8b 52 18          	mov    0x18(%rdx),%rdx
    e117:	48 89 50 10          	mov    %rdx,0x10(%rax)
    e11b:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
    e11f:	48 8b 40 18          	mov    0x18(%rax),%rax
    e123:	48 8b 55 d8          	mov    -0x28(%rbp),%rdx
    e127:	48 8b 52 10          	mov    0x10(%rdx),%rdx
    e12b:	48 89 50 08          	mov    %rdx,0x8(%rax)
    e12f:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
    e133:	48 8b 40 08          	mov    0x8(%rax),%rax
    e137:	48 8b 55 d8          	mov    -0x28(%rbp),%rdx
    e13b:	48 83 c2 08          	add    $0x8,%rdx
    e13f:	48 39 d0             	cmp    %rdx,%rax
    e142:	75 10                	jne    e154 <xTaskIncrementTick+0x1b6>
    e144:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
    e148:	48 8b 50 18          	mov    0x18(%rax),%rdx
    e14c:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
    e150:	48 89 50 08          	mov    %rdx,0x8(%rax)
    e154:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
    e158:	48 c7 40 28 00 00 00 	movq   $0x0,0x28(%rax)
    e15f:	00 
    e160:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
    e164:	48 8b 00             	mov    (%rax),%rax
    e167:	48 8d 50 ff          	lea    -0x1(%rax),%rdx
    e16b:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
    e16f:	48 89 10             	mov    %rdx,(%rax)
    e172:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
    e176:	48 8b 40 50          	mov    0x50(%rax),%rax
    e17a:	48 85 c0             	test   %rax,%rax
    e17d:	74 77                	je     e1f6 <xTaskIncrementTick+0x258>
    e17f:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
    e183:	48 8b 40 50          	mov    0x50(%rax),%rax
    e187:	48 89 45 f0          	mov    %rax,-0x10(%rbp)
    e18b:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
    e18f:	48 8b 40 38          	mov    0x38(%rax),%rax
    e193:	48 8b 55 d8          	mov    -0x28(%rbp),%rdx
    e197:	48 8b 52 40          	mov    0x40(%rdx),%rdx
    e19b:	48 89 50 10          	mov    %rdx,0x10(%rax)
    e19f:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
    e1a3:	48 8b 40 40          	mov    0x40(%rax),%rax
    e1a7:	48 8b 55 d8          	mov    -0x28(%rbp),%rdx
    e1ab:	48 8b 52 38          	mov    0x38(%rdx),%rdx
    e1af:	48 89 50 08          	mov    %rdx,0x8(%rax)
    e1b3:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
    e1b7:	48 8b 40 08          	mov    0x8(%rax),%rax
    e1bb:	48 8b 55 d8          	mov    -0x28(%rbp),%rdx
    e1bf:	48 83 c2 30          	add    $0x30,%rdx
    e1c3:	48 39 d0             	cmp    %rdx,%rax
    e1c6:	75 10                	jne    e1d8 <xTaskIncrementTick+0x23a>
    e1c8:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
    e1cc:	48 8b 50 40          	mov    0x40(%rax),%rdx
    e1d0:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
    e1d4:	48 89 50 08          	mov    %rdx,0x8(%rax)
    e1d8:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
    e1dc:	48 c7 40 50 00 00 00 	movq   $0x0,0x50(%rax)
    e1e3:	00 
    e1e4:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
    e1e8:	48 8b 00             	mov    (%rax),%rax
    e1eb:	48 8d 50 ff          	lea    -0x1(%rax),%rdx
    e1ef:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
    e1f3:	48 89 10             	mov    %rdx,(%rax)
    e1f6:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
    e1fa:	48 89 c7             	mov    %rax,%rdi
    e1fd:	e8 59 4f 01 00       	callq  2315b <prvTraceGetTaskNumberHigh16>
    e202:	0f b7 15 d3 2e 02 00 	movzwl 0x22ed3(%rip),%edx        # 310dc <CurrentFilterMask>
    e209:	21 d0                	and    %edx,%eax
    e20b:	66 85 c0             	test   %ax,%ax
    e20e:	74 16                	je     e226 <xTaskIncrementTick+0x288>
    e210:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
    e214:	48 89 c7             	mov    %rax,%rdi
    e217:	e8 21 4f 01 00       	callq  2313d <prvTraceGetTaskNumberLow16>
    e21c:	0f b6 c0             	movzbl %al,%eax
    e21f:	89 c7                	mov    %eax,%edi
    e221:	e8 48 6b 01 00       	callq  24d6e <prvTraceStoreTaskReady>
    e226:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
    e22a:	48 8b 50 58          	mov    0x58(%rax),%rdx
    e22e:	48 8b 05 c3 35 02 00 	mov    0x235c3(%rip),%rax        # 317f8 <uxTopReadyPriority>
    e235:	48 39 c2             	cmp    %rax,%rdx
    e238:	76 0f                	jbe    e249 <xTaskIncrementTick+0x2ab>
    e23a:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
    e23e:	48 8b 40 58          	mov    0x58(%rax),%rax
    e242:	48 89 05 af 35 02 00 	mov    %rax,0x235af(%rip)        # 317f8 <uxTopReadyPriority>
    e249:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
    e24d:	48 8b 50 58          	mov    0x58(%rax),%rdx
    e251:	48 89 d0             	mov    %rdx,%rax
    e254:	48 c1 e0 02          	shl    $0x2,%rax
    e258:	48 01 d0             	add    %rdx,%rax
    e25b:	48 c1 e0 03          	shl    $0x3,%rax
    e25f:	48 89 c2             	mov    %rax,%rdx
    e262:	48 8d 05 3f 33 02 00 	lea    0x2333f(%rip),%rax        # 315a8 <pxReadyTasksLists+0x8>
    e269:	48 8b 04 02          	mov    (%rdx,%rax,1),%rax
    e26d:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
    e271:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
    e275:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
    e279:	48 89 50 10          	mov    %rdx,0x10(%rax)
    e27d:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    e281:	48 8b 50 10          	mov    0x10(%rax),%rdx
    e285:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
    e289:	48 89 50 18          	mov    %rdx,0x18(%rax)
    e28d:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    e291:	48 8b 40 10          	mov    0x10(%rax),%rax
    e295:	48 8b 55 d8          	mov    -0x28(%rbp),%rdx
    e299:	48 83 c2 08          	add    $0x8,%rdx
    e29d:	48 89 50 08          	mov    %rdx,0x8(%rax)
    e2a1:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
    e2a5:	48 8d 50 08          	lea    0x8(%rax),%rdx
    e2a9:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    e2ad:	48 89 50 10          	mov    %rdx,0x10(%rax)
    e2b1:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
    e2b5:	48 8b 50 58          	mov    0x58(%rax),%rdx
    e2b9:	48 89 d0             	mov    %rdx,%rax
    e2bc:	48 c1 e0 02          	shl    $0x2,%rax
    e2c0:	48 01 d0             	add    %rdx,%rax
    e2c3:	48 c1 e0 03          	shl    $0x3,%rax
    e2c7:	48 8d 15 d2 32 02 00 	lea    0x232d2(%rip),%rdx        # 315a0 <pxReadyTasksLists>
    e2ce:	48 01 c2             	add    %rax,%rdx
    e2d1:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
    e2d5:	48 89 50 28          	mov    %rdx,0x28(%rax)
    e2d9:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
    e2dd:	48 8b 50 58          	mov    0x58(%rax),%rdx
    e2e1:	48 89 d0             	mov    %rdx,%rax
    e2e4:	48 c1 e0 02          	shl    $0x2,%rax
    e2e8:	48 01 d0             	add    %rdx,%rax
    e2eb:	48 c1 e0 03          	shl    $0x3,%rax
    e2ef:	48 89 c1             	mov    %rax,%rcx
    e2f2:	48 8d 05 a7 32 02 00 	lea    0x232a7(%rip),%rax        # 315a0 <pxReadyTasksLists>
    e2f9:	48 8b 04 01          	mov    (%rcx,%rax,1),%rax
    e2fd:	48 8d 48 01          	lea    0x1(%rax),%rcx
    e301:	48 89 d0             	mov    %rdx,%rax
    e304:	48 c1 e0 02          	shl    $0x2,%rax
    e308:	48 01 d0             	add    %rdx,%rax
    e30b:	48 c1 e0 03          	shl    $0x3,%rax
    e30f:	48 89 c2             	mov    %rax,%rdx
    e312:	48 8d 05 87 32 02 00 	lea    0x23287(%rip),%rax        # 315a0 <pxReadyTasksLists>
    e319:	48 89 0c 02          	mov    %rcx,(%rdx,%rax,1)
    e31d:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
    e321:	48 8b 50 58          	mov    0x58(%rax),%rdx
    e325:	48 8b 05 54 32 02 00 	mov    0x23254(%rip),%rax        # 31580 <pxCurrentTCB>
    e32c:	48 8b 40 58          	mov    0x58(%rax),%rax
    e330:	48 39 c2             	cmp    %rax,%rdx
    e333:	0f 82 6a fd ff ff    	jb     e0a3 <xTaskIncrementTick+0x105>
    e339:	48 c7 45 c0 01 00 00 	movq   $0x1,-0x40(%rbp)
    e340:	00 
    e341:	e9 5d fd ff ff       	jmpq   e0a3 <xTaskIncrementTick+0x105>
    e346:	48 8b 05 33 32 02 00 	mov    0x23233(%rip),%rax        # 31580 <pxCurrentTCB>
    e34d:	48 8b 50 58          	mov    0x58(%rax),%rdx
    e351:	48 89 d0             	mov    %rdx,%rax
    e354:	48 c1 e0 02          	shl    $0x2,%rax
    e358:	48 01 d0             	add    %rdx,%rax
    e35b:	48 c1 e0 03          	shl    $0x3,%rax
    e35f:	48 89 c2             	mov    %rax,%rdx
    e362:	48 8d 05 37 32 02 00 	lea    0x23237(%rip),%rax        # 315a0 <pxReadyTasksLists>
    e369:	48 8b 04 02          	mov    (%rdx,%rax,1),%rax
    e36d:	48 83 f8 01          	cmp    $0x1,%rax
    e371:	76 08                	jbe    e37b <xTaskIncrementTick+0x3dd>
    e373:	48 c7 45 c0 01 00 00 	movq   $0x1,-0x40(%rbp)
    e37a:	00 
    e37b:	48 8b 05 86 34 02 00 	mov    0x23486(%rip),%rax        # 31808 <xPendedTicks>
    e382:	48 85 c0             	test   %rax,%rax
    e385:	75 05                	jne    e38c <xTaskIncrementTick+0x3ee>
    e387:	e8 90 58 ff ff       	callq  3c1c <vApplicationTickHook>
    e38c:	48 8b 05 7d 34 02 00 	mov    0x2347d(%rip),%rax        # 31810 <xYieldPending>
    e393:	48 85 c0             	test   %rax,%rax
    e396:	74 21                	je     e3b9 <xTaskIncrementTick+0x41b>
    e398:	48 c7 45 c0 01 00 00 	movq   $0x1,-0x40(%rbp)
    e39f:	00 
    e3a0:	eb 17                	jmp    e3b9 <xTaskIncrementTick+0x41b>
    e3a2:	48 8b 05 5f 34 02 00 	mov    0x2345f(%rip),%rax        # 31808 <xPendedTicks>
    e3a9:	48 83 c0 01          	add    $0x1,%rax
    e3ad:	48 89 05 54 34 02 00 	mov    %rax,0x23454(%rip)        # 31808 <xPendedTicks>
    e3b4:	e8 63 58 ff ff       	callq  3c1c <vApplicationTickHook>
    e3b9:	48 8b 45 c0          	mov    -0x40(%rbp),%rax
    e3bd:	c9                   	leaveq 
    e3be:	c3                   	retq   

000000000000e3bf <vTaskSetApplicationTaskTag>:
    e3bf:	f3 0f 1e fa          	endbr64 
    e3c3:	55                   	push   %rbp
    e3c4:	48 89 e5             	mov    %rsp,%rbp
    e3c7:	48 83 ec 20          	sub    $0x20,%rsp
    e3cb:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
    e3cf:	48 89 75 e0          	mov    %rsi,-0x20(%rbp)
    e3d3:	48 83 7d e8 00       	cmpq   $0x0,-0x18(%rbp)
    e3d8:	75 0d                	jne    e3e7 <vTaskSetApplicationTaskTag+0x28>
    e3da:	48 8b 05 9f 31 02 00 	mov    0x2319f(%rip),%rax        # 31580 <pxCurrentTCB>
    e3e1:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
    e3e5:	eb 08                	jmp    e3ef <vTaskSetApplicationTaskTag+0x30>
    e3e7:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
    e3eb:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
    e3ef:	e8 db 49 00 00       	callq  12dcf <vPortEnterCritical>
    e3f4:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    e3f8:	48 8b 55 e0          	mov    -0x20(%rbp),%rdx
    e3fc:	48 89 90 98 00 00 00 	mov    %rdx,0x98(%rax)
    e403:	e8 f5 49 00 00       	callq  12dfd <vPortExitCritical>
    e408:	90                   	nop
    e409:	c9                   	leaveq 
    e40a:	c3                   	retq   

000000000000e40b <xTaskGetApplicationTaskTag>:
    e40b:	f3 0f 1e fa          	endbr64 
    e40f:	55                   	push   %rbp
    e410:	48 89 e5             	mov    %rsp,%rbp
    e413:	48 83 ec 20          	sub    $0x20,%rsp
    e417:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
    e41b:	48 83 7d e8 00       	cmpq   $0x0,-0x18(%rbp)
    e420:	75 09                	jne    e42b <xTaskGetApplicationTaskTag+0x20>
    e422:	48 8b 05 57 31 02 00 	mov    0x23157(%rip),%rax        # 31580 <pxCurrentTCB>
    e429:	eb 04                	jmp    e42f <xTaskGetApplicationTaskTag+0x24>
    e42b:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
    e42f:	48 89 45 f0          	mov    %rax,-0x10(%rbp)
    e433:	e8 97 49 00 00       	callq  12dcf <vPortEnterCritical>
    e438:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
    e43c:	48 8b 80 98 00 00 00 	mov    0x98(%rax),%rax
    e443:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
    e447:	e8 b1 49 00 00       	callq  12dfd <vPortExitCritical>
    e44c:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    e450:	c9                   	leaveq 
    e451:	c3                   	retq   

000000000000e452 <xTaskGetApplicationTaskTagFromISR>:
    e452:	f3 0f 1e fa          	endbr64 
    e456:	55                   	push   %rbp
    e457:	48 89 e5             	mov    %rsp,%rbp
    e45a:	48 83 ec 30          	sub    $0x30,%rsp
    e45e:	48 89 7d d8          	mov    %rdi,-0x28(%rbp)
    e462:	48 83 7d d8 00       	cmpq   $0x0,-0x28(%rbp)
    e467:	75 09                	jne    e472 <xTaskGetApplicationTaskTagFromISR+0x20>
    e469:	48 8b 05 10 31 02 00 	mov    0x23110(%rip),%rax        # 31580 <pxCurrentTCB>
    e470:	eb 04                	jmp    e476 <xTaskGetApplicationTaskTagFromISR+0x24>
    e472:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
    e476:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
    e47a:	e8 51 4a 00 00       	callq  12ed0 <xPortSetInterruptMask>
    e47f:	48 89 45 f0          	mov    %rax,-0x10(%rbp)
    e483:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
    e487:	48 8b 80 98 00 00 00 	mov    0x98(%rax),%rax
    e48e:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
    e492:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
    e496:	48 89 c7             	mov    %rax,%rdi
    e499:	e8 41 4a 00 00       	callq  12edf <vPortClearInterruptMask>
    e49e:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    e4a2:	c9                   	leaveq 
    e4a3:	c3                   	retq   

000000000000e4a4 <xTaskCallApplicationTaskHook>:
    e4a4:	f3 0f 1e fa          	endbr64 
    e4a8:	55                   	push   %rbp
    e4a9:	48 89 e5             	mov    %rsp,%rbp
    e4ac:	48 83 ec 20          	sub    $0x20,%rsp
    e4b0:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
    e4b4:	48 89 75 e0          	mov    %rsi,-0x20(%rbp)
    e4b8:	48 83 7d e8 00       	cmpq   $0x0,-0x18(%rbp)
    e4bd:	75 0d                	jne    e4cc <xTaskCallApplicationTaskHook+0x28>
    e4bf:	48 8b 05 ba 30 02 00 	mov    0x230ba(%rip),%rax        # 31580 <pxCurrentTCB>
    e4c6:	48 89 45 f0          	mov    %rax,-0x10(%rbp)
    e4ca:	eb 08                	jmp    e4d4 <xTaskCallApplicationTaskHook+0x30>
    e4cc:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
    e4d0:	48 89 45 f0          	mov    %rax,-0x10(%rbp)
    e4d4:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
    e4d8:	48 8b 80 98 00 00 00 	mov    0x98(%rax),%rax
    e4df:	48 85 c0             	test   %rax,%rax
    e4e2:	74 1a                	je     e4fe <xTaskCallApplicationTaskHook+0x5a>
    e4e4:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
    e4e8:	48 8b 90 98 00 00 00 	mov    0x98(%rax),%rdx
    e4ef:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
    e4f3:	48 89 c7             	mov    %rax,%rdi
    e4f6:	ff d2                	callq  *%rdx
    e4f8:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
    e4fc:	eb 08                	jmp    e506 <xTaskCallApplicationTaskHook+0x62>
    e4fe:	48 c7 45 f8 00 00 00 	movq   $0x0,-0x8(%rbp)
    e505:	00 
    e506:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    e50a:	c9                   	leaveq 
    e50b:	c3                   	retq   

000000000000e50c <vTaskSwitchContext>:
    e50c:	f3 0f 1e fa          	endbr64 
    e510:	55                   	push   %rbp
    e511:	48 89 e5             	mov    %rsp,%rbp
    e514:	48 83 ec 10          	sub    $0x10,%rsp
    e518:	48 8b 05 19 33 02 00 	mov    0x23319(%rip),%rax        # 31838 <uxSchedulerSuspended>
    e51f:	48 85 c0             	test   %rax,%rax
    e522:	74 10                	je     e534 <vTaskSwitchContext+0x28>
    e524:	48 c7 05 e1 32 02 00 	movq   $0x1,0x232e1(%rip)        # 31810 <xYieldPending>
    e52b:	01 00 00 00 
    e52f:	e9 9e 01 00 00       	jmpq   e6d2 <vTaskSwitchContext+0x1c6>
    e534:	48 c7 05 d1 32 02 00 	movq   $0x0,0x232d1(%rip)        # 31810 <xYieldPending>
    e53b:	00 00 00 00 
    e53f:	e8 38 4e 00 00       	callq  1337c <ulPortGetRunTime>
    e544:	89 05 fa 32 02 00    	mov    %eax,0x232fa(%rip)        # 31844 <ulTotalRunTime>
    e54a:	8b 15 f4 32 02 00    	mov    0x232f4(%rip),%edx        # 31844 <ulTotalRunTime>
    e550:	8b 05 ea 32 02 00    	mov    0x232ea(%rip),%eax        # 31840 <ulTaskSwitchedInTime>
    e556:	39 c2                	cmp    %eax,%edx
    e558:	76 25                	jbe    e57f <vTaskSwitchContext+0x73>
    e55a:	8b 15 e4 32 02 00    	mov    0x232e4(%rip),%edx        # 31844 <ulTotalRunTime>
    e560:	8b 05 da 32 02 00    	mov    0x232da(%rip),%eax        # 31840 <ulTaskSwitchedInTime>
    e566:	89 d1                	mov    %edx,%ecx
    e568:	29 c1                	sub    %eax,%ecx
    e56a:	48 8b 05 0f 30 02 00 	mov    0x2300f(%rip),%rax        # 31580 <pxCurrentTCB>
    e571:	8b 90 a0 00 00 00    	mov    0xa0(%rax),%edx
    e577:	01 ca                	add    %ecx,%edx
    e579:	89 90 a0 00 00 00    	mov    %edx,0xa0(%rax)
    e57f:	8b 05 bf 32 02 00    	mov    0x232bf(%rip),%eax        # 31844 <ulTotalRunTime>
    e585:	89 05 b5 32 02 00    	mov    %eax,0x232b5(%rip)        # 31840 <ulTaskSwitchedInTime>
    e58b:	48 8b 05 ee 2f 02 00 	mov    0x22fee(%rip),%rax        # 31580 <pxCurrentTCB>
    e592:	48 8b 10             	mov    (%rax),%rdx
    e595:	48 8b 05 e4 2f 02 00 	mov    0x22fe4(%rip),%rax        # 31580 <pxCurrentTCB>
    e59c:	48 8b 40 60          	mov    0x60(%rax),%rax
    e5a0:	48 39 c2             	cmp    %rax,%rdx
    e5a3:	77 1d                	ja     e5c2 <vTaskSwitchContext+0xb6>
    e5a5:	48 8b 05 d4 2f 02 00 	mov    0x22fd4(%rip),%rax        # 31580 <pxCurrentTCB>
    e5ac:	48 8d 50 68          	lea    0x68(%rax),%rdx
    e5b0:	48 8b 05 c9 2f 02 00 	mov    0x22fc9(%rip),%rax        # 31580 <pxCurrentTCB>
    e5b7:	48 89 d6             	mov    %rdx,%rsi
    e5ba:	48 89 c7             	mov    %rax,%rdi
    e5bd:	e8 42 5c ff ff       	callq  4204 <vApplicationStackOverflowHook>
    e5c2:	48 8b 05 2f 32 02 00 	mov    0x2322f(%rip),%rax        # 317f8 <uxTopReadyPriority>
    e5c9:	48 89 45 f0          	mov    %rax,-0x10(%rbp)
    e5cd:	eb 1d                	jmp    e5ec <vTaskSwitchContext+0xe0>
    e5cf:	48 83 7d f0 00       	cmpq   $0x0,-0x10(%rbp)
    e5d4:	75 11                	jne    e5e7 <vTaskSwitchContext+0xdb>
    e5d6:	be 02 0c 00 00       	mov    $0xc02,%esi
    e5db:	48 8d 3d fe 92 01 00 	lea    0x192fe(%rip),%rdi        # 278e0 <_IO_stdin_used+0x8e0>
    e5e2:	e8 25 57 ff ff       	callq  3d0c <vAssertCalled>
    e5e7:	48 83 6d f0 01       	subq   $0x1,-0x10(%rbp)
    e5ec:	48 8b 55 f0          	mov    -0x10(%rbp),%rdx
    e5f0:	48 89 d0             	mov    %rdx,%rax
    e5f3:	48 c1 e0 02          	shl    $0x2,%rax
    e5f7:	48 01 d0             	add    %rdx,%rax
    e5fa:	48 c1 e0 03          	shl    $0x3,%rax
    e5fe:	48 89 c2             	mov    %rax,%rdx
    e601:	48 8d 05 98 2f 02 00 	lea    0x22f98(%rip),%rax        # 315a0 <pxReadyTasksLists>
    e608:	48 8b 04 02          	mov    (%rdx,%rax,1),%rax
    e60c:	48 85 c0             	test   %rax,%rax
    e60f:	74 be                	je     e5cf <vTaskSwitchContext+0xc3>
    e611:	48 8b 55 f0          	mov    -0x10(%rbp),%rdx
    e615:	48 89 d0             	mov    %rdx,%rax
    e618:	48 c1 e0 02          	shl    $0x2,%rax
    e61c:	48 01 d0             	add    %rdx,%rax
    e61f:	48 c1 e0 03          	shl    $0x3,%rax
    e623:	48 8d 15 76 2f 02 00 	lea    0x22f76(%rip),%rdx        # 315a0 <pxReadyTasksLists>
    e62a:	48 01 d0             	add    %rdx,%rax
    e62d:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
    e631:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    e635:	48 8b 40 08          	mov    0x8(%rax),%rax
    e639:	48 8b 50 08          	mov    0x8(%rax),%rdx
    e63d:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    e641:	48 89 50 08          	mov    %rdx,0x8(%rax)
    e645:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    e649:	48 8b 40 08          	mov    0x8(%rax),%rax
    e64d:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
    e651:	48 83 c2 10          	add    $0x10,%rdx
    e655:	48 39 d0             	cmp    %rdx,%rax
    e658:	75 14                	jne    e66e <vTaskSwitchContext+0x162>
    e65a:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    e65e:	48 8b 40 08          	mov    0x8(%rax),%rax
    e662:	48 8b 50 08          	mov    0x8(%rax),%rdx
    e666:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    e66a:	48 89 50 08          	mov    %rdx,0x8(%rax)
    e66e:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    e672:	48 8b 40 08          	mov    0x8(%rax),%rax
    e676:	48 8b 40 18          	mov    0x18(%rax),%rax
    e67a:	48 89 05 ff 2e 02 00 	mov    %rax,0x22eff(%rip)        # 31580 <pxCurrentTCB>
    e681:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
    e685:	48 89 05 6c 31 02 00 	mov    %rax,0x2316c(%rip)        # 317f8 <uxTopReadyPriority>
    e68c:	c7 05 f6 89 12 00 01 	movl   $0x1,0x1289f6(%rip)        # 13708c <uiTraceSystemState>
    e693:	00 00 00 
    e696:	e8 c1 4f 01 00       	callq  2365c <prvTraceGetCurrentTaskHandle>
    e69b:	48 89 c7             	mov    %rax,%rdi
    e69e:	e8 b8 4a 01 00       	callq  2315b <prvTraceGetTaskNumberHigh16>
    e6a3:	0f b7 15 32 2a 02 00 	movzwl 0x22a32(%rip),%edx        # 310dc <CurrentFilterMask>
    e6aa:	21 d0                	and    %edx,%eax
    e6ac:	66 85 c0             	test   %ax,%ax
    e6af:	74 17                	je     e6c8 <vTaskSwitchContext+0x1bc>
    e6b1:	e8 a6 4f 01 00       	callq  2365c <prvTraceGetCurrentTaskHandle>
    e6b6:	48 89 c7             	mov    %rax,%rdi
    e6b9:	e8 7f 4a 01 00       	callq  2313d <prvTraceGetTaskNumberLow16>
    e6be:	0f b6 c0             	movzbl %al,%eax
    e6c1:	89 c7                	mov    %eax,%edi
    e6c3:	e8 5d 6d 01 00       	callq  25425 <prvTraceStoreTaskswitch>
    e6c8:	c7 05 ba 89 12 00 02 	movl   $0x2,0x1289ba(%rip)        # 13708c <uiTraceSystemState>
    e6cf:	00 00 00 
    e6d2:	90                   	nop
    e6d3:	c9                   	leaveq 
    e6d4:	c3                   	retq   

000000000000e6d5 <vTaskPlaceOnEventList>:
    e6d5:	f3 0f 1e fa          	endbr64 
    e6d9:	55                   	push   %rbp
    e6da:	48 89 e5             	mov    %rsp,%rbp
    e6dd:	48 83 ec 10          	sub    $0x10,%rsp
    e6e1:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
    e6e5:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
    e6e9:	48 83 7d f8 00       	cmpq   $0x0,-0x8(%rbp)
    e6ee:	75 11                	jne    e701 <vTaskPlaceOnEventList+0x2c>
    e6f0:	be 1c 0c 00 00       	mov    $0xc1c,%esi
    e6f5:	48 8d 3d e4 91 01 00 	lea    0x191e4(%rip),%rdi        # 278e0 <_IO_stdin_used+0x8e0>
    e6fc:	e8 0b 56 ff ff       	callq  3d0c <vAssertCalled>
    e701:	48 8b 05 78 2e 02 00 	mov    0x22e78(%rip),%rax        # 31580 <pxCurrentTCB>
    e708:	48 8d 50 30          	lea    0x30(%rax),%rdx
    e70c:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    e710:	48 89 d6             	mov    %rdx,%rsi
    e713:	48 89 c7             	mov    %rax,%rdi
    e716:	e8 0e a6 ff ff       	callq  8d29 <vListInsert>
    e71b:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
    e71f:	be 01 00 00 00       	mov    $0x1,%esi
    e724:	48 89 c7             	mov    %rax,%rdi
    e727:	e8 6b 2a 00 00       	callq  11197 <prvAddCurrentTaskToDelayedList>
    e72c:	90                   	nop
    e72d:	c9                   	leaveq 
    e72e:	c3                   	retq   

000000000000e72f <vTaskPlaceOnUnorderedEventList>:
    e72f:	f3 0f 1e fa          	endbr64 
    e733:	55                   	push   %rbp
    e734:	48 89 e5             	mov    %rsp,%rbp
    e737:	48 83 ec 30          	sub    $0x30,%rsp
    e73b:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
    e73f:	48 89 75 e0          	mov    %rsi,-0x20(%rbp)
    e743:	48 89 55 d8          	mov    %rdx,-0x28(%rbp)
    e747:	48 83 7d e8 00       	cmpq   $0x0,-0x18(%rbp)
    e74c:	75 11                	jne    e75f <vTaskPlaceOnUnorderedEventList+0x30>
    e74e:	be 36 0c 00 00       	mov    $0xc36,%esi
    e753:	48 8d 3d 86 91 01 00 	lea    0x19186(%rip),%rdi        # 278e0 <_IO_stdin_used+0x8e0>
    e75a:	e8 ad 55 ff ff       	callq  3d0c <vAssertCalled>
    e75f:	48 8b 05 d2 30 02 00 	mov    0x230d2(%rip),%rax        # 31838 <uxSchedulerSuspended>
    e766:	48 85 c0             	test   %rax,%rax
    e769:	75 11                	jne    e77c <vTaskPlaceOnUnorderedEventList+0x4d>
    e76b:	be 3a 0c 00 00       	mov    $0xc3a,%esi
    e770:	48 8d 3d 69 91 01 00 	lea    0x19169(%rip),%rdi        # 278e0 <_IO_stdin_used+0x8e0>
    e777:	e8 90 55 ff ff       	callq  3d0c <vAssertCalled>
    e77c:	48 8b 05 fd 2d 02 00 	mov    0x22dfd(%rip),%rax        # 31580 <pxCurrentTCB>
    e783:	ba 00 00 00 80       	mov    $0x80000000,%edx
    e788:	48 0b 55 e0          	or     -0x20(%rbp),%rdx
    e78c:	48 89 50 30          	mov    %rdx,0x30(%rax)
    e790:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
    e794:	48 8b 40 08          	mov    0x8(%rax),%rax
    e798:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
    e79c:	48 8b 05 dd 2d 02 00 	mov    0x22ddd(%rip),%rax        # 31580 <pxCurrentTCB>
    e7a3:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
    e7a7:	48 89 50 38          	mov    %rdx,0x38(%rax)
    e7ab:	48 8b 05 ce 2d 02 00 	mov    0x22dce(%rip),%rax        # 31580 <pxCurrentTCB>
    e7b2:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
    e7b6:	48 8b 52 10          	mov    0x10(%rdx),%rdx
    e7ba:	48 89 50 40          	mov    %rdx,0x40(%rax)
    e7be:	48 8b 15 bb 2d 02 00 	mov    0x22dbb(%rip),%rdx        # 31580 <pxCurrentTCB>
    e7c5:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    e7c9:	48 8b 40 10          	mov    0x10(%rax),%rax
    e7cd:	48 83 c2 30          	add    $0x30,%rdx
    e7d1:	48 89 50 08          	mov    %rdx,0x8(%rax)
    e7d5:	48 8b 05 a4 2d 02 00 	mov    0x22da4(%rip),%rax        # 31580 <pxCurrentTCB>
    e7dc:	48 8d 50 30          	lea    0x30(%rax),%rdx
    e7e0:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    e7e4:	48 89 50 10          	mov    %rdx,0x10(%rax)
    e7e8:	48 8b 05 91 2d 02 00 	mov    0x22d91(%rip),%rax        # 31580 <pxCurrentTCB>
    e7ef:	48 8b 55 e8          	mov    -0x18(%rbp),%rdx
    e7f3:	48 89 50 50          	mov    %rdx,0x50(%rax)
    e7f7:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
    e7fb:	48 8b 00             	mov    (%rax),%rax
    e7fe:	48 8d 50 01          	lea    0x1(%rax),%rdx
    e802:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
    e806:	48 89 10             	mov    %rdx,(%rax)
    e809:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
    e80d:	be 01 00 00 00       	mov    $0x1,%esi
    e812:	48 89 c7             	mov    %rax,%rdi
    e815:	e8 7d 29 00 00       	callq  11197 <prvAddCurrentTaskToDelayedList>
    e81a:	90                   	nop
    e81b:	c9                   	leaveq 
    e81c:	c3                   	retq   

000000000000e81d <vTaskPlaceOnEventListRestricted>:
    e81d:	f3 0f 1e fa          	endbr64 
    e821:	55                   	push   %rbp
    e822:	48 89 e5             	mov    %rsp,%rbp
    e825:	48 83 ec 30          	sub    $0x30,%rsp
    e829:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
    e82d:	48 89 75 e0          	mov    %rsi,-0x20(%rbp)
    e831:	48 89 55 d8          	mov    %rdx,-0x28(%rbp)
    e835:	48 83 7d e8 00       	cmpq   $0x0,-0x18(%rbp)
    e83a:	75 11                	jne    e84d <vTaskPlaceOnEventListRestricted+0x30>
    e83c:	be 52 0c 00 00       	mov    $0xc52,%esi
    e841:	48 8d 3d 98 90 01 00 	lea    0x19098(%rip),%rdi        # 278e0 <_IO_stdin_used+0x8e0>
    e848:	e8 bf 54 ff ff       	callq  3d0c <vAssertCalled>
    e84d:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
    e851:	48 8b 40 08          	mov    0x8(%rax),%rax
    e855:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
    e859:	48 8b 05 20 2d 02 00 	mov    0x22d20(%rip),%rax        # 31580 <pxCurrentTCB>
    e860:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
    e864:	48 89 50 38          	mov    %rdx,0x38(%rax)
    e868:	48 8b 05 11 2d 02 00 	mov    0x22d11(%rip),%rax        # 31580 <pxCurrentTCB>
    e86f:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
    e873:	48 8b 52 10          	mov    0x10(%rdx),%rdx
    e877:	48 89 50 40          	mov    %rdx,0x40(%rax)
    e87b:	48 8b 15 fe 2c 02 00 	mov    0x22cfe(%rip),%rdx        # 31580 <pxCurrentTCB>
    e882:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    e886:	48 8b 40 10          	mov    0x10(%rax),%rax
    e88a:	48 83 c2 30          	add    $0x30,%rdx
    e88e:	48 89 50 08          	mov    %rdx,0x8(%rax)
    e892:	48 8b 05 e7 2c 02 00 	mov    0x22ce7(%rip),%rax        # 31580 <pxCurrentTCB>
    e899:	48 8d 50 30          	lea    0x30(%rax),%rdx
    e89d:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    e8a1:	48 89 50 10          	mov    %rdx,0x10(%rax)
    e8a5:	48 8b 05 d4 2c 02 00 	mov    0x22cd4(%rip),%rax        # 31580 <pxCurrentTCB>
    e8ac:	48 8b 55 e8          	mov    -0x18(%rbp),%rdx
    e8b0:	48 89 50 50          	mov    %rdx,0x50(%rax)
    e8b4:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
    e8b8:	48 8b 00             	mov    (%rax),%rax
    e8bb:	48 8d 50 01          	lea    0x1(%rax),%rdx
    e8bf:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
    e8c3:	48 89 10             	mov    %rdx,(%rax)
    e8c6:	48 83 7d d8 00       	cmpq   $0x0,-0x28(%rbp)
    e8cb:	74 08                	je     e8d5 <vTaskPlaceOnEventListRestricted+0xb8>
    e8cd:	48 c7 45 e0 ff ff ff 	movq   $0xffffffffffffffff,-0x20(%rbp)
    e8d4:	ff 
    e8d5:	48 8b 05 a4 2c 02 00 	mov    0x22ca4(%rip),%rax        # 31580 <pxCurrentTCB>
    e8dc:	48 89 c7             	mov    %rax,%rdi
    e8df:	e8 77 48 01 00       	callq  2315b <prvTraceGetTaskNumberHigh16>
    e8e4:	0f b7 15 f1 27 02 00 	movzwl 0x227f1(%rip),%edx        # 310dc <CurrentFilterMask>
    e8eb:	21 d0                	and    %edx,%eax
    e8ed:	66 85 c0             	test   %ax,%ax
    e8f0:	74 34                	je     e926 <vTaskPlaceOnEventListRestricted+0x109>
    e8f2:	48 8b 05 f7 2e 02 00 	mov    0x22ef7(%rip),%rax        # 317f0 <xTickCount>
    e8f9:	89 c2                	mov    %eax,%edx
    e8fb:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
    e8ff:	01 d0                	add    %edx,%eax
    e901:	89 c6                	mov    %eax,%esi
    e903:	bf 88 00 00 00       	mov    $0x88,%edi
    e908:	e8 31 6a 01 00       	callq  2533e <prvTraceStoreKernelCallWithNumericParamOnly>
    e90d:	48 8b 05 6c 2c 02 00 	mov    0x22c6c(%rip),%rax        # 31580 <pxCurrentTCB>
    e914:	48 89 c7             	mov    %rax,%rdi
    e917:	e8 21 48 01 00       	callq  2313d <prvTraceGetTaskNumberLow16>
    e91c:	0f b6 c0             	movzbl %al,%eax
    e91f:	89 c7                	mov    %eax,%edi
    e921:	e8 a0 70 01 00       	callq  259c6 <prvTraceSetTaskInstanceFinished>
    e926:	e8 31 4d 01 00       	callq  2365c <prvTraceGetCurrentTaskHandle>
    e92b:	48 89 c7             	mov    %rax,%rdi
    e92e:	e8 28 48 01 00       	callq  2315b <prvTraceGetTaskNumberHigh16>
    e933:	0f b7 15 a2 27 02 00 	movzwl 0x227a2(%rip),%edx        # 310dc <CurrentFilterMask>
    e93a:	21 d0                	and    %edx,%eax
    e93c:	66 85 c0             	test   %ax,%ax
    e93f:	74 17                	je     e958 <vTaskPlaceOnEventListRestricted+0x13b>
    e941:	e8 16 4d 01 00       	callq  2365c <prvTraceGetCurrentTaskHandle>
    e946:	48 89 c7             	mov    %rax,%rdi
    e949:	e8 ef 47 01 00       	callq  2313d <prvTraceGetTaskNumberLow16>
    e94e:	0f b6 c0             	movzbl %al,%eax
    e951:	89 c7                	mov    %eax,%edi
    e953:	e8 6e 70 01 00       	callq  259c6 <prvTraceSetTaskInstanceFinished>
    e958:	48 8b 55 d8          	mov    -0x28(%rbp),%rdx
    e95c:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
    e960:	48 89 d6             	mov    %rdx,%rsi
    e963:	48 89 c7             	mov    %rax,%rdi
    e966:	e8 2c 28 00 00       	callq  11197 <prvAddCurrentTaskToDelayedList>
    e96b:	90                   	nop
    e96c:	c9                   	leaveq 
    e96d:	c3                   	retq   

000000000000e96e <xTaskRemoveFromEventList>:
    e96e:	f3 0f 1e fa          	endbr64 
    e972:	55                   	push   %rbp
    e973:	48 89 e5             	mov    %rsp,%rbp
    e976:	48 83 ec 40          	sub    $0x40,%rsp
    e97a:	48 89 7d c8          	mov    %rdi,-0x38(%rbp)
    e97e:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
    e982:	48 8b 40 18          	mov    0x18(%rax),%rax
    e986:	48 8b 40 18          	mov    0x18(%rax),%rax
    e98a:	48 89 45 d8          	mov    %rax,-0x28(%rbp)
    e98e:	48 83 7d d8 00       	cmpq   $0x0,-0x28(%rbp)
    e993:	75 11                	jne    e9a6 <xTaskRemoveFromEventList+0x38>
    e995:	be 82 0c 00 00       	mov    $0xc82,%esi
    e99a:	48 8d 3d 3f 8f 01 00 	lea    0x18f3f(%rip),%rdi        # 278e0 <_IO_stdin_used+0x8e0>
    e9a1:	e8 66 53 ff ff       	callq  3d0c <vAssertCalled>
    e9a6:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
    e9aa:	48 8b 40 50          	mov    0x50(%rax),%rax
    e9ae:	48 89 45 e0          	mov    %rax,-0x20(%rbp)
    e9b2:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
    e9b6:	48 8b 40 38          	mov    0x38(%rax),%rax
    e9ba:	48 8b 55 d8          	mov    -0x28(%rbp),%rdx
    e9be:	48 8b 52 40          	mov    0x40(%rdx),%rdx
    e9c2:	48 89 50 10          	mov    %rdx,0x10(%rax)
    e9c6:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
    e9ca:	48 8b 40 40          	mov    0x40(%rax),%rax
    e9ce:	48 8b 55 d8          	mov    -0x28(%rbp),%rdx
    e9d2:	48 8b 52 38          	mov    0x38(%rdx),%rdx
    e9d6:	48 89 50 08          	mov    %rdx,0x8(%rax)
    e9da:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
    e9de:	48 8b 40 08          	mov    0x8(%rax),%rax
    e9e2:	48 8b 55 d8          	mov    -0x28(%rbp),%rdx
    e9e6:	48 83 c2 30          	add    $0x30,%rdx
    e9ea:	48 39 d0             	cmp    %rdx,%rax
    e9ed:	75 10                	jne    e9ff <xTaskRemoveFromEventList+0x91>
    e9ef:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
    e9f3:	48 8b 50 40          	mov    0x40(%rax),%rdx
    e9f7:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
    e9fb:	48 89 50 08          	mov    %rdx,0x8(%rax)
    e9ff:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
    ea03:	48 c7 40 50 00 00 00 	movq   $0x0,0x50(%rax)
    ea0a:	00 
    ea0b:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
    ea0f:	48 8b 00             	mov    (%rax),%rax
    ea12:	48 8d 50 ff          	lea    -0x1(%rax),%rdx
    ea16:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
    ea1a:	48 89 10             	mov    %rdx,(%rax)
    ea1d:	48 8b 05 14 2e 02 00 	mov    0x22e14(%rip),%rax        # 31838 <uxSchedulerSuspended>
    ea24:	48 85 c0             	test   %rax,%rax
    ea27:	0f 85 a0 01 00 00    	jne    ebcd <xTaskRemoveFromEventList+0x25f>
    ea2d:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
    ea31:	48 8b 40 28          	mov    0x28(%rax),%rax
    ea35:	48 89 45 f0          	mov    %rax,-0x10(%rbp)
    ea39:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
    ea3d:	48 8b 40 10          	mov    0x10(%rax),%rax
    ea41:	48 8b 55 d8          	mov    -0x28(%rbp),%rdx
    ea45:	48 8b 52 18          	mov    0x18(%rdx),%rdx
    ea49:	48 89 50 10          	mov    %rdx,0x10(%rax)
    ea4d:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
    ea51:	48 8b 40 18          	mov    0x18(%rax),%rax
    ea55:	48 8b 55 d8          	mov    -0x28(%rbp),%rdx
    ea59:	48 8b 52 10          	mov    0x10(%rdx),%rdx
    ea5d:	48 89 50 08          	mov    %rdx,0x8(%rax)
    ea61:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
    ea65:	48 8b 40 08          	mov    0x8(%rax),%rax
    ea69:	48 8b 55 d8          	mov    -0x28(%rbp),%rdx
    ea6d:	48 83 c2 08          	add    $0x8,%rdx
    ea71:	48 39 d0             	cmp    %rdx,%rax
    ea74:	75 10                	jne    ea86 <xTaskRemoveFromEventList+0x118>
    ea76:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
    ea7a:	48 8b 50 18          	mov    0x18(%rax),%rdx
    ea7e:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
    ea82:	48 89 50 08          	mov    %rdx,0x8(%rax)
    ea86:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
    ea8a:	48 c7 40 28 00 00 00 	movq   $0x0,0x28(%rax)
    ea91:	00 
    ea92:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
    ea96:	48 8b 00             	mov    (%rax),%rax
    ea99:	48 8d 50 ff          	lea    -0x1(%rax),%rdx
    ea9d:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
    eaa1:	48 89 10             	mov    %rdx,(%rax)
    eaa4:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
    eaa8:	48 89 c7             	mov    %rax,%rdi
    eaab:	e8 ab 46 01 00       	callq  2315b <prvTraceGetTaskNumberHigh16>
    eab0:	0f b7 15 25 26 02 00 	movzwl 0x22625(%rip),%edx        # 310dc <CurrentFilterMask>
    eab7:	21 d0                	and    %edx,%eax
    eab9:	66 85 c0             	test   %ax,%ax
    eabc:	74 16                	je     ead4 <xTaskRemoveFromEventList+0x166>
    eabe:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
    eac2:	48 89 c7             	mov    %rax,%rdi
    eac5:	e8 73 46 01 00       	callq  2313d <prvTraceGetTaskNumberLow16>
    eaca:	0f b6 c0             	movzbl %al,%eax
    eacd:	89 c7                	mov    %eax,%edi
    eacf:	e8 9a 62 01 00       	callq  24d6e <prvTraceStoreTaskReady>
    ead4:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
    ead8:	48 8b 50 58          	mov    0x58(%rax),%rdx
    eadc:	48 8b 05 15 2d 02 00 	mov    0x22d15(%rip),%rax        # 317f8 <uxTopReadyPriority>
    eae3:	48 39 c2             	cmp    %rax,%rdx
    eae6:	76 0f                	jbe    eaf7 <xTaskRemoveFromEventList+0x189>
    eae8:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
    eaec:	48 8b 40 58          	mov    0x58(%rax),%rax
    eaf0:	48 89 05 01 2d 02 00 	mov    %rax,0x22d01(%rip)        # 317f8 <uxTopReadyPriority>
    eaf7:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
    eafb:	48 8b 50 58          	mov    0x58(%rax),%rdx
    eaff:	48 89 d0             	mov    %rdx,%rax
    eb02:	48 c1 e0 02          	shl    $0x2,%rax
    eb06:	48 01 d0             	add    %rdx,%rax
    eb09:	48 c1 e0 03          	shl    $0x3,%rax
    eb0d:	48 89 c2             	mov    %rax,%rdx
    eb10:	48 8d 05 91 2a 02 00 	lea    0x22a91(%rip),%rax        # 315a8 <pxReadyTasksLists+0x8>
    eb17:	48 8b 04 02          	mov    (%rdx,%rax,1),%rax
    eb1b:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
    eb1f:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
    eb23:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
    eb27:	48 89 50 10          	mov    %rdx,0x10(%rax)
    eb2b:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    eb2f:	48 8b 50 10          	mov    0x10(%rax),%rdx
    eb33:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
    eb37:	48 89 50 18          	mov    %rdx,0x18(%rax)
    eb3b:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    eb3f:	48 8b 40 10          	mov    0x10(%rax),%rax
    eb43:	48 8b 55 d8          	mov    -0x28(%rbp),%rdx
    eb47:	48 83 c2 08          	add    $0x8,%rdx
    eb4b:	48 89 50 08          	mov    %rdx,0x8(%rax)
    eb4f:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
    eb53:	48 8d 50 08          	lea    0x8(%rax),%rdx
    eb57:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    eb5b:	48 89 50 10          	mov    %rdx,0x10(%rax)
    eb5f:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
    eb63:	48 8b 50 58          	mov    0x58(%rax),%rdx
    eb67:	48 89 d0             	mov    %rdx,%rax
    eb6a:	48 c1 e0 02          	shl    $0x2,%rax
    eb6e:	48 01 d0             	add    %rdx,%rax
    eb71:	48 c1 e0 03          	shl    $0x3,%rax
    eb75:	48 8d 15 24 2a 02 00 	lea    0x22a24(%rip),%rdx        # 315a0 <pxReadyTasksLists>
    eb7c:	48 01 c2             	add    %rax,%rdx
    eb7f:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
    eb83:	48 89 50 28          	mov    %rdx,0x28(%rax)
    eb87:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
    eb8b:	48 8b 50 58          	mov    0x58(%rax),%rdx
    eb8f:	48 89 d0             	mov    %rdx,%rax
    eb92:	48 c1 e0 02          	shl    $0x2,%rax
    eb96:	48 01 d0             	add    %rdx,%rax
    eb99:	48 c1 e0 03          	shl    $0x3,%rax
    eb9d:	48 89 c1             	mov    %rax,%rcx
    eba0:	48 8d 05 f9 29 02 00 	lea    0x229f9(%rip),%rax        # 315a0 <pxReadyTasksLists>
    eba7:	48 8b 04 01          	mov    (%rcx,%rax,1),%rax
    ebab:	48 8d 48 01          	lea    0x1(%rax),%rcx
    ebaf:	48 89 d0             	mov    %rdx,%rax
    ebb2:	48 c1 e0 02          	shl    $0x2,%rax
    ebb6:	48 01 d0             	add    %rdx,%rax
    ebb9:	48 c1 e0 03          	shl    $0x3,%rax
    ebbd:	48 89 c2             	mov    %rax,%rdx
    ebc0:	48 8d 05 d9 29 02 00 	lea    0x229d9(%rip),%rax        # 315a0 <pxReadyTasksLists>
    ebc7:	48 89 0c 02          	mov    %rcx,(%rdx,%rax,1)
    ebcb:	eb 6c                	jmp    ec39 <xTaskRemoveFromEventList+0x2cb>
    ebcd:	48 8b 05 74 2b 02 00 	mov    0x22b74(%rip),%rax        # 31748 <xPendingReadyList+0x8>
    ebd4:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
    ebd8:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
    ebdc:	48 8b 55 e8          	mov    -0x18(%rbp),%rdx
    ebe0:	48 89 50 38          	mov    %rdx,0x38(%rax)
    ebe4:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
    ebe8:	48 8b 50 10          	mov    0x10(%rax),%rdx
    ebec:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
    ebf0:	48 89 50 40          	mov    %rdx,0x40(%rax)
    ebf4:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
    ebf8:	48 8b 40 10          	mov    0x10(%rax),%rax
    ebfc:	48 8b 55 d8          	mov    -0x28(%rbp),%rdx
    ec00:	48 83 c2 30          	add    $0x30,%rdx
    ec04:	48 89 50 08          	mov    %rdx,0x8(%rax)
    ec08:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
    ec0c:	48 8d 50 30          	lea    0x30(%rax),%rdx
    ec10:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
    ec14:	48 89 50 10          	mov    %rdx,0x10(%rax)
    ec18:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
    ec1c:	48 8d 15 1d 2b 02 00 	lea    0x22b1d(%rip),%rdx        # 31740 <xPendingReadyList>
    ec23:	48 89 50 50          	mov    %rdx,0x50(%rax)
    ec27:	48 8b 05 12 2b 02 00 	mov    0x22b12(%rip),%rax        # 31740 <xPendingReadyList>
    ec2e:	48 83 c0 01          	add    $0x1,%rax
    ec32:	48 89 05 07 2b 02 00 	mov    %rax,0x22b07(%rip)        # 31740 <xPendingReadyList>
    ec39:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
    ec3d:	48 8b 50 58          	mov    0x58(%rax),%rdx
    ec41:	48 8b 05 38 29 02 00 	mov    0x22938(%rip),%rax        # 31580 <pxCurrentTCB>
    ec48:	48 8b 40 58          	mov    0x58(%rax),%rax
    ec4c:	48 39 c2             	cmp    %rax,%rdx
    ec4f:	76 15                	jbe    ec66 <xTaskRemoveFromEventList+0x2f8>
    ec51:	48 c7 45 d0 01 00 00 	movq   $0x1,-0x30(%rbp)
    ec58:	00 
    ec59:	48 c7 05 ac 2b 02 00 	movq   $0x1,0x22bac(%rip)        # 31810 <xYieldPending>
    ec60:	01 00 00 00 
    ec64:	eb 08                	jmp    ec6e <xTaskRemoveFromEventList+0x300>
    ec66:	48 c7 45 d0 00 00 00 	movq   $0x0,-0x30(%rbp)
    ec6d:	00 
    ec6e:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
    ec72:	c9                   	leaveq 
    ec73:	c3                   	retq   

000000000000ec74 <vTaskRemoveFromUnorderedEventList>:
    ec74:	f3 0f 1e fa          	endbr64 
    ec78:	55                   	push   %rbp
    ec79:	48 89 e5             	mov    %rsp,%rbp
    ec7c:	48 83 ec 30          	sub    $0x30,%rsp
    ec80:	48 89 7d d8          	mov    %rdi,-0x28(%rbp)
    ec84:	48 89 75 d0          	mov    %rsi,-0x30(%rbp)
    ec88:	48 8b 05 a9 2b 02 00 	mov    0x22ba9(%rip),%rax        # 31838 <uxSchedulerSuspended>
    ec8f:	48 85 c0             	test   %rax,%rax
    ec92:	75 11                	jne    eca5 <vTaskRemoveFromUnorderedEventList+0x31>
    ec94:	be ba 0c 00 00       	mov    $0xcba,%esi
    ec99:	48 8d 3d 40 8c 01 00 	lea    0x18c40(%rip),%rdi        # 278e0 <_IO_stdin_used+0x8e0>
    eca0:	e8 67 50 ff ff       	callq  3d0c <vAssertCalled>
    eca5:	b8 00 00 00 80       	mov    $0x80000000,%eax
    ecaa:	48 0b 45 d0          	or     -0x30(%rbp),%rax
    ecae:	48 89 c2             	mov    %rax,%rdx
    ecb1:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
    ecb5:	48 89 10             	mov    %rdx,(%rax)
    ecb8:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
    ecbc:	48 8b 40 18          	mov    0x18(%rax),%rax
    ecc0:	48 89 45 e0          	mov    %rax,-0x20(%rbp)
    ecc4:	48 83 7d e0 00       	cmpq   $0x0,-0x20(%rbp)
    ecc9:	75 11                	jne    ecdc <vTaskRemoveFromUnorderedEventList+0x68>
    eccb:	be c2 0c 00 00       	mov    $0xcc2,%esi
    ecd0:	48 8d 3d 09 8c 01 00 	lea    0x18c09(%rip),%rdi        # 278e0 <_IO_stdin_used+0x8e0>
    ecd7:	e8 30 50 ff ff       	callq  3d0c <vAssertCalled>
    ecdc:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
    ece0:	48 8b 40 20          	mov    0x20(%rax),%rax
    ece4:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
    ece8:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
    ecec:	48 8b 40 08          	mov    0x8(%rax),%rax
    ecf0:	48 8b 55 d8          	mov    -0x28(%rbp),%rdx
    ecf4:	48 8b 52 10          	mov    0x10(%rdx),%rdx
    ecf8:	48 89 50 10          	mov    %rdx,0x10(%rax)
    ecfc:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
    ed00:	48 8b 40 10          	mov    0x10(%rax),%rax
    ed04:	48 8b 55 d8          	mov    -0x28(%rbp),%rdx
    ed08:	48 8b 52 08          	mov    0x8(%rdx),%rdx
    ed0c:	48 89 50 08          	mov    %rdx,0x8(%rax)
    ed10:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
    ed14:	48 8b 40 08          	mov    0x8(%rax),%rax
    ed18:	48 39 45 d8          	cmp    %rax,-0x28(%rbp)
    ed1c:	75 10                	jne    ed2e <vTaskRemoveFromUnorderedEventList+0xba>
    ed1e:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
    ed22:	48 8b 50 10          	mov    0x10(%rax),%rdx
    ed26:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
    ed2a:	48 89 50 08          	mov    %rdx,0x8(%rax)
    ed2e:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
    ed32:	48 c7 40 20 00 00 00 	movq   $0x0,0x20(%rax)
    ed39:	00 
    ed3a:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
    ed3e:	48 8b 00             	mov    (%rax),%rax
    ed41:	48 8d 50 ff          	lea    -0x1(%rax),%rdx
    ed45:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
    ed49:	48 89 10             	mov    %rdx,(%rax)
    ed4c:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
    ed50:	48 8b 40 28          	mov    0x28(%rax),%rax
    ed54:	48 89 45 f0          	mov    %rax,-0x10(%rbp)
    ed58:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
    ed5c:	48 8b 40 10          	mov    0x10(%rax),%rax
    ed60:	48 8b 55 e0          	mov    -0x20(%rbp),%rdx
    ed64:	48 8b 52 18          	mov    0x18(%rdx),%rdx
    ed68:	48 89 50 10          	mov    %rdx,0x10(%rax)
    ed6c:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
    ed70:	48 8b 40 18          	mov    0x18(%rax),%rax
    ed74:	48 8b 55 e0          	mov    -0x20(%rbp),%rdx
    ed78:	48 8b 52 10          	mov    0x10(%rdx),%rdx
    ed7c:	48 89 50 08          	mov    %rdx,0x8(%rax)
    ed80:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
    ed84:	48 8b 40 08          	mov    0x8(%rax),%rax
    ed88:	48 8b 55 e0          	mov    -0x20(%rbp),%rdx
    ed8c:	48 83 c2 08          	add    $0x8,%rdx
    ed90:	48 39 d0             	cmp    %rdx,%rax
    ed93:	75 10                	jne    eda5 <vTaskRemoveFromUnorderedEventList+0x131>
    ed95:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
    ed99:	48 8b 50 18          	mov    0x18(%rax),%rdx
    ed9d:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
    eda1:	48 89 50 08          	mov    %rdx,0x8(%rax)
    eda5:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
    eda9:	48 c7 40 28 00 00 00 	movq   $0x0,0x28(%rax)
    edb0:	00 
    edb1:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
    edb5:	48 8b 00             	mov    (%rax),%rax
    edb8:	48 8d 50 ff          	lea    -0x1(%rax),%rdx
    edbc:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
    edc0:	48 89 10             	mov    %rdx,(%rax)
    edc3:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
    edc7:	48 89 c7             	mov    %rax,%rdi
    edca:	e8 8c 43 01 00       	callq  2315b <prvTraceGetTaskNumberHigh16>
    edcf:	0f b7 15 06 23 02 00 	movzwl 0x22306(%rip),%edx        # 310dc <CurrentFilterMask>
    edd6:	21 d0                	and    %edx,%eax
    edd8:	66 85 c0             	test   %ax,%ax
    eddb:	74 16                	je     edf3 <vTaskRemoveFromUnorderedEventList+0x17f>
    eddd:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
    ede1:	48 89 c7             	mov    %rax,%rdi
    ede4:	e8 54 43 01 00       	callq  2313d <prvTraceGetTaskNumberLow16>
    ede9:	0f b6 c0             	movzbl %al,%eax
    edec:	89 c7                	mov    %eax,%edi
    edee:	e8 7b 5f 01 00       	callq  24d6e <prvTraceStoreTaskReady>
    edf3:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
    edf7:	48 8b 50 58          	mov    0x58(%rax),%rdx
    edfb:	48 8b 05 f6 29 02 00 	mov    0x229f6(%rip),%rax        # 317f8 <uxTopReadyPriority>
    ee02:	48 39 c2             	cmp    %rax,%rdx
    ee05:	76 0f                	jbe    ee16 <vTaskRemoveFromUnorderedEventList+0x1a2>
    ee07:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
    ee0b:	48 8b 40 58          	mov    0x58(%rax),%rax
    ee0f:	48 89 05 e2 29 02 00 	mov    %rax,0x229e2(%rip)        # 317f8 <uxTopReadyPriority>
    ee16:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
    ee1a:	48 8b 50 58          	mov    0x58(%rax),%rdx
    ee1e:	48 89 d0             	mov    %rdx,%rax
    ee21:	48 c1 e0 02          	shl    $0x2,%rax
    ee25:	48 01 d0             	add    %rdx,%rax
    ee28:	48 c1 e0 03          	shl    $0x3,%rax
    ee2c:	48 89 c2             	mov    %rax,%rdx
    ee2f:	48 8d 05 72 27 02 00 	lea    0x22772(%rip),%rax        # 315a8 <pxReadyTasksLists+0x8>
    ee36:	48 8b 04 02          	mov    (%rdx,%rax,1),%rax
    ee3a:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
    ee3e:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
    ee42:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
    ee46:	48 89 50 10          	mov    %rdx,0x10(%rax)
    ee4a:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    ee4e:	48 8b 50 10          	mov    0x10(%rax),%rdx
    ee52:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
    ee56:	48 89 50 18          	mov    %rdx,0x18(%rax)
    ee5a:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    ee5e:	48 8b 40 10          	mov    0x10(%rax),%rax
    ee62:	48 8b 55 e0          	mov    -0x20(%rbp),%rdx
    ee66:	48 83 c2 08          	add    $0x8,%rdx
    ee6a:	48 89 50 08          	mov    %rdx,0x8(%rax)
    ee6e:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
    ee72:	48 8d 50 08          	lea    0x8(%rax),%rdx
    ee76:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    ee7a:	48 89 50 10          	mov    %rdx,0x10(%rax)
    ee7e:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
    ee82:	48 8b 50 58          	mov    0x58(%rax),%rdx
    ee86:	48 89 d0             	mov    %rdx,%rax
    ee89:	48 c1 e0 02          	shl    $0x2,%rax
    ee8d:	48 01 d0             	add    %rdx,%rax
    ee90:	48 c1 e0 03          	shl    $0x3,%rax
    ee94:	48 8d 15 05 27 02 00 	lea    0x22705(%rip),%rdx        # 315a0 <pxReadyTasksLists>
    ee9b:	48 01 c2             	add    %rax,%rdx
    ee9e:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
    eea2:	48 89 50 28          	mov    %rdx,0x28(%rax)
    eea6:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
    eeaa:	48 8b 50 58          	mov    0x58(%rax),%rdx
    eeae:	48 89 d0             	mov    %rdx,%rax
    eeb1:	48 c1 e0 02          	shl    $0x2,%rax
    eeb5:	48 01 d0             	add    %rdx,%rax
    eeb8:	48 c1 e0 03          	shl    $0x3,%rax
    eebc:	48 89 c1             	mov    %rax,%rcx
    eebf:	48 8d 05 da 26 02 00 	lea    0x226da(%rip),%rax        # 315a0 <pxReadyTasksLists>
    eec6:	48 8b 04 01          	mov    (%rcx,%rax,1),%rax
    eeca:	48 8d 48 01          	lea    0x1(%rax),%rcx
    eece:	48 89 d0             	mov    %rdx,%rax
    eed1:	48 c1 e0 02          	shl    $0x2,%rax
    eed5:	48 01 d0             	add    %rdx,%rax
    eed8:	48 c1 e0 03          	shl    $0x3,%rax
    eedc:	48 89 c2             	mov    %rax,%rdx
    eedf:	48 8d 05 ba 26 02 00 	lea    0x226ba(%rip),%rax        # 315a0 <pxReadyTasksLists>
    eee6:	48 89 0c 02          	mov    %rcx,(%rdx,%rax,1)
    eeea:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
    eeee:	48 8b 50 58          	mov    0x58(%rax),%rdx
    eef2:	48 8b 05 87 26 02 00 	mov    0x22687(%rip),%rax        # 31580 <pxCurrentTCB>
    eef9:	48 8b 40 58          	mov    0x58(%rax),%rax
    eefd:	48 39 c2             	cmp    %rax,%rdx
    ef00:	76 0b                	jbe    ef0d <vTaskRemoveFromUnorderedEventList+0x299>
    ef02:	48 c7 05 03 29 02 00 	movq   $0x1,0x22903(%rip)        # 31810 <xYieldPending>
    ef09:	01 00 00 00 
    ef0d:	90                   	nop
    ef0e:	c9                   	leaveq 
    ef0f:	c3                   	retq   

000000000000ef10 <vTaskSetTimeOutState>:
    ef10:	f3 0f 1e fa          	endbr64 
    ef14:	55                   	push   %rbp
    ef15:	48 89 e5             	mov    %rsp,%rbp
    ef18:	48 83 ec 10          	sub    $0x10,%rsp
    ef1c:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
    ef20:	48 83 7d f8 00       	cmpq   $0x0,-0x8(%rbp)
    ef25:	75 11                	jne    ef38 <vTaskSetTimeOutState+0x28>
    ef27:	be e6 0c 00 00       	mov    $0xce6,%esi
    ef2c:	48 8d 3d ad 89 01 00 	lea    0x189ad(%rip),%rdi        # 278e0 <_IO_stdin_used+0x8e0>
    ef33:	e8 d4 4d ff ff       	callq  3d0c <vAssertCalled>
    ef38:	e8 92 3e 00 00       	callq  12dcf <vPortEnterCritical>
    ef3d:	48 8b 15 d4 28 02 00 	mov    0x228d4(%rip),%rdx        # 31818 <xNumOfOverflows>
    ef44:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    ef48:	48 89 10             	mov    %rdx,(%rax)
    ef4b:	48 8b 15 9e 28 02 00 	mov    0x2289e(%rip),%rdx        # 317f0 <xTickCount>
    ef52:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    ef56:	48 89 50 08          	mov    %rdx,0x8(%rax)
    ef5a:	e8 9e 3e 00 00       	callq  12dfd <vPortExitCritical>
    ef5f:	90                   	nop
    ef60:	c9                   	leaveq 
    ef61:	c3                   	retq   

000000000000ef62 <vTaskInternalSetTimeOutState>:
    ef62:	f3 0f 1e fa          	endbr64 
    ef66:	55                   	push   %rbp
    ef67:	48 89 e5             	mov    %rsp,%rbp
    ef6a:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
    ef6e:	48 8b 15 a3 28 02 00 	mov    0x228a3(%rip),%rdx        # 31818 <xNumOfOverflows>
    ef75:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    ef79:	48 89 10             	mov    %rdx,(%rax)
    ef7c:	48 8b 15 6d 28 02 00 	mov    0x2286d(%rip),%rdx        # 317f0 <xTickCount>
    ef83:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    ef87:	48 89 50 08          	mov    %rdx,0x8(%rax)
    ef8b:	90                   	nop
    ef8c:	5d                   	pop    %rbp
    ef8d:	c3                   	retq   

000000000000ef8e <xTaskCheckForTimeOut>:
    ef8e:	f3 0f 1e fa          	endbr64 
    ef92:	55                   	push   %rbp
    ef93:	48 89 e5             	mov    %rsp,%rbp
    ef96:	48 83 ec 30          	sub    $0x30,%rsp
    ef9a:	48 89 7d d8          	mov    %rdi,-0x28(%rbp)
    ef9e:	48 89 75 d0          	mov    %rsi,-0x30(%rbp)
    efa2:	48 83 7d d8 00       	cmpq   $0x0,-0x28(%rbp)
    efa7:	75 11                	jne    efba <xTaskCheckForTimeOut+0x2c>
    efa9:	be fd 0c 00 00       	mov    $0xcfd,%esi
    efae:	48 8d 3d 2b 89 01 00 	lea    0x1892b(%rip),%rdi        # 278e0 <_IO_stdin_used+0x8e0>
    efb5:	e8 52 4d ff ff       	callq  3d0c <vAssertCalled>
    efba:	48 83 7d d0 00       	cmpq   $0x0,-0x30(%rbp)
    efbf:	75 11                	jne    efd2 <xTaskCheckForTimeOut+0x44>
    efc1:	be fe 0c 00 00       	mov    $0xcfe,%esi
    efc6:	48 8d 3d 13 89 01 00 	lea    0x18913(%rip),%rdi        # 278e0 <_IO_stdin_used+0x8e0>
    efcd:	e8 3a 4d ff ff       	callq  3d0c <vAssertCalled>
    efd2:	e8 f8 3d 00 00       	callq  12dcf <vPortEnterCritical>
    efd7:	48 8b 05 12 28 02 00 	mov    0x22812(%rip),%rax        # 317f0 <xTickCount>
    efde:	48 89 45 f0          	mov    %rax,-0x10(%rbp)
    efe2:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
    efe6:	48 8b 40 08          	mov    0x8(%rax),%rax
    efea:	48 8b 55 f0          	mov    -0x10(%rbp),%rdx
    efee:	48 29 c2             	sub    %rax,%rdx
    eff1:	48 89 d0             	mov    %rdx,%rax
    eff4:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
    eff8:	48 8b 05 81 25 02 00 	mov    0x22581(%rip),%rax        # 31580 <pxCurrentTCB>
    efff:	0f b6 80 aa 00 00 00 	movzbl 0xaa(%rax),%eax
    f006:	84 c0                	test   %al,%al
    f008:	74 1b                	je     f025 <xTaskCheckForTimeOut+0x97>
    f00a:	48 8b 05 6f 25 02 00 	mov    0x2256f(%rip),%rax        # 31580 <pxCurrentTCB>
    f011:	c6 80 aa 00 00 00 00 	movb   $0x0,0xaa(%rax)
    f018:	48 c7 45 e8 01 00 00 	movq   $0x1,-0x18(%rbp)
    f01f:	00 
    f020:	e9 9b 00 00 00       	jmpq   f0c0 <xTaskCheckForTimeOut+0x132>
    f025:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
    f029:	48 8b 00             	mov    (%rax),%rax
    f02c:	48 83 f8 ff          	cmp    $0xffffffffffffffff,%rax
    f030:	75 0d                	jne    f03f <xTaskCheckForTimeOut+0xb1>
    f032:	48 c7 45 e8 00 00 00 	movq   $0x0,-0x18(%rbp)
    f039:	00 
    f03a:	e9 81 00 00 00       	jmpq   f0c0 <xTaskCheckForTimeOut+0x132>
    f03f:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
    f043:	48 8b 10             	mov    (%rax),%rdx
    f046:	48 8b 05 cb 27 02 00 	mov    0x227cb(%rip),%rax        # 31818 <xNumOfOverflows>
    f04d:	48 39 c2             	cmp    %rax,%rdx
    f050:	74 23                	je     f075 <xTaskCheckForTimeOut+0xe7>
    f052:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
    f056:	48 8b 40 08          	mov    0x8(%rax),%rax
    f05a:	48 39 45 f0          	cmp    %rax,-0x10(%rbp)
    f05e:	72 15                	jb     f075 <xTaskCheckForTimeOut+0xe7>
    f060:	48 c7 45 e8 01 00 00 	movq   $0x1,-0x18(%rbp)
    f067:	00 
    f068:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
    f06c:	48 c7 00 00 00 00 00 	movq   $0x0,(%rax)
    f073:	eb 4b                	jmp    f0c0 <xTaskCheckForTimeOut+0x132>
    f075:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
    f079:	48 8b 00             	mov    (%rax),%rax
    f07c:	48 39 45 f8          	cmp    %rax,-0x8(%rbp)
    f080:	73 2b                	jae    f0ad <xTaskCheckForTimeOut+0x11f>
    f082:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
    f086:	48 8b 00             	mov    (%rax),%rax
    f089:	48 2b 45 f8          	sub    -0x8(%rbp),%rax
    f08d:	48 89 c2             	mov    %rax,%rdx
    f090:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
    f094:	48 89 10             	mov    %rdx,(%rax)
    f097:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
    f09b:	48 89 c7             	mov    %rax,%rdi
    f09e:	e8 bf fe ff ff       	callq  ef62 <vTaskInternalSetTimeOutState>
    f0a3:	48 c7 45 e8 00 00 00 	movq   $0x0,-0x18(%rbp)
    f0aa:	00 
    f0ab:	eb 13                	jmp    f0c0 <xTaskCheckForTimeOut+0x132>
    f0ad:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
    f0b1:	48 c7 00 00 00 00 00 	movq   $0x0,(%rax)
    f0b8:	48 c7 45 e8 01 00 00 	movq   $0x1,-0x18(%rbp)
    f0bf:	00 
    f0c0:	e8 38 3d 00 00       	callq  12dfd <vPortExitCritical>
    f0c5:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
    f0c9:	c9                   	leaveq 
    f0ca:	c3                   	retq   

000000000000f0cb <vTaskMissedYield>:
    f0cb:	f3 0f 1e fa          	endbr64 
    f0cf:	55                   	push   %rbp
    f0d0:	48 89 e5             	mov    %rsp,%rbp
    f0d3:	48 c7 05 32 27 02 00 	movq   $0x1,0x22732(%rip)        # 31810 <xYieldPending>
    f0da:	01 00 00 00 
    f0de:	90                   	nop
    f0df:	5d                   	pop    %rbp
    f0e0:	c3                   	retq   

000000000000f0e1 <uxTaskGetTaskNumber>:
    f0e1:	f3 0f 1e fa          	endbr64 
    f0e5:	55                   	push   %rbp
    f0e6:	48 89 e5             	mov    %rsp,%rbp
    f0e9:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
    f0ed:	48 83 7d e8 00       	cmpq   $0x0,-0x18(%rbp)
    f0f2:	74 19                	je     f10d <uxTaskGetTaskNumber+0x2c>
    f0f4:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
    f0f8:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
    f0fc:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    f100:	48 8b 80 80 00 00 00 	mov    0x80(%rax),%rax
    f107:	48 89 45 f0          	mov    %rax,-0x10(%rbp)
    f10b:	eb 08                	jmp    f115 <uxTaskGetTaskNumber+0x34>
    f10d:	48 c7 45 f0 00 00 00 	movq   $0x0,-0x10(%rbp)
    f114:	00 
    f115:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
    f119:	5d                   	pop    %rbp
    f11a:	c3                   	retq   

000000000000f11b <vTaskSetTaskNumber>:
    f11b:	f3 0f 1e fa          	endbr64 
    f11f:	55                   	push   %rbp
    f120:	48 89 e5             	mov    %rsp,%rbp
    f123:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
    f127:	48 89 75 e0          	mov    %rsi,-0x20(%rbp)
    f12b:	48 83 7d e8 00       	cmpq   $0x0,-0x18(%rbp)
    f130:	74 17                	je     f149 <vTaskSetTaskNumber+0x2e>
    f132:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
    f136:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
    f13a:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    f13e:	48 8b 55 e0          	mov    -0x20(%rbp),%rdx
    f142:	48 89 90 80 00 00 00 	mov    %rdx,0x80(%rax)
    f149:	90                   	nop
    f14a:	5d                   	pop    %rbp
    f14b:	c3                   	retq   

000000000000f14c <prvIdleTask>:
    f14c:	f3 0f 1e fa          	endbr64 
    f150:	55                   	push   %rbp
    f151:	48 89 e5             	mov    %rsp,%rbp
    f154:	48 83 ec 10          	sub    $0x10,%rsp
    f158:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
    f15c:	e8 ba 00 00 00       	callq  f21b <prvCheckTasksWaitingTermination>
    f161:	48 8b 05 38 24 02 00 	mov    0x22438(%rip),%rax        # 315a0 <pxReadyTasksLists>
    f168:	48 83 f8 01          	cmp    $0x1,%rax
    f16c:	76 05                	jbe    f173 <prvIdleTask+0x27>
    f16e:	e8 01 3d 00 00       	callq  12e74 <vPortYield>
    f173:	e8 8a 4a ff ff       	callq  3c02 <vApplicationIdleHook>
    f178:	eb e2                	jmp    f15c <prvIdleTask+0x10>

000000000000f17a <prvInitialiseTaskLists>:
    f17a:	f3 0f 1e fa          	endbr64 
    f17e:	55                   	push   %rbp
    f17f:	48 89 e5             	mov    %rsp,%rbp
    f182:	48 83 ec 10          	sub    $0x10,%rsp
    f186:	48 c7 45 f8 00 00 00 	movq   $0x0,-0x8(%rbp)
    f18d:	00 
    f18e:	eb 29                	jmp    f1b9 <prvInitialiseTaskLists+0x3f>
    f190:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
    f194:	48 89 d0             	mov    %rdx,%rax
    f197:	48 c1 e0 02          	shl    $0x2,%rax
    f19b:	48 01 d0             	add    %rdx,%rax
    f19e:	48 c1 e0 03          	shl    $0x3,%rax
    f1a2:	48 8d 15 f7 23 02 00 	lea    0x223f7(%rip),%rdx        # 315a0 <pxReadyTasksLists>
    f1a9:	48 01 d0             	add    %rdx,%rax
    f1ac:	48 89 c7             	mov    %rax,%rdi
    f1af:	e8 8f 9a ff ff       	callq  8c43 <vListInitialise>
    f1b4:	48 83 45 f8 01       	addq   $0x1,-0x8(%rbp)
    f1b9:	48 83 7d f8 06       	cmpq   $0x6,-0x8(%rbp)
    f1be:	76 d0                	jbe    f190 <prvInitialiseTaskLists+0x16>
    f1c0:	48 8d 3d f9 24 02 00 	lea    0x224f9(%rip),%rdi        # 316c0 <xDelayedTaskList1>
    f1c7:	e8 77 9a ff ff       	callq  8c43 <vListInitialise>
    f1cc:	48 8d 3d 2d 25 02 00 	lea    0x2252d(%rip),%rdi        # 31700 <xDelayedTaskList2>
    f1d3:	e8 6b 9a ff ff       	callq  8c43 <vListInitialise>
    f1d8:	48 8d 3d 61 25 02 00 	lea    0x22561(%rip),%rdi        # 31740 <xPendingReadyList>
    f1df:	e8 5f 9a ff ff       	callq  8c43 <vListInitialise>
    f1e4:	48 8d 3d 95 25 02 00 	lea    0x22595(%rip),%rdi        # 31780 <xTasksWaitingTermination>
    f1eb:	e8 53 9a ff ff       	callq  8c43 <vListInitialise>
    f1f0:	48 8d 3d c9 25 02 00 	lea    0x225c9(%rip),%rdi        # 317c0 <xSuspendedTaskList>
    f1f7:	e8 47 9a ff ff       	callq  8c43 <vListInitialise>
    f1fc:	48 8d 05 bd 24 02 00 	lea    0x224bd(%rip),%rax        # 316c0 <xDelayedTaskList1>
    f203:	48 89 05 1e 25 02 00 	mov    %rax,0x2251e(%rip)        # 31728 <pxDelayedTaskList>
    f20a:	48 8d 05 ef 24 02 00 	lea    0x224ef(%rip),%rax        # 31700 <xDelayedTaskList2>
    f211:	48 89 05 18 25 02 00 	mov    %rax,0x22518(%rip)        # 31730 <pxOverflowDelayedTaskList>
    f218:	90                   	nop
    f219:	c9                   	leaveq 
    f21a:	c3                   	retq   

000000000000f21b <prvCheckTasksWaitingTermination>:
    f21b:	f3 0f 1e fa          	endbr64 
    f21f:	55                   	push   %rbp
    f220:	48 89 e5             	mov    %rsp,%rbp
    f223:	48 83 ec 10          	sub    $0x10,%rsp
    f227:	eb 59                	jmp    f282 <prvCheckTasksWaitingTermination+0x67>
    f229:	e8 a1 3b 00 00       	callq  12dcf <vPortEnterCritical>
    f22e:	48 8b 05 63 25 02 00 	mov    0x22563(%rip),%rax        # 31798 <xTasksWaitingTermination+0x18>
    f235:	48 8b 40 18          	mov    0x18(%rax),%rax
    f239:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
    f23d:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    f241:	48 83 c0 08          	add    $0x8,%rax
    f245:	48 89 c7             	mov    %rax,%rdi
    f248:	e8 90 9b ff ff       	callq  8ddd <uxListRemove>
    f24d:	48 8b 05 94 25 02 00 	mov    0x22594(%rip),%rax        # 317e8 <uxCurrentNumberOfTasks>
    f254:	48 83 e8 01          	sub    $0x1,%rax
    f258:	48 89 05 89 25 02 00 	mov    %rax,0x22589(%rip)        # 317e8 <uxCurrentNumberOfTasks>
    f25f:	48 8b 05 42 25 02 00 	mov    0x22542(%rip),%rax        # 317a8 <uxDeletedTasksWaitingCleanUp>
    f266:	48 83 e8 01          	sub    $0x1,%rax
    f26a:	48 89 05 37 25 02 00 	mov    %rax,0x22537(%rip)        # 317a8 <uxDeletedTasksWaitingCleanUp>
    f271:	e8 87 3b 00 00       	callq  12dfd <vPortExitCritical>
    f276:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    f27a:	48 89 c7             	mov    %rax,%rdi
    f27d:	e8 37 03 00 00       	callq  f5b9 <prvDeleteTCB>
    f282:	48 8b 05 1f 25 02 00 	mov    0x2251f(%rip),%rax        # 317a8 <uxDeletedTasksWaitingCleanUp>
    f289:	48 85 c0             	test   %rax,%rax
    f28c:	75 9b                	jne    f229 <prvCheckTasksWaitingTermination+0xe>
    f28e:	90                   	nop
    f28f:	90                   	nop
    f290:	c9                   	leaveq 
    f291:	c3                   	retq   

000000000000f292 <vTaskGetInfo>:
    f292:	f3 0f 1e fa          	endbr64 
    f296:	55                   	push   %rbp
    f297:	48 89 e5             	mov    %rsp,%rbp
    f29a:	48 83 ec 30          	sub    $0x30,%rsp
    f29e:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
    f2a2:	48 89 75 e0          	mov    %rsi,-0x20(%rbp)
    f2a6:	48 89 55 d8          	mov    %rdx,-0x28(%rbp)
    f2aa:	89 4d d4             	mov    %ecx,-0x2c(%rbp)
    f2ad:	48 83 7d e8 00       	cmpq   $0x0,-0x18(%rbp)
    f2b2:	75 09                	jne    f2bd <vTaskGetInfo+0x2b>
    f2b4:	48 8b 05 c5 22 02 00 	mov    0x222c5(%rip),%rax        # 31580 <pxCurrentTCB>
    f2bb:	eb 04                	jmp    f2c1 <vTaskGetInfo+0x2f>
    f2bd:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
    f2c1:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
    f2c5:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
    f2c9:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
    f2cd:	48 89 10             	mov    %rdx,(%rax)
    f2d0:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    f2d4:	48 8d 50 68          	lea    0x68(%rax),%rdx
    f2d8:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
    f2dc:	48 89 50 08          	mov    %rdx,0x8(%rax)
    f2e0:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    f2e4:	48 8b 50 58          	mov    0x58(%rax),%rdx
    f2e8:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
    f2ec:	48 89 50 20          	mov    %rdx,0x20(%rax)
    f2f0:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    f2f4:	48 8b 50 60          	mov    0x60(%rax),%rdx
    f2f8:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
    f2fc:	48 89 50 38          	mov    %rdx,0x38(%rax)
    f300:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    f304:	48 8b 50 78          	mov    0x78(%rax),%rdx
    f308:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
    f30c:	48 89 50 10          	mov    %rdx,0x10(%rax)
    f310:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    f314:	48 8b 90 88 00 00 00 	mov    0x88(%rax),%rdx
    f31b:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
    f31f:	48 89 50 28          	mov    %rdx,0x28(%rax)
    f323:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    f327:	8b 90 a0 00 00 00    	mov    0xa0(%rax),%edx
    f32d:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
    f331:	89 50 30             	mov    %edx,0x30(%rax)
    f334:	83 7d d4 05          	cmpl   $0x5,-0x2c(%rbp)
    f338:	74 4e                	je     f388 <vTaskGetInfo+0xf6>
    f33a:	48 8b 05 3f 22 02 00 	mov    0x2223f(%rip),%rax        # 31580 <pxCurrentTCB>
    f341:	48 39 45 f8          	cmp    %rax,-0x8(%rbp)
    f345:	75 0d                	jne    f354 <vTaskGetInfo+0xc2>
    f347:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
    f34b:	c7 40 18 00 00 00 00 	movl   $0x0,0x18(%rax)
    f352:	eb 47                	jmp    f39b <vTaskGetInfo+0x109>
    f354:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
    f358:	8b 55 d4             	mov    -0x2c(%rbp),%edx
    f35b:	89 50 18             	mov    %edx,0x18(%rax)
    f35e:	83 7d d4 03          	cmpl   $0x3,-0x2c(%rbp)
    f362:	75 37                	jne    f39b <vTaskGetInfo+0x109>
    f364:	e8 d8 e1 ff ff       	callq  d541 <vTaskSuspendAll>
    f369:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    f36d:	48 8b 40 50          	mov    0x50(%rax),%rax
    f371:	48 85 c0             	test   %rax,%rax
    f374:	74 0b                	je     f381 <vTaskGetInfo+0xef>
    f376:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
    f37a:	c7 40 18 02 00 00 00 	movl   $0x2,0x18(%rax)
    f381:	e8 d8 e1 ff ff       	callq  d55e <xTaskResumeAll>
    f386:	eb 13                	jmp    f39b <vTaskGetInfo+0x109>
    f388:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    f38c:	48 89 c7             	mov    %rax,%rdi
    f38f:	e8 f4 d4 ff ff       	callq  c888 <eTaskGetState>
    f394:	48 8b 55 e0          	mov    -0x20(%rbp),%rdx
    f398:	89 42 18             	mov    %eax,0x18(%rdx)
    f39b:	48 83 7d d8 00       	cmpq   $0x0,-0x28(%rbp)
    f3a0:	74 19                	je     f3bb <vTaskGetInfo+0x129>
    f3a2:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    f3a6:	48 8b 40 60          	mov    0x60(%rax),%rax
    f3aa:	48 89 c7             	mov    %rax,%rdi
    f3ad:	e8 3c 01 00 00       	callq  f4ee <prvTaskCheckFreeStackSpace>
    f3b2:	48 8b 55 e0          	mov    -0x20(%rbp),%rdx
    f3b6:	89 42 40             	mov    %eax,0x40(%rdx)
    f3b9:	eb 0b                	jmp    f3c6 <vTaskGetInfo+0x134>
    f3bb:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
    f3bf:	c7 40 40 00 00 00 00 	movl   $0x0,0x40(%rax)
    f3c6:	90                   	nop
    f3c7:	c9                   	leaveq 
    f3c8:	c3                   	retq   

000000000000f3c9 <prvListTasksWithinSingleList>:
    f3c9:	f3 0f 1e fa          	endbr64 
    f3cd:	55                   	push   %rbp
    f3ce:	48 89 e5             	mov    %rsp,%rbp
    f3d1:	48 83 ec 50          	sub    $0x50,%rsp
    f3d5:	48 89 7d c8          	mov    %rdi,-0x38(%rbp)
    f3d9:	48 89 75 c0          	mov    %rsi,-0x40(%rbp)
    f3dd:	89 55 bc             	mov    %edx,-0x44(%rbp)
    f3e0:	48 c7 45 d8 00 00 00 	movq   $0x0,-0x28(%rbp)
    f3e7:	00 
    f3e8:	48 8b 45 c0          	mov    -0x40(%rbp),%rax
    f3ec:	48 8b 00             	mov    (%rax),%rax
    f3ef:	48 85 c0             	test   %rax,%rax
    f3f2:	0f 84 f0 00 00 00    	je     f4e8 <prvListTasksWithinSingleList+0x11f>
    f3f8:	48 8b 45 c0          	mov    -0x40(%rbp),%rax
    f3fc:	48 89 45 e0          	mov    %rax,-0x20(%rbp)
    f400:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
    f404:	48 8b 40 08          	mov    0x8(%rax),%rax
    f408:	48 8b 50 08          	mov    0x8(%rax),%rdx
    f40c:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
    f410:	48 89 50 08          	mov    %rdx,0x8(%rax)
    f414:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
    f418:	48 8b 40 08          	mov    0x8(%rax),%rax
    f41c:	48 8b 55 e0          	mov    -0x20(%rbp),%rdx
    f420:	48 83 c2 10          	add    $0x10,%rdx
    f424:	48 39 d0             	cmp    %rdx,%rax
    f427:	75 14                	jne    f43d <prvListTasksWithinSingleList+0x74>
    f429:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
    f42d:	48 8b 40 08          	mov    0x8(%rax),%rax
    f431:	48 8b 50 08          	mov    0x8(%rax),%rdx
    f435:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
    f439:	48 89 50 08          	mov    %rdx,0x8(%rax)
    f43d:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
    f441:	48 8b 40 08          	mov    0x8(%rax),%rax
    f445:	48 8b 40 18          	mov    0x18(%rax),%rax
    f449:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
    f44d:	48 8b 45 c0          	mov    -0x40(%rbp),%rax
    f451:	48 89 45 f0          	mov    %rax,-0x10(%rbp)
    f455:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
    f459:	48 8b 40 08          	mov    0x8(%rax),%rax
    f45d:	48 8b 50 08          	mov    0x8(%rax),%rdx
    f461:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
    f465:	48 89 50 08          	mov    %rdx,0x8(%rax)
    f469:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
    f46d:	48 8b 40 08          	mov    0x8(%rax),%rax
    f471:	48 8b 55 f0          	mov    -0x10(%rbp),%rdx
    f475:	48 83 c2 10          	add    $0x10,%rdx
    f479:	48 39 d0             	cmp    %rdx,%rax
    f47c:	75 14                	jne    f492 <prvListTasksWithinSingleList+0xc9>
    f47e:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
    f482:	48 8b 40 08          	mov    0x8(%rax),%rax
    f486:	48 8b 50 08          	mov    0x8(%rax),%rdx
    f48a:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
    f48e:	48 89 50 08          	mov    %rdx,0x8(%rax)
    f492:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
    f496:	48 8b 40 08          	mov    0x8(%rax),%rax
    f49a:	48 8b 40 18          	mov    0x18(%rax),%rax
    f49e:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
    f4a2:	48 8b 55 d8          	mov    -0x28(%rbp),%rdx
    f4a6:	48 89 d0             	mov    %rdx,%rax
    f4a9:	48 c1 e0 03          	shl    $0x3,%rax
    f4ad:	48 01 d0             	add    %rdx,%rax
    f4b0:	48 c1 e0 03          	shl    $0x3,%rax
    f4b4:	48 89 c2             	mov    %rax,%rdx
    f4b7:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
    f4bb:	48 8d 34 02          	lea    (%rdx,%rax,1),%rsi
    f4bf:	8b 55 bc             	mov    -0x44(%rbp),%edx
    f4c2:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    f4c6:	89 d1                	mov    %edx,%ecx
    f4c8:	ba 01 00 00 00       	mov    $0x1,%edx
    f4cd:	48 89 c7             	mov    %rax,%rdi
    f4d0:	e8 bd fd ff ff       	callq  f292 <vTaskGetInfo>
    f4d5:	48 83 45 d8 01       	addq   $0x1,-0x28(%rbp)
    f4da:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    f4de:	48 3b 45 e8          	cmp    -0x18(%rbp),%rax
    f4e2:	0f 85 65 ff ff ff    	jne    f44d <prvListTasksWithinSingleList+0x84>
    f4e8:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
    f4ec:	c9                   	leaveq 
    f4ed:	c3                   	retq   

000000000000f4ee <prvTaskCheckFreeStackSpace>:
    f4ee:	f3 0f 1e fa          	endbr64 
    f4f2:	55                   	push   %rbp
    f4f3:	48 89 e5             	mov    %rsp,%rbp
    f4f6:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
    f4fa:	c7 45 fc 00 00 00 00 	movl   $0x0,-0x4(%rbp)
    f501:	eb 09                	jmp    f50c <prvTaskCheckFreeStackSpace+0x1e>
    f503:	48 83 45 e8 01       	addq   $0x1,-0x18(%rbp)
    f508:	83 45 fc 01          	addl   $0x1,-0x4(%rbp)
    f50c:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
    f510:	0f b6 00             	movzbl (%rax),%eax
    f513:	3c a5                	cmp    $0xa5,%al
    f515:	74 ec                	je     f503 <prvTaskCheckFreeStackSpace+0x15>
    f517:	8b 45 fc             	mov    -0x4(%rbp),%eax
    f51a:	c1 e8 03             	shr    $0x3,%eax
    f51d:	89 45 fc             	mov    %eax,-0x4(%rbp)
    f520:	8b 45 fc             	mov    -0x4(%rbp),%eax
    f523:	5d                   	pop    %rbp
    f524:	c3                   	retq   

000000000000f525 <uxTaskGetStackHighWaterMark2>:
    f525:	f3 0f 1e fa          	endbr64 
    f529:	55                   	push   %rbp
    f52a:	48 89 e5             	mov    %rsp,%rbp
    f52d:	48 83 ec 28          	sub    $0x28,%rsp
    f531:	48 89 7d d8          	mov    %rdi,-0x28(%rbp)
    f535:	48 83 7d d8 00       	cmpq   $0x0,-0x28(%rbp)
    f53a:	75 09                	jne    f545 <uxTaskGetStackHighWaterMark2+0x20>
    f53c:	48 8b 05 3d 20 02 00 	mov    0x2203d(%rip),%rax        # 31580 <pxCurrentTCB>
    f543:	eb 04                	jmp    f549 <uxTaskGetStackHighWaterMark2+0x24>
    f545:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
    f549:	48 89 45 f0          	mov    %rax,-0x10(%rbp)
    f54d:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
    f551:	48 8b 40 60          	mov    0x60(%rax),%rax
    f555:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
    f559:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    f55d:	48 89 c7             	mov    %rax,%rdi
    f560:	e8 89 ff ff ff       	callq  f4ee <prvTaskCheckFreeStackSpace>
    f565:	89 45 ec             	mov    %eax,-0x14(%rbp)
    f568:	8b 45 ec             	mov    -0x14(%rbp),%eax
    f56b:	c9                   	leaveq 
    f56c:	c3                   	retq   

000000000000f56d <uxTaskGetStackHighWaterMark>:
    f56d:	f3 0f 1e fa          	endbr64 
    f571:	55                   	push   %rbp
    f572:	48 89 e5             	mov    %rsp,%rbp
    f575:	48 83 ec 28          	sub    $0x28,%rsp
    f579:	48 89 7d d8          	mov    %rdi,-0x28(%rbp)
    f57d:	48 83 7d d8 00       	cmpq   $0x0,-0x28(%rbp)
    f582:	75 09                	jne    f58d <uxTaskGetStackHighWaterMark+0x20>
    f584:	48 8b 05 f5 1f 02 00 	mov    0x21ff5(%rip),%rax        # 31580 <pxCurrentTCB>
    f58b:	eb 04                	jmp    f591 <uxTaskGetStackHighWaterMark+0x24>
    f58d:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
    f591:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
    f595:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
    f599:	48 8b 40 60          	mov    0x60(%rax),%rax
    f59d:	48 89 45 f0          	mov    %rax,-0x10(%rbp)
    f5a1:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
    f5a5:	48 89 c7             	mov    %rax,%rdi
    f5a8:	e8 41 ff ff ff       	callq  f4ee <prvTaskCheckFreeStackSpace>
    f5ad:	89 c0                	mov    %eax,%eax
    f5af:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
    f5b3:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    f5b7:	c9                   	leaveq 
    f5b8:	c3                   	retq   

000000000000f5b9 <prvDeleteTCB>:
    f5b9:	f3 0f 1e fa          	endbr64 
    f5bd:	55                   	push   %rbp
    f5be:	48 89 e5             	mov    %rsp,%rbp
    f5c1:	48 83 ec 10          	sub    $0x10,%rsp
    f5c5:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
    f5c9:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    f5cd:	48 89 c7             	mov    %rax,%rdi
    f5d0:	e8 d6 3a 00 00       	callq  130ab <vPortCancelThread>
    f5d5:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    f5d9:	0f b6 80 a9 00 00 00 	movzbl 0xa9(%rax),%eax
    f5e0:	84 c0                	test   %al,%al
    f5e2:	75 1e                	jne    f602 <prvDeleteTCB+0x49>
    f5e4:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    f5e8:	48 8b 40 60          	mov    0x60(%rax),%rax
    f5ec:	48 89 c7             	mov    %rax,%rdi
    f5ef:	e8 ac 31 00 00       	callq  127a0 <vPortFree>
    f5f4:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    f5f8:	48 89 c7             	mov    %rax,%rdi
    f5fb:	e8 a0 31 00 00       	callq  127a0 <vPortFree>
    f600:	eb 3d                	jmp    f63f <prvDeleteTCB+0x86>
    f602:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    f606:	0f b6 80 a9 00 00 00 	movzbl 0xa9(%rax),%eax
    f60d:	3c 01                	cmp    $0x1,%al
    f60f:	75 0e                	jne    f61f <prvDeleteTCB+0x66>
    f611:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    f615:	48 89 c7             	mov    %rax,%rdi
    f618:	e8 83 31 00 00       	callq  127a0 <vPortFree>
    f61d:	eb 20                	jmp    f63f <prvDeleteTCB+0x86>
    f61f:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    f623:	0f b6 80 a9 00 00 00 	movzbl 0xa9(%rax),%eax
    f62a:	3c 02                	cmp    $0x2,%al
    f62c:	74 11                	je     f63f <prvDeleteTCB+0x86>
    f62e:	be 9c 0f 00 00       	mov    $0xf9c,%esi
    f633:	48 8d 3d a6 82 01 00 	lea    0x182a6(%rip),%rdi        # 278e0 <_IO_stdin_used+0x8e0>
    f63a:	e8 cd 46 ff ff       	callq  3d0c <vAssertCalled>
    f63f:	90                   	nop
    f640:	c9                   	leaveq 
    f641:	c3                   	retq   

000000000000f642 <prvResetNextTaskUnblockTime>:
    f642:	f3 0f 1e fa          	endbr64 
    f646:	55                   	push   %rbp
    f647:	48 89 e5             	mov    %rsp,%rbp
    f64a:	48 8b 05 d7 20 02 00 	mov    0x220d7(%rip),%rax        # 31728 <pxDelayedTaskList>
    f651:	48 8b 00             	mov    (%rax),%rax
    f654:	48 85 c0             	test   %rax,%rax
    f657:	75 0d                	jne    f666 <prvResetNextTaskUnblockTime+0x24>
    f659:	48 c7 05 c4 21 02 00 	movq   $0xffffffffffffffff,0x221c4(%rip)        # 31828 <xNextTaskUnblockTime>
    f660:	ff ff ff ff 
    f664:	eb 15                	jmp    f67b <prvResetNextTaskUnblockTime+0x39>
    f666:	48 8b 05 bb 20 02 00 	mov    0x220bb(%rip),%rax        # 31728 <pxDelayedTaskList>
    f66d:	48 8b 40 18          	mov    0x18(%rax),%rax
    f671:	48 8b 00             	mov    (%rax),%rax
    f674:	48 89 05 ad 21 02 00 	mov    %rax,0x221ad(%rip)        # 31828 <xNextTaskUnblockTime>
    f67b:	90                   	nop
    f67c:	5d                   	pop    %rbp
    f67d:	c3                   	retq   

000000000000f67e <xTaskGetCurrentTaskHandle>:
    f67e:	f3 0f 1e fa          	endbr64 
    f682:	55                   	push   %rbp
    f683:	48 89 e5             	mov    %rsp,%rbp
    f686:	48 8b 05 f3 1e 02 00 	mov    0x21ef3(%rip),%rax        # 31580 <pxCurrentTCB>
    f68d:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
    f691:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    f695:	5d                   	pop    %rbp
    f696:	c3                   	retq   

000000000000f697 <xTaskGetSchedulerState>:
    f697:	f3 0f 1e fa          	endbr64 
    f69b:	55                   	push   %rbp
    f69c:	48 89 e5             	mov    %rsp,%rbp
    f69f:	48 8b 05 5a 21 02 00 	mov    0x2215a(%rip),%rax        # 31800 <xSchedulerRunning>
    f6a6:	48 85 c0             	test   %rax,%rax
    f6a9:	75 0a                	jne    f6b5 <xTaskGetSchedulerState+0x1e>
    f6ab:	48 c7 45 f8 01 00 00 	movq   $0x1,-0x8(%rbp)
    f6b2:	00 
    f6b3:	eb 1e                	jmp    f6d3 <xTaskGetSchedulerState+0x3c>
    f6b5:	48 8b 05 7c 21 02 00 	mov    0x2217c(%rip),%rax        # 31838 <uxSchedulerSuspended>
    f6bc:	48 85 c0             	test   %rax,%rax
    f6bf:	75 0a                	jne    f6cb <xTaskGetSchedulerState+0x34>
    f6c1:	48 c7 45 f8 02 00 00 	movq   $0x2,-0x8(%rbp)
    f6c8:	00 
    f6c9:	eb 08                	jmp    f6d3 <xTaskGetSchedulerState+0x3c>
    f6cb:	48 c7 45 f8 00 00 00 	movq   $0x0,-0x8(%rbp)
    f6d2:	00 
    f6d3:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    f6d7:	5d                   	pop    %rbp
    f6d8:	c3                   	retq   

000000000000f6d9 <xTaskPriorityInherit>:
    f6d9:	f3 0f 1e fa          	endbr64 
    f6dd:	55                   	push   %rbp
    f6de:	48 89 e5             	mov    %rsp,%rbp
    f6e1:	53                   	push   %rbx
    f6e2:	48 83 ec 38          	sub    $0x38,%rsp
    f6e6:	48 89 7d c8          	mov    %rdi,-0x38(%rbp)
    f6ea:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
    f6ee:	48 89 45 e0          	mov    %rax,-0x20(%rbp)
    f6f2:	48 c7 45 d8 00 00 00 	movq   $0x0,-0x28(%rbp)
    f6f9:	00 
    f6fa:	48 83 7d c8 00       	cmpq   $0x0,-0x38(%rbp)
    f6ff:	0f 84 8b 02 00 00    	je     f990 <xTaskPriorityInherit+0x2b7>
    f705:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
    f709:	48 8b 50 58          	mov    0x58(%rax),%rdx
    f70d:	48 8b 05 6c 1e 02 00 	mov    0x21e6c(%rip),%rax        # 31580 <pxCurrentTCB>
    f714:	48 8b 40 58          	mov    0x58(%rax),%rax
    f718:	48 39 c2             	cmp    %rax,%rdx
    f71b:	0f 83 4c 02 00 00    	jae    f96d <xTaskPriorityInherit+0x294>
    f721:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
    f725:	48 8b 40 30          	mov    0x30(%rax),%rax
    f729:	25 00 00 00 80       	and    $0x80000000,%eax
    f72e:	48 85 c0             	test   %rax,%rax
    f731:	75 1b                	jne    f74e <xTaskPriorityInherit+0x75>
    f733:	48 8b 05 46 1e 02 00 	mov    0x21e46(%rip),%rax        # 31580 <pxCurrentTCB>
    f73a:	48 8b 40 58          	mov    0x58(%rax),%rax
    f73e:	ba 07 00 00 00       	mov    $0x7,%edx
    f743:	48 29 c2             	sub    %rax,%rdx
    f746:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
    f74a:	48 89 50 30          	mov    %rdx,0x30(%rax)
    f74e:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
    f752:	48 8b 48 28          	mov    0x28(%rax),%rcx
    f756:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
    f75a:	48 8b 50 58          	mov    0x58(%rax),%rdx
    f75e:	48 89 d0             	mov    %rdx,%rax
    f761:	48 c1 e0 02          	shl    $0x2,%rax
    f765:	48 01 d0             	add    %rdx,%rax
    f768:	48 c1 e0 03          	shl    $0x3,%rax
    f76c:	48 8d 15 2d 1e 02 00 	lea    0x21e2d(%rip),%rdx        # 315a0 <pxReadyTasksLists>
    f773:	48 01 d0             	add    %rdx,%rax
    f776:	48 39 c1             	cmp    %rax,%rcx
    f779:	0f 85 4c 01 00 00    	jne    f8cb <xTaskPriorityInherit+0x1f2>
    f77f:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
    f783:	48 83 c0 08          	add    $0x8,%rax
    f787:	48 89 c7             	mov    %rax,%rdi
    f78a:	e8 4e 96 ff ff       	callq  8ddd <uxListRemove>
    f78f:	48 8b 05 ea 1d 02 00 	mov    0x21dea(%rip),%rax        # 31580 <pxCurrentTCB>
    f796:	48 8b 50 58          	mov    0x58(%rax),%rdx
    f79a:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
    f79e:	48 89 50 58          	mov    %rdx,0x58(%rax)
    f7a2:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
    f7a6:	48 89 c7             	mov    %rax,%rdi
    f7a9:	e8 ad 39 01 00       	callq  2315b <prvTraceGetTaskNumberHigh16>
    f7ae:	0f b7 15 27 19 02 00 	movzwl 0x21927(%rip),%edx        # 310dc <CurrentFilterMask>
    f7b5:	21 d0                	and    %edx,%eax
    f7b7:	66 85 c0             	test   %ax,%ax
    f7ba:	74 16                	je     f7d2 <xTaskPriorityInherit+0xf9>
    f7bc:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
    f7c0:	48 89 c7             	mov    %rax,%rdi
    f7c3:	e8 75 39 01 00       	callq  2313d <prvTraceGetTaskNumberLow16>
    f7c8:	0f b6 c0             	movzbl %al,%eax
    f7cb:	89 c7                	mov    %eax,%edi
    f7cd:	e8 9c 55 01 00       	callq  24d6e <prvTraceStoreTaskReady>
    f7d2:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
    f7d6:	48 8b 50 58          	mov    0x58(%rax),%rdx
    f7da:	48 8b 05 17 20 02 00 	mov    0x22017(%rip),%rax        # 317f8 <uxTopReadyPriority>
    f7e1:	48 39 c2             	cmp    %rax,%rdx
    f7e4:	76 0f                	jbe    f7f5 <xTaskPriorityInherit+0x11c>
    f7e6:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
    f7ea:	48 8b 40 58          	mov    0x58(%rax),%rax
    f7ee:	48 89 05 03 20 02 00 	mov    %rax,0x22003(%rip)        # 317f8 <uxTopReadyPriority>
    f7f5:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
    f7f9:	48 8b 50 58          	mov    0x58(%rax),%rdx
    f7fd:	48 89 d0             	mov    %rdx,%rax
    f800:	48 c1 e0 02          	shl    $0x2,%rax
    f804:	48 01 d0             	add    %rdx,%rax
    f807:	48 c1 e0 03          	shl    $0x3,%rax
    f80b:	48 89 c2             	mov    %rax,%rdx
    f80e:	48 8d 05 93 1d 02 00 	lea    0x21d93(%rip),%rax        # 315a8 <pxReadyTasksLists+0x8>
    f815:	48 8b 04 02          	mov    (%rdx,%rax,1),%rax
    f819:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
    f81d:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
    f821:	48 8b 55 e8          	mov    -0x18(%rbp),%rdx
    f825:	48 89 50 10          	mov    %rdx,0x10(%rax)
    f829:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
    f82d:	48 8b 50 10          	mov    0x10(%rax),%rdx
    f831:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
    f835:	48 89 50 18          	mov    %rdx,0x18(%rax)
    f839:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
    f83d:	48 8b 40 10          	mov    0x10(%rax),%rax
    f841:	48 8b 55 e0          	mov    -0x20(%rbp),%rdx
    f845:	48 83 c2 08          	add    $0x8,%rdx
    f849:	48 89 50 08          	mov    %rdx,0x8(%rax)
    f84d:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
    f851:	48 8d 50 08          	lea    0x8(%rax),%rdx
    f855:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
    f859:	48 89 50 10          	mov    %rdx,0x10(%rax)
    f85d:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
    f861:	48 8b 50 58          	mov    0x58(%rax),%rdx
    f865:	48 89 d0             	mov    %rdx,%rax
    f868:	48 c1 e0 02          	shl    $0x2,%rax
    f86c:	48 01 d0             	add    %rdx,%rax
    f86f:	48 c1 e0 03          	shl    $0x3,%rax
    f873:	48 8d 15 26 1d 02 00 	lea    0x21d26(%rip),%rdx        # 315a0 <pxReadyTasksLists>
    f87a:	48 01 c2             	add    %rax,%rdx
    f87d:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
    f881:	48 89 50 28          	mov    %rdx,0x28(%rax)
    f885:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
    f889:	48 8b 50 58          	mov    0x58(%rax),%rdx
    f88d:	48 89 d0             	mov    %rdx,%rax
    f890:	48 c1 e0 02          	shl    $0x2,%rax
    f894:	48 01 d0             	add    %rdx,%rax
    f897:	48 c1 e0 03          	shl    $0x3,%rax
    f89b:	48 89 c1             	mov    %rax,%rcx
    f89e:	48 8d 05 fb 1c 02 00 	lea    0x21cfb(%rip),%rax        # 315a0 <pxReadyTasksLists>
    f8a5:	48 8b 04 01          	mov    (%rcx,%rax,1),%rax
    f8a9:	48 8d 48 01          	lea    0x1(%rax),%rcx
    f8ad:	48 89 d0             	mov    %rdx,%rax
    f8b0:	48 c1 e0 02          	shl    $0x2,%rax
    f8b4:	48 01 d0             	add    %rdx,%rax
    f8b7:	48 c1 e0 03          	shl    $0x3,%rax
    f8bb:	48 89 c2             	mov    %rax,%rdx
    f8be:	48 8d 05 db 1c 02 00 	lea    0x21cdb(%rip),%rax        # 315a0 <pxReadyTasksLists>
    f8c5:	48 89 0c 02          	mov    %rcx,(%rdx,%rax,1)
    f8c9:	eb 13                	jmp    f8de <xTaskPriorityInherit+0x205>
    f8cb:	48 8b 05 ae 1c 02 00 	mov    0x21cae(%rip),%rax        # 31580 <pxCurrentTCB>
    f8d2:	48 8b 50 58          	mov    0x58(%rax),%rdx
    f8d6:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
    f8da:	48 89 50 58          	mov    %rdx,0x58(%rax)
    f8de:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
    f8e2:	48 89 c7             	mov    %rax,%rdi
    f8e5:	e8 71 38 01 00       	callq  2315b <prvTraceGetTaskNumberHigh16>
    f8ea:	0f b7 15 eb 17 02 00 	movzwl 0x217eb(%rip),%edx        # 310dc <CurrentFilterMask>
    f8f1:	21 d0                	and    %edx,%eax
    f8f3:	66 85 c0             	test   %ax,%ax
    f8f6:	74 6b                	je     f963 <xTaskPriorityInherit+0x28a>
    f8f8:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
    f8fc:	48 89 c7             	mov    %rax,%rdi
    f8ff:	e8 39 38 01 00       	callq  2313d <prvTraceGetTaskNumberLow16>
    f904:	0f b6 c0             	movzbl %al,%eax
    f907:	89 c6                	mov    %eax,%esi
    f909:	bf 03 00 00 00       	mov    $0x3,%edi
    f90e:	e8 d9 5e 01 00       	callq  257ec <prvTraceGetPriorityProperty>
    f913:	0f b6 d8             	movzbl %al,%ebx
    f916:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
    f91a:	48 89 c7             	mov    %rax,%rdi
    f91d:	e8 1b 38 01 00       	callq  2313d <prvTraceGetTaskNumberLow16>
    f922:	0f b6 c0             	movzbl %al,%eax
    f925:	89 d9                	mov    %ebx,%ecx
    f927:	89 c2                	mov    %eax,%edx
    f929:	be 03 00 00 00       	mov    $0x3,%esi
    f92e:	bf 8e 00 00 00       	mov    $0x8e,%edi
    f933:	e8 3d 58 01 00       	callq  25175 <prvTraceStoreKernelCallWithParam>
    f938:	48 8b 05 41 1c 02 00 	mov    0x21c41(%rip),%rax        # 31580 <pxCurrentTCB>
    f93f:	48 8b 40 58          	mov    0x58(%rax),%rax
    f943:	0f b6 d8             	movzbl %al,%ebx
    f946:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
    f94a:	48 89 c7             	mov    %rax,%rdi
    f94d:	e8 eb 37 01 00       	callq  2313d <prvTraceGetTaskNumberLow16>
    f952:	0f b6 c0             	movzbl %al,%eax
    f955:	89 da                	mov    %ebx,%edx
    f957:	89 c6                	mov    %eax,%esi
    f959:	bf 03 00 00 00       	mov    $0x3,%edi
    f95e:	e8 e9 5d 01 00       	callq  2574c <prvTraceSetPriorityProperty>
    f963:	48 c7 45 d8 01 00 00 	movq   $0x1,-0x28(%rbp)
    f96a:	00 
    f96b:	eb 23                	jmp    f990 <xTaskPriorityInherit+0x2b7>
    f96d:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
    f971:	48 8b 90 88 00 00 00 	mov    0x88(%rax),%rdx
    f978:	48 8b 05 01 1c 02 00 	mov    0x21c01(%rip),%rax        # 31580 <pxCurrentTCB>
    f97f:	48 8b 40 58          	mov    0x58(%rax),%rax
    f983:	48 39 c2             	cmp    %rax,%rdx
    f986:	73 08                	jae    f990 <xTaskPriorityInherit+0x2b7>
    f988:	48 c7 45 d8 01 00 00 	movq   $0x1,-0x28(%rbp)
    f98f:	00 
    f990:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
    f994:	48 83 c4 38          	add    $0x38,%rsp
    f998:	5b                   	pop    %rbx
    f999:	5d                   	pop    %rbp
    f99a:	c3                   	retq   

000000000000f99b <xTaskPriorityDisinherit>:
    f99b:	f3 0f 1e fa          	endbr64 
    f99f:	55                   	push   %rbp
    f9a0:	48 89 e5             	mov    %rsp,%rbp
    f9a3:	53                   	push   %rbx
    f9a4:	48 83 ec 38          	sub    $0x38,%rsp
    f9a8:	48 89 7d c8          	mov    %rdi,-0x38(%rbp)
    f9ac:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
    f9b0:	48 89 45 e0          	mov    %rax,-0x20(%rbp)
    f9b4:	48 c7 45 d8 00 00 00 	movq   $0x0,-0x28(%rbp)
    f9bb:	00 
    f9bc:	48 83 7d c8 00       	cmpq   $0x0,-0x38(%rbp)
    f9c1:	0f 84 78 02 00 00    	je     fc3f <xTaskPriorityDisinherit+0x2a4>
    f9c7:	48 8b 05 b2 1b 02 00 	mov    0x21bb2(%rip),%rax        # 31580 <pxCurrentTCB>
    f9ce:	48 39 45 e0          	cmp    %rax,-0x20(%rbp)
    f9d2:	74 11                	je     f9e5 <xTaskPriorityDisinherit+0x4a>
    f9d4:	be 4f 10 00 00       	mov    $0x104f,%esi
    f9d9:	48 8d 3d 00 7f 01 00 	lea    0x17f00(%rip),%rdi        # 278e0 <_IO_stdin_used+0x8e0>
    f9e0:	e8 27 43 ff ff       	callq  3d0c <vAssertCalled>
    f9e5:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
    f9e9:	48 8b 80 90 00 00 00 	mov    0x90(%rax),%rax
    f9f0:	48 85 c0             	test   %rax,%rax
    f9f3:	75 11                	jne    fa06 <xTaskPriorityDisinherit+0x6b>
    f9f5:	be 50 10 00 00       	mov    $0x1050,%esi
    f9fa:	48 8d 3d df 7e 01 00 	lea    0x17edf(%rip),%rdi        # 278e0 <_IO_stdin_used+0x8e0>
    fa01:	e8 06 43 ff ff       	callq  3d0c <vAssertCalled>
    fa06:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
    fa0a:	48 8b 80 90 00 00 00 	mov    0x90(%rax),%rax
    fa11:	48 8d 50 ff          	lea    -0x1(%rax),%rdx
    fa15:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
    fa19:	48 89 90 90 00 00 00 	mov    %rdx,0x90(%rax)
    fa20:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
    fa24:	48 8b 50 58          	mov    0x58(%rax),%rdx
    fa28:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
    fa2c:	48 8b 80 88 00 00 00 	mov    0x88(%rax),%rax
    fa33:	48 39 c2             	cmp    %rax,%rdx
    fa36:	0f 84 03 02 00 00    	je     fc3f <xTaskPriorityDisinherit+0x2a4>
    fa3c:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
    fa40:	48 8b 80 90 00 00 00 	mov    0x90(%rax),%rax
    fa47:	48 85 c0             	test   %rax,%rax
    fa4a:	0f 85 ef 01 00 00    	jne    fc3f <xTaskPriorityDisinherit+0x2a4>
    fa50:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
    fa54:	48 83 c0 08          	add    $0x8,%rax
    fa58:	48 89 c7             	mov    %rax,%rdi
    fa5b:	e8 7d 93 ff ff       	callq  8ddd <uxListRemove>
    fa60:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
    fa64:	48 89 c7             	mov    %rax,%rdi
    fa67:	e8 ef 36 01 00       	callq  2315b <prvTraceGetTaskNumberHigh16>
    fa6c:	0f b7 15 69 16 02 00 	movzwl 0x21669(%rip),%edx        # 310dc <CurrentFilterMask>
    fa73:	21 d0                	and    %edx,%eax
    fa75:	66 85 c0             	test   %ax,%ax
    fa78:	74 6b                	je     fae5 <xTaskPriorityDisinherit+0x14a>
    fa7a:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
    fa7e:	48 89 c7             	mov    %rax,%rdi
    fa81:	e8 b7 36 01 00       	callq  2313d <prvTraceGetTaskNumberLow16>
    fa86:	0f b6 c0             	movzbl %al,%eax
    fa89:	89 c6                	mov    %eax,%esi
    fa8b:	bf 03 00 00 00       	mov    $0x3,%edi
    fa90:	e8 57 5d 01 00       	callq  257ec <prvTraceGetPriorityProperty>
    fa95:	0f b6 d8             	movzbl %al,%ebx
    fa98:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
    fa9c:	48 89 c7             	mov    %rax,%rdi
    fa9f:	e8 99 36 01 00       	callq  2313d <prvTraceGetTaskNumberLow16>
    faa4:	0f b6 c0             	movzbl %al,%eax
    faa7:	89 d9                	mov    %ebx,%ecx
    faa9:	89 c2                	mov    %eax,%edx
    faab:	be 03 00 00 00       	mov    $0x3,%esi
    fab0:	bf 8f 00 00 00       	mov    $0x8f,%edi
    fab5:	e8 bb 56 01 00       	callq  25175 <prvTraceStoreKernelCallWithParam>
    faba:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
    fabe:	48 8b 80 88 00 00 00 	mov    0x88(%rax),%rax
    fac5:	0f b6 d8             	movzbl %al,%ebx
    fac8:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
    facc:	48 89 c7             	mov    %rax,%rdi
    facf:	e8 69 36 01 00       	callq  2313d <prvTraceGetTaskNumberLow16>
    fad4:	0f b6 c0             	movzbl %al,%eax
    fad7:	89 da                	mov    %ebx,%edx
    fad9:	89 c6                	mov    %eax,%esi
    fadb:	bf 03 00 00 00       	mov    $0x3,%edi
    fae0:	e8 67 5c 01 00       	callq  2574c <prvTraceSetPriorityProperty>
    fae5:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
    fae9:	48 8b 90 88 00 00 00 	mov    0x88(%rax),%rdx
    faf0:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
    faf4:	48 89 50 58          	mov    %rdx,0x58(%rax)
    faf8:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
    fafc:	48 8b 40 58          	mov    0x58(%rax),%rax
    fb00:	ba 07 00 00 00       	mov    $0x7,%edx
    fb05:	48 29 c2             	sub    %rax,%rdx
    fb08:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
    fb0c:	48 89 50 30          	mov    %rdx,0x30(%rax)
    fb10:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
    fb14:	48 89 c7             	mov    %rax,%rdi
    fb17:	e8 3f 36 01 00       	callq  2315b <prvTraceGetTaskNumberHigh16>
    fb1c:	0f b7 15 b9 15 02 00 	movzwl 0x215b9(%rip),%edx        # 310dc <CurrentFilterMask>
    fb23:	21 d0                	and    %edx,%eax
    fb25:	66 85 c0             	test   %ax,%ax
    fb28:	74 16                	je     fb40 <xTaskPriorityDisinherit+0x1a5>
    fb2a:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
    fb2e:	48 89 c7             	mov    %rax,%rdi
    fb31:	e8 07 36 01 00       	callq  2313d <prvTraceGetTaskNumberLow16>
    fb36:	0f b6 c0             	movzbl %al,%eax
    fb39:	89 c7                	mov    %eax,%edi
    fb3b:	e8 2e 52 01 00       	callq  24d6e <prvTraceStoreTaskReady>
    fb40:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
    fb44:	48 8b 50 58          	mov    0x58(%rax),%rdx
    fb48:	48 8b 05 a9 1c 02 00 	mov    0x21ca9(%rip),%rax        # 317f8 <uxTopReadyPriority>
    fb4f:	48 39 c2             	cmp    %rax,%rdx
    fb52:	76 0f                	jbe    fb63 <xTaskPriorityDisinherit+0x1c8>
    fb54:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
    fb58:	48 8b 40 58          	mov    0x58(%rax),%rax
    fb5c:	48 89 05 95 1c 02 00 	mov    %rax,0x21c95(%rip)        # 317f8 <uxTopReadyPriority>
    fb63:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
    fb67:	48 8b 50 58          	mov    0x58(%rax),%rdx
    fb6b:	48 89 d0             	mov    %rdx,%rax
    fb6e:	48 c1 e0 02          	shl    $0x2,%rax
    fb72:	48 01 d0             	add    %rdx,%rax
    fb75:	48 c1 e0 03          	shl    $0x3,%rax
    fb79:	48 89 c2             	mov    %rax,%rdx
    fb7c:	48 8d 05 25 1a 02 00 	lea    0x21a25(%rip),%rax        # 315a8 <pxReadyTasksLists+0x8>
    fb83:	48 8b 04 02          	mov    (%rdx,%rax,1),%rax
    fb87:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
    fb8b:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
    fb8f:	48 8b 55 e8          	mov    -0x18(%rbp),%rdx
    fb93:	48 89 50 10          	mov    %rdx,0x10(%rax)
    fb97:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
    fb9b:	48 8b 50 10          	mov    0x10(%rax),%rdx
    fb9f:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
    fba3:	48 89 50 18          	mov    %rdx,0x18(%rax)
    fba7:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
    fbab:	48 8b 40 10          	mov    0x10(%rax),%rax
    fbaf:	48 8b 55 e0          	mov    -0x20(%rbp),%rdx
    fbb3:	48 83 c2 08          	add    $0x8,%rdx
    fbb7:	48 89 50 08          	mov    %rdx,0x8(%rax)
    fbbb:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
    fbbf:	48 8d 50 08          	lea    0x8(%rax),%rdx
    fbc3:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
    fbc7:	48 89 50 10          	mov    %rdx,0x10(%rax)
    fbcb:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
    fbcf:	48 8b 50 58          	mov    0x58(%rax),%rdx
    fbd3:	48 89 d0             	mov    %rdx,%rax
    fbd6:	48 c1 e0 02          	shl    $0x2,%rax
    fbda:	48 01 d0             	add    %rdx,%rax
    fbdd:	48 c1 e0 03          	shl    $0x3,%rax
    fbe1:	48 8d 15 b8 19 02 00 	lea    0x219b8(%rip),%rdx        # 315a0 <pxReadyTasksLists>
    fbe8:	48 01 c2             	add    %rax,%rdx
    fbeb:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
    fbef:	48 89 50 28          	mov    %rdx,0x28(%rax)
    fbf3:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
    fbf7:	48 8b 50 58          	mov    0x58(%rax),%rdx
    fbfb:	48 89 d0             	mov    %rdx,%rax
    fbfe:	48 c1 e0 02          	shl    $0x2,%rax
    fc02:	48 01 d0             	add    %rdx,%rax
    fc05:	48 c1 e0 03          	shl    $0x3,%rax
    fc09:	48 89 c1             	mov    %rax,%rcx
    fc0c:	48 8d 05 8d 19 02 00 	lea    0x2198d(%rip),%rax        # 315a0 <pxReadyTasksLists>
    fc13:	48 8b 04 01          	mov    (%rcx,%rax,1),%rax
    fc17:	48 8d 48 01          	lea    0x1(%rax),%rcx
    fc1b:	48 89 d0             	mov    %rdx,%rax
    fc1e:	48 c1 e0 02          	shl    $0x2,%rax
    fc22:	48 01 d0             	add    %rdx,%rax
    fc25:	48 c1 e0 03          	shl    $0x3,%rax
    fc29:	48 89 c2             	mov    %rax,%rdx
    fc2c:	48 8d 05 6d 19 02 00 	lea    0x2196d(%rip),%rax        # 315a0 <pxReadyTasksLists>
    fc33:	48 89 0c 02          	mov    %rcx,(%rdx,%rax,1)
    fc37:	48 c7 45 d8 01 00 00 	movq   $0x1,-0x28(%rbp)
    fc3e:	00 
    fc3f:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
    fc43:	48 83 c4 38          	add    $0x38,%rsp
    fc47:	5b                   	pop    %rbx
    fc48:	5d                   	pop    %rbp
    fc49:	c3                   	retq   

000000000000fc4a <vTaskPriorityDisinheritAfterTimeout>:
    fc4a:	f3 0f 1e fa          	endbr64 
    fc4e:	55                   	push   %rbp
    fc4f:	48 89 e5             	mov    %rsp,%rbp
    fc52:	53                   	push   %rbx
    fc53:	48 83 ec 48          	sub    $0x48,%rsp
    fc57:	48 89 7d b8          	mov    %rdi,-0x48(%rbp)
    fc5b:	48 89 75 b0          	mov    %rsi,-0x50(%rbp)
    fc5f:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
    fc63:	48 89 45 d0          	mov    %rax,-0x30(%rbp)
    fc67:	48 c7 45 d8 01 00 00 	movq   $0x1,-0x28(%rbp)
    fc6e:	00 
    fc6f:	48 83 7d b8 00       	cmpq   $0x0,-0x48(%rbp)
    fc74:	0f 84 b0 02 00 00    	je     ff2a <vTaskPriorityDisinheritAfterTimeout+0x2e0>
    fc7a:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
    fc7e:	48 8b 80 90 00 00 00 	mov    0x90(%rax),%rax
    fc85:	48 85 c0             	test   %rax,%rax
    fc88:	75 11                	jne    fc9b <vTaskPriorityDisinheritAfterTimeout+0x51>
    fc8a:	be 9f 10 00 00       	mov    $0x109f,%esi
    fc8f:	48 8d 3d 4a 7c 01 00 	lea    0x17c4a(%rip),%rdi        # 278e0 <_IO_stdin_used+0x8e0>
    fc96:	e8 71 40 ff ff       	callq  3d0c <vAssertCalled>
    fc9b:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
    fc9f:	48 8b 80 88 00 00 00 	mov    0x88(%rax),%rax
    fca6:	48 39 45 b0          	cmp    %rax,-0x50(%rbp)
    fcaa:	76 0a                	jbe    fcb6 <vTaskPriorityDisinheritAfterTimeout+0x6c>
    fcac:	48 8b 45 b0          	mov    -0x50(%rbp),%rax
    fcb0:	48 89 45 c8          	mov    %rax,-0x38(%rbp)
    fcb4:	eb 0f                	jmp    fcc5 <vTaskPriorityDisinheritAfterTimeout+0x7b>
    fcb6:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
    fcba:	48 8b 80 88 00 00 00 	mov    0x88(%rax),%rax
    fcc1:	48 89 45 c8          	mov    %rax,-0x38(%rbp)
    fcc5:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
    fcc9:	48 8b 40 58          	mov    0x58(%rax),%rax
    fccd:	48 39 45 c8          	cmp    %rax,-0x38(%rbp)
    fcd1:	0f 84 53 02 00 00    	je     ff2a <vTaskPriorityDisinheritAfterTimeout+0x2e0>
    fcd7:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
    fcdb:	48 8b 80 90 00 00 00 	mov    0x90(%rax),%rax
    fce2:	48 39 45 d8          	cmp    %rax,-0x28(%rbp)
    fce6:	0f 85 3e 02 00 00    	jne    ff2a <vTaskPriorityDisinheritAfterTimeout+0x2e0>
    fcec:	48 8b 05 8d 18 02 00 	mov    0x2188d(%rip),%rax        # 31580 <pxCurrentTCB>
    fcf3:	48 39 45 d0          	cmp    %rax,-0x30(%rbp)
    fcf7:	75 11                	jne    fd0a <vTaskPriorityDisinheritAfterTimeout+0xc0>
    fcf9:	be ba 10 00 00       	mov    $0x10ba,%esi
    fcfe:	48 8d 3d db 7b 01 00 	lea    0x17bdb(%rip),%rdi        # 278e0 <_IO_stdin_used+0x8e0>
    fd05:	e8 02 40 ff ff       	callq  3d0c <vAssertCalled>
    fd0a:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
    fd0e:	48 89 c7             	mov    %rax,%rdi
    fd11:	e8 45 34 01 00       	callq  2315b <prvTraceGetTaskNumberHigh16>
    fd16:	0f b7 15 bf 13 02 00 	movzwl 0x213bf(%rip),%edx        # 310dc <CurrentFilterMask>
    fd1d:	21 d0                	and    %edx,%eax
    fd1f:	66 85 c0             	test   %ax,%ax
    fd22:	74 64                	je     fd88 <vTaskPriorityDisinheritAfterTimeout+0x13e>
    fd24:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
    fd28:	48 89 c7             	mov    %rax,%rdi
    fd2b:	e8 0d 34 01 00       	callq  2313d <prvTraceGetTaskNumberLow16>
    fd30:	0f b6 c0             	movzbl %al,%eax
    fd33:	89 c6                	mov    %eax,%esi
    fd35:	bf 03 00 00 00       	mov    $0x3,%edi
    fd3a:	e8 ad 5a 01 00       	callq  257ec <prvTraceGetPriorityProperty>
    fd3f:	0f b6 d8             	movzbl %al,%ebx
    fd42:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
    fd46:	48 89 c7             	mov    %rax,%rdi
    fd49:	e8 ef 33 01 00       	callq  2313d <prvTraceGetTaskNumberLow16>
    fd4e:	0f b6 c0             	movzbl %al,%eax
    fd51:	89 d9                	mov    %ebx,%ecx
    fd53:	89 c2                	mov    %eax,%edx
    fd55:	be 03 00 00 00       	mov    $0x3,%esi
    fd5a:	bf 8f 00 00 00       	mov    $0x8f,%edi
    fd5f:	e8 11 54 01 00       	callq  25175 <prvTraceStoreKernelCallWithParam>
    fd64:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
    fd68:	0f b6 d8             	movzbl %al,%ebx
    fd6b:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
    fd6f:	48 89 c7             	mov    %rax,%rdi
    fd72:	e8 c6 33 01 00       	callq  2313d <prvTraceGetTaskNumberLow16>
    fd77:	0f b6 c0             	movzbl %al,%eax
    fd7a:	89 da                	mov    %ebx,%edx
    fd7c:	89 c6                	mov    %eax,%esi
    fd7e:	bf 03 00 00 00       	mov    $0x3,%edi
    fd83:	e8 c4 59 01 00       	callq  2574c <prvTraceSetPriorityProperty>
    fd88:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
    fd8c:	48 8b 40 58          	mov    0x58(%rax),%rax
    fd90:	48 89 45 e0          	mov    %rax,-0x20(%rbp)
    fd94:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
    fd98:	48 8b 55 c8          	mov    -0x38(%rbp),%rdx
    fd9c:	48 89 50 58          	mov    %rdx,0x58(%rax)
    fda0:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
    fda4:	48 8b 40 30          	mov    0x30(%rax),%rax
    fda8:	25 00 00 00 80       	and    $0x80000000,%eax
    fdad:	48 85 c0             	test   %rax,%rax
    fdb0:	75 14                	jne    fdc6 <vTaskPriorityDisinheritAfterTimeout+0x17c>
    fdb2:	b8 07 00 00 00       	mov    $0x7,%eax
    fdb7:	48 2b 45 c8          	sub    -0x38(%rbp),%rax
    fdbb:	48 89 c2             	mov    %rax,%rdx
    fdbe:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
    fdc2:	48 89 50 30          	mov    %rdx,0x30(%rax)
    fdc6:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
    fdca:	48 8b 48 28          	mov    0x28(%rax),%rcx
    fdce:	48 8b 55 e0          	mov    -0x20(%rbp),%rdx
    fdd2:	48 89 d0             	mov    %rdx,%rax
    fdd5:	48 c1 e0 02          	shl    $0x2,%rax
    fdd9:	48 01 d0             	add    %rdx,%rax
    fddc:	48 c1 e0 03          	shl    $0x3,%rax
    fde0:	48 8d 15 b9 17 02 00 	lea    0x217b9(%rip),%rdx        # 315a0 <pxReadyTasksLists>
    fde7:	48 01 d0             	add    %rdx,%rax
    fdea:	48 39 c1             	cmp    %rax,%rcx
    fded:	0f 85 37 01 00 00    	jne    ff2a <vTaskPriorityDisinheritAfterTimeout+0x2e0>
    fdf3:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
    fdf7:	48 83 c0 08          	add    $0x8,%rax
    fdfb:	48 89 c7             	mov    %rax,%rdi
    fdfe:	e8 da 8f ff ff       	callq  8ddd <uxListRemove>
    fe03:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
    fe07:	48 89 c7             	mov    %rax,%rdi
    fe0a:	e8 4c 33 01 00       	callq  2315b <prvTraceGetTaskNumberHigh16>
    fe0f:	0f b7 15 c6 12 02 00 	movzwl 0x212c6(%rip),%edx        # 310dc <CurrentFilterMask>
    fe16:	21 d0                	and    %edx,%eax
    fe18:	66 85 c0             	test   %ax,%ax
    fe1b:	74 16                	je     fe33 <vTaskPriorityDisinheritAfterTimeout+0x1e9>
    fe1d:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
    fe21:	48 89 c7             	mov    %rax,%rdi
    fe24:	e8 14 33 01 00       	callq  2313d <prvTraceGetTaskNumberLow16>
    fe29:	0f b6 c0             	movzbl %al,%eax
    fe2c:	89 c7                	mov    %eax,%edi
    fe2e:	e8 3b 4f 01 00       	callq  24d6e <prvTraceStoreTaskReady>
    fe33:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
    fe37:	48 8b 50 58          	mov    0x58(%rax),%rdx
    fe3b:	48 8b 05 b6 19 02 00 	mov    0x219b6(%rip),%rax        # 317f8 <uxTopReadyPriority>
    fe42:	48 39 c2             	cmp    %rax,%rdx
    fe45:	76 0f                	jbe    fe56 <vTaskPriorityDisinheritAfterTimeout+0x20c>
    fe47:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
    fe4b:	48 8b 40 58          	mov    0x58(%rax),%rax
    fe4f:	48 89 05 a2 19 02 00 	mov    %rax,0x219a2(%rip)        # 317f8 <uxTopReadyPriority>
    fe56:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
    fe5a:	48 8b 50 58          	mov    0x58(%rax),%rdx
    fe5e:	48 89 d0             	mov    %rdx,%rax
    fe61:	48 c1 e0 02          	shl    $0x2,%rax
    fe65:	48 01 d0             	add    %rdx,%rax
    fe68:	48 c1 e0 03          	shl    $0x3,%rax
    fe6c:	48 89 c2             	mov    %rax,%rdx
    fe6f:	48 8d 05 32 17 02 00 	lea    0x21732(%rip),%rax        # 315a8 <pxReadyTasksLists+0x8>
    fe76:	48 8b 04 02          	mov    (%rdx,%rax,1),%rax
    fe7a:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
    fe7e:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
    fe82:	48 8b 55 e8          	mov    -0x18(%rbp),%rdx
    fe86:	48 89 50 10          	mov    %rdx,0x10(%rax)
    fe8a:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
    fe8e:	48 8b 50 10          	mov    0x10(%rax),%rdx
    fe92:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
    fe96:	48 89 50 18          	mov    %rdx,0x18(%rax)
    fe9a:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
    fe9e:	48 8b 40 10          	mov    0x10(%rax),%rax
    fea2:	48 8b 55 d0          	mov    -0x30(%rbp),%rdx
    fea6:	48 83 c2 08          	add    $0x8,%rdx
    feaa:	48 89 50 08          	mov    %rdx,0x8(%rax)
    feae:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
    feb2:	48 8d 50 08          	lea    0x8(%rax),%rdx
    feb6:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
    feba:	48 89 50 10          	mov    %rdx,0x10(%rax)
    febe:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
    fec2:	48 8b 50 58          	mov    0x58(%rax),%rdx
    fec6:	48 89 d0             	mov    %rdx,%rax
    fec9:	48 c1 e0 02          	shl    $0x2,%rax
    fecd:	48 01 d0             	add    %rdx,%rax
    fed0:	48 c1 e0 03          	shl    $0x3,%rax
    fed4:	48 8d 15 c5 16 02 00 	lea    0x216c5(%rip),%rdx        # 315a0 <pxReadyTasksLists>
    fedb:	48 01 c2             	add    %rax,%rdx
    fede:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
    fee2:	48 89 50 28          	mov    %rdx,0x28(%rax)
    fee6:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
    feea:	48 8b 50 58          	mov    0x58(%rax),%rdx
    feee:	48 89 d0             	mov    %rdx,%rax
    fef1:	48 c1 e0 02          	shl    $0x2,%rax
    fef5:	48 01 d0             	add    %rdx,%rax
    fef8:	48 c1 e0 03          	shl    $0x3,%rax
    fefc:	48 89 c1             	mov    %rax,%rcx
    feff:	48 8d 05 9a 16 02 00 	lea    0x2169a(%rip),%rax        # 315a0 <pxReadyTasksLists>
    ff06:	48 8b 04 01          	mov    (%rcx,%rax,1),%rax
    ff0a:	48 8d 48 01          	lea    0x1(%rax),%rcx
    ff0e:	48 89 d0             	mov    %rdx,%rax
    ff11:	48 c1 e0 02          	shl    $0x2,%rax
    ff15:	48 01 d0             	add    %rdx,%rax
    ff18:	48 c1 e0 03          	shl    $0x3,%rax
    ff1c:	48 89 c2             	mov    %rax,%rdx
    ff1f:	48 8d 05 7a 16 02 00 	lea    0x2167a(%rip),%rax        # 315a0 <pxReadyTasksLists>
    ff26:	48 89 0c 02          	mov    %rcx,(%rdx,%rax,1)
    ff2a:	90                   	nop
    ff2b:	48 83 c4 48          	add    $0x48,%rsp
    ff2f:	5b                   	pop    %rbx
    ff30:	5d                   	pop    %rbp
    ff31:	c3                   	retq   

000000000000ff32 <uxTaskResetEventItemValue>:
    ff32:	f3 0f 1e fa          	endbr64 
    ff36:	55                   	push   %rbp
    ff37:	48 89 e5             	mov    %rsp,%rbp
    ff3a:	48 8b 05 3f 16 02 00 	mov    0x2163f(%rip),%rax        # 31580 <pxCurrentTCB>
    ff41:	48 8b 40 30          	mov    0x30(%rax),%rax
    ff45:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
    ff49:	48 8b 05 30 16 02 00 	mov    0x21630(%rip),%rax        # 31580 <pxCurrentTCB>
    ff50:	48 8b 50 58          	mov    0x58(%rax),%rdx
    ff54:	48 8b 05 25 16 02 00 	mov    0x21625(%rip),%rax        # 31580 <pxCurrentTCB>
    ff5b:	b9 07 00 00 00       	mov    $0x7,%ecx
    ff60:	48 29 d1             	sub    %rdx,%rcx
    ff63:	48 89 ca             	mov    %rcx,%rdx
    ff66:	48 89 50 30          	mov    %rdx,0x30(%rax)
    ff6a:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    ff6e:	5d                   	pop    %rbp
    ff6f:	c3                   	retq   

000000000000ff70 <pvTaskIncrementMutexHeldCount>:
    ff70:	f3 0f 1e fa          	endbr64 
    ff74:	55                   	push   %rbp
    ff75:	48 89 e5             	mov    %rsp,%rbp
    ff78:	48 8b 05 01 16 02 00 	mov    0x21601(%rip),%rax        # 31580 <pxCurrentTCB>
    ff7f:	48 85 c0             	test   %rax,%rax
    ff82:	74 19                	je     ff9d <pvTaskIncrementMutexHeldCount+0x2d>
    ff84:	48 8b 05 f5 15 02 00 	mov    0x215f5(%rip),%rax        # 31580 <pxCurrentTCB>
    ff8b:	48 8b 90 90 00 00 00 	mov    0x90(%rax),%rdx
    ff92:	48 83 c2 01          	add    $0x1,%rdx
    ff96:	48 89 90 90 00 00 00 	mov    %rdx,0x90(%rax)
    ff9d:	48 8b 05 dc 15 02 00 	mov    0x215dc(%rip),%rax        # 31580 <pxCurrentTCB>
    ffa4:	5d                   	pop    %rbp
    ffa5:	c3                   	retq   

000000000000ffa6 <ulTaskGenericNotifyTake>:
    ffa6:	f3 0f 1e fa          	endbr64 
    ffaa:	55                   	push   %rbp
    ffab:	48 89 e5             	mov    %rsp,%rbp
    ffae:	53                   	push   %rbx
    ffaf:	48 83 ec 38          	sub    $0x38,%rsp
    ffb3:	48 89 7d d8          	mov    %rdi,-0x28(%rbp)
    ffb7:	48 89 75 d0          	mov    %rsi,-0x30(%rbp)
    ffbb:	48 89 55 c8          	mov    %rdx,-0x38(%rbp)
    ffbf:	48 83 7d d8 00       	cmpq   $0x0,-0x28(%rbp)
    ffc4:	74 11                	je     ffd7 <ulTaskGenericNotifyTake+0x31>
    ffc6:	be 66 12 00 00       	mov    $0x1266,%esi
    ffcb:	48 8d 3d 0e 79 01 00 	lea    0x1790e(%rip),%rdi        # 278e0 <_IO_stdin_used+0x8e0>
    ffd2:	e8 35 3d ff ff       	callq  3d0c <vAssertCalled>
    ffd7:	e8 f3 2d 00 00       	callq  12dcf <vPortEnterCritical>
    ffdc:	48 8b 05 9d 15 02 00 	mov    0x2159d(%rip),%rax        # 31580 <pxCurrentTCB>
    ffe3:	48 8b 55 d8          	mov    -0x28(%rbp),%rdx
    ffe7:	48 83 c2 28          	add    $0x28,%rdx
    ffeb:	8b 44 90 04          	mov    0x4(%rax,%rdx,4),%eax
    ffef:	85 c0                	test   %eax,%eax
    fff1:	0f 85 cd 00 00 00    	jne    100c4 <ulTaskGenericNotifyTake+0x11e>
    fff7:	48 8b 15 82 15 02 00 	mov    0x21582(%rip),%rdx        # 31580 <pxCurrentTCB>
    fffe:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
   10002:	48 01 d0             	add    %rdx,%rax
   10005:	48 05 a8 00 00 00    	add    $0xa8,%rax
   1000b:	c6 00 01             	movb   $0x1,(%rax)
   1000e:	48 83 7d c8 00       	cmpq   $0x0,-0x38(%rbp)
   10013:	0f 84 ab 00 00 00    	je     100c4 <ulTaskGenericNotifyTake+0x11e>
   10019:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
   1001d:	be 01 00 00 00       	mov    $0x1,%esi
   10022:	48 89 c7             	mov    %rax,%rdi
   10025:	e8 6d 11 00 00       	callq  11197 <prvAddCurrentTaskToDelayedList>
   1002a:	e8 2d 36 01 00       	callq  2365c <prvTraceGetCurrentTaskHandle>
   1002f:	48 89 c7             	mov    %rax,%rdi
   10032:	e8 24 31 01 00       	callq  2315b <prvTraceGetTaskNumberHigh16>
   10037:	0f b7 15 9e 10 02 00 	movzwl 0x2109e(%rip),%edx        # 310dc <CurrentFilterMask>
   1003e:	21 d0                	and    %edx,%eax
   10040:	66 85 c0             	test   %ax,%ax
   10043:	74 48                	je     1008d <ulTaskGenericNotifyTake+0xe7>
   10045:	48 8b 05 34 15 02 00 	mov    0x21534(%rip),%rax        # 31580 <pxCurrentTCB>
   1004c:	48 89 c7             	mov    %rax,%rdi
   1004f:	e8 07 31 01 00       	callq  2315b <prvTraceGetTaskNumberHigh16>
   10054:	0f b7 15 81 10 02 00 	movzwl 0x21081(%rip),%edx        # 310dc <CurrentFilterMask>
   1005b:	21 d0                	and    %edx,%eax
   1005d:	66 85 c0             	test   %ax,%ax
   10060:	74 2b                	je     1008d <ulTaskGenericNotifyTake+0xe7>
   10062:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
   10066:	89 c3                	mov    %eax,%ebx
   10068:	48 8b 05 11 15 02 00 	mov    0x21511(%rip),%rax        # 31580 <pxCurrentTCB>
   1006f:	48 89 c7             	mov    %rax,%rdi
   10072:	e8 c6 30 01 00       	callq  2313d <prvTraceGetTaskNumberLow16>
   10077:	0f b6 c0             	movzbl %al,%eax
   1007a:	89 d9                	mov    %ebx,%ecx
   1007c:	89 c2                	mov    %eax,%edx
   1007e:	be 03 00 00 00       	mov    $0x3,%esi
   10083:	bf d4 00 00 00       	mov    $0xd4,%edi
   10088:	e8 e8 50 01 00       	callq  25175 <prvTraceStoreKernelCallWithParam>
   1008d:	e8 ca 35 01 00       	callq  2365c <prvTraceGetCurrentTaskHandle>
   10092:	48 89 c7             	mov    %rax,%rdi
   10095:	e8 c1 30 01 00       	callq  2315b <prvTraceGetTaskNumberHigh16>
   1009a:	0f b7 15 3b 10 02 00 	movzwl 0x2103b(%rip),%edx        # 310dc <CurrentFilterMask>
   100a1:	21 d0                	and    %edx,%eax
   100a3:	66 85 c0             	test   %ax,%ax
   100a6:	74 17                	je     100bf <ulTaskGenericNotifyTake+0x119>
   100a8:	e8 af 35 01 00       	callq  2365c <prvTraceGetCurrentTaskHandle>
   100ad:	48 89 c7             	mov    %rax,%rdi
   100b0:	e8 88 30 01 00       	callq  2313d <prvTraceGetTaskNumberLow16>
   100b5:	0f b6 c0             	movzbl %al,%eax
   100b8:	89 c7                	mov    %eax,%edi
   100ba:	e8 07 59 01 00       	callq  259c6 <prvTraceSetTaskInstanceFinished>
   100bf:	e8 b0 2d 00 00       	callq  12e74 <vPortYield>
   100c4:	e8 34 2d 00 00       	callq  12dfd <vPortExitCritical>
   100c9:	e8 01 2d 00 00       	callq  12dcf <vPortEnterCritical>
   100ce:	48 8b 15 ab 14 02 00 	mov    0x214ab(%rip),%rdx        # 31580 <pxCurrentTCB>
   100d5:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
   100d9:	48 01 d0             	add    %rdx,%rax
   100dc:	48 05 a8 00 00 00    	add    $0xa8,%rax
   100e2:	0f b6 00             	movzbl (%rax),%eax
   100e5:	3c 02                	cmp    $0x2,%al
   100e7:	75 6d                	jne    10156 <ulTaskGenericNotifyTake+0x1b0>
   100e9:	e8 6e 35 01 00       	callq  2365c <prvTraceGetCurrentTaskHandle>
   100ee:	48 89 c7             	mov    %rax,%rdi
   100f1:	e8 65 30 01 00       	callq  2315b <prvTraceGetTaskNumberHigh16>
   100f6:	0f b7 15 df 0f 02 00 	movzwl 0x20fdf(%rip),%edx        # 310dc <CurrentFilterMask>
   100fd:	21 d0                	and    %edx,%eax
   100ff:	66 85 c0             	test   %ax,%ax
   10102:	0f 84 b1 00 00 00    	je     101b9 <ulTaskGenericNotifyTake+0x213>
   10108:	48 8b 05 71 14 02 00 	mov    0x21471(%rip),%rax        # 31580 <pxCurrentTCB>
   1010f:	48 89 c7             	mov    %rax,%rdi
   10112:	e8 44 30 01 00       	callq  2315b <prvTraceGetTaskNumberHigh16>
   10117:	0f b7 15 be 0f 02 00 	movzwl 0x20fbe(%rip),%edx        # 310dc <CurrentFilterMask>
   1011e:	21 d0                	and    %edx,%eax
   10120:	66 85 c0             	test   %ax,%ax
   10123:	0f 84 90 00 00 00    	je     101b9 <ulTaskGenericNotifyTake+0x213>
   10129:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
   1012d:	89 c3                	mov    %eax,%ebx
   1012f:	48 8b 05 4a 14 02 00 	mov    0x2144a(%rip),%rax        # 31580 <pxCurrentTCB>
   10136:	48 89 c7             	mov    %rax,%rdi
   10139:	e8 ff 2f 01 00       	callq  2313d <prvTraceGetTaskNumberLow16>
   1013e:	0f b6 c0             	movzbl %al,%eax
   10141:	89 d9                	mov    %ebx,%ecx
   10143:	89 c2                	mov    %eax,%edx
   10145:	be 03 00 00 00       	mov    $0x3,%esi
   1014a:	bf d3 00 00 00       	mov    $0xd3,%edi
   1014f:	e8 21 50 01 00       	callq  25175 <prvTraceStoreKernelCallWithParam>
   10154:	eb 63                	jmp    101b9 <ulTaskGenericNotifyTake+0x213>
   10156:	e8 01 35 01 00       	callq  2365c <prvTraceGetCurrentTaskHandle>
   1015b:	48 89 c7             	mov    %rax,%rdi
   1015e:	e8 f8 2f 01 00       	callq  2315b <prvTraceGetTaskNumberHigh16>
   10163:	0f b7 15 72 0f 02 00 	movzwl 0x20f72(%rip),%edx        # 310dc <CurrentFilterMask>
   1016a:	21 d0                	and    %edx,%eax
   1016c:	66 85 c0             	test   %ax,%ax
   1016f:	74 48                	je     101b9 <ulTaskGenericNotifyTake+0x213>
   10171:	48 8b 05 08 14 02 00 	mov    0x21408(%rip),%rax        # 31580 <pxCurrentTCB>
   10178:	48 89 c7             	mov    %rax,%rdi
   1017b:	e8 db 2f 01 00       	callq  2315b <prvTraceGetTaskNumberHigh16>
   10180:	0f b7 15 55 0f 02 00 	movzwl 0x20f55(%rip),%edx        # 310dc <CurrentFilterMask>
   10187:	21 d0                	and    %edx,%eax
   10189:	66 85 c0             	test   %ax,%ax
   1018c:	74 2b                	je     101b9 <ulTaskGenericNotifyTake+0x213>
   1018e:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
   10192:	89 c3                	mov    %eax,%ebx
   10194:	48 8b 05 e5 13 02 00 	mov    0x213e5(%rip),%rax        # 31580 <pxCurrentTCB>
   1019b:	48 89 c7             	mov    %rax,%rdi
   1019e:	e8 9a 2f 01 00       	callq  2313d <prvTraceGetTaskNumberLow16>
   101a3:	0f b6 c0             	movzbl %al,%eax
   101a6:	89 d9                	mov    %ebx,%ecx
   101a8:	89 c2                	mov    %eax,%edx
   101aa:	be 03 00 00 00       	mov    $0x3,%esi
   101af:	bf d5 00 00 00       	mov    $0xd5,%edi
   101b4:	e8 bc 4f 01 00       	callq  25175 <prvTraceStoreKernelCallWithParam>
   101b9:	48 8b 05 c0 13 02 00 	mov    0x213c0(%rip),%rax        # 31580 <pxCurrentTCB>
   101c0:	48 8b 55 d8          	mov    -0x28(%rbp),%rdx
   101c4:	48 83 c2 28          	add    $0x28,%rdx
   101c8:	8b 44 90 04          	mov    0x4(%rax,%rdx,4),%eax
   101cc:	89 45 ec             	mov    %eax,-0x14(%rbp)
   101cf:	83 7d ec 00          	cmpl   $0x0,-0x14(%rbp)
   101d3:	74 39                	je     1020e <ulTaskGenericNotifyTake+0x268>
   101d5:	48 83 7d d0 00       	cmpq   $0x0,-0x30(%rbp)
   101da:	74 19                	je     101f5 <ulTaskGenericNotifyTake+0x24f>
   101dc:	48 8b 05 9d 13 02 00 	mov    0x2139d(%rip),%rax        # 31580 <pxCurrentTCB>
   101e3:	48 8b 55 d8          	mov    -0x28(%rbp),%rdx
   101e7:	48 83 c2 28          	add    $0x28,%rdx
   101eb:	c7 44 90 04 00 00 00 	movl   $0x0,0x4(%rax,%rdx,4)
   101f2:	00 
   101f3:	eb 19                	jmp    1020e <ulTaskGenericNotifyTake+0x268>
   101f5:	48 8b 05 84 13 02 00 	mov    0x21384(%rip),%rax        # 31580 <pxCurrentTCB>
   101fc:	8b 55 ec             	mov    -0x14(%rbp),%edx
   101ff:	8d 4a ff             	lea    -0x1(%rdx),%ecx
   10202:	48 8b 55 d8          	mov    -0x28(%rbp),%rdx
   10206:	48 83 c2 28          	add    $0x28,%rdx
   1020a:	89 4c 90 04          	mov    %ecx,0x4(%rax,%rdx,4)
   1020e:	48 8b 15 6b 13 02 00 	mov    0x2136b(%rip),%rdx        # 31580 <pxCurrentTCB>
   10215:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
   10219:	48 01 d0             	add    %rdx,%rax
   1021c:	48 05 a8 00 00 00    	add    $0xa8,%rax
   10222:	c6 00 00             	movb   $0x0,(%rax)
   10225:	e8 d3 2b 00 00       	callq  12dfd <vPortExitCritical>
   1022a:	8b 45 ec             	mov    -0x14(%rbp),%eax
   1022d:	48 83 c4 38          	add    $0x38,%rsp
   10231:	5b                   	pop    %rbx
   10232:	5d                   	pop    %rbp
   10233:	c3                   	retq   

0000000000010234 <xTaskGenericNotifyWait>:
   10234:	f3 0f 1e fa          	endbr64 
   10238:	55                   	push   %rbp
   10239:	48 89 e5             	mov    %rsp,%rbp
   1023c:	53                   	push   %rbx
   1023d:	48 83 ec 38          	sub    $0x38,%rsp
   10241:	48 89 7d d8          	mov    %rdi,-0x28(%rbp)
   10245:	89 75 d4             	mov    %esi,-0x2c(%rbp)
   10248:	89 55 d0             	mov    %edx,-0x30(%rbp)
   1024b:	48 89 4d c8          	mov    %rcx,-0x38(%rbp)
   1024f:	4c 89 45 c0          	mov    %r8,-0x40(%rbp)
   10253:	48 83 7d d8 00       	cmpq   $0x0,-0x28(%rbp)
   10258:	74 11                	je     1026b <xTaskGenericNotifyWait+0x37>
   1025a:	be b0 12 00 00       	mov    $0x12b0,%esi
   1025f:	48 8d 3d 7a 76 01 00 	lea    0x1767a(%rip),%rdi        # 278e0 <_IO_stdin_used+0x8e0>
   10266:	e8 a1 3a ff ff       	callq  3d0c <vAssertCalled>
   1026b:	e8 5f 2b 00 00       	callq  12dcf <vPortEnterCritical>
   10270:	48 8b 15 09 13 02 00 	mov    0x21309(%rip),%rdx        # 31580 <pxCurrentTCB>
   10277:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
   1027b:	48 01 d0             	add    %rdx,%rax
   1027e:	48 05 a8 00 00 00    	add    $0xa8,%rax
   10284:	0f b6 00             	movzbl (%rax),%eax
   10287:	3c 02                	cmp    $0x2,%al
   10289:	0f 84 d8 00 00 00    	je     10367 <xTaskGenericNotifyWait+0x133>
   1028f:	48 8b 05 ea 12 02 00 	mov    0x212ea(%rip),%rax        # 31580 <pxCurrentTCB>
   10296:	48 8b 55 d8          	mov    -0x28(%rbp),%rdx
   1029a:	48 83 c2 28          	add    $0x28,%rdx
   1029e:	8b 54 90 04          	mov    0x4(%rax,%rdx,4),%edx
   102a2:	8b 4d d4             	mov    -0x2c(%rbp),%ecx
   102a5:	f7 d1                	not    %ecx
   102a7:	21 d1                	and    %edx,%ecx
   102a9:	48 8b 55 d8          	mov    -0x28(%rbp),%rdx
   102ad:	48 83 c2 28          	add    $0x28,%rdx
   102b1:	89 4c 90 04          	mov    %ecx,0x4(%rax,%rdx,4)
   102b5:	48 8b 15 c4 12 02 00 	mov    0x212c4(%rip),%rdx        # 31580 <pxCurrentTCB>
   102bc:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
   102c0:	48 01 d0             	add    %rdx,%rax
   102c3:	48 05 a8 00 00 00    	add    $0xa8,%rax
   102c9:	c6 00 01             	movb   $0x1,(%rax)
   102cc:	48 83 7d c0 00       	cmpq   $0x0,-0x40(%rbp)
   102d1:	0f 84 90 00 00 00    	je     10367 <xTaskGenericNotifyWait+0x133>
   102d7:	48 8b 45 c0          	mov    -0x40(%rbp),%rax
   102db:	be 01 00 00 00       	mov    $0x1,%esi
   102e0:	48 89 c7             	mov    %rax,%rdi
   102e3:	e8 af 0e 00 00       	callq  11197 <prvAddCurrentTaskToDelayedList>
   102e8:	48 8b 05 91 12 02 00 	mov    0x21291(%rip),%rax        # 31580 <pxCurrentTCB>
   102ef:	48 89 c7             	mov    %rax,%rdi
   102f2:	e8 64 2e 01 00       	callq  2315b <prvTraceGetTaskNumberHigh16>
   102f7:	0f b7 15 de 0d 02 00 	movzwl 0x20dde(%rip),%edx        # 310dc <CurrentFilterMask>
   102fe:	21 d0                	and    %edx,%eax
   10300:	66 85 c0             	test   %ax,%ax
   10303:	74 2b                	je     10330 <xTaskGenericNotifyWait+0xfc>
   10305:	48 8b 45 c0          	mov    -0x40(%rbp),%rax
   10309:	89 c3                	mov    %eax,%ebx
   1030b:	48 8b 05 6e 12 02 00 	mov    0x2126e(%rip),%rax        # 31580 <pxCurrentTCB>
   10312:	48 89 c7             	mov    %rax,%rdi
   10315:	e8 23 2e 01 00       	callq  2313d <prvTraceGetTaskNumberLow16>
   1031a:	0f b6 c0             	movzbl %al,%eax
   1031d:	89 d9                	mov    %ebx,%ecx
   1031f:	89 c2                	mov    %eax,%edx
   10321:	be 03 00 00 00       	mov    $0x3,%esi
   10326:	bf d7 00 00 00       	mov    $0xd7,%edi
   1032b:	e8 45 4e 01 00       	callq  25175 <prvTraceStoreKernelCallWithParam>
   10330:	e8 27 33 01 00       	callq  2365c <prvTraceGetCurrentTaskHandle>
   10335:	48 89 c7             	mov    %rax,%rdi
   10338:	e8 1e 2e 01 00       	callq  2315b <prvTraceGetTaskNumberHigh16>
   1033d:	0f b7 15 98 0d 02 00 	movzwl 0x20d98(%rip),%edx        # 310dc <CurrentFilterMask>
   10344:	21 d0                	and    %edx,%eax
   10346:	66 85 c0             	test   %ax,%ax
   10349:	74 17                	je     10362 <xTaskGenericNotifyWait+0x12e>
   1034b:	e8 0c 33 01 00       	callq  2365c <prvTraceGetCurrentTaskHandle>
   10350:	48 89 c7             	mov    %rax,%rdi
   10353:	e8 e5 2d 01 00       	callq  2313d <prvTraceGetTaskNumberLow16>
   10358:	0f b6 c0             	movzbl %al,%eax
   1035b:	89 c7                	mov    %eax,%edi
   1035d:	e8 64 56 01 00       	callq  259c6 <prvTraceSetTaskInstanceFinished>
   10362:	e8 0d 2b 00 00       	callq  12e74 <vPortYield>
   10367:	e8 91 2a 00 00       	callq  12dfd <vPortExitCritical>
   1036c:	e8 5e 2a 00 00       	callq  12dcf <vPortEnterCritical>
   10371:	48 8b 05 08 12 02 00 	mov    0x21208(%rip),%rax        # 31580 <pxCurrentTCB>
   10378:	48 89 c7             	mov    %rax,%rdi
   1037b:	e8 db 2d 01 00       	callq  2315b <prvTraceGetTaskNumberHigh16>
   10380:	0f b7 15 55 0d 02 00 	movzwl 0x20d55(%rip),%edx        # 310dc <CurrentFilterMask>
   10387:	21 d0                	and    %edx,%eax
   10389:	66 85 c0             	test   %ax,%ax
   1038c:	74 73                	je     10401 <xTaskGenericNotifyWait+0x1cd>
   1038e:	48 8b 15 eb 11 02 00 	mov    0x211eb(%rip),%rdx        # 31580 <pxCurrentTCB>
   10395:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
   10399:	48 01 d0             	add    %rdx,%rax
   1039c:	48 05 a8 00 00 00    	add    $0xa8,%rax
   103a2:	0f b6 00             	movzbl (%rax),%eax
   103a5:	3c 02                	cmp    $0x2,%al
   103a7:	75 2d                	jne    103d6 <xTaskGenericNotifyWait+0x1a2>
   103a9:	48 8b 45 c0          	mov    -0x40(%rbp),%rax
   103ad:	89 c3                	mov    %eax,%ebx
   103af:	48 8b 05 ca 11 02 00 	mov    0x211ca(%rip),%rax        # 31580 <pxCurrentTCB>
   103b6:	48 89 c7             	mov    %rax,%rdi
   103b9:	e8 7f 2d 01 00       	callq  2313d <prvTraceGetTaskNumberLow16>
   103be:	0f b6 c0             	movzbl %al,%eax
   103c1:	89 d9                	mov    %ebx,%ecx
   103c3:	89 c2                	mov    %eax,%edx
   103c5:	be 03 00 00 00       	mov    $0x3,%esi
   103ca:	bf d6 00 00 00       	mov    $0xd6,%edi
   103cf:	e8 a1 4d 01 00       	callq  25175 <prvTraceStoreKernelCallWithParam>
   103d4:	eb 2b                	jmp    10401 <xTaskGenericNotifyWait+0x1cd>
   103d6:	48 8b 45 c0          	mov    -0x40(%rbp),%rax
   103da:	89 c3                	mov    %eax,%ebx
   103dc:	48 8b 05 9d 11 02 00 	mov    0x2119d(%rip),%rax        # 31580 <pxCurrentTCB>
   103e3:	48 89 c7             	mov    %rax,%rdi
   103e6:	e8 52 2d 01 00       	callq  2313d <prvTraceGetTaskNumberLow16>
   103eb:	0f b6 c0             	movzbl %al,%eax
   103ee:	89 d9                	mov    %ebx,%ecx
   103f0:	89 c2                	mov    %eax,%edx
   103f2:	be 03 00 00 00       	mov    $0x3,%esi
   103f7:	bf d8 00 00 00       	mov    $0xd8,%edi
   103fc:	e8 74 4d 01 00       	callq  25175 <prvTraceStoreKernelCallWithParam>
   10401:	48 83 7d c8 00       	cmpq   $0x0,-0x38(%rbp)
   10406:	74 19                	je     10421 <xTaskGenericNotifyWait+0x1ed>
   10408:	48 8b 05 71 11 02 00 	mov    0x21171(%rip),%rax        # 31580 <pxCurrentTCB>
   1040f:	48 8b 55 d8          	mov    -0x28(%rbp),%rdx
   10413:	48 83 c2 28          	add    $0x28,%rdx
   10417:	8b 54 90 04          	mov    0x4(%rax,%rdx,4),%edx
   1041b:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
   1041f:	89 10                	mov    %edx,(%rax)
   10421:	48 8b 15 58 11 02 00 	mov    0x21158(%rip),%rdx        # 31580 <pxCurrentTCB>
   10428:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
   1042c:	48 01 d0             	add    %rdx,%rax
   1042f:	48 05 a8 00 00 00    	add    $0xa8,%rax
   10435:	0f b6 00             	movzbl (%rax),%eax
   10438:	3c 02                	cmp    $0x2,%al
   1043a:	74 0a                	je     10446 <xTaskGenericNotifyWait+0x212>
   1043c:	48 c7 45 e8 00 00 00 	movq   $0x0,-0x18(%rbp)
   10443:	00 
   10444:	eb 2e                	jmp    10474 <xTaskGenericNotifyWait+0x240>
   10446:	48 8b 05 33 11 02 00 	mov    0x21133(%rip),%rax        # 31580 <pxCurrentTCB>
   1044d:	48 8b 55 d8          	mov    -0x28(%rbp),%rdx
   10451:	48 83 c2 28          	add    $0x28,%rdx
   10455:	8b 54 90 04          	mov    0x4(%rax,%rdx,4),%edx
   10459:	8b 4d d0             	mov    -0x30(%rbp),%ecx
   1045c:	f7 d1                	not    %ecx
   1045e:	21 d1                	and    %edx,%ecx
   10460:	48 8b 55 d8          	mov    -0x28(%rbp),%rdx
   10464:	48 83 c2 28          	add    $0x28,%rdx
   10468:	89 4c 90 04          	mov    %ecx,0x4(%rax,%rdx,4)
   1046c:	48 c7 45 e8 01 00 00 	movq   $0x1,-0x18(%rbp)
   10473:	00 
   10474:	48 8b 15 05 11 02 00 	mov    0x21105(%rip),%rdx        # 31580 <pxCurrentTCB>
   1047b:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
   1047f:	48 01 d0             	add    %rdx,%rax
   10482:	48 05 a8 00 00 00    	add    $0xa8,%rax
   10488:	c6 00 00             	movb   $0x0,(%rax)
   1048b:	e8 6d 29 00 00       	callq  12dfd <vPortExitCritical>
   10490:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
   10494:	48 83 c4 38          	add    $0x38,%rsp
   10498:	5b                   	pop    %rbx
   10499:	5d                   	pop    %rbp
   1049a:	c3                   	retq   

000000000001049b <xTaskGenericNotify>:
   1049b:	f3 0f 1e fa          	endbr64 
   1049f:	55                   	push   %rbp
   104a0:	48 89 e5             	mov    %rsp,%rbp
   104a3:	48 83 ec 50          	sub    $0x50,%rsp
   104a7:	48 89 7d c8          	mov    %rdi,-0x38(%rbp)
   104ab:	48 89 75 c0          	mov    %rsi,-0x40(%rbp)
   104af:	89 55 bc             	mov    %edx,-0x44(%rbp)
   104b2:	89 4d b8             	mov    %ecx,-0x48(%rbp)
   104b5:	4c 89 45 b0          	mov    %r8,-0x50(%rbp)
   104b9:	48 c7 45 e0 01 00 00 	movq   $0x1,-0x20(%rbp)
   104c0:	00 
   104c1:	48 83 7d c0 00       	cmpq   $0x0,-0x40(%rbp)
   104c6:	74 11                	je     104d9 <xTaskGenericNotify+0x3e>
   104c8:	be 08 13 00 00       	mov    $0x1308,%esi
   104cd:	48 8d 3d 0c 74 01 00 	lea    0x1740c(%rip),%rdi        # 278e0 <_IO_stdin_used+0x8e0>
   104d4:	e8 33 38 ff ff       	callq  3d0c <vAssertCalled>
   104d9:	48 83 7d c8 00       	cmpq   $0x0,-0x38(%rbp)
   104de:	75 11                	jne    104f1 <xTaskGenericNotify+0x56>
   104e0:	be 09 13 00 00       	mov    $0x1309,%esi
   104e5:	48 8d 3d f4 73 01 00 	lea    0x173f4(%rip),%rdi        # 278e0 <_IO_stdin_used+0x8e0>
   104ec:	e8 1b 38 ff ff       	callq  3d0c <vAssertCalled>
   104f1:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
   104f5:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
   104f9:	e8 d1 28 00 00       	callq  12dcf <vPortEnterCritical>
   104fe:	48 83 7d b0 00       	cmpq   $0x0,-0x50(%rbp)
   10503:	74 16                	je     1051b <xTaskGenericNotify+0x80>
   10505:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
   10509:	48 8b 55 c0          	mov    -0x40(%rbp),%rdx
   1050d:	48 83 c2 28          	add    $0x28,%rdx
   10511:	8b 54 90 04          	mov    0x4(%rax,%rdx,4),%edx
   10515:	48 8b 45 b0          	mov    -0x50(%rbp),%rax
   10519:	89 10                	mov    %edx,(%rax)
   1051b:	48 8b 55 e8          	mov    -0x18(%rbp),%rdx
   1051f:	48 8b 45 c0          	mov    -0x40(%rbp),%rax
   10523:	48 01 d0             	add    %rdx,%rax
   10526:	48 05 a8 00 00 00    	add    $0xa8,%rax
   1052c:	0f b6 00             	movzbl (%rax),%eax
   1052f:	88 45 df             	mov    %al,-0x21(%rbp)
   10532:	48 8b 55 e8          	mov    -0x18(%rbp),%rdx
   10536:	48 8b 45 c0          	mov    -0x40(%rbp),%rax
   1053a:	48 01 d0             	add    %rdx,%rax
   1053d:	48 05 a8 00 00 00    	add    $0xa8,%rax
   10543:	c6 00 02             	movb   $0x2,(%rax)
   10546:	83 7d b8 04          	cmpl   $0x4,-0x48(%rbp)
   1054a:	0f 87 ad 00 00 00    	ja     105fd <xTaskGenericNotify+0x162>
   10550:	8b 45 b8             	mov    -0x48(%rbp),%eax
   10553:	48 8d 14 85 00 00 00 	lea    0x0(,%rax,4),%rdx
   1055a:	00 
   1055b:	48 8d 05 ba 73 01 00 	lea    0x173ba(%rip),%rax        # 2791c <_IO_stdin_used+0x91c>
   10562:	8b 04 02             	mov    (%rdx,%rax,1),%eax
   10565:	48 98                	cltq   
   10567:	48 8d 15 ae 73 01 00 	lea    0x173ae(%rip),%rdx        # 2791c <_IO_stdin_used+0x91c>
   1056e:	48 01 d0             	add    %rdx,%rax
   10571:	3e ff e0             	notrack jmpq *%rax
   10574:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
   10578:	48 8b 55 c0          	mov    -0x40(%rbp),%rdx
   1057c:	48 83 c2 28          	add    $0x28,%rdx
   10580:	8b 44 90 04          	mov    0x4(%rax,%rdx,4),%eax
   10584:	0b 45 bc             	or     -0x44(%rbp),%eax
   10587:	89 c2                	mov    %eax,%edx
   10589:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
   1058d:	48 8b 4d c0          	mov    -0x40(%rbp),%rcx
   10591:	48 83 c1 28          	add    $0x28,%rcx
   10595:	89 54 88 04          	mov    %edx,0x4(%rax,%rcx,4)
   10599:	e9 82 00 00 00       	jmpq   10620 <xTaskGenericNotify+0x185>
   1059e:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
   105a2:	48 8b 55 c0          	mov    -0x40(%rbp),%rdx
   105a6:	48 83 c2 28          	add    $0x28,%rdx
   105aa:	8b 44 90 04          	mov    0x4(%rax,%rdx,4),%eax
   105ae:	8d 48 01             	lea    0x1(%rax),%ecx
   105b1:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
   105b5:	48 8b 55 c0          	mov    -0x40(%rbp),%rdx
   105b9:	48 83 c2 28          	add    $0x28,%rdx
   105bd:	89 4c 90 04          	mov    %ecx,0x4(%rax,%rdx,4)
   105c1:	eb 5d                	jmp    10620 <xTaskGenericNotify+0x185>
   105c3:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
   105c7:	48 8b 55 c0          	mov    -0x40(%rbp),%rdx
   105cb:	48 8d 4a 28          	lea    0x28(%rdx),%rcx
   105cf:	8b 55 bc             	mov    -0x44(%rbp),%edx
   105d2:	89 54 88 04          	mov    %edx,0x4(%rax,%rcx,4)
   105d6:	eb 48                	jmp    10620 <xTaskGenericNotify+0x185>
   105d8:	80 7d df 02          	cmpb   $0x2,-0x21(%rbp)
   105dc:	74 15                	je     105f3 <xTaskGenericNotify+0x158>
   105de:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
   105e2:	48 8b 55 c0          	mov    -0x40(%rbp),%rdx
   105e6:	48 8d 4a 28          	lea    0x28(%rdx),%rcx
   105ea:	8b 55 bc             	mov    -0x44(%rbp),%edx
   105ed:	89 54 88 04          	mov    %edx,0x4(%rax,%rcx,4)
   105f1:	eb 2d                	jmp    10620 <xTaskGenericNotify+0x185>
   105f3:	48 c7 45 e0 00 00 00 	movq   $0x0,-0x20(%rbp)
   105fa:	00 
   105fb:	eb 23                	jmp    10620 <xTaskGenericNotify+0x185>
   105fd:	48 8b 05 ec 11 02 00 	mov    0x211ec(%rip),%rax        # 317f0 <xTickCount>
   10604:	48 85 c0             	test   %rax,%rax
   10607:	74 16                	je     1061f <xTaskGenericNotify+0x184>
   10609:	be 3e 13 00 00       	mov    $0x133e,%esi
   1060e:	48 8d 3d cb 72 01 00 	lea    0x172cb(%rip),%rdi        # 278e0 <_IO_stdin_used+0x8e0>
   10615:	e8 f2 36 ff ff       	callq  3d0c <vAssertCalled>
   1061a:	eb 03                	jmp    1061f <xTaskGenericNotify+0x184>
   1061c:	90                   	nop
   1061d:	eb 01                	jmp    10620 <xTaskGenericNotify+0x185>
   1061f:	90                   	nop
   10620:	e8 37 30 01 00       	callq  2365c <prvTraceGetCurrentTaskHandle>
   10625:	48 89 c7             	mov    %rax,%rdi
   10628:	e8 2e 2b 01 00       	callq  2315b <prvTraceGetTaskNumberHigh16>
   1062d:	0f b7 15 a8 0a 02 00 	movzwl 0x20aa8(%rip),%edx        # 310dc <CurrentFilterMask>
   10634:	21 d0                	and    %edx,%eax
   10636:	66 85 c0             	test   %ax,%ax
   10639:	74 3a                	je     10675 <xTaskGenericNotify+0x1da>
   1063b:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
   1063f:	48 89 c7             	mov    %rax,%rdi
   10642:	e8 14 2b 01 00       	callq  2315b <prvTraceGetTaskNumberHigh16>
   10647:	0f b7 15 8e 0a 02 00 	movzwl 0x20a8e(%rip),%edx        # 310dc <CurrentFilterMask>
   1064e:	21 d0                	and    %edx,%eax
   10650:	66 85 c0             	test   %ax,%ax
   10653:	74 20                	je     10675 <xTaskGenericNotify+0x1da>
   10655:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
   10659:	48 89 c7             	mov    %rax,%rdi
   1065c:	e8 dc 2a 01 00       	callq  2313d <prvTraceGetTaskNumberLow16>
   10661:	0f b6 c0             	movzbl %al,%eax
   10664:	89 c2                	mov    %eax,%edx
   10666:	be 03 00 00 00       	mov    $0x3,%esi
   1066b:	bf d2 00 00 00       	mov    $0xd2,%edi
   10670:	e8 dd 49 01 00       	callq  25052 <prvTraceStoreKernelCall>
   10675:	80 7d df 01          	cmpb   $0x1,-0x21(%rbp)
   10679:	0f 85 d9 01 00 00    	jne    10858 <xTaskGenericNotify+0x3bd>
   1067f:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
   10683:	48 8b 40 28          	mov    0x28(%rax),%rax
   10687:	48 89 45 f0          	mov    %rax,-0x10(%rbp)
   1068b:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
   1068f:	48 8b 40 10          	mov    0x10(%rax),%rax
   10693:	48 8b 55 e8          	mov    -0x18(%rbp),%rdx
   10697:	48 8b 52 18          	mov    0x18(%rdx),%rdx
   1069b:	48 89 50 10          	mov    %rdx,0x10(%rax)
   1069f:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
   106a3:	48 8b 40 18          	mov    0x18(%rax),%rax
   106a7:	48 8b 55 e8          	mov    -0x18(%rbp),%rdx
   106ab:	48 8b 52 10          	mov    0x10(%rdx),%rdx
   106af:	48 89 50 08          	mov    %rdx,0x8(%rax)
   106b3:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
   106b7:	48 8b 40 08          	mov    0x8(%rax),%rax
   106bb:	48 8b 55 e8          	mov    -0x18(%rbp),%rdx
   106bf:	48 83 c2 08          	add    $0x8,%rdx
   106c3:	48 39 d0             	cmp    %rdx,%rax
   106c6:	75 10                	jne    106d8 <xTaskGenericNotify+0x23d>
   106c8:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
   106cc:	48 8b 50 18          	mov    0x18(%rax),%rdx
   106d0:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
   106d4:	48 89 50 08          	mov    %rdx,0x8(%rax)
   106d8:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
   106dc:	48 c7 40 28 00 00 00 	movq   $0x0,0x28(%rax)
   106e3:	00 
   106e4:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
   106e8:	48 8b 00             	mov    (%rax),%rax
   106eb:	48 8d 50 ff          	lea    -0x1(%rax),%rdx
   106ef:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
   106f3:	48 89 10             	mov    %rdx,(%rax)
   106f6:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
   106fa:	48 89 c7             	mov    %rax,%rdi
   106fd:	e8 59 2a 01 00       	callq  2315b <prvTraceGetTaskNumberHigh16>
   10702:	0f b7 15 d3 09 02 00 	movzwl 0x209d3(%rip),%edx        # 310dc <CurrentFilterMask>
   10709:	21 d0                	and    %edx,%eax
   1070b:	66 85 c0             	test   %ax,%ax
   1070e:	74 16                	je     10726 <xTaskGenericNotify+0x28b>
   10710:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
   10714:	48 89 c7             	mov    %rax,%rdi
   10717:	e8 21 2a 01 00       	callq  2313d <prvTraceGetTaskNumberLow16>
   1071c:	0f b6 c0             	movzbl %al,%eax
   1071f:	89 c7                	mov    %eax,%edi
   10721:	e8 48 46 01 00       	callq  24d6e <prvTraceStoreTaskReady>
   10726:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
   1072a:	48 8b 50 58          	mov    0x58(%rax),%rdx
   1072e:	48 8b 05 c3 10 02 00 	mov    0x210c3(%rip),%rax        # 317f8 <uxTopReadyPriority>
   10735:	48 39 c2             	cmp    %rax,%rdx
   10738:	76 0f                	jbe    10749 <xTaskGenericNotify+0x2ae>
   1073a:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
   1073e:	48 8b 40 58          	mov    0x58(%rax),%rax
   10742:	48 89 05 af 10 02 00 	mov    %rax,0x210af(%rip)        # 317f8 <uxTopReadyPriority>
   10749:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
   1074d:	48 8b 50 58          	mov    0x58(%rax),%rdx
   10751:	48 89 d0             	mov    %rdx,%rax
   10754:	48 c1 e0 02          	shl    $0x2,%rax
   10758:	48 01 d0             	add    %rdx,%rax
   1075b:	48 c1 e0 03          	shl    $0x3,%rax
   1075f:	48 89 c2             	mov    %rax,%rdx
   10762:	48 8d 05 3f 0e 02 00 	lea    0x20e3f(%rip),%rax        # 315a8 <pxReadyTasksLists+0x8>
   10769:	48 8b 04 02          	mov    (%rdx,%rax,1),%rax
   1076d:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
   10771:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
   10775:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
   10779:	48 89 50 10          	mov    %rdx,0x10(%rax)
   1077d:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   10781:	48 8b 50 10          	mov    0x10(%rax),%rdx
   10785:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
   10789:	48 89 50 18          	mov    %rdx,0x18(%rax)
   1078d:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   10791:	48 8b 40 10          	mov    0x10(%rax),%rax
   10795:	48 8b 55 e8          	mov    -0x18(%rbp),%rdx
   10799:	48 83 c2 08          	add    $0x8,%rdx
   1079d:	48 89 50 08          	mov    %rdx,0x8(%rax)
   107a1:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
   107a5:	48 8d 50 08          	lea    0x8(%rax),%rdx
   107a9:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   107ad:	48 89 50 10          	mov    %rdx,0x10(%rax)
   107b1:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
   107b5:	48 8b 50 58          	mov    0x58(%rax),%rdx
   107b9:	48 89 d0             	mov    %rdx,%rax
   107bc:	48 c1 e0 02          	shl    $0x2,%rax
   107c0:	48 01 d0             	add    %rdx,%rax
   107c3:	48 c1 e0 03          	shl    $0x3,%rax
   107c7:	48 8d 15 d2 0d 02 00 	lea    0x20dd2(%rip),%rdx        # 315a0 <pxReadyTasksLists>
   107ce:	48 01 c2             	add    %rax,%rdx
   107d1:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
   107d5:	48 89 50 28          	mov    %rdx,0x28(%rax)
   107d9:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
   107dd:	48 8b 50 58          	mov    0x58(%rax),%rdx
   107e1:	48 89 d0             	mov    %rdx,%rax
   107e4:	48 c1 e0 02          	shl    $0x2,%rax
   107e8:	48 01 d0             	add    %rdx,%rax
   107eb:	48 c1 e0 03          	shl    $0x3,%rax
   107ef:	48 89 c1             	mov    %rax,%rcx
   107f2:	48 8d 05 a7 0d 02 00 	lea    0x20da7(%rip),%rax        # 315a0 <pxReadyTasksLists>
   107f9:	48 8b 04 01          	mov    (%rcx,%rax,1),%rax
   107fd:	48 8d 48 01          	lea    0x1(%rax),%rcx
   10801:	48 89 d0             	mov    %rdx,%rax
   10804:	48 c1 e0 02          	shl    $0x2,%rax
   10808:	48 01 d0             	add    %rdx,%rax
   1080b:	48 c1 e0 03          	shl    $0x3,%rax
   1080f:	48 89 c2             	mov    %rax,%rdx
   10812:	48 8d 05 87 0d 02 00 	lea    0x20d87(%rip),%rax        # 315a0 <pxReadyTasksLists>
   10819:	48 89 0c 02          	mov    %rcx,(%rdx,%rax,1)
   1081d:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
   10821:	48 8b 40 50          	mov    0x50(%rax),%rax
   10825:	48 85 c0             	test   %rax,%rax
   10828:	74 11                	je     1083b <xTaskGenericNotify+0x3a0>
   1082a:	be 4d 13 00 00       	mov    $0x134d,%esi
   1082f:	48 8d 3d aa 70 01 00 	lea    0x170aa(%rip),%rdi        # 278e0 <_IO_stdin_used+0x8e0>
   10836:	e8 d1 34 ff ff       	callq  3d0c <vAssertCalled>
   1083b:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
   1083f:	48 8b 50 58          	mov    0x58(%rax),%rdx
   10843:	48 8b 05 36 0d 02 00 	mov    0x20d36(%rip),%rax        # 31580 <pxCurrentTCB>
   1084a:	48 8b 40 58          	mov    0x58(%rax),%rax
   1084e:	48 39 c2             	cmp    %rax,%rdx
   10851:	76 05                	jbe    10858 <xTaskGenericNotify+0x3bd>
   10853:	e8 1c 26 00 00       	callq  12e74 <vPortYield>
   10858:	e8 a0 25 00 00       	callq  12dfd <vPortExitCritical>
   1085d:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
   10861:	c9                   	leaveq 
   10862:	c3                   	retq   

0000000000010863 <xTaskGenericNotifyFromISR>:
   10863:	f3 0f 1e fa          	endbr64 
   10867:	55                   	push   %rbp
   10868:	48 89 e5             	mov    %rsp,%rbp
   1086b:	48 83 ec 70          	sub    $0x70,%rsp
   1086f:	48 89 7d b8          	mov    %rdi,-0x48(%rbp)
   10873:	48 89 75 b0          	mov    %rsi,-0x50(%rbp)
   10877:	89 55 ac             	mov    %edx,-0x54(%rbp)
   1087a:	89 4d a8             	mov    %ecx,-0x58(%rbp)
   1087d:	4c 89 45 a0          	mov    %r8,-0x60(%rbp)
   10881:	4c 89 4d 98          	mov    %r9,-0x68(%rbp)
   10885:	48 c7 45 d0 01 00 00 	movq   $0x1,-0x30(%rbp)
   1088c:	00 
   1088d:	48 83 7d b8 00       	cmpq   $0x0,-0x48(%rbp)
   10892:	75 11                	jne    108a5 <xTaskGenericNotifyFromISR+0x42>
   10894:	be 85 13 00 00       	mov    $0x1385,%esi
   10899:	48 8d 3d 40 70 01 00 	lea    0x17040(%rip),%rdi        # 278e0 <_IO_stdin_used+0x8e0>
   108a0:	e8 67 34 ff ff       	callq  3d0c <vAssertCalled>
   108a5:	48 83 7d b0 00       	cmpq   $0x0,-0x50(%rbp)
   108aa:	74 11                	je     108bd <xTaskGenericNotifyFromISR+0x5a>
   108ac:	be 86 13 00 00       	mov    $0x1386,%esi
   108b1:	48 8d 3d 28 70 01 00 	lea    0x17028(%rip),%rdi        # 278e0 <_IO_stdin_used+0x8e0>
   108b8:	e8 4f 34 ff ff       	callq  3d0c <vAssertCalled>
   108bd:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
   108c1:	48 89 45 d8          	mov    %rax,-0x28(%rbp)
   108c5:	e8 06 26 00 00       	callq  12ed0 <xPortSetInterruptMask>
   108ca:	48 89 45 e0          	mov    %rax,-0x20(%rbp)
   108ce:	48 83 7d a0 00       	cmpq   $0x0,-0x60(%rbp)
   108d3:	74 16                	je     108eb <xTaskGenericNotifyFromISR+0x88>
   108d5:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
   108d9:	48 8b 55 b0          	mov    -0x50(%rbp),%rdx
   108dd:	48 83 c2 28          	add    $0x28,%rdx
   108e1:	8b 54 90 04          	mov    0x4(%rax,%rdx,4),%edx
   108e5:	48 8b 45 a0          	mov    -0x60(%rbp),%rax
   108e9:	89 10                	mov    %edx,(%rax)
   108eb:	48 8b 55 d8          	mov    -0x28(%rbp),%rdx
   108ef:	48 8b 45 b0          	mov    -0x50(%rbp),%rax
   108f3:	48 01 d0             	add    %rdx,%rax
   108f6:	48 05 a8 00 00 00    	add    $0xa8,%rax
   108fc:	0f b6 00             	movzbl (%rax),%eax
   108ff:	88 45 cf             	mov    %al,-0x31(%rbp)
   10902:	48 8b 55 d8          	mov    -0x28(%rbp),%rdx
   10906:	48 8b 45 b0          	mov    -0x50(%rbp),%rax
   1090a:	48 01 d0             	add    %rdx,%rax
   1090d:	48 05 a8 00 00 00    	add    $0xa8,%rax
   10913:	c6 00 02             	movb   $0x2,(%rax)
   10916:	83 7d a8 04          	cmpl   $0x4,-0x58(%rbp)
   1091a:	0f 87 ad 00 00 00    	ja     109cd <xTaskGenericNotifyFromISR+0x16a>
   10920:	8b 45 a8             	mov    -0x58(%rbp),%eax
   10923:	48 8d 14 85 00 00 00 	lea    0x0(,%rax,4),%rdx
   1092a:	00 
   1092b:	48 8d 05 fe 6f 01 00 	lea    0x16ffe(%rip),%rax        # 27930 <_IO_stdin_used+0x930>
   10932:	8b 04 02             	mov    (%rdx,%rax,1),%eax
   10935:	48 98                	cltq   
   10937:	48 8d 15 f2 6f 01 00 	lea    0x16ff2(%rip),%rdx        # 27930 <_IO_stdin_used+0x930>
   1093e:	48 01 d0             	add    %rdx,%rax
   10941:	3e ff e0             	notrack jmpq *%rax
   10944:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
   10948:	48 8b 55 b0          	mov    -0x50(%rbp),%rdx
   1094c:	48 83 c2 28          	add    $0x28,%rdx
   10950:	8b 44 90 04          	mov    0x4(%rax,%rdx,4),%eax
   10954:	0b 45 ac             	or     -0x54(%rbp),%eax
   10957:	89 c2                	mov    %eax,%edx
   10959:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
   1095d:	48 8b 4d b0          	mov    -0x50(%rbp),%rcx
   10961:	48 83 c1 28          	add    $0x28,%rcx
   10965:	89 54 88 04          	mov    %edx,0x4(%rax,%rcx,4)
   10969:	e9 82 00 00 00       	jmpq   109f0 <xTaskGenericNotifyFromISR+0x18d>
   1096e:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
   10972:	48 8b 55 b0          	mov    -0x50(%rbp),%rdx
   10976:	48 83 c2 28          	add    $0x28,%rdx
   1097a:	8b 44 90 04          	mov    0x4(%rax,%rdx,4),%eax
   1097e:	8d 48 01             	lea    0x1(%rax),%ecx
   10981:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
   10985:	48 8b 55 b0          	mov    -0x50(%rbp),%rdx
   10989:	48 83 c2 28          	add    $0x28,%rdx
   1098d:	89 4c 90 04          	mov    %ecx,0x4(%rax,%rdx,4)
   10991:	eb 5d                	jmp    109f0 <xTaskGenericNotifyFromISR+0x18d>
   10993:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
   10997:	48 8b 55 b0          	mov    -0x50(%rbp),%rdx
   1099b:	48 8d 4a 28          	lea    0x28(%rdx),%rcx
   1099f:	8b 55 ac             	mov    -0x54(%rbp),%edx
   109a2:	89 54 88 04          	mov    %edx,0x4(%rax,%rcx,4)
   109a6:	eb 48                	jmp    109f0 <xTaskGenericNotifyFromISR+0x18d>
   109a8:	80 7d cf 02          	cmpb   $0x2,-0x31(%rbp)
   109ac:	74 15                	je     109c3 <xTaskGenericNotifyFromISR+0x160>
   109ae:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
   109b2:	48 8b 55 b0          	mov    -0x50(%rbp),%rdx
   109b6:	48 8d 4a 28          	lea    0x28(%rdx),%rcx
   109ba:	8b 55 ac             	mov    -0x54(%rbp),%edx
   109bd:	89 54 88 04          	mov    %edx,0x4(%rax,%rcx,4)
   109c1:	eb 2d                	jmp    109f0 <xTaskGenericNotifyFromISR+0x18d>
   109c3:	48 c7 45 d0 00 00 00 	movq   $0x0,-0x30(%rbp)
   109ca:	00 
   109cb:	eb 23                	jmp    109f0 <xTaskGenericNotifyFromISR+0x18d>
   109cd:	48 8b 05 1c 0e 02 00 	mov    0x20e1c(%rip),%rax        # 317f0 <xTickCount>
   109d4:	48 85 c0             	test   %rax,%rax
   109d7:	74 16                	je     109ef <xTaskGenericNotifyFromISR+0x18c>
   109d9:	be cd 13 00 00       	mov    $0x13cd,%esi
   109de:	48 8d 3d fb 6e 01 00 	lea    0x16efb(%rip),%rdi        # 278e0 <_IO_stdin_used+0x8e0>
   109e5:	e8 22 33 ff ff       	callq  3d0c <vAssertCalled>
   109ea:	eb 03                	jmp    109ef <xTaskGenericNotifyFromISR+0x18c>
   109ec:	90                   	nop
   109ed:	eb 01                	jmp    109f0 <xTaskGenericNotifyFromISR+0x18d>
   109ef:	90                   	nop
   109f0:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
   109f4:	48 89 c7             	mov    %rax,%rdi
   109f7:	e8 5f 27 01 00       	callq  2315b <prvTraceGetTaskNumberHigh16>
   109fc:	0f b7 15 d9 06 02 00 	movzwl 0x206d9(%rip),%edx        # 310dc <CurrentFilterMask>
   10a03:	21 d0                	and    %edx,%eax
   10a05:	66 85 c0             	test   %ax,%ax
   10a08:	74 20                	je     10a2a <xTaskGenericNotifyFromISR+0x1c7>
   10a0a:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
   10a0e:	48 89 c7             	mov    %rax,%rdi
   10a11:	e8 27 27 01 00       	callq  2313d <prvTraceGetTaskNumberLow16>
   10a16:	0f b6 c0             	movzbl %al,%eax
   10a19:	89 c2                	mov    %eax,%edx
   10a1b:	be 03 00 00 00       	mov    $0x3,%esi
   10a20:	bf d9 00 00 00       	mov    $0xd9,%edi
   10a25:	e8 28 46 01 00       	callq  25052 <prvTraceStoreKernelCall>
   10a2a:	80 7d cf 01          	cmpb   $0x1,-0x31(%rbp)
   10a2e:	0f 85 6f 02 00 00    	jne    10ca3 <xTaskGenericNotifyFromISR+0x440>
   10a34:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
   10a38:	48 8b 40 50          	mov    0x50(%rax),%rax
   10a3c:	48 85 c0             	test   %rax,%rax
   10a3f:	74 11                	je     10a52 <xTaskGenericNotifyFromISR+0x1ef>
   10a41:	be d8 13 00 00       	mov    $0x13d8,%esi
   10a46:	48 8d 3d 93 6e 01 00 	lea    0x16e93(%rip),%rdi        # 278e0 <_IO_stdin_used+0x8e0>
   10a4d:	e8 ba 32 ff ff       	callq  3d0c <vAssertCalled>
   10a52:	48 8b 05 df 0d 02 00 	mov    0x20ddf(%rip),%rax        # 31838 <uxSchedulerSuspended>
   10a59:	48 85 c0             	test   %rax,%rax
   10a5c:	0f 85 a0 01 00 00    	jne    10c02 <xTaskGenericNotifyFromISR+0x39f>
   10a62:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
   10a66:	48 8b 40 28          	mov    0x28(%rax),%rax
   10a6a:	48 89 45 f0          	mov    %rax,-0x10(%rbp)
   10a6e:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
   10a72:	48 8b 40 10          	mov    0x10(%rax),%rax
   10a76:	48 8b 55 d8          	mov    -0x28(%rbp),%rdx
   10a7a:	48 8b 52 18          	mov    0x18(%rdx),%rdx
   10a7e:	48 89 50 10          	mov    %rdx,0x10(%rax)
   10a82:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
   10a86:	48 8b 40 18          	mov    0x18(%rax),%rax
   10a8a:	48 8b 55 d8          	mov    -0x28(%rbp),%rdx
   10a8e:	48 8b 52 10          	mov    0x10(%rdx),%rdx
   10a92:	48 89 50 08          	mov    %rdx,0x8(%rax)
   10a96:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
   10a9a:	48 8b 40 08          	mov    0x8(%rax),%rax
   10a9e:	48 8b 55 d8          	mov    -0x28(%rbp),%rdx
   10aa2:	48 83 c2 08          	add    $0x8,%rdx
   10aa6:	48 39 d0             	cmp    %rdx,%rax
   10aa9:	75 10                	jne    10abb <xTaskGenericNotifyFromISR+0x258>
   10aab:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
   10aaf:	48 8b 50 18          	mov    0x18(%rax),%rdx
   10ab3:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
   10ab7:	48 89 50 08          	mov    %rdx,0x8(%rax)
   10abb:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
   10abf:	48 c7 40 28 00 00 00 	movq   $0x0,0x28(%rax)
   10ac6:	00 
   10ac7:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
   10acb:	48 8b 00             	mov    (%rax),%rax
   10ace:	48 8d 50 ff          	lea    -0x1(%rax),%rdx
   10ad2:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
   10ad6:	48 89 10             	mov    %rdx,(%rax)
   10ad9:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
   10add:	48 89 c7             	mov    %rax,%rdi
   10ae0:	e8 76 26 01 00       	callq  2315b <prvTraceGetTaskNumberHigh16>
   10ae5:	0f b7 15 f0 05 02 00 	movzwl 0x205f0(%rip),%edx        # 310dc <CurrentFilterMask>
   10aec:	21 d0                	and    %edx,%eax
   10aee:	66 85 c0             	test   %ax,%ax
   10af1:	74 16                	je     10b09 <xTaskGenericNotifyFromISR+0x2a6>
   10af3:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
   10af7:	48 89 c7             	mov    %rax,%rdi
   10afa:	e8 3e 26 01 00       	callq  2313d <prvTraceGetTaskNumberLow16>
   10aff:	0f b6 c0             	movzbl %al,%eax
   10b02:	89 c7                	mov    %eax,%edi
   10b04:	e8 65 42 01 00       	callq  24d6e <prvTraceStoreTaskReady>
   10b09:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
   10b0d:	48 8b 50 58          	mov    0x58(%rax),%rdx
   10b11:	48 8b 05 e0 0c 02 00 	mov    0x20ce0(%rip),%rax        # 317f8 <uxTopReadyPriority>
   10b18:	48 39 c2             	cmp    %rax,%rdx
   10b1b:	76 0f                	jbe    10b2c <xTaskGenericNotifyFromISR+0x2c9>
   10b1d:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
   10b21:	48 8b 40 58          	mov    0x58(%rax),%rax
   10b25:	48 89 05 cc 0c 02 00 	mov    %rax,0x20ccc(%rip)        # 317f8 <uxTopReadyPriority>
   10b2c:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
   10b30:	48 8b 50 58          	mov    0x58(%rax),%rdx
   10b34:	48 89 d0             	mov    %rdx,%rax
   10b37:	48 c1 e0 02          	shl    $0x2,%rax
   10b3b:	48 01 d0             	add    %rdx,%rax
   10b3e:	48 c1 e0 03          	shl    $0x3,%rax
   10b42:	48 89 c2             	mov    %rax,%rdx
   10b45:	48 8d 05 5c 0a 02 00 	lea    0x20a5c(%rip),%rax        # 315a8 <pxReadyTasksLists+0x8>
   10b4c:	48 8b 04 02          	mov    (%rdx,%rax,1),%rax
   10b50:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
   10b54:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
   10b58:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
   10b5c:	48 89 50 10          	mov    %rdx,0x10(%rax)
   10b60:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   10b64:	48 8b 50 10          	mov    0x10(%rax),%rdx
   10b68:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
   10b6c:	48 89 50 18          	mov    %rdx,0x18(%rax)
   10b70:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   10b74:	48 8b 40 10          	mov    0x10(%rax),%rax
   10b78:	48 8b 55 d8          	mov    -0x28(%rbp),%rdx
   10b7c:	48 83 c2 08          	add    $0x8,%rdx
   10b80:	48 89 50 08          	mov    %rdx,0x8(%rax)
   10b84:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
   10b88:	48 8d 50 08          	lea    0x8(%rax),%rdx
   10b8c:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   10b90:	48 89 50 10          	mov    %rdx,0x10(%rax)
   10b94:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
   10b98:	48 8b 50 58          	mov    0x58(%rax),%rdx
   10b9c:	48 89 d0             	mov    %rdx,%rax
   10b9f:	48 c1 e0 02          	shl    $0x2,%rax
   10ba3:	48 01 d0             	add    %rdx,%rax
   10ba6:	48 c1 e0 03          	shl    $0x3,%rax
   10baa:	48 8d 15 ef 09 02 00 	lea    0x209ef(%rip),%rdx        # 315a0 <pxReadyTasksLists>
   10bb1:	48 01 c2             	add    %rax,%rdx
   10bb4:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
   10bb8:	48 89 50 28          	mov    %rdx,0x28(%rax)
   10bbc:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
   10bc0:	48 8b 50 58          	mov    0x58(%rax),%rdx
   10bc4:	48 89 d0             	mov    %rdx,%rax
   10bc7:	48 c1 e0 02          	shl    $0x2,%rax
   10bcb:	48 01 d0             	add    %rdx,%rax
   10bce:	48 c1 e0 03          	shl    $0x3,%rax
   10bd2:	48 89 c1             	mov    %rax,%rcx
   10bd5:	48 8d 05 c4 09 02 00 	lea    0x209c4(%rip),%rax        # 315a0 <pxReadyTasksLists>
   10bdc:	48 8b 04 01          	mov    (%rcx,%rax,1),%rax
   10be0:	48 8d 48 01          	lea    0x1(%rax),%rcx
   10be4:	48 89 d0             	mov    %rdx,%rax
   10be7:	48 c1 e0 02          	shl    $0x2,%rax
   10beb:	48 01 d0             	add    %rdx,%rax
   10bee:	48 c1 e0 03          	shl    $0x3,%rax
   10bf2:	48 89 c2             	mov    %rax,%rdx
   10bf5:	48 8d 05 a4 09 02 00 	lea    0x209a4(%rip),%rax        # 315a0 <pxReadyTasksLists>
   10bfc:	48 89 0c 02          	mov    %rcx,(%rdx,%rax,1)
   10c00:	eb 6c                	jmp    10c6e <xTaskGenericNotifyFromISR+0x40b>
   10c02:	48 8b 05 3f 0b 02 00 	mov    0x20b3f(%rip),%rax        # 31748 <xPendingReadyList+0x8>
   10c09:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
   10c0d:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
   10c11:	48 8b 55 e8          	mov    -0x18(%rbp),%rdx
   10c15:	48 89 50 38          	mov    %rdx,0x38(%rax)
   10c19:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
   10c1d:	48 8b 50 10          	mov    0x10(%rax),%rdx
   10c21:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
   10c25:	48 89 50 40          	mov    %rdx,0x40(%rax)
   10c29:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
   10c2d:	48 8b 40 10          	mov    0x10(%rax),%rax
   10c31:	48 8b 55 d8          	mov    -0x28(%rbp),%rdx
   10c35:	48 83 c2 30          	add    $0x30,%rdx
   10c39:	48 89 50 08          	mov    %rdx,0x8(%rax)
   10c3d:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
   10c41:	48 8d 50 30          	lea    0x30(%rax),%rdx
   10c45:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
   10c49:	48 89 50 10          	mov    %rdx,0x10(%rax)
   10c4d:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
   10c51:	48 8d 15 e8 0a 02 00 	lea    0x20ae8(%rip),%rdx        # 31740 <xPendingReadyList>
   10c58:	48 89 50 50          	mov    %rdx,0x50(%rax)
   10c5c:	48 8b 05 dd 0a 02 00 	mov    0x20add(%rip),%rax        # 31740 <xPendingReadyList>
   10c63:	48 83 c0 01          	add    $0x1,%rax
   10c67:	48 89 05 d2 0a 02 00 	mov    %rax,0x20ad2(%rip)        # 31740 <xPendingReadyList>
   10c6e:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
   10c72:	48 8b 50 58          	mov    0x58(%rax),%rdx
   10c76:	48 8b 05 03 09 02 00 	mov    0x20903(%rip),%rax        # 31580 <pxCurrentTCB>
   10c7d:	48 8b 40 58          	mov    0x58(%rax),%rax
   10c81:	48 39 c2             	cmp    %rax,%rdx
   10c84:	76 1d                	jbe    10ca3 <xTaskGenericNotifyFromISR+0x440>
   10c86:	48 83 7d 98 00       	cmpq   $0x0,-0x68(%rbp)
   10c8b:	74 0b                	je     10c98 <xTaskGenericNotifyFromISR+0x435>
   10c8d:	48 8b 45 98          	mov    -0x68(%rbp),%rax
   10c91:	48 c7 00 01 00 00 00 	movq   $0x1,(%rax)
   10c98:	48 c7 05 6d 0b 02 00 	movq   $0x1,0x20b6d(%rip)        # 31810 <xYieldPending>
   10c9f:	01 00 00 00 
   10ca3:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
   10ca7:	48 89 c7             	mov    %rax,%rdi
   10caa:	e8 30 22 00 00       	callq  12edf <vPortClearInterruptMask>
   10caf:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
   10cb3:	c9                   	leaveq 
   10cb4:	c3                   	retq   

0000000000010cb5 <vTaskGenericNotifyGiveFromISR>:
   10cb5:	f3 0f 1e fa          	endbr64 
   10cb9:	55                   	push   %rbp
   10cba:	48 89 e5             	mov    %rsp,%rbp
   10cbd:	48 83 ec 50          	sub    $0x50,%rsp
   10cc1:	48 89 7d c8          	mov    %rdi,-0x38(%rbp)
   10cc5:	48 89 75 c0          	mov    %rsi,-0x40(%rbp)
   10cc9:	48 89 55 b8          	mov    %rdx,-0x48(%rbp)
   10ccd:	48 83 7d c8 00       	cmpq   $0x0,-0x38(%rbp)
   10cd2:	75 11                	jne    10ce5 <vTaskGenericNotifyGiveFromISR+0x30>
   10cd4:	be 0c 14 00 00       	mov    $0x140c,%esi
   10cd9:	48 8d 3d 00 6c 01 00 	lea    0x16c00(%rip),%rdi        # 278e0 <_IO_stdin_used+0x8e0>
   10ce0:	e8 27 30 ff ff       	callq  3d0c <vAssertCalled>
   10ce5:	48 83 7d c0 00       	cmpq   $0x0,-0x40(%rbp)
   10cea:	74 11                	je     10cfd <vTaskGenericNotifyGiveFromISR+0x48>
   10cec:	be 0d 14 00 00       	mov    $0x140d,%esi
   10cf1:	48 8d 3d e8 6b 01 00 	lea    0x16be8(%rip),%rdi        # 278e0 <_IO_stdin_used+0x8e0>
   10cf8:	e8 0f 30 ff ff       	callq  3d0c <vAssertCalled>
   10cfd:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
   10d01:	48 89 45 d8          	mov    %rax,-0x28(%rbp)
   10d05:	e8 c6 21 00 00       	callq  12ed0 <xPortSetInterruptMask>
   10d0a:	48 89 45 e0          	mov    %rax,-0x20(%rbp)
   10d0e:	48 8b 55 d8          	mov    -0x28(%rbp),%rdx
   10d12:	48 8b 45 c0          	mov    -0x40(%rbp),%rax
   10d16:	48 01 d0             	add    %rdx,%rax
   10d19:	48 05 a8 00 00 00    	add    $0xa8,%rax
   10d1f:	0f b6 00             	movzbl (%rax),%eax
   10d22:	88 45 d7             	mov    %al,-0x29(%rbp)
   10d25:	48 8b 55 d8          	mov    -0x28(%rbp),%rdx
   10d29:	48 8b 45 c0          	mov    -0x40(%rbp),%rax
   10d2d:	48 01 d0             	add    %rdx,%rax
   10d30:	48 05 a8 00 00 00    	add    $0xa8,%rax
   10d36:	c6 00 02             	movb   $0x2,(%rax)
   10d39:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
   10d3d:	48 8b 55 c0          	mov    -0x40(%rbp),%rdx
   10d41:	48 83 c2 28          	add    $0x28,%rdx
   10d45:	8b 44 90 04          	mov    0x4(%rax,%rdx,4),%eax
   10d49:	8d 48 01             	lea    0x1(%rax),%ecx
   10d4c:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
   10d50:	48 8b 55 c0          	mov    -0x40(%rbp),%rdx
   10d54:	48 83 c2 28          	add    $0x28,%rdx
   10d58:	89 4c 90 04          	mov    %ecx,0x4(%rax,%rdx,4)
   10d5c:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
   10d60:	48 89 c7             	mov    %rax,%rdi
   10d63:	e8 f3 23 01 00       	callq  2315b <prvTraceGetTaskNumberHigh16>
   10d68:	0f b7 15 6d 03 02 00 	movzwl 0x2036d(%rip),%edx        # 310dc <CurrentFilterMask>
   10d6f:	21 d0                	and    %edx,%eax
   10d71:	66 85 c0             	test   %ax,%ax
   10d74:	74 20                	je     10d96 <vTaskGenericNotifyGiveFromISR+0xe1>
   10d76:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
   10d7a:	48 89 c7             	mov    %rax,%rdi
   10d7d:	e8 bb 23 01 00       	callq  2313d <prvTraceGetTaskNumberLow16>
   10d82:	0f b6 c0             	movzbl %al,%eax
   10d85:	89 c2                	mov    %eax,%edx
   10d87:	be 03 00 00 00       	mov    $0x3,%esi
   10d8c:	bf da 00 00 00       	mov    $0xda,%edi
   10d91:	e8 bc 42 01 00       	callq  25052 <prvTraceStoreKernelCall>
   10d96:	80 7d d7 01          	cmpb   $0x1,-0x29(%rbp)
   10d9a:	0f 85 6f 02 00 00    	jne    1100f <vTaskGenericNotifyGiveFromISR+0x35a>
   10da0:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
   10da4:	48 8b 40 50          	mov    0x50(%rax),%rax
   10da8:	48 85 c0             	test   %rax,%rax
   10dab:	74 11                	je     10dbe <vTaskGenericNotifyGiveFromISR+0x109>
   10dad:	be 33 14 00 00       	mov    $0x1433,%esi
   10db2:	48 8d 3d 27 6b 01 00 	lea    0x16b27(%rip),%rdi        # 278e0 <_IO_stdin_used+0x8e0>
   10db9:	e8 4e 2f ff ff       	callq  3d0c <vAssertCalled>
   10dbe:	48 8b 05 73 0a 02 00 	mov    0x20a73(%rip),%rax        # 31838 <uxSchedulerSuspended>
   10dc5:	48 85 c0             	test   %rax,%rax
   10dc8:	0f 85 a0 01 00 00    	jne    10f6e <vTaskGenericNotifyGiveFromISR+0x2b9>
   10dce:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
   10dd2:	48 8b 40 28          	mov    0x28(%rax),%rax
   10dd6:	48 89 45 f0          	mov    %rax,-0x10(%rbp)
   10dda:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
   10dde:	48 8b 40 10          	mov    0x10(%rax),%rax
   10de2:	48 8b 55 d8          	mov    -0x28(%rbp),%rdx
   10de6:	48 8b 52 18          	mov    0x18(%rdx),%rdx
   10dea:	48 89 50 10          	mov    %rdx,0x10(%rax)
   10dee:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
   10df2:	48 8b 40 18          	mov    0x18(%rax),%rax
   10df6:	48 8b 55 d8          	mov    -0x28(%rbp),%rdx
   10dfa:	48 8b 52 10          	mov    0x10(%rdx),%rdx
   10dfe:	48 89 50 08          	mov    %rdx,0x8(%rax)
   10e02:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
   10e06:	48 8b 40 08          	mov    0x8(%rax),%rax
   10e0a:	48 8b 55 d8          	mov    -0x28(%rbp),%rdx
   10e0e:	48 83 c2 08          	add    $0x8,%rdx
   10e12:	48 39 d0             	cmp    %rdx,%rax
   10e15:	75 10                	jne    10e27 <vTaskGenericNotifyGiveFromISR+0x172>
   10e17:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
   10e1b:	48 8b 50 18          	mov    0x18(%rax),%rdx
   10e1f:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
   10e23:	48 89 50 08          	mov    %rdx,0x8(%rax)
   10e27:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
   10e2b:	48 c7 40 28 00 00 00 	movq   $0x0,0x28(%rax)
   10e32:	00 
   10e33:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
   10e37:	48 8b 00             	mov    (%rax),%rax
   10e3a:	48 8d 50 ff          	lea    -0x1(%rax),%rdx
   10e3e:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
   10e42:	48 89 10             	mov    %rdx,(%rax)
   10e45:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
   10e49:	48 89 c7             	mov    %rax,%rdi
   10e4c:	e8 0a 23 01 00       	callq  2315b <prvTraceGetTaskNumberHigh16>
   10e51:	0f b7 15 84 02 02 00 	movzwl 0x20284(%rip),%edx        # 310dc <CurrentFilterMask>
   10e58:	21 d0                	and    %edx,%eax
   10e5a:	66 85 c0             	test   %ax,%ax
   10e5d:	74 16                	je     10e75 <vTaskGenericNotifyGiveFromISR+0x1c0>
   10e5f:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
   10e63:	48 89 c7             	mov    %rax,%rdi
   10e66:	e8 d2 22 01 00       	callq  2313d <prvTraceGetTaskNumberLow16>
   10e6b:	0f b6 c0             	movzbl %al,%eax
   10e6e:	89 c7                	mov    %eax,%edi
   10e70:	e8 f9 3e 01 00       	callq  24d6e <prvTraceStoreTaskReady>
   10e75:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
   10e79:	48 8b 50 58          	mov    0x58(%rax),%rdx
   10e7d:	48 8b 05 74 09 02 00 	mov    0x20974(%rip),%rax        # 317f8 <uxTopReadyPriority>
   10e84:	48 39 c2             	cmp    %rax,%rdx
   10e87:	76 0f                	jbe    10e98 <vTaskGenericNotifyGiveFromISR+0x1e3>
   10e89:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
   10e8d:	48 8b 40 58          	mov    0x58(%rax),%rax
   10e91:	48 89 05 60 09 02 00 	mov    %rax,0x20960(%rip)        # 317f8 <uxTopReadyPriority>
   10e98:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
   10e9c:	48 8b 50 58          	mov    0x58(%rax),%rdx
   10ea0:	48 89 d0             	mov    %rdx,%rax
   10ea3:	48 c1 e0 02          	shl    $0x2,%rax
   10ea7:	48 01 d0             	add    %rdx,%rax
   10eaa:	48 c1 e0 03          	shl    $0x3,%rax
   10eae:	48 89 c2             	mov    %rax,%rdx
   10eb1:	48 8d 05 f0 06 02 00 	lea    0x206f0(%rip),%rax        # 315a8 <pxReadyTasksLists+0x8>
   10eb8:	48 8b 04 02          	mov    (%rdx,%rax,1),%rax
   10ebc:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
   10ec0:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
   10ec4:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
   10ec8:	48 89 50 10          	mov    %rdx,0x10(%rax)
   10ecc:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   10ed0:	48 8b 50 10          	mov    0x10(%rax),%rdx
   10ed4:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
   10ed8:	48 89 50 18          	mov    %rdx,0x18(%rax)
   10edc:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   10ee0:	48 8b 40 10          	mov    0x10(%rax),%rax
   10ee4:	48 8b 55 d8          	mov    -0x28(%rbp),%rdx
   10ee8:	48 83 c2 08          	add    $0x8,%rdx
   10eec:	48 89 50 08          	mov    %rdx,0x8(%rax)
   10ef0:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
   10ef4:	48 8d 50 08          	lea    0x8(%rax),%rdx
   10ef8:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   10efc:	48 89 50 10          	mov    %rdx,0x10(%rax)
   10f00:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
   10f04:	48 8b 50 58          	mov    0x58(%rax),%rdx
   10f08:	48 89 d0             	mov    %rdx,%rax
   10f0b:	48 c1 e0 02          	shl    $0x2,%rax
   10f0f:	48 01 d0             	add    %rdx,%rax
   10f12:	48 c1 e0 03          	shl    $0x3,%rax
   10f16:	48 8d 15 83 06 02 00 	lea    0x20683(%rip),%rdx        # 315a0 <pxReadyTasksLists>
   10f1d:	48 01 c2             	add    %rax,%rdx
   10f20:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
   10f24:	48 89 50 28          	mov    %rdx,0x28(%rax)
   10f28:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
   10f2c:	48 8b 50 58          	mov    0x58(%rax),%rdx
   10f30:	48 89 d0             	mov    %rdx,%rax
   10f33:	48 c1 e0 02          	shl    $0x2,%rax
   10f37:	48 01 d0             	add    %rdx,%rax
   10f3a:	48 c1 e0 03          	shl    $0x3,%rax
   10f3e:	48 89 c1             	mov    %rax,%rcx
   10f41:	48 8d 05 58 06 02 00 	lea    0x20658(%rip),%rax        # 315a0 <pxReadyTasksLists>
   10f48:	48 8b 04 01          	mov    (%rcx,%rax,1),%rax
   10f4c:	48 8d 48 01          	lea    0x1(%rax),%rcx
   10f50:	48 89 d0             	mov    %rdx,%rax
   10f53:	48 c1 e0 02          	shl    $0x2,%rax
   10f57:	48 01 d0             	add    %rdx,%rax
   10f5a:	48 c1 e0 03          	shl    $0x3,%rax
   10f5e:	48 89 c2             	mov    %rax,%rdx
   10f61:	48 8d 05 38 06 02 00 	lea    0x20638(%rip),%rax        # 315a0 <pxReadyTasksLists>
   10f68:	48 89 0c 02          	mov    %rcx,(%rdx,%rax,1)
   10f6c:	eb 6c                	jmp    10fda <vTaskGenericNotifyGiveFromISR+0x325>
   10f6e:	48 8b 05 d3 07 02 00 	mov    0x207d3(%rip),%rax        # 31748 <xPendingReadyList+0x8>
   10f75:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
   10f79:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
   10f7d:	48 8b 55 e8          	mov    -0x18(%rbp),%rdx
   10f81:	48 89 50 38          	mov    %rdx,0x38(%rax)
   10f85:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
   10f89:	48 8b 50 10          	mov    0x10(%rax),%rdx
   10f8d:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
   10f91:	48 89 50 40          	mov    %rdx,0x40(%rax)
   10f95:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
   10f99:	48 8b 40 10          	mov    0x10(%rax),%rax
   10f9d:	48 8b 55 d8          	mov    -0x28(%rbp),%rdx
   10fa1:	48 83 c2 30          	add    $0x30,%rdx
   10fa5:	48 89 50 08          	mov    %rdx,0x8(%rax)
   10fa9:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
   10fad:	48 8d 50 30          	lea    0x30(%rax),%rdx
   10fb1:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
   10fb5:	48 89 50 10          	mov    %rdx,0x10(%rax)
   10fb9:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
   10fbd:	48 8d 15 7c 07 02 00 	lea    0x2077c(%rip),%rdx        # 31740 <xPendingReadyList>
   10fc4:	48 89 50 50          	mov    %rdx,0x50(%rax)
   10fc8:	48 8b 05 71 07 02 00 	mov    0x20771(%rip),%rax        # 31740 <xPendingReadyList>
   10fcf:	48 83 c0 01          	add    $0x1,%rax
   10fd3:	48 89 05 66 07 02 00 	mov    %rax,0x20766(%rip)        # 31740 <xPendingReadyList>
   10fda:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
   10fde:	48 8b 50 58          	mov    0x58(%rax),%rdx
   10fe2:	48 8b 05 97 05 02 00 	mov    0x20597(%rip),%rax        # 31580 <pxCurrentTCB>
   10fe9:	48 8b 40 58          	mov    0x58(%rax),%rax
   10fed:	48 39 c2             	cmp    %rax,%rdx
   10ff0:	76 1d                	jbe    1100f <vTaskGenericNotifyGiveFromISR+0x35a>
   10ff2:	48 83 7d b8 00       	cmpq   $0x0,-0x48(%rbp)
   10ff7:	74 0b                	je     11004 <vTaskGenericNotifyGiveFromISR+0x34f>
   10ff9:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
   10ffd:	48 c7 00 01 00 00 00 	movq   $0x1,(%rax)
   11004:	48 c7 05 01 08 02 00 	movq   $0x1,0x20801(%rip)        # 31810 <xYieldPending>
   1100b:	01 00 00 00 
   1100f:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
   11013:	48 89 c7             	mov    %rax,%rdi
   11016:	e8 c4 1e 00 00       	callq  12edf <vPortClearInterruptMask>
   1101b:	90                   	nop
   1101c:	c9                   	leaveq 
   1101d:	c3                   	retq   

000000000001101e <xTaskGenericNotifyStateClear>:
   1101e:	f3 0f 1e fa          	endbr64 
   11022:	55                   	push   %rbp
   11023:	48 89 e5             	mov    %rsp,%rbp
   11026:	48 83 ec 20          	sub    $0x20,%rsp
   1102a:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
   1102e:	48 89 75 e0          	mov    %rsi,-0x20(%rbp)
   11032:	48 83 7d e0 00       	cmpq   $0x0,-0x20(%rbp)
   11037:	74 11                	je     1104a <xTaskGenericNotifyStateClear+0x2c>
   11039:	be 63 14 00 00       	mov    $0x1463,%esi
   1103e:	48 8d 3d 9b 68 01 00 	lea    0x1689b(%rip),%rdi        # 278e0 <_IO_stdin_used+0x8e0>
   11045:	e8 c2 2c ff ff       	callq  3d0c <vAssertCalled>
   1104a:	48 83 7d e8 00       	cmpq   $0x0,-0x18(%rbp)
   1104f:	75 09                	jne    1105a <xTaskGenericNotifyStateClear+0x3c>
   11051:	48 8b 05 28 05 02 00 	mov    0x20528(%rip),%rax        # 31580 <pxCurrentTCB>
   11058:	eb 04                	jmp    1105e <xTaskGenericNotifyStateClear+0x40>
   1105a:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
   1105e:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
   11062:	e8 68 1d 00 00       	callq  12dcf <vPortEnterCritical>
   11067:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
   1106b:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
   1106f:	48 01 d0             	add    %rdx,%rax
   11072:	48 05 a8 00 00 00    	add    $0xa8,%rax
   11078:	0f b6 00             	movzbl (%rax),%eax
   1107b:	3c 02                	cmp    $0x2,%al
   1107d:	75 1e                	jne    1109d <xTaskGenericNotifyStateClear+0x7f>
   1107f:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
   11083:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
   11087:	48 01 d0             	add    %rdx,%rax
   1108a:	48 05 a8 00 00 00    	add    $0xa8,%rax
   11090:	c6 00 00             	movb   $0x0,(%rax)
   11093:	48 c7 45 f0 01 00 00 	movq   $0x1,-0x10(%rbp)
   1109a:	00 
   1109b:	eb 08                	jmp    110a5 <xTaskGenericNotifyStateClear+0x87>
   1109d:	48 c7 45 f0 00 00 00 	movq   $0x0,-0x10(%rbp)
   110a4:	00 
   110a5:	e8 53 1d 00 00       	callq  12dfd <vPortExitCritical>
   110aa:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
   110ae:	c9                   	leaveq 
   110af:	c3                   	retq   

00000000000110b0 <ulTaskGenericNotifyValueClear>:
   110b0:	f3 0f 1e fa          	endbr64 
   110b4:	55                   	push   %rbp
   110b5:	48 89 e5             	mov    %rsp,%rbp
   110b8:	48 83 ec 30          	sub    $0x30,%rsp
   110bc:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
   110c0:	48 89 75 e0          	mov    %rsi,-0x20(%rbp)
   110c4:	89 55 dc             	mov    %edx,-0x24(%rbp)
   110c7:	48 83 7d e8 00       	cmpq   $0x0,-0x18(%rbp)
   110cc:	75 09                	jne    110d7 <ulTaskGenericNotifyValueClear+0x27>
   110ce:	48 8b 05 ab 04 02 00 	mov    0x204ab(%rip),%rax        # 31580 <pxCurrentTCB>
   110d5:	eb 04                	jmp    110db <ulTaskGenericNotifyValueClear+0x2b>
   110d7:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
   110db:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
   110df:	e8 eb 1c 00 00       	callq  12dcf <vPortEnterCritical>
   110e4:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   110e8:	48 8b 55 e0          	mov    -0x20(%rbp),%rdx
   110ec:	48 83 c2 28          	add    $0x28,%rdx
   110f0:	8b 44 90 04          	mov    0x4(%rax,%rdx,4),%eax
   110f4:	89 45 f4             	mov    %eax,-0xc(%rbp)
   110f7:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   110fb:	48 8b 55 e0          	mov    -0x20(%rbp),%rdx
   110ff:	48 83 c2 28          	add    $0x28,%rdx
   11103:	8b 44 90 04          	mov    0x4(%rax,%rdx,4),%eax
   11107:	8b 55 dc             	mov    -0x24(%rbp),%edx
   1110a:	f7 d2                	not    %edx
   1110c:	21 d0                	and    %edx,%eax
   1110e:	89 c1                	mov    %eax,%ecx
   11110:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   11114:	48 8b 55 e0          	mov    -0x20(%rbp),%rdx
   11118:	48 83 c2 28          	add    $0x28,%rdx
   1111c:	89 4c 90 04          	mov    %ecx,0x4(%rax,%rdx,4)
   11120:	e8 d8 1c 00 00       	callq  12dfd <vPortExitCritical>
   11125:	8b 45 f4             	mov    -0xc(%rbp),%eax
   11128:	c9                   	leaveq 
   11129:	c3                   	retq   

000000000001112a <ulTaskGetIdleRunTimeCounter>:
   1112a:	f3 0f 1e fa          	endbr64 
   1112e:	55                   	push   %rbp
   1112f:	48 89 e5             	mov    %rsp,%rbp
   11132:	48 8b 05 f7 06 02 00 	mov    0x206f7(%rip),%rax        # 31830 <xIdleTaskHandle>
   11139:	8b 80 a0 00 00 00    	mov    0xa0(%rax),%eax
   1113f:	5d                   	pop    %rbp
   11140:	c3                   	retq   

0000000000011141 <ulTaskGetIdleRunTimePercent>:
   11141:	f3 0f 1e fa          	endbr64 
   11145:	55                   	push   %rbp
   11146:	48 89 e5             	mov    %rsp,%rbp
   11149:	48 83 ec 10          	sub    $0x10,%rsp
   1114d:	e8 2a 22 00 00       	callq  1337c <ulPortGetRunTime>
   11152:	89 45 fc             	mov    %eax,-0x4(%rbp)
   11155:	8b 45 fc             	mov    -0x4(%rbp),%eax
   11158:	89 c0                	mov    %eax,%eax
   1115a:	48 69 c0 1f 85 eb 51 	imul   $0x51eb851f,%rax,%rax
   11161:	48 c1 e8 20          	shr    $0x20,%rax
   11165:	c1 e8 05             	shr    $0x5,%eax
   11168:	89 45 fc             	mov    %eax,-0x4(%rbp)
   1116b:	83 7d fc 00          	cmpl   $0x0,-0x4(%rbp)
   1116f:	74 1a                	je     1118b <ulTaskGetIdleRunTimePercent+0x4a>
   11171:	48 8b 05 b8 06 02 00 	mov    0x206b8(%rip),%rax        # 31830 <xIdleTaskHandle>
   11178:	8b 80 a0 00 00 00    	mov    0xa0(%rax),%eax
   1117e:	ba 00 00 00 00       	mov    $0x0,%edx
   11183:	f7 75 fc             	divl   -0x4(%rbp)
   11186:	89 45 f8             	mov    %eax,-0x8(%rbp)
   11189:	eb 07                	jmp    11192 <ulTaskGetIdleRunTimePercent+0x51>
   1118b:	c7 45 f8 00 00 00 00 	movl   $0x0,-0x8(%rbp)
   11192:	8b 45 f8             	mov    -0x8(%rbp),%eax
   11195:	c9                   	leaveq 
   11196:	c3                   	retq   

0000000000011197 <prvAddCurrentTaskToDelayedList>:
   11197:	f3 0f 1e fa          	endbr64 
   1119b:	55                   	push   %rbp
   1119c:	48 89 e5             	mov    %rsp,%rbp
   1119f:	48 83 ec 30          	sub    $0x30,%rsp
   111a3:	48 89 7d d8          	mov    %rdi,-0x28(%rbp)
   111a7:	48 89 75 d0          	mov    %rsi,-0x30(%rbp)
   111ab:	48 8b 05 3e 06 02 00 	mov    0x2063e(%rip),%rax        # 317f0 <xTickCount>
   111b2:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
   111b6:	48 8b 05 c3 03 02 00 	mov    0x203c3(%rip),%rax        # 31580 <pxCurrentTCB>
   111bd:	c6 80 aa 00 00 00 00 	movb   $0x0,0xaa(%rax)
   111c4:	48 8b 05 b5 03 02 00 	mov    0x203b5(%rip),%rax        # 31580 <pxCurrentTCB>
   111cb:	48 83 c0 08          	add    $0x8,%rax
   111cf:	48 89 c7             	mov    %rax,%rdi
   111d2:	e8 06 7c ff ff       	callq  8ddd <uxListRemove>
   111d7:	48 83 7d d8 ff       	cmpq   $0xffffffffffffffff,-0x28(%rbp)
   111dc:	0f 85 85 00 00 00    	jne    11267 <prvAddCurrentTaskToDelayedList+0xd0>
   111e2:	48 83 7d d0 00       	cmpq   $0x0,-0x30(%rbp)
   111e7:	74 7e                	je     11267 <prvAddCurrentTaskToDelayedList+0xd0>
   111e9:	48 8b 05 d8 05 02 00 	mov    0x205d8(%rip),%rax        # 317c8 <xSuspendedTaskList+0x8>
   111f0:	48 89 45 f0          	mov    %rax,-0x10(%rbp)
   111f4:	48 8b 05 85 03 02 00 	mov    0x20385(%rip),%rax        # 31580 <pxCurrentTCB>
   111fb:	48 8b 55 f0          	mov    -0x10(%rbp),%rdx
   111ff:	48 89 50 10          	mov    %rdx,0x10(%rax)
   11203:	48 8b 05 76 03 02 00 	mov    0x20376(%rip),%rax        # 31580 <pxCurrentTCB>
   1120a:	48 8b 55 f0          	mov    -0x10(%rbp),%rdx
   1120e:	48 8b 52 10          	mov    0x10(%rdx),%rdx
   11212:	48 89 50 18          	mov    %rdx,0x18(%rax)
   11216:	48 8b 15 63 03 02 00 	mov    0x20363(%rip),%rdx        # 31580 <pxCurrentTCB>
   1121d:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
   11221:	48 8b 40 10          	mov    0x10(%rax),%rax
   11225:	48 83 c2 08          	add    $0x8,%rdx
   11229:	48 89 50 08          	mov    %rdx,0x8(%rax)
   1122d:	48 8b 05 4c 03 02 00 	mov    0x2034c(%rip),%rax        # 31580 <pxCurrentTCB>
   11234:	48 8d 50 08          	lea    0x8(%rax),%rdx
   11238:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
   1123c:	48 89 50 10          	mov    %rdx,0x10(%rax)
   11240:	48 8b 05 39 03 02 00 	mov    0x20339(%rip),%rax        # 31580 <pxCurrentTCB>
   11247:	48 8d 15 72 05 02 00 	lea    0x20572(%rip),%rdx        # 317c0 <xSuspendedTaskList>
   1124e:	48 89 50 28          	mov    %rdx,0x28(%rax)
   11252:	48 8b 05 67 05 02 00 	mov    0x20567(%rip),%rax        # 317c0 <xSuspendedTaskList>
   11259:	48 83 c0 01          	add    $0x1,%rax
   1125d:	48 89 05 5c 05 02 00 	mov    %rax,0x2055c(%rip)        # 317c0 <xSuspendedTaskList>
   11264:	90                   	nop
   11265:	eb 7c                	jmp    112e3 <prvAddCurrentTaskToDelayedList+0x14c>
   11267:	48 8b 55 e8          	mov    -0x18(%rbp),%rdx
   1126b:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
   1126f:	48 01 d0             	add    %rdx,%rax
   11272:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
   11276:	48 8b 05 03 03 02 00 	mov    0x20303(%rip),%rax        # 31580 <pxCurrentTCB>
   1127d:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
   11281:	48 89 50 08          	mov    %rdx,0x8(%rax)
   11285:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   11289:	48 3b 45 e8          	cmp    -0x18(%rbp),%rax
   1128d:	73 1f                	jae    112ae <prvAddCurrentTaskToDelayedList+0x117>
   1128f:	48 8b 05 ea 02 02 00 	mov    0x202ea(%rip),%rax        # 31580 <pxCurrentTCB>
   11296:	48 8d 50 08          	lea    0x8(%rax),%rdx
   1129a:	48 8b 05 8f 04 02 00 	mov    0x2048f(%rip),%rax        # 31730 <pxOverflowDelayedTaskList>
   112a1:	48 89 d6             	mov    %rdx,%rsi
   112a4:	48 89 c7             	mov    %rax,%rdi
   112a7:	e8 7d 7a ff ff       	callq  8d29 <vListInsert>
   112ac:	eb 35                	jmp    112e3 <prvAddCurrentTaskToDelayedList+0x14c>
   112ae:	48 8b 05 cb 02 02 00 	mov    0x202cb(%rip),%rax        # 31580 <pxCurrentTCB>
   112b5:	48 8d 50 08          	lea    0x8(%rax),%rdx
   112b9:	48 8b 05 68 04 02 00 	mov    0x20468(%rip),%rax        # 31728 <pxDelayedTaskList>
   112c0:	48 89 d6             	mov    %rdx,%rsi
   112c3:	48 89 c7             	mov    %rax,%rdi
   112c6:	e8 5e 7a ff ff       	callq  8d29 <vListInsert>
   112cb:	48 8b 05 56 05 02 00 	mov    0x20556(%rip),%rax        # 31828 <xNextTaskUnblockTime>
   112d2:	48 39 45 f8          	cmp    %rax,-0x8(%rbp)
   112d6:	73 0b                	jae    112e3 <prvAddCurrentTaskToDelayedList+0x14c>
   112d8:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   112dc:	48 89 05 45 05 02 00 	mov    %rax,0x20545(%rip)        # 31828 <xNextTaskUnblockTime>
   112e3:	90                   	nop
   112e4:	c9                   	leaveq 
   112e5:	c3                   	retq   

00000000000112e6 <xTimerCreateTimerTask>:
   112e6:	f3 0f 1e fa          	endbr64 
   112ea:	55                   	push   %rbp
   112eb:	48 89 e5             	mov    %rsp,%rbp
   112ee:	48 83 ec 30          	sub    $0x30,%rsp
   112f2:	64 48 8b 04 25 28 00 	mov    %fs:0x28,%rax
   112f9:	00 00 
   112fb:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
   112ff:	31 c0                	xor    %eax,%eax
   11301:	48 c7 45 f0 00 00 00 	movq   $0x0,-0x10(%rbp)
   11308:	00 
   11309:	e8 8a 0f 00 00       	callq  12298 <prvCheckForValidListAndQueue>
   1130e:	48 8b 05 c3 05 02 00 	mov    0x205c3(%rip),%rax        # 318d8 <xTimerQueue>
   11315:	48 85 c0             	test   %rax,%rax
   11318:	74 79                	je     11393 <xTimerCreateTimerTask+0xad>
   1131a:	48 c7 45 e0 00 00 00 	movq   $0x0,-0x20(%rbp)
   11321:	00 
   11322:	48 c7 45 e8 00 00 00 	movq   $0x0,-0x18(%rbp)
   11329:	00 
   1132a:	48 8d 55 dc          	lea    -0x24(%rbp),%rdx
   1132e:	48 8d 4d e8          	lea    -0x18(%rbp),%rcx
   11332:	48 8d 45 e0          	lea    -0x20(%rbp),%rax
   11336:	48 89 ce             	mov    %rcx,%rsi
   11339:	48 89 c7             	mov    %rax,%rdi
   1133c:	e8 dc 2a ff ff       	callq  3e1d <vApplicationGetTimerTaskMemory>
   11341:	48 8b 55 e0          	mov    -0x20(%rbp),%rdx
   11345:	48 8b 4d e8          	mov    -0x18(%rbp),%rcx
   11349:	8b 45 dc             	mov    -0x24(%rbp),%eax
   1134c:	48 83 ec 08          	sub    $0x8,%rsp
   11350:	52                   	push   %rdx
   11351:	49 89 c9             	mov    %rcx,%r9
   11354:	41 b8 06 00 00 00    	mov    $0x6,%r8d
   1135a:	b9 00 00 00 00       	mov    $0x0,%ecx
   1135f:	89 c2                	mov    %eax,%edx
   11361:	48 8d 35 e0 65 01 00 	lea    0x165e0(%rip),%rsi        # 27948 <_IO_stdin_used+0x948>
   11368:	48 8d 3d 5b 09 00 00 	lea    0x95b(%rip),%rdi        # 11cca <prvTimerTask>
   1136f:	e8 65 a8 ff ff       	callq  bbd9 <xTaskCreateStatic>
   11374:	48 83 c4 10          	add    $0x10,%rsp
   11378:	48 89 05 61 05 02 00 	mov    %rax,0x20561(%rip)        # 318e0 <xTimerTaskHandle>
   1137f:	48 8b 05 5a 05 02 00 	mov    0x2055a(%rip),%rax        # 318e0 <xTimerTaskHandle>
   11386:	48 85 c0             	test   %rax,%rax
   11389:	74 08                	je     11393 <xTimerCreateTimerTask+0xad>
   1138b:	48 c7 45 f0 01 00 00 	movq   $0x1,-0x10(%rbp)
   11392:	00 
   11393:	48 83 7d f0 00       	cmpq   $0x0,-0x10(%rbp)
   11398:	75 11                	jne    113ab <xTimerCreateTimerTask+0xc5>
   1139a:	be 19 01 00 00       	mov    $0x119,%esi
   1139f:	48 8d 3d aa 65 01 00 	lea    0x165aa(%rip),%rdi        # 27950 <_IO_stdin_used+0x950>
   113a6:	e8 61 29 ff ff       	callq  3d0c <vAssertCalled>
   113ab:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
   113af:	48 8b 75 f8          	mov    -0x8(%rbp),%rsi
   113b3:	64 48 33 34 25 28 00 	xor    %fs:0x28,%rsi
   113ba:	00 00 
   113bc:	74 05                	je     113c3 <xTimerCreateTimerTask+0xdd>
   113be:	e8 0d 11 ff ff       	callq  24d0 <__stack_chk_fail@plt>
   113c3:	c9                   	leaveq 
   113c4:	c3                   	retq   

00000000000113c5 <xTimerCreate>:
   113c5:	f3 0f 1e fa          	endbr64 
   113c9:	55                   	push   %rbp
   113ca:	48 89 e5             	mov    %rsp,%rbp
   113cd:	48 83 ec 40          	sub    $0x40,%rsp
   113d1:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
   113d5:	48 89 75 e0          	mov    %rsi,-0x20(%rbp)
   113d9:	48 89 55 d8          	mov    %rdx,-0x28(%rbp)
   113dd:	48 89 4d d0          	mov    %rcx,-0x30(%rbp)
   113e1:	4c 89 45 c8          	mov    %r8,-0x38(%rbp)
   113e5:	bf 58 00 00 00       	mov    $0x58,%edi
   113ea:	e8 91 12 00 00       	callq  12680 <pvPortMalloc>
   113ef:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
   113f3:	48 83 7d f8 00       	cmpq   $0x0,-0x8(%rbp)
   113f8:	74 2e                	je     11428 <xTimerCreate+0x63>
   113fa:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   113fe:	c6 40 50 00          	movb   $0x0,0x50(%rax)
   11402:	4c 8b 45 f8          	mov    -0x8(%rbp),%r8
   11406:	48 8b 7d c8          	mov    -0x38(%rbp),%rdi
   1140a:	48 8b 4d d0          	mov    -0x30(%rbp),%rcx
   1140e:	48 8b 55 d8          	mov    -0x28(%rbp),%rdx
   11412:	48 8b 75 e0          	mov    -0x20(%rbp),%rsi
   11416:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
   1141a:	4d 89 c1             	mov    %r8,%r9
   1141d:	49 89 f8             	mov    %rdi,%r8
   11420:	48 89 c7             	mov    %rax,%rdi
   11423:	e8 ac 00 00 00       	callq  114d4 <prvInitialiseNewTimer>
   11428:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   1142c:	c9                   	leaveq 
   1142d:	c3                   	retq   

000000000001142e <xTimerCreateStatic>:
   1142e:	f3 0f 1e fa          	endbr64 
   11432:	55                   	push   %rbp
   11433:	48 89 e5             	mov    %rsp,%rbp
   11436:	48 83 ec 40          	sub    $0x40,%rsp
   1143a:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
   1143e:	48 89 75 e0          	mov    %rsi,-0x20(%rbp)
   11442:	48 89 55 d8          	mov    %rdx,-0x28(%rbp)
   11446:	48 89 4d d0          	mov    %rcx,-0x30(%rbp)
   1144a:	4c 89 45 c8          	mov    %r8,-0x38(%rbp)
   1144e:	4c 89 4d c0          	mov    %r9,-0x40(%rbp)
   11452:	48 c7 45 f0 58 00 00 	movq   $0x58,-0x10(%rbp)
   11459:	00 
   1145a:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
   1145e:	48 83 f8 58          	cmp    $0x58,%rax
   11462:	74 11                	je     11475 <xTimerCreateStatic+0x47>
   11464:	be 4a 01 00 00       	mov    $0x14a,%esi
   11469:	48 8d 3d e0 64 01 00 	lea    0x164e0(%rip),%rdi        # 27950 <_IO_stdin_used+0x950>
   11470:	e8 97 28 ff ff       	callq  3d0c <vAssertCalled>
   11475:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
   11479:	48 83 7d c0 00       	cmpq   $0x0,-0x40(%rbp)
   1147e:	75 11                	jne    11491 <xTimerCreateStatic+0x63>
   11480:	be 50 01 00 00       	mov    $0x150,%esi
   11485:	48 8d 3d c4 64 01 00 	lea    0x164c4(%rip),%rdi        # 27950 <_IO_stdin_used+0x950>
   1148c:	e8 7b 28 ff ff       	callq  3d0c <vAssertCalled>
   11491:	48 8b 45 c0          	mov    -0x40(%rbp),%rax
   11495:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
   11499:	48 83 7d f8 00       	cmpq   $0x0,-0x8(%rbp)
   1149e:	74 2e                	je     114ce <xTimerCreateStatic+0xa0>
   114a0:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   114a4:	c6 40 50 02          	movb   $0x2,0x50(%rax)
   114a8:	4c 8b 45 f8          	mov    -0x8(%rbp),%r8
   114ac:	48 8b 7d c8          	mov    -0x38(%rbp),%rdi
   114b0:	48 8b 4d d0          	mov    -0x30(%rbp),%rcx
   114b4:	48 8b 55 d8          	mov    -0x28(%rbp),%rdx
   114b8:	48 8b 75 e0          	mov    -0x20(%rbp),%rsi
   114bc:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
   114c0:	4d 89 c1             	mov    %r8,%r9
   114c3:	49 89 f8             	mov    %rdi,%r8
   114c6:	48 89 c7             	mov    %rax,%rdi
   114c9:	e8 06 00 00 00       	callq  114d4 <prvInitialiseNewTimer>
   114ce:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   114d2:	c9                   	leaveq 
   114d3:	c3                   	retq   

00000000000114d4 <prvInitialiseNewTimer>:
   114d4:	f3 0f 1e fa          	endbr64 
   114d8:	55                   	push   %rbp
   114d9:	48 89 e5             	mov    %rsp,%rbp
   114dc:	48 83 ec 30          	sub    $0x30,%rsp
   114e0:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   114e4:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
   114e8:	48 89 55 e8          	mov    %rdx,-0x18(%rbp)
   114ec:	48 89 4d e0          	mov    %rcx,-0x20(%rbp)
   114f0:	4c 89 45 d8          	mov    %r8,-0x28(%rbp)
   114f4:	4c 89 4d d0          	mov    %r9,-0x30(%rbp)
   114f8:	48 83 7d f0 00       	cmpq   $0x0,-0x10(%rbp)
   114fd:	75 11                	jne    11510 <prvInitialiseNewTimer+0x3c>
   114ff:	be 6b 01 00 00       	mov    $0x16b,%esi
   11504:	48 8d 3d 45 64 01 00 	lea    0x16445(%rip),%rdi        # 27950 <_IO_stdin_used+0x950>
   1150b:	e8 fc 27 ff ff       	callq  3d0c <vAssertCalled>
   11510:	e8 83 0d 00 00       	callq  12298 <prvCheckForValidListAndQueue>
   11515:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
   11519:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
   1151d:	48 89 10             	mov    %rdx,(%rax)
   11520:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
   11524:	48 8b 55 f0          	mov    -0x10(%rbp),%rdx
   11528:	48 89 50 30          	mov    %rdx,0x30(%rax)
   1152c:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
   11530:	48 8b 55 e0          	mov    -0x20(%rbp),%rdx
   11534:	48 89 50 38          	mov    %rdx,0x38(%rax)
   11538:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
   1153c:	48 8b 55 d8          	mov    -0x28(%rbp),%rdx
   11540:	48 89 50 40          	mov    %rdx,0x40(%rax)
   11544:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
   11548:	48 83 c0 08          	add    $0x8,%rax
   1154c:	48 89 c7             	mov    %rax,%rdi
   1154f:	e8 45 77 ff ff       	callq  8c99 <vListInitialiseItem>
   11554:	48 83 7d e8 00       	cmpq   $0x0,-0x18(%rbp)
   11559:	74 14                	je     1156f <prvInitialiseNewTimer+0x9b>
   1155b:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
   1155f:	0f b6 40 50          	movzbl 0x50(%rax),%eax
   11563:	83 c8 04             	or     $0x4,%eax
   11566:	89 c2                	mov    %eax,%edx
   11568:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
   1156c:	88 50 50             	mov    %dl,0x50(%rax)
   1156f:	bf 05 00 00 00       	mov    $0x5,%edi
   11574:	e8 aa 48 01 00       	callq  25e23 <prvTraceGetObjectHandle>
   11579:	0f b6 d0             	movzbl %al,%edx
   1157c:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
   11580:	89 d6                	mov    %edx,%esi
   11582:	48 89 c7             	mov    %rax,%rdi
   11585:	e8 7c 1d 01 00       	callq  23306 <prvTraceSetTimerNumberLow16>
   1158a:	0f b7 05 4d fb 01 00 	movzwl 0x1fb4d(%rip),%eax        # 310de <CurrentFilterGroup>
   11591:	0f b7 d0             	movzwl %ax,%edx
   11594:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
   11598:	89 d6                	mov    %edx,%esi
   1159a:	48 89 c7             	mov    %rax,%rdi
   1159d:	e8 a7 1d 01 00       	callq  23349 <prvTraceSetTimerNumberHigh16>
   115a2:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
   115a6:	48 89 c7             	mov    %rax,%rdi
   115a9:	e8 18 1d 01 00       	callq  232c6 <prvTraceGetTimerNumberLow16>
   115ae:	0f b6 c0             	movzbl %al,%eax
   115b1:	89 c6                	mov    %eax,%esi
   115b3:	bf 05 00 00 00       	mov    $0x5,%edi
   115b8:	e8 53 4b 01 00       	callq  26110 <prvMarkObjectAsUsed>
   115bd:	e8 9a 20 01 00       	callq  2365c <prvTraceGetCurrentTaskHandle>
   115c2:	48 89 c7             	mov    %rax,%rdi
   115c5:	e8 91 1b 01 00       	callq  2315b <prvTraceGetTaskNumberHigh16>
   115ca:	0f b7 15 0b fb 01 00 	movzwl 0x1fb0b(%rip),%edx        # 310dc <CurrentFilterMask>
   115d1:	21 d0                	and    %edx,%eax
   115d3:	66 85 c0             	test   %ax,%ax
   115d6:	74 3a                	je     11612 <prvInitialiseNewTimer+0x13e>
   115d8:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
   115dc:	48 89 c7             	mov    %rax,%rdi
   115df:	e8 00 1d 01 00       	callq  232e4 <prvTraceGetTimerNumberHigh16>
   115e4:	0f b7 15 f1 fa 01 00 	movzwl 0x1faf1(%rip),%edx        # 310dc <CurrentFilterMask>
   115eb:	21 d0                	and    %edx,%eax
   115ed:	66 85 c0             	test   %ax,%ax
   115f0:	74 20                	je     11612 <prvInitialiseNewTimer+0x13e>
   115f2:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
   115f6:	48 89 c7             	mov    %rax,%rdi
   115f9:	e8 c8 1c 01 00       	callq  232c6 <prvTraceGetTimerNumberLow16>
   115fe:	0f b6 c0             	movzbl %al,%eax
   11601:	89 c2                	mov    %eax,%edx
   11603:	be 05 00 00 00       	mov    $0x5,%esi
   11608:	bf b0 00 00 00       	mov    $0xb0,%edi
   1160d:	e8 40 3a 01 00       	callq  25052 <prvTraceStoreKernelCall>
   11612:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
   11616:	48 89 c7             	mov    %rax,%rdi
   11619:	e8 a8 1c 01 00       	callq  232c6 <prvTraceGetTimerNumberLow16>
   1161e:	0f b6 c0             	movzbl %al,%eax
   11621:	ba 00 00 00 00       	mov    $0x0,%edx
   11626:	89 c6                	mov    %eax,%esi
   11628:	bf 05 00 00 00       	mov    $0x5,%edi
   1162d:	e8 5a 42 01 00       	callq  2588c <prvTraceSetObjectState>
   11632:	90                   	nop
   11633:	c9                   	leaveq 
   11634:	c3                   	retq   

0000000000011635 <xTimerGenericCommand>:
   11635:	f3 0f 1e fa          	endbr64 
   11639:	55                   	push   %rbp
   1163a:	48 89 e5             	mov    %rsp,%rbp
   1163d:	53                   	push   %rbx
   1163e:	48 83 ec 78          	sub    $0x78,%rsp
   11642:	48 89 7d a8          	mov    %rdi,-0x58(%rbp)
   11646:	48 89 75 a0          	mov    %rsi,-0x60(%rbp)
   1164a:	48 89 55 98          	mov    %rdx,-0x68(%rbp)
   1164e:	48 89 4d 90          	mov    %rcx,-0x70(%rbp)
   11652:	4c 89 45 88          	mov    %r8,-0x78(%rbp)
   11656:	64 48 8b 04 25 28 00 	mov    %fs:0x28,%rax
   1165d:	00 00 
   1165f:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
   11663:	31 c0                	xor    %eax,%eax
   11665:	48 c7 45 b8 00 00 00 	movq   $0x0,-0x48(%rbp)
   1166c:	00 
   1166d:	48 83 7d a8 00       	cmpq   $0x0,-0x58(%rbp)
   11672:	75 11                	jne    11685 <xTimerGenericCommand+0x50>
   11674:	be 8b 01 00 00       	mov    $0x18b,%esi
   11679:	48 8d 3d d0 62 01 00 	lea    0x162d0(%rip),%rdi        # 27950 <_IO_stdin_used+0x950>
   11680:	e8 87 26 ff ff       	callq  3d0c <vAssertCalled>
   11685:	48 8b 05 4c 02 02 00 	mov    0x2024c(%rip),%rax        # 318d8 <xTimerQueue>
   1168c:	48 85 c0             	test   %rax,%rax
   1168f:	0f 84 c1 02 00 00    	je     11956 <xTimerGenericCommand+0x321>
   11695:	48 8b 45 a0          	mov    -0x60(%rbp),%rax
   11699:	48 89 45 c0          	mov    %rax,-0x40(%rbp)
   1169d:	48 8b 45 98          	mov    -0x68(%rbp),%rax
   116a1:	48 89 45 c8          	mov    %rax,-0x38(%rbp)
   116a5:	48 8b 45 a8          	mov    -0x58(%rbp),%rax
   116a9:	48 89 45 d0          	mov    %rax,-0x30(%rbp)
   116ad:	48 83 7d a0 05       	cmpq   $0x5,-0x60(%rbp)
   116b2:	7f 50                	jg     11704 <xTimerGenericCommand+0xcf>
   116b4:	e8 de df ff ff       	callq  f697 <xTaskGetSchedulerState>
   116b9:	48 83 f8 02          	cmp    $0x2,%rax
   116bd:	75 22                	jne    116e1 <xTimerGenericCommand+0xac>
   116bf:	48 8b 05 12 02 02 00 	mov    0x20212(%rip),%rax        # 318d8 <xTimerQueue>
   116c6:	48 8b 55 88          	mov    -0x78(%rbp),%rdx
   116ca:	48 8d 75 c0          	lea    -0x40(%rbp),%rsi
   116ce:	b9 00 00 00 00       	mov    $0x0,%ecx
   116d3:	48 89 c7             	mov    %rax,%rdi
   116d6:	e8 bc 46 ff ff       	callq  5d97 <xQueueGenericSend>
   116db:	48 89 45 b8          	mov    %rax,-0x48(%rbp)
   116df:	eb 43                	jmp    11724 <xTimerGenericCommand+0xef>
   116e1:	48 8b 05 f0 01 02 00 	mov    0x201f0(%rip),%rax        # 318d8 <xTimerQueue>
   116e8:	48 8d 75 c0          	lea    -0x40(%rbp),%rsi
   116ec:	b9 00 00 00 00       	mov    $0x0,%ecx
   116f1:	ba 00 00 00 00       	mov    $0x0,%edx
   116f6:	48 89 c7             	mov    %rax,%rdi
   116f9:	e8 99 46 ff ff       	callq  5d97 <xQueueGenericSend>
   116fe:	48 89 45 b8          	mov    %rax,-0x48(%rbp)
   11702:	eb 20                	jmp    11724 <xTimerGenericCommand+0xef>
   11704:	48 8b 05 cd 01 02 00 	mov    0x201cd(%rip),%rax        # 318d8 <xTimerQueue>
   1170b:	48 8b 55 90          	mov    -0x70(%rbp),%rdx
   1170f:	48 8d 75 c0          	lea    -0x40(%rbp),%rsi
   11713:	b9 00 00 00 00       	mov    $0x0,%ecx
   11718:	48 89 c7             	mov    %rax,%rdi
   1171b:	e8 69 4c ff ff       	callq  6389 <xQueueGenericSendFromISR>
   11720:	48 89 45 b8          	mov    %rax,-0x48(%rbp)
   11724:	48 83 7d a0 00       	cmpq   $0x0,-0x60(%rbp)
   11729:	0f 8e 27 02 00 00    	jle    11956 <xTimerGenericCommand+0x321>
   1172f:	48 83 7d a0 04       	cmpq   $0x4,-0x60(%rbp)
   11734:	0f 85 db 00 00 00    	jne    11815 <xTimerGenericCommand+0x1e0>
   1173a:	48 83 7d b8 01       	cmpq   $0x1,-0x48(%rbp)
   1173f:	75 6a                	jne    117ab <xTimerGenericCommand+0x176>
   11741:	e8 16 1f 01 00       	callq  2365c <prvTraceGetCurrentTaskHandle>
   11746:	48 89 c7             	mov    %rax,%rdi
   11749:	e8 0d 1a 01 00       	callq  2315b <prvTraceGetTaskNumberHigh16>
   1174e:	0f b7 15 87 f9 01 00 	movzwl 0x1f987(%rip),%edx        # 310dc <CurrentFilterMask>
   11755:	21 d0                	and    %edx,%eax
   11757:	66 85 c0             	test   %ax,%ax
   1175a:	0f 84 f6 01 00 00    	je     11956 <xTimerGenericCommand+0x321>
   11760:	48 8b 45 a8          	mov    -0x58(%rbp),%rax
   11764:	48 89 c7             	mov    %rax,%rdi
   11767:	e8 78 1b 01 00       	callq  232e4 <prvTraceGetTimerNumberHigh16>
   1176c:	0f b7 15 69 f9 01 00 	movzwl 0x1f969(%rip),%edx        # 310dc <CurrentFilterMask>
   11773:	21 d0                	and    %edx,%eax
   11775:	66 85 c0             	test   %ax,%ax
   11778:	0f 84 d8 01 00 00    	je     11956 <xTimerGenericCommand+0x321>
   1177e:	48 8b 45 98          	mov    -0x68(%rbp),%rax
   11782:	89 c3                	mov    %eax,%ebx
   11784:	48 8b 45 a8          	mov    -0x58(%rbp),%rax
   11788:	48 89 c7             	mov    %rax,%rdi
   1178b:	e8 36 1b 01 00       	callq  232c6 <prvTraceGetTimerNumberLow16>
   11790:	0f b6 c0             	movzbl %al,%eax
   11793:	89 d9                	mov    %ebx,%ecx
   11795:	89 c2                	mov    %eax,%edx
   11797:	be 05 00 00 00       	mov    $0x5,%esi
   1179c:	bf b4 00 00 00       	mov    $0xb4,%edi
   117a1:	e8 cf 39 01 00       	callq  25175 <prvTraceStoreKernelCallWithParam>
   117a6:	e9 ab 01 00 00       	jmpq   11956 <xTimerGenericCommand+0x321>
   117ab:	e8 ac 1e 01 00       	callq  2365c <prvTraceGetCurrentTaskHandle>
   117b0:	48 89 c7             	mov    %rax,%rdi
   117b3:	e8 a3 19 01 00       	callq  2315b <prvTraceGetTaskNumberHigh16>
   117b8:	0f b7 15 1d f9 01 00 	movzwl 0x1f91d(%rip),%edx        # 310dc <CurrentFilterMask>
   117bf:	21 d0                	and    %edx,%eax
   117c1:	66 85 c0             	test   %ax,%ax
   117c4:	0f 84 8c 01 00 00    	je     11956 <xTimerGenericCommand+0x321>
   117ca:	48 8b 45 a8          	mov    -0x58(%rbp),%rax
   117ce:	48 89 c7             	mov    %rax,%rdi
   117d1:	e8 0e 1b 01 00       	callq  232e4 <prvTraceGetTimerNumberHigh16>
   117d6:	0f b7 15 ff f8 01 00 	movzwl 0x1f8ff(%rip),%edx        # 310dc <CurrentFilterMask>
   117dd:	21 d0                	and    %edx,%eax
   117df:	66 85 c0             	test   %ax,%ax
   117e2:	0f 84 6e 01 00 00    	je     11956 <xTimerGenericCommand+0x321>
   117e8:	48 8b 45 98          	mov    -0x68(%rbp),%rax
   117ec:	89 c3                	mov    %eax,%ebx
   117ee:	48 8b 45 a8          	mov    -0x58(%rbp),%rax
   117f2:	48 89 c7             	mov    %rax,%rdi
   117f5:	e8 cc 1a 01 00       	callq  232c6 <prvTraceGetTimerNumberLow16>
   117fa:	0f b6 c0             	movzbl %al,%eax
   117fd:	89 d9                	mov    %ebx,%ecx
   117ff:	89 c2                	mov    %eax,%edx
   11801:	be 05 00 00 00       	mov    $0x5,%esi
   11806:	bf bd 00 00 00       	mov    $0xbd,%edi
   1180b:	e8 65 39 01 00       	callq  25175 <prvTraceStoreKernelCallWithParam>
   11810:	e9 41 01 00 00       	jmpq   11956 <xTimerGenericCommand+0x321>
   11815:	48 83 7d a0 05       	cmpq   $0x5,-0x60(%rbp)
   1181a:	0f 85 bd 00 00 00    	jne    118dd <xTimerGenericCommand+0x2a8>
   11820:	48 83 7d b8 01       	cmpq   $0x1,-0x48(%rbp)
   11825:	0f 85 b2 00 00 00    	jne    118dd <xTimerGenericCommand+0x2a8>
   1182b:	e8 2c 1e 01 00       	callq  2365c <prvTraceGetCurrentTaskHandle>
   11830:	48 89 c7             	mov    %rax,%rdi
   11833:	e8 23 19 01 00       	callq  2315b <prvTraceGetTaskNumberHigh16>
   11838:	0f b7 15 9d f8 01 00 	movzwl 0x1f89d(%rip),%edx        # 310dc <CurrentFilterMask>
   1183f:	21 d0                	and    %edx,%eax
   11841:	66 85 c0             	test   %ax,%ax
   11844:	74 3a                	je     11880 <xTimerGenericCommand+0x24b>
   11846:	48 8b 45 a8          	mov    -0x58(%rbp),%rax
   1184a:	48 89 c7             	mov    %rax,%rdi
   1184d:	e8 92 1a 01 00       	callq  232e4 <prvTraceGetTimerNumberHigh16>
   11852:	0f b7 15 83 f8 01 00 	movzwl 0x1f883(%rip),%edx        # 310dc <CurrentFilterMask>
   11859:	21 d0                	and    %edx,%eax
   1185b:	66 85 c0             	test   %ax,%ax
   1185e:	74 20                	je     11880 <xTimerGenericCommand+0x24b>
   11860:	48 8b 45 a8          	mov    -0x58(%rbp),%rax
   11864:	48 89 c7             	mov    %rax,%rdi
   11867:	e8 5a 1a 01 00       	callq  232c6 <prvTraceGetTimerNumberLow16>
   1186c:	0f b6 c0             	movzbl %al,%eax
   1186f:	89 c2                	mov    %eax,%edx
   11871:	be 05 00 00 00       	mov    $0x5,%esi
   11876:	bf b5 00 00 00       	mov    $0xb5,%edi
   1187b:	e8 d2 37 01 00       	callq  25052 <prvTraceStoreKernelCall>
   11880:	48 8b 45 a8          	mov    -0x58(%rbp),%rax
   11884:	48 89 c7             	mov    %rax,%rdi
   11887:	e8 3a 1a 01 00       	callq  232c6 <prvTraceGetTimerNumberLow16>
   1188c:	0f b6 c0             	movzbl %al,%eax
   1188f:	ba 05 00 00 00       	mov    $0x5,%edx
   11894:	89 c6                	mov    %eax,%esi
   11896:	bf 0d 00 00 00       	mov    $0xd,%edi
   1189b:	e8 8c 3c 01 00       	callq  2552c <prvTraceStoreObjectNameOnCloseEvent>
   118a0:	48 8b 45 a8          	mov    -0x58(%rbp),%rax
   118a4:	48 89 c7             	mov    %rax,%rdi
   118a7:	e8 1a 1a 01 00       	callq  232c6 <prvTraceGetTimerNumberLow16>
   118ac:	0f b6 c0             	movzbl %al,%eax
   118af:	ba 05 00 00 00       	mov    $0x5,%edx
   118b4:	89 c6                	mov    %eax,%esi
   118b6:	bf 15 00 00 00       	mov    $0x15,%edi
   118bb:	e8 62 3d 01 00       	callq  25622 <prvTraceStoreObjectPropertiesOnCloseEvent>
   118c0:	48 8b 45 a8          	mov    -0x58(%rbp),%rax
   118c4:	48 89 c7             	mov    %rax,%rdi
   118c7:	e8 fa 19 01 00       	callq  232c6 <prvTraceGetTimerNumberLow16>
   118cc:	0f b6 c0             	movzbl %al,%eax
   118cf:	89 c6                	mov    %eax,%esi
   118d1:	bf 05 00 00 00       	mov    $0x5,%edi
   118d6:	e8 3f 47 01 00       	callq  2601a <prvTraceFreeObjectHandle>
   118db:	eb 79                	jmp    11956 <xTimerGenericCommand+0x321>
   118dd:	e8 7a 1d 01 00       	callq  2365c <prvTraceGetCurrentTaskHandle>
   118e2:	48 89 c7             	mov    %rax,%rdi
   118e5:	e8 71 18 01 00       	callq  2315b <prvTraceGetTaskNumberHigh16>
   118ea:	0f b7 15 eb f7 01 00 	movzwl 0x1f7eb(%rip),%edx        # 310dc <CurrentFilterMask>
   118f1:	21 d0                	and    %edx,%eax
   118f3:	66 85 c0             	test   %ax,%ax
   118f6:	74 5e                	je     11956 <xTimerGenericCommand+0x321>
   118f8:	48 8b 45 a8          	mov    -0x58(%rbp),%rax
   118fc:	48 89 c7             	mov    %rax,%rdi
   118ff:	e8 e0 19 01 00       	callq  232e4 <prvTraceGetTimerNumberHigh16>
   11904:	0f b7 15 d1 f7 01 00 	movzwl 0x1f7d1(%rip),%edx        # 310dc <CurrentFilterMask>
   1190b:	21 d0                	and    %edx,%eax
   1190d:	66 85 c0             	test   %ax,%ax
   11910:	74 44                	je     11956 <xTimerGenericCommand+0x321>
   11912:	48 8b 45 98          	mov    -0x68(%rbp),%rax
   11916:	89 c3                	mov    %eax,%ebx
   11918:	48 8b 45 a8          	mov    -0x58(%rbp),%rax
   1191c:	48 89 c7             	mov    %rax,%rdi
   1191f:	e8 a2 19 01 00       	callq  232c6 <prvTraceGetTimerNumberLow16>
   11924:	0f b6 c0             	movzbl %al,%eax
   11927:	48 8b 55 a0          	mov    -0x60(%rbp),%rdx
   1192b:	89 d1                	mov    %edx,%ecx
   1192d:	48 83 7d b8 01       	cmpq   $0x1,-0x48(%rbp)
   11932:	75 07                	jne    1193b <xTimerGenericCommand+0x306>
   11934:	ba 00 00 00 00       	mov    $0x0,%edx
   11939:	eb 05                	jmp    11940 <xTimerGenericCommand+0x30b>
   1193b:	ba 09 00 00 00       	mov    $0x9,%edx
   11940:	01 ca                	add    %ecx,%edx
   11942:	8d ba b0 00 00 00    	lea    0xb0(%rdx),%edi
   11948:	89 d9                	mov    %ebx,%ecx
   1194a:	89 c2                	mov    %eax,%edx
   1194c:	be 05 00 00 00       	mov    $0x5,%esi
   11951:	e8 1f 38 01 00       	callq  25175 <prvTraceStoreKernelCallWithParam>
   11956:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
   1195a:	48 8b 5d e8          	mov    -0x18(%rbp),%rbx
   1195e:	64 48 33 1c 25 28 00 	xor    %fs:0x28,%rbx
   11965:	00 00 
   11967:	74 05                	je     1196e <xTimerGenericCommand+0x339>
   11969:	e8 62 0b ff ff       	callq  24d0 <__stack_chk_fail@plt>
   1196e:	48 83 c4 78          	add    $0x78,%rsp
   11972:	5b                   	pop    %rbx
   11973:	5d                   	pop    %rbp
   11974:	c3                   	retq   

0000000000011975 <xTimerGetTimerDaemonTaskHandle>:
   11975:	f3 0f 1e fa          	endbr64 
   11979:	55                   	push   %rbp
   1197a:	48 89 e5             	mov    %rsp,%rbp
   1197d:	48 8b 05 5c ff 01 00 	mov    0x1ff5c(%rip),%rax        # 318e0 <xTimerTaskHandle>
   11984:	48 85 c0             	test   %rax,%rax
   11987:	75 11                	jne    1199a <xTimerGetTimerDaemonTaskHandle+0x25>
   11989:	be b5 01 00 00       	mov    $0x1b5,%esi
   1198e:	48 8d 3d bb 5f 01 00 	lea    0x15fbb(%rip),%rdi        # 27950 <_IO_stdin_used+0x950>
   11995:	e8 72 23 ff ff       	callq  3d0c <vAssertCalled>
   1199a:	48 8b 05 3f ff 01 00 	mov    0x1ff3f(%rip),%rax        # 318e0 <xTimerTaskHandle>
   119a1:	5d                   	pop    %rbp
   119a2:	c3                   	retq   

00000000000119a3 <xTimerGetPeriod>:
   119a3:	f3 0f 1e fa          	endbr64 
   119a7:	55                   	push   %rbp
   119a8:	48 89 e5             	mov    %rsp,%rbp
   119ab:	48 83 ec 20          	sub    $0x20,%rsp
   119af:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
   119b3:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
   119b7:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
   119bb:	48 83 7d e8 00       	cmpq   $0x0,-0x18(%rbp)
   119c0:	75 11                	jne    119d3 <xTimerGetPeriod+0x30>
   119c2:	be be 01 00 00       	mov    $0x1be,%esi
   119c7:	48 8d 3d 82 5f 01 00 	lea    0x15f82(%rip),%rdi        # 27950 <_IO_stdin_used+0x950>
   119ce:	e8 39 23 ff ff       	callq  3d0c <vAssertCalled>
   119d3:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   119d7:	48 8b 40 30          	mov    0x30(%rax),%rax
   119db:	c9                   	leaveq 
   119dc:	c3                   	retq   

00000000000119dd <vTimerSetReloadMode>:
   119dd:	f3 0f 1e fa          	endbr64 
   119e1:	55                   	push   %rbp
   119e2:	48 89 e5             	mov    %rsp,%rbp
   119e5:	48 83 ec 20          	sub    $0x20,%rsp
   119e9:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
   119ed:	48 89 75 e0          	mov    %rsi,-0x20(%rbp)
   119f1:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
   119f5:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
   119f9:	48 83 7d e8 00       	cmpq   $0x0,-0x18(%rbp)
   119fe:	75 11                	jne    11a11 <vTimerSetReloadMode+0x34>
   11a00:	be c8 01 00 00       	mov    $0x1c8,%esi
   11a05:	48 8d 3d 44 5f 01 00 	lea    0x15f44(%rip),%rdi        # 27950 <_IO_stdin_used+0x950>
   11a0c:	e8 fb 22 ff ff       	callq  3d0c <vAssertCalled>
   11a11:	e8 b9 13 00 00       	callq  12dcf <vPortEnterCritical>
   11a16:	48 83 7d e0 00       	cmpq   $0x0,-0x20(%rbp)
   11a1b:	74 16                	je     11a33 <vTimerSetReloadMode+0x56>
   11a1d:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   11a21:	0f b6 40 50          	movzbl 0x50(%rax),%eax
   11a25:	83 c8 04             	or     $0x4,%eax
   11a28:	89 c2                	mov    %eax,%edx
   11a2a:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   11a2e:	88 50 50             	mov    %dl,0x50(%rax)
   11a31:	eb 14                	jmp    11a47 <vTimerSetReloadMode+0x6a>
   11a33:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   11a37:	0f b6 40 50          	movzbl 0x50(%rax),%eax
   11a3b:	83 e0 fb             	and    $0xfffffffb,%eax
   11a3e:	89 c2                	mov    %eax,%edx
   11a40:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   11a44:	88 50 50             	mov    %dl,0x50(%rax)
   11a47:	e8 b1 13 00 00       	callq  12dfd <vPortExitCritical>
   11a4c:	90                   	nop
   11a4d:	c9                   	leaveq 
   11a4e:	c3                   	retq   

0000000000011a4f <uxTimerGetReloadMode>:
   11a4f:	f3 0f 1e fa          	endbr64 
   11a53:	55                   	push   %rbp
   11a54:	48 89 e5             	mov    %rsp,%rbp
   11a57:	48 83 ec 20          	sub    $0x20,%rsp
   11a5b:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
   11a5f:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
   11a63:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
   11a67:	48 83 7d e8 00       	cmpq   $0x0,-0x18(%rbp)
   11a6c:	75 11                	jne    11a7f <uxTimerGetReloadMode+0x30>
   11a6e:	be dd 01 00 00       	mov    $0x1dd,%esi
   11a73:	48 8d 3d d6 5e 01 00 	lea    0x15ed6(%rip),%rdi        # 27950 <_IO_stdin_used+0x950>
   11a7a:	e8 8d 22 ff ff       	callq  3d0c <vAssertCalled>
   11a7f:	e8 4b 13 00 00       	callq  12dcf <vPortEnterCritical>
   11a84:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   11a88:	0f b6 40 50          	movzbl 0x50(%rax),%eax
   11a8c:	0f b6 c0             	movzbl %al,%eax
   11a8f:	83 e0 04             	and    $0x4,%eax
   11a92:	85 c0                	test   %eax,%eax
   11a94:	75 0a                	jne    11aa0 <uxTimerGetReloadMode+0x51>
   11a96:	48 c7 45 f0 00 00 00 	movq   $0x0,-0x10(%rbp)
   11a9d:	00 
   11a9e:	eb 08                	jmp    11aa8 <uxTimerGetReloadMode+0x59>
   11aa0:	48 c7 45 f0 01 00 00 	movq   $0x1,-0x10(%rbp)
   11aa7:	00 
   11aa8:	e8 50 13 00 00       	callq  12dfd <vPortExitCritical>
   11aad:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
   11ab1:	c9                   	leaveq 
   11ab2:	c3                   	retq   

0000000000011ab3 <xTimerGetExpiryTime>:
   11ab3:	f3 0f 1e fa          	endbr64 
   11ab7:	55                   	push   %rbp
   11ab8:	48 89 e5             	mov    %rsp,%rbp
   11abb:	48 83 ec 20          	sub    $0x20,%rsp
   11abf:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
   11ac3:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
   11ac7:	48 89 45 f0          	mov    %rax,-0x10(%rbp)
   11acb:	48 83 7d e8 00       	cmpq   $0x0,-0x18(%rbp)
   11ad0:	75 11                	jne    11ae3 <xTimerGetExpiryTime+0x30>
   11ad2:	be f6 01 00 00       	mov    $0x1f6,%esi
   11ad7:	48 8d 3d 72 5e 01 00 	lea    0x15e72(%rip),%rdi        # 27950 <_IO_stdin_used+0x950>
   11ade:	e8 29 22 ff ff       	callq  3d0c <vAssertCalled>
   11ae3:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
   11ae7:	48 8b 40 08          	mov    0x8(%rax),%rax
   11aeb:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
   11aef:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   11af3:	c9                   	leaveq 
   11af4:	c3                   	retq   

0000000000011af5 <pcTimerGetName>:
   11af5:	f3 0f 1e fa          	endbr64 
   11af9:	55                   	push   %rbp
   11afa:	48 89 e5             	mov    %rsp,%rbp
   11afd:	48 83 ec 20          	sub    $0x20,%rsp
   11b01:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
   11b05:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
   11b09:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
   11b0d:	48 83 7d e8 00       	cmpq   $0x0,-0x18(%rbp)
   11b12:	75 11                	jne    11b25 <pcTimerGetName+0x30>
   11b14:	be 00 02 00 00       	mov    $0x200,%esi
   11b19:	48 8d 3d 30 5e 01 00 	lea    0x15e30(%rip),%rdi        # 27950 <_IO_stdin_used+0x950>
   11b20:	e8 e7 21 ff ff       	callq  3d0c <vAssertCalled>
   11b25:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   11b29:	48 8b 00             	mov    (%rax),%rax
   11b2c:	c9                   	leaveq 
   11b2d:	c3                   	retq   

0000000000011b2e <prvReloadTimer>:
   11b2e:	f3 0f 1e fa          	endbr64 
   11b32:	55                   	push   %rbp
   11b33:	48 89 e5             	mov    %rsp,%rbp
   11b36:	48 83 ec 20          	sub    $0x20,%rsp
   11b3a:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   11b3e:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
   11b42:	48 89 55 e8          	mov    %rdx,-0x18(%rbp)
   11b46:	eb 72                	jmp    11bba <prvReloadTimer+0x8c>
   11b48:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   11b4c:	48 8b 40 30          	mov    0x30(%rax),%rax
   11b50:	48 01 45 f0          	add    %rax,-0x10(%rbp)
   11b54:	e8 03 1b 01 00       	callq  2365c <prvTraceGetCurrentTaskHandle>
   11b59:	48 89 c7             	mov    %rax,%rdi
   11b5c:	e8 fa 15 01 00       	callq  2315b <prvTraceGetTaskNumberHigh16>
   11b61:	0f b7 15 74 f5 01 00 	movzwl 0x1f574(%rip),%edx        # 310dc <CurrentFilterMask>
   11b68:	21 d0                	and    %edx,%eax
   11b6a:	66 85 c0             	test   %ax,%ax
   11b6d:	74 3a                	je     11ba9 <prvReloadTimer+0x7b>
   11b6f:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   11b73:	48 89 c7             	mov    %rax,%rdi
   11b76:	e8 69 17 01 00       	callq  232e4 <prvTraceGetTimerNumberHigh16>
   11b7b:	0f b7 15 5a f5 01 00 	movzwl 0x1f55a(%rip),%edx        # 310dc <CurrentFilterMask>
   11b82:	21 d0                	and    %edx,%eax
   11b84:	66 85 c0             	test   %ax,%ax
   11b87:	74 20                	je     11ba9 <prvReloadTimer+0x7b>
   11b89:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   11b8d:	48 89 c7             	mov    %rax,%rdi
   11b90:	e8 31 17 01 00       	callq  232c6 <prvTraceGetTimerNumberLow16>
   11b95:	0f b6 c0             	movzbl %al,%eax
   11b98:	89 c2                	mov    %eax,%edx
   11b9a:	be 05 00 00 00       	mov    $0x5,%esi
   11b9f:	bf db 00 00 00       	mov    $0xdb,%edi
   11ba4:	e8 a9 34 01 00       	callq  25052 <prvTraceStoreKernelCall>
   11ba9:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   11bad:	48 8b 50 40          	mov    0x40(%rax),%rdx
   11bb1:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   11bb5:	48 89 c7             	mov    %rax,%rdi
   11bb8:	ff d2                	callq  *%rdx
   11bba:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   11bbe:	48 8b 50 30          	mov    0x30(%rax),%rdx
   11bc2:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
   11bc6:	48 8d 34 02          	lea    (%rdx,%rax,1),%rsi
   11bca:	48 8b 4d f0          	mov    -0x10(%rbp),%rcx
   11bce:	48 8b 55 e8          	mov    -0x18(%rbp),%rdx
   11bd2:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   11bd6:	48 89 c7             	mov    %rax,%rdi
   11bd9:	e8 ce 02 00 00       	callq  11eac <prvInsertTimerInActiveList>
   11bde:	48 85 c0             	test   %rax,%rax
   11be1:	0f 85 61 ff ff ff    	jne    11b48 <prvReloadTimer+0x1a>
   11be7:	90                   	nop
   11be8:	90                   	nop
   11be9:	c9                   	leaveq 
   11bea:	c3                   	retq   

0000000000011beb <prvProcessExpiredTimer>:
   11beb:	f3 0f 1e fa          	endbr64 
   11bef:	55                   	push   %rbp
   11bf0:	48 89 e5             	mov    %rsp,%rbp
   11bf3:	48 83 ec 20          	sub    $0x20,%rsp
   11bf7:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
   11bfb:	48 89 75 e0          	mov    %rsi,-0x20(%rbp)
   11bff:	48 8b 05 c2 fc 01 00 	mov    0x1fcc2(%rip),%rax        # 318c8 <pxCurrentTimerList>
   11c06:	48 8b 40 18          	mov    0x18(%rax),%rax
   11c0a:	48 8b 40 18          	mov    0x18(%rax),%rax
   11c0e:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
   11c12:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   11c16:	48 83 c0 08          	add    $0x8,%rax
   11c1a:	48 89 c7             	mov    %rax,%rdi
   11c1d:	e8 bb 71 ff ff       	callq  8ddd <uxListRemove>
   11c22:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   11c26:	0f b6 40 50          	movzbl 0x50(%rax),%eax
   11c2a:	0f b6 c0             	movzbl %al,%eax
   11c2d:	83 e0 04             	and    $0x4,%eax
   11c30:	85 c0                	test   %eax,%eax
   11c32:	74 19                	je     11c4d <prvProcessExpiredTimer+0x62>
   11c34:	48 8b 55 e0          	mov    -0x20(%rbp),%rdx
   11c38:	48 8b 4d e8          	mov    -0x18(%rbp),%rcx
   11c3c:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   11c40:	48 89 ce             	mov    %rcx,%rsi
   11c43:	48 89 c7             	mov    %rax,%rdi
   11c46:	e8 e3 fe ff ff       	callq  11b2e <prvReloadTimer>
   11c4b:	eb 14                	jmp    11c61 <prvProcessExpiredTimer+0x76>
   11c4d:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   11c51:	0f b6 40 50          	movzbl 0x50(%rax),%eax
   11c55:	83 e0 fe             	and    $0xfffffffe,%eax
   11c58:	89 c2                	mov    %eax,%edx
   11c5a:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   11c5e:	88 50 50             	mov    %dl,0x50(%rax)
   11c61:	e8 f6 19 01 00       	callq  2365c <prvTraceGetCurrentTaskHandle>
   11c66:	48 89 c7             	mov    %rax,%rdi
   11c69:	e8 ed 14 01 00       	callq  2315b <prvTraceGetTaskNumberHigh16>
   11c6e:	0f b7 15 67 f4 01 00 	movzwl 0x1f467(%rip),%edx        # 310dc <CurrentFilterMask>
   11c75:	21 d0                	and    %edx,%eax
   11c77:	66 85 c0             	test   %ax,%ax
   11c7a:	74 3a                	je     11cb6 <prvProcessExpiredTimer+0xcb>
   11c7c:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   11c80:	48 89 c7             	mov    %rax,%rdi
   11c83:	e8 5c 16 01 00       	callq  232e4 <prvTraceGetTimerNumberHigh16>
   11c88:	0f b7 15 4d f4 01 00 	movzwl 0x1f44d(%rip),%edx        # 310dc <CurrentFilterMask>
   11c8f:	21 d0                	and    %edx,%eax
   11c91:	66 85 c0             	test   %ax,%ax
   11c94:	74 20                	je     11cb6 <prvProcessExpiredTimer+0xcb>
   11c96:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   11c9a:	48 89 c7             	mov    %rax,%rdi
   11c9d:	e8 24 16 01 00       	callq  232c6 <prvTraceGetTimerNumberLow16>
   11ca2:	0f b6 c0             	movzbl %al,%eax
   11ca5:	89 c2                	mov    %eax,%edx
   11ca7:	be 05 00 00 00       	mov    $0x5,%esi
   11cac:	bf db 00 00 00       	mov    $0xdb,%edi
   11cb1:	e8 9c 33 01 00       	callq  25052 <prvTraceStoreKernelCall>
   11cb6:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   11cba:	48 8b 50 40          	mov    0x40(%rax),%rdx
   11cbe:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   11cc2:	48 89 c7             	mov    %rax,%rdi
   11cc5:	ff d2                	callq  *%rdx
   11cc7:	90                   	nop
   11cc8:	c9                   	leaveq 
   11cc9:	c3                   	retq   

0000000000011cca <prvTimerTask>:
   11cca:	f3 0f 1e fa          	endbr64 
   11cce:	55                   	push   %rbp
   11ccf:	48 89 e5             	mov    %rsp,%rbp
   11cd2:	48 83 ec 30          	sub    $0x30,%rsp
   11cd6:	48 89 7d d8          	mov    %rdi,-0x28(%rbp)
   11cda:	64 48 8b 04 25 28 00 	mov    %fs:0x28,%rax
   11ce1:	00 00 
   11ce3:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
   11ce7:	31 c0                	xor    %eax,%eax
   11ce9:	e8 13 20 ff ff       	callq  3d01 <vApplicationDaemonTaskStartupHook>
   11cee:	48 8d 45 e8          	lea    -0x18(%rbp),%rax
   11cf2:	48 89 c7             	mov    %rax,%rdi
   11cf5:	e8 02 01 00 00       	callq  11dfc <prvGetNextExpireTime>
   11cfa:	48 89 45 f0          	mov    %rax,-0x10(%rbp)
   11cfe:	48 8b 55 e8          	mov    -0x18(%rbp),%rdx
   11d02:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
   11d06:	48 89 d6             	mov    %rdx,%rsi
   11d09:	48 89 c7             	mov    %rax,%rdi
   11d0c:	e8 07 00 00 00       	callq  11d18 <prvProcessTimerOrBlockTask>
   11d11:	e8 58 02 00 00       	callq  11f6e <prvProcessReceivedCommands>
   11d16:	eb d6                	jmp    11cee <prvTimerTask+0x24>

0000000000011d18 <prvProcessTimerOrBlockTask>:
   11d18:	f3 0f 1e fa          	endbr64 
   11d1c:	55                   	push   %rbp
   11d1d:	48 89 e5             	mov    %rsp,%rbp
   11d20:	48 83 ec 30          	sub    $0x30,%rsp
   11d24:	48 89 7d d8          	mov    %rdi,-0x28(%rbp)
   11d28:	48 89 75 d0          	mov    %rsi,-0x30(%rbp)
   11d2c:	64 48 8b 04 25 28 00 	mov    %fs:0x28,%rax
   11d33:	00 00 
   11d35:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
   11d39:	31 c0                	xor    %eax,%eax
   11d3b:	e8 01 b8 ff ff       	callq  d541 <vTaskSuspendAll>
   11d40:	48 8d 45 e8          	lea    -0x18(%rbp),%rax
   11d44:	48 89 c7             	mov    %rax,%rdi
   11d47:	e8 0c 01 00 00       	callq  11e58 <prvSampleTimeNow>
   11d4c:	48 89 45 f0          	mov    %rax,-0x10(%rbp)
   11d50:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
   11d54:	48 85 c0             	test   %rax,%rax
   11d57:	0f 85 83 00 00 00    	jne    11de0 <prvProcessTimerOrBlockTask+0xc8>
   11d5d:	48 83 7d d0 00       	cmpq   $0x0,-0x30(%rbp)
   11d62:	75 24                	jne    11d88 <prvProcessTimerOrBlockTask+0x70>
   11d64:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
   11d68:	48 3b 45 f0          	cmp    -0x10(%rbp),%rax
   11d6c:	77 1a                	ja     11d88 <prvProcessTimerOrBlockTask+0x70>
   11d6e:	e8 eb b7 ff ff       	callq  d55e <xTaskResumeAll>
   11d73:	48 8b 55 f0          	mov    -0x10(%rbp),%rdx
   11d77:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
   11d7b:	48 89 d6             	mov    %rdx,%rsi
   11d7e:	48 89 c7             	mov    %rax,%rdi
   11d81:	e8 65 fe ff ff       	callq  11beb <prvProcessExpiredTimer>
   11d86:	eb 5d                	jmp    11de5 <prvProcessTimerOrBlockTask+0xcd>
   11d88:	48 83 7d d0 00       	cmpq   $0x0,-0x30(%rbp)
   11d8d:	74 1f                	je     11dae <prvProcessTimerOrBlockTask+0x96>
   11d8f:	48 8b 05 3a fb 01 00 	mov    0x1fb3a(%rip),%rax        # 318d0 <pxOverflowTimerList>
   11d96:	48 8b 00             	mov    (%rax),%rax
   11d99:	48 85 c0             	test   %rax,%rax
   11d9c:	75 07                	jne    11da5 <prvProcessTimerOrBlockTask+0x8d>
   11d9e:	b8 01 00 00 00       	mov    $0x1,%eax
   11da3:	eb 05                	jmp    11daa <prvProcessTimerOrBlockTask+0x92>
   11da5:	b8 00 00 00 00       	mov    $0x0,%eax
   11daa:	48 89 45 d0          	mov    %rax,-0x30(%rbp)
   11dae:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
   11db2:	48 2b 45 f0          	sub    -0x10(%rbp),%rax
   11db6:	48 89 c1             	mov    %rax,%rcx
   11db9:	48 8b 05 18 fb 01 00 	mov    0x1fb18(%rip),%rax        # 318d8 <xTimerQueue>
   11dc0:	48 8b 55 d0          	mov    -0x30(%rbp),%rdx
   11dc4:	48 89 ce             	mov    %rcx,%rsi
   11dc7:	48 89 c7             	mov    %rax,%rdi
   11dca:	e8 2a 6a ff ff       	callq  87f9 <vQueueWaitForMessageRestricted>
   11dcf:	e8 8a b7 ff ff       	callq  d55e <xTaskResumeAll>
   11dd4:	48 85 c0             	test   %rax,%rax
   11dd7:	75 0c                	jne    11de5 <prvProcessTimerOrBlockTask+0xcd>
   11dd9:	e8 96 10 00 00       	callq  12e74 <vPortYield>
   11dde:	eb 05                	jmp    11de5 <prvProcessTimerOrBlockTask+0xcd>
   11de0:	e8 79 b7 ff ff       	callq  d55e <xTaskResumeAll>
   11de5:	90                   	nop
   11de6:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   11dea:	64 48 33 04 25 28 00 	xor    %fs:0x28,%rax
   11df1:	00 00 
   11df3:	74 05                	je     11dfa <prvProcessTimerOrBlockTask+0xe2>
   11df5:	e8 d6 06 ff ff       	callq  24d0 <__stack_chk_fail@plt>
   11dfa:	c9                   	leaveq 
   11dfb:	c3                   	retq   

0000000000011dfc <prvGetNextExpireTime>:
   11dfc:	f3 0f 1e fa          	endbr64 
   11e00:	55                   	push   %rbp
   11e01:	48 89 e5             	mov    %rsp,%rbp
   11e04:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
   11e08:	48 8b 05 b9 fa 01 00 	mov    0x1fab9(%rip),%rax        # 318c8 <pxCurrentTimerList>
   11e0f:	48 8b 00             	mov    (%rax),%rax
   11e12:	48 85 c0             	test   %rax,%rax
   11e15:	75 07                	jne    11e1e <prvGetNextExpireTime+0x22>
   11e17:	ba 01 00 00 00       	mov    $0x1,%edx
   11e1c:	eb 05                	jmp    11e23 <prvGetNextExpireTime+0x27>
   11e1e:	ba 00 00 00 00       	mov    $0x0,%edx
   11e23:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
   11e27:	48 89 10             	mov    %rdx,(%rax)
   11e2a:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
   11e2e:	48 8b 00             	mov    (%rax),%rax
   11e31:	48 85 c0             	test   %rax,%rax
   11e34:	75 14                	jne    11e4a <prvGetNextExpireTime+0x4e>
   11e36:	48 8b 05 8b fa 01 00 	mov    0x1fa8b(%rip),%rax        # 318c8 <pxCurrentTimerList>
   11e3d:	48 8b 40 18          	mov    0x18(%rax),%rax
   11e41:	48 8b 00             	mov    (%rax),%rax
   11e44:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
   11e48:	eb 08                	jmp    11e52 <prvGetNextExpireTime+0x56>
   11e4a:	48 c7 45 f8 00 00 00 	movq   $0x0,-0x8(%rbp)
   11e51:	00 
   11e52:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   11e56:	5d                   	pop    %rbp
   11e57:	c3                   	retq   

0000000000011e58 <prvSampleTimeNow>:
   11e58:	f3 0f 1e fa          	endbr64 
   11e5c:	55                   	push   %rbp
   11e5d:	48 89 e5             	mov    %rsp,%rbp
   11e60:	48 83 ec 20          	sub    $0x20,%rsp
   11e64:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
   11e68:	e8 2b ba ff ff       	callq  d898 <xTaskGetTickCount>
   11e6d:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
   11e71:	48 8b 05 70 fa 01 00 	mov    0x1fa70(%rip),%rax        # 318e8 <xLastTime.3654>
   11e78:	48 39 45 f8          	cmp    %rax,-0x8(%rbp)
   11e7c:	73 12                	jae    11e90 <prvSampleTimeNow+0x38>
   11e7e:	e8 ac 03 00 00       	callq  1222f <prvSwitchTimerLists>
   11e83:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
   11e87:	48 c7 00 01 00 00 00 	movq   $0x1,(%rax)
   11e8e:	eb 0b                	jmp    11e9b <prvSampleTimeNow+0x43>
   11e90:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
   11e94:	48 c7 00 00 00 00 00 	movq   $0x0,(%rax)
   11e9b:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   11e9f:	48 89 05 42 fa 01 00 	mov    %rax,0x1fa42(%rip)        # 318e8 <xLastTime.3654>
   11ea6:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   11eaa:	c9                   	leaveq 
   11eab:	c3                   	retq   

0000000000011eac <prvInsertTimerInActiveList>:
   11eac:	f3 0f 1e fa          	endbr64 
   11eb0:	55                   	push   %rbp
   11eb1:	48 89 e5             	mov    %rsp,%rbp
   11eb4:	48 83 ec 30          	sub    $0x30,%rsp
   11eb8:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
   11ebc:	48 89 75 e0          	mov    %rsi,-0x20(%rbp)
   11ec0:	48 89 55 d8          	mov    %rdx,-0x28(%rbp)
   11ec4:	48 89 4d d0          	mov    %rcx,-0x30(%rbp)
   11ec8:	48 c7 45 f8 00 00 00 	movq   $0x0,-0x8(%rbp)
   11ecf:	00 
   11ed0:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
   11ed4:	48 8b 55 e0          	mov    -0x20(%rbp),%rdx
   11ed8:	48 89 50 08          	mov    %rdx,0x8(%rax)
   11edc:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
   11ee0:	48 8b 55 e8          	mov    -0x18(%rbp),%rdx
   11ee4:	48 89 50 20          	mov    %rdx,0x20(%rax)
   11ee8:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
   11eec:	48 3b 45 d8          	cmp    -0x28(%rbp),%rax
   11ef0:	77 3e                	ja     11f30 <prvInsertTimerInActiveList+0x84>
   11ef2:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
   11ef6:	48 2b 45 d0          	sub    -0x30(%rbp),%rax
   11efa:	48 89 c2             	mov    %rax,%rdx
   11efd:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
   11f01:	48 8b 40 30          	mov    0x30(%rax),%rax
   11f05:	48 39 c2             	cmp    %rax,%rdx
   11f08:	72 0a                	jb     11f14 <prvInsertTimerInActiveList+0x68>
   11f0a:	48 c7 45 f8 01 00 00 	movq   $0x1,-0x8(%rbp)
   11f11:	00 
   11f12:	eb 54                	jmp    11f68 <prvInsertTimerInActiveList+0xbc>
   11f14:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
   11f18:	48 8d 50 08          	lea    0x8(%rax),%rdx
   11f1c:	48 8b 05 ad f9 01 00 	mov    0x1f9ad(%rip),%rax        # 318d0 <pxOverflowTimerList>
   11f23:	48 89 d6             	mov    %rdx,%rsi
   11f26:	48 89 c7             	mov    %rax,%rdi
   11f29:	e8 fb 6d ff ff       	callq  8d29 <vListInsert>
   11f2e:	eb 38                	jmp    11f68 <prvInsertTimerInActiveList+0xbc>
   11f30:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
   11f34:	48 3b 45 d0          	cmp    -0x30(%rbp),%rax
   11f38:	73 14                	jae    11f4e <prvInsertTimerInActiveList+0xa2>
   11f3a:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
   11f3e:	48 3b 45 d0          	cmp    -0x30(%rbp),%rax
   11f42:	72 0a                	jb     11f4e <prvInsertTimerInActiveList+0xa2>
   11f44:	48 c7 45 f8 01 00 00 	movq   $0x1,-0x8(%rbp)
   11f4b:	00 
   11f4c:	eb 1a                	jmp    11f68 <prvInsertTimerInActiveList+0xbc>
   11f4e:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
   11f52:	48 8d 50 08          	lea    0x8(%rax),%rdx
   11f56:	48 8b 05 6b f9 01 00 	mov    0x1f96b(%rip),%rax        # 318c8 <pxCurrentTimerList>
   11f5d:	48 89 d6             	mov    %rdx,%rsi
   11f60:	48 89 c7             	mov    %rax,%rdi
   11f63:	e8 c1 6d ff ff       	callq  8d29 <vListInsert>
   11f68:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   11f6c:	c9                   	leaveq 
   11f6d:	c3                   	retq   

0000000000011f6e <prvProcessReceivedCommands>:
   11f6e:	f3 0f 1e fa          	endbr64 
   11f72:	55                   	push   %rbp
   11f73:	48 89 e5             	mov    %rsp,%rbp
   11f76:	48 83 ec 50          	sub    $0x50,%rsp
   11f7a:	64 48 8b 04 25 28 00 	mov    %fs:0x28,%rax
   11f81:	00 00 
   11f83:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
   11f87:	31 c0                	xor    %eax,%eax
   11f89:	e9 66 02 00 00       	jmpq   121f4 <prvProcessReceivedCommands+0x286>
   11f8e:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
   11f92:	48 85 c0             	test   %rax,%rax
   11f95:	79 41                	jns    11fd8 <prvProcessReceivedCommands+0x6a>
   11f97:	48 8d 45 d0          	lea    -0x30(%rbp),%rax
   11f9b:	48 83 c0 08          	add    $0x8,%rax
   11f9f:	48 89 45 b8          	mov    %rax,-0x48(%rbp)
   11fa3:	48 83 7d b8 00       	cmpq   $0x0,-0x48(%rbp)
   11fa8:	75 11                	jne    11fbb <prvProcessReceivedCommands+0x4d>
   11faa:	be 06 03 00 00       	mov    $0x306,%esi
   11faf:	48 8d 3d 9a 59 01 00 	lea    0x1599a(%rip),%rdi        # 27950 <_IO_stdin_used+0x950>
   11fb6:	e8 51 1d ff ff       	callq  3d0c <vAssertCalled>
   11fbb:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
   11fbf:	48 8b 08             	mov    (%rax),%rcx
   11fc2:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
   11fc6:	8b 50 10             	mov    0x10(%rax),%edx
   11fc9:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
   11fcd:	48 8b 40 08          	mov    0x8(%rax),%rax
   11fd1:	89 d6                	mov    %edx,%esi
   11fd3:	48 89 c7             	mov    %rax,%rdi
   11fd6:	ff d1                	callq  *%rcx
   11fd8:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
   11fdc:	48 85 c0             	test   %rax,%rax
   11fdf:	0f 88 0e 02 00 00    	js     121f3 <prvProcessReceivedCommands+0x285>
   11fe5:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
   11fe9:	48 89 45 c0          	mov    %rax,-0x40(%rbp)
   11fed:	48 8b 45 c0          	mov    -0x40(%rbp),%rax
   11ff1:	48 8b 40 28          	mov    0x28(%rax),%rax
   11ff5:	48 85 c0             	test   %rax,%rax
   11ff8:	74 10                	je     1200a <prvProcessReceivedCommands+0x9c>
   11ffa:	48 8b 45 c0          	mov    -0x40(%rbp),%rax
   11ffe:	48 83 c0 08          	add    $0x8,%rax
   12002:	48 89 c7             	mov    %rax,%rdi
   12005:	e8 d3 6d ff ff       	callq  8ddd <uxListRemove>
   1200a:	48 8d 45 b0          	lea    -0x50(%rbp),%rax
   1200e:	48 89 c7             	mov    %rax,%rdi
   12011:	e8 42 fe ff ff       	callq  11e58 <prvSampleTimeNow>
   12016:	48 89 45 c8          	mov    %rax,-0x38(%rbp)
   1201a:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
   1201e:	48 83 f8 09          	cmp    $0x9,%rax
   12022:	0f 87 cc 01 00 00    	ja     121f4 <prvProcessReceivedCommands+0x286>
   12028:	48 8d 14 85 00 00 00 	lea    0x0(,%rax,4),%rdx
   1202f:	00 
   12030:	48 8d 05 51 59 01 00 	lea    0x15951(%rip),%rax        # 27988 <_IO_stdin_used+0x988>
   12037:	8b 04 02             	mov    (%rdx,%rax,1),%eax
   1203a:	48 98                	cltq   
   1203c:	48 8d 15 45 59 01 00 	lea    0x15945(%rip),%rdx        # 27988 <_IO_stdin_used+0x988>
   12043:	48 01 d0             	add    %rdx,%rax
   12046:	3e ff e0             	notrack jmpq *%rax
   12049:	48 8b 45 c0          	mov    -0x40(%rbp),%rax
   1204d:	0f b6 40 50          	movzbl 0x50(%rax),%eax
   12051:	83 c8 01             	or     $0x1,%eax
   12054:	89 c2                	mov    %eax,%edx
   12056:	48 8b 45 c0          	mov    -0x40(%rbp),%rax
   1205a:	88 50 50             	mov    %dl,0x50(%rax)
   1205d:	48 8b 4d d8          	mov    -0x28(%rbp),%rcx
   12061:	48 8b 55 d8          	mov    -0x28(%rbp),%rdx
   12065:	48 8b 45 c0          	mov    -0x40(%rbp),%rax
   12069:	48 8b 40 30          	mov    0x30(%rax),%rax
   1206d:	48 8d 34 02          	lea    (%rdx,%rax,1),%rsi
   12071:	48 8b 55 c8          	mov    -0x38(%rbp),%rdx
   12075:	48 8b 45 c0          	mov    -0x40(%rbp),%rax
   12079:	48 89 c7             	mov    %rax,%rdi
   1207c:	e8 2b fe ff ff       	callq  11eac <prvInsertTimerInActiveList>
   12081:	48 85 c0             	test   %rax,%rax
   12084:	0f 84 6a 01 00 00    	je     121f4 <prvProcessReceivedCommands+0x286>
   1208a:	48 8b 45 c0          	mov    -0x40(%rbp),%rax
   1208e:	0f b6 40 50          	movzbl 0x50(%rax),%eax
   12092:	0f b6 c0             	movzbl %al,%eax
   12095:	83 e0 04             	and    $0x4,%eax
   12098:	85 c0                	test   %eax,%eax
   1209a:	74 25                	je     120c1 <prvProcessReceivedCommands+0x153>
   1209c:	48 8b 55 d8          	mov    -0x28(%rbp),%rdx
   120a0:	48 8b 45 c0          	mov    -0x40(%rbp),%rax
   120a4:	48 8b 40 30          	mov    0x30(%rax),%rax
   120a8:	48 8d 0c 02          	lea    (%rdx,%rax,1),%rcx
   120ac:	48 8b 55 c8          	mov    -0x38(%rbp),%rdx
   120b0:	48 8b 45 c0          	mov    -0x40(%rbp),%rax
   120b4:	48 89 ce             	mov    %rcx,%rsi
   120b7:	48 89 c7             	mov    %rax,%rdi
   120ba:	e8 6f fa ff ff       	callq  11b2e <prvReloadTimer>
   120bf:	eb 14                	jmp    120d5 <prvProcessReceivedCommands+0x167>
   120c1:	48 8b 45 c0          	mov    -0x40(%rbp),%rax
   120c5:	0f b6 40 50          	movzbl 0x50(%rax),%eax
   120c9:	83 e0 fe             	and    $0xfffffffe,%eax
   120cc:	89 c2                	mov    %eax,%edx
   120ce:	48 8b 45 c0          	mov    -0x40(%rbp),%rax
   120d2:	88 50 50             	mov    %dl,0x50(%rax)
   120d5:	e8 82 15 01 00       	callq  2365c <prvTraceGetCurrentTaskHandle>
   120da:	48 89 c7             	mov    %rax,%rdi
   120dd:	e8 79 10 01 00       	callq  2315b <prvTraceGetTaskNumberHigh16>
   120e2:	0f b7 15 f3 ef 01 00 	movzwl 0x1eff3(%rip),%edx        # 310dc <CurrentFilterMask>
   120e9:	21 d0                	and    %edx,%eax
   120eb:	66 85 c0             	test   %ax,%ax
   120ee:	74 3a                	je     1212a <prvProcessReceivedCommands+0x1bc>
   120f0:	48 8b 45 c0          	mov    -0x40(%rbp),%rax
   120f4:	48 89 c7             	mov    %rax,%rdi
   120f7:	e8 e8 11 01 00       	callq  232e4 <prvTraceGetTimerNumberHigh16>
   120fc:	0f b7 15 d9 ef 01 00 	movzwl 0x1efd9(%rip),%edx        # 310dc <CurrentFilterMask>
   12103:	21 d0                	and    %edx,%eax
   12105:	66 85 c0             	test   %ax,%ax
   12108:	74 20                	je     1212a <prvProcessReceivedCommands+0x1bc>
   1210a:	48 8b 45 c0          	mov    -0x40(%rbp),%rax
   1210e:	48 89 c7             	mov    %rax,%rdi
   12111:	e8 b0 11 01 00       	callq  232c6 <prvTraceGetTimerNumberLow16>
   12116:	0f b6 c0             	movzbl %al,%eax
   12119:	89 c2                	mov    %eax,%edx
   1211b:	be 05 00 00 00       	mov    $0x5,%esi
   12120:	bf db 00 00 00       	mov    $0xdb,%edi
   12125:	e8 28 2f 01 00       	callq  25052 <prvTraceStoreKernelCall>
   1212a:	48 8b 45 c0          	mov    -0x40(%rbp),%rax
   1212e:	48 8b 50 40          	mov    0x40(%rax),%rdx
   12132:	48 8b 45 c0          	mov    -0x40(%rbp),%rax
   12136:	48 89 c7             	mov    %rax,%rdi
   12139:	ff d2                	callq  *%rdx
   1213b:	e9 b4 00 00 00       	jmpq   121f4 <prvProcessReceivedCommands+0x286>
   12140:	48 8b 45 c0          	mov    -0x40(%rbp),%rax
   12144:	0f b6 40 50          	movzbl 0x50(%rax),%eax
   12148:	83 e0 fe             	and    $0xfffffffe,%eax
   1214b:	89 c2                	mov    %eax,%edx
   1214d:	48 8b 45 c0          	mov    -0x40(%rbp),%rax
   12151:	88 50 50             	mov    %dl,0x50(%rax)
   12154:	e9 9b 00 00 00       	jmpq   121f4 <prvProcessReceivedCommands+0x286>
   12159:	48 8b 45 c0          	mov    -0x40(%rbp),%rax
   1215d:	0f b6 40 50          	movzbl 0x50(%rax),%eax
   12161:	83 c8 01             	or     $0x1,%eax
   12164:	89 c2                	mov    %eax,%edx
   12166:	48 8b 45 c0          	mov    -0x40(%rbp),%rax
   1216a:	88 50 50             	mov    %dl,0x50(%rax)
   1216d:	48 8b 55 d8          	mov    -0x28(%rbp),%rdx
   12171:	48 8b 45 c0          	mov    -0x40(%rbp),%rax
   12175:	48 89 50 30          	mov    %rdx,0x30(%rax)
   12179:	48 8b 45 c0          	mov    -0x40(%rbp),%rax
   1217d:	48 8b 40 30          	mov    0x30(%rax),%rax
   12181:	48 85 c0             	test   %rax,%rax
   12184:	75 11                	jne    12197 <prvProcessReceivedCommands+0x229>
   12186:	be 59 03 00 00       	mov    $0x359,%esi
   1218b:	48 8d 3d be 57 01 00 	lea    0x157be(%rip),%rdi        # 27950 <_IO_stdin_used+0x950>
   12192:	e8 75 1b ff ff       	callq  3d0c <vAssertCalled>
   12197:	48 8b 45 c0          	mov    -0x40(%rbp),%rax
   1219b:	48 8b 50 30          	mov    0x30(%rax),%rdx
   1219f:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
   121a3:	48 8d 34 02          	lea    (%rdx,%rax,1),%rsi
   121a7:	48 8b 4d c8          	mov    -0x38(%rbp),%rcx
   121ab:	48 8b 55 c8          	mov    -0x38(%rbp),%rdx
   121af:	48 8b 45 c0          	mov    -0x40(%rbp),%rax
   121b3:	48 89 c7             	mov    %rax,%rdi
   121b6:	e8 f1 fc ff ff       	callq  11eac <prvInsertTimerInActiveList>
   121bb:	eb 37                	jmp    121f4 <prvProcessReceivedCommands+0x286>
   121bd:	48 8b 45 c0          	mov    -0x40(%rbp),%rax
   121c1:	0f b6 40 50          	movzbl 0x50(%rax),%eax
   121c5:	0f b6 c0             	movzbl %al,%eax
   121c8:	83 e0 02             	and    $0x2,%eax
   121cb:	85 c0                	test   %eax,%eax
   121cd:	75 0e                	jne    121dd <prvProcessReceivedCommands+0x26f>
   121cf:	48 8b 45 c0          	mov    -0x40(%rbp),%rax
   121d3:	48 89 c7             	mov    %rax,%rdi
   121d6:	e8 c5 05 00 00       	callq  127a0 <vPortFree>
   121db:	eb 17                	jmp    121f4 <prvProcessReceivedCommands+0x286>
   121dd:	48 8b 45 c0          	mov    -0x40(%rbp),%rax
   121e1:	0f b6 40 50          	movzbl 0x50(%rax),%eax
   121e5:	83 e0 fe             	and    $0xfffffffe,%eax
   121e8:	89 c2                	mov    %eax,%edx
   121ea:	48 8b 45 c0          	mov    -0x40(%rbp),%rax
   121ee:	88 50 50             	mov    %dl,0x50(%rax)
   121f1:	eb 01                	jmp    121f4 <prvProcessReceivedCommands+0x286>
   121f3:	90                   	nop
   121f4:	48 8b 05 dd f6 01 00 	mov    0x1f6dd(%rip),%rax        # 318d8 <xTimerQueue>
   121fb:	48 8d 4d d0          	lea    -0x30(%rbp),%rcx
   121ff:	ba 00 00 00 00       	mov    $0x0,%edx
   12204:	48 89 ce             	mov    %rcx,%rsi
   12207:	48 89 c7             	mov    %rax,%rdi
   1220a:	e8 d4 47 ff ff       	callq  69e3 <xQueueReceive>
   1220f:	48 85 c0             	test   %rax,%rax
   12212:	0f 85 76 fd ff ff    	jne    11f8e <prvProcessReceivedCommands+0x20>
   12218:	90                   	nop
   12219:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   1221d:	64 48 33 04 25 28 00 	xor    %fs:0x28,%rax
   12224:	00 00 
   12226:	74 05                	je     1222d <prvProcessReceivedCommands+0x2bf>
   12228:	e8 a3 02 ff ff       	callq  24d0 <__stack_chk_fail@plt>
   1222d:	c9                   	leaveq 
   1222e:	c3                   	retq   

000000000001222f <prvSwitchTimerLists>:
   1222f:	f3 0f 1e fa          	endbr64 
   12233:	55                   	push   %rbp
   12234:	48 89 e5             	mov    %rsp,%rbp
   12237:	48 83 ec 10          	sub    $0x10,%rsp
   1223b:	eb 25                	jmp    12262 <prvSwitchTimerLists+0x33>
   1223d:	48 8b 05 84 f6 01 00 	mov    0x1f684(%rip),%rax        # 318c8 <pxCurrentTimerList>
   12244:	48 8b 40 18          	mov    0x18(%rax),%rax
   12248:	48 8b 00             	mov    (%rax),%rax
   1224b:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
   1224f:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   12253:	48 c7 c6 ff ff ff ff 	mov    $0xffffffffffffffff,%rsi
   1225a:	48 89 c7             	mov    %rax,%rdi
   1225d:	e8 89 f9 ff ff       	callq  11beb <prvProcessExpiredTimer>
   12262:	48 8b 05 5f f6 01 00 	mov    0x1f65f(%rip),%rax        # 318c8 <pxCurrentTimerList>
   12269:	48 8b 00             	mov    (%rax),%rax
   1226c:	48 85 c0             	test   %rax,%rax
   1226f:	75 cc                	jne    1223d <prvSwitchTimerLists+0xe>
   12271:	48 8b 05 50 f6 01 00 	mov    0x1f650(%rip),%rax        # 318c8 <pxCurrentTimerList>
   12278:	48 89 45 f0          	mov    %rax,-0x10(%rbp)
   1227c:	48 8b 05 4d f6 01 00 	mov    0x1f64d(%rip),%rax        # 318d0 <pxOverflowTimerList>
   12283:	48 89 05 3e f6 01 00 	mov    %rax,0x1f63e(%rip)        # 318c8 <pxCurrentTimerList>
   1228a:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
   1228e:	48 89 05 3b f6 01 00 	mov    %rax,0x1f63b(%rip)        # 318d0 <pxOverflowTimerList>
   12295:	90                   	nop
   12296:	c9                   	leaveq 
   12297:	c3                   	retq   

0000000000012298 <prvCheckForValidListAndQueue>:
   12298:	f3 0f 1e fa          	endbr64 
   1229c:	55                   	push   %rbp
   1229d:	48 89 e5             	mov    %rsp,%rbp
   122a0:	e8 2a 0b 00 00       	callq  12dcf <vPortEnterCritical>
   122a5:	48 8b 05 2c f6 01 00 	mov    0x1f62c(%rip),%rax        # 318d8 <xTimerQueue>
   122ac:	48 85 c0             	test   %rax,%rax
   122af:	0f 85 80 00 00 00    	jne    12335 <prvCheckForValidListAndQueue+0x9d>
   122b5:	48 8d 3d a4 f5 01 00 	lea    0x1f5a4(%rip),%rdi        # 31860 <xActiveTimerList1>
   122bc:	e8 82 69 ff ff       	callq  8c43 <vListInitialise>
   122c1:	48 8d 3d d8 f5 01 00 	lea    0x1f5d8(%rip),%rdi        # 318a0 <xActiveTimerList2>
   122c8:	e8 76 69 ff ff       	callq  8c43 <vListInitialise>
   122cd:	48 8d 05 8c f5 01 00 	lea    0x1f58c(%rip),%rax        # 31860 <xActiveTimerList1>
   122d4:	48 89 05 ed f5 01 00 	mov    %rax,0x1f5ed(%rip)        # 318c8 <pxCurrentTimerList>
   122db:	48 8d 05 be f5 01 00 	lea    0x1f5be(%rip),%rax        # 318a0 <xActiveTimerList2>
   122e2:	48 89 05 e7 f5 01 00 	mov    %rax,0x1f5e7(%rip)        # 318d0 <pxOverflowTimerList>
   122e9:	41 b8 00 00 00 00    	mov    $0x0,%r8d
   122ef:	48 8d 0d 8a f8 01 00 	lea    0x1f88a(%rip),%rcx        # 31b80 <xStaticTimerQueue.3695>
   122f6:	48 8d 15 03 f6 01 00 	lea    0x1f603(%rip),%rdx        # 31900 <ucStaticTimerQueueStorage.3696>
   122fd:	be 20 00 00 00       	mov    $0x20,%esi
   12302:	bf 14 00 00 00       	mov    $0x14,%edi
   12307:	e8 fc 31 ff ff       	callq  5508 <xQueueGenericCreateStatic>
   1230c:	48 89 05 c5 f5 01 00 	mov    %rax,0x1f5c5(%rip)        # 318d8 <xTimerQueue>
   12313:	48 8b 05 be f5 01 00 	mov    0x1f5be(%rip),%rax        # 318d8 <xTimerQueue>
   1231a:	48 85 c0             	test   %rax,%rax
   1231d:	74 16                	je     12335 <prvCheckForValidListAndQueue+0x9d>
   1231f:	48 8b 05 b2 f5 01 00 	mov    0x1f5b2(%rip),%rax        # 318d8 <xTimerQueue>
   12326:	48 8d 35 83 56 01 00 	lea    0x15683(%rip),%rsi        # 279b0 <_IO_stdin_used+0x9b0>
   1232d:	48 89 c7             	mov    %rax,%rdi
   12330:	e8 83 62 ff ff       	callq  85b8 <vQueueAddToRegistry>
   12335:	e8 c3 0a 00 00       	callq  12dfd <vPortExitCritical>
   1233a:	90                   	nop
   1233b:	5d                   	pop    %rbp
   1233c:	c3                   	retq   

000000000001233d <xTimerIsTimerActive>:
   1233d:	f3 0f 1e fa          	endbr64 
   12341:	55                   	push   %rbp
   12342:	48 89 e5             	mov    %rsp,%rbp
   12345:	48 83 ec 20          	sub    $0x20,%rsp
   12349:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
   1234d:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
   12351:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
   12355:	48 83 7d e8 00       	cmpq   $0x0,-0x18(%rbp)
   1235a:	75 11                	jne    1236d <xTimerIsTimerActive+0x30>
   1235c:	be d8 03 00 00       	mov    $0x3d8,%esi
   12361:	48 8d 3d e8 55 01 00 	lea    0x155e8(%rip),%rdi        # 27950 <_IO_stdin_used+0x950>
   12368:	e8 9f 19 ff ff       	callq  3d0c <vAssertCalled>
   1236d:	e8 5d 0a 00 00       	callq  12dcf <vPortEnterCritical>
   12372:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   12376:	0f b6 40 50          	movzbl 0x50(%rax),%eax
   1237a:	0f b6 c0             	movzbl %al,%eax
   1237d:	83 e0 01             	and    $0x1,%eax
   12380:	85 c0                	test   %eax,%eax
   12382:	75 0a                	jne    1238e <xTimerIsTimerActive+0x51>
   12384:	48 c7 45 f0 00 00 00 	movq   $0x0,-0x10(%rbp)
   1238b:	00 
   1238c:	eb 08                	jmp    12396 <xTimerIsTimerActive+0x59>
   1238e:	48 c7 45 f0 01 00 00 	movq   $0x1,-0x10(%rbp)
   12395:	00 
   12396:	e8 62 0a 00 00       	callq  12dfd <vPortExitCritical>
   1239b:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
   1239f:	c9                   	leaveq 
   123a0:	c3                   	retq   

00000000000123a1 <pvTimerGetTimerID>:
   123a1:	f3 0f 1e fa          	endbr64 
   123a5:	55                   	push   %rbp
   123a6:	48 89 e5             	mov    %rsp,%rbp
   123a9:	48 83 ec 20          	sub    $0x20,%rsp
   123ad:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
   123b1:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
   123b5:	48 89 45 f0          	mov    %rax,-0x10(%rbp)
   123b9:	48 83 7d e8 00       	cmpq   $0x0,-0x18(%rbp)
   123be:	75 11                	jne    123d1 <pvTimerGetTimerID+0x30>
   123c0:	be f1 03 00 00       	mov    $0x3f1,%esi
   123c5:	48 8d 3d 84 55 01 00 	lea    0x15584(%rip),%rdi        # 27950 <_IO_stdin_used+0x950>
   123cc:	e8 3b 19 ff ff       	callq  3d0c <vAssertCalled>
   123d1:	e8 f9 09 00 00       	callq  12dcf <vPortEnterCritical>
   123d6:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
   123da:	48 8b 40 38          	mov    0x38(%rax),%rax
   123de:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
   123e2:	e8 16 0a 00 00       	callq  12dfd <vPortExitCritical>
   123e7:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   123eb:	c9                   	leaveq 
   123ec:	c3                   	retq   

00000000000123ed <vTimerSetTimerID>:
   123ed:	f3 0f 1e fa          	endbr64 
   123f1:	55                   	push   %rbp
   123f2:	48 89 e5             	mov    %rsp,%rbp
   123f5:	48 83 ec 20          	sub    $0x20,%rsp
   123f9:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
   123fd:	48 89 75 e0          	mov    %rsi,-0x20(%rbp)
   12401:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
   12405:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
   12409:	48 83 7d e8 00       	cmpq   $0x0,-0x18(%rbp)
   1240e:	75 11                	jne    12421 <vTimerSetTimerID+0x34>
   12410:	be 02 04 00 00       	mov    $0x402,%esi
   12415:	48 8d 3d 34 55 01 00 	lea    0x15534(%rip),%rdi        # 27950 <_IO_stdin_used+0x950>
   1241c:	e8 eb 18 ff ff       	callq  3d0c <vAssertCalled>
   12421:	e8 a9 09 00 00       	callq  12dcf <vPortEnterCritical>
   12426:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   1242a:	48 8b 55 e0          	mov    -0x20(%rbp),%rdx
   1242e:	48 89 50 38          	mov    %rdx,0x38(%rax)
   12432:	e8 c6 09 00 00       	callq  12dfd <vPortExitCritical>
   12437:	90                   	nop
   12438:	c9                   	leaveq 
   12439:	c3                   	retq   

000000000001243a <xTimerPendFunctionCallFromISR>:
   1243a:	f3 0f 1e fa          	endbr64 
   1243e:	55                   	push   %rbp
   1243f:	48 89 e5             	mov    %rsp,%rbp
   12442:	48 83 ec 60          	sub    $0x60,%rsp
   12446:	48 89 7d b8          	mov    %rdi,-0x48(%rbp)
   1244a:	48 89 75 b0          	mov    %rsi,-0x50(%rbp)
   1244e:	89 55 ac             	mov    %edx,-0x54(%rbp)
   12451:	48 89 4d a0          	mov    %rcx,-0x60(%rbp)
   12455:	64 48 8b 04 25 28 00 	mov    %fs:0x28,%rax
   1245c:	00 00 
   1245e:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
   12462:	31 c0                	xor    %eax,%eax
   12464:	48 c7 45 d0 fe ff ff 	movq   $0xfffffffffffffffe,-0x30(%rbp)
   1246b:	ff 
   1246c:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
   12470:	48 89 45 d8          	mov    %rax,-0x28(%rbp)
   12474:	48 8b 45 b0          	mov    -0x50(%rbp),%rax
   12478:	48 89 45 e0          	mov    %rax,-0x20(%rbp)
   1247c:	8b 45 ac             	mov    -0x54(%rbp),%eax
   1247f:	89 45 e8             	mov    %eax,-0x18(%rbp)
   12482:	48 8b 05 4f f4 01 00 	mov    0x1f44f(%rip),%rax        # 318d8 <xTimerQueue>
   12489:	48 8b 55 a0          	mov    -0x60(%rbp),%rdx
   1248d:	48 8d 75 d0          	lea    -0x30(%rbp),%rsi
   12491:	b9 00 00 00 00       	mov    $0x0,%ecx
   12496:	48 89 c7             	mov    %rax,%rdi
   12499:	e8 eb 3e ff ff       	callq  6389 <xQueueGenericSendFromISR>
   1249e:	48 89 45 c8          	mov    %rax,-0x38(%rbp)
   124a2:	8b 05 b8 4b 12 00    	mov    0x124bb8(%rip),%eax        # 137060 <uiInEventGroupSetBitsFromISR>
   124a8:	85 c0                	test   %eax,%eax
   124aa:	75 21                	jne    124cd <xTimerPendFunctionCallFromISR+0x93>
   124ac:	e8 c4 f4 ff ff       	callq  11975 <xTimerGetTimerDaemonTaskHandle>
   124b1:	48 89 c7             	mov    %rax,%rdi
   124b4:	e8 84 0c 01 00       	callq  2313d <prvTraceGetTaskNumberLow16>
   124b9:	0f b6 c0             	movzbl %al,%eax
   124bc:	89 c2                	mov    %eax,%edx
   124be:	be 03 00 00 00       	mov    $0x3,%esi
   124c3:	bf 91 00 00 00       	mov    $0x91,%edi
   124c8:	e8 85 2b 01 00       	callq  25052 <prvTraceStoreKernelCall>
   124cd:	c7 05 89 4b 12 00 00 	movl   $0x0,0x124b89(%rip)        # 137060 <uiInEventGroupSetBitsFromISR>
   124d4:	00 00 00 
   124d7:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
   124db:	48 8b 4d f8          	mov    -0x8(%rbp),%rcx
   124df:	64 48 33 0c 25 28 00 	xor    %fs:0x28,%rcx
   124e6:	00 00 
   124e8:	74 05                	je     124ef <xTimerPendFunctionCallFromISR+0xb5>
   124ea:	e8 e1 ff fe ff       	callq  24d0 <__stack_chk_fail@plt>
   124ef:	c9                   	leaveq 
   124f0:	c3                   	retq   

00000000000124f1 <xTimerPendFunctionCall>:
   124f1:	f3 0f 1e fa          	endbr64 
   124f5:	55                   	push   %rbp
   124f6:	48 89 e5             	mov    %rsp,%rbp
   124f9:	48 83 ec 60          	sub    $0x60,%rsp
   124fd:	48 89 7d b8          	mov    %rdi,-0x48(%rbp)
   12501:	48 89 75 b0          	mov    %rsi,-0x50(%rbp)
   12505:	89 55 ac             	mov    %edx,-0x54(%rbp)
   12508:	48 89 4d a0          	mov    %rcx,-0x60(%rbp)
   1250c:	64 48 8b 04 25 28 00 	mov    %fs:0x28,%rax
   12513:	00 00 
   12515:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
   12519:	31 c0                	xor    %eax,%eax
   1251b:	48 8b 05 b6 f3 01 00 	mov    0x1f3b6(%rip),%rax        # 318d8 <xTimerQueue>
   12522:	48 85 c0             	test   %rax,%rax
   12525:	75 11                	jne    12538 <xTimerPendFunctionCall+0x47>
   12527:	be 34 04 00 00       	mov    $0x434,%esi
   1252c:	48 8d 3d 1d 54 01 00 	lea    0x1541d(%rip),%rdi        # 27950 <_IO_stdin_used+0x950>
   12533:	e8 d4 17 ff ff       	callq  3d0c <vAssertCalled>
   12538:	48 c7 45 d0 ff ff ff 	movq   $0xffffffffffffffff,-0x30(%rbp)
   1253f:	ff 
   12540:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
   12544:	48 89 45 d8          	mov    %rax,-0x28(%rbp)
   12548:	48 8b 45 b0          	mov    -0x50(%rbp),%rax
   1254c:	48 89 45 e0          	mov    %rax,-0x20(%rbp)
   12550:	8b 45 ac             	mov    -0x54(%rbp),%eax
   12553:	89 45 e8             	mov    %eax,-0x18(%rbp)
   12556:	48 8b 05 7b f3 01 00 	mov    0x1f37b(%rip),%rax        # 318d8 <xTimerQueue>
   1255d:	48 8b 55 a0          	mov    -0x60(%rbp),%rdx
   12561:	48 8d 75 d0          	lea    -0x30(%rbp),%rsi
   12565:	b9 00 00 00 00       	mov    $0x0,%ecx
   1256a:	48 89 c7             	mov    %rax,%rdi
   1256d:	e8 25 38 ff ff       	callq  5d97 <xQueueGenericSend>
   12572:	48 89 45 c8          	mov    %rax,-0x38(%rbp)
   12576:	48 83 7d c8 01       	cmpq   $0x1,-0x38(%rbp)
   1257b:	75 5d                	jne    125da <xTimerPendFunctionCall+0xe9>
   1257d:	e8 da 10 01 00       	callq  2365c <prvTraceGetCurrentTaskHandle>
   12582:	48 89 c7             	mov    %rax,%rdi
   12585:	e8 d1 0b 01 00       	callq  2315b <prvTraceGetTaskNumberHigh16>
   1258a:	0f b7 15 4b eb 01 00 	movzwl 0x1eb4b(%rip),%edx        # 310dc <CurrentFilterMask>
   12591:	21 d0                	and    %edx,%eax
   12593:	66 85 c0             	test   %ax,%ax
   12596:	0f 84 95 00 00 00    	je     12631 <xTimerPendFunctionCall+0x140>
   1259c:	e8 d4 f3 ff ff       	callq  11975 <xTimerGetTimerDaemonTaskHandle>
   125a1:	48 89 c7             	mov    %rax,%rdi
   125a4:	e8 b2 0b 01 00       	callq  2315b <prvTraceGetTaskNumberHigh16>
   125a9:	0f b7 15 2c eb 01 00 	movzwl 0x1eb2c(%rip),%edx        # 310dc <CurrentFilterMask>
   125b0:	21 d0                	and    %edx,%eax
   125b2:	66 85 c0             	test   %ax,%ax
   125b5:	74 7a                	je     12631 <xTimerPendFunctionCall+0x140>
   125b7:	e8 b9 f3 ff ff       	callq  11975 <xTimerGetTimerDaemonTaskHandle>
   125bc:	48 89 c7             	mov    %rax,%rdi
   125bf:	e8 79 0b 01 00       	callq  2313d <prvTraceGetTaskNumberLow16>
   125c4:	0f b6 c0             	movzbl %al,%eax
   125c7:	89 c2                	mov    %eax,%edx
   125c9:	be 03 00 00 00       	mov    $0x3,%esi
   125ce:	bf 90 00 00 00       	mov    $0x90,%edi
   125d3:	e8 7a 2a 01 00       	callq  25052 <prvTraceStoreKernelCall>
   125d8:	eb 57                	jmp    12631 <xTimerPendFunctionCall+0x140>
   125da:	e8 7d 10 01 00       	callq  2365c <prvTraceGetCurrentTaskHandle>
   125df:	48 89 c7             	mov    %rax,%rdi
   125e2:	e8 74 0b 01 00       	callq  2315b <prvTraceGetTaskNumberHigh16>
   125e7:	0f b7 15 ee ea 01 00 	movzwl 0x1eaee(%rip),%edx        # 310dc <CurrentFilterMask>
   125ee:	21 d0                	and    %edx,%eax
   125f0:	66 85 c0             	test   %ax,%ax
   125f3:	74 3c                	je     12631 <xTimerPendFunctionCall+0x140>
   125f5:	e8 7b f3 ff ff       	callq  11975 <xTimerGetTimerDaemonTaskHandle>
   125fa:	48 89 c7             	mov    %rax,%rdi
   125fd:	e8 59 0b 01 00       	callq  2315b <prvTraceGetTaskNumberHigh16>
   12602:	0f b7 15 d3 ea 01 00 	movzwl 0x1ead3(%rip),%edx        # 310dc <CurrentFilterMask>
   12609:	21 d0                	and    %edx,%eax
   1260b:	66 85 c0             	test   %ax,%ax
   1260e:	74 21                	je     12631 <xTimerPendFunctionCall+0x140>
   12610:	e8 60 f3 ff ff       	callq  11975 <xTimerGetTimerDaemonTaskHandle>
   12615:	48 89 c7             	mov    %rax,%rdi
   12618:	e8 20 0b 01 00       	callq  2313d <prvTraceGetTaskNumberLow16>
   1261d:	0f b6 c0             	movzbl %al,%eax
   12620:	89 c2                	mov    %eax,%edx
   12622:	be 03 00 00 00       	mov    $0x3,%esi
   12627:	bf 92 00 00 00       	mov    $0x92,%edi
   1262c:	e8 21 2a 01 00       	callq  25052 <prvTraceStoreKernelCall>
   12631:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
   12635:	48 8b 4d f8          	mov    -0x8(%rbp),%rcx
   12639:	64 48 33 0c 25 28 00 	xor    %fs:0x28,%rcx
   12640:	00 00 
   12642:	74 05                	je     12649 <xTimerPendFunctionCall+0x158>
   12644:	e8 87 fe fe ff       	callq  24d0 <__stack_chk_fail@plt>
   12649:	c9                   	leaveq 
   1264a:	c3                   	retq   

000000000001264b <uxTimerGetTimerNumber>:
   1264b:	f3 0f 1e fa          	endbr64 
   1264f:	55                   	push   %rbp
   12650:	48 89 e5             	mov    %rsp,%rbp
   12653:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   12657:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   1265b:	48 8b 40 48          	mov    0x48(%rax),%rax
   1265f:	5d                   	pop    %rbp
   12660:	c3                   	retq   

0000000000012661 <vTimerSetTimerNumber>:
   12661:	f3 0f 1e fa          	endbr64 
   12665:	55                   	push   %rbp
   12666:	48 89 e5             	mov    %rsp,%rbp
   12669:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   1266d:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
   12671:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   12675:	48 8b 55 f0          	mov    -0x10(%rbp),%rdx
   12679:	48 89 50 48          	mov    %rdx,0x48(%rax)
   1267d:	90                   	nop
   1267e:	5d                   	pop    %rbp
   1267f:	c3                   	retq   

0000000000012680 <pvPortMalloc>:
   12680:	f3 0f 1e fa          	endbr64 
   12684:	55                   	push   %rbp
   12685:	48 89 e5             	mov    %rsp,%rbp
   12688:	48 83 ec 20          	sub    $0x20,%rsp
   1268c:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
   12690:	48 c7 45 f8 00 00 00 	movq   $0x0,-0x8(%rbp)
   12697:	00 
   12698:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
   1269c:	83 e0 07             	and    $0x7,%eax
   1269f:	48 85 c0             	test   %rax,%rax
   126a2:	74 2c                	je     126d0 <pvPortMalloc+0x50>
   126a4:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
   126a8:	48 83 e0 f8          	and    $0xfffffffffffffff8,%rax
   126ac:	48 83 c0 08          	add    $0x8,%rax
   126b0:	48 39 45 e8          	cmp    %rax,-0x18(%rbp)
   126b4:	73 12                	jae    126c8 <pvPortMalloc+0x48>
   126b6:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
   126ba:	48 83 e0 f8          	and    $0xfffffffffffffff8,%rax
   126be:	48 83 c0 08          	add    $0x8,%rax
   126c2:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
   126c6:	eb 08                	jmp    126d0 <pvPortMalloc+0x50>
   126c8:	48 c7 45 e8 00 00 00 	movq   $0x0,-0x18(%rbp)
   126cf:	00 
   126d0:	e8 6c ae ff ff       	callq  d541 <vTaskSuspendAll>
   126d5:	48 8b 05 6c 35 12 00 	mov    0x12356c(%rip),%rax        # 135c48 <pucAlignedHeap.3296>
   126dc:	48 85 c0             	test   %rax,%rax
   126df:	75 12                	jne    126f3 <pvPortMalloc+0x73>
   126e1:	48 8d 05 5f f5 01 00 	lea    0x1f55f(%rip),%rax        # 31c47 <ucHeap+0x7>
   126e8:	48 83 e0 f8          	and    $0xfffffffffffffff8,%rax
   126ec:	48 89 05 55 35 12 00 	mov    %rax,0x123555(%rip)        # 135c48 <pucAlignedHeap.3296>
   126f3:	48 83 7d e8 00       	cmpq   $0x0,-0x18(%rbp)
   126f8:	74 5a                	je     12754 <pvPortMalloc+0xd4>
   126fa:	48 8b 15 3f 35 12 00 	mov    0x12353f(%rip),%rdx        # 135c40 <xNextFreeByte>
   12701:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
   12705:	48 01 d0             	add    %rdx,%rax
   12708:	48 3d f7 3f 10 00    	cmp    $0x103ff7,%rax
   1270e:	77 44                	ja     12754 <pvPortMalloc+0xd4>
   12710:	48 8b 15 29 35 12 00 	mov    0x123529(%rip),%rdx        # 135c40 <xNextFreeByte>
   12717:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
   1271b:	48 01 c2             	add    %rax,%rdx
   1271e:	48 8b 05 1b 35 12 00 	mov    0x12351b(%rip),%rax        # 135c40 <xNextFreeByte>
   12725:	48 39 c2             	cmp    %rax,%rdx
   12728:	76 2a                	jbe    12754 <pvPortMalloc+0xd4>
   1272a:	48 8b 15 17 35 12 00 	mov    0x123517(%rip),%rdx        # 135c48 <pucAlignedHeap.3296>
   12731:	48 8b 05 08 35 12 00 	mov    0x123508(%rip),%rax        # 135c40 <xNextFreeByte>
   12738:	48 01 d0             	add    %rdx,%rax
   1273b:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
   1273f:	48 8b 15 fa 34 12 00 	mov    0x1234fa(%rip),%rdx        # 135c40 <xNextFreeByte>
   12746:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
   1274a:	48 01 d0             	add    %rdx,%rax
   1274d:	48 89 05 ec 34 12 00 	mov    %rax,0x1234ec(%rip)        # 135c40 <xNextFreeByte>
   12754:	48 83 7d f8 00       	cmpq   $0x0,-0x8(%rbp)
   12759:	74 18                	je     12773 <pvPortMalloc+0xf3>
   1275b:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
   1275f:	89 c2                	mov    %eax,%edx
   12761:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   12765:	89 c6                	mov    %eax,%esi
   12767:	bf 94 00 00 00       	mov    $0x94,%edi
   1276c:	e8 8f 27 01 00       	callq  24f00 <vTraceStoreMemMangEvent>
   12771:	eb 16                	jmp    12789 <pvPortMalloc+0x109>
   12773:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
   12777:	89 c2                	mov    %eax,%edx
   12779:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   1277d:	89 c6                	mov    %eax,%esi
   1277f:	bf e8 00 00 00       	mov    $0xe8,%edi
   12784:	e8 77 27 01 00       	callq  24f00 <vTraceStoreMemMangEvent>
   12789:	e8 d0 ad ff ff       	callq  d55e <xTaskResumeAll>
   1278e:	48 83 7d f8 00       	cmpq   $0x0,-0x8(%rbp)
   12793:	75 05                	jne    1279a <pvPortMalloc+0x11a>
   12795:	e8 8c 1a ff ff       	callq  4226 <vApplicationMallocFailedHook>
   1279a:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   1279e:	c9                   	leaveq 
   1279f:	c3                   	retq   

00000000000127a0 <vPortFree>:
   127a0:	f3 0f 1e fa          	endbr64 
   127a4:	55                   	push   %rbp
   127a5:	48 89 e5             	mov    %rsp,%rbp
   127a8:	48 83 ec 10          	sub    $0x10,%rsp
   127ac:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   127b0:	48 83 7d f8 00       	cmpq   $0x0,-0x8(%rbp)
   127b5:	74 11                	je     127c8 <vPortFree+0x28>
   127b7:	be 8b 00 00 00       	mov    $0x8b,%esi
   127bc:	48 8d 3d f5 51 01 00 	lea    0x151f5(%rip),%rdi        # 279b8 <_IO_stdin_used+0x9b8>
   127c3:	e8 44 15 ff ff       	callq  3d0c <vAssertCalled>
   127c8:	90                   	nop
   127c9:	c9                   	leaveq 
   127ca:	c3                   	retq   

00000000000127cb <vPortInitialiseBlocks>:
   127cb:	f3 0f 1e fa          	endbr64 
   127cf:	55                   	push   %rbp
   127d0:	48 89 e5             	mov    %rsp,%rbp
   127d3:	48 c7 05 62 34 12 00 	movq   $0x0,0x123462(%rip)        # 135c40 <xNextFreeByte>
   127da:	00 00 00 00 
   127de:	90                   	nop
   127df:	5d                   	pop    %rbp
   127e0:	c3                   	retq   

00000000000127e1 <xPortGetFreeHeapSize>:
   127e1:	f3 0f 1e fa          	endbr64 
   127e5:	55                   	push   %rbp
   127e6:	48 89 e5             	mov    %rsp,%rbp
   127e9:	48 8b 05 50 34 12 00 	mov    0x123450(%rip),%rax        # 135c40 <xNextFreeByte>
   127f0:	ba f8 3f 10 00       	mov    $0x103ff8,%edx
   127f5:	48 29 c2             	sub    %rax,%rdx
   127f8:	48 89 d0             	mov    %rdx,%rax
   127fb:	5d                   	pop    %rbp
   127fc:	c3                   	retq   

00000000000127fd <event_create>:
   127fd:	f3 0f 1e fa          	endbr64 
   12801:	55                   	push   %rbp
   12802:	48 89 e5             	mov    %rsp,%rbp
   12805:	48 83 ec 10          	sub    $0x10,%rsp
   12809:	bf 60 00 00 00       	mov    $0x60,%edi
   1280e:	e8 dd fd fe ff       	callq  25f0 <malloc@plt>
   12813:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
   12817:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   1281b:	c6 40 58 00          	movb   $0x0,0x58(%rax)
   1281f:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   12823:	be 00 00 00 00       	mov    $0x0,%esi
   12828:	48 89 c7             	mov    %rax,%rdi
   1282b:	e8 c0 fe fe ff       	callq  26f0 <pthread_mutex_init@plt>
   12830:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   12834:	48 83 c0 28          	add    $0x28,%rax
   12838:	be 00 00 00 00       	mov    $0x0,%esi
   1283d:	48 89 c7             	mov    %rax,%rdi
   12840:	e8 7b fd fe ff       	callq  25c0 <pthread_cond_init@plt>
   12845:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   12849:	c9                   	leaveq 
   1284a:	c3                   	retq   

000000000001284b <event_delete>:
   1284b:	f3 0f 1e fa          	endbr64 
   1284f:	55                   	push   %rbp
   12850:	48 89 e5             	mov    %rsp,%rbp
   12853:	48 83 ec 10          	sub    $0x10,%rsp
   12857:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   1285b:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   1285f:	48 89 c7             	mov    %rax,%rdi
   12862:	e8 89 fc fe ff       	callq  24f0 <pthread_mutex_destroy@plt>
   12867:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   1286b:	48 83 c0 28          	add    $0x28,%rax
   1286f:	48 89 c7             	mov    %rax,%rdi
   12872:	e8 c9 fd fe ff       	callq  2640 <pthread_cond_destroy@plt>
   12877:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   1287b:	48 89 c7             	mov    %rax,%rdi
   1287e:	e8 3d fb fe ff       	callq  23c0 <free@plt>
   12883:	90                   	nop
   12884:	c9                   	leaveq 
   12885:	c3                   	retq   

0000000000012886 <event_wait>:
   12886:	f3 0f 1e fa          	endbr64 
   1288a:	55                   	push   %rbp
   1288b:	48 89 e5             	mov    %rsp,%rbp
   1288e:	48 83 ec 10          	sub    $0x10,%rsp
   12892:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   12896:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   1289a:	48 89 c7             	mov    %rax,%rdi
   1289d:	e8 6e fe fe ff       	callq  2710 <pthread_mutex_lock@plt>
   128a2:	eb 17                	jmp    128bb <event_wait+0x35>
   128a4:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   128a8:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
   128ac:	48 83 c2 28          	add    $0x28,%rdx
   128b0:	48 89 c6             	mov    %rax,%rsi
   128b3:	48 89 d7             	mov    %rdx,%rdi
   128b6:	e8 c5 fb fe ff       	callq  2480 <pthread_cond_wait@plt>
   128bb:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   128bf:	0f b6 40 58          	movzbl 0x58(%rax),%eax
   128c3:	83 f0 01             	xor    $0x1,%eax
   128c6:	84 c0                	test   %al,%al
   128c8:	75 da                	jne    128a4 <event_wait+0x1e>
   128ca:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   128ce:	c6 40 58 00          	movb   $0x0,0x58(%rax)
   128d2:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   128d6:	48 89 c7             	mov    %rax,%rdi
   128d9:	e8 f2 fc fe ff       	callq  25d0 <pthread_mutex_unlock@plt>
   128de:	b8 01 00 00 00       	mov    $0x1,%eax
   128e3:	c9                   	leaveq 
   128e4:	c3                   	retq   

00000000000128e5 <event_wait_timed>:
   128e5:	f3 0f 1e fa          	endbr64 
   128e9:	55                   	push   %rbp
   128ea:	48 89 e5             	mov    %rsp,%rbp
   128ed:	48 83 ec 40          	sub    $0x40,%rsp
   128f1:	48 89 7d c8          	mov    %rdi,-0x38(%rbp)
   128f5:	48 89 75 c0          	mov    %rsi,-0x40(%rbp)
   128f9:	64 48 8b 04 25 28 00 	mov    %fs:0x28,%rax
   12900:	00 00 
   12902:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
   12906:	31 c0                	xor    %eax,%eax
   12908:	c7 45 dc 00 00 00 00 	movl   $0x0,-0x24(%rbp)
   1290f:	48 8d 45 e0          	lea    -0x20(%rbp),%rax
   12913:	48 89 c6             	mov    %rax,%rsi
   12916:	bf 00 00 00 00       	mov    $0x0,%edi
   1291b:	e8 40 fb fe ff       	callq  2460 <clock_gettime@plt>
   12920:	48 8b 75 e0          	mov    -0x20(%rbp),%rsi
   12924:	48 8b 4d c0          	mov    -0x40(%rbp),%rcx
   12928:	48 ba cf f7 53 e3 a5 	movabs $0x20c49ba5e353f7cf,%rdx
   1292f:	9b c4 20 
   12932:	48 89 c8             	mov    %rcx,%rax
   12935:	48 f7 ea             	imul   %rdx
   12938:	48 c1 fa 07          	sar    $0x7,%rdx
   1293c:	48 89 c8             	mov    %rcx,%rax
   1293f:	48 c1 f8 3f          	sar    $0x3f,%rax
   12943:	48 29 c2             	sub    %rax,%rdx
   12946:	48 89 d0             	mov    %rdx,%rax
   12949:	48 01 f0             	add    %rsi,%rax
   1294c:	48 89 45 e0          	mov    %rax,-0x20(%rbp)
   12950:	48 8b 75 e8          	mov    -0x18(%rbp),%rsi
   12954:	48 8b 4d c0          	mov    -0x40(%rbp),%rcx
   12958:	48 ba cf f7 53 e3 a5 	movabs $0x20c49ba5e353f7cf,%rdx
   1295f:	9b c4 20 
   12962:	48 89 c8             	mov    %rcx,%rax
   12965:	48 f7 ea             	imul   %rdx
   12968:	48 c1 fa 07          	sar    $0x7,%rdx
   1296c:	48 89 c8             	mov    %rcx,%rax
   1296f:	48 c1 f8 3f          	sar    $0x3f,%rax
   12973:	48 29 c2             	sub    %rax,%rdx
   12976:	48 89 d0             	mov    %rdx,%rax
   12979:	48 69 c0 e8 03 00 00 	imul   $0x3e8,%rax,%rax
   12980:	48 29 c1             	sub    %rax,%rcx
   12983:	48 89 c8             	mov    %rcx,%rax
   12986:	48 69 c0 40 42 0f 00 	imul   $0xf4240,%rax,%rax
   1298d:	48 01 f0             	add    %rsi,%rax
   12990:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
   12994:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
   12998:	48 89 c7             	mov    %rax,%rdi
   1299b:	e8 70 fd fe ff       	callq  2710 <pthread_mutex_lock@plt>
   129a0:	eb 37                	jmp    129d9 <event_wait_timed+0xf4>
   129a2:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
   129a6:	48 8b 55 c8          	mov    -0x38(%rbp),%rdx
   129aa:	48 8d 4a 28          	lea    0x28(%rdx),%rcx
   129ae:	48 8d 55 e0          	lea    -0x20(%rbp),%rdx
   129b2:	48 89 c6             	mov    %rax,%rsi
   129b5:	48 89 cf             	mov    %rcx,%rdi
   129b8:	e8 73 fc fe ff       	callq  2630 <pthread_cond_timedwait@plt>
   129bd:	89 45 dc             	mov    %eax,-0x24(%rbp)
   129c0:	83 7d dc ff          	cmpl   $0xffffffff,-0x24(%rbp)
   129c4:	75 13                	jne    129d9 <event_wait_timed+0xf4>
   129c6:	e8 35 fa fe ff       	callq  2400 <__errno_location@plt>
   129cb:	8b 00                	mov    (%rax),%eax
   129cd:	83 f8 6e             	cmp    $0x6e,%eax
   129d0:	75 07                	jne    129d9 <event_wait_timed+0xf4>
   129d2:	b8 00 00 00 00       	mov    $0x0,%eax
   129d7:	eb 2e                	jmp    12a07 <event_wait_timed+0x122>
   129d9:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
   129dd:	0f b6 40 58          	movzbl 0x58(%rax),%eax
   129e1:	83 f0 01             	xor    $0x1,%eax
   129e4:	84 c0                	test   %al,%al
   129e6:	74 06                	je     129ee <event_wait_timed+0x109>
   129e8:	83 7d dc 00          	cmpl   $0x0,-0x24(%rbp)
   129ec:	74 b4                	je     129a2 <event_wait_timed+0xbd>
   129ee:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
   129f2:	c6 40 58 00          	movb   $0x0,0x58(%rax)
   129f6:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
   129fa:	48 89 c7             	mov    %rax,%rdi
   129fd:	e8 ce fb fe ff       	callq  25d0 <pthread_mutex_unlock@plt>
   12a02:	b8 01 00 00 00       	mov    $0x1,%eax
   12a07:	48 8b 7d f8          	mov    -0x8(%rbp),%rdi
   12a0b:	64 48 33 3c 25 28 00 	xor    %fs:0x28,%rdi
   12a12:	00 00 
   12a14:	74 05                	je     12a1b <event_wait_timed+0x136>
   12a16:	e8 b5 fa fe ff       	callq  24d0 <__stack_chk_fail@plt>
   12a1b:	c9                   	leaveq 
   12a1c:	c3                   	retq   

0000000000012a1d <event_signal>:
   12a1d:	f3 0f 1e fa          	endbr64 
   12a21:	55                   	push   %rbp
   12a22:	48 89 e5             	mov    %rsp,%rbp
   12a25:	48 83 ec 10          	sub    $0x10,%rsp
   12a29:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   12a2d:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   12a31:	48 89 c7             	mov    %rax,%rdi
   12a34:	e8 d7 fc fe ff       	callq  2710 <pthread_mutex_lock@plt>
   12a39:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   12a3d:	c6 40 58 01          	movb   $0x1,0x58(%rax)
   12a41:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   12a45:	48 83 c0 28          	add    $0x28,%rax
   12a49:	48 89 c7             	mov    %rax,%rdi
   12a4c:	e8 ef fa fe ff       	callq  2540 <pthread_cond_signal@plt>
   12a51:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   12a55:	48 89 c7             	mov    %rax,%rdi
   12a58:	e8 73 fb fe ff       	callq  25d0 <pthread_mutex_unlock@plt>
   12a5d:	90                   	nop
   12a5e:	c9                   	leaveq 
   12a5f:	c3                   	retq   

0000000000012a60 <prvGetThreadFromTask>:
   12a60:	55                   	push   %rbp
   12a61:	48 89 e5             	mov    %rsp,%rbp
   12a64:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
   12a68:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
   12a6c:	48 8b 00             	mov    (%rax),%rax
   12a6f:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
   12a73:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   12a77:	48 83 c0 08          	add    $0x8,%rax
   12a7b:	5d                   	pop    %rbp
   12a7c:	c3                   	retq   

0000000000012a7d <prvFatalError>:
   12a7d:	f3 0f 1e fa          	endbr64 
   12a81:	55                   	push   %rbp
   12a82:	48 89 e5             	mov    %rsp,%rbp
   12a85:	48 83 ec 10          	sub    $0x10,%rsp
   12a89:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   12a8d:	89 75 f4             	mov    %esi,-0xc(%rbp)
   12a90:	8b 45 f4             	mov    -0xc(%rbp),%eax
   12a93:	89 c7                	mov    %eax,%edi
   12a95:	e8 46 fc fe ff       	callq  26e0 <strerror@plt>
   12a9a:	48 89 c1             	mov    %rax,%rcx
   12a9d:	48 8b 05 3c e6 01 00 	mov    0x1e63c(%rip),%rax        # 310e0 <stderr@@GLIBC_2.2.5>
   12aa4:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
   12aa8:	48 8d 35 51 4f 01 00 	lea    0x14f51(%rip),%rsi        # 27a00 <_IO_stdin_used+0xa00>
   12aaf:	48 89 c7             	mov    %rax,%rdi
   12ab2:	b8 00 00 00 00       	mov    $0x0,%eax
   12ab7:	e8 c4 fa fe ff       	callq  2580 <fprintf@plt>
   12abc:	e8 2f f9 fe ff       	callq  23f0 <abort@plt>

0000000000012ac1 <pxPortInitialiseStack>:
   12ac1:	f3 0f 1e fa          	endbr64 
   12ac5:	55                   	push   %rbp
   12ac6:	48 89 e5             	mov    %rsp,%rbp
   12ac9:	48 83 c4 80          	add    $0xffffffffffffff80,%rsp
   12acd:	48 89 7d 98          	mov    %rdi,-0x68(%rbp)
   12ad1:	48 89 75 90          	mov    %rsi,-0x70(%rbp)
   12ad5:	48 89 55 88          	mov    %rdx,-0x78(%rbp)
   12ad9:	48 89 4d 80          	mov    %rcx,-0x80(%rbp)
   12add:	64 48 8b 04 25 28 00 	mov    %fs:0x28,%rax
   12ae4:	00 00 
   12ae6:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
   12aea:	31 c0                	xor    %eax,%eax
   12aec:	48 8d 35 2c 07 00 00 	lea    0x72c(%rip),%rsi        # 1321f <prvSetupSignalsAndSchedulerPolicy>
   12af3:	48 8d 3d 66 31 12 00 	lea    0x123166(%rip),%rdi        # 135c60 <hSigSetupThread>
   12afa:	e8 91 f9 fe ff       	callq  2490 <pthread_once@plt>
   12aff:	48 8b 45 98          	mov    -0x68(%rbp),%rax
   12b03:	48 83 c0 08          	add    $0x8,%rax
   12b07:	48 83 e8 28          	sub    $0x28,%rax
   12b0b:	48 89 45 b0          	mov    %rax,-0x50(%rbp)
   12b0f:	48 8b 45 b0          	mov    -0x50(%rbp),%rax
   12b13:	48 83 e8 08          	sub    $0x8,%rax
   12b17:	48 89 45 98          	mov    %rax,-0x68(%rbp)
   12b1b:	48 8b 45 98          	mov    -0x68(%rbp),%rax
   12b1f:	48 83 c0 08          	add    $0x8,%rax
   12b23:	48 2b 45 90          	sub    -0x70(%rbp),%rax
   12b27:	48 89 45 b8          	mov    %rax,-0x48(%rbp)
   12b2b:	48 8b 45 b0          	mov    -0x50(%rbp),%rax
   12b2f:	48 8b 55 88          	mov    -0x78(%rbp),%rdx
   12b33:	48 89 50 08          	mov    %rdx,0x8(%rax)
   12b37:	48 8b 45 b0          	mov    -0x50(%rbp),%rax
   12b3b:	48 8b 55 80          	mov    -0x80(%rbp),%rdx
   12b3f:	48 89 50 10          	mov    %rdx,0x10(%rax)
   12b43:	48 8b 45 b0          	mov    -0x50(%rbp),%rax
   12b47:	48 c7 40 18 00 00 00 	movq   $0x0,0x18(%rax)
   12b4e:	00 
   12b4f:	48 8d 45 c0          	lea    -0x40(%rbp),%rax
   12b53:	48 89 c7             	mov    %rax,%rdi
   12b56:	e8 d5 f9 fe ff       	callq  2530 <pthread_attr_init@plt>
   12b5b:	48 8b 55 b8          	mov    -0x48(%rbp),%rdx
   12b5f:	48 8b 4d 90          	mov    -0x70(%rbp),%rcx
   12b63:	48 8d 45 c0          	lea    -0x40(%rbp),%rax
   12b67:	48 89 ce             	mov    %rcx,%rsi
   12b6a:	48 89 c7             	mov    %rax,%rdi
   12b6d:	e8 ce f8 fe ff       	callq  2440 <pthread_attr_setstack@plt>
   12b72:	b8 00 00 00 00       	mov    $0x0,%eax
   12b77:	e8 81 fc ff ff       	callq  127fd <event_create>
   12b7c:	48 8b 55 b0          	mov    -0x50(%rbp),%rdx
   12b80:	48 89 42 20          	mov    %rax,0x20(%rdx)
   12b84:	e8 46 02 00 00       	callq  12dcf <vPortEnterCritical>
   12b89:	48 8b 45 b0          	mov    -0x50(%rbp),%rax
   12b8d:	48 8b 55 b0          	mov    -0x50(%rbp),%rdx
   12b91:	48 8d 75 c0          	lea    -0x40(%rbp),%rsi
   12b95:	48 89 d1             	mov    %rdx,%rcx
   12b98:	48 8d 15 62 05 00 00 	lea    0x562(%rip),%rdx        # 13101 <prvWaitForStart>
   12b9f:	48 89 c7             	mov    %rax,%rdi
   12ba2:	e8 29 f8 fe ff       	callq  23d0 <pthread_create@plt>
   12ba7:	89 45 ac             	mov    %eax,-0x54(%rbp)
   12baa:	83 7d ac 00          	cmpl   $0x0,-0x54(%rbp)
   12bae:	74 11                	je     12bc1 <pxPortInitialiseStack+0x100>
   12bb0:	8b 45 ac             	mov    -0x54(%rbp),%eax
   12bb3:	89 c6                	mov    %eax,%esi
   12bb5:	48 8d 3d 4c 4e 01 00 	lea    0x14e4c(%rip),%rdi        # 27a08 <_IO_stdin_used+0xa08>
   12bbc:	e8 bc fe ff ff       	callq  12a7d <prvFatalError>
   12bc1:	e8 37 02 00 00       	callq  12dfd <vPortExitCritical>
   12bc6:	48 8b 45 98          	mov    -0x68(%rbp),%rax
   12bca:	48 8b 4d f8          	mov    -0x8(%rbp),%rcx
   12bce:	64 48 33 0c 25 28 00 	xor    %fs:0x28,%rcx
   12bd5:	00 00 
   12bd7:	74 05                	je     12bde <pxPortInitialiseStack+0x11d>
   12bd9:	e8 f2 f8 fe ff       	callq  24d0 <__stack_chk_fail@plt>
   12bde:	c9                   	leaveq 
   12bdf:	c3                   	retq   

0000000000012be0 <vPortStartFirstTask>:
   12be0:	f3 0f 1e fa          	endbr64 
   12be4:	55                   	push   %rbp
   12be5:	48 89 e5             	mov    %rsp,%rbp
   12be8:	48 83 ec 10          	sub    $0x10,%rsp
   12bec:	e8 8d ca ff ff       	callq  f67e <xTaskGetCurrentTaskHandle>
   12bf1:	48 89 c7             	mov    %rax,%rdi
   12bf4:	e8 67 fe ff ff       	callq  12a60 <prvGetThreadFromTask>
   12bf9:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
   12bfd:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   12c01:	48 89 c7             	mov    %rax,%rdi
   12c04:	e8 e2 05 00 00       	callq  131eb <prvResumeThread>
   12c09:	90                   	nop
   12c0a:	c9                   	leaveq 
   12c0b:	c3                   	retq   

0000000000012c0c <xPortStartScheduler>:
   12c0c:	f3 0f 1e fa          	endbr64 
   12c10:	55                   	push   %rbp
   12c11:	48 89 e5             	mov    %rsp,%rbp
   12c14:	48 81 ec a0 00 00 00 	sub    $0xa0,%rsp
   12c1b:	64 48 8b 04 25 28 00 	mov    %fs:0x28,%rax
   12c22:	00 00 
   12c24:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
   12c28:	31 c0                	xor    %eax,%eax
   12c2a:	e8 f1 f9 fe ff       	callq  2620 <pthread_self@plt>
   12c2f:	48 89 05 ca 31 12 00 	mov    %rax,0x1231ca(%rip)        # 135e00 <hMainThread>
   12c36:	e8 07 03 00 00       	callq  12f42 <prvSetupTimerInterrupt>
   12c3b:	e8 a0 ff ff ff       	callq  12be0 <vPortStartFirstTask>
   12c40:	48 8d 85 70 ff ff ff 	lea    -0x90(%rbp),%rax
   12c47:	48 89 c7             	mov    %rax,%rdi
   12c4a:	e8 41 f9 fe ff       	callq  2590 <sigemptyset@plt>
   12c4f:	48 8d 85 70 ff ff ff 	lea    -0x90(%rbp),%rax
   12c56:	be 0a 00 00 00       	mov    $0xa,%esi
   12c5b:	48 89 c7             	mov    %rax,%rdi
   12c5e:	e8 9d fa fe ff       	callq  2700 <sigaddset@plt>
   12c63:	eb 19                	jmp    12c7e <xPortStartScheduler+0x72>
   12c65:	48 8d 95 6c ff ff ff 	lea    -0x94(%rbp),%rdx
   12c6c:	48 8d 85 70 ff ff ff 	lea    -0x90(%rbp),%rax
   12c73:	48 89 d6             	mov    %rdx,%rsi
   12c76:	48 89 c7             	mov    %rax,%rdi
   12c79:	e8 22 fa fe ff       	callq  26a0 <sigwait@plt>
   12c7e:	48 8b 05 8b 31 12 00 	mov    0x12318b(%rip),%rax        # 135e10 <xSchedulerEnd>
   12c85:	48 85 c0             	test   %rax,%rax
   12c88:	74 db                	je     12c65 <xPortStartScheduler+0x59>
   12c8a:	e8 98 b0 ff ff       	callq  dd27 <xTaskGetIdleTaskHandle>
   12c8f:	48 89 c7             	mov    %rax,%rdi
   12c92:	e8 14 04 00 00       	callq  130ab <vPortCancelThread>
   12c97:	e8 d9 ec ff ff       	callq  11975 <xTimerGetTimerDaemonTaskHandle>
   12c9c:	48 89 c7             	mov    %rax,%rdi
   12c9f:	e8 07 04 00 00       	callq  130ab <vPortCancelThread>
   12ca4:	ba 00 00 00 00       	mov    $0x0,%edx
   12ca9:	48 8d 35 d0 30 12 00 	lea    0x1230d0(%rip),%rsi        # 135d80 <xSchedulerOriginalSignalMask>
   12cb0:	bf 02 00 00 00       	mov    $0x2,%edi
   12cb5:	e8 26 f7 fe ff       	callq  23e0 <pthread_sigmask@plt>
   12cba:	b8 00 00 00 00       	mov    $0x0,%eax
   12cbf:	48 8b 4d f8          	mov    -0x8(%rbp),%rcx
   12cc3:	64 48 33 0c 25 28 00 	xor    %fs:0x28,%rcx
   12cca:	00 00 
   12ccc:	74 05                	je     12cd3 <xPortStartScheduler+0xc7>
   12cce:	e8 fd f7 fe ff       	callq  24d0 <__stack_chk_fail@plt>
   12cd3:	c9                   	leaveq 
   12cd4:	c3                   	retq   

0000000000012cd5 <vPortEndScheduler>:
   12cd5:	f3 0f 1e fa          	endbr64 
   12cd9:	55                   	push   %rbp
   12cda:	48 89 e5             	mov    %rsp,%rbp
   12cdd:	48 81 ec d0 00 00 00 	sub    $0xd0,%rsp
   12ce4:	64 48 8b 04 25 28 00 	mov    %fs:0x28,%rax
   12ceb:	00 00 
   12ced:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
   12cf1:	31 c0                	xor    %eax,%eax
   12cf3:	48 c7 85 50 ff ff ff 	movq   $0x0,-0xb0(%rbp)
   12cfa:	00 00 00 00 
   12cfe:	48 c7 85 58 ff ff ff 	movq   $0x0,-0xa8(%rbp)
   12d05:	00 00 00 00 
   12d09:	48 c7 85 40 ff ff ff 	movq   $0x0,-0xc0(%rbp)
   12d10:	00 00 00 00 
   12d14:	48 c7 85 48 ff ff ff 	movq   $0x0,-0xb8(%rbp)
   12d1b:	00 00 00 00 
   12d1f:	48 8d 85 40 ff ff ff 	lea    -0xc0(%rbp),%rax
   12d26:	ba 00 00 00 00       	mov    $0x0,%edx
   12d2b:	48 89 c6             	mov    %rax,%rsi
   12d2e:	bf 00 00 00 00       	mov    $0x0,%edi
   12d33:	e8 d8 f8 fe ff       	callq  2610 <setitimer@plt>
   12d38:	c7 45 e8 00 00 00 00 	movl   $0x0,-0x18(%rbp)
   12d3f:	48 c7 85 60 ff ff ff 	movq   $0x1,-0xa0(%rbp)
   12d46:	01 00 00 00 
   12d4a:	48 8d 85 60 ff ff ff 	lea    -0xa0(%rbp),%rax
   12d51:	48 83 c0 08          	add    $0x8,%rax
   12d55:	48 89 c7             	mov    %rax,%rdi
   12d58:	e8 33 f8 fe ff       	callq  2590 <sigemptyset@plt>
   12d5d:	48 8d 85 60 ff ff ff 	lea    -0xa0(%rbp),%rax
   12d64:	ba 00 00 00 00       	mov    $0x0,%edx
   12d69:	48 89 c6             	mov    %rax,%rsi
   12d6c:	bf 0e 00 00 00       	mov    $0xe,%edi
   12d71:	e8 da f6 fe ff       	callq  2450 <sigaction@plt>
   12d76:	48 c7 05 8f 30 12 00 	movq   $0x1,0x12308f(%rip)        # 135e10 <xSchedulerEnd>
   12d7d:	01 00 00 00 
   12d81:	48 8b 05 78 30 12 00 	mov    0x123078(%rip),%rax        # 135e00 <hMainThread>
   12d88:	be 0a 00 00 00       	mov    $0xa,%esi
   12d8d:	48 89 c7             	mov    %rax,%rdi
   12d90:	e8 db f6 fe ff       	callq  2470 <pthread_kill@plt>
   12d95:	e8 e4 c8 ff ff       	callq  f67e <xTaskGetCurrentTaskHandle>
   12d9a:	48 89 c7             	mov    %rax,%rdi
   12d9d:	e8 be fc ff ff       	callq  12a60 <prvGetThreadFromTask>
   12da2:	48 89 85 38 ff ff ff 	mov    %rax,-0xc8(%rbp)
   12da9:	48 8b 85 38 ff ff ff 	mov    -0xc8(%rbp),%rax
   12db0:	48 89 c7             	mov    %rax,%rdi
   12db3:	e8 10 04 00 00       	callq  131c8 <prvSuspendSelf>
   12db8:	90                   	nop
   12db9:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   12dbd:	64 48 33 04 25 28 00 	xor    %fs:0x28,%rax
   12dc4:	00 00 
   12dc6:	74 05                	je     12dcd <vPortEndScheduler+0xf8>
   12dc8:	e8 03 f7 fe ff       	callq  24d0 <__stack_chk_fail@plt>
   12dcd:	c9                   	leaveq 
   12dce:	c3                   	retq   

0000000000012dcf <vPortEnterCritical>:
   12dcf:	f3 0f 1e fa          	endbr64 
   12dd3:	55                   	push   %rbp
   12dd4:	48 89 e5             	mov    %rsp,%rbp
   12dd7:	48 8b 05 2a 30 12 00 	mov    0x12302a(%rip),%rax        # 135e08 <uxCriticalNesting>
   12dde:	48 85 c0             	test   %rax,%rax
   12de1:	75 05                	jne    12de8 <vPortEnterCritical+0x19>
   12de3:	e8 a6 00 00 00       	callq  12e8e <vPortDisableInterrupts>
   12de8:	48 8b 05 19 30 12 00 	mov    0x123019(%rip),%rax        # 135e08 <uxCriticalNesting>
   12def:	48 83 c0 01          	add    $0x1,%rax
   12df3:	48 89 05 0e 30 12 00 	mov    %rax,0x12300e(%rip)        # 135e08 <uxCriticalNesting>
   12dfa:	90                   	nop
   12dfb:	5d                   	pop    %rbp
   12dfc:	c3                   	retq   

0000000000012dfd <vPortExitCritical>:
   12dfd:	f3 0f 1e fa          	endbr64 
   12e01:	55                   	push   %rbp
   12e02:	48 89 e5             	mov    %rsp,%rbp
   12e05:	48 8b 05 fc 2f 12 00 	mov    0x122ffc(%rip),%rax        # 135e08 <uxCriticalNesting>
   12e0c:	48 83 e8 01          	sub    $0x1,%rax
   12e10:	48 89 05 f1 2f 12 00 	mov    %rax,0x122ff1(%rip)        # 135e08 <uxCriticalNesting>
   12e17:	48 8b 05 ea 2f 12 00 	mov    0x122fea(%rip),%rax        # 135e08 <uxCriticalNesting>
   12e1e:	48 85 c0             	test   %rax,%rax
   12e21:	75 05                	jne    12e28 <vPortExitCritical+0x2b>
   12e23:	e8 87 00 00 00       	callq  12eaf <vPortEnableInterrupts>
   12e28:	90                   	nop
   12e29:	5d                   	pop    %rbp
   12e2a:	c3                   	retq   

0000000000012e2b <vPortYieldFromISR>:
   12e2b:	f3 0f 1e fa          	endbr64 
   12e2f:	55                   	push   %rbp
   12e30:	48 89 e5             	mov    %rsp,%rbp
   12e33:	48 83 ec 10          	sub    $0x10,%rsp
   12e37:	e8 42 c8 ff ff       	callq  f67e <xTaskGetCurrentTaskHandle>
   12e3c:	48 89 c7             	mov    %rax,%rdi
   12e3f:	e8 1c fc ff ff       	callq  12a60 <prvGetThreadFromTask>
   12e44:	48 89 45 f0          	mov    %rax,-0x10(%rbp)
   12e48:	e8 bf b6 ff ff       	callq  e50c <vTaskSwitchContext>
   12e4d:	e8 2c c8 ff ff       	callq  f67e <xTaskGetCurrentTaskHandle>
   12e52:	48 89 c7             	mov    %rax,%rdi
   12e55:	e8 06 fc ff ff       	callq  12a60 <prvGetThreadFromTask>
   12e5a:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
   12e5e:	48 8b 55 f0          	mov    -0x10(%rbp),%rdx
   12e62:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   12e66:	48 89 d6             	mov    %rdx,%rsi
   12e69:	48 89 c7             	mov    %rax,%rdi
   12e6c:	e8 f1 02 00 00       	callq  13162 <prvSwitchThread>
   12e71:	90                   	nop
   12e72:	c9                   	leaveq 
   12e73:	c3                   	retq   

0000000000012e74 <vPortYield>:
   12e74:	f3 0f 1e fa          	endbr64 
   12e78:	55                   	push   %rbp
   12e79:	48 89 e5             	mov    %rsp,%rbp
   12e7c:	e8 4e ff ff ff       	callq  12dcf <vPortEnterCritical>
   12e81:	e8 a5 ff ff ff       	callq  12e2b <vPortYieldFromISR>
   12e86:	e8 72 ff ff ff       	callq  12dfd <vPortExitCritical>
   12e8b:	90                   	nop
   12e8c:	5d                   	pop    %rbp
   12e8d:	c3                   	retq   

0000000000012e8e <vPortDisableInterrupts>:
   12e8e:	f3 0f 1e fa          	endbr64 
   12e92:	55                   	push   %rbp
   12e93:	48 89 e5             	mov    %rsp,%rbp
   12e96:	ba 00 00 00 00       	mov    $0x0,%edx
   12e9b:	48 8d 35 5e 2e 12 00 	lea    0x122e5e(%rip),%rsi        # 135d00 <xAllSignals>
   12ea2:	bf 00 00 00 00       	mov    $0x0,%edi
   12ea7:	e8 34 f5 fe ff       	callq  23e0 <pthread_sigmask@plt>
   12eac:	90                   	nop
   12ead:	5d                   	pop    %rbp
   12eae:	c3                   	retq   

0000000000012eaf <vPortEnableInterrupts>:
   12eaf:	f3 0f 1e fa          	endbr64 
   12eb3:	55                   	push   %rbp
   12eb4:	48 89 e5             	mov    %rsp,%rbp
   12eb7:	ba 00 00 00 00       	mov    $0x0,%edx
   12ebc:	48 8d 35 3d 2e 12 00 	lea    0x122e3d(%rip),%rsi        # 135d00 <xAllSignals>
   12ec3:	bf 01 00 00 00       	mov    $0x1,%edi
   12ec8:	e8 13 f5 fe ff       	callq  23e0 <pthread_sigmask@plt>
   12ecd:	90                   	nop
   12ece:	5d                   	pop    %rbp
   12ecf:	c3                   	retq   

0000000000012ed0 <xPortSetInterruptMask>:
   12ed0:	f3 0f 1e fa          	endbr64 
   12ed4:	55                   	push   %rbp
   12ed5:	48 89 e5             	mov    %rsp,%rbp
   12ed8:	b8 01 00 00 00       	mov    $0x1,%eax
   12edd:	5d                   	pop    %rbp
   12ede:	c3                   	retq   

0000000000012edf <vPortClearInterruptMask>:
   12edf:	f3 0f 1e fa          	endbr64 
   12ee3:	55                   	push   %rbp
   12ee4:	48 89 e5             	mov    %rsp,%rbp
   12ee7:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   12eeb:	90                   	nop
   12eec:	5d                   	pop    %rbp
   12eed:	c3                   	retq   

0000000000012eee <prvGetTimeNs>:
   12eee:	f3 0f 1e fa          	endbr64 
   12ef2:	55                   	push   %rbp
   12ef3:	48 89 e5             	mov    %rsp,%rbp
   12ef6:	48 83 ec 20          	sub    $0x20,%rsp
   12efa:	64 48 8b 04 25 28 00 	mov    %fs:0x28,%rax
   12f01:	00 00 
   12f03:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
   12f07:	31 c0                	xor    %eax,%eax
   12f09:	48 8d 45 e0          	lea    -0x20(%rbp),%rax
   12f0d:	48 89 c6             	mov    %rax,%rsi
   12f10:	bf 01 00 00 00       	mov    $0x1,%edi
   12f15:	e8 46 f5 fe ff       	callq  2460 <clock_gettime@plt>
   12f1a:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
   12f1e:	48 69 c0 00 ca 9a 3b 	imul   $0x3b9aca00,%rax,%rax
   12f25:	48 8b 55 e8          	mov    -0x18(%rbp),%rdx
   12f29:	48 01 d0             	add    %rdx,%rax
   12f2c:	48 8b 4d f8          	mov    -0x8(%rbp),%rcx
   12f30:	64 48 33 0c 25 28 00 	xor    %fs:0x28,%rcx
   12f37:	00 00 
   12f39:	74 05                	je     12f40 <prvGetTimeNs+0x52>
   12f3b:	e8 90 f5 fe ff       	callq  24d0 <__stack_chk_fail@plt>
   12f40:	c9                   	leaveq 
   12f41:	c3                   	retq   

0000000000012f42 <prvSetupTimerInterrupt>:
   12f42:	f3 0f 1e fa          	endbr64 
   12f46:	55                   	push   %rbp
   12f47:	48 89 e5             	mov    %rsp,%rbp
   12f4a:	48 83 ec 40          	sub    $0x40,%rsp
   12f4e:	64 48 8b 04 25 28 00 	mov    %fs:0x28,%rax
   12f55:	00 00 
   12f57:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
   12f5b:	31 c0                	xor    %eax,%eax
   12f5d:	48 8d 45 d0          	lea    -0x30(%rbp),%rax
   12f61:	48 89 c6             	mov    %rax,%rsi
   12f64:	bf 00 00 00 00       	mov    $0x0,%edi
   12f69:	e8 12 f7 fe ff       	callq  2680 <getitimer@plt>
   12f6e:	89 45 cc             	mov    %eax,-0x34(%rbp)
   12f71:	83 7d cc 00          	cmpl   $0x0,-0x34(%rbp)
   12f75:	74 15                	je     12f8c <prvSetupTimerInterrupt+0x4a>
   12f77:	e8 84 f4 fe ff       	callq  2400 <__errno_location@plt>
   12f7c:	8b 00                	mov    (%rax),%eax
   12f7e:	89 c6                	mov    %eax,%esi
   12f80:	48 8d 3d 90 4a 01 00 	lea    0x14a90(%rip),%rdi        # 27a17 <_IO_stdin_used+0xa17>
   12f87:	e8 f1 fa ff ff       	callq  12a7d <prvFatalError>
   12f8c:	48 c7 45 d0 00 00 00 	movq   $0x0,-0x30(%rbp)
   12f93:	00 
   12f94:	48 c7 45 d8 e8 03 00 	movq   $0x3e8,-0x28(%rbp)
   12f9b:	00 
   12f9c:	48 c7 45 e0 00 00 00 	movq   $0x0,-0x20(%rbp)
   12fa3:	00 
   12fa4:	48 c7 45 e8 e8 03 00 	movq   $0x3e8,-0x18(%rbp)
   12fab:	00 
   12fac:	48 8d 45 d0          	lea    -0x30(%rbp),%rax
   12fb0:	ba 00 00 00 00       	mov    $0x0,%edx
   12fb5:	48 89 c6             	mov    %rax,%rsi
   12fb8:	bf 00 00 00 00       	mov    $0x0,%edi
   12fbd:	e8 4e f6 fe ff       	callq  2610 <setitimer@plt>
   12fc2:	89 45 cc             	mov    %eax,-0x34(%rbp)
   12fc5:	83 7d cc 00          	cmpl   $0x0,-0x34(%rbp)
   12fc9:	74 15                	je     12fe0 <prvSetupTimerInterrupt+0x9e>
   12fcb:	e8 30 f4 fe ff       	callq  2400 <__errno_location@plt>
   12fd0:	8b 00                	mov    (%rax),%eax
   12fd2:	89 c6                	mov    %eax,%esi
   12fd4:	48 8d 3d 46 4a 01 00 	lea    0x14a46(%rip),%rdi        # 27a21 <_IO_stdin_used+0xa21>
   12fdb:	e8 9d fa ff ff       	callq  12a7d <prvFatalError>
   12fe0:	e8 09 ff ff ff       	callq  12eee <prvGetTimeNs>
   12fe5:	48 89 05 2c 2e 12 00 	mov    %rax,0x122e2c(%rip)        # 135e18 <prvStartTimeNs>
   12fec:	90                   	nop
   12fed:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   12ff1:	64 48 33 04 25 28 00 	xor    %fs:0x28,%rax
   12ff8:	00 00 
   12ffa:	74 05                	je     13001 <prvSetupTimerInterrupt+0xbf>
   12ffc:	e8 cf f4 fe ff       	callq  24d0 <__stack_chk_fail@plt>
   13001:	c9                   	leaveq 
   13002:	c3                   	retq   

0000000000013003 <vPortSystemTickHandler>:
   13003:	f3 0f 1e fa          	endbr64 
   13007:	55                   	push   %rbp
   13008:	48 89 e5             	mov    %rsp,%rbp
   1300b:	48 83 ec 20          	sub    $0x20,%rsp
   1300f:	89 7d ec             	mov    %edi,-0x14(%rbp)
   13012:	48 8b 05 ef 2d 12 00 	mov    0x122def(%rip),%rax        # 135e08 <uxCriticalNesting>
   13019:	48 83 c0 01          	add    $0x1,%rax
   1301d:	48 89 05 e4 2d 12 00 	mov    %rax,0x122de4(%rip)        # 135e08 <uxCriticalNesting>
   13024:	e8 55 c6 ff ff       	callq  f67e <xTaskGetCurrentTaskHandle>
   13029:	48 89 c7             	mov    %rax,%rdi
   1302c:	e8 2f fa ff ff       	callq  12a60 <prvGetThreadFromTask>
   13031:	48 89 45 f0          	mov    %rax,-0x10(%rbp)
   13035:	e8 64 af ff ff       	callq  df9e <xTaskIncrementTick>
   1303a:	e8 cd b4 ff ff       	callq  e50c <vTaskSwitchContext>
   1303f:	e8 3a c6 ff ff       	callq  f67e <xTaskGetCurrentTaskHandle>
   13044:	48 89 c7             	mov    %rax,%rdi
   13047:	e8 14 fa ff ff       	callq  12a60 <prvGetThreadFromTask>
   1304c:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
   13050:	48 8b 55 f0          	mov    -0x10(%rbp),%rdx
   13054:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   13058:	48 89 d6             	mov    %rdx,%rsi
   1305b:	48 89 c7             	mov    %rax,%rdi
   1305e:	e8 ff 00 00 00       	callq  13162 <prvSwitchThread>
   13063:	48 8b 05 9e 2d 12 00 	mov    0x122d9e(%rip),%rax        # 135e08 <uxCriticalNesting>
   1306a:	48 83 e8 01          	sub    $0x1,%rax
   1306e:	48 89 05 93 2d 12 00 	mov    %rax,0x122d93(%rip)        # 135e08 <uxCriticalNesting>
   13075:	90                   	nop
   13076:	c9                   	leaveq 
   13077:	c3                   	retq   

0000000000013078 <vPortThreadDying>:
   13078:	f3 0f 1e fa          	endbr64 
   1307c:	55                   	push   %rbp
   1307d:	48 89 e5             	mov    %rsp,%rbp
   13080:	48 83 ec 20          	sub    $0x20,%rsp
   13084:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
   13088:	48 89 75 e0          	mov    %rsi,-0x20(%rbp)
   1308c:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
   13090:	48 89 c7             	mov    %rax,%rdi
   13093:	e8 c8 f9 ff ff       	callq  12a60 <prvGetThreadFromTask>
   13098:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
   1309c:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   130a0:	48 c7 40 18 01 00 00 	movq   $0x1,0x18(%rax)
   130a7:	00 
   130a8:	90                   	nop
   130a9:	c9                   	leaveq 
   130aa:	c3                   	retq   

00000000000130ab <vPortCancelThread>:
   130ab:	f3 0f 1e fa          	endbr64 
   130af:	55                   	push   %rbp
   130b0:	48 89 e5             	mov    %rsp,%rbp
   130b3:	48 83 ec 20          	sub    $0x20,%rsp
   130b7:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
   130bb:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
   130bf:	48 89 c7             	mov    %rax,%rdi
   130c2:	e8 99 f9 ff ff       	callq  12a60 <prvGetThreadFromTask>
   130c7:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
   130cb:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   130cf:	48 8b 00             	mov    (%rax),%rax
   130d2:	48 89 c7             	mov    %rax,%rdi
   130d5:	e8 56 f3 fe ff       	callq  2430 <pthread_cancel@plt>
   130da:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   130de:	48 8b 00             	mov    (%rax),%rax
   130e1:	be 00 00 00 00       	mov    $0x0,%esi
   130e6:	48 89 c7             	mov    %rax,%rdi
   130e9:	e8 a2 f5 fe ff       	callq  2690 <pthread_join@plt>
   130ee:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   130f2:	48 8b 40 20          	mov    0x20(%rax),%rax
   130f6:	48 89 c7             	mov    %rax,%rdi
   130f9:	e8 4d f7 ff ff       	callq  1284b <event_delete>
   130fe:	90                   	nop
   130ff:	c9                   	leaveq 
   13100:	c3                   	retq   

0000000000013101 <prvWaitForStart>:
   13101:	f3 0f 1e fa          	endbr64 
   13105:	55                   	push   %rbp
   13106:	48 89 e5             	mov    %rsp,%rbp
   13109:	48 83 ec 20          	sub    $0x20,%rsp
   1310d:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
   13111:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
   13115:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
   13119:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   1311d:	48 89 c7             	mov    %rax,%rdi
   13120:	e8 a3 00 00 00       	callq  131c8 <prvSuspendSelf>
   13125:	48 c7 05 d8 2c 12 00 	movq   $0x0,0x122cd8(%rip)        # 135e08 <uxCriticalNesting>
   1312c:	00 00 00 00 
   13130:	e8 7a fd ff ff       	callq  12eaf <vPortEnableInterrupts>
   13135:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   13139:	48 8b 50 08          	mov    0x8(%rax),%rdx
   1313d:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   13141:	48 8b 40 10          	mov    0x10(%rax),%rax
   13145:	48 89 c7             	mov    %rax,%rdi
   13148:	ff d2                	callq  *%rdx
   1314a:	be bc 01 00 00       	mov    $0x1bc,%esi
   1314f:	48 8d 3d da 48 01 00 	lea    0x148da(%rip),%rdi        # 27a30 <_IO_stdin_used+0xa30>
   13156:	e8 b1 0b ff ff       	callq  3d0c <vAssertCalled>
   1315b:	b8 00 00 00 00       	mov    $0x0,%eax
   13160:	c9                   	leaveq 
   13161:	c3                   	retq   

0000000000013162 <prvSwitchThread>:
   13162:	f3 0f 1e fa          	endbr64 
   13166:	55                   	push   %rbp
   13167:	48 89 e5             	mov    %rsp,%rbp
   1316a:	48 83 ec 20          	sub    $0x20,%rsp
   1316e:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
   13172:	48 89 75 e0          	mov    %rsi,-0x20(%rbp)
   13176:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
   1317a:	48 3b 45 e8          	cmp    -0x18(%rbp),%rax
   1317e:	74 45                	je     131c5 <prvSwitchThread+0x63>
   13180:	48 8b 05 81 2c 12 00 	mov    0x122c81(%rip),%rax        # 135e08 <uxCriticalNesting>
   13187:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
   1318b:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
   1318f:	48 89 c7             	mov    %rax,%rdi
   13192:	e8 54 00 00 00       	callq  131eb <prvResumeThread>
   13197:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
   1319b:	48 8b 40 18          	mov    0x18(%rax),%rax
   1319f:	48 85 c0             	test   %rax,%rax
   131a2:	74 0a                	je     131ae <prvSwitchThread+0x4c>
   131a4:	bf 00 00 00 00       	mov    $0x0,%edi
   131a9:	e8 32 f4 fe ff       	callq  25e0 <pthread_exit@plt>
   131ae:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
   131b2:	48 89 c7             	mov    %rax,%rdi
   131b5:	e8 0e 00 00 00       	callq  131c8 <prvSuspendSelf>
   131ba:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   131be:	48 89 05 43 2c 12 00 	mov    %rax,0x122c43(%rip)        # 135e08 <uxCriticalNesting>
   131c5:	90                   	nop
   131c6:	c9                   	leaveq 
   131c7:	c3                   	retq   

00000000000131c8 <prvSuspendSelf>:
   131c8:	f3 0f 1e fa          	endbr64 
   131cc:	55                   	push   %rbp
   131cd:	48 89 e5             	mov    %rsp,%rbp
   131d0:	48 83 ec 10          	sub    $0x10,%rsp
   131d4:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   131d8:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   131dc:	48 8b 40 20          	mov    0x20(%rax),%rax
   131e0:	48 89 c7             	mov    %rax,%rdi
   131e3:	e8 9e f6 ff ff       	callq  12886 <event_wait>
   131e8:	90                   	nop
   131e9:	c9                   	leaveq 
   131ea:	c3                   	retq   

00000000000131eb <prvResumeThread>:
   131eb:	f3 0f 1e fa          	endbr64 
   131ef:	55                   	push   %rbp
   131f0:	48 89 e5             	mov    %rsp,%rbp
   131f3:	48 83 ec 10          	sub    $0x10,%rsp
   131f7:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   131fb:	e8 20 f4 fe ff       	callq  2620 <pthread_self@plt>
   13200:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
   13204:	48 8b 12             	mov    (%rdx),%rdx
   13207:	48 39 d0             	cmp    %rdx,%rax
   1320a:	74 10                	je     1321c <prvResumeThread+0x31>
   1320c:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   13210:	48 8b 40 20          	mov    0x20(%rax),%rax
   13214:	48 89 c7             	mov    %rax,%rdi
   13217:	e8 01 f8 ff ff       	callq  12a1d <event_signal>
   1321c:	90                   	nop
   1321d:	c9                   	leaveq 
   1321e:	c3                   	retq   

000000000001321f <prvSetupSignalsAndSchedulerPolicy>:
   1321f:	f3 0f 1e fa          	endbr64 
   13223:	55                   	push   %rbp
   13224:	48 89 e5             	mov    %rsp,%rbp
   13227:	48 81 ec 50 01 00 00 	sub    $0x150,%rsp
   1322e:	64 48 8b 04 25 28 00 	mov    %fs:0x28,%rax
   13235:	00 00 
   13237:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
   1323b:	31 c0                	xor    %eax,%eax
   1323d:	e8 de f3 fe ff       	callq  2620 <pthread_self@plt>
   13242:	48 89 05 b7 2b 12 00 	mov    %rax,0x122bb7(%rip)        # 135e00 <hMainThread>
   13249:	48 8d 3d 30 2a 12 00 	lea    0x122a30(%rip),%rdi        # 135c80 <xResumeSignals>
   13250:	e8 3b f3 fe ff       	callq  2590 <sigemptyset@plt>
   13255:	be 0a 00 00 00       	mov    $0xa,%esi
   1325a:	48 8d 3d 1f 2a 12 00 	lea    0x122a1f(%rip),%rdi        # 135c80 <xResumeSignals>
   13261:	e8 9a f4 fe ff       	callq  2700 <sigaddset@plt>
   13266:	48 8d 3d 93 2a 12 00 	lea    0x122a93(%rip),%rdi        # 135d00 <xAllSignals>
   1326d:	e8 2e f3 fe ff       	callq  25a0 <sigfillset@plt>
   13272:	be 02 00 00 00       	mov    $0x2,%esi
   13277:	48 8d 3d 82 2a 12 00 	lea    0x122a82(%rip),%rdi        # 135d00 <xAllSignals>
   1327e:	e8 ed f3 fe ff       	callq  2670 <sigdelset@plt>
   13283:	48 8d 15 f6 2a 12 00 	lea    0x122af6(%rip),%rdx        # 135d80 <xSchedulerOriginalSignalMask>
   1328a:	48 8d 35 6f 2a 12 00 	lea    0x122a6f(%rip),%rsi        # 135d00 <xAllSignals>
   13291:	bf 02 00 00 00       	mov    $0x2,%edi
   13296:	e8 45 f1 fe ff       	callq  23e0 <pthread_sigmask@plt>
   1329b:	c7 85 48 ff ff ff 00 	movl   $0x0,-0xb8(%rbp)
   132a2:	00 00 00 
   132a5:	48 c7 85 c0 fe ff ff 	movq   $0x1,-0x140(%rbp)
   132ac:	01 00 00 00 
   132b0:	48 8d 85 c0 fe ff ff 	lea    -0x140(%rbp),%rax
   132b7:	48 83 c0 08          	add    $0x8,%rax
   132bb:	48 89 c7             	mov    %rax,%rdi
   132be:	e8 dd f2 fe ff       	callq  25a0 <sigfillset@plt>
   132c3:	c7 45 e8 00 00 00 00 	movl   $0x0,-0x18(%rbp)
   132ca:	48 8d 05 32 fd ff ff 	lea    -0x2ce(%rip),%rax        # 13003 <vPortSystemTickHandler>
   132d1:	48 89 85 60 ff ff ff 	mov    %rax,-0xa0(%rbp)
   132d8:	48 8d 85 60 ff ff ff 	lea    -0xa0(%rbp),%rax
   132df:	48 83 c0 08          	add    $0x8,%rax
   132e3:	48 89 c7             	mov    %rax,%rdi
   132e6:	e8 b5 f2 fe ff       	callq  25a0 <sigfillset@plt>
   132eb:	48 8d 85 c0 fe ff ff 	lea    -0x140(%rbp),%rax
   132f2:	ba 00 00 00 00       	mov    $0x0,%edx
   132f7:	48 89 c6             	mov    %rax,%rsi
   132fa:	bf 0a 00 00 00       	mov    $0xa,%edi
   132ff:	e8 4c f1 fe ff       	callq  2450 <sigaction@plt>
   13304:	89 85 bc fe ff ff    	mov    %eax,-0x144(%rbp)
   1330a:	83 bd bc fe ff ff 00 	cmpl   $0x0,-0x144(%rbp)
   13311:	74 15                	je     13328 <prvSetupSignalsAndSchedulerPolicy+0x109>
   13313:	e8 e8 f0 fe ff       	callq  2400 <__errno_location@plt>
   13318:	8b 00                	mov    (%rax),%eax
   1331a:	89 c6                	mov    %eax,%esi
   1331c:	48 8d 3d 5f 47 01 00 	lea    0x1475f(%rip),%rdi        # 27a82 <_IO_stdin_used+0xa82>
   13323:	e8 55 f7 ff ff       	callq  12a7d <prvFatalError>
   13328:	48 8d 85 60 ff ff ff 	lea    -0xa0(%rbp),%rax
   1332f:	ba 00 00 00 00       	mov    $0x0,%edx
   13334:	48 89 c6             	mov    %rax,%rsi
   13337:	bf 0e 00 00 00       	mov    $0xe,%edi
   1333c:	e8 0f f1 fe ff       	callq  2450 <sigaction@plt>
   13341:	89 85 bc fe ff ff    	mov    %eax,-0x144(%rbp)
   13347:	83 bd bc fe ff ff 00 	cmpl   $0x0,-0x144(%rbp)
   1334e:	74 15                	je     13365 <prvSetupSignalsAndSchedulerPolicy+0x146>
   13350:	e8 ab f0 fe ff       	callq  2400 <__errno_location@plt>
   13355:	8b 00                	mov    (%rax),%eax
   13357:	89 c6                	mov    %eax,%esi
   13359:	48 8d 3d 22 47 01 00 	lea    0x14722(%rip),%rdi        # 27a82 <_IO_stdin_used+0xa82>
   13360:	e8 18 f7 ff ff       	callq  12a7d <prvFatalError>
   13365:	90                   	nop
   13366:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   1336a:	64 48 33 04 25 28 00 	xor    %fs:0x28,%rax
   13371:	00 00 
   13373:	74 05                	je     1337a <prvSetupSignalsAndSchedulerPolicy+0x15b>
   13375:	e8 56 f1 fe ff       	callq  24d0 <__stack_chk_fail@plt>
   1337a:	c9                   	leaveq 
   1337b:	c3                   	retq   

000000000001337c <ulPortGetRunTime>:
   1337c:	f3 0f 1e fa          	endbr64 
   13380:	55                   	push   %rbp
   13381:	48 89 e5             	mov    %rsp,%rbp
   13384:	48 83 ec 30          	sub    $0x30,%rsp
   13388:	64 48 8b 04 25 28 00 	mov    %fs:0x28,%rax
   1338f:	00 00 
   13391:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
   13395:	31 c0                	xor    %eax,%eax
   13397:	48 8d 45 d0          	lea    -0x30(%rbp),%rax
   1339b:	48 89 c7             	mov    %rax,%rdi
   1339e:	e8 ad f2 fe ff       	callq  2650 <times@plt>
   133a3:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
   133a7:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
   133ab:	64 48 33 14 25 28 00 	xor    %fs:0x28,%rdx
   133b2:	00 00 
   133b4:	74 05                	je     133bb <ulPortGetRunTime+0x3f>
   133b6:	e8 15 f1 fe ff       	callq  24d0 <__stack_chk_fail@plt>
   133bb:	c9                   	leaveq 
   133bc:	c3                   	retq   

00000000000133bd <vCreateAbortDelayTasks>:
   133bd:	f3 0f 1e fa          	endbr64 
   133c1:	55                   	push   %rbp
   133c2:	48 89 e5             	mov    %rsp,%rbp
   133c5:	48 8b 05 6c dc 01 00 	mov    0x1dc6c(%rip),%rax        # 31038 <pcControllingTaskName>
   133cc:	41 b9 00 00 00 00    	mov    $0x0,%r9d
   133d2:	41 b8 04 00 00 00    	mov    $0x4,%r8d
   133d8:	b9 00 00 00 00       	mov    $0x0,%ecx
   133dd:	ba 46 00 00 00       	mov    $0x46,%edx
   133e2:	48 89 c6             	mov    %rax,%rsi
   133e5:	48 8d 3d 34 00 00 00 	lea    0x34(%rip),%rdi        # 13420 <prvControllingTask>
   133ec:	e8 06 89 ff ff       	callq  bcf7 <xTaskCreate>
   133f1:	48 8b 05 48 dc 01 00 	mov    0x1dc48(%rip),%rax        # 31040 <pcBlockingTaskName>
   133f8:	41 b9 00 00 00 00    	mov    $0x0,%r9d
   133fe:	41 b8 05 00 00 00    	mov    $0x5,%r8d
   13404:	b9 00 00 00 00       	mov    $0x0,%ecx
   13409:	ba 46 00 00 00       	mov    $0x46,%edx
   1340e:	48 89 c6             	mov    %rax,%rsi
   13411:	48 8d 3d 2e 01 00 00 	lea    0x12e(%rip),%rdi        # 13546 <prvBlockingTask>
   13418:	e8 da 88 ff ff       	callq  bcf7 <xTaskCreate>
   1341d:	90                   	nop
   1341e:	5d                   	pop    %rbp
   1341f:	c3                   	retq   

0000000000013420 <prvControllingTask>:
   13420:	f3 0f 1e fa          	endbr64 
   13424:	55                   	push   %rbp
   13425:	48 89 e5             	mov    %rsp,%rbp
   13428:	48 83 ec 30          	sub    $0x30,%rsp
   1342c:	48 89 7d d8          	mov    %rdi,-0x28(%rbp)
   13430:	c7 45 e4 00 00 00 00 	movl   $0x0,-0x1c(%rbp)
   13437:	48 c7 45 e8 02 00 00 	movq   $0x2,-0x18(%rbp)
   1343e:	00 
   1343f:	48 8b 05 fa db 01 00 	mov    0x1dbfa(%rip),%rax        # 31040 <pcBlockingTaskName>
   13446:	48 89 c7             	mov    %rax,%rdi
   13449:	e8 3f a6 ff ff       	callq  da8d <xTaskGetHandle>
   1344e:	48 89 45 f0          	mov    %rax,-0x10(%rbp)
   13452:	48 83 7d f0 00       	cmpq   $0x0,-0x10(%rbp)
   13457:	75 11                	jne    1346a <prvControllingTask+0x4a>
   13459:	be 9d 00 00 00       	mov    $0x9d,%esi
   1345e:	48 8d 3d 53 46 01 00 	lea    0x14653(%rip),%rdi        # 27ab8 <xAllowableMargin+0x8>
   13465:	e8 a2 08 ff ff       	callq  3d0c <vAssertCalled>
   1346a:	e8 29 a4 ff ff       	callq  d898 <xTaskGetTickCount>
   1346f:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
   13473:	8b 55 e4             	mov    -0x1c(%rbp),%edx
   13476:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
   1347a:	41 b8 00 00 00 00    	mov    $0x0,%r8d
   13480:	b9 03 00 00 00       	mov    $0x3,%ecx
   13485:	be 00 00 00 00       	mov    $0x0,%esi
   1348a:	48 89 c7             	mov    %rax,%rdi
   1348d:	e8 09 d0 ff ff       	callq  1049b <xTaskGenericNotify>
   13492:	be 05 00 00 00       	mov    $0x5,%esi
   13497:	bf 00 00 00 00       	mov    $0x0,%edi
   1349c:	e8 9b 95 ff ff       	callq  ca3c <vTaskPrioritySet>
   134a1:	ba 64 00 00 00       	mov    $0x64,%edx
   134a6:	b8 32 00 00 00       	mov    $0x32,%eax
   134ab:	48 01 c2             	add    %rax,%rdx
   134ae:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
   134b2:	48 01 d0             	add    %rdx,%rax
   134b5:	48 89 c7             	mov    %rax,%rdi
   134b8:	e8 e5 92 ff ff       	callq  c7a2 <vTaskDelay>
   134bd:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
   134c1:	48 89 c7             	mov    %rax,%rdi
   134c4:	e8 e2 a8 ff ff       	callq  ddab <xTaskAbortDelay>
   134c9:	48 83 f8 01          	cmp    $0x1,%rax
   134cd:	74 0b                	je     134da <prvControllingTask+0xba>
   134cf:	48 c7 05 56 29 12 00 	movq   $0x1,0x122956(%rip)        # 135e30 <xErrorOccurred>
   134d6:	01 00 00 00 
   134da:	be 04 00 00 00       	mov    $0x4,%esi
   134df:	bf 00 00 00 00       	mov    $0x0,%edi
   134e4:	e8 53 95 ff ff       	callq  ca3c <vTaskPrioritySet>
   134e9:	48 c7 c2 ff ff ff ff 	mov    $0xffffffffffffffff,%rdx
   134f0:	be 01 00 00 00       	mov    $0x1,%esi
   134f5:	bf 00 00 00 00       	mov    $0x0,%edi
   134fa:	e8 a7 ca ff ff       	callq  ffa6 <ulTaskGenericNotifyTake>
   134ff:	b8 64 00 00 00       	mov    $0x64,%eax
   13504:	48 01 c0             	add    %rax,%rax
   13507:	ba 32 00 00 00       	mov    $0x32,%edx
   1350c:	48 01 c2             	add    %rax,%rdx
   1350f:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   13513:	48 89 d6             	mov    %rdx,%rsi
   13516:	48 89 c7             	mov    %rax,%rdi
   13519:	e8 33 0a 00 00       	callq  13f51 <prvCheckExpectedTimeIsWithinAnAcceptableMargin>
   1351e:	83 45 e4 01          	addl   $0x1,-0x1c(%rbp)
   13522:	83 7d e4 07          	cmpl   $0x7,-0x1c(%rbp)
   13526:	76 07                	jbe    1352f <prvControllingTask+0x10f>
   13528:	c7 45 e4 00 00 00 00 	movl   $0x0,-0x1c(%rbp)
   1352f:	48 8b 05 ea 28 12 00 	mov    0x1228ea(%rip),%rax        # 135e20 <xControllingCycles>
   13536:	48 83 c0 01          	add    $0x1,%rax
   1353a:	48 89 05 df 28 12 00 	mov    %rax,0x1228df(%rip)        # 135e20 <xControllingCycles>
   13541:	e9 24 ff ff ff       	jmpq   1346a <prvControllingTask+0x4a>

0000000000013546 <prvBlockingTask>:
   13546:	f3 0f 1e fa          	endbr64 
   1354a:	55                   	push   %rbp
   1354b:	48 89 e5             	mov    %rsp,%rbp
   1354e:	48 83 ec 30          	sub    $0x30,%rsp
   13552:	48 89 7d d8          	mov    %rdi,-0x28(%rbp)
   13556:	64 48 8b 04 25 28 00 	mov    %fs:0x28,%rax
   1355d:	00 00 
   1355f:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
   13563:	31 c0                	xor    %eax,%eax
   13565:	c7 45 ec ff ff ff ff 	movl   $0xffffffff,-0x14(%rbp)
   1356c:	e8 e9 00 00 00       	callq  1365a <prvPerformSingleTaskTests>
   13571:	48 8b 05 c0 da 01 00 	mov    0x1dac0(%rip),%rax        # 31038 <pcControllingTaskName>
   13578:	48 89 c7             	mov    %rax,%rdi
   1357b:	e8 0d a5 ff ff       	callq  da8d <xTaskGetHandle>
   13580:	48 89 45 f0          	mov    %rax,-0x10(%rbp)
   13584:	48 83 7d f0 00       	cmpq   $0x0,-0x10(%rbp)
   13589:	75 11                	jne    1359c <prvBlockingTask+0x56>
   1358b:	be e0 00 00 00       	mov    $0xe0,%esi
   13590:	48 8d 3d 21 45 01 00 	lea    0x14521(%rip),%rdi        # 27ab8 <xAllowableMargin+0x8>
   13597:	e8 70 07 ff ff       	callq  3d0c <vAssertCalled>
   1359c:	48 8d 55 e8          	lea    -0x18(%rbp),%rdx
   135a0:	8b 45 ec             	mov    -0x14(%rbp),%eax
   135a3:	49 c7 c0 ff ff ff ff 	mov    $0xffffffffffffffff,%r8
   135aa:	48 89 d1             	mov    %rdx,%rcx
   135ad:	89 c2                	mov    %eax,%edx
   135af:	be 00 00 00 00       	mov    $0x0,%esi
   135b4:	bf 00 00 00 00       	mov    $0x0,%edi
   135b9:	e8 76 cc ff ff       	callq  10234 <xTaskGenericNotifyWait>
   135be:	8b 45 e8             	mov    -0x18(%rbp),%eax
   135c1:	83 f8 07             	cmp    $0x7,%eax
   135c4:	77 5b                	ja     13621 <prvBlockingTask+0xdb>
   135c6:	89 c0                	mov    %eax,%eax
   135c8:	48 8d 14 85 00 00 00 	lea    0x0(,%rax,4),%rdx
   135cf:	00 
   135d0:	48 8d 05 29 45 01 00 	lea    0x14529(%rip),%rax        # 27b00 <xAllowableMargin+0x50>
   135d7:	8b 04 02             	mov    (%rdx,%rax,1),%eax
   135da:	48 98                	cltq   
   135dc:	48 8d 15 1d 45 01 00 	lea    0x1451d(%rip),%rdx        # 27b00 <xAllowableMargin+0x50>
   135e3:	48 01 d0             	add    %rdx,%rax
   135e6:	3e ff e0             	notrack jmpq *%rax
   135e9:	e8 59 08 00 00       	callq  13e47 <prvTestAbortingTaskNotifyWait>
   135ee:	eb 32                	jmp    13622 <prvBlockingTask+0xdc>
   135f0:	e8 41 02 00 00       	callq  13836 <prvTestAbortingTaskNotifyTake>
   135f5:	eb 2b                	jmp    13622 <prvBlockingTask+0xdc>
   135f7:	e8 ad 01 00 00       	callq  137a9 <prvTestAbortingTaskDelay>
   135fc:	eb 24                	jmp    13622 <prvBlockingTask+0xdc>
   135fe:	e8 91 00 00 00       	callq  13694 <prvTestAbortingTaskDelayUntil>
   13603:	eb 1d                	jmp    13622 <prvBlockingTask+0xdc>
   13605:	e8 29 07 00 00       	callq  13d33 <prvTestAbortingSemaphoreTake>
   1360a:	eb 16                	jmp    13622 <prvBlockingTask+0xdc>
   1360c:	e8 0c 03 00 00       	callq  1391d <prvTestAbortingEventGroupWait>
   13611:	eb 0f                	jmp    13622 <prvBlockingTask+0xdc>
   13613:	e8 95 05 00 00       	callq  13bad <prvTestAbortingQueueSend>
   13618:	eb 08                	jmp    13622 <prvBlockingTask+0xdc>
   1361a:	e8 30 04 00 00       	callq  13a4f <prvTestAbortingStreamBufferReceive>
   1361f:	eb 01                	jmp    13622 <prvBlockingTask+0xdc>
   13621:	90                   	nop
   13622:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
   13626:	41 b8 00 00 00 00    	mov    $0x0,%r8d
   1362c:	b9 02 00 00 00       	mov    $0x2,%ecx
   13631:	ba 00 00 00 00       	mov    $0x0,%edx
   13636:	be 00 00 00 00       	mov    $0x0,%esi
   1363b:	48 89 c7             	mov    %rax,%rdi
   1363e:	e8 58 ce ff ff       	callq  1049b <xTaskGenericNotify>
   13643:	48 8b 05 de 27 12 00 	mov    0x1227de(%rip),%rax        # 135e28 <xBlockingCycles>
   1364a:	48 83 c0 01          	add    $0x1,%rax
   1364e:	48 89 05 d3 27 12 00 	mov    %rax,0x1227d3(%rip)        # 135e28 <xBlockingCycles>
   13655:	e9 42 ff ff ff       	jmpq   1359c <prvBlockingTask+0x56>

000000000001365a <prvPerformSingleTaskTests>:
   1365a:	f3 0f 1e fa          	endbr64 
   1365e:	55                   	push   %rbp
   1365f:	48 89 e5             	mov    %rsp,%rbp
   13662:	48 83 ec 10          	sub    $0x10,%rsp
   13666:	e8 13 c0 ff ff       	callq  f67e <xTaskGetCurrentTaskHandle>
   1366b:	48 89 45 f0          	mov    %rax,-0x10(%rbp)
   1366f:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
   13673:	48 89 c7             	mov    %rax,%rdi
   13676:	e8 30 a7 ff ff       	callq  ddab <xTaskAbortDelay>
   1367b:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
   1367f:	48 83 7d f8 00       	cmpq   $0x0,-0x8(%rbp)
   13684:	74 0b                	je     13691 <prvPerformSingleTaskTests+0x37>
   13686:	48 c7 05 9f 27 12 00 	movq   $0x1,0x12279f(%rip)        # 135e30 <xErrorOccurred>
   1368d:	01 00 00 00 
   13691:	90                   	nop
   13692:	c9                   	leaveq 
   13693:	c3                   	retq   

0000000000013694 <prvTestAbortingTaskDelayUntil>:
   13694:	f3 0f 1e fa          	endbr64 
   13698:	55                   	push   %rbp
   13699:	48 89 e5             	mov    %rsp,%rbp
   1369c:	48 83 ec 20          	sub    $0x20,%rsp
   136a0:	64 48 8b 04 25 28 00 	mov    %fs:0x28,%rax
   136a7:	00 00 
   136a9:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
   136ad:	31 c0                	xor    %eax,%eax
   136af:	e8 e4 a1 ff ff       	callq  d898 <xTaskGetTickCount>
   136b4:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
   136b8:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
   136bc:	48 89 45 e0          	mov    %rax,-0x20(%rbp)
   136c0:	ba 64 00 00 00       	mov    $0x64,%edx
   136c5:	48 8d 45 e0          	lea    -0x20(%rbp),%rax
   136c9:	48 89 d6             	mov    %rdx,%rsi
   136cc:	48 89 c7             	mov    %rax,%rdi
   136cf:	e8 38 8f ff ff       	callq  c60c <xTaskDelayUntil>
   136d4:	48 89 45 f0          	mov    %rax,-0x10(%rbp)
   136d8:	ba 64 00 00 00       	mov    $0x64,%edx
   136dd:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
   136e1:	48 89 d6             	mov    %rdx,%rsi
   136e4:	48 89 c7             	mov    %rax,%rdi
   136e7:	e8 65 08 00 00       	callq  13f51 <prvCheckExpectedTimeIsWithinAnAcceptableMargin>
   136ec:	48 83 7d f0 01       	cmpq   $0x1,-0x10(%rbp)
   136f1:	74 11                	je     13704 <prvTestAbortingTaskDelayUntil+0x70>
   136f3:	be 39 01 00 00       	mov    $0x139,%esi
   136f8:	48 8d 3d b9 43 01 00 	lea    0x143b9(%rip),%rdi        # 27ab8 <xAllowableMargin+0x8>
   136ff:	e8 08 06 ff ff       	callq  3d0c <vAssertCalled>
   13704:	e8 8f a1 ff ff       	callq  d898 <xTaskGetTickCount>
   13709:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
   1370d:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
   13711:	48 89 45 e0          	mov    %rax,-0x20(%rbp)
   13715:	ba 64 00 00 00       	mov    $0x64,%edx
   1371a:	48 8d 45 e0          	lea    -0x20(%rbp),%rax
   1371e:	48 89 d6             	mov    %rdx,%rsi
   13721:	48 89 c7             	mov    %rax,%rdi
   13724:	e8 e3 8e ff ff       	callq  c60c <xTaskDelayUntil>
   13729:	ba 32 00 00 00       	mov    $0x32,%edx
   1372e:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
   13732:	48 89 d6             	mov    %rdx,%rsi
   13735:	48 89 c7             	mov    %rax,%rdi
   13738:	e8 14 08 00 00       	callq  13f51 <prvCheckExpectedTimeIsWithinAnAcceptableMargin>
   1373d:	e8 56 a1 ff ff       	callq  d898 <xTaskGetTickCount>
   13742:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
   13746:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
   1374a:	48 89 45 e0          	mov    %rax,-0x20(%rbp)
   1374e:	ba 64 00 00 00       	mov    $0x64,%edx
   13753:	48 8d 45 e0          	lea    -0x20(%rbp),%rax
   13757:	48 89 d6             	mov    %rdx,%rsi
   1375a:	48 89 c7             	mov    %rax,%rdi
   1375d:	e8 aa 8e ff ff       	callq  c60c <xTaskDelayUntil>
   13762:	48 89 45 f0          	mov    %rax,-0x10(%rbp)
   13766:	ba 64 00 00 00       	mov    $0x64,%edx
   1376b:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
   1376f:	48 89 d6             	mov    %rdx,%rsi
   13772:	48 89 c7             	mov    %rax,%rdi
   13775:	e8 d7 07 00 00       	callq  13f51 <prvCheckExpectedTimeIsWithinAnAcceptableMargin>
   1377a:	48 83 7d f0 01       	cmpq   $0x1,-0x10(%rbp)
   1377f:	74 11                	je     13792 <prvTestAbortingTaskDelayUntil+0xfe>
   13781:	be 4e 01 00 00       	mov    $0x14e,%esi
   13786:	48 8d 3d 2b 43 01 00 	lea    0x1432b(%rip),%rdi        # 27ab8 <xAllowableMargin+0x8>
   1378d:	e8 7a 05 ff ff       	callq  3d0c <vAssertCalled>
   13792:	90                   	nop
   13793:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   13797:	64 48 33 04 25 28 00 	xor    %fs:0x28,%rax
   1379e:	00 00 
   137a0:	74 05                	je     137a7 <prvTestAbortingTaskDelayUntil+0x113>
   137a2:	e8 29 ed fe ff       	callq  24d0 <__stack_chk_fail@plt>
   137a7:	c9                   	leaveq 
   137a8:	c3                   	retq   

00000000000137a9 <prvTestAbortingTaskDelay>:
   137a9:	f3 0f 1e fa          	endbr64 
   137ad:	55                   	push   %rbp
   137ae:	48 89 e5             	mov    %rsp,%rbp
   137b1:	48 83 ec 10          	sub    $0x10,%rsp
   137b5:	e8 de a0 ff ff       	callq  d898 <xTaskGetTickCount>
   137ba:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
   137be:	b8 64 00 00 00       	mov    $0x64,%eax
   137c3:	48 89 c7             	mov    %rax,%rdi
   137c6:	e8 d7 8f ff ff       	callq  c7a2 <vTaskDelay>
   137cb:	ba 64 00 00 00       	mov    $0x64,%edx
   137d0:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   137d4:	48 89 d6             	mov    %rdx,%rsi
   137d7:	48 89 c7             	mov    %rax,%rdi
   137da:	e8 72 07 00 00       	callq  13f51 <prvCheckExpectedTimeIsWithinAnAcceptableMargin>
   137df:	e8 b4 a0 ff ff       	callq  d898 <xTaskGetTickCount>
   137e4:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
   137e8:	b8 64 00 00 00       	mov    $0x64,%eax
   137ed:	48 89 c7             	mov    %rax,%rdi
   137f0:	e8 ad 8f ff ff       	callq  c7a2 <vTaskDelay>
   137f5:	ba 32 00 00 00       	mov    $0x32,%edx
   137fa:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   137fe:	48 89 d6             	mov    %rdx,%rsi
   13801:	48 89 c7             	mov    %rax,%rdi
   13804:	e8 48 07 00 00       	callq  13f51 <prvCheckExpectedTimeIsWithinAnAcceptableMargin>
   13809:	e8 8a a0 ff ff       	callq  d898 <xTaskGetTickCount>
   1380e:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
   13812:	b8 64 00 00 00       	mov    $0x64,%eax
   13817:	48 89 c7             	mov    %rax,%rdi
   1381a:	e8 83 8f ff ff       	callq  c7a2 <vTaskDelay>
   1381f:	ba 64 00 00 00       	mov    $0x64,%edx
   13824:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   13828:	48 89 d6             	mov    %rdx,%rsi
   1382b:	48 89 c7             	mov    %rax,%rdi
   1382e:	e8 1e 07 00 00       	callq  13f51 <prvCheckExpectedTimeIsWithinAnAcceptableMargin>
   13833:	90                   	nop
   13834:	c9                   	leaveq 
   13835:	c3                   	retq   

0000000000013836 <prvTestAbortingTaskNotifyTake>:
   13836:	f3 0f 1e fa          	endbr64 
   1383a:	55                   	push   %rbp
   1383b:	48 89 e5             	mov    %rsp,%rbp
   1383e:	48 83 ec 10          	sub    $0x10,%rsp
   13842:	e8 51 a0 ff ff       	callq  d898 <xTaskGetTickCount>
   13847:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
   1384b:	b8 64 00 00 00       	mov    $0x64,%eax
   13850:	48 89 c2             	mov    %rax,%rdx
   13853:	be 00 00 00 00       	mov    $0x0,%esi
   13858:	bf 00 00 00 00       	mov    $0x0,%edi
   1385d:	e8 44 c7 ff ff       	callq  ffa6 <ulTaskGenericNotifyTake>
   13862:	89 45 f4             	mov    %eax,-0xc(%rbp)
   13865:	83 7d f4 00          	cmpl   $0x0,-0xc(%rbp)
   13869:	74 0b                	je     13876 <prvTestAbortingTaskNotifyTake+0x40>
   1386b:	48 c7 05 ba 25 12 00 	movq   $0x1,0x1225ba(%rip)        # 135e30 <xErrorOccurred>
   13872:	01 00 00 00 
   13876:	ba 64 00 00 00       	mov    $0x64,%edx
   1387b:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   1387f:	48 89 d6             	mov    %rdx,%rsi
   13882:	48 89 c7             	mov    %rax,%rdi
   13885:	e8 c7 06 00 00       	callq  13f51 <prvCheckExpectedTimeIsWithinAnAcceptableMargin>
   1388a:	e8 09 a0 ff ff       	callq  d898 <xTaskGetTickCount>
   1388f:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
   13893:	b8 64 00 00 00       	mov    $0x64,%eax
   13898:	48 89 c2             	mov    %rax,%rdx
   1389b:	be 00 00 00 00       	mov    $0x0,%esi
   138a0:	bf 00 00 00 00       	mov    $0x0,%edi
   138a5:	e8 fc c6 ff ff       	callq  ffa6 <ulTaskGenericNotifyTake>
   138aa:	89 45 f4             	mov    %eax,-0xc(%rbp)
   138ad:	83 7d f4 00          	cmpl   $0x0,-0xc(%rbp)
   138b1:	74 0b                	je     138be <prvTestAbortingTaskNotifyTake+0x88>
   138b3:	48 c7 05 72 25 12 00 	movq   $0x1,0x122572(%rip)        # 135e30 <xErrorOccurred>
   138ba:	01 00 00 00 
   138be:	ba 32 00 00 00       	mov    $0x32,%edx
   138c3:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   138c7:	48 89 d6             	mov    %rdx,%rsi
   138ca:	48 89 c7             	mov    %rax,%rdi
   138cd:	e8 7f 06 00 00       	callq  13f51 <prvCheckExpectedTimeIsWithinAnAcceptableMargin>
   138d2:	e8 c1 9f ff ff       	callq  d898 <xTaskGetTickCount>
   138d7:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
   138db:	b8 64 00 00 00       	mov    $0x64,%eax
   138e0:	48 89 c2             	mov    %rax,%rdx
   138e3:	be 00 00 00 00       	mov    $0x0,%esi
   138e8:	bf 00 00 00 00       	mov    $0x0,%edi
   138ed:	e8 b4 c6 ff ff       	callq  ffa6 <ulTaskGenericNotifyTake>
   138f2:	89 45 f4             	mov    %eax,-0xc(%rbp)
   138f5:	83 7d f4 00          	cmpl   $0x0,-0xc(%rbp)
   138f9:	74 0b                	je     13906 <prvTestAbortingTaskNotifyTake+0xd0>
   138fb:	48 c7 05 2a 25 12 00 	movq   $0x1,0x12252a(%rip)        # 135e30 <xErrorOccurred>
   13902:	01 00 00 00 
   13906:	ba 64 00 00 00       	mov    $0x64,%edx
   1390b:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   1390f:	48 89 d6             	mov    %rdx,%rsi
   13912:	48 89 c7             	mov    %rax,%rdi
   13915:	e8 37 06 00 00       	callq  13f51 <prvCheckExpectedTimeIsWithinAnAcceptableMargin>
   1391a:	90                   	nop
   1391b:	c9                   	leaveq 
   1391c:	c3                   	retq   

000000000001391d <prvTestAbortingEventGroupWait>:
   1391d:	f3 0f 1e fa          	endbr64 
   13921:	55                   	push   %rbp
   13922:	48 89 e5             	mov    %rsp,%rbp
   13925:	48 83 ec 20          	sub    $0x20,%rsp
   13929:	48 c7 45 e0 01 00 00 	movq   $0x1,-0x20(%rbp)
   13930:	00 
   13931:	48 8d 3d 08 25 12 00 	lea    0x122508(%rip),%rdi        # 135e40 <xEventGroupBuffer.3172>
   13938:	e8 c6 72 ff ff       	callq  ac03 <xEventGroupCreateStatic>
   1393d:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
   13941:	e8 52 9f ff ff       	callq  d898 <xTaskGetTickCount>
   13946:	48 89 45 f0          	mov    %rax,-0x10(%rbp)
   1394a:	ba 64 00 00 00       	mov    $0x64,%edx
   1394f:	48 8b 75 e0          	mov    -0x20(%rbp),%rsi
   13953:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
   13957:	49 89 d0             	mov    %rdx,%r8
   1395a:	b9 01 00 00 00       	mov    $0x1,%ecx
   1395f:	ba 01 00 00 00       	mov    $0x1,%edx
   13964:	48 89 c7             	mov    %rax,%rdi
   13967:	e8 49 78 ff ff       	callq  b1b5 <xEventGroupWaitBits>
   1396c:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
   13970:	48 83 7d f8 00       	cmpq   $0x0,-0x8(%rbp)
   13975:	74 0b                	je     13982 <prvTestAbortingEventGroupWait+0x65>
   13977:	48 c7 05 ae 24 12 00 	movq   $0x1,0x1224ae(%rip)        # 135e30 <xErrorOccurred>
   1397e:	01 00 00 00 
   13982:	ba 64 00 00 00       	mov    $0x64,%edx
   13987:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
   1398b:	48 89 d6             	mov    %rdx,%rsi
   1398e:	48 89 c7             	mov    %rax,%rdi
   13991:	e8 bb 05 00 00       	callq  13f51 <prvCheckExpectedTimeIsWithinAnAcceptableMargin>
   13996:	e8 fd 9e ff ff       	callq  d898 <xTaskGetTickCount>
   1399b:	48 89 45 f0          	mov    %rax,-0x10(%rbp)
   1399f:	ba 64 00 00 00       	mov    $0x64,%edx
   139a4:	48 8b 75 e0          	mov    -0x20(%rbp),%rsi
   139a8:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
   139ac:	49 89 d0             	mov    %rdx,%r8
   139af:	b9 01 00 00 00       	mov    $0x1,%ecx
   139b4:	ba 01 00 00 00       	mov    $0x1,%edx
   139b9:	48 89 c7             	mov    %rax,%rdi
   139bc:	e8 f4 77 ff ff       	callq  b1b5 <xEventGroupWaitBits>
   139c1:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
   139c5:	48 83 7d f8 00       	cmpq   $0x0,-0x8(%rbp)
   139ca:	74 0b                	je     139d7 <prvTestAbortingEventGroupWait+0xba>
   139cc:	48 c7 05 59 24 12 00 	movq   $0x1,0x122459(%rip)        # 135e30 <xErrorOccurred>
   139d3:	01 00 00 00 
   139d7:	ba 32 00 00 00       	mov    $0x32,%edx
   139dc:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
   139e0:	48 89 d6             	mov    %rdx,%rsi
   139e3:	48 89 c7             	mov    %rax,%rdi
   139e6:	e8 66 05 00 00       	callq  13f51 <prvCheckExpectedTimeIsWithinAnAcceptableMargin>
   139eb:	e8 a8 9e ff ff       	callq  d898 <xTaskGetTickCount>
   139f0:	48 89 45 f0          	mov    %rax,-0x10(%rbp)
   139f4:	ba 64 00 00 00       	mov    $0x64,%edx
   139f9:	48 8b 75 e0          	mov    -0x20(%rbp),%rsi
   139fd:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
   13a01:	49 89 d0             	mov    %rdx,%r8
   13a04:	b9 01 00 00 00       	mov    $0x1,%ecx
   13a09:	ba 01 00 00 00       	mov    $0x1,%edx
   13a0e:	48 89 c7             	mov    %rax,%rdi
   13a11:	e8 9f 77 ff ff       	callq  b1b5 <xEventGroupWaitBits>
   13a16:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
   13a1a:	48 83 7d f8 00       	cmpq   $0x0,-0x8(%rbp)
   13a1f:	74 0b                	je     13a2c <prvTestAbortingEventGroupWait+0x10f>
   13a21:	48 c7 05 04 24 12 00 	movq   $0x1,0x122404(%rip)        # 135e30 <xErrorOccurred>
   13a28:	01 00 00 00 
   13a2c:	ba 64 00 00 00       	mov    $0x64,%edx
   13a31:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
   13a35:	48 89 d6             	mov    %rdx,%rsi
   13a38:	48 89 c7             	mov    %rax,%rdi
   13a3b:	e8 11 05 00 00       	callq  13f51 <prvCheckExpectedTimeIsWithinAnAcceptableMargin>
   13a40:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
   13a44:	48 89 c7             	mov    %rax,%rdi
   13a47:	e8 97 7e ff ff       	callq  b8e3 <vEventGroupDelete>
   13a4c:	90                   	nop
   13a4d:	c9                   	leaveq 
   13a4e:	c3                   	retq   

0000000000013a4f <prvTestAbortingStreamBufferReceive>:
   13a4f:	f3 0f 1e fa          	endbr64 
   13a53:	55                   	push   %rbp
   13a54:	48 89 e5             	mov    %rsp,%rbp
   13a57:	48 83 c4 80          	add    $0xffffffffffffff80,%rsp
   13a5b:	64 48 8b 04 25 28 00 	mov    %fs:0x28,%rax
   13a62:	00 00 
   13a64:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
   13a68:	31 c0                	xor    %eax,%eax
   13a6a:	48 c7 45 90 01 00 00 	movq   $0x1,-0x70(%rbp)
   13a71:	00 
   13a72:	48 8d 55 b0          	lea    -0x50(%rbp),%rdx
   13a76:	48 8b 45 90          	mov    -0x70(%rbp),%rax
   13a7a:	49 89 d0             	mov    %rdx,%r8
   13a7d:	48 8d 0d fc 23 12 00 	lea    0x1223fc(%rip),%rcx        # 135e80 <ucStorageBuffer.3181>
   13a84:	ba 00 00 00 00       	mov    $0x0,%edx
   13a89:	48 89 c6             	mov    %rax,%rsi
   13a8c:	bf 09 00 00 00       	mov    $0x9,%edi
   13a91:	e8 1b 56 ff ff       	callq  90b1 <xStreamBufferGenericCreateStatic>
   13a96:	48 89 45 98          	mov    %rax,-0x68(%rbp)
   13a9a:	e8 f9 9d ff ff       	callq  d898 <xTaskGetTickCount>
   13a9f:	48 89 45 a0          	mov    %rax,-0x60(%rbp)
   13aa3:	ba 64 00 00 00       	mov    $0x64,%edx
   13aa8:	48 8d 75 8f          	lea    -0x71(%rbp),%rsi
   13aac:	48 8b 45 98          	mov    -0x68(%rbp),%rax
   13ab0:	48 89 d1             	mov    %rdx,%rcx
   13ab3:	ba 01 00 00 00       	mov    $0x1,%edx
   13ab8:	48 89 c7             	mov    %rax,%rdi
   13abb:	e8 34 64 ff ff       	callq  9ef4 <xStreamBufferReceive>
   13ac0:	48 89 45 a8          	mov    %rax,-0x58(%rbp)
   13ac4:	48 83 7d a8 00       	cmpq   $0x0,-0x58(%rbp)
   13ac9:	74 0b                	je     13ad6 <prvTestAbortingStreamBufferReceive+0x87>
   13acb:	48 c7 05 5a 23 12 00 	movq   $0x1,0x12235a(%rip)        # 135e30 <xErrorOccurred>
   13ad2:	01 00 00 00 
   13ad6:	ba 64 00 00 00       	mov    $0x64,%edx
   13adb:	48 8b 45 a0          	mov    -0x60(%rbp),%rax
   13adf:	48 89 d6             	mov    %rdx,%rsi
   13ae2:	48 89 c7             	mov    %rax,%rdi
   13ae5:	e8 67 04 00 00       	callq  13f51 <prvCheckExpectedTimeIsWithinAnAcceptableMargin>
   13aea:	e8 a9 9d ff ff       	callq  d898 <xTaskGetTickCount>
   13aef:	48 89 45 a0          	mov    %rax,-0x60(%rbp)
   13af3:	ba 64 00 00 00       	mov    $0x64,%edx
   13af8:	48 8d 75 8f          	lea    -0x71(%rbp),%rsi
   13afc:	48 8b 45 98          	mov    -0x68(%rbp),%rax
   13b00:	48 89 d1             	mov    %rdx,%rcx
   13b03:	ba 01 00 00 00       	mov    $0x1,%edx
   13b08:	48 89 c7             	mov    %rax,%rdi
   13b0b:	e8 e4 63 ff ff       	callq  9ef4 <xStreamBufferReceive>
   13b10:	48 89 45 a8          	mov    %rax,-0x58(%rbp)
   13b14:	48 83 7d a8 00       	cmpq   $0x0,-0x58(%rbp)
   13b19:	74 0b                	je     13b26 <prvTestAbortingStreamBufferReceive+0xd7>
   13b1b:	48 c7 05 0a 23 12 00 	movq   $0x1,0x12230a(%rip)        # 135e30 <xErrorOccurred>
   13b22:	01 00 00 00 
   13b26:	ba 32 00 00 00       	mov    $0x32,%edx
   13b2b:	48 8b 45 a0          	mov    -0x60(%rbp),%rax
   13b2f:	48 89 d6             	mov    %rdx,%rsi
   13b32:	48 89 c7             	mov    %rax,%rdi
   13b35:	e8 17 04 00 00       	callq  13f51 <prvCheckExpectedTimeIsWithinAnAcceptableMargin>
   13b3a:	e8 59 9d ff ff       	callq  d898 <xTaskGetTickCount>
   13b3f:	48 89 45 a0          	mov    %rax,-0x60(%rbp)
   13b43:	ba 64 00 00 00       	mov    $0x64,%edx
   13b48:	48 8d 75 8f          	lea    -0x71(%rbp),%rsi
   13b4c:	48 8b 45 98          	mov    -0x68(%rbp),%rax
   13b50:	48 89 d1             	mov    %rdx,%rcx
   13b53:	ba 01 00 00 00       	mov    $0x1,%edx
   13b58:	48 89 c7             	mov    %rax,%rdi
   13b5b:	e8 94 63 ff ff       	callq  9ef4 <xStreamBufferReceive>
   13b60:	48 89 45 a8          	mov    %rax,-0x58(%rbp)
   13b64:	48 83 7d a8 00       	cmpq   $0x0,-0x58(%rbp)
   13b69:	74 0b                	je     13b76 <prvTestAbortingStreamBufferReceive+0x127>
   13b6b:	48 c7 05 ba 22 12 00 	movq   $0x1,0x1222ba(%rip)        # 135e30 <xErrorOccurred>
   13b72:	01 00 00 00 
   13b76:	ba 64 00 00 00       	mov    $0x64,%edx
   13b7b:	48 8b 45 a0          	mov    -0x60(%rbp),%rax
   13b7f:	48 89 d6             	mov    %rdx,%rsi
   13b82:	48 89 c7             	mov    %rax,%rdi
   13b85:	e8 c7 03 00 00       	callq  13f51 <prvCheckExpectedTimeIsWithinAnAcceptableMargin>
   13b8a:	48 8b 45 98          	mov    -0x68(%rbp),%rax
   13b8e:	48 89 c7             	mov    %rax,%rdi
   13b91:	e8 b6 57 ff ff       	callq  934c <vStreamBufferDelete>
   13b96:	90                   	nop
   13b97:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   13b9b:	64 48 33 04 25 28 00 	xor    %fs:0x28,%rax
   13ba2:	00 00 
   13ba4:	74 05                	je     13bab <prvTestAbortingStreamBufferReceive+0x15c>
   13ba6:	e8 25 e9 fe ff       	callq  24d0 <__stack_chk_fail@plt>
   13bab:	c9                   	leaveq 
   13bac:	c3                   	retq   

0000000000013bad <prvTestAbortingQueueSend>:
   13bad:	f3 0f 1e fa          	endbr64 
   13bb1:	55                   	push   %rbp
   13bb2:	48 89 e5             	mov    %rsp,%rbp
   13bb5:	48 83 ec 30          	sub    $0x30,%rsp
   13bb9:	64 48 8b 04 25 28 00 	mov    %fs:0x28,%rax
   13bc0:	00 00 
   13bc2:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
   13bc6:	31 c0                	xor    %eax,%eax
   13bc8:	48 c7 45 d8 01 00 00 	movq   $0x1,-0x28(%rbp)
   13bcf:	00 
   13bd0:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
   13bd4:	41 b8 00 00 00 00    	mov    $0x0,%r8d
   13bda:	48 8d 0d bf 22 12 00 	lea    0x1222bf(%rip),%rcx        # 135ea0 <xQueueBuffer.3191>
   13be1:	48 8d 15 a1 22 12 00 	lea    0x1222a1(%rip),%rdx        # 135e89 <ucQueueStorage.3192>
   13be8:	be 01 00 00 00       	mov    $0x1,%esi
   13bed:	48 89 c7             	mov    %rax,%rdi
   13bf0:	e8 13 19 ff ff       	callq  5508 <xQueueGenericCreateStatic>
   13bf5:	48 89 45 e0          	mov    %rax,-0x20(%rbp)
   13bf9:	ba 64 00 00 00       	mov    $0x64,%edx
   13bfe:	48 8d 75 d7          	lea    -0x29(%rbp),%rsi
   13c02:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
   13c06:	b9 00 00 00 00       	mov    $0x0,%ecx
   13c0b:	48 89 c7             	mov    %rax,%rdi
   13c0e:	e8 84 21 ff ff       	callq  5d97 <xQueueGenericSend>
   13c13:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
   13c17:	48 83 7d e8 01       	cmpq   $0x1,-0x18(%rbp)
   13c1c:	74 0b                	je     13c29 <prvTestAbortingQueueSend+0x7c>
   13c1e:	48 c7 05 07 22 12 00 	movq   $0x1,0x122207(%rip)        # 135e30 <xErrorOccurred>
   13c25:	01 00 00 00 
   13c29:	e8 6a 9c ff ff       	callq  d898 <xTaskGetTickCount>
   13c2e:	48 89 45 f0          	mov    %rax,-0x10(%rbp)
   13c32:	ba 64 00 00 00       	mov    $0x64,%edx
   13c37:	48 8d 75 d7          	lea    -0x29(%rbp),%rsi
   13c3b:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
   13c3f:	b9 00 00 00 00       	mov    $0x0,%ecx
   13c44:	48 89 c7             	mov    %rax,%rdi
   13c47:	e8 4b 21 ff ff       	callq  5d97 <xQueueGenericSend>
   13c4c:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
   13c50:	48 83 7d e8 00       	cmpq   $0x0,-0x18(%rbp)
   13c55:	74 0b                	je     13c62 <prvTestAbortingQueueSend+0xb5>
   13c57:	48 c7 05 ce 21 12 00 	movq   $0x1,0x1221ce(%rip)        # 135e30 <xErrorOccurred>
   13c5e:	01 00 00 00 
   13c62:	ba 64 00 00 00       	mov    $0x64,%edx
   13c67:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
   13c6b:	48 89 d6             	mov    %rdx,%rsi
   13c6e:	48 89 c7             	mov    %rax,%rdi
   13c71:	e8 db 02 00 00       	callq  13f51 <prvCheckExpectedTimeIsWithinAnAcceptableMargin>
   13c76:	e8 1d 9c ff ff       	callq  d898 <xTaskGetTickCount>
   13c7b:	48 89 45 f0          	mov    %rax,-0x10(%rbp)
   13c7f:	ba 64 00 00 00       	mov    $0x64,%edx
   13c84:	48 8d 75 d7          	lea    -0x29(%rbp),%rsi
   13c88:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
   13c8c:	b9 00 00 00 00       	mov    $0x0,%ecx
   13c91:	48 89 c7             	mov    %rax,%rdi
   13c94:	e8 fe 20 ff ff       	callq  5d97 <xQueueGenericSend>
   13c99:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
   13c9d:	48 83 7d e8 00       	cmpq   $0x0,-0x18(%rbp)
   13ca2:	74 0b                	je     13caf <prvTestAbortingQueueSend+0x102>
   13ca4:	48 c7 05 81 21 12 00 	movq   $0x1,0x122181(%rip)        # 135e30 <xErrorOccurred>
   13cab:	01 00 00 00 
   13caf:	ba 32 00 00 00       	mov    $0x32,%edx
   13cb4:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
   13cb8:	48 89 d6             	mov    %rdx,%rsi
   13cbb:	48 89 c7             	mov    %rax,%rdi
   13cbe:	e8 8e 02 00 00       	callq  13f51 <prvCheckExpectedTimeIsWithinAnAcceptableMargin>
   13cc3:	e8 d0 9b ff ff       	callq  d898 <xTaskGetTickCount>
   13cc8:	48 89 45 f0          	mov    %rax,-0x10(%rbp)
   13ccc:	ba 64 00 00 00       	mov    $0x64,%edx
   13cd1:	48 8d 75 d7          	lea    -0x29(%rbp),%rsi
   13cd5:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
   13cd9:	b9 00 00 00 00       	mov    $0x0,%ecx
   13cde:	48 89 c7             	mov    %rax,%rdi
   13ce1:	e8 b1 20 ff ff       	callq  5d97 <xQueueGenericSend>
   13ce6:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
   13cea:	48 83 7d e8 00       	cmpq   $0x0,-0x18(%rbp)
   13cef:	74 0b                	je     13cfc <prvTestAbortingQueueSend+0x14f>
   13cf1:	48 c7 05 34 21 12 00 	movq   $0x1,0x122134(%rip)        # 135e30 <xErrorOccurred>
   13cf8:	01 00 00 00 
   13cfc:	ba 64 00 00 00       	mov    $0x64,%edx
   13d01:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
   13d05:	48 89 d6             	mov    %rdx,%rsi
   13d08:	48 89 c7             	mov    %rax,%rdi
   13d0b:	e8 41 02 00 00       	callq  13f51 <prvCheckExpectedTimeIsWithinAnAcceptableMargin>
   13d10:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
   13d14:	48 89 c7             	mov    %rax,%rdi
   13d17:	e8 d2 41 ff ff       	callq  7eee <vQueueDelete>
   13d1c:	90                   	nop
   13d1d:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   13d21:	64 48 33 04 25 28 00 	xor    %fs:0x28,%rax
   13d28:	00 00 
   13d2a:	74 05                	je     13d31 <prvTestAbortingQueueSend+0x184>
   13d2c:	e8 9f e7 fe ff       	callq  24d0 <__stack_chk_fail@plt>
   13d31:	c9                   	leaveq 
   13d32:	c3                   	retq   

0000000000013d33 <prvTestAbortingSemaphoreTake>:
   13d33:	f3 0f 1e fa          	endbr64 
   13d37:	55                   	push   %rbp
   13d38:	48 89 e5             	mov    %rsp,%rbp
   13d3b:	48 83 ec 20          	sub    $0x20,%rsp
   13d3f:	41 b8 03 00 00 00    	mov    $0x3,%r8d
   13d45:	48 8d 0d 14 22 12 00 	lea    0x122214(%rip),%rcx        # 135f60 <xSemaphoreBuffer.3199>
   13d4c:	ba 00 00 00 00       	mov    $0x0,%edx
   13d51:	be 00 00 00 00       	mov    $0x0,%esi
   13d56:	bf 01 00 00 00       	mov    $0x1,%edi
   13d5b:	e8 a8 17 ff ff       	callq  5508 <xQueueGenericCreateStatic>
   13d60:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
   13d64:	e8 2f 9b ff ff       	callq  d898 <xTaskGetTickCount>
   13d69:	48 89 45 f0          	mov    %rax,-0x10(%rbp)
   13d6d:	ba 64 00 00 00       	mov    $0x64,%edx
   13d72:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
   13d76:	48 89 d6             	mov    %rdx,%rsi
   13d79:	48 89 c7             	mov    %rax,%rdi
   13d7c:	e8 f3 31 ff ff       	callq  6f74 <xQueueSemaphoreTake>
   13d81:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
   13d85:	48 83 7d f8 00       	cmpq   $0x0,-0x8(%rbp)
   13d8a:	74 0b                	je     13d97 <prvTestAbortingSemaphoreTake+0x64>
   13d8c:	48 c7 05 99 20 12 00 	movq   $0x1,0x122099(%rip)        # 135e30 <xErrorOccurred>
   13d93:	01 00 00 00 
   13d97:	ba 64 00 00 00       	mov    $0x64,%edx
   13d9c:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
   13da0:	48 89 d6             	mov    %rdx,%rsi
   13da3:	48 89 c7             	mov    %rax,%rdi
   13da6:	e8 a6 01 00 00       	callq  13f51 <prvCheckExpectedTimeIsWithinAnAcceptableMargin>
   13dab:	e8 e8 9a ff ff       	callq  d898 <xTaskGetTickCount>
   13db0:	48 89 45 f0          	mov    %rax,-0x10(%rbp)
   13db4:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
   13db8:	48 c7 c6 ff ff ff ff 	mov    $0xffffffffffffffff,%rsi
   13dbf:	48 89 c7             	mov    %rax,%rdi
   13dc2:	e8 ad 31 ff ff       	callq  6f74 <xQueueSemaphoreTake>
   13dc7:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
   13dcb:	48 83 7d f8 00       	cmpq   $0x0,-0x8(%rbp)
   13dd0:	74 0b                	je     13ddd <prvTestAbortingSemaphoreTake+0xaa>
   13dd2:	48 c7 05 53 20 12 00 	movq   $0x1,0x122053(%rip)        # 135e30 <xErrorOccurred>
   13dd9:	01 00 00 00 
   13ddd:	ba 32 00 00 00       	mov    $0x32,%edx
   13de2:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
   13de6:	48 89 d6             	mov    %rdx,%rsi
   13de9:	48 89 c7             	mov    %rax,%rdi
   13dec:	e8 60 01 00 00       	callq  13f51 <prvCheckExpectedTimeIsWithinAnAcceptableMargin>
   13df1:	e8 a2 9a ff ff       	callq  d898 <xTaskGetTickCount>
   13df6:	48 89 45 f0          	mov    %rax,-0x10(%rbp)
   13dfa:	ba 64 00 00 00       	mov    $0x64,%edx
   13dff:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
   13e03:	48 89 d6             	mov    %rdx,%rsi
   13e06:	48 89 c7             	mov    %rax,%rdi
   13e09:	e8 66 31 ff ff       	callq  6f74 <xQueueSemaphoreTake>
   13e0e:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
   13e12:	48 83 7d f8 00       	cmpq   $0x0,-0x8(%rbp)
   13e17:	74 0b                	je     13e24 <prvTestAbortingSemaphoreTake+0xf1>
   13e19:	48 c7 05 0c 20 12 00 	movq   $0x1,0x12200c(%rip)        # 135e30 <xErrorOccurred>
   13e20:	01 00 00 00 
   13e24:	ba 64 00 00 00       	mov    $0x64,%edx
   13e29:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
   13e2d:	48 89 d6             	mov    %rdx,%rsi
   13e30:	48 89 c7             	mov    %rax,%rdi
   13e33:	e8 19 01 00 00       	callq  13f51 <prvCheckExpectedTimeIsWithinAnAcceptableMargin>
   13e38:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
   13e3c:	48 89 c7             	mov    %rax,%rdi
   13e3f:	e8 aa 40 ff ff       	callq  7eee <vQueueDelete>
   13e44:	90                   	nop
   13e45:	c9                   	leaveq 
   13e46:	c3                   	retq   

0000000000013e47 <prvTestAbortingTaskNotifyWait>:
   13e47:	f3 0f 1e fa          	endbr64 
   13e4b:	55                   	push   %rbp
   13e4c:	48 89 e5             	mov    %rsp,%rbp
   13e4f:	48 83 ec 10          	sub    $0x10,%rsp
   13e53:	e8 40 9a ff ff       	callq  d898 <xTaskGetTickCount>
   13e58:	48 89 45 f0          	mov    %rax,-0x10(%rbp)
   13e5c:	b8 64 00 00 00       	mov    $0x64,%eax
   13e61:	49 89 c0             	mov    %rax,%r8
   13e64:	b9 00 00 00 00       	mov    $0x0,%ecx
   13e69:	ba 00 00 00 00       	mov    $0x0,%edx
   13e6e:	be 00 00 00 00       	mov    $0x0,%esi
   13e73:	bf 00 00 00 00       	mov    $0x0,%edi
   13e78:	e8 b7 c3 ff ff       	callq  10234 <xTaskGenericNotifyWait>
   13e7d:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
   13e81:	48 83 7d f8 00       	cmpq   $0x0,-0x8(%rbp)
   13e86:	74 0b                	je     13e93 <prvTestAbortingTaskNotifyWait+0x4c>
   13e88:	48 c7 05 9d 1f 12 00 	movq   $0x1,0x121f9d(%rip)        # 135e30 <xErrorOccurred>
   13e8f:	01 00 00 00 
   13e93:	ba 64 00 00 00       	mov    $0x64,%edx
   13e98:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
   13e9c:	48 89 d6             	mov    %rdx,%rsi
   13e9f:	48 89 c7             	mov    %rax,%rdi
   13ea2:	e8 aa 00 00 00       	callq  13f51 <prvCheckExpectedTimeIsWithinAnAcceptableMargin>
   13ea7:	e8 ec 99 ff ff       	callq  d898 <xTaskGetTickCount>
   13eac:	48 89 45 f0          	mov    %rax,-0x10(%rbp)
   13eb0:	49 c7 c0 ff ff ff ff 	mov    $0xffffffffffffffff,%r8
   13eb7:	b9 00 00 00 00       	mov    $0x0,%ecx
   13ebc:	ba 00 00 00 00       	mov    $0x0,%edx
   13ec1:	be 00 00 00 00       	mov    $0x0,%esi
   13ec6:	bf 00 00 00 00       	mov    $0x0,%edi
   13ecb:	e8 64 c3 ff ff       	callq  10234 <xTaskGenericNotifyWait>
   13ed0:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
   13ed4:	48 83 7d f8 00       	cmpq   $0x0,-0x8(%rbp)
   13ed9:	74 0b                	je     13ee6 <prvTestAbortingTaskNotifyWait+0x9f>
   13edb:	48 c7 05 4a 1f 12 00 	movq   $0x1,0x121f4a(%rip)        # 135e30 <xErrorOccurred>
   13ee2:	01 00 00 00 
   13ee6:	ba 32 00 00 00       	mov    $0x32,%edx
   13eeb:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
   13eef:	48 89 d6             	mov    %rdx,%rsi
   13ef2:	48 89 c7             	mov    %rax,%rdi
   13ef5:	e8 57 00 00 00       	callq  13f51 <prvCheckExpectedTimeIsWithinAnAcceptableMargin>
   13efa:	e8 99 99 ff ff       	callq  d898 <xTaskGetTickCount>
   13eff:	48 89 45 f0          	mov    %rax,-0x10(%rbp)
   13f03:	b8 64 00 00 00       	mov    $0x64,%eax
   13f08:	49 89 c0             	mov    %rax,%r8
   13f0b:	b9 00 00 00 00       	mov    $0x0,%ecx
   13f10:	ba 00 00 00 00       	mov    $0x0,%edx
   13f15:	be 00 00 00 00       	mov    $0x0,%esi
   13f1a:	bf 00 00 00 00       	mov    $0x0,%edi
   13f1f:	e8 10 c3 ff ff       	callq  10234 <xTaskGenericNotifyWait>
   13f24:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
   13f28:	48 83 7d f8 00       	cmpq   $0x0,-0x8(%rbp)
   13f2d:	74 0b                	je     13f3a <prvTestAbortingTaskNotifyWait+0xf3>
   13f2f:	48 c7 05 f6 1e 12 00 	movq   $0x1,0x121ef6(%rip)        # 135e30 <xErrorOccurred>
   13f36:	01 00 00 00 
   13f3a:	ba 64 00 00 00       	mov    $0x64,%edx
   13f3f:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
   13f43:	48 89 d6             	mov    %rdx,%rsi
   13f46:	48 89 c7             	mov    %rax,%rdi
   13f49:	e8 03 00 00 00       	callq  13f51 <prvCheckExpectedTimeIsWithinAnAcceptableMargin>
   13f4e:	90                   	nop
   13f4f:	c9                   	leaveq 
   13f50:	c3                   	retq   

0000000000013f51 <prvCheckExpectedTimeIsWithinAnAcceptableMargin>:
   13f51:	f3 0f 1e fa          	endbr64 
   13f55:	55                   	push   %rbp
   13f56:	48 89 e5             	mov    %rsp,%rbp
   13f59:	48 83 ec 20          	sub    $0x20,%rsp
   13f5d:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
   13f61:	48 89 75 e0          	mov    %rsi,-0x20(%rbp)
   13f65:	e8 2e 99 ff ff       	callq  d898 <xTaskGetTickCount>
   13f6a:	48 89 45 f0          	mov    %rax,-0x10(%rbp)
   13f6e:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
   13f72:	48 2b 45 e8          	sub    -0x18(%rbp),%rax
   13f76:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
   13f7a:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   13f7e:	48 3b 45 e0          	cmp    -0x20(%rbp),%rax
   13f82:	73 0b                	jae    13f8f <prvCheckExpectedTimeIsWithinAnAcceptableMargin+0x3e>
   13f84:	48 c7 05 a1 1e 12 00 	movq   $0x1,0x121ea1(%rip)        # 135e30 <xErrorOccurred>
   13f8b:	01 00 00 00 
   13f8f:	ba 07 00 00 00       	mov    $0x7,%edx
   13f94:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
   13f98:	48 01 d0             	add    %rdx,%rax
   13f9b:	48 39 45 f8          	cmp    %rax,-0x8(%rbp)
   13f9f:	76 0b                	jbe    13fac <prvCheckExpectedTimeIsWithinAnAcceptableMargin+0x5b>
   13fa1:	48 c7 05 84 1e 12 00 	movq   $0x1,0x121e84(%rip)        # 135e30 <xErrorOccurred>
   13fa8:	01 00 00 00 
   13fac:	90                   	nop
   13fad:	c9                   	leaveq 
   13fae:	c3                   	retq   

0000000000013faf <xAreAbortDelayTestTasksStillRunning>:
   13faf:	f3 0f 1e fa          	endbr64 
   13fb3:	55                   	push   %rbp
   13fb4:	48 89 e5             	mov    %rsp,%rbp
   13fb7:	48 c7 45 f8 01 00 00 	movq   $0x1,-0x8(%rbp)
   13fbe:	00 
   13fbf:	48 8b 15 5a 1e 12 00 	mov    0x121e5a(%rip),%rdx        # 135e20 <xControllingCycles>
   13fc6:	48 8b 05 3b 20 12 00 	mov    0x12203b(%rip),%rax        # 136008 <xLastControllingCycleCount.3214>
   13fcd:	48 39 c2             	cmp    %rax,%rdx
   13fd0:	75 08                	jne    13fda <xAreAbortDelayTestTasksStillRunning+0x2b>
   13fd2:	48 c7 45 f8 00 00 00 	movq   $0x0,-0x8(%rbp)
   13fd9:	00 
   13fda:	48 8b 15 47 1e 12 00 	mov    0x121e47(%rip),%rdx        # 135e28 <xBlockingCycles>
   13fe1:	48 8b 05 28 20 12 00 	mov    0x122028(%rip),%rax        # 136010 <xLastBlockingCycleCount.3215>
   13fe8:	48 39 c2             	cmp    %rax,%rdx
   13feb:	75 08                	jne    13ff5 <xAreAbortDelayTestTasksStillRunning+0x46>
   13fed:	48 c7 45 f8 00 00 00 	movq   $0x0,-0x8(%rbp)
   13ff4:	00 
   13ff5:	48 8b 05 34 1e 12 00 	mov    0x121e34(%rip),%rax        # 135e30 <xErrorOccurred>
   13ffc:	48 83 f8 01          	cmp    $0x1,%rax
   14000:	75 08                	jne    1400a <xAreAbortDelayTestTasksStillRunning+0x5b>
   14002:	48 c7 45 f8 00 00 00 	movq   $0x0,-0x8(%rbp)
   14009:	00 
   1400a:	48 8b 05 17 1e 12 00 	mov    0x121e17(%rip),%rax        # 135e28 <xBlockingCycles>
   14011:	48 89 05 f8 1f 12 00 	mov    %rax,0x121ff8(%rip)        # 136010 <xLastBlockingCycleCount.3215>
   14018:	48 8b 05 01 1e 12 00 	mov    0x121e01(%rip),%rax        # 135e20 <xControllingCycles>
   1401f:	48 89 05 e2 1f 12 00 	mov    %rax,0x121fe2(%rip)        # 136008 <xLastControllingCycleCount.3214>
   14026:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   1402a:	5d                   	pop    %rbp
   1402b:	c3                   	retq   

000000000001402c <vStartBlockingQueueTasks>:
   1402c:	f3 0f 1e fa          	endbr64 
   14030:	55                   	push   %rbp
   14031:	48 89 e5             	mov    %rsp,%rbp
   14034:	48 83 ec 60          	sub    $0x60,%rsp
   14038:	48 89 7d a8          	mov    %rdi,-0x58(%rbp)
   1403c:	48 c7 45 b0 01 00 00 	movq   $0x1,-0x50(%rbp)
   14043:	00 
   14044:	48 c7 45 b8 05 00 00 	movq   $0x5,-0x48(%rbp)
   1404b:	00 
   1404c:	48 c7 45 c0 e8 03 00 	movq   $0x3e8,-0x40(%rbp)
   14053:	00 
   14054:	48 c7 45 c8 00 00 00 	movq   $0x0,-0x38(%rbp)
   1405b:	00 
   1405c:	bf 18 00 00 00       	mov    $0x18,%edi
   14061:	e8 1a e6 ff ff       	callq  12680 <pvPortMalloc>
   14066:	48 89 45 d0          	mov    %rax,-0x30(%rbp)
   1406a:	48 8b 45 b0          	mov    -0x50(%rbp),%rax
   1406e:	ba 00 00 00 00       	mov    $0x0,%edx
   14073:	be 02 00 00 00       	mov    $0x2,%esi
   14078:	48 89 c7             	mov    %rax,%rdi
   1407b:	e8 73 15 ff ff       	callq  55f3 <xQueueGenericCreate>
   14080:	48 8b 55 d0          	mov    -0x30(%rbp),%rdx
   14084:	48 89 02             	mov    %rax,(%rdx)
   14087:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
   1408b:	48 8b 55 c0          	mov    -0x40(%rbp),%rdx
   1408f:	48 89 50 08          	mov    %rdx,0x8(%rax)
   14093:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
   14097:	48 8d 15 7a 1f 12 00 	lea    0x121f7a(%rip),%rdx        # 136018 <sBlockingConsumerCount>
   1409e:	48 89 50 10          	mov    %rdx,0x10(%rax)
   140a2:	bf 18 00 00 00       	mov    $0x18,%edi
   140a7:	e8 d4 e5 ff ff       	callq  12680 <pvPortMalloc>
   140ac:	48 89 45 d8          	mov    %rax,-0x28(%rbp)
   140b0:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
   140b4:	48 8b 10             	mov    (%rax),%rdx
   140b7:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
   140bb:	48 89 10             	mov    %rdx,(%rax)
   140be:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
   140c2:	48 8b 55 c8          	mov    -0x38(%rbp),%rdx
   140c6:	48 89 50 08          	mov    %rdx,0x8(%rax)
   140ca:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
   140ce:	48 8d 15 49 1f 12 00 	lea    0x121f49(%rip),%rdx        # 13601e <sBlockingProducerCount>
   140d5:	48 89 50 10          	mov    %rdx,0x10(%rax)
   140d9:	48 8b 55 a8          	mov    -0x58(%rbp),%rdx
   140dd:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
   140e1:	41 b9 00 00 00 00    	mov    $0x0,%r9d
   140e7:	49 89 d0             	mov    %rdx,%r8
   140ea:	48 89 c1             	mov    %rax,%rcx
   140ed:	ba 46 00 00 00       	mov    $0x46,%edx
   140f2:	48 8d 35 27 3a 01 00 	lea    0x13a27(%rip),%rsi        # 27b20 <xAllowableMargin+0x70>
   140f9:	48 8d 3d 60 02 00 00 	lea    0x260(%rip),%rdi        # 14360 <vBlockingQueueConsumer>
   14100:	e8 f2 7b ff ff       	callq  bcf7 <xTaskCreate>
   14105:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
   14109:	41 b9 00 00 00 00    	mov    $0x0,%r9d
   1410f:	41 b8 00 00 00 00    	mov    $0x0,%r8d
   14115:	48 89 c1             	mov    %rax,%rcx
   14118:	ba 46 00 00 00       	mov    $0x46,%edx
   1411d:	48 8d 35 04 3a 01 00 	lea    0x13a04(%rip),%rsi        # 27b28 <xAllowableMargin+0x78>
   14124:	48 8d 3d af 01 00 00 	lea    0x1af(%rip),%rdi        # 142da <vBlockingQueueProducer>
   1412b:	e8 c7 7b ff ff       	callq  bcf7 <xTaskCreate>
   14130:	bf 18 00 00 00       	mov    $0x18,%edi
   14135:	e8 46 e5 ff ff       	callq  12680 <pvPortMalloc>
   1413a:	48 89 45 e0          	mov    %rax,-0x20(%rbp)
   1413e:	48 8b 45 b0          	mov    -0x50(%rbp),%rax
   14142:	ba 00 00 00 00       	mov    $0x0,%edx
   14147:	be 02 00 00 00       	mov    $0x2,%esi
   1414c:	48 89 c7             	mov    %rax,%rdi
   1414f:	e8 9f 14 ff ff       	callq  55f3 <xQueueGenericCreate>
   14154:	48 8b 55 e0          	mov    -0x20(%rbp),%rdx
   14158:	48 89 02             	mov    %rax,(%rdx)
   1415b:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
   1415f:	48 8b 55 c8          	mov    -0x38(%rbp),%rdx
   14163:	48 89 50 08          	mov    %rdx,0x8(%rax)
   14167:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
   1416b:	48 8d 15 ae 1e 12 00 	lea    0x121eae(%rip),%rdx        # 136020 <sBlockingProducerCount+0x2>
   14172:	48 89 50 10          	mov    %rdx,0x10(%rax)
   14176:	bf 18 00 00 00       	mov    $0x18,%edi
   1417b:	e8 00 e5 ff ff       	callq  12680 <pvPortMalloc>
   14180:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
   14184:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
   14188:	48 8b 10             	mov    (%rax),%rdx
   1418b:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
   1418f:	48 89 10             	mov    %rdx,(%rax)
   14192:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
   14196:	48 8b 55 c0          	mov    -0x40(%rbp),%rdx
   1419a:	48 89 50 08          	mov    %rdx,0x8(%rax)
   1419e:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
   141a2:	48 8d 15 71 1e 12 00 	lea    0x121e71(%rip),%rdx        # 13601a <sBlockingConsumerCount+0x2>
   141a9:	48 89 50 10          	mov    %rdx,0x10(%rax)
   141ad:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
   141b1:	41 b9 00 00 00 00    	mov    $0x0,%r9d
   141b7:	41 b8 00 00 00 00    	mov    $0x0,%r8d
   141bd:	48 89 c1             	mov    %rax,%rcx
   141c0:	ba 46 00 00 00       	mov    $0x46,%edx
   141c5:	48 8d 35 64 39 01 00 	lea    0x13964(%rip),%rsi        # 27b30 <xAllowableMargin+0x80>
   141cc:	48 8d 3d 8d 01 00 00 	lea    0x18d(%rip),%rdi        # 14360 <vBlockingQueueConsumer>
   141d3:	e8 1f 7b ff ff       	callq  bcf7 <xTaskCreate>
   141d8:	48 8b 55 a8          	mov    -0x58(%rbp),%rdx
   141dc:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
   141e0:	41 b9 00 00 00 00    	mov    $0x0,%r9d
   141e6:	49 89 d0             	mov    %rdx,%r8
   141e9:	48 89 c1             	mov    %rax,%rcx
   141ec:	ba 46 00 00 00       	mov    $0x46,%edx
   141f1:	48 8d 35 40 39 01 00 	lea    0x13940(%rip),%rsi        # 27b38 <xAllowableMargin+0x88>
   141f8:	48 8d 3d db 00 00 00 	lea    0xdb(%rip),%rdi        # 142da <vBlockingQueueProducer>
   141ff:	e8 f3 7a ff ff       	callq  bcf7 <xTaskCreate>
   14204:	bf 18 00 00 00       	mov    $0x18,%edi
   14209:	e8 72 e4 ff ff       	callq  12680 <pvPortMalloc>
   1420e:	48 89 45 f0          	mov    %rax,-0x10(%rbp)
   14212:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
   14216:	ba 00 00 00 00       	mov    $0x0,%edx
   1421b:	be 02 00 00 00       	mov    $0x2,%esi
   14220:	48 89 c7             	mov    %rax,%rdi
   14223:	e8 cb 13 ff ff       	callq  55f3 <xQueueGenericCreate>
   14228:	48 8b 55 f0          	mov    -0x10(%rbp),%rdx
   1422c:	48 89 02             	mov    %rax,(%rdx)
   1422f:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
   14233:	48 8b 55 c0          	mov    -0x40(%rbp),%rdx
   14237:	48 89 50 08          	mov    %rdx,0x8(%rax)
   1423b:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
   1423f:	48 8d 15 dc 1d 12 00 	lea    0x121ddc(%rip),%rdx        # 136022 <sBlockingProducerCount+0x4>
   14246:	48 89 50 10          	mov    %rdx,0x10(%rax)
   1424a:	bf 18 00 00 00       	mov    $0x18,%edi
   1424f:	e8 2c e4 ff ff       	callq  12680 <pvPortMalloc>
   14254:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
   14258:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
   1425c:	48 8b 10             	mov    (%rax),%rdx
   1425f:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   14263:	48 89 10             	mov    %rdx,(%rax)
   14266:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   1426a:	48 8b 55 c0          	mov    -0x40(%rbp),%rdx
   1426e:	48 89 50 08          	mov    %rdx,0x8(%rax)
   14272:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   14276:	48 8d 15 9f 1d 12 00 	lea    0x121d9f(%rip),%rdx        # 13601c <sBlockingConsumerCount+0x4>
   1427d:	48 89 50 10          	mov    %rdx,0x10(%rax)
   14281:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
   14285:	41 b9 00 00 00 00    	mov    $0x0,%r9d
   1428b:	41 b8 00 00 00 00    	mov    $0x0,%r8d
   14291:	48 89 c1             	mov    %rax,%rcx
   14294:	ba 46 00 00 00       	mov    $0x46,%edx
   14299:	48 8d 35 a0 38 01 00 	lea    0x138a0(%rip),%rsi        # 27b40 <xAllowableMargin+0x90>
   142a0:	48 8d 3d 33 00 00 00 	lea    0x33(%rip),%rdi        # 142da <vBlockingQueueProducer>
   142a7:	e8 4b 7a ff ff       	callq  bcf7 <xTaskCreate>
   142ac:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   142b0:	41 b9 00 00 00 00    	mov    $0x0,%r9d
   142b6:	41 b8 00 00 00 00    	mov    $0x0,%r8d
   142bc:	48 89 c1             	mov    %rax,%rcx
   142bf:	ba 46 00 00 00       	mov    $0x46,%edx
   142c4:	48 8d 35 7d 38 01 00 	lea    0x1387d(%rip),%rsi        # 27b48 <xAllowableMargin+0x98>
   142cb:	48 8d 3d 8e 00 00 00 	lea    0x8e(%rip),%rdi        # 14360 <vBlockingQueueConsumer>
   142d2:	e8 20 7a ff ff       	callq  bcf7 <xTaskCreate>
   142d7:	90                   	nop
   142d8:	c9                   	leaveq 
   142d9:	c3                   	retq   

00000000000142da <vBlockingQueueProducer>:
   142da:	f3 0f 1e fa          	endbr64 
   142de:	55                   	push   %rbp
   142df:	48 89 e5             	mov    %rsp,%rbp
   142e2:	48 83 ec 30          	sub    $0x30,%rsp
   142e6:	48 89 7d d8          	mov    %rdi,-0x28(%rbp)
   142ea:	64 48 8b 04 25 28 00 	mov    %fs:0x28,%rax
   142f1:	00 00 
   142f3:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
   142f7:	31 c0                	xor    %eax,%eax
   142f9:	66 c7 45 ec 00 00    	movw   $0x0,-0x14(%rbp)
   142ff:	66 c7 45 ee 00 00    	movw   $0x0,-0x12(%rbp)
   14305:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
   14309:	48 89 45 f0          	mov    %rax,-0x10(%rbp)
   1430d:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
   14311:	48 8b 50 08          	mov    0x8(%rax),%rdx
   14315:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
   14319:	48 8b 00             	mov    (%rax),%rax
   1431c:	48 8d 75 ec          	lea    -0x14(%rbp),%rsi
   14320:	b9 00 00 00 00       	mov    $0x0,%ecx
   14325:	48 89 c7             	mov    %rax,%rdi
   14328:	e8 6a 1a ff ff       	callq  5d97 <xQueueGenericSend>
   1432d:	48 83 f8 01          	cmp    $0x1,%rax
   14331:	74 08                	je     1433b <vBlockingQueueProducer+0x61>
   14333:	66 c7 45 ee 01 00    	movw   $0x1,-0x12(%rbp)
   14339:	eb d2                	jmp    1430d <vBlockingQueueProducer+0x33>
   1433b:	66 83 7d ee 00       	cmpw   $0x0,-0x12(%rbp)
   14340:	75 11                	jne    14353 <vBlockingQueueProducer+0x79>
   14342:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
   14346:	48 8b 40 10          	mov    0x10(%rax),%rax
   1434a:	0f b7 10             	movzwl (%rax),%edx
   1434d:	83 c2 01             	add    $0x1,%edx
   14350:	66 89 10             	mov    %dx,(%rax)
   14353:	0f b7 45 ec          	movzwl -0x14(%rbp),%eax
   14357:	83 c0 01             	add    $0x1,%eax
   1435a:	66 89 45 ec          	mov    %ax,-0x14(%rbp)
   1435e:	eb ad                	jmp    1430d <vBlockingQueueProducer+0x33>

0000000000014360 <vBlockingQueueConsumer>:
   14360:	f3 0f 1e fa          	endbr64 
   14364:	55                   	push   %rbp
   14365:	48 89 e5             	mov    %rsp,%rbp
   14368:	48 83 ec 30          	sub    $0x30,%rsp
   1436c:	48 89 7d d8          	mov    %rdi,-0x28(%rbp)
   14370:	64 48 8b 04 25 28 00 	mov    %fs:0x28,%rax
   14377:	00 00 
   14379:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
   1437d:	31 c0                	xor    %eax,%eax
   1437f:	66 c7 45 ec 00 00    	movw   $0x0,-0x14(%rbp)
   14385:	66 c7 45 ee 00 00    	movw   $0x0,-0x12(%rbp)
   1438b:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
   1438f:	48 89 45 f0          	mov    %rax,-0x10(%rbp)
   14393:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
   14397:	48 8b 50 08          	mov    0x8(%rax),%rdx
   1439b:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
   1439f:	48 8b 00             	mov    (%rax),%rax
   143a2:	48 8d 4d ea          	lea    -0x16(%rbp),%rcx
   143a6:	48 89 ce             	mov    %rcx,%rsi
   143a9:	48 89 c7             	mov    %rax,%rdi
   143ac:	e8 32 26 ff ff       	callq  69e3 <xQueueReceive>
   143b1:	48 83 f8 01          	cmp    $0x1,%rax
   143b5:	75 dc                	jne    14393 <vBlockingQueueConsumer+0x33>
   143b7:	0f b7 45 ea          	movzwl -0x16(%rbp),%eax
   143bb:	66 39 45 ec          	cmp    %ax,-0x14(%rbp)
   143bf:	74 10                	je     143d1 <vBlockingQueueConsumer+0x71>
   143c1:	0f b7 45 ea          	movzwl -0x16(%rbp),%eax
   143c5:	66 89 45 ec          	mov    %ax,-0x14(%rbp)
   143c9:	66 c7 45 ee 01 00    	movw   $0x1,-0x12(%rbp)
   143cf:	eb c2                	jmp    14393 <vBlockingQueueConsumer+0x33>
   143d1:	66 83 7d ee 00       	cmpw   $0x0,-0x12(%rbp)
   143d6:	75 11                	jne    143e9 <vBlockingQueueConsumer+0x89>
   143d8:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
   143dc:	48 8b 40 10          	mov    0x10(%rax),%rax
   143e0:	0f b7 10             	movzwl (%rax),%edx
   143e3:	83 c2 01             	add    $0x1,%edx
   143e6:	66 89 10             	mov    %dx,(%rax)
   143e9:	66 83 45 ec 01       	addw   $0x1,-0x14(%rbp)
   143ee:	eb a3                	jmp    14393 <vBlockingQueueConsumer+0x33>

00000000000143f0 <xAreBlockingQueuesStillRunning>:
   143f0:	f3 0f 1e fa          	endbr64 
   143f4:	55                   	push   %rbp
   143f5:	48 89 e5             	mov    %rsp,%rbp
   143f8:	48 c7 45 f0 01 00 00 	movq   $0x1,-0x10(%rbp)
   143ff:	00 
   14400:	48 c7 45 f8 00 00 00 	movq   $0x0,-0x8(%rbp)
   14407:	00 
   14408:	e9 b7 00 00 00       	jmpq   144c4 <xAreBlockingQueuesStillRunning+0xd4>
   1440d:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   14411:	48 8d 14 00          	lea    (%rax,%rax,1),%rdx
   14415:	48 8d 05 fc 1b 12 00 	lea    0x121bfc(%rip),%rax        # 136018 <sBlockingConsumerCount>
   1441c:	0f b7 14 02          	movzwl (%rdx,%rax,1),%edx
   14420:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   14424:	48 8d 0c 00          	lea    (%rax,%rax,1),%rcx
   14428:	48 8d 05 f5 1b 12 00 	lea    0x121bf5(%rip),%rax        # 136024 <sLastBlockingConsumerCount.3464>
   1442f:	0f b7 04 01          	movzwl (%rcx,%rax,1),%eax
   14433:	66 39 c2             	cmp    %ax,%dx
   14436:	75 08                	jne    14440 <xAreBlockingQueuesStillRunning+0x50>
   14438:	48 c7 45 f0 00 00 00 	movq   $0x0,-0x10(%rbp)
   1443f:	00 
   14440:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   14444:	48 8d 14 00          	lea    (%rax,%rax,1),%rdx
   14448:	48 8d 05 c9 1b 12 00 	lea    0x121bc9(%rip),%rax        # 136018 <sBlockingConsumerCount>
   1444f:	0f b7 04 02          	movzwl (%rdx,%rax,1),%eax
   14453:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
   14457:	48 8d 0c 12          	lea    (%rdx,%rdx,1),%rcx
   1445b:	48 8d 15 c2 1b 12 00 	lea    0x121bc2(%rip),%rdx        # 136024 <sLastBlockingConsumerCount.3464>
   14462:	66 89 04 11          	mov    %ax,(%rcx,%rdx,1)
   14466:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   1446a:	48 8d 14 00          	lea    (%rax,%rax,1),%rdx
   1446e:	48 8d 05 a9 1b 12 00 	lea    0x121ba9(%rip),%rax        # 13601e <sBlockingProducerCount>
   14475:	0f b7 14 02          	movzwl (%rdx,%rax,1),%edx
   14479:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   1447d:	48 8d 0c 00          	lea    (%rax,%rax,1),%rcx
   14481:	48 8d 05 a2 1b 12 00 	lea    0x121ba2(%rip),%rax        # 13602a <sLastBlockingProducerCount.3465>
   14488:	0f b7 04 01          	movzwl (%rcx,%rax,1),%eax
   1448c:	66 39 c2             	cmp    %ax,%dx
   1448f:	75 08                	jne    14499 <xAreBlockingQueuesStillRunning+0xa9>
   14491:	48 c7 45 f0 00 00 00 	movq   $0x0,-0x10(%rbp)
   14498:	00 
   14499:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   1449d:	48 8d 14 00          	lea    (%rax,%rax,1),%rdx
   144a1:	48 8d 05 76 1b 12 00 	lea    0x121b76(%rip),%rax        # 13601e <sBlockingProducerCount>
   144a8:	0f b7 04 02          	movzwl (%rdx,%rax,1),%eax
   144ac:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
   144b0:	48 8d 0c 12          	lea    (%rdx,%rdx,1),%rcx
   144b4:	48 8d 15 6f 1b 12 00 	lea    0x121b6f(%rip),%rdx        # 13602a <sLastBlockingProducerCount.3465>
   144bb:	66 89 04 11          	mov    %ax,(%rcx,%rdx,1)
   144bf:	48 83 45 f8 01       	addq   $0x1,-0x8(%rbp)
   144c4:	48 83 7d f8 02       	cmpq   $0x2,-0x8(%rbp)
   144c9:	0f 8e 3e ff ff ff    	jle    1440d <xAreBlockingQueuesStillRunning+0x1d>
   144cf:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
   144d3:	5d                   	pop    %rbp
   144d4:	c3                   	retq   

00000000000144d5 <vCreateBlockTimeTasks>:
   144d5:	f3 0f 1e fa          	endbr64 
   144d9:	55                   	push   %rbp
   144da:	48 89 e5             	mov    %rsp,%rbp
   144dd:	ba 00 00 00 00       	mov    $0x0,%edx
   144e2:	be 08 00 00 00       	mov    $0x8,%esi
   144e7:	bf 05 00 00 00       	mov    $0x5,%edi
   144ec:	e8 02 11 ff ff       	callq  55f3 <xQueueGenericCreate>
   144f1:	48 89 05 38 1b 12 00 	mov    %rax,0x121b38(%rip)        # 136030 <xTestQueue>
   144f8:	48 8b 05 31 1b 12 00 	mov    0x121b31(%rip),%rax        # 136030 <xTestQueue>
   144ff:	48 85 c0             	test   %rax,%rax
   14502:	74 69                	je     1456d <vCreateBlockTimeTasks+0x98>
   14504:	48 8b 05 25 1b 12 00 	mov    0x121b25(%rip),%rax        # 136030 <xTestQueue>
   1450b:	48 8d 35 3e 36 01 00 	lea    0x1363e(%rip),%rsi        # 27b50 <xAllowableMargin+0xa0>
   14512:	48 89 c7             	mov    %rax,%rdi
   14515:	e8 9e 40 ff ff       	callq  85b8 <vQueueAddToRegistry>
   1451a:	41 b9 00 00 00 00    	mov    $0x0,%r9d
   14520:	41 b8 04 00 00 00    	mov    $0x4,%r8d
   14526:	b9 00 00 00 00       	mov    $0x0,%ecx
   1452b:	ba 46 00 00 00       	mov    $0x46,%edx
   14530:	48 8d 35 2a 36 01 00 	lea    0x1362a(%rip),%rsi        # 27b61 <xAllowableMargin+0xb1>
   14537:	48 8d 3d 32 00 00 00 	lea    0x32(%rip),%rdi        # 14570 <vPrimaryBlockTimeTestTask>
   1453e:	e8 b4 77 ff ff       	callq  bcf7 <xTaskCreate>
   14543:	4c 8d 0d ee 1a 12 00 	lea    0x121aee(%rip),%r9        # 136038 <xSecondary>
   1454a:	41 b8 03 00 00 00    	mov    $0x3,%r8d
   14550:	b9 00 00 00 00       	mov    $0x0,%ecx
   14555:	ba 46 00 00 00       	mov    $0x46,%edx
   1455a:	48 8d 35 07 36 01 00 	lea    0x13607(%rip),%rsi        # 27b68 <xAllowableMargin+0xb8>
   14561:	48 8d 3d bb 04 00 00 	lea    0x4bb(%rip),%rdi        # 14a23 <vSecondaryBlockTimeTestTask>
   14568:	e8 8a 77 ff ff       	callq  bcf7 <xTaskCreate>
   1456d:	90                   	nop
   1456e:	5d                   	pop    %rbp
   1456f:	c3                   	retq   

0000000000014570 <vPrimaryBlockTimeTestTask>:
   14570:	f3 0f 1e fa          	endbr64 
   14574:	55                   	push   %rbp
   14575:	48 89 e5             	mov    %rsp,%rbp
   14578:	48 83 ec 40          	sub    $0x40,%rsp
   1457c:	48 89 7d c8          	mov    %rdi,-0x38(%rbp)
   14580:	64 48 8b 04 25 28 00 	mov    %fs:0x28,%rax
   14587:	00 00 
   14589:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
   1458d:	31 c0                	xor    %eax,%eax
   1458f:	e8 e5 05 00 00       	callq  14b79 <prvBasicDelayTests>
   14594:	48 c7 45 d0 00 00 00 	movq   $0x0,-0x30(%rbp)
   1459b:	00 
   1459c:	e9 8f 00 00 00       	jmpq   14630 <vPrimaryBlockTimeTestTask+0xc0>
   145a1:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
   145a5:	ba 0a 00 00 00       	mov    $0xa,%edx
   145aa:	89 c1                	mov    %eax,%ecx
   145ac:	d3 e2                	shl    %cl,%edx
   145ae:	89 d0                	mov    %edx,%eax
   145b0:	48 98                	cltq   
   145b2:	48 89 45 e0          	mov    %rax,-0x20(%rbp)
   145b6:	e8 dd 92 ff ff       	callq  d898 <xTaskGetTickCount>
   145bb:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
   145bf:	48 8b 05 6a 1a 12 00 	mov    0x121a6a(%rip),%rax        # 136030 <xTestQueue>
   145c6:	48 8b 55 e0          	mov    -0x20(%rbp),%rdx
   145ca:	48 8d 4d d8          	lea    -0x28(%rbp),%rcx
   145ce:	48 89 ce             	mov    %rcx,%rsi
   145d1:	48 89 c7             	mov    %rax,%rdi
   145d4:	e8 0a 24 ff ff       	callq  69e3 <xQueueReceive>
   145d9:	48 85 c0             	test   %rax,%rax
   145dc:	74 0b                	je     145e9 <vPrimaryBlockTimeTestTask+0x79>
   145de:	48 c7 05 67 1a 12 00 	movq   $0x1,0x121a67(%rip)        # 136050 <xErrorOccurred>
   145e5:	01 00 00 00 
   145e9:	e8 aa 92 ff ff       	callq  d898 <xTaskGetTickCount>
   145ee:	48 2b 45 e8          	sub    -0x18(%rbp),%rax
   145f2:	48 89 45 f0          	mov    %rax,-0x10(%rbp)
   145f6:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
   145fa:	48 3b 45 e0          	cmp    -0x20(%rbp),%rax
   145fe:	73 0b                	jae    1460b <vPrimaryBlockTimeTestTask+0x9b>
   14600:	48 c7 05 45 1a 12 00 	movq   $0x1,0x121a45(%rip)        # 136050 <xErrorOccurred>
   14607:	01 00 00 00 
   1460b:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
   1460f:	48 83 c0 0f          	add    $0xf,%rax
   14613:	48 39 45 f0          	cmp    %rax,-0x10(%rbp)
   14617:	76 0b                	jbe    14624 <vPrimaryBlockTimeTestTask+0xb4>
   14619:	48 c7 05 2c 1a 12 00 	movq   $0x1,0x121a2c(%rip)        # 136050 <xErrorOccurred>
   14620:	01 00 00 00 
   14624:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
   14628:	48 83 c0 01          	add    $0x1,%rax
   1462c:	48 89 45 d0          	mov    %rax,-0x30(%rbp)
   14630:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
   14634:	48 83 f8 04          	cmp    $0x4,%rax
   14638:	0f 8e 63 ff ff ff    	jle    145a1 <vPrimaryBlockTimeTestTask+0x31>
   1463e:	48 c7 45 d0 00 00 00 	movq   $0x0,-0x30(%rbp)
   14645:	00 
   14646:	eb 3a                	jmp    14682 <vPrimaryBlockTimeTestTask+0x112>
   14648:	48 8b 05 e1 19 12 00 	mov    0x1219e1(%rip),%rax        # 136030 <xTestQueue>
   1464f:	48 8d 75 d0          	lea    -0x30(%rbp),%rsi
   14653:	b9 00 00 00 00       	mov    $0x0,%ecx
   14658:	ba 00 00 00 00       	mov    $0x0,%edx
   1465d:	48 89 c7             	mov    %rax,%rdi
   14660:	e8 32 17 ff ff       	callq  5d97 <xQueueGenericSend>
   14665:	48 83 f8 01          	cmp    $0x1,%rax
   14669:	74 0b                	je     14676 <vPrimaryBlockTimeTestTask+0x106>
   1466b:	48 c7 05 da 19 12 00 	movq   $0x1,0x1219da(%rip)        # 136050 <xErrorOccurred>
   14672:	01 00 00 00 
   14676:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
   1467a:	48 83 c0 01          	add    $0x1,%rax
   1467e:	48 89 45 d0          	mov    %rax,-0x30(%rbp)
   14682:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
   14686:	48 83 f8 04          	cmp    $0x4,%rax
   1468a:	7e bc                	jle    14648 <vPrimaryBlockTimeTestTask+0xd8>
   1468c:	48 c7 45 d0 00 00 00 	movq   $0x0,-0x30(%rbp)
   14693:	00 
   14694:	e9 91 00 00 00       	jmpq   1472a <vPrimaryBlockTimeTestTask+0x1ba>
   14699:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
   1469d:	ba 0a 00 00 00       	mov    $0xa,%edx
   146a2:	89 c1                	mov    %eax,%ecx
   146a4:	d3 e2                	shl    %cl,%edx
   146a6:	89 d0                	mov    %edx,%eax
   146a8:	48 98                	cltq   
   146aa:	48 89 45 e0          	mov    %rax,-0x20(%rbp)
   146ae:	e8 e5 91 ff ff       	callq  d898 <xTaskGetTickCount>
   146b3:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
   146b7:	48 8b 05 72 19 12 00 	mov    0x121972(%rip),%rax        # 136030 <xTestQueue>
   146be:	48 8b 55 e0          	mov    -0x20(%rbp),%rdx
   146c2:	48 8d 75 d0          	lea    -0x30(%rbp),%rsi
   146c6:	b9 00 00 00 00       	mov    $0x0,%ecx
   146cb:	48 89 c7             	mov    %rax,%rdi
   146ce:	e8 c4 16 ff ff       	callq  5d97 <xQueueGenericSend>
   146d3:	48 85 c0             	test   %rax,%rax
   146d6:	74 0b                	je     146e3 <vPrimaryBlockTimeTestTask+0x173>
   146d8:	48 c7 05 6d 19 12 00 	movq   $0x1,0x12196d(%rip)        # 136050 <xErrorOccurred>
   146df:	01 00 00 00 
   146e3:	e8 b0 91 ff ff       	callq  d898 <xTaskGetTickCount>
   146e8:	48 2b 45 e8          	sub    -0x18(%rbp),%rax
   146ec:	48 89 45 f0          	mov    %rax,-0x10(%rbp)
   146f0:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
   146f4:	48 3b 45 e0          	cmp    -0x20(%rbp),%rax
   146f8:	73 0b                	jae    14705 <vPrimaryBlockTimeTestTask+0x195>
   146fa:	48 c7 05 4b 19 12 00 	movq   $0x1,0x12194b(%rip)        # 136050 <xErrorOccurred>
   14701:	01 00 00 00 
   14705:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
   14709:	48 83 c0 0f          	add    $0xf,%rax
   1470d:	48 39 45 f0          	cmp    %rax,-0x10(%rbp)
   14711:	76 0b                	jbe    1471e <vPrimaryBlockTimeTestTask+0x1ae>
   14713:	48 c7 05 32 19 12 00 	movq   $0x1,0x121932(%rip)        # 136050 <xErrorOccurred>
   1471a:	01 00 00 00 
   1471e:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
   14722:	48 83 c0 01          	add    $0x1,%rax
   14726:	48 89 45 d0          	mov    %rax,-0x30(%rbp)
   1472a:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
   1472e:	48 83 f8 04          	cmp    $0x4,%rax
   14732:	0f 8e 61 ff ff ff    	jle    14699 <vPrimaryBlockTimeTestTask+0x129>
   14738:	48 c7 05 15 19 12 00 	movq   $0x0,0x121915(%rip)        # 136058 <xRunIndicator>
   1473f:	00 00 00 00 
   14743:	48 8b 05 ee 18 12 00 	mov    0x1218ee(%rip),%rax        # 136038 <xSecondary>
   1474a:	48 89 c7             	mov    %rax,%rdi
   1474d:	e8 2d 88 ff ff       	callq  cf7f <vTaskResume>
   14752:	eb 0a                	jmp    1475e <vPrimaryBlockTimeTestTask+0x1ee>
   14754:	bf 14 00 00 00       	mov    $0x14,%edi
   14759:	e8 44 80 ff ff       	callq  c7a2 <vTaskDelay>
   1475e:	48 8b 05 f3 18 12 00 	mov    0x1218f3(%rip),%rax        # 136058 <xRunIndicator>
   14765:	48 83 f8 55          	cmp    $0x55,%rax
   14769:	75 e9                	jne    14754 <vPrimaryBlockTimeTestTask+0x1e4>
   1476b:	bf 14 00 00 00       	mov    $0x14,%edi
   14770:	e8 2d 80 ff ff       	callq  c7a2 <vTaskDelay>
   14775:	48 c7 05 d8 18 12 00 	movq   $0x0,0x1218d8(%rip)        # 136058 <xRunIndicator>
   1477c:	00 00 00 00 
   14780:	48 c7 45 d0 00 00 00 	movq   $0x0,-0x30(%rbp)
   14787:	00 
   14788:	e9 be 00 00 00       	jmpq   1484b <vPrimaryBlockTimeTestTask+0x2db>
   1478d:	48 8b 05 9c 18 12 00 	mov    0x12189c(%rip),%rax        # 136030 <xTestQueue>
   14794:	48 8d 4d d8          	lea    -0x28(%rbp),%rcx
   14798:	ba 00 00 00 00       	mov    $0x0,%edx
   1479d:	48 89 ce             	mov    %rcx,%rsi
   147a0:	48 89 c7             	mov    %rax,%rdi
   147a3:	e8 3b 22 ff ff       	callq  69e3 <xQueueReceive>
   147a8:	48 83 f8 01          	cmp    $0x1,%rax
   147ac:	74 0b                	je     147b9 <vPrimaryBlockTimeTestTask+0x249>
   147ae:	48 c7 05 97 18 12 00 	movq   $0x1,0x121897(%rip)        # 136050 <xErrorOccurred>
   147b5:	01 00 00 00 
   147b9:	48 8b 05 70 18 12 00 	mov    0x121870(%rip),%rax        # 136030 <xTestQueue>
   147c0:	48 8d 75 d0          	lea    -0x30(%rbp),%rsi
   147c4:	b9 00 00 00 00       	mov    $0x0,%ecx
   147c9:	ba 00 00 00 00       	mov    $0x0,%edx
   147ce:	48 89 c7             	mov    %rax,%rdi
   147d1:	e8 c1 15 ff ff       	callq  5d97 <xQueueGenericSend>
   147d6:	48 83 f8 01          	cmp    $0x1,%rax
   147da:	74 0b                	je     147e7 <vPrimaryBlockTimeTestTask+0x277>
   147dc:	48 c7 05 69 18 12 00 	movq   $0x1,0x121869(%rip)        # 136050 <xErrorOccurred>
   147e3:	01 00 00 00 
   147e7:	48 8b 05 6a 18 12 00 	mov    0x12186a(%rip),%rax        # 136058 <xRunIndicator>
   147ee:	48 83 f8 55          	cmp    $0x55,%rax
   147f2:	75 0b                	jne    147ff <vPrimaryBlockTimeTestTask+0x28f>
   147f4:	48 c7 05 51 18 12 00 	movq   $0x1,0x121851(%rip)        # 136050 <xErrorOccurred>
   147fb:	01 00 00 00 
   147ff:	48 8b 05 32 18 12 00 	mov    0x121832(%rip),%rax        # 136038 <xSecondary>
   14806:	be 06 00 00 00       	mov    $0x6,%esi
   1480b:	48 89 c7             	mov    %rax,%rdi
   1480e:	e8 29 82 ff ff       	callq  ca3c <vTaskPrioritySet>
   14813:	48 8b 05 3e 18 12 00 	mov    0x12183e(%rip),%rax        # 136058 <xRunIndicator>
   1481a:	48 83 f8 55          	cmp    $0x55,%rax
   1481e:	75 0b                	jne    1482b <vPrimaryBlockTimeTestTask+0x2bb>
   14820:	48 c7 05 25 18 12 00 	movq   $0x1,0x121825(%rip)        # 136050 <xErrorOccurred>
   14827:	01 00 00 00 
   1482b:	48 8b 05 06 18 12 00 	mov    0x121806(%rip),%rax        # 136038 <xSecondary>
   14832:	be 03 00 00 00       	mov    $0x3,%esi
   14837:	48 89 c7             	mov    %rax,%rdi
   1483a:	e8 fd 81 ff ff       	callq  ca3c <vTaskPrioritySet>
   1483f:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
   14843:	48 83 c0 01          	add    $0x1,%rax
   14847:	48 89 45 d0          	mov    %rax,-0x30(%rbp)
   1484b:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
   1484f:	48 83 f8 04          	cmp    $0x4,%rax
   14853:	0f 8e 34 ff ff ff    	jle    1478d <vPrimaryBlockTimeTestTask+0x21d>
   14859:	eb 0a                	jmp    14865 <vPrimaryBlockTimeTestTask+0x2f5>
   1485b:	bf 14 00 00 00       	mov    $0x14,%edi
   14860:	e8 3d 7f ff ff       	callq  c7a2 <vTaskDelay>
   14865:	48 8b 05 ec 17 12 00 	mov    0x1217ec(%rip),%rax        # 136058 <xRunIndicator>
   1486c:	48 83 f8 55          	cmp    $0x55,%rax
   14870:	75 e9                	jne    1485b <vPrimaryBlockTimeTestTask+0x2eb>
   14872:	bf 14 00 00 00       	mov    $0x14,%edi
   14877:	e8 26 7f ff ff       	callq  c7a2 <vTaskDelay>
   1487c:	48 c7 05 d1 17 12 00 	movq   $0x0,0x1217d1(%rip)        # 136058 <xRunIndicator>
   14883:	00 00 00 00 
   14887:	48 c7 45 d0 00 00 00 	movq   $0x0,-0x30(%rbp)
   1488e:	00 
   1488f:	eb 38                	jmp    148c9 <vPrimaryBlockTimeTestTask+0x359>
   14891:	48 8b 05 98 17 12 00 	mov    0x121798(%rip),%rax        # 136030 <xTestQueue>
   14898:	48 8d 4d d8          	lea    -0x28(%rbp),%rcx
   1489c:	ba 00 00 00 00       	mov    $0x0,%edx
   148a1:	48 89 ce             	mov    %rcx,%rsi
   148a4:	48 89 c7             	mov    %rax,%rdi
   148a7:	e8 37 21 ff ff       	callq  69e3 <xQueueReceive>
   148ac:	48 83 f8 01          	cmp    $0x1,%rax
   148b0:	74 0b                	je     148bd <vPrimaryBlockTimeTestTask+0x34d>
   148b2:	48 c7 05 93 17 12 00 	movq   $0x1,0x121793(%rip)        # 136050 <xErrorOccurred>
   148b9:	01 00 00 00 
   148bd:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
   148c1:	48 83 c0 01          	add    $0x1,%rax
   148c5:	48 89 45 d0          	mov    %rax,-0x30(%rbp)
   148c9:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
   148cd:	48 83 f8 04          	cmp    $0x4,%rax
   148d1:	7e be                	jle    14891 <vPrimaryBlockTimeTestTask+0x321>
   148d3:	48 8b 05 5e 17 12 00 	mov    0x12175e(%rip),%rax        # 136038 <xSecondary>
   148da:	48 89 c7             	mov    %rax,%rdi
   148dd:	e8 9d 86 ff ff       	callq  cf7f <vTaskResume>
   148e2:	eb 0a                	jmp    148ee <vPrimaryBlockTimeTestTask+0x37e>
   148e4:	bf 14 00 00 00       	mov    $0x14,%edi
   148e9:	e8 b4 7e ff ff       	callq  c7a2 <vTaskDelay>
   148ee:	48 8b 05 63 17 12 00 	mov    0x121763(%rip),%rax        # 136058 <xRunIndicator>
   148f5:	48 83 f8 55          	cmp    $0x55,%rax
   148f9:	75 e9                	jne    148e4 <vPrimaryBlockTimeTestTask+0x374>
   148fb:	bf 14 00 00 00       	mov    $0x14,%edi
   14900:	e8 9d 7e ff ff       	callq  c7a2 <vTaskDelay>
   14905:	48 c7 05 48 17 12 00 	movq   $0x0,0x121748(%rip)        # 136058 <xRunIndicator>
   1490c:	00 00 00 00 
   14910:	48 c7 45 d0 00 00 00 	movq   $0x0,-0x30(%rbp)
   14917:	00 
   14918:	e9 be 00 00 00       	jmpq   149db <vPrimaryBlockTimeTestTask+0x46b>
   1491d:	48 8b 05 0c 17 12 00 	mov    0x12170c(%rip),%rax        # 136030 <xTestQueue>
   14924:	48 8d 75 d0          	lea    -0x30(%rbp),%rsi
   14928:	b9 00 00 00 00       	mov    $0x0,%ecx
   1492d:	ba 00 00 00 00       	mov    $0x0,%edx
   14932:	48 89 c7             	mov    %rax,%rdi
   14935:	e8 5d 14 ff ff       	callq  5d97 <xQueueGenericSend>
   1493a:	48 83 f8 01          	cmp    $0x1,%rax
   1493e:	74 0b                	je     1494b <vPrimaryBlockTimeTestTask+0x3db>
   14940:	48 c7 05 05 17 12 00 	movq   $0x1,0x121705(%rip)        # 136050 <xErrorOccurred>
   14947:	01 00 00 00 
   1494b:	48 8b 05 de 16 12 00 	mov    0x1216de(%rip),%rax        # 136030 <xTestQueue>
   14952:	48 8d 4d d8          	lea    -0x28(%rbp),%rcx
   14956:	ba 00 00 00 00       	mov    $0x0,%edx
   1495b:	48 89 ce             	mov    %rcx,%rsi
   1495e:	48 89 c7             	mov    %rax,%rdi
   14961:	e8 7d 20 ff ff       	callq  69e3 <xQueueReceive>
   14966:	48 83 f8 01          	cmp    $0x1,%rax
   1496a:	74 0b                	je     14977 <vPrimaryBlockTimeTestTask+0x407>
   1496c:	48 c7 05 d9 16 12 00 	movq   $0x1,0x1216d9(%rip)        # 136050 <xErrorOccurred>
   14973:	01 00 00 00 
   14977:	48 8b 05 da 16 12 00 	mov    0x1216da(%rip),%rax        # 136058 <xRunIndicator>
   1497e:	48 83 f8 55          	cmp    $0x55,%rax
   14982:	75 0b                	jne    1498f <vPrimaryBlockTimeTestTask+0x41f>
   14984:	48 c7 05 c1 16 12 00 	movq   $0x1,0x1216c1(%rip)        # 136050 <xErrorOccurred>
   1498b:	01 00 00 00 
   1498f:	48 8b 05 a2 16 12 00 	mov    0x1216a2(%rip),%rax        # 136038 <xSecondary>
   14996:	be 06 00 00 00       	mov    $0x6,%esi
   1499b:	48 89 c7             	mov    %rax,%rdi
   1499e:	e8 99 80 ff ff       	callq  ca3c <vTaskPrioritySet>
   149a3:	48 8b 05 ae 16 12 00 	mov    0x1216ae(%rip),%rax        # 136058 <xRunIndicator>
   149aa:	48 83 f8 55          	cmp    $0x55,%rax
   149ae:	75 0b                	jne    149bb <vPrimaryBlockTimeTestTask+0x44b>
   149b0:	48 c7 05 95 16 12 00 	movq   $0x1,0x121695(%rip)        # 136050 <xErrorOccurred>
   149b7:	01 00 00 00 
   149bb:	48 8b 05 76 16 12 00 	mov    0x121676(%rip),%rax        # 136038 <xSecondary>
   149c2:	be 03 00 00 00       	mov    $0x3,%esi
   149c7:	48 89 c7             	mov    %rax,%rdi
   149ca:	e8 6d 80 ff ff       	callq  ca3c <vTaskPrioritySet>
   149cf:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
   149d3:	48 83 c0 01          	add    $0x1,%rax
   149d7:	48 89 45 d0          	mov    %rax,-0x30(%rbp)
   149db:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
   149df:	48 83 f8 04          	cmp    $0x4,%rax
   149e3:	0f 8e 34 ff ff ff    	jle    1491d <vPrimaryBlockTimeTestTask+0x3ad>
   149e9:	eb 0a                	jmp    149f5 <vPrimaryBlockTimeTestTask+0x485>
   149eb:	bf 14 00 00 00       	mov    $0x14,%edi
   149f0:	e8 ad 7d ff ff       	callq  c7a2 <vTaskDelay>
   149f5:	48 8b 05 5c 16 12 00 	mov    0x12165c(%rip),%rax        # 136058 <xRunIndicator>
   149fc:	48 83 f8 55          	cmp    $0x55,%rax
   14a00:	75 e9                	jne    149eb <vPrimaryBlockTimeTestTask+0x47b>
   14a02:	bf 14 00 00 00       	mov    $0x14,%edi
   14a07:	e8 96 7d ff ff       	callq  c7a2 <vTaskDelay>
   14a0c:	48 8b 05 2d 16 12 00 	mov    0x12162d(%rip),%rax        # 136040 <xPrimaryCycles>
   14a13:	48 83 c0 01          	add    $0x1,%rax
   14a17:	48 89 05 22 16 12 00 	mov    %rax,0x121622(%rip)        # 136040 <xPrimaryCycles>
   14a1e:	e9 6c fb ff ff       	jmpq   1458f <vPrimaryBlockTimeTestTask+0x1f>

0000000000014a23 <vSecondaryBlockTimeTestTask>:
   14a23:	f3 0f 1e fa          	endbr64 
   14a27:	55                   	push   %rbp
   14a28:	48 89 e5             	mov    %rsp,%rbp
   14a2b:	48 83 ec 30          	sub    $0x30,%rsp
   14a2f:	48 89 7d d8          	mov    %rdi,-0x28(%rbp)
   14a33:	64 48 8b 04 25 28 00 	mov    %fs:0x28,%rax
   14a3a:	00 00 
   14a3c:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
   14a40:	31 c0                	xor    %eax,%eax
   14a42:	bf 00 00 00 00       	mov    $0x0,%edi
   14a47:	e8 15 83 ff ff       	callq  cd61 <vTaskSuspend>
   14a4c:	e8 47 8e ff ff       	callq  d898 <xTaskGetTickCount>
   14a51:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
   14a55:	48 c7 45 e0 00 00 00 	movq   $0x0,-0x20(%rbp)
   14a5c:	00 
   14a5d:	48 c7 05 f0 15 12 00 	movq   $0x55,0x1215f0(%rip)        # 136058 <xRunIndicator>
   14a64:	55 00 00 00 
   14a68:	48 8b 05 c1 15 12 00 	mov    0x1215c1(%rip),%rax        # 136030 <xTestQueue>
   14a6f:	48 8d 75 e0          	lea    -0x20(%rbp),%rsi
   14a73:	b9 00 00 00 00       	mov    $0x0,%ecx
   14a78:	ba af 00 00 00       	mov    $0xaf,%edx
   14a7d:	48 89 c7             	mov    %rax,%rdi
   14a80:	e8 12 13 ff ff       	callq  5d97 <xQueueGenericSend>
   14a85:	48 85 c0             	test   %rax,%rax
   14a88:	74 0b                	je     14a95 <vSecondaryBlockTimeTestTask+0x72>
   14a8a:	48 c7 05 bb 15 12 00 	movq   $0x1,0x1215bb(%rip)        # 136050 <xErrorOccurred>
   14a91:	01 00 00 00 
   14a95:	e8 fe 8d ff ff       	callq  d898 <xTaskGetTickCount>
   14a9a:	48 2b 45 e8          	sub    -0x18(%rbp),%rax
   14a9e:	48 89 45 f0          	mov    %rax,-0x10(%rbp)
   14aa2:	48 81 7d f0 ae 00 00 	cmpq   $0xae,-0x10(%rbp)
   14aa9:	00 
   14aaa:	77 0b                	ja     14ab7 <vSecondaryBlockTimeTestTask+0x94>
   14aac:	48 c7 05 99 15 12 00 	movq   $0x1,0x121599(%rip)        # 136050 <xErrorOccurred>
   14ab3:	01 00 00 00 
   14ab7:	48 81 7d f0 be 00 00 	cmpq   $0xbe,-0x10(%rbp)
   14abe:	00 
   14abf:	76 0b                	jbe    14acc <vSecondaryBlockTimeTestTask+0xa9>
   14ac1:	48 c7 05 84 15 12 00 	movq   $0x1,0x121584(%rip)        # 136050 <xErrorOccurred>
   14ac8:	01 00 00 00 
   14acc:	48 c7 05 81 15 12 00 	movq   $0x55,0x121581(%rip)        # 136058 <xRunIndicator>
   14ad3:	55 00 00 00 
   14ad7:	bf 00 00 00 00       	mov    $0x0,%edi
   14adc:	e8 80 82 ff ff       	callq  cd61 <vTaskSuspend>
   14ae1:	e8 b2 8d ff ff       	callq  d898 <xTaskGetTickCount>
   14ae6:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
   14aea:	48 c7 05 63 15 12 00 	movq   $0x55,0x121563(%rip)        # 136058 <xRunIndicator>
   14af1:	55 00 00 00 
   14af5:	48 8b 05 34 15 12 00 	mov    0x121534(%rip),%rax        # 136030 <xTestQueue>
   14afc:	48 8d 4d e0          	lea    -0x20(%rbp),%rcx
   14b00:	ba af 00 00 00       	mov    $0xaf,%edx
   14b05:	48 89 ce             	mov    %rcx,%rsi
   14b08:	48 89 c7             	mov    %rax,%rdi
   14b0b:	e8 d3 1e ff ff       	callq  69e3 <xQueueReceive>
   14b10:	48 85 c0             	test   %rax,%rax
   14b13:	74 0b                	je     14b20 <vSecondaryBlockTimeTestTask+0xfd>
   14b15:	48 c7 05 30 15 12 00 	movq   $0x1,0x121530(%rip)        # 136050 <xErrorOccurred>
   14b1c:	01 00 00 00 
   14b20:	e8 73 8d ff ff       	callq  d898 <xTaskGetTickCount>
   14b25:	48 2b 45 e8          	sub    -0x18(%rbp),%rax
   14b29:	48 89 45 f0          	mov    %rax,-0x10(%rbp)
   14b2d:	48 81 7d f0 ae 00 00 	cmpq   $0xae,-0x10(%rbp)
   14b34:	00 
   14b35:	77 0b                	ja     14b42 <vSecondaryBlockTimeTestTask+0x11f>
   14b37:	48 c7 05 0e 15 12 00 	movq   $0x1,0x12150e(%rip)        # 136050 <xErrorOccurred>
   14b3e:	01 00 00 00 
   14b42:	48 81 7d f0 be 00 00 	cmpq   $0xbe,-0x10(%rbp)
   14b49:	00 
   14b4a:	76 0b                	jbe    14b57 <vSecondaryBlockTimeTestTask+0x134>
   14b4c:	48 c7 05 f9 14 12 00 	movq   $0x1,0x1214f9(%rip)        # 136050 <xErrorOccurred>
   14b53:	01 00 00 00 
   14b57:	48 c7 05 f6 14 12 00 	movq   $0x55,0x1214f6(%rip)        # 136058 <xRunIndicator>
   14b5e:	55 00 00 00 
   14b62:	48 8b 05 df 14 12 00 	mov    0x1214df(%rip),%rax        # 136048 <xSecondaryCycles>
   14b69:	48 83 c0 01          	add    $0x1,%rax
   14b6d:	48 89 05 d4 14 12 00 	mov    %rax,0x1214d4(%rip)        # 136048 <xSecondaryCycles>
   14b74:	e9 c9 fe ff ff       	jmpq   14a42 <vSecondaryBlockTimeTestTask+0x1f>

0000000000014b79 <prvBasicDelayTests>:
   14b79:	f3 0f 1e fa          	endbr64 
   14b7d:	55                   	push   %rbp
   14b7e:	48 89 e5             	mov    %rsp,%rbp
   14b81:	48 83 ec 60          	sub    $0x60,%rsp
   14b85:	64 48 8b 04 25 28 00 	mov    %fs:0x28,%rax
   14b8c:	00 00 
   14b8e:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
   14b92:	31 c0                	xor    %eax,%eax
   14b94:	48 c7 45 b8 4b 00 00 	movq   $0x4b,-0x48(%rbp)
   14b9b:	00 
   14b9c:	48 c7 45 c0 05 00 00 	movq   $0x5,-0x40(%rbp)
   14ba3:	00 
   14ba4:	48 c7 45 c8 07 00 00 	movq   $0x7,-0x38(%rbp)
   14bab:	00 
   14bac:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
   14bb0:	48 d1 e8             	shr    %rax
   14bb3:	48 89 45 d0          	mov    %rax,-0x30(%rbp)
   14bb7:	be 05 00 00 00       	mov    $0x5,%esi
   14bbc:	bf 00 00 00 00       	mov    $0x0,%edi
   14bc1:	e8 76 7e ff ff       	callq  ca3c <vTaskPrioritySet>
   14bc6:	e8 cd 8c ff ff       	callq  d898 <xTaskGetTickCount>
   14bcb:	48 89 45 d8          	mov    %rax,-0x28(%rbp)
   14bcf:	bf af 00 00 00       	mov    $0xaf,%edi
   14bd4:	e8 c9 7b ff ff       	callq  c7a2 <vTaskDelay>
   14bd9:	e8 ba 8c ff ff       	callq  d898 <xTaskGetTickCount>
   14bde:	48 89 45 e0          	mov    %rax,-0x20(%rbp)
   14be2:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
   14be6:	48 2b 45 d8          	sub    -0x28(%rbp),%rax
   14bea:	48 8b 55 c8          	mov    -0x38(%rbp),%rdx
   14bee:	48 81 c2 af 00 00 00 	add    $0xaf,%rdx
   14bf5:	48 39 d0             	cmp    %rdx,%rax
   14bf8:	76 0b                	jbe    14c05 <prvBasicDelayTests+0x8c>
   14bfa:	48 c7 05 4b 14 12 00 	movq   $0x1,0x12144b(%rip)        # 136050 <xErrorOccurred>
   14c01:	01 00 00 00 
   14c05:	e8 8e 8c ff ff       	callq  d898 <xTaskGetTickCount>
   14c0a:	48 89 45 e0          	mov    %rax,-0x20(%rbp)
   14c0e:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
   14c12:	48 89 45 a8          	mov    %rax,-0x58(%rbp)
   14c16:	48 c7 45 b0 00 00 00 	movq   $0x0,-0x50(%rbp)
   14c1d:	00 
   14c1e:	eb 65                	jmp    14c85 <prvBasicDelayTests+0x10c>
   14c20:	48 8b 45 b0          	mov    -0x50(%rbp),%rax
   14c24:	48 0f af 45 b8       	imul   -0x48(%rbp),%rax
   14c29:	48 89 c2             	mov    %rax,%rdx
   14c2c:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
   14c30:	48 01 d0             	add    %rdx,%rax
   14c33:	48 89 45 f0          	mov    %rax,-0x10(%rbp)
   14c37:	48 8b 55 b8          	mov    -0x48(%rbp),%rdx
   14c3b:	48 8d 45 a8          	lea    -0x58(%rbp),%rax
   14c3f:	48 89 d6             	mov    %rdx,%rsi
   14c42:	48 89 c7             	mov    %rax,%rdi
   14c45:	e8 c2 79 ff ff       	callq  c60c <xTaskDelayUntil>
   14c4a:	e8 49 8c ff ff       	callq  d898 <xTaskGetTickCount>
   14c4f:	48 2b 45 f0          	sub    -0x10(%rbp),%rax
   14c53:	48 8b 55 c8          	mov    -0x38(%rbp),%rdx
   14c57:	48 81 c2 af 00 00 00 	add    $0xaf,%rdx
   14c5e:	48 39 d0             	cmp    %rdx,%rax
   14c61:	76 0b                	jbe    14c6e <prvBasicDelayTests+0xf5>
   14c63:	48 c7 05 e2 13 12 00 	movq   $0x1,0x1213e2(%rip)        # 136050 <xErrorOccurred>
   14c6a:	01 00 00 00 
   14c6e:	48 8b 05 cb 13 12 00 	mov    0x1213cb(%rip),%rax        # 136040 <xPrimaryCycles>
   14c75:	48 83 c0 01          	add    $0x1,%rax
   14c79:	48 89 05 c0 13 12 00 	mov    %rax,0x1213c0(%rip)        # 136040 <xPrimaryCycles>
   14c80:	48 83 45 b0 01       	addq   $0x1,-0x50(%rbp)
   14c85:	48 8b 45 b0          	mov    -0x50(%rbp),%rax
   14c89:	48 3b 45 c0          	cmp    -0x40(%rbp),%rax
   14c8d:	72 91                	jb     14c20 <prvBasicDelayTests+0xa7>
   14c8f:	48 8b 55 b8          	mov    -0x48(%rbp),%rdx
   14c93:	48 8d 45 a8          	lea    -0x58(%rbp),%rax
   14c97:	48 89 d6             	mov    %rdx,%rsi
   14c9a:	48 89 c7             	mov    %rax,%rdi
   14c9d:	e8 6a 79 ff ff       	callq  c60c <xTaskDelayUntil>
   14ca2:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
   14ca6:	48 83 7d e8 01       	cmpq   $0x1,-0x18(%rbp)
   14cab:	74 0b                	je     14cb8 <prvBasicDelayTests+0x13f>
   14cad:	48 c7 05 98 13 12 00 	movq   $0x1,0x121398(%rip)        # 136050 <xErrorOccurred>
   14cb4:	01 00 00 00 
   14cb8:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
   14cbc:	48 89 c7             	mov    %rax,%rdi
   14cbf:	e8 de 7a ff ff       	callq  c7a2 <vTaskDelay>
   14cc4:	48 8b 55 b8          	mov    -0x48(%rbp),%rdx
   14cc8:	48 8d 45 a8          	lea    -0x58(%rbp),%rax
   14ccc:	48 89 d6             	mov    %rdx,%rsi
   14ccf:	48 89 c7             	mov    %rax,%rdi
   14cd2:	e8 35 79 ff ff       	callq  c60c <xTaskDelayUntil>
   14cd7:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
   14cdb:	48 83 7d e8 01       	cmpq   $0x1,-0x18(%rbp)
   14ce0:	74 0b                	je     14ced <prvBasicDelayTests+0x174>
   14ce2:	48 c7 05 63 13 12 00 	movq   $0x1,0x121363(%rip)        # 136050 <xErrorOccurred>
   14ce9:	01 00 00 00 
   14ced:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
   14cf1:	48 89 c7             	mov    %rax,%rdi
   14cf4:	e8 a9 7a ff ff       	callq  c7a2 <vTaskDelay>
   14cf9:	48 8b 55 b8          	mov    -0x48(%rbp),%rdx
   14cfd:	48 8d 45 a8          	lea    -0x58(%rbp),%rax
   14d01:	48 89 d6             	mov    %rdx,%rsi
   14d04:	48 89 c7             	mov    %rax,%rdi
   14d07:	e8 00 79 ff ff       	callq  c60c <xTaskDelayUntil>
   14d0c:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
   14d10:	48 83 7d e8 00       	cmpq   $0x0,-0x18(%rbp)
   14d15:	74 0b                	je     14d22 <prvBasicDelayTests+0x1a9>
   14d17:	48 c7 05 2e 13 12 00 	movq   $0x1,0x12132e(%rip)        # 136050 <xErrorOccurred>
   14d1e:	01 00 00 00 
   14d22:	48 8b 55 b8          	mov    -0x48(%rbp),%rdx
   14d26:	48 8d 45 a8          	lea    -0x58(%rbp),%rax
   14d2a:	48 89 d6             	mov    %rdx,%rsi
   14d2d:	48 89 c7             	mov    %rax,%rdi
   14d30:	e8 d7 78 ff ff       	callq  c60c <xTaskDelayUntil>
   14d35:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
   14d39:	48 83 7d e8 01       	cmpq   $0x1,-0x18(%rbp)
   14d3e:	74 0b                	je     14d4b <prvBasicDelayTests+0x1d2>
   14d40:	48 c7 05 05 13 12 00 	movq   $0x1,0x121305(%rip)        # 136050 <xErrorOccurred>
   14d47:	01 00 00 00 
   14d4b:	48 8b 55 b8          	mov    -0x48(%rbp),%rdx
   14d4f:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
   14d53:	48 01 d0             	add    %rdx,%rax
   14d56:	48 89 c7             	mov    %rax,%rdi
   14d59:	e8 44 7a ff ff       	callq  c7a2 <vTaskDelay>
   14d5e:	48 8b 55 b8          	mov    -0x48(%rbp),%rdx
   14d62:	48 8d 45 a8          	lea    -0x58(%rbp),%rax
   14d66:	48 89 d6             	mov    %rdx,%rsi
   14d69:	48 89 c7             	mov    %rax,%rdi
   14d6c:	e8 9b 78 ff ff       	callq  c60c <xTaskDelayUntil>
   14d71:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
   14d75:	48 83 7d e8 00       	cmpq   $0x0,-0x18(%rbp)
   14d7a:	74 0b                	je     14d87 <prvBasicDelayTests+0x20e>
   14d7c:	48 c7 05 c9 12 12 00 	movq   $0x1,0x1212c9(%rip)        # 136050 <xErrorOccurred>
   14d83:	01 00 00 00 
   14d87:	be 04 00 00 00       	mov    $0x4,%esi
   14d8c:	bf 00 00 00 00       	mov    $0x0,%edi
   14d91:	e8 a6 7c ff ff       	callq  ca3c <vTaskPrioritySet>
   14d96:	90                   	nop
   14d97:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   14d9b:	64 48 33 04 25 28 00 	xor    %fs:0x28,%rax
   14da2:	00 00 
   14da4:	74 05                	je     14dab <prvBasicDelayTests+0x232>
   14da6:	e8 25 d7 fe ff       	callq  24d0 <__stack_chk_fail@plt>
   14dab:	c9                   	leaveq 
   14dac:	c3                   	retq   

0000000000014dad <xAreBlockTimeTestTasksStillRunning>:
   14dad:	f3 0f 1e fa          	endbr64 
   14db1:	55                   	push   %rbp
   14db2:	48 89 e5             	mov    %rsp,%rbp
   14db5:	48 c7 45 f8 01 00 00 	movq   $0x1,-0x8(%rbp)
   14dbc:	00 
   14dbd:	48 8b 15 7c 12 12 00 	mov    0x12127c(%rip),%rdx        # 136040 <xPrimaryCycles>
   14dc4:	48 8b 05 95 12 12 00 	mov    0x121295(%rip),%rax        # 136060 <xLastPrimaryCycleCount.2988>
   14dcb:	48 39 c2             	cmp    %rax,%rdx
   14dce:	75 08                	jne    14dd8 <xAreBlockTimeTestTasksStillRunning+0x2b>
   14dd0:	48 c7 45 f8 00 00 00 	movq   $0x0,-0x8(%rbp)
   14dd7:	00 
   14dd8:	48 8b 15 69 12 12 00 	mov    0x121269(%rip),%rdx        # 136048 <xSecondaryCycles>
   14ddf:	48 8b 05 82 12 12 00 	mov    0x121282(%rip),%rax        # 136068 <xLastSecondaryCycleCount.2989>
   14de6:	48 39 c2             	cmp    %rax,%rdx
   14de9:	75 08                	jne    14df3 <xAreBlockTimeTestTasksStillRunning+0x46>
   14deb:	48 c7 45 f8 00 00 00 	movq   $0x0,-0x8(%rbp)
   14df2:	00 
   14df3:	48 8b 05 56 12 12 00 	mov    0x121256(%rip),%rax        # 136050 <xErrorOccurred>
   14dfa:	48 83 f8 01          	cmp    $0x1,%rax
   14dfe:	75 08                	jne    14e08 <xAreBlockTimeTestTasksStillRunning+0x5b>
   14e00:	48 c7 45 f8 00 00 00 	movq   $0x0,-0x8(%rbp)
   14e07:	00 
   14e08:	48 8b 05 39 12 12 00 	mov    0x121239(%rip),%rax        # 136048 <xSecondaryCycles>
   14e0f:	48 89 05 52 12 12 00 	mov    %rax,0x121252(%rip)        # 136068 <xLastSecondaryCycleCount.2989>
   14e16:	48 8b 05 23 12 12 00 	mov    0x121223(%rip),%rax        # 136040 <xPrimaryCycles>
   14e1d:	48 89 05 3c 12 12 00 	mov    %rax,0x12123c(%rip)        # 136060 <xLastPrimaryCycleCount.2988>
   14e24:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   14e28:	5d                   	pop    %rbp
   14e29:	c3                   	retq   

0000000000014e2a <vStartCountingSemaphoreTasks>:
   14e2a:	f3 0f 1e fa          	endbr64 
   14e2e:	55                   	push   %rbp
   14e2f:	48 89 e5             	mov    %rsp,%rbp
   14e32:	be c8 00 00 00       	mov    $0xc8,%esi
   14e37:	bf c8 00 00 00       	mov    $0xc8,%edi
   14e3c:	e8 dc 0e ff ff       	callq  5d1d <xQueueCreateCountingSemaphore>
   14e41:	48 89 05 58 12 12 00 	mov    %rax,0x121258(%rip)        # 1360a0 <xParameters>
   14e48:	48 c7 05 55 12 12 00 	movq   $0xaa,0x121255(%rip)        # 1360a8 <xParameters+0x8>
   14e4f:	aa 00 00 00 
   14e53:	48 c7 05 52 12 12 00 	movq   $0x0,0x121252(%rip)        # 1360b0 <xParameters+0x10>
   14e5a:	00 00 00 00 
   14e5e:	be 00 00 00 00       	mov    $0x0,%esi
   14e63:	bf c8 00 00 00       	mov    $0xc8,%edi
   14e68:	e8 b0 0e ff ff       	callq  5d1d <xQueueCreateCountingSemaphore>
   14e6d:	48 89 05 44 12 12 00 	mov    %rax,0x121244(%rip)        # 1360b8 <xParameters+0x18>
   14e74:	48 c7 05 41 12 12 00 	movq   $0x0,0x121241(%rip)        # 1360c0 <xParameters+0x20>
   14e7b:	00 00 00 00 
   14e7f:	48 c7 05 3e 12 12 00 	movq   $0x0,0x12123e(%rip)        # 1360c8 <xParameters+0x28>
   14e86:	00 00 00 00 
   14e8a:	48 8b 05 0f 12 12 00 	mov    0x12120f(%rip),%rax        # 1360a0 <xParameters>
   14e91:	48 85 c0             	test   %rax,%rax
   14e94:	75 10                	jne    14ea6 <vStartCountingSemaphoreTasks+0x7c>
   14e96:	48 8b 05 1b 12 12 00 	mov    0x12121b(%rip),%rax        # 1360b8 <xParameters+0x18>
   14e9d:	48 85 c0             	test   %rax,%rax
   14ea0:	0f 84 82 00 00 00    	je     14f28 <vStartCountingSemaphoreTasks+0xfe>
   14ea6:	48 8b 05 f3 11 12 00 	mov    0x1211f3(%rip),%rax        # 1360a0 <xParameters>
   14ead:	48 8d 35 bc 2c 01 00 	lea    0x12cbc(%rip),%rsi        # 27b70 <xAllowableMargin+0xc0>
   14eb4:	48 89 c7             	mov    %rax,%rdi
   14eb7:	e8 fc 36 ff ff       	callq  85b8 <vQueueAddToRegistry>
   14ebc:	48 8b 05 f5 11 12 00 	mov    0x1211f5(%rip),%rax        # 1360b8 <xParameters+0x18>
   14ec3:	48 8d 35 b5 2c 01 00 	lea    0x12cb5(%rip),%rsi        # 27b7f <xAllowableMargin+0xcf>
   14eca:	48 89 c7             	mov    %rax,%rdi
   14ecd:	e8 e6 36 ff ff       	callq  85b8 <vQueueAddToRegistry>
   14ed2:	41 b9 00 00 00 00    	mov    $0x0,%r9d
   14ed8:	41 b8 00 00 00 00    	mov    $0x0,%r8d
   14ede:	48 8d 0d bb 11 12 00 	lea    0x1211bb(%rip),%rcx        # 1360a0 <xParameters>
   14ee5:	ba 46 00 00 00       	mov    $0x46,%edx
   14eea:	48 8d 35 9d 2c 01 00 	lea    0x12c9d(%rip),%rsi        # 27b8e <xAllowableMargin+0xde>
   14ef1:	48 8d 3d 11 02 00 00 	lea    0x211(%rip),%rdi        # 15109 <prvCountingSemaphoreTask>
   14ef8:	e8 fa 6d ff ff       	callq  bcf7 <xTaskCreate>
   14efd:	41 b9 00 00 00 00    	mov    $0x0,%r9d
   14f03:	41 b8 00 00 00 00    	mov    $0x0,%r8d
   14f09:	48 8d 0d a8 11 12 00 	lea    0x1211a8(%rip),%rcx        # 1360b8 <xParameters+0x18>
   14f10:	ba 46 00 00 00       	mov    $0x46,%edx
   14f15:	48 8d 35 77 2c 01 00 	lea    0x12c77(%rip),%rsi        # 27b93 <xAllowableMargin+0xe3>
   14f1c:	48 8d 3d e6 01 00 00 	lea    0x1e6(%rip),%rdi        # 15109 <prvCountingSemaphoreTask>
   14f23:	e8 cf 6d ff ff       	callq  bcf7 <xTaskCreate>
   14f28:	90                   	nop
   14f29:	5d                   	pop    %rbp
   14f2a:	c3                   	retq   

0000000000014f2b <prvDecrementSemaphoreCount>:
   14f2b:	f3 0f 1e fa          	endbr64 
   14f2f:	55                   	push   %rbp
   14f30:	48 89 e5             	mov    %rsp,%rbp
   14f33:	48 83 ec 20          	sub    $0x20,%rsp
   14f37:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
   14f3b:	48 89 75 e0          	mov    %rsi,-0x20(%rbp)
   14f3f:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
   14f43:	b9 00 00 00 00       	mov    $0x0,%ecx
   14f48:	ba 00 00 00 00       	mov    $0x0,%edx
   14f4d:	be 00 00 00 00       	mov    $0x0,%esi
   14f52:	48 89 c7             	mov    %rax,%rdi
   14f55:	e8 3d 0e ff ff       	callq  5d97 <xQueueGenericSend>
   14f5a:	48 83 f8 01          	cmp    $0x1,%rax
   14f5e:	75 0b                	jne    14f6b <prvDecrementSemaphoreCount+0x40>
   14f60:	48 c7 05 15 11 12 00 	movq   $0x1,0x121115(%rip)        # 136080 <xErrorDetected>
   14f67:	01 00 00 00 
   14f6b:	48 c7 45 f8 00 00 00 	movq   $0x0,-0x8(%rbp)
   14f72:	00 
   14f73:	eb 64                	jmp    14fd9 <prvDecrementSemaphoreCount+0xae>
   14f75:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
   14f79:	48 89 c7             	mov    %rax,%rdi
   14f7c:	e8 8d 2e ff ff       	callq  7e0e <uxQueueMessagesWaiting>
   14f81:	ba c8 00 00 00       	mov    $0xc8,%edx
   14f86:	48 2b 55 f8          	sub    -0x8(%rbp),%rdx
   14f8a:	48 39 d0             	cmp    %rdx,%rax
   14f8d:	74 11                	je     14fa0 <prvDecrementSemaphoreCount+0x75>
   14f8f:	be 9c 00 00 00       	mov    $0x9c,%esi
   14f94:	48 8d 3d fd 2b 01 00 	lea    0x12bfd(%rip),%rdi        # 27b98 <xAllowableMargin+0xe8>
   14f9b:	e8 6c ed fe ff       	callq  3d0c <vAssertCalled>
   14fa0:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
   14fa4:	be 00 00 00 00       	mov    $0x0,%esi
   14fa9:	48 89 c7             	mov    %rax,%rdi
   14fac:	e8 c3 1f ff ff       	callq  6f74 <xQueueSemaphoreTake>
   14fb1:	48 83 f8 01          	cmp    $0x1,%rax
   14fb5:	74 0b                	je     14fc2 <prvDecrementSemaphoreCount+0x97>
   14fb7:	48 c7 05 be 10 12 00 	movq   $0x1,0x1210be(%rip)        # 136080 <xErrorDetected>
   14fbe:	01 00 00 00 
   14fc2:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
   14fc6:	48 8b 00             	mov    (%rax),%rax
   14fc9:	48 8d 50 01          	lea    0x1(%rax),%rdx
   14fcd:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
   14fd1:	48 89 10             	mov    %rdx,(%rax)
   14fd4:	48 83 45 f8 01       	addq   $0x1,-0x8(%rbp)
   14fd9:	48 81 7d f8 c7 00 00 	cmpq   $0xc7,-0x8(%rbp)
   14fe0:	00 
   14fe1:	76 92                	jbe    14f75 <prvDecrementSemaphoreCount+0x4a>
   14fe3:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
   14fe7:	48 89 c7             	mov    %rax,%rdi
   14fea:	e8 1f 2e ff ff       	callq  7e0e <uxQueueMessagesWaiting>
   14fef:	48 85 c0             	test   %rax,%rax
   14ff2:	74 11                	je     15005 <prvDecrementSemaphoreCount+0xda>
   14ff4:	be ad 00 00 00       	mov    $0xad,%esi
   14ff9:	48 8d 3d 98 2b 01 00 	lea    0x12b98(%rip),%rdi        # 27b98 <xAllowableMargin+0xe8>
   15000:	e8 07 ed fe ff       	callq  3d0c <vAssertCalled>
   15005:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
   15009:	be 00 00 00 00       	mov    $0x0,%esi
   1500e:	48 89 c7             	mov    %rax,%rdi
   15011:	e8 5e 1f ff ff       	callq  6f74 <xQueueSemaphoreTake>
   15016:	48 83 f8 01          	cmp    $0x1,%rax
   1501a:	75 0b                	jne    15027 <prvDecrementSemaphoreCount+0xfc>
   1501c:	48 c7 05 59 10 12 00 	movq   $0x1,0x121059(%rip)        # 136080 <xErrorDetected>
   15023:	01 00 00 00 
   15027:	90                   	nop
   15028:	c9                   	leaveq 
   15029:	c3                   	retq   

000000000001502a <prvIncrementSemaphoreCount>:
   1502a:	f3 0f 1e fa          	endbr64 
   1502e:	55                   	push   %rbp
   1502f:	48 89 e5             	mov    %rsp,%rbp
   15032:	48 83 ec 20          	sub    $0x20,%rsp
   15036:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
   1503a:	48 89 75 e0          	mov    %rsi,-0x20(%rbp)
   1503e:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
   15042:	be 00 00 00 00       	mov    $0x0,%esi
   15047:	48 89 c7             	mov    %rax,%rdi
   1504a:	e8 25 1f ff ff       	callq  6f74 <xQueueSemaphoreTake>
   1504f:	48 83 f8 01          	cmp    $0x1,%rax
   15053:	75 0b                	jne    15060 <prvIncrementSemaphoreCount+0x36>
   15055:	48 c7 05 20 10 12 00 	movq   $0x1,0x121020(%rip)        # 136080 <xErrorDetected>
   1505c:	01 00 00 00 
   15060:	48 c7 45 f8 00 00 00 	movq   $0x0,-0x8(%rbp)
   15067:	00 
   15068:	eb 66                	jmp    150d0 <prvIncrementSemaphoreCount+0xa6>
   1506a:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
   1506e:	48 89 c7             	mov    %rax,%rdi
   15071:	e8 98 2d ff ff       	callq  7e0e <uxQueueMessagesWaiting>
   15076:	48 39 45 f8          	cmp    %rax,-0x8(%rbp)
   1507a:	74 11                	je     1508d <prvIncrementSemaphoreCount+0x63>
   1507c:	be c5 00 00 00       	mov    $0xc5,%esi
   15081:	48 8d 3d 10 2b 01 00 	lea    0x12b10(%rip),%rdi        # 27b98 <xAllowableMargin+0xe8>
   15088:	e8 7f ec fe ff       	callq  3d0c <vAssertCalled>
   1508d:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
   15091:	b9 00 00 00 00       	mov    $0x0,%ecx
   15096:	ba 00 00 00 00       	mov    $0x0,%edx
   1509b:	be 00 00 00 00       	mov    $0x0,%esi
   150a0:	48 89 c7             	mov    %rax,%rdi
   150a3:	e8 ef 0c ff ff       	callq  5d97 <xQueueGenericSend>
   150a8:	48 83 f8 01          	cmp    $0x1,%rax
   150ac:	74 0b                	je     150b9 <prvIncrementSemaphoreCount+0x8f>
   150ae:	48 c7 05 c7 0f 12 00 	movq   $0x1,0x120fc7(%rip)        # 136080 <xErrorDetected>
   150b5:	01 00 00 00 
   150b9:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
   150bd:	48 8b 00             	mov    (%rax),%rax
   150c0:	48 8d 50 01          	lea    0x1(%rax),%rdx
   150c4:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
   150c8:	48 89 10             	mov    %rdx,(%rax)
   150cb:	48 83 45 f8 01       	addq   $0x1,-0x8(%rbp)
   150d0:	48 81 7d f8 c7 00 00 	cmpq   $0xc7,-0x8(%rbp)
   150d7:	00 
   150d8:	76 90                	jbe    1506a <prvIncrementSemaphoreCount+0x40>
   150da:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
   150de:	b9 00 00 00 00       	mov    $0x0,%ecx
   150e3:	ba 00 00 00 00       	mov    $0x0,%edx
   150e8:	be 00 00 00 00       	mov    $0x0,%esi
   150ed:	48 89 c7             	mov    %rax,%rdi
   150f0:	e8 a2 0c ff ff       	callq  5d97 <xQueueGenericSend>
   150f5:	48 83 f8 01          	cmp    $0x1,%rax
   150f9:	75 0b                	jne    15106 <prvIncrementSemaphoreCount+0xdc>
   150fb:	48 c7 05 7a 0f 12 00 	movq   $0x1,0x120f7a(%rip)        # 136080 <xErrorDetected>
   15102:	01 00 00 00 
   15106:	90                   	nop
   15107:	c9                   	leaveq 
   15108:	c3                   	retq   

0000000000015109 <prvCountingSemaphoreTask>:
   15109:	f3 0f 1e fa          	endbr64 
   1510d:	55                   	push   %rbp
   1510e:	48 89 e5             	mov    %rsp,%rbp
   15111:	48 83 ec 20          	sub    $0x20,%rsp
   15115:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
   15119:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
   1511d:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
   15121:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   15125:	48 8b 40 08          	mov    0x8(%rax),%rax
   15129:	48 3d aa 00 00 00    	cmp    $0xaa,%rax
   1512f:	75 1a                	jne    1514b <prvCountingSemaphoreTask+0x42>
   15131:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   15135:	48 8d 50 10          	lea    0x10(%rax),%rdx
   15139:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   1513d:	48 8b 00             	mov    (%rax),%rax
   15140:	48 89 d6             	mov    %rdx,%rsi
   15143:	48 89 c7             	mov    %rax,%rdi
   15146:	e8 e0 fd ff ff       	callq  14f2b <prvDecrementSemaphoreCount>
   1514b:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   1514f:	48 8b 00             	mov    (%rax),%rax
   15152:	be 00 00 00 00       	mov    $0x0,%esi
   15157:	48 89 c7             	mov    %rax,%rdi
   1515a:	e8 15 1e ff ff       	callq  6f74 <xQueueSemaphoreTake>
   1515f:	48 83 f8 01          	cmp    $0x1,%rax
   15163:	75 0b                	jne    15170 <prvCountingSemaphoreTask+0x67>
   15165:	48 c7 05 10 0f 12 00 	movq   $0x1,0x120f10(%rip)        # 136080 <xErrorDetected>
   1516c:	01 00 00 00 
   15170:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   15174:	48 8d 50 10          	lea    0x10(%rax),%rdx
   15178:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   1517c:	48 8b 00             	mov    (%rax),%rax
   1517f:	48 89 d6             	mov    %rdx,%rsi
   15182:	48 89 c7             	mov    %rax,%rdi
   15185:	e8 a0 fe ff ff       	callq  1502a <prvIncrementSemaphoreCount>
   1518a:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   1518e:	48 8d 50 10          	lea    0x10(%rax),%rdx
   15192:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   15196:	48 8b 00             	mov    (%rax),%rax
   15199:	48 89 d6             	mov    %rdx,%rsi
   1519c:	48 89 c7             	mov    %rax,%rdi
   1519f:	e8 87 fd ff ff       	callq  14f2b <prvDecrementSemaphoreCount>
   151a4:	eb ca                	jmp    15170 <prvCountingSemaphoreTask+0x67>

00000000000151a6 <xAreCountingSemaphoreTasksStillRunning>:
   151a6:	f3 0f 1e fa          	endbr64 
   151aa:	55                   	push   %rbp
   151ab:	48 89 e5             	mov    %rsp,%rbp
   151ae:	48 c7 45 f8 01 00 00 	movq   $0x1,-0x8(%rbp)
   151b5:	00 
   151b6:	48 8b 05 c3 0e 12 00 	mov    0x120ec3(%rip),%rax        # 136080 <xErrorDetected>
   151bd:	48 85 c0             	test   %rax,%rax
   151c0:	74 08                	je     151ca <xAreCountingSemaphoreTasksStillRunning+0x24>
   151c2:	48 c7 45 f8 00 00 00 	movq   $0x0,-0x8(%rbp)
   151c9:	00 
   151ca:	48 8b 15 df 0e 12 00 	mov    0x120edf(%rip),%rdx        # 1360b0 <xParameters+0x10>
   151d1:	48 8b 05 f8 0e 12 00 	mov    0x120ef8(%rip),%rax        # 1360d0 <uxLastCount0.2951>
   151d8:	48 39 c2             	cmp    %rax,%rdx
   151db:	75 0a                	jne    151e7 <xAreCountingSemaphoreTasksStillRunning+0x41>
   151dd:	48 c7 45 f8 00 00 00 	movq   $0x0,-0x8(%rbp)
   151e4:	00 
   151e5:	eb 0e                	jmp    151f5 <xAreCountingSemaphoreTasksStillRunning+0x4f>
   151e7:	48 8b 05 c2 0e 12 00 	mov    0x120ec2(%rip),%rax        # 1360b0 <xParameters+0x10>
   151ee:	48 89 05 db 0e 12 00 	mov    %rax,0x120edb(%rip)        # 1360d0 <uxLastCount0.2951>
   151f5:	48 8b 15 cc 0e 12 00 	mov    0x120ecc(%rip),%rdx        # 1360c8 <xParameters+0x28>
   151fc:	48 8b 05 d5 0e 12 00 	mov    0x120ed5(%rip),%rax        # 1360d8 <uxLastCount1.2952>
   15203:	48 39 c2             	cmp    %rax,%rdx
   15206:	75 0a                	jne    15212 <xAreCountingSemaphoreTasksStillRunning+0x6c>
   15208:	48 c7 45 f8 00 00 00 	movq   $0x0,-0x8(%rbp)
   1520f:	00 
   15210:	eb 0e                	jmp    15220 <xAreCountingSemaphoreTasksStillRunning+0x7a>
   15212:	48 8b 05 af 0e 12 00 	mov    0x120eaf(%rip),%rax        # 1360c8 <xParameters+0x28>
   15219:	48 89 05 b8 0e 12 00 	mov    %rax,0x120eb8(%rip)        # 1360d8 <uxLastCount1.2952>
   15220:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   15224:	5d                   	pop    %rbp
   15225:	c3                   	retq   

0000000000015226 <vCreateSuicidalTasks>:
   15226:	f3 0f 1e fa          	endbr64 
   1522a:	55                   	push   %rbp
   1522b:	48 89 e5             	mov    %rsp,%rbp
   1522e:	48 83 ec 10          	sub    $0x10,%rsp
   15232:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   15236:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   1523a:	41 b9 00 00 00 00    	mov    $0x0,%r9d
   15240:	49 89 c0             	mov    %rax,%r8
   15243:	b9 00 00 00 00       	mov    $0x0,%ecx
   15248:	ba 82 00 00 00       	mov    $0x82,%edx
   1524d:	48 8d 35 94 29 01 00 	lea    0x12994(%rip),%rsi        # 27be8 <uxMaxNumberOfExtraTasksRunning+0x8>
   15254:	48 8d 3d 91 00 00 00 	lea    0x91(%rip),%rdi        # 152ec <vCreateTasks>
   1525b:	e8 97 6a ff ff       	callq  bcf7 <xTaskCreate>
   15260:	90                   	nop
   15261:	c9                   	leaveq 
   15262:	c3                   	retq   

0000000000015263 <vSuicidalTask>:
   15263:	f3 0f 1e fa          	endbr64 
   15267:	55                   	push   %rbp
   15268:	48 89 e5             	mov    %rsp,%rbp
   1526b:	48 83 ec 30          	sub    $0x30,%rsp
   1526f:	48 89 7d d8          	mov    %rdi,-0x28(%rbp)
   15273:	48 c7 45 f8 c8 00 00 	movq   $0xc8,-0x8(%rbp)
   1527a:	00 
   1527b:	48 83 7d d8 00       	cmpq   $0x0,-0x28(%rbp)
   15280:	74 0d                	je     1528f <vSuicidalTask+0x2c>
   15282:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
   15286:	48 8b 00             	mov    (%rax),%rax
   15289:	48 89 45 f0          	mov    %rax,-0x10(%rbp)
   1528d:	eb 08                	jmp    15297 <vSuicidalTask+0x34>
   1528f:	48 c7 45 f0 00 00 00 	movq   $0x0,-0x10(%rbp)
   15296:	00 
   15297:	48 c7 45 e0 02 00 00 	movq   $0x2,-0x20(%rbp)
   1529e:	00 
   1529f:	48 c7 45 e8 59 00 00 	movq   $0x59,-0x18(%rbp)
   152a6:	00 
   152a7:	48 8b 55 e0          	mov    -0x20(%rbp),%rdx
   152ab:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
   152af:	48 0f af c2          	imul   %rdx,%rax
   152b3:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
   152b7:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   152bb:	48 89 c7             	mov    %rax,%rdi
   152be:	e8 df 74 ff ff       	callq  c7a2 <vTaskDelay>
   152c3:	48 83 7d f0 00       	cmpq   $0x0,-0x10(%rbp)
   152c8:	74 cd                	je     15297 <vSuicidalTask+0x34>
   152ca:	bf 00 00 00 00       	mov    $0x0,%edi
   152cf:	e8 ce 74 ff ff       	callq  c7a2 <vTaskDelay>
   152d4:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
   152d8:	48 89 c7             	mov    %rax,%rdi
   152db:	e8 f1 6f ff ff       	callq  c2d1 <vTaskDelete>
   152e0:	bf 00 00 00 00       	mov    $0x0,%edi
   152e5:	e8 e7 6f ff ff       	callq  c2d1 <vTaskDelete>
   152ea:	eb ab                	jmp    15297 <vSuicidalTask+0x34>

00000000000152ec <vCreateTasks>:
   152ec:	f3 0f 1e fa          	endbr64 
   152f0:	55                   	push   %rbp
   152f1:	48 89 e5             	mov    %rsp,%rbp
   152f4:	48 83 ec 20          	sub    $0x20,%rsp
   152f8:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
   152fc:	48 c7 45 f0 e8 03 00 	movq   $0x3e8,-0x10(%rbp)
   15303:	00 
   15304:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
   15308:	48 89 c7             	mov    %rax,%rdi
   1530b:	e8 92 74 ff ff       	callq  c7a2 <vTaskDelay>
   15310:	e8 bd 85 ff ff       	callq  d8d2 <uxTaskGetNumberOfTasks>
   15315:	48 89 05 cc 0d 12 00 	mov    %rax,0x120dcc(%rip)        # 1360e8 <uxTasksRunningAtStart>
   1531c:	bf 00 00 00 00       	mov    $0x0,%edi
   15321:	e8 83 76 ff ff       	callq  c9a9 <uxTaskPriorityGet>
   15326:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
   1532a:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
   1532e:	48 89 c7             	mov    %rax,%rdi
   15331:	e8 6c 74 ff ff       	callq  c7a2 <vTaskDelay>
   15336:	48 c7 05 bf 29 12 00 	movq   $0x0,0x1229bf(%rip)        # 137d00 <xCreatedTask>
   1533d:	00 00 00 00 
   15341:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   15345:	4c 8d 0d b4 29 12 00 	lea    0x1229b4(%rip),%r9        # 137d00 <xCreatedTask>
   1534c:	49 89 c0             	mov    %rax,%r8
   1534f:	b9 00 00 00 00       	mov    $0x0,%ecx
   15354:	ba 46 00 00 00       	mov    $0x46,%edx
   15359:	48 8d 35 90 28 01 00 	lea    0x12890(%rip),%rsi        # 27bf0 <uxMaxNumberOfExtraTasksRunning+0x10>
   15360:	48 8d 3d fc fe ff ff 	lea    -0x104(%rip),%rdi        # 15263 <vSuicidalTask>
   15367:	e8 8b 69 ff ff       	callq  bcf7 <xTaskCreate>
   1536c:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   15370:	41 b9 00 00 00 00    	mov    $0x0,%r9d
   15376:	49 89 c0             	mov    %rax,%r8
   15379:	48 8d 0d 80 29 12 00 	lea    0x122980(%rip),%rcx        # 137d00 <xCreatedTask>
   15380:	ba 46 00 00 00       	mov    $0x46,%edx
   15385:	48 8d 35 6c 28 01 00 	lea    0x1286c(%rip),%rsi        # 27bf8 <uxMaxNumberOfExtraTasksRunning+0x18>
   1538c:	48 8d 3d d0 fe ff ff 	lea    -0x130(%rip),%rdi        # 15263 <vSuicidalTask>
   15393:	e8 5f 69 ff ff       	callq  bcf7 <xTaskCreate>
   15398:	0f b7 05 41 0d 12 00 	movzwl 0x120d41(%rip),%eax        # 1360e0 <usCreationCount>
   1539f:	83 c0 01             	add    $0x1,%eax
   153a2:	66 89 05 37 0d 12 00 	mov    %ax,0x120d37(%rip)        # 1360e0 <usCreationCount>
   153a9:	e9 7c ff ff ff       	jmpq   1532a <vCreateTasks+0x3e>

00000000000153ae <xIsCreateTaskStillRunning>:
   153ae:	f3 0f 1e fa          	endbr64 
   153b2:	55                   	push   %rbp
   153b3:	48 89 e5             	mov    %rsp,%rbp
   153b6:	48 83 ec 10          	sub    $0x10,%rsp
   153ba:	48 c7 45 f8 01 00 00 	movq   $0x1,-0x8(%rbp)
   153c1:	00 
   153c2:	0f b7 15 7f bc 01 00 	movzwl 0x1bc7f(%rip),%edx        # 31048 <usLastCreationCount.3322>
   153c9:	0f b7 05 10 0d 12 00 	movzwl 0x120d10(%rip),%eax        # 1360e0 <usCreationCount>
   153d0:	66 39 c2             	cmp    %ax,%dx
   153d3:	75 0a                	jne    153df <xIsCreateTaskStillRunning+0x31>
   153d5:	48 c7 45 f8 00 00 00 	movq   $0x0,-0x8(%rbp)
   153dc:	00 
   153dd:	eb 0e                	jmp    153ed <xIsCreateTaskStillRunning+0x3f>
   153df:	0f b7 05 fa 0c 12 00 	movzwl 0x120cfa(%rip),%eax        # 1360e0 <usCreationCount>
   153e6:	66 89 05 5b bc 01 00 	mov    %ax,0x1bc5b(%rip)        # 31048 <usLastCreationCount.3322>
   153ed:	e8 e0 84 ff ff       	callq  d8d2 <uxTaskGetNumberOfTasks>
   153f2:	48 89 05 f7 0c 12 00 	mov    %rax,0x120cf7(%rip)        # 1360f0 <uxTasksRunningNow.3324>
   153f9:	48 8b 15 f0 0c 12 00 	mov    0x120cf0(%rip),%rdx        # 1360f0 <uxTasksRunningNow.3324>
   15400:	48 8b 05 e1 0c 12 00 	mov    0x120ce1(%rip),%rax        # 1360e8 <uxTasksRunningAtStart>
   15407:	48 39 c2             	cmp    %rax,%rdx
   1540a:	73 0a                	jae    15416 <xIsCreateTaskStillRunning+0x68>
   1540c:	48 c7 45 f8 00 00 00 	movq   $0x0,-0x8(%rbp)
   15413:	00 
   15414:	eb 26                	jmp    1543c <xIsCreateTaskStillRunning+0x8e>
   15416:	48 8b 15 d3 0c 12 00 	mov    0x120cd3(%rip),%rdx        # 1360f0 <uxTasksRunningNow.3324>
   1541d:	48 8b 05 c4 0c 12 00 	mov    0x120cc4(%rip),%rax        # 1360e8 <uxTasksRunningAtStart>
   15424:	48 29 c2             	sub    %rax,%rdx
   15427:	48 89 d0             	mov    %rdx,%rax
   1542a:	ba 03 00 00 00       	mov    $0x3,%edx
   1542f:	48 39 d0             	cmp    %rdx,%rax
   15432:	76 08                	jbe    1543c <xIsCreateTaskStillRunning+0x8e>
   15434:	48 c7 45 f8 00 00 00 	movq   $0x0,-0x8(%rbp)
   1543b:	00 
   1543c:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   15440:	c9                   	leaveq 
   15441:	c3                   	retq   

0000000000015442 <vStartDynamicPriorityTasks>:
   15442:	f3 0f 1e fa          	endbr64 
   15446:	55                   	push   %rbp
   15447:	48 89 e5             	mov    %rsp,%rbp
   1544a:	ba 00 00 00 00       	mov    $0x0,%edx
   1544f:	be 04 00 00 00       	mov    $0x4,%esi
   15454:	bf 01 00 00 00       	mov    $0x1,%edi
   15459:	e8 95 01 ff ff       	callq  55f3 <xQueueGenericCreate>
   1545e:	48 89 05 a3 28 12 00 	mov    %rax,0x1228a3(%rip)        # 137d08 <xSuspendedTestQueue>
   15465:	48 8b 05 9c 28 12 00 	mov    0x12289c(%rip),%rax        # 137d08 <xSuspendedTestQueue>
   1546c:	48 85 c0             	test   %rax,%rax
   1546f:	0f 84 e9 00 00 00    	je     1555e <vStartDynamicPriorityTasks+0x11c>
   15475:	48 8b 05 8c 28 12 00 	mov    0x12288c(%rip),%rax        # 137d08 <xSuspendedTestQueue>
   1547c:	48 8d 35 7d 27 01 00 	lea    0x1277d(%rip),%rsi        # 27c00 <uxMaxNumberOfExtraTasksRunning+0x20>
   15483:	48 89 c7             	mov    %rax,%rdi
   15486:	e8 2d 31 ff ff       	callq  85b8 <vQueueAddToRegistry>
   1548b:	4c 8d 0d 66 0c 12 00 	lea    0x120c66(%rip),%r9        # 1360f8 <xContinuousIncrementHandle>
   15492:	41 b8 00 00 00 00    	mov    $0x0,%r8d
   15498:	48 8d 0d 69 0c 12 00 	lea    0x120c69(%rip),%rcx        # 136108 <ulCounter>
   1549f:	ba 46 00 00 00       	mov    $0x46,%edx
   154a4:	48 8d 35 6a 27 01 00 	lea    0x1276a(%rip),%rsi        # 27c15 <uxMaxNumberOfExtraTasksRunning+0x35>
   154ab:	48 8d 3d f9 00 00 00 	lea    0xf9(%rip),%rdi        # 155ab <vContinuousIncrementTask>
   154b2:	e8 40 68 ff ff       	callq  bcf7 <xTaskCreate>
   154b7:	4c 8d 0d 42 0c 12 00 	lea    0x120c42(%rip),%r9        # 136100 <xLimitedIncrementHandle>
   154be:	41 b8 01 00 00 00    	mov    $0x1,%r8d
   154c4:	48 8d 0d 3d 0c 12 00 	lea    0x120c3d(%rip),%rcx        # 136108 <ulCounter>
   154cb:	ba 46 00 00 00       	mov    $0x46,%edx
   154d0:	48 8d 35 46 27 01 00 	lea    0x12746(%rip),%rsi        # 27c1d <uxMaxNumberOfExtraTasksRunning+0x3d>
   154d7:	48 8d 3d 83 00 00 00 	lea    0x83(%rip),%rdi        # 15561 <vLimitedIncrementTask>
   154de:	e8 14 68 ff ff       	callq  bcf7 <xTaskCreate>
   154e3:	41 b9 00 00 00 00    	mov    $0x0,%r9d
   154e9:	41 b8 00 00 00 00    	mov    $0x0,%r8d
   154ef:	b9 00 00 00 00       	mov    $0x0,%ecx
   154f4:	ba 46 00 00 00       	mov    $0x46,%edx
   154f9:	48 8d 35 25 27 01 00 	lea    0x12725(%rip),%rsi        # 27c25 <uxMaxNumberOfExtraTasksRunning+0x45>
   15500:	48 8d 3d 4a 01 00 00 	lea    0x14a(%rip),%rdi        # 15651 <vCounterControlTask>
   15507:	e8 eb 67 ff ff       	callq  bcf7 <xTaskCreate>
   1550c:	41 b9 00 00 00 00    	mov    $0x0,%r9d
   15512:	41 b8 00 00 00 00    	mov    $0x0,%r8d
   15518:	b9 00 00 00 00       	mov    $0x0,%ecx
   1551d:	ba 46 00 00 00       	mov    $0x46,%edx
   15522:	48 8d 35 03 27 01 00 	lea    0x12703(%rip),%rsi        # 27c2c <uxMaxNumberOfExtraTasksRunning+0x4c>
   15529:	48 8d 3d b3 02 00 00 	lea    0x2b3(%rip),%rdi        # 157e3 <vQueueSendWhenSuspendedTask>
   15530:	e8 c2 67 ff ff       	callq  bcf7 <xTaskCreate>
   15535:	41 b9 00 00 00 00    	mov    $0x0,%r9d
   1553b:	41 b8 00 00 00 00    	mov    $0x0,%r8d
   15541:	b9 00 00 00 00       	mov    $0x0,%ecx
   15546:	ba 46 00 00 00       	mov    $0x46,%edx
   1554b:	48 8d 35 e2 26 01 00 	lea    0x126e2(%rip),%rsi        # 27c34 <uxMaxNumberOfExtraTasksRunning+0x54>
   15552:	48 8d 3d f0 02 00 00 	lea    0x2f0(%rip),%rdi        # 15849 <vQueueReceiveWhenSuspendedTask>
   15559:	e8 99 67 ff ff       	callq  bcf7 <xTaskCreate>
   1555e:	90                   	nop
   1555f:	5d                   	pop    %rbp
   15560:	c3                   	retq   

0000000000015561 <vLimitedIncrementTask>:
   15561:	f3 0f 1e fa          	endbr64 
   15565:	55                   	push   %rbp
   15566:	48 89 e5             	mov    %rsp,%rbp
   15569:	48 83 ec 20          	sub    $0x20,%rsp
   1556d:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
   15571:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
   15575:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
   15579:	bf 00 00 00 00       	mov    $0x0,%edi
   1557e:	e8 de 77 ff ff       	callq  cd61 <vTaskSuspend>
   15583:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   15587:	8b 00                	mov    (%rax),%eax
   15589:	8d 50 01             	lea    0x1(%rax),%edx
   1558c:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   15590:	89 10                	mov    %edx,(%rax)
   15592:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   15596:	8b 00                	mov    (%rax),%eax
   15598:	3d fe 00 00 00       	cmp    $0xfe,%eax
   1559d:	76 e4                	jbe    15583 <vLimitedIncrementTask+0x22>
   1559f:	bf 00 00 00 00       	mov    $0x0,%edi
   155a4:	e8 b8 77 ff ff       	callq  cd61 <vTaskSuspend>
   155a9:	eb d8                	jmp    15583 <vLimitedIncrementTask+0x22>

00000000000155ab <vContinuousIncrementTask>:
   155ab:	f3 0f 1e fa          	endbr64 
   155af:	55                   	push   %rbp
   155b0:	48 89 e5             	mov    %rsp,%rbp
   155b3:	48 83 ec 20          	sub    $0x20,%rsp
   155b7:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
   155bb:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
   155bf:	48 89 45 f0          	mov    %rax,-0x10(%rbp)
   155c3:	bf 00 00 00 00       	mov    $0x0,%edi
   155c8:	e8 dc 73 ff ff       	callq  c9a9 <uxTaskPriorityGet>
   155cd:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
   155d1:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   155d5:	48 83 c0 01          	add    $0x1,%rax
   155d9:	48 89 c6             	mov    %rax,%rsi
   155dc:	bf 00 00 00 00       	mov    $0x0,%edi
   155e1:	e8 56 74 ff ff       	callq  ca3c <vTaskPrioritySet>
   155e6:	bf 00 00 00 00       	mov    $0x0,%edi
   155eb:	e8 b9 73 ff ff       	callq  c9a9 <uxTaskPriorityGet>
   155f0:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
   155f4:	48 83 c2 01          	add    $0x1,%rdx
   155f8:	48 39 d0             	cmp    %rdx,%rax
   155fb:	74 11                	je     1560e <vContinuousIncrementTask+0x63>
   155fd:	be e1 00 00 00       	mov    $0xe1,%esi
   15602:	48 8d 3d 37 26 01 00 	lea    0x12637(%rip),%rdi        # 27c40 <uxMaxNumberOfExtraTasksRunning+0x60>
   15609:	e8 fe e6 fe ff       	callq  3d0c <vAssertCalled>
   1560e:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
   15612:	8b 00                	mov    (%rax),%eax
   15614:	8d 50 01             	lea    0x1(%rax),%edx
   15617:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
   1561b:	89 10                	mov    %edx,(%rax)
   1561d:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   15621:	48 89 c6             	mov    %rax,%rsi
   15624:	bf 00 00 00 00       	mov    $0x0,%edi
   15629:	e8 0e 74 ff ff       	callq  ca3c <vTaskPrioritySet>
   1562e:	bf 00 00 00 00       	mov    $0x0,%edi
   15633:	e8 71 73 ff ff       	callq  c9a9 <uxTaskPriorityGet>
   15638:	48 39 45 f8          	cmp    %rax,-0x8(%rbp)
   1563c:	74 93                	je     155d1 <vContinuousIncrementTask+0x26>
   1563e:	be ea 00 00 00       	mov    $0xea,%esi
   15643:	48 8d 3d f6 25 01 00 	lea    0x125f6(%rip),%rdi        # 27c40 <uxMaxNumberOfExtraTasksRunning+0x60>
   1564a:	e8 bd e6 fe ff       	callq  3d0c <vAssertCalled>
   1564f:	eb 80                	jmp    155d1 <vContinuousIncrementTask+0x26>

0000000000015651 <vCounterControlTask>:
   15651:	f3 0f 1e fa          	endbr64 
   15655:	55                   	push   %rbp
   15656:	48 89 e5             	mov    %rsp,%rbp
   15659:	48 83 ec 20          	sub    $0x20,%rsp
   1565d:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
   15661:	66 c7 45 fa 00 00    	movw   $0x0,-0x6(%rbp)
   15667:	c7 05 97 0a 12 00 00 	movl   $0x0,0x120a97(%rip)        # 136108 <ulCounter>
   1566e:	00 00 00 
   15671:	66 c7 45 f8 00 00    	movw   $0x0,-0x8(%rbp)
   15677:	e9 a1 00 00 00       	jmpq   1571d <vCounterControlTask+0xcc>
   1567c:	48 8b 05 75 0a 12 00 	mov    0x120a75(%rip),%rax        # 1360f8 <xContinuousIncrementHandle>
   15683:	48 89 c7             	mov    %rax,%rdi
   15686:	e8 d6 76 ff ff       	callq  cd61 <vTaskSuspend>
   1568b:	48 8b 05 66 0a 12 00 	mov    0x120a66(%rip),%rax        # 1360f8 <xContinuousIncrementHandle>
   15692:	48 89 c7             	mov    %rax,%rdi
   15695:	e8 ee 71 ff ff       	callq  c888 <eTaskGetState>
   1569a:	83 f8 03             	cmp    $0x3,%eax
   1569d:	74 11                	je     156b0 <vCounterControlTask+0x5f>
   1569f:	be 0d 01 00 00       	mov    $0x10d,%esi
   156a4:	48 8d 3d 95 25 01 00 	lea    0x12595(%rip),%rdi        # 27c40 <uxMaxNumberOfExtraTasksRunning+0x60>
   156ab:	e8 5c e6 fe ff       	callq  3d0c <vAssertCalled>
   156b0:	8b 05 52 0a 12 00    	mov    0x120a52(%rip),%eax        # 136108 <ulCounter>
   156b6:	89 45 fc             	mov    %eax,-0x4(%rbp)
   156b9:	48 8b 05 38 0a 12 00 	mov    0x120a38(%rip),%rax        # 1360f8 <xContinuousIncrementHandle>
   156c0:	48 89 c7             	mov    %rax,%rdi
   156c3:	e8 b7 78 ff ff       	callq  cf7f <vTaskResume>
   156c8:	48 8b 05 29 0a 12 00 	mov    0x120a29(%rip),%rax        # 1360f8 <xContinuousIncrementHandle>
   156cf:	48 89 c7             	mov    %rax,%rdi
   156d2:	e8 b1 71 ff ff       	callq  c888 <eTaskGetState>
   156d7:	83 f8 01             	cmp    $0x1,%eax
   156da:	74 11                	je     156ed <vCounterControlTask+0x9c>
   156dc:	be 1b 01 00 00       	mov    $0x11b,%esi
   156e1:	48 8d 3d 58 25 01 00 	lea    0x12558(%rip),%rdi        # 27c40 <uxMaxNumberOfExtraTasksRunning+0x60>
   156e8:	e8 1f e6 fe ff       	callq  3d0c <vAssertCalled>
   156ed:	bf 80 00 00 00       	mov    $0x80,%edi
   156f2:	e8 ab 70 ff ff       	callq  c7a2 <vTaskDelay>
   156f7:	e8 45 7e ff ff       	callq  d541 <vTaskSuspendAll>
   156fc:	8b 05 06 0a 12 00    	mov    0x120a06(%rip),%eax        # 136108 <ulCounter>
   15702:	39 45 fc             	cmp    %eax,-0x4(%rbp)
   15705:	75 06                	jne    1570d <vCounterControlTask+0xbc>
   15707:	66 c7 45 fa 01 00    	movw   $0x1,-0x6(%rbp)
   1570d:	e8 4c 7e ff ff       	callq  d55e <xTaskResumeAll>
   15712:	0f b7 45 f8          	movzwl -0x8(%rbp),%eax
   15716:	83 c0 01             	add    $0x1,%eax
   15719:	66 89 45 f8          	mov    %ax,-0x8(%rbp)
   1571d:	66 83 7d f8 04       	cmpw   $0x4,-0x8(%rbp)
   15722:	0f 8e 54 ff ff ff    	jle    1567c <vCounterControlTask+0x2b>
   15728:	48 8b 05 c9 09 12 00 	mov    0x1209c9(%rip),%rax        # 1360f8 <xContinuousIncrementHandle>
   1572f:	48 89 c7             	mov    %rax,%rdi
   15732:	e8 2a 76 ff ff       	callq  cd61 <vTaskSuspend>
   15737:	c7 05 c7 09 12 00 00 	movl   $0x0,0x1209c7(%rip)        # 136108 <ulCounter>
   1573e:	00 00 00 
   15741:	48 8b 05 b8 09 12 00 	mov    0x1209b8(%rip),%rax        # 136100 <xLimitedIncrementHandle>
   15748:	48 89 c7             	mov    %rax,%rdi
   1574b:	e8 38 71 ff ff       	callq  c888 <eTaskGetState>
   15750:	83 f8 03             	cmp    $0x3,%eax
   15753:	74 11                	je     15766 <vCounterControlTask+0x115>
   15755:	be 3c 01 00 00       	mov    $0x13c,%esi
   1575a:	48 8d 3d df 24 01 00 	lea    0x124df(%rip),%rdi        # 27c40 <uxMaxNumberOfExtraTasksRunning+0x60>
   15761:	e8 a6 e5 fe ff       	callq  3d0c <vAssertCalled>
   15766:	48 8b 05 93 09 12 00 	mov    0x120993(%rip),%rax        # 136100 <xLimitedIncrementHandle>
   1576d:	48 89 c7             	mov    %rax,%rdi
   15770:	e8 0a 78 ff ff       	callq  cf7f <vTaskResume>
   15775:	48 8b 05 84 09 12 00 	mov    0x120984(%rip),%rax        # 136100 <xLimitedIncrementHandle>
   1577c:	48 89 c7             	mov    %rax,%rdi
   1577f:	e8 04 71 ff ff       	callq  c888 <eTaskGetState>
   15784:	83 f8 03             	cmp    $0x3,%eax
   15787:	74 11                	je     1579a <vCounterControlTask+0x149>
   15789:	be 4d 01 00 00       	mov    $0x14d,%esi
   1578e:	48 8d 3d ab 24 01 00 	lea    0x124ab(%rip),%rdi        # 27c40 <uxMaxNumberOfExtraTasksRunning+0x60>
   15795:	e8 72 e5 fe ff       	callq  3d0c <vAssertCalled>
   1579a:	8b 05 68 09 12 00    	mov    0x120968(%rip),%eax        # 136108 <ulCounter>
   157a0:	3d ff 00 00 00       	cmp    $0xff,%eax
   157a5:	74 06                	je     157ad <vCounterControlTask+0x15c>
   157a7:	66 c7 45 fa 01 00    	movw   $0x1,-0x6(%rbp)
   157ad:	66 83 7d fa 00       	cmpw   $0x0,-0x6(%rbp)
   157b2:	75 1b                	jne    157cf <vCounterControlTask+0x17e>
   157b4:	e8 16 d6 ff ff       	callq  12dcf <vPortEnterCritical>
   157b9:	0f b7 05 4c 09 12 00 	movzwl 0x12094c(%rip),%eax        # 13610c <usCheckVariable>
   157c0:	83 c0 01             	add    $0x1,%eax
   157c3:	66 89 05 42 09 12 00 	mov    %ax,0x120942(%rip)        # 13610c <usCheckVariable>
   157ca:	e8 2e d6 ff ff       	callq  12dfd <vPortExitCritical>
   157cf:	48 8b 05 22 09 12 00 	mov    0x120922(%rip),%rax        # 1360f8 <xContinuousIncrementHandle>
   157d6:	48 89 c7             	mov    %rax,%rdi
   157d9:	e8 a1 77 ff ff       	callq  cf7f <vTaskResume>
   157de:	e9 84 fe ff ff       	jmpq   15667 <vCounterControlTask+0x16>

00000000000157e3 <vQueueSendWhenSuspendedTask>:
   157e3:	f3 0f 1e fa          	endbr64 
   157e7:	55                   	push   %rbp
   157e8:	48 89 e5             	mov    %rsp,%rbp
   157eb:	48 83 ec 10          	sub    $0x10,%rsp
   157ef:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   157f3:	e8 49 7d ff ff       	callq  d541 <vTaskSuspendAll>
   157f8:	48 8b 05 09 25 12 00 	mov    0x122509(%rip),%rax        # 137d08 <xSuspendedTestQueue>
   157ff:	b9 00 00 00 00       	mov    $0x0,%ecx
   15804:	ba 00 00 00 00       	mov    $0x0,%edx
   15809:	48 8d 35 14 09 12 00 	lea    0x120914(%rip),%rsi        # 136124 <ulValueToSend.3468>
   15810:	48 89 c7             	mov    %rax,%rdi
   15813:	e8 7f 05 ff ff       	callq  5d97 <xQueueGenericSend>
   15818:	48 83 f8 01          	cmp    $0x1,%rax
   1581c:	74 0b                	je     15829 <vQueueSendWhenSuspendedTask+0x46>
   1581e:	48 c7 05 e7 08 12 00 	movq   $0x1,0x1208e7(%rip)        # 136110 <xSuspendedQueueSendError>
   15825:	01 00 00 00 
   15829:	e8 30 7d ff ff       	callq  d55e <xTaskResumeAll>
   1582e:	bf 80 00 00 00       	mov    $0x80,%edi
   15833:	e8 6a 6f ff ff       	callq  c7a2 <vTaskDelay>
   15838:	8b 05 e6 08 12 00    	mov    0x1208e6(%rip),%eax        # 136124 <ulValueToSend.3468>
   1583e:	83 c0 01             	add    $0x1,%eax
   15841:	89 05 dd 08 12 00    	mov    %eax,0x1208dd(%rip)        # 136124 <ulValueToSend.3468>
   15847:	eb aa                	jmp    157f3 <vQueueSendWhenSuspendedTask+0x10>

0000000000015849 <vQueueReceiveWhenSuspendedTask>:
   15849:	f3 0f 1e fa          	endbr64 
   1584d:	55                   	push   %rbp
   1584e:	48 89 e5             	mov    %rsp,%rbp
   15851:	48 83 ec 30          	sub    $0x30,%rsp
   15855:	48 89 7d d8          	mov    %rdi,-0x28(%rbp)
   15859:	64 48 8b 04 25 28 00 	mov    %fs:0x28,%rax
   15860:	00 00 
   15862:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
   15866:	31 c0                	xor    %eax,%eax
   15868:	e8 d4 7c ff ff       	callq  d541 <vTaskSuspendAll>
   1586d:	e8 cf 7c ff ff       	callq  d541 <vTaskSuspendAll>
   15872:	48 8b 05 8f 24 12 00 	mov    0x12248f(%rip),%rax        # 137d08 <xSuspendedTestQueue>
   15879:	48 8d 4d ec          	lea    -0x14(%rbp),%rcx
   1587d:	ba 00 00 00 00       	mov    $0x0,%edx
   15882:	48 89 ce             	mov    %rcx,%rsi
   15885:	48 89 c7             	mov    %rax,%rdi
   15888:	e8 56 11 ff ff       	callq  69e3 <xQueueReceive>
   1588d:	48 89 45 f0          	mov    %rax,-0x10(%rbp)
   15891:	e8 c8 7c ff ff       	callq  d55e <xTaskResumeAll>
   15896:	48 85 c0             	test   %rax,%rax
   15899:	74 0b                	je     158a6 <vQueueReceiveWhenSuspendedTask+0x5d>
   1589b:	48 c7 05 72 08 12 00 	movq   $0x1,0x120872(%rip)        # 136118 <xSuspendedQueueReceiveError>
   158a2:	01 00 00 00 
   158a6:	e8 b3 7c ff ff       	callq  d55e <xTaskResumeAll>
   158ab:	48 83 7d f0 00       	cmpq   $0x0,-0x10(%rbp)
   158b0:	74 b6                	je     15868 <vQueueReceiveWhenSuspendedTask+0x1f>
   158b2:	8b 55 ec             	mov    -0x14(%rbp),%edx
   158b5:	8b 05 65 08 12 00    	mov    0x120865(%rip),%eax        # 136120 <ulExpectedValue>
   158bb:	39 c2                	cmp    %eax,%edx
   158bd:	74 0b                	je     158ca <vQueueReceiveWhenSuspendedTask+0x81>
   158bf:	48 c7 05 4e 08 12 00 	movq   $0x1,0x12084e(%rip)        # 136118 <xSuspendedQueueReceiveError>
   158c6:	01 00 00 00 
   158ca:	48 8b 05 47 08 12 00 	mov    0x120847(%rip),%rax        # 136118 <xSuspendedQueueReceiveError>
   158d1:	48 83 f8 01          	cmp    $0x1,%rax
   158d5:	74 91                	je     15868 <vQueueReceiveWhenSuspendedTask+0x1f>
   158d7:	8b 05 43 08 12 00    	mov    0x120843(%rip),%eax        # 136120 <ulExpectedValue>
   158dd:	83 c0 01             	add    $0x1,%eax
   158e0:	89 05 3a 08 12 00    	mov    %eax,0x12083a(%rip)        # 136120 <ulExpectedValue>
   158e6:	eb 80                	jmp    15868 <vQueueReceiveWhenSuspendedTask+0x1f>

00000000000158e8 <xAreDynamicPriorityTasksStillRunning>:
   158e8:	f3 0f 1e fa          	endbr64 
   158ec:	55                   	push   %rbp
   158ed:	48 89 e5             	mov    %rsp,%rbp
   158f0:	48 c7 45 f8 01 00 00 	movq   $0x1,-0x8(%rbp)
   158f7:	00 
   158f8:	0f b7 15 0d 08 12 00 	movzwl 0x12080d(%rip),%edx        # 13610c <usCheckVariable>
   158ff:	0f b7 05 22 08 12 00 	movzwl 0x120822(%rip),%eax        # 136128 <usLastTaskCheck.3481>
   15906:	66 39 c2             	cmp    %ax,%dx
   15909:	75 08                	jne    15913 <xAreDynamicPriorityTasksStillRunning+0x2b>
   1590b:	48 c7 45 f8 00 00 00 	movq   $0x0,-0x8(%rbp)
   15912:	00 
   15913:	8b 15 07 08 12 00    	mov    0x120807(%rip),%edx        # 136120 <ulExpectedValue>
   15919:	8b 05 0d 08 12 00    	mov    0x12080d(%rip),%eax        # 13612c <ulLastExpectedValue.3482>
   1591f:	39 c2                	cmp    %eax,%edx
   15921:	75 08                	jne    1592b <xAreDynamicPriorityTasksStillRunning+0x43>
   15923:	48 c7 45 f8 00 00 00 	movq   $0x0,-0x8(%rbp)
   1592a:	00 
   1592b:	48 8b 05 de 07 12 00 	mov    0x1207de(%rip),%rax        # 136110 <xSuspendedQueueSendError>
   15932:	48 83 f8 01          	cmp    $0x1,%rax
   15936:	75 08                	jne    15940 <xAreDynamicPriorityTasksStillRunning+0x58>
   15938:	48 c7 45 f8 00 00 00 	movq   $0x0,-0x8(%rbp)
   1593f:	00 
   15940:	48 8b 05 d1 07 12 00 	mov    0x1207d1(%rip),%rax        # 136118 <xSuspendedQueueReceiveError>
   15947:	48 83 f8 01          	cmp    $0x1,%rax
   1594b:	75 08                	jne    15955 <xAreDynamicPriorityTasksStillRunning+0x6d>
   1594d:	48 c7 45 f8 00 00 00 	movq   $0x0,-0x8(%rbp)
   15954:	00 
   15955:	0f b7 05 b0 07 12 00 	movzwl 0x1207b0(%rip),%eax        # 13610c <usCheckVariable>
   1595c:	66 89 05 c5 07 12 00 	mov    %ax,0x1207c5(%rip)        # 136128 <usLastTaskCheck.3481>
   15963:	8b 05 b7 07 12 00    	mov    0x1207b7(%rip),%eax        # 136120 <ulExpectedValue>
   15969:	89 05 bd 07 12 00    	mov    %eax,0x1207bd(%rip)        # 13612c <ulLastExpectedValue.3482>
   1596f:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   15973:	5d                   	pop    %rbp
   15974:	c3                   	retq   

0000000000015975 <vStartEventGroupTasks>:
   15975:	f3 0f 1e fa          	endbr64 
   15979:	55                   	push   %rbp
   1597a:	48 89 e5             	mov    %rsp,%rbp
   1597d:	48 83 ec 10          	sub    $0x10,%rsp
   15981:	64 48 8b 04 25 28 00 	mov    %fs:0x28,%rax
   15988:	00 00 
   1598a:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
   1598e:	31 c0                	xor    %eax,%eax
   15990:	48 8d 45 f0          	lea    -0x10(%rbp),%rax
   15994:	49 89 c1             	mov    %rax,%r9
   15997:	41 b8 01 00 00 00    	mov    $0x1,%r8d
   1599d:	b9 00 00 00 00       	mov    $0x0,%ecx
   159a2:	ba 46 00 00 00       	mov    $0x46,%edx
   159a7:	48 8d 35 da 22 01 00 	lea    0x122da(%rip),%rsi        # 27c88 <uxMaxNumberOfExtraTasksRunning+0xa8>
   159ae:	48 8d 3d 55 03 00 00 	lea    0x355(%rip),%rdi        # 15d0a <prvTestSlaveTask>
   159b5:	e8 3d 63 ff ff       	callq  bcf7 <xTaskCreate>
   159ba:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
   159be:	41 b9 00 00 00 00    	mov    $0x0,%r9d
   159c4:	41 b8 00 00 00 00    	mov    $0x0,%r8d
   159ca:	48 89 c1             	mov    %rax,%rcx
   159cd:	ba 46 00 00 00       	mov    $0x46,%edx
   159d2:	48 8d 35 b5 22 01 00 	lea    0x122b5(%rip),%rsi        # 27c8e <uxMaxNumberOfExtraTasksRunning+0xae>
   159d9:	48 8d 3d b6 00 00 00 	lea    0xb6(%rip),%rdi        # 15a96 <prvTestMasterTask>
   159e0:	e8 12 63 ff ff       	callq  bcf7 <xTaskCreate>
   159e5:	4c 8d 0d 64 07 12 00 	lea    0x120764(%rip),%r9        # 136150 <xSyncTask1>
   159ec:	41 b8 01 00 00 00    	mov    $0x1,%r8d
   159f2:	b9 04 00 00 00       	mov    $0x4,%ecx
   159f7:	ba 46 00 00 00       	mov    $0x46,%edx
   159fc:	48 8d 35 90 22 01 00 	lea    0x12290(%rip),%rsi        # 27c93 <uxMaxNumberOfExtraTasksRunning+0xb3>
   15a03:	48 8d 3d c4 01 00 00 	lea    0x1c4(%rip),%rdi        # 15bce <prvSyncTask>
   15a0a:	e8 e8 62 ff ff       	callq  bcf7 <xTaskCreate>
   15a0f:	4c 8d 0d 42 07 12 00 	lea    0x120742(%rip),%r9        # 136158 <xSyncTask2>
   15a16:	41 b8 01 00 00 00    	mov    $0x1,%r8d
   15a1c:	b9 08 00 00 00       	mov    $0x8,%ecx
   15a21:	ba 46 00 00 00       	mov    $0x46,%edx
   15a26:	48 8d 35 66 22 01 00 	lea    0x12266(%rip),%rsi        # 27c93 <uxMaxNumberOfExtraTasksRunning+0xb3>
   15a2d:	48 8d 3d 9a 01 00 00 	lea    0x19a(%rip),%rdi        # 15bce <prvSyncTask>
   15a34:	e8 be 62 ff ff       	callq  bcf7 <xTaskCreate>
   15a39:	48 8b 05 18 07 12 00 	mov    0x120718(%rip),%rax        # 136158 <xSyncTask2>
   15a40:	48 85 c0             	test   %rax,%rax
   15a43:	75 11                	jne    15a56 <vStartEventGroupTasks+0xe1>
   15a45:	be c5 00 00 00       	mov    $0xc5,%esi
   15a4a:	48 8d 3d 47 22 01 00 	lea    0x12247(%rip),%rdi        # 27c98 <uxMaxNumberOfExtraTasksRunning+0xb8>
   15a51:	e8 b6 e2 fe ff       	callq  3d0c <vAssertCalled>
   15a56:	e8 1e 53 ff ff       	callq  ad79 <xEventGroupCreate>
   15a5b:	48 89 05 e6 06 12 00 	mov    %rax,0x1206e6(%rip)        # 136148 <xISREventGroup>
   15a62:	48 8b 05 df 06 12 00 	mov    0x1206df(%rip),%rax        # 136148 <xISREventGroup>
   15a69:	48 85 c0             	test   %rax,%rax
   15a6c:	75 11                	jne    15a7f <vStartEventGroupTasks+0x10a>
   15a6e:	be ca 00 00 00       	mov    $0xca,%esi
   15a73:	48 8d 3d 1e 22 01 00 	lea    0x1221e(%rip),%rdi        # 27c98 <uxMaxNumberOfExtraTasksRunning+0xb8>
   15a7a:	e8 8d e2 fe ff       	callq  3d0c <vAssertCalled>
   15a7f:	90                   	nop
   15a80:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   15a84:	64 48 33 04 25 28 00 	xor    %fs:0x28,%rax
   15a8b:	00 00 
   15a8d:	74 05                	je     15a94 <vStartEventGroupTasks+0x11f>
   15a8f:	e8 3c ca fe ff       	callq  24d0 <__stack_chk_fail@plt>
   15a94:	c9                   	leaveq 
   15a95:	c3                   	retq   

0000000000015a96 <prvTestMasterTask>:
   15a96:	f3 0f 1e fa          	endbr64 
   15a9a:	55                   	push   %rbp
   15a9b:	48 89 e5             	mov    %rsp,%rbp
   15a9e:	48 83 ec 20          	sub    $0x20,%rsp
   15aa2:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
   15aa6:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
   15aaa:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
   15aae:	e8 c6 52 ff ff       	callq  ad79 <xEventGroupCreate>
   15ab3:	48 89 05 86 06 12 00 	mov    %rax,0x120686(%rip)        # 136140 <xEventGroup>
   15aba:	48 8b 05 7f 06 12 00 	mov    0x12067f(%rip),%rax        # 136140 <xEventGroup>
   15ac1:	48 85 c0             	test   %rax,%rax
   15ac4:	75 11                	jne    15ad7 <prvTestMasterTask+0x41>
   15ac6:	be da 00 00 00       	mov    $0xda,%esi
   15acb:	48 8d 3d c6 21 01 00 	lea    0x121c6(%rip),%rdi        # 27c98 <uxMaxNumberOfExtraTasksRunning+0xb8>
   15ad2:	e8 35 e2 fe ff       	callq  3d0c <vAssertCalled>
   15ad7:	e8 05 0b 00 00       	callq  165e1 <prvSelectiveBitsTestMasterFunction>
   15adc:	48 89 45 f0          	mov    %rax,-0x10(%rbp)
   15ae0:	e8 94 52 ff ff       	callq  ad79 <xEventGroupCreate>
   15ae5:	48 89 05 54 06 12 00 	mov    %rax,0x120654(%rip)        # 136140 <xEventGroup>
   15aec:	48 8b 05 4d 06 12 00 	mov    0x12064d(%rip),%rax        # 136140 <xEventGroup>
   15af3:	48 85 c0             	test   %rax,%rax
   15af6:	75 11                	jne    15b09 <prvTestMasterTask+0x73>
   15af8:	be e5 00 00 00       	mov    $0xe5,%esi
   15afd:	48 8d 3d 94 21 01 00 	lea    0x12194(%rip),%rdi        # 27c98 <uxMaxNumberOfExtraTasksRunning+0xb8>
   15b04:	e8 03 e2 fe ff       	callq  3d0c <vAssertCalled>
   15b09:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
   15b0d:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
   15b11:	48 89 d6             	mov    %rdx,%rsi
   15b14:	48 89 c7             	mov    %rax,%rdi
   15b17:	e8 09 08 00 00       	callq  16325 <prvBitCombinationTestMasterFunction>
   15b1c:	48 89 45 f0          	mov    %rax,-0x10(%rbp)
   15b20:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
   15b24:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
   15b28:	48 89 d6             	mov    %rdx,%rsi
   15b2b:	48 89 c7             	mov    %rax,%rdi
   15b2e:	e8 29 04 00 00       	callq  15f5c <prvPerformTaskSyncTests>
   15b33:	48 89 45 f0          	mov    %rax,-0x10(%rbp)
   15b37:	48 8b 05 02 06 12 00 	mov    0x120602(%rip),%rax        # 136140 <xEventGroup>
   15b3e:	48 89 c7             	mov    %rax,%rdi
   15b41:	e8 9d 5d ff ff       	callq  b8e3 <vEventGroupDelete>
   15b46:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   15b4a:	48 89 c7             	mov    %rax,%rdi
   15b4d:	e8 36 6d ff ff       	callq  c888 <eTaskGetState>
   15b52:	83 f8 03             	cmp    $0x3,%eax
   15b55:	74 08                	je     15b5f <prvTestMasterTask+0xc9>
   15b57:	48 c7 45 f0 01 00 00 	movq   $0x1,-0x10(%rbp)
   15b5e:	00 
   15b5f:	48 8b 05 ea 05 12 00 	mov    0x1205ea(%rip),%rax        # 136150 <xSyncTask1>
   15b66:	48 89 c7             	mov    %rax,%rdi
   15b69:	e8 1a 6d ff ff       	callq  c888 <eTaskGetState>
   15b6e:	83 f8 03             	cmp    $0x3,%eax
   15b71:	74 08                	je     15b7b <prvTestMasterTask+0xe5>
   15b73:	48 c7 45 f0 01 00 00 	movq   $0x1,-0x10(%rbp)
   15b7a:	00 
   15b7b:	48 8b 05 d6 05 12 00 	mov    0x1205d6(%rip),%rax        # 136158 <xSyncTask2>
   15b82:	48 89 c7             	mov    %rax,%rdi
   15b85:	e8 fe 6c ff ff       	callq  c888 <eTaskGetState>
   15b8a:	83 f8 03             	cmp    $0x3,%eax
   15b8d:	74 08                	je     15b97 <prvTestMasterTask+0x101>
   15b8f:	48 c7 45 f0 01 00 00 	movq   $0x1,-0x10(%rbp)
   15b96:	00 
   15b97:	48 83 7d f0 00       	cmpq   $0x0,-0x10(%rbp)
   15b9c:	75 0f                	jne    15bad <prvTestMasterTask+0x117>
   15b9e:	8b 05 8c 05 12 00    	mov    0x12058c(%rip),%eax        # 136130 <ulTestMasterCycles>
   15ba4:	83 c0 01             	add    $0x1,%eax
   15ba7:	89 05 83 05 12 00    	mov    %eax,0x120583(%rip)        # 136130 <ulTestMasterCycles>
   15bad:	48 83 7d f0 00       	cmpq   $0x0,-0x10(%rbp)
   15bb2:	0f 84 28 ff ff ff    	je     15ae0 <prvTestMasterTask+0x4a>
   15bb8:	be 08 01 00 00       	mov    $0x108,%esi
   15bbd:	48 8d 3d d4 20 01 00 	lea    0x120d4(%rip),%rdi        # 27c98 <uxMaxNumberOfExtraTasksRunning+0xb8>
   15bc4:	e8 43 e1 fe ff       	callq  3d0c <vAssertCalled>
   15bc9:	e9 12 ff ff ff       	jmpq   15ae0 <prvTestMasterTask+0x4a>

0000000000015bce <prvSyncTask>:
   15bce:	f3 0f 1e fa          	endbr64 
   15bd2:	55                   	push   %rbp
   15bd3:	48 89 e5             	mov    %rsp,%rbp
   15bd6:	48 83 ec 20          	sub    $0x20,%rsp
   15bda:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
   15bde:	e8 90 09 00 00       	callq  16573 <prvSelectiveBitsTestSlaveFunction>
   15be3:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
   15be7:	48 89 45 f0          	mov    %rax,-0x10(%rbp)
   15beb:	bf 00 00 00 00       	mov    $0x0,%edi
   15bf0:	e8 6c 71 ff ff       	callq  cd61 <vTaskSuspend>
   15bf5:	48 8b 05 44 05 12 00 	mov    0x120544(%rip),%rax        # 136140 <xEventGroup>
   15bfc:	48 8b 75 f0          	mov    -0x10(%rbp),%rsi
   15c00:	b9 00 00 00 00       	mov    $0x0,%ecx
   15c05:	ba 0f 00 00 00       	mov    $0xf,%edx
   15c0a:	48 89 c7             	mov    %rax,%rdi
   15c0d:	e8 a4 52 ff ff       	callq  aeb6 <xEventGroupSync>
   15c12:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
   15c16:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   15c1a:	83 e0 0f             	and    $0xf,%eax
   15c1d:	48 83 f8 0f          	cmp    $0xf,%rax
   15c21:	75 11                	jne    15c34 <prvSyncTask+0x66>
   15c23:	be 31 01 00 00       	mov    $0x131,%esi
   15c28:	48 8d 3d 69 20 01 00 	lea    0x12069(%rip),%rdi        # 27c98 <uxMaxNumberOfExtraTasksRunning+0xb8>
   15c2f:	e8 d8 e0 fe ff       	callq  3d0c <vAssertCalled>
   15c34:	48 8b 05 05 05 12 00 	mov    0x120505(%rip),%rax        # 136140 <xEventGroup>
   15c3b:	48 8b 75 f0          	mov    -0x10(%rbp),%rsi
   15c3f:	48 c7 c1 ff ff ff ff 	mov    $0xffffffffffffffff,%rcx
   15c46:	ba 0f 00 00 00       	mov    $0xf,%edx
   15c4b:	48 89 c7             	mov    %rax,%rdi
   15c4e:	e8 63 52 ff ff       	callq  aeb6 <xEventGroupSync>
   15c53:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
   15c57:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   15c5b:	83 e0 0f             	and    $0xf,%eax
   15c5e:	48 83 f8 0f          	cmp    $0xf,%rax
   15c62:	74 11                	je     15c75 <prvSyncTask+0xa7>
   15c64:	be 3b 01 00 00       	mov    $0x13b,%esi
   15c69:	48 8d 3d 28 20 01 00 	lea    0x12028(%rip),%rdi        # 27c98 <uxMaxNumberOfExtraTasksRunning+0xb8>
   15c70:	e8 97 e0 fe ff       	callq  3d0c <vAssertCalled>
   15c75:	bf 00 00 00 00       	mov    $0x0,%edi
   15c7a:	e8 e2 70 ff ff       	callq  cd61 <vTaskSuspend>
   15c7f:	48 8b 05 ba 04 12 00 	mov    0x1204ba(%rip),%rax        # 136140 <xEventGroup>
   15c86:	48 8b 75 f0          	mov    -0x10(%rbp),%rsi
   15c8a:	48 c7 c1 ff ff ff ff 	mov    $0xffffffffffffffff,%rcx
   15c91:	ba 0f 00 00 00       	mov    $0xf,%edx
   15c96:	48 89 c7             	mov    %rax,%rdi
   15c99:	e8 18 52 ff ff       	callq  aeb6 <xEventGroupSync>
   15c9e:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
   15ca2:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   15ca6:	83 e0 0f             	and    $0xf,%eax
   15ca9:	48 83 f8 0f          	cmp    $0xf,%rax
   15cad:	74 11                	je     15cc0 <prvSyncTask+0xf2>
   15caf:	be 4b 01 00 00       	mov    $0x14b,%esi
   15cb4:	48 8d 3d dd 1f 01 00 	lea    0x11fdd(%rip),%rdi        # 27c98 <uxMaxNumberOfExtraTasksRunning+0xb8>
   15cbb:	e8 4c e0 fe ff       	callq  3d0c <vAssertCalled>
   15cc0:	48 8b 05 79 04 12 00 	mov    0x120479(%rip),%rax        # 136140 <xEventGroup>
   15cc7:	49 c7 c0 ff ff ff ff 	mov    $0xffffffffffffffff,%r8
   15cce:	b9 01 00 00 00       	mov    $0x1,%ecx
   15cd3:	ba 00 00 00 00       	mov    $0x0,%edx
   15cd8:	be 0f 00 00 00       	mov    $0xf,%esi
   15cdd:	48 89 c7             	mov    %rax,%rdi
   15ce0:	e8 d0 54 ff ff       	callq  b1b5 <xEventGroupWaitBits>
   15ce5:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
   15ce9:	48 83 7d f8 00       	cmpq   $0x0,-0x8(%rbp)
   15cee:	0f 84 f7 fe ff ff    	je     15beb <prvSyncTask+0x1d>
   15cf4:	be 51 01 00 00       	mov    $0x151,%esi
   15cf9:	48 8d 3d 98 1f 01 00 	lea    0x11f98(%rip),%rdi        # 27c98 <uxMaxNumberOfExtraTasksRunning+0xb8>
   15d00:	e8 07 e0 fe ff       	callq  3d0c <vAssertCalled>
   15d05:	e9 e1 fe ff ff       	jmpq   15beb <prvSyncTask+0x1d>

0000000000015d0a <prvTestSlaveTask>:
   15d0a:	f3 0f 1e fa          	endbr64 
   15d0e:	55                   	push   %rbp
   15d0f:	48 89 e5             	mov    %rsp,%rbp
   15d12:	48 83 ec 20          	sub    $0x20,%rsp
   15d16:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
   15d1a:	48 c7 45 f0 00 00 00 	movq   $0x0,-0x10(%rbp)
   15d21:	00 
   15d22:	bf 00 00 00 00       	mov    $0x0,%edi
   15d27:	e8 35 70 ff ff       	callq  cd61 <vTaskSuspend>
   15d2c:	48 8b 05 0d 04 12 00 	mov    0x12040d(%rip),%rax        # 136140 <xEventGroup>
   15d33:	49 c7 c0 ff ff ff ff 	mov    $0xffffffffffffffff,%r8
   15d3a:	b9 01 00 00 00       	mov    $0x1,%ecx
   15d3f:	ba 01 00 00 00       	mov    $0x1,%edx
   15d44:	be 02 00 00 00       	mov    $0x2,%esi
   15d49:	48 89 c7             	mov    %rax,%rdi
   15d4c:	e8 64 54 ff ff       	callq  b1b5 <xEventGroupWaitBits>
   15d51:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
   15d55:	48 81 7d f8 a2 00 00 	cmpq   $0xa2,-0x8(%rbp)
   15d5c:	00 
   15d5d:	74 08                	je     15d67 <prvTestSlaveTask+0x5d>
   15d5f:	48 c7 45 f0 01 00 00 	movq   $0x1,-0x10(%rbp)
   15d66:	00 
   15d67:	48 8b 05 d2 03 12 00 	mov    0x1203d2(%rip),%rax        # 136140 <xEventGroup>
   15d6e:	49 c7 c0 ff ff ff ff 	mov    $0xffffffffffffffff,%r8
   15d75:	b9 01 00 00 00       	mov    $0x1,%ecx
   15d7a:	ba 00 00 00 00       	mov    $0x0,%edx
   15d7f:	be a2 00 00 00       	mov    $0xa2,%esi
   15d84:	48 89 c7             	mov    %rax,%rdi
   15d87:	e8 29 54 ff ff       	callq  b1b5 <xEventGroupWaitBits>
   15d8c:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
   15d90:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   15d94:	25 a2 00 00 00       	and    $0xa2,%eax
   15d99:	48 3d a2 00 00 00    	cmp    $0xa2,%rax
   15d9f:	74 08                	je     15da9 <prvTestSlaveTask+0x9f>
   15da1:	48 c7 45 f0 01 00 00 	movq   $0x1,-0x10(%rbp)
   15da8:	00 
   15da9:	bf 00 00 00 00       	mov    $0x0,%edi
   15dae:	e8 ae 6f ff ff       	callq  cd61 <vTaskSuspend>
   15db3:	48 8b 05 86 03 12 00 	mov    0x120386(%rip),%rax        # 136140 <xEventGroup>
   15dba:	49 c7 c0 ff ff ff ff 	mov    $0xffffffffffffffff,%r8
   15dc1:	b9 01 00 00 00       	mov    $0x1,%ecx
   15dc6:	ba 01 00 00 00       	mov    $0x1,%edx
   15dcb:	be a2 00 00 00       	mov    $0xa2,%esi
   15dd0:	48 89 c7             	mov    %rax,%rdi
   15dd3:	e8 dd 53 ff ff       	callq  b1b5 <xEventGroupWaitBits>
   15dd8:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
   15ddc:	48 81 7d f8 ff 00 00 	cmpq   $0xff,-0x8(%rbp)
   15de3:	00 
   15de4:	74 08                	je     15dee <prvTestSlaveTask+0xe4>
   15de6:	48 c7 45 f0 01 00 00 	movq   $0x1,-0x10(%rbp)
   15ded:	00 
   15dee:	bf 00 00 00 00       	mov    $0x0,%edi
   15df3:	e8 69 6f ff ff       	callq  cd61 <vTaskSuspend>
   15df8:	48 8b 05 41 03 12 00 	mov    0x120341(%rip),%rax        # 136140 <xEventGroup>
   15dff:	48 c7 c1 ff ff ff ff 	mov    $0xffffffffffffffff,%rcx
   15e06:	ba 0f 00 00 00       	mov    $0xf,%edx
   15e0b:	be 02 00 00 00       	mov    $0x2,%esi
   15e10:	48 89 c7             	mov    %rax,%rdi
   15e13:	e8 9e 50 ff ff       	callq  aeb6 <xEventGroupSync>
   15e18:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
   15e1c:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   15e20:	83 e0 0f             	and    $0xf,%eax
   15e23:	48 83 f8 0f          	cmp    $0xf,%rax
   15e27:	74 08                	je     15e31 <prvTestSlaveTask+0x127>
   15e29:	48 c7 45 f0 01 00 00 	movq   $0x1,-0x10(%rbp)
   15e30:	00 
   15e31:	48 8b 05 08 03 12 00 	mov    0x120308(%rip),%rax        # 136140 <xEventGroup>
   15e38:	be 00 00 00 00       	mov    $0x0,%esi
   15e3d:	48 89 c7             	mov    %rax,%rdi
   15e40:	e8 a2 58 ff ff       	callq  b6e7 <xEventGroupSetBits>
   15e45:	48 85 c0             	test   %rax,%rax
   15e48:	74 08                	je     15e52 <prvTestSlaveTask+0x148>
   15e4a:	48 c7 45 f0 01 00 00 	movq   $0x1,-0x10(%rbp)
   15e51:	00 
   15e52:	48 8b 05 e7 02 12 00 	mov    0x1202e7(%rip),%rax        # 136140 <xEventGroup>
   15e59:	be 00 00 00 00       	mov    $0x0,%esi
   15e5e:	48 89 c7             	mov    %rax,%rdi
   15e61:	e8 d6 56 ff ff       	callq  b53c <xEventGroupClearBits>
   15e66:	48 85 c0             	test   %rax,%rax
   15e69:	74 08                	je     15e73 <prvTestSlaveTask+0x169>
   15e6b:	48 c7 45 f0 01 00 00 	movq   $0x1,-0x10(%rbp)
   15e72:	00 
   15e73:	48 83 7d f0 00       	cmpq   $0x0,-0x10(%rbp)
   15e78:	75 0f                	jne    15e89 <prvTestSlaveTask+0x17f>
   15e7a:	8b 05 b4 02 12 00    	mov    0x1202b4(%rip),%eax        # 136134 <ulTestSlaveCycles>
   15e80:	83 c0 01             	add    $0x1,%eax
   15e83:	89 05 ab 02 12 00    	mov    %eax,0x1202ab(%rip)        # 136134 <ulTestSlaveCycles>
   15e89:	bf 00 00 00 00       	mov    $0x0,%edi
   15e8e:	e8 ce 6e ff ff       	callq  cd61 <vTaskSuspend>
   15e93:	48 8b 05 a6 02 12 00 	mov    0x1202a6(%rip),%rax        # 136140 <xEventGroup>
   15e9a:	48 c7 c1 ff ff ff ff 	mov    $0xffffffffffffffff,%rcx
   15ea1:	ba 0f 00 00 00       	mov    $0xf,%edx
   15ea6:	be 02 00 00 00       	mov    $0x2,%esi
   15eab:	48 89 c7             	mov    %rax,%rdi
   15eae:	e8 03 50 ff ff       	callq  aeb6 <xEventGroupSync>
   15eb3:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
   15eb7:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   15ebb:	83 e0 0f             	and    $0xf,%eax
   15ebe:	48 83 f8 0f          	cmp    $0xf,%rax
   15ec2:	74 08                	je     15ecc <prvTestSlaveTask+0x1c2>
   15ec4:	48 c7 45 f0 01 00 00 	movq   $0x1,-0x10(%rbp)
   15ecb:	00 
   15ecc:	48 8b 05 6d 02 12 00 	mov    0x12026d(%rip),%rax        # 136140 <xEventGroup>
   15ed3:	be 00 00 00 00       	mov    $0x0,%esi
   15ed8:	48 89 c7             	mov    %rax,%rdi
   15edb:	e8 07 58 ff ff       	callq  b6e7 <xEventGroupSetBits>
   15ee0:	48 85 c0             	test   %rax,%rax
   15ee3:	74 08                	je     15eed <prvTestSlaveTask+0x1e3>
   15ee5:	48 c7 45 f0 01 00 00 	movq   $0x1,-0x10(%rbp)
   15eec:	00 
   15eed:	48 8b 05 4c 02 12 00 	mov    0x12024c(%rip),%rax        # 136140 <xEventGroup>
   15ef4:	49 c7 c0 ff ff ff ff 	mov    $0xffffffffffffffff,%r8
   15efb:	b9 01 00 00 00       	mov    $0x1,%ecx
   15f00:	ba 00 00 00 00       	mov    $0x0,%edx
   15f05:	be 0f 00 00 00       	mov    $0xf,%esi
   15f0a:	48 89 c7             	mov    %rax,%rdi
   15f0d:	e8 a3 52 ff ff       	callq  b1b5 <xEventGroupWaitBits>
   15f12:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
   15f16:	48 83 7d f8 00       	cmpq   $0x0,-0x8(%rbp)
   15f1b:	74 08                	je     15f25 <prvTestSlaveTask+0x21b>
   15f1d:	48 c7 45 f0 01 00 00 	movq   $0x1,-0x10(%rbp)
   15f24:	00 
   15f25:	48 83 7d f0 00       	cmpq   $0x0,-0x10(%rbp)
   15f2a:	75 0f                	jne    15f3b <prvTestSlaveTask+0x231>
   15f2c:	8b 05 02 02 12 00    	mov    0x120202(%rip),%eax        # 136134 <ulTestSlaveCycles>
   15f32:	83 c0 01             	add    $0x1,%eax
   15f35:	89 05 f9 01 12 00    	mov    %eax,0x1201f9(%rip)        # 136134 <ulTestSlaveCycles>
   15f3b:	48 83 7d f0 00       	cmpq   $0x0,-0x10(%rbp)
   15f40:	0f 84 dc fd ff ff    	je     15d22 <prvTestSlaveTask+0x18>
   15f46:	be f5 01 00 00       	mov    $0x1f5,%esi
   15f4b:	48 8d 3d 46 1d 01 00 	lea    0x11d46(%rip),%rdi        # 27c98 <uxMaxNumberOfExtraTasksRunning+0xb8>
   15f52:	e8 b5 dd fe ff       	callq  3d0c <vAssertCalled>
   15f57:	e9 c6 fd ff ff       	jmpq   15d22 <prvTestSlaveTask+0x18>

0000000000015f5c <prvPerformTaskSyncTests>:
   15f5c:	f3 0f 1e fa          	endbr64 
   15f60:	55                   	push   %rbp
   15f61:	48 89 e5             	mov    %rsp,%rbp
   15f64:	48 83 ec 20          	sub    $0x20,%rsp
   15f68:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
   15f6c:	48 89 75 e0          	mov    %rsi,-0x20(%rbp)
   15f70:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
   15f74:	48 89 c7             	mov    %rax,%rdi
   15f77:	e8 0c 69 ff ff       	callq  c888 <eTaskGetState>
   15f7c:	83 f8 03             	cmp    $0x3,%eax
   15f7f:	74 08                	je     15f89 <prvPerformTaskSyncTests+0x2d>
   15f81:	48 c7 45 e8 01 00 00 	movq   $0x1,-0x18(%rbp)
   15f88:	00 
   15f89:	48 8b 05 c0 01 12 00 	mov    0x1201c0(%rip),%rax        # 136150 <xSyncTask1>
   15f90:	48 89 c7             	mov    %rax,%rdi
   15f93:	e8 f0 68 ff ff       	callq  c888 <eTaskGetState>
   15f98:	83 f8 03             	cmp    $0x3,%eax
   15f9b:	74 08                	je     15fa5 <prvPerformTaskSyncTests+0x49>
   15f9d:	48 c7 45 e8 01 00 00 	movq   $0x1,-0x18(%rbp)
   15fa4:	00 
   15fa5:	48 8b 05 ac 01 12 00 	mov    0x1201ac(%rip),%rax        # 136158 <xSyncTask2>
   15fac:	48 89 c7             	mov    %rax,%rdi
   15faf:	e8 d4 68 ff ff       	callq  c888 <eTaskGetState>
   15fb4:	83 f8 03             	cmp    $0x3,%eax
   15fb7:	74 08                	je     15fc1 <prvPerformTaskSyncTests+0x65>
   15fb9:	48 c7 45 e8 01 00 00 	movq   $0x1,-0x18(%rbp)
   15fc0:	00 
   15fc1:	48 8b 05 78 01 12 00 	mov    0x120178(%rip),%rax        # 136140 <xEventGroup>
   15fc8:	be 0e 00 00 00       	mov    $0xe,%esi
   15fcd:	48 89 c7             	mov    %rax,%rdi
   15fd0:	e8 12 57 ff ff       	callq  b6e7 <xEventGroupSetBits>
   15fd5:	48 8b 05 64 01 12 00 	mov    0x120164(%rip),%rax        # 136140 <xEventGroup>
   15fdc:	48 c7 c1 ff ff ff ff 	mov    $0xffffffffffffffff,%rcx
   15fe3:	ba 01 00 00 00       	mov    $0x1,%edx
   15fe8:	be 01 00 00 00       	mov    $0x1,%esi
   15fed:	48 89 c7             	mov    %rax,%rdi
   15ff0:	e8 c1 4e ff ff       	callq  aeb6 <xEventGroupSync>
   15ff5:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
   15ff9:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   15ffd:	83 e0 01             	and    $0x1,%eax
   16000:	48 85 c0             	test   %rax,%rax
   16003:	75 08                	jne    1600d <prvPerformTaskSyncTests+0xb1>
   16005:	48 c7 45 e8 01 00 00 	movq   $0x1,-0x18(%rbp)
   1600c:	00 
   1600d:	48 8b 05 2c 01 12 00 	mov    0x12012c(%rip),%rax        # 136140 <xEventGroup>
   16014:	be 00 00 00 00       	mov    $0x0,%esi
   16019:	48 89 c7             	mov    %rax,%rdi
   1601c:	e8 1b 55 ff ff       	callq  b53c <xEventGroupClearBits>
   16021:	48 83 f8 0e          	cmp    $0xe,%rax
   16025:	74 08                	je     1602f <prvPerformTaskSyncTests+0xd3>
   16027:	48 c7 45 e8 01 00 00 	movq   $0x1,-0x18(%rbp)
   1602e:	00 
   1602f:	48 8b 05 0a 01 12 00 	mov    0x12010a(%rip),%rax        # 136140 <xEventGroup>
   16036:	be 0e 00 00 00       	mov    $0xe,%esi
   1603b:	48 89 c7             	mov    %rax,%rdi
   1603e:	e8 f9 54 ff ff       	callq  b53c <xEventGroupClearBits>
   16043:	48 8b 05 f6 00 12 00 	mov    0x1200f6(%rip),%rax        # 136140 <xEventGroup>
   1604a:	be 00 00 00 00       	mov    $0x0,%esi
   1604f:	48 89 c7             	mov    %rax,%rdi
   16052:	e8 e5 54 ff ff       	callq  b53c <xEventGroupClearBits>
   16057:	48 85 c0             	test   %rax,%rax
   1605a:	74 08                	je     16064 <prvPerformTaskSyncTests+0x108>
   1605c:	48 c7 45 e8 01 00 00 	movq   $0x1,-0x18(%rbp)
   16063:	00 
   16064:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
   16068:	48 89 c7             	mov    %rax,%rdi
   1606b:	e8 0f 6f ff ff       	callq  cf7f <vTaskResume>
   16070:	48 8b 05 d9 00 12 00 	mov    0x1200d9(%rip),%rax        # 136150 <xSyncTask1>
   16077:	48 89 c7             	mov    %rax,%rdi
   1607a:	e8 00 6f ff ff       	callq  cf7f <vTaskResume>
   1607f:	48 8b 05 d2 00 12 00 	mov    0x1200d2(%rip),%rax        # 136158 <xSyncTask2>
   16086:	48 89 c7             	mov    %rax,%rdi
   16089:	e8 f1 6e ff ff       	callq  cf7f <vTaskResume>
   1608e:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
   16092:	48 89 c7             	mov    %rax,%rdi
   16095:	e8 ee 67 ff ff       	callq  c888 <eTaskGetState>
   1609a:	83 f8 02             	cmp    $0x2,%eax
   1609d:	74 08                	je     160a7 <prvPerformTaskSyncTests+0x14b>
   1609f:	48 c7 45 e8 01 00 00 	movq   $0x1,-0x18(%rbp)
   160a6:	00 
   160a7:	48 8b 05 a2 00 12 00 	mov    0x1200a2(%rip),%rax        # 136150 <xSyncTask1>
   160ae:	48 89 c7             	mov    %rax,%rdi
   160b1:	e8 d2 67 ff ff       	callq  c888 <eTaskGetState>
   160b6:	83 f8 02             	cmp    $0x2,%eax
   160b9:	74 08                	je     160c3 <prvPerformTaskSyncTests+0x167>
   160bb:	48 c7 45 e8 01 00 00 	movq   $0x1,-0x18(%rbp)
   160c2:	00 
   160c3:	48 8b 05 8e 00 12 00 	mov    0x12008e(%rip),%rax        # 136158 <xSyncTask2>
   160ca:	48 89 c7             	mov    %rax,%rdi
   160cd:	e8 b6 67 ff ff       	callq  c888 <eTaskGetState>
   160d2:	83 f8 02             	cmp    $0x2,%eax
   160d5:	74 08                	je     160df <prvPerformTaskSyncTests+0x183>
   160d7:	48 c7 45 e8 01 00 00 	movq   $0x1,-0x18(%rbp)
   160de:	00 
   160df:	48 8b 05 5a 00 12 00 	mov    0x12005a(%rip),%rax        # 136140 <xEventGroup>
   160e6:	48 c7 c1 ff ff ff ff 	mov    $0xffffffffffffffff,%rcx
   160ed:	ba 0f 00 00 00       	mov    $0xf,%edx
   160f2:	be 01 00 00 00       	mov    $0x1,%esi
   160f7:	48 89 c7             	mov    %rax,%rdi
   160fa:	e8 b7 4d ff ff       	callq  aeb6 <xEventGroupSync>
   160ff:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
   16103:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   16107:	83 e0 0f             	and    $0xf,%eax
   1610a:	48 83 f8 0f          	cmp    $0xf,%rax
   1610e:	74 08                	je     16118 <prvPerformTaskSyncTests+0x1bc>
   16110:	48 c7 45 e8 01 00 00 	movq   $0x1,-0x18(%rbp)
   16117:	00 
   16118:	48 8b 05 21 00 12 00 	mov    0x120021(%rip),%rax        # 136140 <xEventGroup>
   1611f:	be 00 00 00 00       	mov    $0x0,%esi
   16124:	48 89 c7             	mov    %rax,%rdi
   16127:	e8 10 54 ff ff       	callq  b53c <xEventGroupClearBits>
   1612c:	48 85 c0             	test   %rax,%rax
   1612f:	74 08                	je     16139 <prvPerformTaskSyncTests+0x1dd>
   16131:	48 c7 45 e8 01 00 00 	movq   $0x1,-0x18(%rbp)
   16138:	00 
   16139:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
   1613d:	48 89 c7             	mov    %rax,%rdi
   16140:	e8 43 67 ff ff       	callq  c888 <eTaskGetState>
   16145:	83 f8 03             	cmp    $0x3,%eax
   16148:	74 08                	je     16152 <prvPerformTaskSyncTests+0x1f6>
   1614a:	48 c7 45 e8 01 00 00 	movq   $0x1,-0x18(%rbp)
   16151:	00 
   16152:	48 8b 05 f7 ff 11 00 	mov    0x11fff7(%rip),%rax        # 136150 <xSyncTask1>
   16159:	48 89 c7             	mov    %rax,%rdi
   1615c:	e8 27 67 ff ff       	callq  c888 <eTaskGetState>
   16161:	83 f8 03             	cmp    $0x3,%eax
   16164:	74 08                	je     1616e <prvPerformTaskSyncTests+0x212>
   16166:	48 c7 45 e8 01 00 00 	movq   $0x1,-0x18(%rbp)
   1616d:	00 
   1616e:	48 8b 05 e3 ff 11 00 	mov    0x11ffe3(%rip),%rax        # 136158 <xSyncTask2>
   16175:	48 89 c7             	mov    %rax,%rdi
   16178:	e8 0b 67 ff ff       	callq  c888 <eTaskGetState>
   1617d:	83 f8 03             	cmp    $0x3,%eax
   16180:	74 08                	je     1618a <prvPerformTaskSyncTests+0x22e>
   16182:	48 c7 45 e8 01 00 00 	movq   $0x1,-0x18(%rbp)
   16189:	00 
   1618a:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
   1618e:	48 89 c7             	mov    %rax,%rdi
   16191:	e8 e9 6d ff ff       	callq  cf7f <vTaskResume>
   16196:	48 8b 05 b3 ff 11 00 	mov    0x11ffb3(%rip),%rax        # 136150 <xSyncTask1>
   1619d:	48 89 c7             	mov    %rax,%rdi
   161a0:	e8 da 6d ff ff       	callq  cf7f <vTaskResume>
   161a5:	48 8b 05 ac ff 11 00 	mov    0x11ffac(%rip),%rax        # 136158 <xSyncTask2>
   161ac:	48 89 c7             	mov    %rax,%rdi
   161af:	e8 cb 6d ff ff       	callq  cf7f <vTaskResume>
   161b4:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
   161b8:	48 89 c7             	mov    %rax,%rdi
   161bb:	e8 c8 66 ff ff       	callq  c888 <eTaskGetState>
   161c0:	83 f8 02             	cmp    $0x2,%eax
   161c3:	74 08                	je     161cd <prvPerformTaskSyncTests+0x271>
   161c5:	48 c7 45 e8 01 00 00 	movq   $0x1,-0x18(%rbp)
   161cc:	00 
   161cd:	48 8b 05 7c ff 11 00 	mov    0x11ff7c(%rip),%rax        # 136150 <xSyncTask1>
   161d4:	48 89 c7             	mov    %rax,%rdi
   161d7:	e8 ac 66 ff ff       	callq  c888 <eTaskGetState>
   161dc:	83 f8 02             	cmp    $0x2,%eax
   161df:	74 08                	je     161e9 <prvPerformTaskSyncTests+0x28d>
   161e1:	48 c7 45 e8 01 00 00 	movq   $0x1,-0x18(%rbp)
   161e8:	00 
   161e9:	48 8b 05 68 ff 11 00 	mov    0x11ff68(%rip),%rax        # 136158 <xSyncTask2>
   161f0:	48 89 c7             	mov    %rax,%rdi
   161f3:	e8 90 66 ff ff       	callq  c888 <eTaskGetState>
   161f8:	83 f8 02             	cmp    $0x2,%eax
   161fb:	74 08                	je     16205 <prvPerformTaskSyncTests+0x2a9>
   161fd:	48 c7 45 e8 01 00 00 	movq   $0x1,-0x18(%rbp)
   16204:	00 
   16205:	be 02 00 00 00       	mov    $0x2,%esi
   1620a:	bf 00 00 00 00       	mov    $0x0,%edi
   1620f:	e8 28 68 ff ff       	callq  ca3c <vTaskPrioritySet>
   16214:	48 8b 05 25 ff 11 00 	mov    0x11ff25(%rip),%rax        # 136140 <xEventGroup>
   1621b:	48 c7 c1 ff ff ff ff 	mov    $0xffffffffffffffff,%rcx
   16222:	ba 0f 00 00 00       	mov    $0xf,%edx
   16227:	be 01 00 00 00       	mov    $0x1,%esi
   1622c:	48 89 c7             	mov    %rax,%rdi
   1622f:	e8 82 4c ff ff       	callq  aeb6 <xEventGroupSync>
   16234:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
   16238:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   1623c:	83 e0 0f             	and    $0xf,%eax
   1623f:	48 83 f8 0f          	cmp    $0xf,%rax
   16243:	74 08                	je     1624d <prvPerformTaskSyncTests+0x2f1>
   16245:	48 c7 45 e8 01 00 00 	movq   $0x1,-0x18(%rbp)
   1624c:	00 
   1624d:	48 8b 05 ec fe 11 00 	mov    0x11feec(%rip),%rax        # 136140 <xEventGroup>
   16254:	be 00 00 00 00       	mov    $0x0,%esi
   16259:	48 89 c7             	mov    %rax,%rdi
   1625c:	e8 db 52 ff ff       	callq  b53c <xEventGroupClearBits>
   16261:	48 85 c0             	test   %rax,%rax
   16264:	74 08                	je     1626e <prvPerformTaskSyncTests+0x312>
   16266:	48 c7 45 e8 01 00 00 	movq   $0x1,-0x18(%rbp)
   1626d:	00 
   1626e:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
   16272:	48 89 c7             	mov    %rax,%rdi
   16275:	e8 0e 66 ff ff       	callq  c888 <eTaskGetState>
   1627a:	83 f8 01             	cmp    $0x1,%eax
   1627d:	74 08                	je     16287 <prvPerformTaskSyncTests+0x32b>
   1627f:	48 c7 45 e8 01 00 00 	movq   $0x1,-0x18(%rbp)
   16286:	00 
   16287:	48 8b 05 c2 fe 11 00 	mov    0x11fec2(%rip),%rax        # 136150 <xSyncTask1>
   1628e:	48 89 c7             	mov    %rax,%rdi
   16291:	e8 f2 65 ff ff       	callq  c888 <eTaskGetState>
   16296:	83 f8 01             	cmp    $0x1,%eax
   16299:	74 08                	je     162a3 <prvPerformTaskSyncTests+0x347>
   1629b:	48 c7 45 e8 01 00 00 	movq   $0x1,-0x18(%rbp)
   162a2:	00 
   162a3:	48 8b 05 ae fe 11 00 	mov    0x11feae(%rip),%rax        # 136158 <xSyncTask2>
   162aa:	48 89 c7             	mov    %rax,%rdi
   162ad:	e8 d6 65 ff ff       	callq  c888 <eTaskGetState>
   162b2:	83 f8 01             	cmp    $0x1,%eax
   162b5:	74 08                	je     162bf <prvPerformTaskSyncTests+0x363>
   162b7:	48 c7 45 e8 01 00 00 	movq   $0x1,-0x18(%rbp)
   162be:	00 
   162bf:	be 00 00 00 00       	mov    $0x0,%esi
   162c4:	bf 00 00 00 00       	mov    $0x0,%edi
   162c9:	e8 6e 67 ff ff       	callq  ca3c <vTaskPrioritySet>
   162ce:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
   162d2:	48 89 c7             	mov    %rax,%rdi
   162d5:	e8 ae 65 ff ff       	callq  c888 <eTaskGetState>
   162da:	83 f8 02             	cmp    $0x2,%eax
   162dd:	74 08                	je     162e7 <prvPerformTaskSyncTests+0x38b>
   162df:	48 c7 45 e8 01 00 00 	movq   $0x1,-0x18(%rbp)
   162e6:	00 
   162e7:	48 8b 05 62 fe 11 00 	mov    0x11fe62(%rip),%rax        # 136150 <xSyncTask1>
   162ee:	48 89 c7             	mov    %rax,%rdi
   162f1:	e8 92 65 ff ff       	callq  c888 <eTaskGetState>
   162f6:	83 f8 02             	cmp    $0x2,%eax
   162f9:	74 08                	je     16303 <prvPerformTaskSyncTests+0x3a7>
   162fb:	48 c7 45 e8 01 00 00 	movq   $0x1,-0x18(%rbp)
   16302:	00 
   16303:	48 8b 05 4e fe 11 00 	mov    0x11fe4e(%rip),%rax        # 136158 <xSyncTask2>
   1630a:	48 89 c7             	mov    %rax,%rdi
   1630d:	e8 76 65 ff ff       	callq  c888 <eTaskGetState>
   16312:	83 f8 02             	cmp    $0x2,%eax
   16315:	74 08                	je     1631f <prvPerformTaskSyncTests+0x3c3>
   16317:	48 c7 45 e8 01 00 00 	movq   $0x1,-0x18(%rbp)
   1631e:	00 
   1631f:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
   16323:	c9                   	leaveq 
   16324:	c3                   	retq   

0000000000016325 <prvBitCombinationTestMasterFunction>:
   16325:	f3 0f 1e fa          	endbr64 
   16329:	55                   	push   %rbp
   1632a:	48 89 e5             	mov    %rsp,%rbp
   1632d:	48 83 ec 20          	sub    $0x20,%rsp
   16331:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
   16335:	48 89 75 e0          	mov    %rsi,-0x20(%rbp)
   16339:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
   1633d:	48 89 c7             	mov    %rax,%rdi
   16340:	e8 3a 6c ff ff       	callq  cf7f <vTaskResume>
   16345:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
   16349:	48 89 c7             	mov    %rax,%rdi
   1634c:	e8 37 65 ff ff       	callq  c888 <eTaskGetState>
   16351:	83 f8 02             	cmp    $0x2,%eax
   16354:	74 08                	je     1635e <prvBitCombinationTestMasterFunction+0x39>
   16356:	48 c7 45 e8 01 00 00 	movq   $0x1,-0x18(%rbp)
   1635d:	00 
   1635e:	48 8b 05 db fd 11 00 	mov    0x11fddb(%rip),%rax        # 136140 <xEventGroup>
   16365:	be a2 00 00 00       	mov    $0xa2,%esi
   1636a:	48 89 c7             	mov    %rax,%rdi
   1636d:	e8 75 53 ff ff       	callq  b6e7 <xEventGroupSetBits>
   16372:	48 8b 05 c7 fd 11 00 	mov    0x11fdc7(%rip),%rax        # 136140 <xEventGroup>
   16379:	41 b8 00 00 00 00    	mov    $0x0,%r8d
   1637f:	b9 00 00 00 00       	mov    $0x0,%ecx
   16384:	ba 00 00 00 00       	mov    $0x0,%edx
   16389:	be ff 00 00 00       	mov    $0xff,%esi
   1638e:	48 89 c7             	mov    %rax,%rdi
   16391:	e8 1f 4e ff ff       	callq  b1b5 <xEventGroupWaitBits>
   16396:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
   1639a:	48 81 7d f8 a0 00 00 	cmpq   $0xa0,-0x8(%rbp)
   163a1:	00 
   163a2:	74 08                	je     163ac <prvBitCombinationTestMasterFunction+0x87>
   163a4:	48 c7 45 e8 01 00 00 	movq   $0x1,-0x18(%rbp)
   163ab:	00 
   163ac:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
   163b0:	48 89 c7             	mov    %rax,%rdi
   163b3:	e8 d0 64 ff ff       	callq  c888 <eTaskGetState>
   163b8:	83 f8 02             	cmp    $0x2,%eax
   163bb:	74 08                	je     163c5 <prvBitCombinationTestMasterFunction+0xa0>
   163bd:	48 c7 45 e8 01 00 00 	movq   $0x1,-0x18(%rbp)
   163c4:	00 
   163c5:	48 8b 05 74 fd 11 00 	mov    0x11fd74(%rip),%rax        # 136140 <xEventGroup>
   163cc:	be fd 00 00 00       	mov    $0xfd,%esi
   163d1:	48 89 c7             	mov    %rax,%rdi
   163d4:	e8 0e 53 ff ff       	callq  b6e7 <xEventGroupSetBits>
   163d9:	48 8b 05 60 fd 11 00 	mov    0x11fd60(%rip),%rax        # 136140 <xEventGroup>
   163e0:	41 b8 00 00 00 00    	mov    $0x0,%r8d
   163e6:	b9 00 00 00 00       	mov    $0x0,%ecx
   163eb:	ba 00 00 00 00       	mov    $0x0,%edx
   163f0:	be ff 00 00 00       	mov    $0xff,%esi
   163f5:	48 89 c7             	mov    %rax,%rdi
   163f8:	e8 b8 4d ff ff       	callq  b1b5 <xEventGroupWaitBits>
   163fd:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
   16401:	48 81 7d f8 fd 00 00 	cmpq   $0xfd,-0x8(%rbp)
   16408:	00 
   16409:	74 08                	je     16413 <prvBitCombinationTestMasterFunction+0xee>
   1640b:	48 c7 45 e8 01 00 00 	movq   $0x1,-0x18(%rbp)
   16412:	00 
   16413:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
   16417:	48 89 c7             	mov    %rax,%rdi
   1641a:	e8 69 64 ff ff       	callq  c888 <eTaskGetState>
   1641f:	83 f8 02             	cmp    $0x2,%eax
   16422:	74 08                	je     1642c <prvBitCombinationTestMasterFunction+0x107>
   16424:	48 c7 45 e8 01 00 00 	movq   $0x1,-0x18(%rbp)
   1642b:	00 
   1642c:	48 8b 05 0d fd 11 00 	mov    0x11fd0d(%rip),%rax        # 136140 <xEventGroup>
   16433:	be 02 00 00 00       	mov    $0x2,%esi
   16438:	48 89 c7             	mov    %rax,%rdi
   1643b:	e8 a7 52 ff ff       	callq  b6e7 <xEventGroupSetBits>
   16440:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
   16444:	48 89 c7             	mov    %rax,%rdi
   16447:	e8 3c 64 ff ff       	callq  c888 <eTaskGetState>
   1644c:	83 f8 03             	cmp    $0x3,%eax
   1644f:	74 08                	je     16459 <prvBitCombinationTestMasterFunction+0x134>
   16451:	48 c7 45 e8 01 00 00 	movq   $0x1,-0x18(%rbp)
   16458:	00 
   16459:	48 8b 05 e0 fc 11 00 	mov    0x11fce0(%rip),%rax        # 136140 <xEventGroup>
   16460:	be 00 00 00 00       	mov    $0x0,%esi
   16465:	48 89 c7             	mov    %rax,%rdi
   16468:	e8 7a 52 ff ff       	callq  b6e7 <xEventGroupSetBits>
   1646d:	48 3d ff 00 00 00    	cmp    $0xff,%rax
   16473:	74 08                	je     1647d <prvBitCombinationTestMasterFunction+0x158>
   16475:	48 c7 45 e8 01 00 00 	movq   $0x1,-0x18(%rbp)
   1647c:	00 
   1647d:	48 8b 05 bc fc 11 00 	mov    0x11fcbc(%rip),%rax        # 136140 <xEventGroup>
   16484:	be 02 00 00 00       	mov    $0x2,%esi
   16489:	48 89 c7             	mov    %rax,%rdi
   1648c:	e8 ab 50 ff ff       	callq  b53c <xEventGroupClearBits>
   16491:	48 3d ff 00 00 00    	cmp    $0xff,%rax
   16497:	74 08                	je     164a1 <prvBitCombinationTestMasterFunction+0x17c>
   16499:	48 c7 45 e8 01 00 00 	movq   $0x1,-0x18(%rbp)
   164a0:	00 
   164a1:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
   164a5:	48 89 c7             	mov    %rax,%rdi
   164a8:	e8 d2 6a ff ff       	callq  cf7f <vTaskResume>
   164ad:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
   164b1:	48 89 c7             	mov    %rax,%rdi
   164b4:	e8 cf 63 ff ff       	callq  c888 <eTaskGetState>
   164b9:	83 f8 02             	cmp    $0x2,%eax
   164bc:	74 08                	je     164c6 <prvBitCombinationTestMasterFunction+0x1a1>
   164be:	48 c7 45 e8 01 00 00 	movq   $0x1,-0x18(%rbp)
   164c5:	00 
   164c6:	48 8b 05 73 fc 11 00 	mov    0x11fc73(%rip),%rax        # 136140 <xEventGroup>
   164cd:	be 02 00 00 00       	mov    $0x2,%esi
   164d2:	48 89 c7             	mov    %rax,%rdi
   164d5:	e8 0d 52 ff ff       	callq  b6e7 <xEventGroupSetBits>
   164da:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
   164de:	48 89 c7             	mov    %rax,%rdi
   164e1:	e8 a2 63 ff ff       	callq  c888 <eTaskGetState>
   164e6:	83 f8 03             	cmp    $0x3,%eax
   164e9:	74 08                	je     164f3 <prvBitCombinationTestMasterFunction+0x1ce>
   164eb:	48 c7 45 e8 01 00 00 	movq   $0x1,-0x18(%rbp)
   164f2:	00 
   164f3:	48 8b 05 46 fc 11 00 	mov    0x11fc46(%rip),%rax        # 136140 <xEventGroup>
   164fa:	41 b8 00 00 00 00    	mov    $0x0,%r8d
   16500:	b9 00 00 00 00       	mov    $0x0,%ecx
   16505:	ba 00 00 00 00       	mov    $0x0,%edx
   1650a:	be ff 00 00 00       	mov    $0xff,%esi
   1650f:	48 89 c7             	mov    %rax,%rdi
   16512:	e8 9e 4c ff ff       	callq  b1b5 <xEventGroupWaitBits>
   16517:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
   1651b:	48 83 7d f8 5d       	cmpq   $0x5d,-0x8(%rbp)
   16520:	74 08                	je     1652a <prvBitCombinationTestMasterFunction+0x205>
   16522:	48 c7 45 e8 01 00 00 	movq   $0x1,-0x18(%rbp)
   16529:	00 
   1652a:	48 8b 05 0f fc 11 00 	mov    0x11fc0f(%rip),%rax        # 136140 <xEventGroup>
   16531:	be ff 00 00 00       	mov    $0xff,%esi
   16536:	48 89 c7             	mov    %rax,%rdi
   16539:	e8 fe 4f ff ff       	callq  b53c <xEventGroupClearBits>
   1653e:	48 83 f8 5d          	cmp    $0x5d,%rax
   16542:	74 08                	je     1654c <prvBitCombinationTestMasterFunction+0x227>
   16544:	48 c7 45 e8 01 00 00 	movq   $0x1,-0x18(%rbp)
   1654b:	00 
   1654c:	48 8b 05 ed fb 11 00 	mov    0x11fbed(%rip),%rax        # 136140 <xEventGroup>
   16553:	be 00 00 00 00       	mov    $0x0,%esi
   16558:	48 89 c7             	mov    %rax,%rdi
   1655b:	e8 dc 4f ff ff       	callq  b53c <xEventGroupClearBits>
   16560:	48 85 c0             	test   %rax,%rax
   16563:	74 08                	je     1656d <prvBitCombinationTestMasterFunction+0x248>
   16565:	48 c7 45 e8 01 00 00 	movq   $0x1,-0x18(%rbp)
   1656c:	00 
   1656d:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
   16571:	c9                   	leaveq 
   16572:	c3                   	retq   

0000000000016573 <prvSelectiveBitsTestSlaveFunction>:
   16573:	f3 0f 1e fa          	endbr64 
   16577:	55                   	push   %rbp
   16578:	48 89 e5             	mov    %rsp,%rbp
   1657b:	48 83 ec 10          	sub    $0x10,%rsp
   1657f:	e8 fa 90 ff ff       	callq  f67e <xTaskGetCurrentTaskHandle>
   16584:	48 8b 15 c5 fb 11 00 	mov    0x11fbc5(%rip),%rdx        # 136150 <xSyncTask1>
   1658b:	48 39 d0             	cmp    %rdx,%rax
   1658e:	75 0a                	jne    1659a <prvSelectiveBitsTestSlaveFunction+0x27>
   16590:	48 c7 45 f0 03 00 00 	movq   $0x3,-0x10(%rbp)
   16597:	00 
   16598:	eb 08                	jmp    165a2 <prvSelectiveBitsTestSlaveFunction+0x2f>
   1659a:	48 c7 45 f0 05 00 00 	movq   $0x5,-0x10(%rbp)
   165a1:	00 
   165a2:	bf 00 00 00 00       	mov    $0x0,%edi
   165a7:	e8 b5 67 ff ff       	callq  cd61 <vTaskSuspend>
   165ac:	48 8b 05 8d fb 11 00 	mov    0x11fb8d(%rip),%rax        # 136140 <xEventGroup>
   165b3:	48 8b 75 f0          	mov    -0x10(%rbp),%rsi
   165b7:	49 c7 c0 ff ff ff ff 	mov    $0xffffffffffffffff,%r8
   165be:	b9 00 00 00 00       	mov    $0x0,%ecx
   165c3:	ba 01 00 00 00       	mov    $0x1,%edx
   165c8:	48 89 c7             	mov    %rax,%rdi
   165cb:	e8 e5 4b ff ff       	callq  b1b5 <xEventGroupWaitBits>
   165d0:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
   165d4:	48 83 7d f8 00       	cmpq   $0x0,-0x8(%rbp)
   165d9:	74 02                	je     165dd <prvSelectiveBitsTestSlaveFunction+0x6a>
   165db:	eb c5                	jmp    165a2 <prvSelectiveBitsTestSlaveFunction+0x2f>
   165dd:	90                   	nop
   165de:	90                   	nop
   165df:	c9                   	leaveq 
   165e0:	c3                   	retq   

00000000000165e1 <prvSelectiveBitsTestMasterFunction>:
   165e1:	f3 0f 1e fa          	endbr64 
   165e5:	55                   	push   %rbp
   165e6:	48 89 e5             	mov    %rsp,%rbp
   165e9:	48 83 ec 10          	sub    $0x10,%rsp
   165ed:	48 c7 45 f0 00 00 00 	movq   $0x0,-0x10(%rbp)
   165f4:	00 
   165f5:	48 8b 05 54 fb 11 00 	mov    0x11fb54(%rip),%rax        # 136150 <xSyncTask1>
   165fc:	48 89 c7             	mov    %rax,%rdi
   165ff:	e8 84 62 ff ff       	callq  c888 <eTaskGetState>
   16604:	83 f8 03             	cmp    $0x3,%eax
   16607:	74 08                	je     16611 <prvSelectiveBitsTestMasterFunction+0x30>
   16609:	48 c7 45 f0 01 00 00 	movq   $0x1,-0x10(%rbp)
   16610:	00 
   16611:	48 8b 05 40 fb 11 00 	mov    0x11fb40(%rip),%rax        # 136158 <xSyncTask2>
   16618:	48 89 c7             	mov    %rax,%rdi
   1661b:	e8 68 62 ff ff       	callq  c888 <eTaskGetState>
   16620:	83 f8 03             	cmp    $0x3,%eax
   16623:	74 08                	je     1662d <prvSelectiveBitsTestMasterFunction+0x4c>
   16625:	48 c7 45 f0 01 00 00 	movq   $0x1,-0x10(%rbp)
   1662c:	00 
   1662d:	48 c7 45 f8 01 00 00 	movq   $0x1,-0x8(%rbp)
   16634:	00 
   16635:	e9 fc 00 00 00       	jmpq   16736 <prvSelectiveBitsTestMasterFunction+0x155>
   1663a:	48 8b 05 0f fb 11 00 	mov    0x11fb0f(%rip),%rax        # 136150 <xSyncTask1>
   16641:	48 89 c7             	mov    %rax,%rdi
   16644:	e8 36 69 ff ff       	callq  cf7f <vTaskResume>
   16649:	48 8b 05 08 fb 11 00 	mov    0x11fb08(%rip),%rax        # 136158 <xSyncTask2>
   16650:	48 89 c7             	mov    %rax,%rdi
   16653:	e8 27 69 ff ff       	callq  cf7f <vTaskResume>
   16658:	48 8b 05 f1 fa 11 00 	mov    0x11faf1(%rip),%rax        # 136150 <xSyncTask1>
   1665f:	48 89 c7             	mov    %rax,%rdi
   16662:	e8 21 62 ff ff       	callq  c888 <eTaskGetState>
   16667:	83 f8 02             	cmp    $0x2,%eax
   1666a:	74 08                	je     16674 <prvSelectiveBitsTestMasterFunction+0x93>
   1666c:	48 c7 45 f0 01 00 00 	movq   $0x1,-0x10(%rbp)
   16673:	00 
   16674:	48 8b 05 dd fa 11 00 	mov    0x11fadd(%rip),%rax        # 136158 <xSyncTask2>
   1667b:	48 89 c7             	mov    %rax,%rdi
   1667e:	e8 05 62 ff ff       	callq  c888 <eTaskGetState>
   16683:	83 f8 02             	cmp    $0x2,%eax
   16686:	74 08                	je     16690 <prvSelectiveBitsTestMasterFunction+0xaf>
   16688:	48 c7 45 f0 01 00 00 	movq   $0x1,-0x10(%rbp)
   1668f:	00 
   16690:	48 8b 05 a9 fa 11 00 	mov    0x11faa9(%rip),%rax        # 136140 <xEventGroup>
   16697:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
   1669b:	48 89 d6             	mov    %rdx,%rsi
   1669e:	48 89 c7             	mov    %rax,%rdi
   166a1:	e8 41 50 ff ff       	callq  b6e7 <xEventGroupSetBits>
   166a6:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   166aa:	83 e0 03             	and    $0x3,%eax
   166ad:	48 85 c0             	test   %rax,%rax
   166b0:	75 1e                	jne    166d0 <prvSelectiveBitsTestMasterFunction+0xef>
   166b2:	48 8b 05 97 fa 11 00 	mov    0x11fa97(%rip),%rax        # 136150 <xSyncTask1>
   166b9:	48 89 c7             	mov    %rax,%rdi
   166bc:	e8 c7 61 ff ff       	callq  c888 <eTaskGetState>
   166c1:	83 f8 02             	cmp    $0x2,%eax
   166c4:	74 26                	je     166ec <prvSelectiveBitsTestMasterFunction+0x10b>
   166c6:	48 c7 45 f0 01 00 00 	movq   $0x1,-0x10(%rbp)
   166cd:	00 
   166ce:	eb 1c                	jmp    166ec <prvSelectiveBitsTestMasterFunction+0x10b>
   166d0:	48 8b 05 79 fa 11 00 	mov    0x11fa79(%rip),%rax        # 136150 <xSyncTask1>
   166d7:	48 89 c7             	mov    %rax,%rdi
   166da:	e8 a9 61 ff ff       	callq  c888 <eTaskGetState>
   166df:	83 f8 03             	cmp    $0x3,%eax
   166e2:	74 08                	je     166ec <prvSelectiveBitsTestMasterFunction+0x10b>
   166e4:	48 c7 45 f0 01 00 00 	movq   $0x1,-0x10(%rbp)
   166eb:	00 
   166ec:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   166f0:	83 e0 05             	and    $0x5,%eax
   166f3:	48 85 c0             	test   %rax,%rax
   166f6:	75 1e                	jne    16716 <prvSelectiveBitsTestMasterFunction+0x135>
   166f8:	48 8b 05 59 fa 11 00 	mov    0x11fa59(%rip),%rax        # 136158 <xSyncTask2>
   166ff:	48 89 c7             	mov    %rax,%rdi
   16702:	e8 81 61 ff ff       	callq  c888 <eTaskGetState>
   16707:	83 f8 02             	cmp    $0x2,%eax
   1670a:	74 26                	je     16732 <prvSelectiveBitsTestMasterFunction+0x151>
   1670c:	48 c7 45 f0 01 00 00 	movq   $0x1,-0x10(%rbp)
   16713:	00 
   16714:	eb 1c                	jmp    16732 <prvSelectiveBitsTestMasterFunction+0x151>
   16716:	48 8b 05 3b fa 11 00 	mov    0x11fa3b(%rip),%rax        # 136158 <xSyncTask2>
   1671d:	48 89 c7             	mov    %rax,%rdi
   16720:	e8 63 61 ff ff       	callq  c888 <eTaskGetState>
   16725:	83 f8 03             	cmp    $0x3,%eax
   16728:	74 08                	je     16732 <prvSelectiveBitsTestMasterFunction+0x151>
   1672a:	48 c7 45 f0 01 00 00 	movq   $0x1,-0x10(%rbp)
   16731:	00 
   16732:	48 d1 65 f8          	shlq   -0x8(%rbp)
   16736:	48 81 7d f8 ff 00 00 	cmpq   $0xff,-0x8(%rbp)
   1673d:	00 
   1673e:	0f 86 f6 fe ff ff    	jbe    1663a <prvSelectiveBitsTestMasterFunction+0x59>
   16744:	48 8b 05 05 fa 11 00 	mov    0x11fa05(%rip),%rax        # 136150 <xSyncTask1>
   1674b:	48 89 c7             	mov    %rax,%rdi
   1674e:	e8 2c 68 ff ff       	callq  cf7f <vTaskResume>
   16753:	48 8b 05 fe f9 11 00 	mov    0x11f9fe(%rip),%rax        # 136158 <xSyncTask2>
   1675a:	48 89 c7             	mov    %rax,%rdi
   1675d:	e8 1d 68 ff ff       	callq  cf7f <vTaskResume>
   16762:	48 8b 05 d7 f9 11 00 	mov    0x11f9d7(%rip),%rax        # 136140 <xEventGroup>
   16769:	48 89 c7             	mov    %rax,%rdi
   1676c:	e8 72 51 ff ff       	callq  b8e3 <vEventGroupDelete>
   16771:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
   16775:	c9                   	leaveq 
   16776:	c3                   	retq   

0000000000016777 <vPeriodicEventGroupsProcessing>:
   16777:	f3 0f 1e fa          	endbr64 
   1677b:	55                   	push   %rbp
   1677c:	48 89 e5             	mov    %rsp,%rbp
   1677f:	48 83 ec 30          	sub    $0x30,%rsp
   16783:	48 c7 45 d0 64 00 00 	movq   $0x64,-0x30(%rbp)
   1678a:	00 
   1678b:	48 c7 45 d8 c8 00 00 	movq   $0xc8,-0x28(%rbp)
   16792:	00 
   16793:	48 c7 45 e0 2c 01 00 	movq   $0x12c,-0x20(%rbp)
   1679a:	00 
   1679b:	48 c7 45 e8 12 00 00 	movq   $0x12,-0x18(%rbp)
   167a2:	00 
   167a3:	48 8b 05 9e f9 11 00 	mov    0x11f99e(%rip),%rax        # 136148 <xISREventGroup>
   167aa:	48 85 c0             	test   %rax,%rax
   167ad:	75 11                	jne    167c0 <vPeriodicEventGroupsProcessing+0x49>
   167af:	be c6 03 00 00       	mov    $0x3c6,%esi
   167b4:	48 8d 3d dd 14 01 00 	lea    0x114dd(%rip),%rdi        # 27c98 <uxMaxNumberOfExtraTasksRunning+0xb8>
   167bb:	e8 4c d5 fe ff       	callq  3d0c <vAssertCalled>
   167c0:	48 8b 05 99 f9 11 00 	mov    0x11f999(%rip),%rax        # 136160 <xCallCount.2968>
   167c7:	48 83 c0 01          	add    $0x1,%rax
   167cb:	48 89 05 8e f9 11 00 	mov    %rax,0x11f98e(%rip)        # 136160 <xCallCount.2968>
   167d2:	48 8b 05 87 f9 11 00 	mov    0x11f987(%rip),%rax        # 136160 <xCallCount.2968>
   167d9:	48 39 45 d0          	cmp    %rax,-0x30(%rbp)
   167dd:	75 64                	jne    16843 <vPeriodicEventGroupsProcessing+0xcc>
   167df:	48 8b 05 62 f9 11 00 	mov    0x11f962(%rip),%rax        # 136148 <xISREventGroup>
   167e6:	48 89 c7             	mov    %rax,%rdi
   167e9:	e8 bb 4e ff ff       	callq  b6a9 <xEventGroupGetBitsFromISR>
   167ee:	48 89 45 f0          	mov    %rax,-0x10(%rbp)
   167f2:	48 83 7d f0 00       	cmpq   $0x0,-0x10(%rbp)
   167f7:	74 10                	je     16809 <vPeriodicEventGroupsProcessing+0x92>
   167f9:	48 c7 05 64 f9 11 00 	movq   $0x1,0x11f964(%rip)        # 136168 <xISRTestError.2969>
   16800:	01 00 00 00 
   16804:	e9 d0 00 00 00       	jmpq   168d9 <vPeriodicEventGroupsProcessing+0x162>
   16809:	48 8b 05 38 f9 11 00 	mov    0x11f938(%rip),%rax        # 136148 <xISREventGroup>
   16810:	48 8b 4d e8          	mov    -0x18(%rbp),%rcx
   16814:	ba 00 00 00 00       	mov    $0x0,%edx
   16819:	48 89 ce             	mov    %rcx,%rsi
   1681c:	48 89 c7             	mov    %rax,%rdi
   1681f:	e8 c9 52 ff ff       	callq  baed <xEventGroupSetBitsFromISR>
   16824:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
   16828:	48 83 7d f8 01       	cmpq   $0x1,-0x8(%rbp)
   1682d:	0f 84 a6 00 00 00    	je     168d9 <vPeriodicEventGroupsProcessing+0x162>
   16833:	48 c7 05 2a f9 11 00 	movq   $0x1,0x11f92a(%rip)        # 136168 <xISRTestError.2969>
   1683a:	01 00 00 00 
   1683e:	e9 96 00 00 00       	jmpq   168d9 <vPeriodicEventGroupsProcessing+0x162>
   16843:	48 8b 05 16 f9 11 00 	mov    0x11f916(%rip),%rax        # 136160 <xCallCount.2968>
   1684a:	48 39 45 d8          	cmp    %rax,-0x28(%rbp)
   1684e:	75 2a                	jne    1687a <vPeriodicEventGroupsProcessing+0x103>
   16850:	48 8b 05 f1 f8 11 00 	mov    0x11f8f1(%rip),%rax        # 136148 <xISREventGroup>
   16857:	48 89 c7             	mov    %rax,%rdi
   1685a:	e8 4a 4e ff ff       	callq  b6a9 <xEventGroupGetBitsFromISR>
   1685f:	48 89 45 f0          	mov    %rax,-0x10(%rbp)
   16863:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
   16867:	48 3b 45 e8          	cmp    -0x18(%rbp),%rax
   1686b:	74 6c                	je     168d9 <vPeriodicEventGroupsProcessing+0x162>
   1686d:	48 c7 05 f0 f8 11 00 	movq   $0x1,0x11f8f0(%rip)        # 136168 <xISRTestError.2969>
   16874:	01 00 00 00 
   16878:	eb 5f                	jmp    168d9 <vPeriodicEventGroupsProcessing+0x162>
   1687a:	48 8b 05 df f8 11 00 	mov    0x11f8df(%rip),%rax        # 136160 <xCallCount.2968>
   16881:	48 39 45 e0          	cmp    %rax,-0x20(%rbp)
   16885:	75 52                	jne    168d9 <vPeriodicEventGroupsProcessing+0x162>
   16887:	48 8b 05 ba f8 11 00 	mov    0x11f8ba(%rip),%rax        # 136148 <xISREventGroup>
   1688e:	48 8b 55 e8          	mov    -0x18(%rbp),%rdx
   16892:	48 89 d6             	mov    %rdx,%rsi
   16895:	48 89 c7             	mov    %rax,%rdi
   16898:	e8 88 4d ff ff       	callq  b625 <xEventGroupClearBitsFromISR>
   1689d:	48 89 45 f0          	mov    %rax,-0x10(%rbp)
   168a1:	48 83 7d f0 01       	cmpq   $0x1,-0x10(%rbp)
   168a6:	74 0b                	je     168b3 <vPeriodicEventGroupsProcessing+0x13c>
   168a8:	48 c7 05 b5 f8 11 00 	movq   $0x1,0x11f8b5(%rip)        # 136168 <xISRTestError.2969>
   168af:	01 00 00 00 
   168b3:	48 c7 05 a2 f8 11 00 	movq   $0x0,0x11f8a2(%rip)        # 136160 <xCallCount.2968>
   168ba:	00 00 00 00 
   168be:	48 8b 05 a3 f8 11 00 	mov    0x11f8a3(%rip),%rax        # 136168 <xISRTestError.2969>
   168c5:	48 85 c0             	test   %rax,%rax
   168c8:	75 0f                	jne    168d9 <vPeriodicEventGroupsProcessing+0x162>
   168ca:	8b 05 68 f8 11 00    	mov    0x11f868(%rip),%eax        # 136138 <ulISRCycles>
   168d0:	83 c0 01             	add    $0x1,%eax
   168d3:	89 05 5f f8 11 00    	mov    %eax,0x11f85f(%rip)        # 136138 <ulISRCycles>
   168d9:	90                   	nop
   168da:	c9                   	leaveq 
   168db:	c3                   	retq   

00000000000168dc <xAreEventGroupTasksStillRunning>:
   168dc:	f3 0f 1e fa          	endbr64 
   168e0:	55                   	push   %rbp
   168e1:	48 89 e5             	mov    %rsp,%rbp
   168e4:	48 c7 45 f8 01 00 00 	movq   $0x1,-0x8(%rbp)
   168eb:	00 
   168ec:	8b 15 7e f8 11 00    	mov    0x11f87e(%rip),%edx        # 136170 <ulPreviousSetBitCycles.2980>
   168f2:	8b 05 38 f8 11 00    	mov    0x11f838(%rip),%eax        # 136130 <ulTestMasterCycles>
   168f8:	39 c2                	cmp    %eax,%edx
   168fa:	75 08                	jne    16904 <xAreEventGroupTasksStillRunning+0x28>
   168fc:	48 c7 45 f8 00 00 00 	movq   $0x0,-0x8(%rbp)
   16903:	00 
   16904:	8b 05 26 f8 11 00    	mov    0x11f826(%rip),%eax        # 136130 <ulTestMasterCycles>
   1690a:	89 05 60 f8 11 00    	mov    %eax,0x11f860(%rip)        # 136170 <ulPreviousSetBitCycles.2980>
   16910:	8b 15 5e f8 11 00    	mov    0x11f85e(%rip),%edx        # 136174 <ulPreviousWaitBitCycles.2979>
   16916:	8b 05 18 f8 11 00    	mov    0x11f818(%rip),%eax        # 136134 <ulTestSlaveCycles>
   1691c:	39 c2                	cmp    %eax,%edx
   1691e:	75 08                	jne    16928 <xAreEventGroupTasksStillRunning+0x4c>
   16920:	48 c7 45 f8 00 00 00 	movq   $0x0,-0x8(%rbp)
   16927:	00 
   16928:	8b 05 06 f8 11 00    	mov    0x11f806(%rip),%eax        # 136134 <ulTestSlaveCycles>
   1692e:	89 05 40 f8 11 00    	mov    %eax,0x11f840(%rip)        # 136174 <ulPreviousWaitBitCycles.2979>
   16934:	8b 15 3e f8 11 00    	mov    0x11f83e(%rip),%edx        # 136178 <ulPreviousISRCycles.2981>
   1693a:	8b 05 f8 f7 11 00    	mov    0x11f7f8(%rip),%eax        # 136138 <ulISRCycles>
   16940:	39 c2                	cmp    %eax,%edx
   16942:	75 08                	jne    1694c <xAreEventGroupTasksStillRunning+0x70>
   16944:	48 c7 45 f8 00 00 00 	movq   $0x0,-0x8(%rbp)
   1694b:	00 
   1694c:	8b 05 e6 f7 11 00    	mov    0x11f7e6(%rip),%eax        # 136138 <ulISRCycles>
   16952:	89 05 20 f8 11 00    	mov    %eax,0x11f820(%rip)        # 136178 <ulPreviousISRCycles.2981>
   16958:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   1695c:	5d                   	pop    %rbp
   1695d:	c3                   	retq   

000000000001695e <vStartMathTasks>:
   1695e:	f3 0f 1e fa          	endbr64 
   16962:	55                   	push   %rbp
   16963:	48 89 e5             	mov    %rsp,%rbp
   16966:	48 83 ec 10          	sub    $0x10,%rsp
   1696a:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   1696e:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   16972:	41 b9 00 00 00 00    	mov    $0x0,%r9d
   16978:	49 89 c0             	mov    %rax,%r8
   1697b:	48 8d 0d fe f7 11 00 	lea    0x11f7fe(%rip),%rcx        # 136180 <usTaskCheck>
   16982:	ba 46 00 00 00       	mov    $0x46,%edx
   16987:	48 8d 35 62 13 01 00 	lea    0x11362(%rip),%rsi        # 27cf0 <uxMaxNumberOfExtraTasksRunning+0x110>
   1698e:	48 8d 3d 8c 00 00 00 	lea    0x8c(%rip),%rdi        # 16a21 <vCompetingMathTask1>
   16995:	e8 5d 53 ff ff       	callq  bcf7 <xTaskCreate>
   1699a:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   1699e:	41 b9 00 00 00 00    	mov    $0x0,%r9d
   169a4:	49 89 c0             	mov    %rax,%r8
   169a7:	48 8d 0d d4 f7 11 00 	lea    0x11f7d4(%rip),%rcx        # 136182 <usTaskCheck+0x2>
   169ae:	ba 46 00 00 00       	mov    $0x46,%edx
   169b3:	48 8d 35 3c 13 01 00 	lea    0x1133c(%rip),%rsi        # 27cf6 <uxMaxNumberOfExtraTasksRunning+0x116>
   169ba:	48 8d 3d 3c 01 00 00 	lea    0x13c(%rip),%rdi        # 16afd <vCompetingMathTask2>
   169c1:	e8 31 53 ff ff       	callq  bcf7 <xTaskCreate>
   169c6:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   169ca:	41 b9 00 00 00 00    	mov    $0x0,%r9d
   169d0:	49 89 c0             	mov    %rax,%r8
   169d3:	48 8d 0d aa f7 11 00 	lea    0x11f7aa(%rip),%rcx        # 136184 <usTaskCheck+0x4>
   169da:	ba 46 00 00 00       	mov    $0x46,%edx
   169df:	48 8d 35 16 13 01 00 	lea    0x11316(%rip),%rsi        # 27cfc <uxMaxNumberOfExtraTasksRunning+0x11c>
   169e6:	48 8d 3d f7 01 00 00 	lea    0x1f7(%rip),%rdi        # 16be4 <vCompetingMathTask3>
   169ed:	e8 05 53 ff ff       	callq  bcf7 <xTaskCreate>
   169f2:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   169f6:	41 b9 00 00 00 00    	mov    $0x0,%r9d
   169fc:	49 89 c0             	mov    %rax,%r8
   169ff:	48 8d 0d 80 f7 11 00 	lea    0x11f780(%rip),%rcx        # 136186 <usTaskCheck+0x6>
   16a06:	ba 46 00 00 00       	mov    $0x46,%edx
   16a0b:	48 8d 35 f0 12 01 00 	lea    0x112f0(%rip),%rsi        # 27d02 <uxMaxNumberOfExtraTasksRunning+0x122>
   16a12:	48 8d 3d 49 03 00 00 	lea    0x349(%rip),%rdi        # 16d62 <vCompetingMathTask4>
   16a19:	e8 d9 52 ff ff       	callq  bcf7 <xTaskCreate>
   16a1e:	90                   	nop
   16a1f:	c9                   	leaveq 
   16a20:	c3                   	retq   

0000000000016a21 <vCompetingMathTask1>:
   16a21:	f3 0f 1e fa          	endbr64 
   16a25:	55                   	push   %rbp
   16a26:	48 89 e5             	mov    %rsp,%rbp
   16a29:	48 89 7d b8          	mov    %rdi,-0x48(%rbp)
   16a2d:	66 c7 45 ce 00 00    	movw   $0x0,-0x32(%rbp)
   16a33:	f2 0f 10 05 cd 12 01 	movsd  0x112cd(%rip),%xmm0        # 27d08 <uxMaxNumberOfExtraTasksRunning+0x128>
   16a3a:	00 
   16a3b:	f2 0f 11 45 d0       	movsd  %xmm0,-0x30(%rbp)
   16a40:	f2 0f 10 05 c8 12 01 	movsd  0x112c8(%rip),%xmm0        # 27d10 <uxMaxNumberOfExtraTasksRunning+0x130>
   16a47:	00 
   16a48:	f2 0f 11 45 d8       	movsd  %xmm0,-0x28(%rbp)
   16a4d:	f2 0f 10 05 c3 12 01 	movsd  0x112c3(%rip),%xmm0        # 27d18 <uxMaxNumberOfExtraTasksRunning+0x138>
   16a54:	00 
   16a55:	f2 0f 11 45 e0       	movsd  %xmm0,-0x20(%rbp)
   16a5a:	f2 0f 10 4d d0       	movsd  -0x30(%rbp),%xmm1
   16a5f:	f2 0f 10 45 d8       	movsd  -0x28(%rbp),%xmm0
   16a64:	f2 0f 58 c8          	addsd  %xmm0,%xmm1
   16a68:	f2 0f 10 45 e0       	movsd  -0x20(%rbp),%xmm0
   16a6d:	f2 0f 59 c1          	mulsd  %xmm1,%xmm0
   16a71:	f2 0f 11 45 f0       	movsd  %xmm0,-0x10(%rbp)
   16a76:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
   16a7a:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
   16a7e:	f2 0f 10 05 82 12 01 	movsd  0x11282(%rip),%xmm0        # 27d08 <uxMaxNumberOfExtraTasksRunning+0x128>
   16a85:	00 
   16a86:	f2 0f 11 45 d0       	movsd  %xmm0,-0x30(%rbp)
   16a8b:	f2 0f 10 05 7d 12 01 	movsd  0x1127d(%rip),%xmm0        # 27d10 <uxMaxNumberOfExtraTasksRunning+0x130>
   16a92:	00 
   16a93:	f2 0f 11 45 d8       	movsd  %xmm0,-0x28(%rbp)
   16a98:	f2 0f 10 05 78 12 01 	movsd  0x11278(%rip),%xmm0        # 27d18 <uxMaxNumberOfExtraTasksRunning+0x138>
   16a9f:	00 
   16aa0:	f2 0f 11 45 e0       	movsd  %xmm0,-0x20(%rbp)
   16aa5:	f2 0f 10 4d d0       	movsd  -0x30(%rbp),%xmm1
   16aaa:	f2 0f 10 45 d8       	movsd  -0x28(%rbp),%xmm0
   16aaf:	f2 0f 58 c8          	addsd  %xmm0,%xmm1
   16ab3:	f2 0f 10 45 e0       	movsd  -0x20(%rbp),%xmm0
   16ab8:	f2 0f 59 c1          	mulsd  %xmm1,%xmm0
   16abc:	f2 0f 11 45 e8       	movsd  %xmm0,-0x18(%rbp)
   16ac1:	f2 0f 10 45 e8       	movsd  -0x18(%rbp),%xmm0
   16ac6:	f2 0f 10 4d f0       	movsd  -0x10(%rbp),%xmm1
   16acb:	f2 0f 5c c1          	subsd  %xmm1,%xmm0
   16acf:	f3 0f 7e 0d 49 12 01 	movq   0x11249(%rip),%xmm1        # 27d20 <uxMaxNumberOfExtraTasksRunning+0x140>
   16ad6:	00 
   16ad7:	66 0f 54 c1          	andpd  %xmm1,%xmm0
   16adb:	66 0f 2f 05 4d 12 01 	comisd 0x1124d(%rip),%xmm0        # 27d30 <uxMaxNumberOfExtraTasksRunning+0x150>
   16ae2:	00 
   16ae3:	76 06                	jbe    16aeb <vCompetingMathTask1+0xca>
   16ae5:	66 c7 45 ce 01 00    	movw   $0x1,-0x32(%rbp)
   16aeb:	66 83 7d ce 00       	cmpw   $0x0,-0x32(%rbp)
   16af0:	75 8c                	jne    16a7e <vCompetingMathTask1+0x5d>
   16af2:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   16af6:	66 c7 00 01 00       	movw   $0x1,(%rax)
   16afb:	eb 81                	jmp    16a7e <vCompetingMathTask1+0x5d>

0000000000016afd <vCompetingMathTask2>:
   16afd:	f3 0f 1e fa          	endbr64 
   16b01:	55                   	push   %rbp
   16b02:	48 89 e5             	mov    %rsp,%rbp
   16b05:	48 89 7d b8          	mov    %rdi,-0x48(%rbp)
   16b09:	66 c7 45 ce 00 00    	movw   $0x0,-0x32(%rbp)
   16b0f:	f2 0f 10 05 21 12 01 	movsd  0x11221(%rip),%xmm0        # 27d38 <uxMaxNumberOfExtraTasksRunning+0x158>
   16b16:	00 
   16b17:	f2 0f 11 45 d0       	movsd  %xmm0,-0x30(%rbp)
   16b1c:	f2 0f 10 05 1c 12 01 	movsd  0x1121c(%rip),%xmm0        # 27d40 <uxMaxNumberOfExtraTasksRunning+0x160>
   16b23:	00 
   16b24:	f2 0f 11 45 d8       	movsd  %xmm0,-0x28(%rbp)
   16b29:	f2 0f 10 05 17 12 01 	movsd  0x11217(%rip),%xmm0        # 27d48 <uxMaxNumberOfExtraTasksRunning+0x168>
   16b30:	00 
   16b31:	f2 0f 11 45 e0       	movsd  %xmm0,-0x20(%rbp)
   16b36:	f2 0f 10 45 d0       	movsd  -0x30(%rbp),%xmm0
   16b3b:	f2 0f 10 4d d8       	movsd  -0x28(%rbp),%xmm1
   16b40:	f2 0f 5e c1          	divsd  %xmm1,%xmm0
   16b44:	66 0f 28 c8          	movapd %xmm0,%xmm1
   16b48:	f2 0f 10 45 e0       	movsd  -0x20(%rbp),%xmm0
   16b4d:	f2 0f 59 c1          	mulsd  %xmm1,%xmm0
   16b51:	f2 0f 11 45 f0       	movsd  %xmm0,-0x10(%rbp)
   16b56:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
   16b5a:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
   16b5e:	f2 0f 10 05 d2 11 01 	movsd  0x111d2(%rip),%xmm0        # 27d38 <uxMaxNumberOfExtraTasksRunning+0x158>
   16b65:	00 
   16b66:	f2 0f 11 45 d0       	movsd  %xmm0,-0x30(%rbp)
   16b6b:	f2 0f 10 05 cd 11 01 	movsd  0x111cd(%rip),%xmm0        # 27d40 <uxMaxNumberOfExtraTasksRunning+0x160>
   16b72:	00 
   16b73:	f2 0f 11 45 d8       	movsd  %xmm0,-0x28(%rbp)
   16b78:	f2 0f 10 05 c8 11 01 	movsd  0x111c8(%rip),%xmm0        # 27d48 <uxMaxNumberOfExtraTasksRunning+0x168>
   16b7f:	00 
   16b80:	f2 0f 11 45 e0       	movsd  %xmm0,-0x20(%rbp)
   16b85:	f2 0f 10 45 d0       	movsd  -0x30(%rbp),%xmm0
   16b8a:	f2 0f 10 4d d8       	movsd  -0x28(%rbp),%xmm1
   16b8f:	f2 0f 5e c1          	divsd  %xmm1,%xmm0
   16b93:	66 0f 28 c8          	movapd %xmm0,%xmm1
   16b97:	f2 0f 10 45 e0       	movsd  -0x20(%rbp),%xmm0
   16b9c:	f2 0f 59 c1          	mulsd  %xmm1,%xmm0
   16ba0:	f2 0f 11 45 e8       	movsd  %xmm0,-0x18(%rbp)
   16ba5:	f2 0f 10 45 e8       	movsd  -0x18(%rbp),%xmm0
   16baa:	f2 0f 10 4d f0       	movsd  -0x10(%rbp),%xmm1
   16baf:	f2 0f 5c c1          	subsd  %xmm1,%xmm0
   16bb3:	f3 0f 7e 0d 65 11 01 	movq   0x11165(%rip),%xmm1        # 27d20 <uxMaxNumberOfExtraTasksRunning+0x140>
   16bba:	00 
   16bbb:	66 0f 54 c1          	andpd  %xmm1,%xmm0
   16bbf:	66 0f 2f 05 69 11 01 	comisd 0x11169(%rip),%xmm0        # 27d30 <uxMaxNumberOfExtraTasksRunning+0x150>
   16bc6:	00 
   16bc7:	76 06                	jbe    16bcf <vCompetingMathTask2+0xd2>
   16bc9:	66 c7 45 ce 01 00    	movw   $0x1,-0x32(%rbp)
   16bcf:	66 83 7d ce 00       	cmpw   $0x0,-0x32(%rbp)
   16bd4:	75 88                	jne    16b5e <vCompetingMathTask2+0x61>
   16bd6:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   16bda:	66 c7 00 01 00       	movw   $0x1,(%rax)
   16bdf:	e9 7a ff ff ff       	jmpq   16b5e <vCompetingMathTask2+0x61>

0000000000016be4 <vCompetingMathTask3>:
   16be4:	f3 0f 1e fa          	endbr64 
   16be8:	55                   	push   %rbp
   16be9:	48 89 e5             	mov    %rsp,%rbp
   16bec:	48 83 ec 50          	sub    $0x50,%rsp
   16bf0:	48 89 7d b8          	mov    %rdi,-0x48(%rbp)
   16bf4:	48 c7 45 e8 0a 00 00 	movq   $0xa,-0x18(%rbp)
   16bfb:	00 
   16bfc:	66 c7 45 c6 00 00    	movw   $0x0,-0x3a(%rbp)
   16c02:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
   16c06:	48 89 45 f0          	mov    %rax,-0x10(%rbp)
   16c0a:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
   16c0e:	48 c1 e0 03          	shl    $0x3,%rax
   16c12:	48 89 c7             	mov    %rax,%rdi
   16c15:	e8 66 ba ff ff       	callq  12680 <pvPortMalloc>
   16c1a:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
   16c1e:	66 0f ef c0          	pxor   %xmm0,%xmm0
   16c22:	f2 0f 11 45 c8       	movsd  %xmm0,-0x38(%rbp)
   16c27:	66 0f ef c0          	pxor   %xmm0,%xmm0
   16c2b:	f2 0f 11 45 d0       	movsd  %xmm0,-0x30(%rbp)
   16c30:	48 c7 45 e0 00 00 00 	movq   $0x0,-0x20(%rbp)
   16c37:	00 
   16c38:	e9 8c 00 00 00       	jmpq   16cc9 <vCompetingMathTask3+0xe5>
   16c3d:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
   16c41:	48 85 c0             	test   %rax,%rax
   16c44:	78 07                	js     16c4d <vCompetingMathTask3+0x69>
   16c46:	f2 48 0f 2a c0       	cvtsi2sd %rax,%xmm0
   16c4b:	eb 15                	jmp    16c62 <vCompetingMathTask3+0x7e>
   16c4d:	48 89 c2             	mov    %rax,%rdx
   16c50:	48 d1 ea             	shr    %rdx
   16c53:	83 e0 01             	and    $0x1,%eax
   16c56:	48 09 c2             	or     %rax,%rdx
   16c59:	f2 48 0f 2a c2       	cvtsi2sd %rdx,%xmm0
   16c5e:	f2 0f 58 c0          	addsd  %xmm0,%xmm0
   16c62:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
   16c66:	48 8d 14 c5 00 00 00 	lea    0x0(,%rax,8),%rdx
   16c6d:	00 
   16c6e:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   16c72:	48 01 d0             	add    %rdx,%rax
   16c75:	f2 0f 10 0d d3 10 01 	movsd  0x110d3(%rip),%xmm1        # 27d50 <uxMaxNumberOfExtraTasksRunning+0x170>
   16c7c:	00 
   16c7d:	f2 0f 58 c1          	addsd  %xmm1,%xmm0
   16c81:	f2 0f 11 00          	movsd  %xmm0,(%rax)
   16c85:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
   16c89:	48 85 c0             	test   %rax,%rax
   16c8c:	78 07                	js     16c95 <vCompetingMathTask3+0xb1>
   16c8e:	f2 48 0f 2a c0       	cvtsi2sd %rax,%xmm0
   16c93:	eb 15                	jmp    16caa <vCompetingMathTask3+0xc6>
   16c95:	48 89 c2             	mov    %rax,%rdx
   16c98:	48 d1 ea             	shr    %rdx
   16c9b:	83 e0 01             	and    $0x1,%eax
   16c9e:	48 09 c2             	or     %rax,%rdx
   16ca1:	f2 48 0f 2a c2       	cvtsi2sd %rdx,%xmm0
   16ca6:	f2 0f 58 c0          	addsd  %xmm0,%xmm0
   16caa:	f2 0f 10 0d 9e 10 01 	movsd  0x1109e(%rip),%xmm1        # 27d50 <uxMaxNumberOfExtraTasksRunning+0x170>
   16cb1:	00 
   16cb2:	f2 0f 58 c8          	addsd  %xmm0,%xmm1
   16cb6:	f2 0f 10 45 c8       	movsd  -0x38(%rbp),%xmm0
   16cbb:	f2 0f 58 c1          	addsd  %xmm1,%xmm0
   16cbf:	f2 0f 11 45 c8       	movsd  %xmm0,-0x38(%rbp)
   16cc4:	48 83 45 e0 01       	addq   $0x1,-0x20(%rbp)
   16cc9:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
   16ccd:	48 3b 45 e8          	cmp    -0x18(%rbp),%rax
   16cd1:	0f 82 66 ff ff ff    	jb     16c3d <vCompetingMathTask3+0x59>
   16cd7:	48 c7 45 e0 00 00 00 	movq   $0x0,-0x20(%rbp)
   16cde:	00 
   16cdf:	eb 2a                	jmp    16d0b <vCompetingMathTask3+0x127>
   16ce1:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
   16ce5:	48 8d 14 c5 00 00 00 	lea    0x0(,%rax,8),%rdx
   16cec:	00 
   16ced:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   16cf1:	48 01 d0             	add    %rdx,%rax
   16cf4:	f2 0f 10 08          	movsd  (%rax),%xmm1
   16cf8:	f2 0f 10 45 d0       	movsd  -0x30(%rbp),%xmm0
   16cfd:	f2 0f 58 c1          	addsd  %xmm1,%xmm0
   16d01:	f2 0f 11 45 d0       	movsd  %xmm0,-0x30(%rbp)
   16d06:	48 83 45 e0 01       	addq   $0x1,-0x20(%rbp)
   16d0b:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
   16d0f:	48 3b 45 e8          	cmp    -0x18(%rbp),%rax
   16d13:	72 cc                	jb     16ce1 <vCompetingMathTask3+0xfd>
   16d15:	f2 0f 10 45 c8       	movsd  -0x38(%rbp),%xmm0
   16d1a:	f2 0f 10 4d d0       	movsd  -0x30(%rbp),%xmm1
   16d1f:	f2 0f 5c c1          	subsd  %xmm1,%xmm0
   16d23:	f2 0f 11 45 d8       	movsd  %xmm0,-0x28(%rbp)
   16d28:	f2 0f 10 45 d8       	movsd  -0x28(%rbp),%xmm0
   16d2d:	f3 0f 7e 0d eb 0f 01 	movq   0x10feb(%rip),%xmm1        # 27d20 <uxMaxNumberOfExtraTasksRunning+0x140>
   16d34:	00 
   16d35:	66 0f 54 c1          	andpd  %xmm1,%xmm0
   16d39:	66 0f 2f 05 ef 0f 01 	comisd 0x10fef(%rip),%xmm0        # 27d30 <uxMaxNumberOfExtraTasksRunning+0x150>
   16d40:	00 
   16d41:	76 06                	jbe    16d49 <vCompetingMathTask3+0x165>
   16d43:	66 c7 45 c6 01 00    	movw   $0x1,-0x3a(%rbp)
   16d49:	66 83 7d c6 00       	cmpw   $0x0,-0x3a(%rbp)
   16d4e:	0f 85 ca fe ff ff    	jne    16c1e <vCompetingMathTask3+0x3a>
   16d54:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
   16d58:	66 c7 00 01 00       	movw   $0x1,(%rax)
   16d5d:	e9 bc fe ff ff       	jmpq   16c1e <vCompetingMathTask3+0x3a>

0000000000016d62 <vCompetingMathTask4>:
   16d62:	f3 0f 1e fa          	endbr64 
   16d66:	55                   	push   %rbp
   16d67:	48 89 e5             	mov    %rsp,%rbp
   16d6a:	48 83 ec 50          	sub    $0x50,%rsp
   16d6e:	48 89 7d b8          	mov    %rdi,-0x48(%rbp)
   16d72:	48 c7 45 e8 0a 00 00 	movq   $0xa,-0x18(%rbp)
   16d79:	00 
   16d7a:	66 c7 45 c6 00 00    	movw   $0x0,-0x3a(%rbp)
   16d80:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
   16d84:	48 89 45 f0          	mov    %rax,-0x10(%rbp)
   16d88:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
   16d8c:	48 c1 e0 03          	shl    $0x3,%rax
   16d90:	48 89 c7             	mov    %rax,%rdi
   16d93:	e8 e8 b8 ff ff       	callq  12680 <pvPortMalloc>
   16d98:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
   16d9c:	66 0f ef c0          	pxor   %xmm0,%xmm0
   16da0:	f2 0f 11 45 c8       	movsd  %xmm0,-0x38(%rbp)
   16da5:	66 0f ef c0          	pxor   %xmm0,%xmm0
   16da9:	f2 0f 11 45 d0       	movsd  %xmm0,-0x30(%rbp)
   16dae:	48 c7 45 e0 00 00 00 	movq   $0x0,-0x20(%rbp)
   16db5:	00 
   16db6:	e9 8c 00 00 00       	jmpq   16e47 <vCompetingMathTask4+0xe5>
   16dbb:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
   16dbf:	48 85 c0             	test   %rax,%rax
   16dc2:	78 07                	js     16dcb <vCompetingMathTask4+0x69>
   16dc4:	f2 48 0f 2a c0       	cvtsi2sd %rax,%xmm0
   16dc9:	eb 15                	jmp    16de0 <vCompetingMathTask4+0x7e>
   16dcb:	48 89 c2             	mov    %rax,%rdx
   16dce:	48 d1 ea             	shr    %rdx
   16dd1:	83 e0 01             	and    $0x1,%eax
   16dd4:	48 09 c2             	or     %rax,%rdx
   16dd7:	f2 48 0f 2a c2       	cvtsi2sd %rdx,%xmm0
   16ddc:	f2 0f 58 c0          	addsd  %xmm0,%xmm0
   16de0:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
   16de4:	48 8d 14 c5 00 00 00 	lea    0x0(,%rax,8),%rdx
   16deb:	00 
   16dec:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   16df0:	48 01 d0             	add    %rdx,%rax
   16df3:	f2 0f 10 0d 5d 0f 01 	movsd  0x10f5d(%rip),%xmm1        # 27d58 <uxMaxNumberOfExtraTasksRunning+0x178>
   16dfa:	00 
   16dfb:	f2 0f 59 c1          	mulsd  %xmm1,%xmm0
   16dff:	f2 0f 11 00          	movsd  %xmm0,(%rax)
   16e03:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
   16e07:	48 85 c0             	test   %rax,%rax
   16e0a:	78 07                	js     16e13 <vCompetingMathTask4+0xb1>
   16e0c:	f2 48 0f 2a c0       	cvtsi2sd %rax,%xmm0
   16e11:	eb 15                	jmp    16e28 <vCompetingMathTask4+0xc6>
   16e13:	48 89 c2             	mov    %rax,%rdx
   16e16:	48 d1 ea             	shr    %rdx
   16e19:	83 e0 01             	and    $0x1,%eax
   16e1c:	48 09 c2             	or     %rax,%rdx
   16e1f:	f2 48 0f 2a c2       	cvtsi2sd %rdx,%xmm0
   16e24:	f2 0f 58 c0          	addsd  %xmm0,%xmm0
   16e28:	f2 0f 10 0d 28 0f 01 	movsd  0x10f28(%rip),%xmm1        # 27d58 <uxMaxNumberOfExtraTasksRunning+0x178>
   16e2f:	00 
   16e30:	f2 0f 59 c8          	mulsd  %xmm0,%xmm1
   16e34:	f2 0f 10 45 c8       	movsd  -0x38(%rbp),%xmm0
   16e39:	f2 0f 58 c1          	addsd  %xmm1,%xmm0
   16e3d:	f2 0f 11 45 c8       	movsd  %xmm0,-0x38(%rbp)
   16e42:	48 83 45 e0 01       	addq   $0x1,-0x20(%rbp)
   16e47:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
   16e4b:	48 3b 45 e8          	cmp    -0x18(%rbp),%rax
   16e4f:	0f 82 66 ff ff ff    	jb     16dbb <vCompetingMathTask4+0x59>
   16e55:	48 c7 45 e0 00 00 00 	movq   $0x0,-0x20(%rbp)
   16e5c:	00 
   16e5d:	eb 2a                	jmp    16e89 <vCompetingMathTask4+0x127>
   16e5f:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
   16e63:	48 8d 14 c5 00 00 00 	lea    0x0(,%rax,8),%rdx
   16e6a:	00 
   16e6b:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   16e6f:	48 01 d0             	add    %rdx,%rax
   16e72:	f2 0f 10 08          	movsd  (%rax),%xmm1
   16e76:	f2 0f 10 45 d0       	movsd  -0x30(%rbp),%xmm0
   16e7b:	f2 0f 58 c1          	addsd  %xmm1,%xmm0
   16e7f:	f2 0f 11 45 d0       	movsd  %xmm0,-0x30(%rbp)
   16e84:	48 83 45 e0 01       	addq   $0x1,-0x20(%rbp)
   16e89:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
   16e8d:	48 3b 45 e8          	cmp    -0x18(%rbp),%rax
   16e91:	72 cc                	jb     16e5f <vCompetingMathTask4+0xfd>
   16e93:	f2 0f 10 45 c8       	movsd  -0x38(%rbp),%xmm0
   16e98:	f2 0f 10 4d d0       	movsd  -0x30(%rbp),%xmm1
   16e9d:	f2 0f 5c c1          	subsd  %xmm1,%xmm0
   16ea1:	f2 0f 11 45 d8       	movsd  %xmm0,-0x28(%rbp)
   16ea6:	f2 0f 10 45 d8       	movsd  -0x28(%rbp),%xmm0
   16eab:	f3 0f 7e 0d 6d 0e 01 	movq   0x10e6d(%rip),%xmm1        # 27d20 <uxMaxNumberOfExtraTasksRunning+0x140>
   16eb2:	00 
   16eb3:	66 0f 54 c1          	andpd  %xmm1,%xmm0
   16eb7:	66 0f 2f 05 71 0e 01 	comisd 0x10e71(%rip),%xmm0        # 27d30 <uxMaxNumberOfExtraTasksRunning+0x150>
   16ebe:	00 
   16ebf:	76 06                	jbe    16ec7 <vCompetingMathTask4+0x165>
   16ec1:	66 c7 45 c6 01 00    	movw   $0x1,-0x3a(%rbp)
   16ec7:	66 83 7d c6 00       	cmpw   $0x0,-0x3a(%rbp)
   16ecc:	0f 85 ca fe ff ff    	jne    16d9c <vCompetingMathTask4+0x3a>
   16ed2:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
   16ed6:	66 c7 00 01 00       	movw   $0x1,(%rax)
   16edb:	e9 bc fe ff ff       	jmpq   16d9c <vCompetingMathTask4+0x3a>

0000000000016ee0 <xAreMathsTaskStillRunning>:
   16ee0:	f3 0f 1e fa          	endbr64 
   16ee4:	55                   	push   %rbp
   16ee5:	48 89 e5             	mov    %rsp,%rbp
   16ee8:	48 c7 45 f0 01 00 00 	movq   $0x1,-0x10(%rbp)
   16eef:	00 
   16ef0:	48 c7 45 f8 00 00 00 	movq   $0x0,-0x8(%rbp)
   16ef7:	00 
   16ef8:	eb 3d                	jmp    16f37 <xAreMathsTaskStillRunning+0x57>
   16efa:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   16efe:	48 8d 14 00          	lea    (%rax,%rax,1),%rdx
   16f02:	48 8d 05 77 f2 11 00 	lea    0x11f277(%rip),%rax        # 136180 <usTaskCheck>
   16f09:	0f b7 04 02          	movzwl (%rdx,%rax,1),%eax
   16f0d:	66 83 f8 01          	cmp    $0x1,%ax
   16f11:	74 0a                	je     16f1d <xAreMathsTaskStillRunning+0x3d>
   16f13:	48 c7 45 f0 00 00 00 	movq   $0x0,-0x10(%rbp)
   16f1a:	00 
   16f1b:	eb 15                	jmp    16f32 <xAreMathsTaskStillRunning+0x52>
   16f1d:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   16f21:	48 8d 14 00          	lea    (%rax,%rax,1),%rdx
   16f25:	48 8d 05 54 f2 11 00 	lea    0x11f254(%rip),%rax        # 136180 <usTaskCheck>
   16f2c:	66 c7 04 02 00 00    	movw   $0x0,(%rdx,%rax,1)
   16f32:	48 83 45 f8 01       	addq   $0x1,-0x8(%rbp)
   16f37:	48 83 7d f8 03       	cmpq   $0x3,-0x8(%rbp)
   16f3c:	7e bc                	jle    16efa <xAreMathsTaskStillRunning+0x1a>
   16f3e:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
   16f42:	5d                   	pop    %rbp
   16f43:	c3                   	retq   

0000000000016f44 <vStartGenericQueueTasks>:
   16f44:	f3 0f 1e fa          	endbr64 
   16f48:	55                   	push   %rbp
   16f49:	48 89 e5             	mov    %rsp,%rbp
   16f4c:	48 83 ec 20          	sub    $0x20,%rsp
   16f50:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
   16f54:	ba 00 00 00 00       	mov    $0x0,%edx
   16f59:	be 04 00 00 00       	mov    $0x4,%esi
   16f5e:	bf 05 00 00 00       	mov    $0x5,%edi
   16f63:	e8 8b e6 fe ff       	callq  55f3 <xQueueGenericCreate>
   16f68:	48 89 45 f0          	mov    %rax,-0x10(%rbp)
   16f6c:	48 83 7d f0 00       	cmpq   $0x0,-0x10(%rbp)
   16f71:	74 3f                	je     16fb2 <vStartGenericQueueTasks+0x6e>
   16f73:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
   16f77:	48 8d 35 e2 0d 01 00 	lea    0x10de2(%rip),%rsi        # 27d60 <uxMaxNumberOfExtraTasksRunning+0x180>
   16f7e:	48 89 c7             	mov    %rax,%rdi
   16f81:	e8 32 16 ff ff       	callq  85b8 <vQueueAddToRegistry>
   16f86:	48 8b 55 e8          	mov    -0x18(%rbp),%rdx
   16f8a:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
   16f8e:	41 b9 00 00 00 00    	mov    $0x0,%r9d
   16f94:	49 89 d0             	mov    %rdx,%r8
   16f97:	48 89 c1             	mov    %rax,%rcx
   16f9a:	ba 46 00 00 00       	mov    $0x46,%edx
   16f9f:	48 8d 35 c9 0d 01 00 	lea    0x10dc9(%rip),%rsi        # 27d6f <uxMaxNumberOfExtraTasksRunning+0x18f>
   16fa6:	48 8d 3d e1 00 00 00 	lea    0xe1(%rip),%rdi        # 1708e <prvSendFrontAndBackTest>
   16fad:	e8 45 4d ff ff       	callq  bcf7 <xTaskCreate>
   16fb2:	bf 01 00 00 00       	mov    $0x1,%edi
   16fb7:	e8 a1 e9 fe ff       	callq  595d <xQueueCreateMutex>
   16fbc:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
   16fc0:	48 83 7d f8 00       	cmpq   $0x0,-0x8(%rbp)
   16fc5:	0f 84 c0 00 00 00    	je     1708b <vStartGenericQueueTasks+0x147>
   16fcb:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   16fcf:	48 8d 35 9e 0d 01 00 	lea    0x10d9e(%rip),%rsi        # 27d74 <uxMaxNumberOfExtraTasksRunning+0x194>
   16fd6:	48 89 c7             	mov    %rax,%rdi
   16fd9:	e8 da 15 ff ff       	callq  85b8 <vQueueAddToRegistry>
   16fde:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   16fe2:	41 b9 00 00 00 00    	mov    $0x0,%r9d
   16fe8:	41 b8 00 00 00 00    	mov    $0x0,%r8d
   16fee:	48 89 c1             	mov    %rax,%rcx
   16ff1:	ba 46 00 00 00       	mov    $0x46,%edx
   16ff6:	48 8d 35 87 0d 01 00 	lea    0x10d87(%rip),%rsi        # 27d84 <uxMaxNumberOfExtraTasksRunning+0x1a4>
   16ffd:	48 8d 3d 64 0c 00 00 	lea    0xc64(%rip),%rdi        # 17c68 <prvLowPriorityMutexTask>
   17004:	e8 ee 4c ff ff       	callq  bcf7 <xTaskCreate>
   17009:	4c 8d 0d 98 f1 11 00 	lea    0x11f198(%rip),%r9        # 1361a8 <xMediumPriorityMutexTask>
   17010:	41 b8 02 00 00 00    	mov    $0x2,%r8d
   17016:	b9 00 00 00 00       	mov    $0x0,%ecx
   1701b:	ba 46 00 00 00       	mov    $0x46,%edx
   17020:	48 8d 35 63 0d 01 00 	lea    0x10d63(%rip),%rsi        # 27d8a <uxMaxNumberOfExtraTasksRunning+0x1aa>
   17027:	48 8d 3d ca 0c 00 00 	lea    0xcca(%rip),%rdi        # 17cf8 <prvMediumPriorityMutexTask>
   1702e:	e8 c4 4c ff ff       	callq  bcf7 <xTaskCreate>
   17033:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   17037:	4c 8d 0d 62 f1 11 00 	lea    0x11f162(%rip),%r9        # 1361a0 <xHighPriorityMutexTask>
   1703e:	41 b8 03 00 00 00    	mov    $0x3,%r8d
   17044:	48 89 c1             	mov    %rax,%rcx
   17047:	ba 46 00 00 00       	mov    $0x46,%edx
   1704c:	48 8d 35 3d 0d 01 00 	lea    0x10d3d(%rip),%rsi        # 27d90 <uxMaxNumberOfExtraTasksRunning+0x1b0>
   17053:	48 8d 3d c9 0c 00 00 	lea    0xcc9(%rip),%rdi        # 17d23 <prvHighPriorityMutexTask>
   1705a:	e8 98 4c ff ff       	callq  bcf7 <xTaskCreate>
   1705f:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   17063:	4c 8d 0d 46 f1 11 00 	lea    0x11f146(%rip),%r9        # 1361b0 <xSecondMediumPriorityMutexTask>
   1706a:	41 b8 02 00 00 00    	mov    $0x2,%r8d
   17070:	48 89 c1             	mov    %rax,%rcx
   17073:	ba 46 00 00 00       	mov    $0x46,%edx
   17078:	48 8d 35 18 0d 01 00 	lea    0x10d18(%rip),%rsi        # 27d97 <uxMaxNumberOfExtraTasksRunning+0x1b7>
   1707f:	48 8d 3d 9d 0c 00 00 	lea    0xc9d(%rip),%rdi        # 17d23 <prvHighPriorityMutexTask>
   17086:	e8 6c 4c ff ff       	callq  bcf7 <xTaskCreate>
   1708b:	90                   	nop
   1708c:	c9                   	leaveq 
   1708d:	c3                   	retq   

000000000001708e <prvSendFrontAndBackTest>:
   1708e:	f3 0f 1e fa          	endbr64 
   17092:	55                   	push   %rbp
   17093:	48 89 e5             	mov    %rsp,%rbp
   17096:	48 83 ec 30          	sub    $0x30,%rsp
   1709a:	48 89 7d d8          	mov    %rdi,-0x28(%rbp)
   1709e:	64 48 8b 04 25 28 00 	mov    %fs:0x28,%rax
   170a5:	00 00 
   170a7:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
   170ab:	31 c0                	xor    %eax,%eax
   170ad:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
   170b1:	48 89 45 f0          	mov    %rax,-0x10(%rbp)
   170b5:	8b 05 d5 f0 11 00    	mov    0x11f0d5(%rip),%eax        # 136190 <ulLoopCounter>
   170bb:	89 45 ec             	mov    %eax,-0x14(%rbp)
   170be:	48 8d 75 ec          	lea    -0x14(%rbp),%rsi
   170c2:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
   170c6:	b9 01 00 00 00       	mov    $0x1,%ecx
   170cb:	ba 00 00 00 00       	mov    $0x0,%edx
   170d0:	48 89 c7             	mov    %rax,%rdi
   170d3:	e8 bf ec fe ff       	callq  5d97 <xQueueGenericSend>
   170d8:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
   170dc:	48 89 c7             	mov    %rax,%rdi
   170df:	e8 2a 0d ff ff       	callq  7e0e <uxQueueMessagesWaiting>
   170e4:	48 83 f8 01          	cmp    $0x1,%rax
   170e8:	74 0b                	je     170f5 <prvSendFrontAndBackTest+0x67>
   170ea:	48 c7 05 93 f0 11 00 	movq   $0x1,0x11f093(%rip)        # 136188 <xErrorDetected>
   170f1:	01 00 00 00 
   170f5:	48 8d 4d e4          	lea    -0x1c(%rbp),%rcx
   170f9:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
   170fd:	ba 00 00 00 00       	mov    $0x0,%edx
   17102:	48 89 ce             	mov    %rcx,%rsi
   17105:	48 89 c7             	mov    %rax,%rdi
   17108:	e8 d6 f8 fe ff       	callq  69e3 <xQueueReceive>
   1710d:	48 83 f8 01          	cmp    $0x1,%rax
   17111:	74 0b                	je     1711e <prvSendFrontAndBackTest+0x90>
   17113:	48 c7 05 6a f0 11 00 	movq   $0x1,0x11f06a(%rip)        # 136188 <xErrorDetected>
   1711a:	01 00 00 00 
   1711e:	8b 15 6c f0 11 00    	mov    0x11f06c(%rip),%edx        # 136190 <ulLoopCounter>
   17124:	8b 45 e4             	mov    -0x1c(%rbp),%eax
   17127:	39 c2                	cmp    %eax,%edx
   17129:	74 0b                	je     17136 <prvSendFrontAndBackTest+0xa8>
   1712b:	48 c7 05 52 f0 11 00 	movq   $0x1,0x11f052(%rip)        # 136188 <xErrorDetected>
   17132:	01 00 00 00 
   17136:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
   1713a:	48 89 c7             	mov    %rax,%rdi
   1713d:	e8 cc 0c ff ff       	callq  7e0e <uxQueueMessagesWaiting>
   17142:	48 85 c0             	test   %rax,%rax
   17145:	74 0b                	je     17152 <prvSendFrontAndBackTest+0xc4>
   17147:	48 c7 05 36 f0 11 00 	movq   $0x1,0x11f036(%rip)        # 136188 <xErrorDetected>
   1714e:	01 00 00 00 
   17152:	8b 05 38 f0 11 00    	mov    0x11f038(%rip),%eax        # 136190 <ulLoopCounter>
   17158:	89 45 ec             	mov    %eax,-0x14(%rbp)
   1715b:	48 8d 75 ec          	lea    -0x14(%rbp),%rsi
   1715f:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
   17163:	b9 00 00 00 00       	mov    $0x0,%ecx
   17168:	ba 00 00 00 00       	mov    $0x0,%edx
   1716d:	48 89 c7             	mov    %rax,%rdi
   17170:	e8 22 ec fe ff       	callq  5d97 <xQueueGenericSend>
   17175:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
   17179:	48 89 c7             	mov    %rax,%rdi
   1717c:	e8 8d 0c ff ff       	callq  7e0e <uxQueueMessagesWaiting>
   17181:	48 83 f8 01          	cmp    $0x1,%rax
   17185:	74 0b                	je     17192 <prvSendFrontAndBackTest+0x104>
   17187:	48 c7 05 f6 ef 11 00 	movq   $0x1,0x11eff6(%rip)        # 136188 <xErrorDetected>
   1718e:	01 00 00 00 
   17192:	48 8d 4d e4          	lea    -0x1c(%rbp),%rcx
   17196:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
   1719a:	ba 00 00 00 00       	mov    $0x0,%edx
   1719f:	48 89 ce             	mov    %rcx,%rsi
   171a2:	48 89 c7             	mov    %rax,%rdi
   171a5:	e8 39 f8 fe ff       	callq  69e3 <xQueueReceive>
   171aa:	48 83 f8 01          	cmp    $0x1,%rax
   171ae:	74 0b                	je     171bb <prvSendFrontAndBackTest+0x12d>
   171b0:	48 c7 05 cd ef 11 00 	movq   $0x1,0x11efcd(%rip)        # 136188 <xErrorDetected>
   171b7:	01 00 00 00 
   171bb:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
   171bf:	48 89 c7             	mov    %rax,%rdi
   171c2:	e8 47 0c ff ff       	callq  7e0e <uxQueueMessagesWaiting>
   171c7:	48 85 c0             	test   %rax,%rax
   171ca:	74 0b                	je     171d7 <prvSendFrontAndBackTest+0x149>
   171cc:	48 c7 05 b1 ef 11 00 	movq   $0x1,0x11efb1(%rip)        # 136188 <xErrorDetected>
   171d3:	01 00 00 00 
   171d7:	8b 15 b3 ef 11 00    	mov    0x11efb3(%rip),%edx        # 136190 <ulLoopCounter>
   171dd:	8b 45 e4             	mov    -0x1c(%rbp),%eax
   171e0:	39 c2                	cmp    %eax,%edx
   171e2:	74 0b                	je     171ef <prvSendFrontAndBackTest+0x161>
   171e4:	48 c7 05 99 ef 11 00 	movq   $0x1,0x11ef99(%rip)        # 136188 <xErrorDetected>
   171eb:	01 00 00 00 
   171ef:	c7 45 e4 02 00 00 00 	movl   $0x2,-0x1c(%rbp)
   171f6:	eb 23                	jmp    1721b <prvSendFrontAndBackTest+0x18d>
   171f8:	48 8d 75 e4          	lea    -0x1c(%rbp),%rsi
   171fc:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
   17200:	b9 00 00 00 00       	mov    $0x0,%ecx
   17205:	ba 00 00 00 00       	mov    $0x0,%edx
   1720a:	48 89 c7             	mov    %rax,%rdi
   1720d:	e8 85 eb fe ff       	callq  5d97 <xQueueGenericSend>
   17212:	8b 45 e4             	mov    -0x1c(%rbp),%eax
   17215:	83 c0 01             	add    $0x1,%eax
   17218:	89 45 e4             	mov    %eax,-0x1c(%rbp)
   1721b:	8b 45 e4             	mov    -0x1c(%rbp),%eax
   1721e:	83 f8 04             	cmp    $0x4,%eax
   17221:	76 d5                	jbe    171f8 <prvSendFrontAndBackTest+0x16a>
   17223:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
   17227:	48 89 c7             	mov    %rax,%rdi
   1722a:	e8 df 0b ff ff       	callq  7e0e <uxQueueMessagesWaiting>
   1722f:	48 83 f8 03          	cmp    $0x3,%rax
   17233:	74 0b                	je     17240 <prvSendFrontAndBackTest+0x1b2>
   17235:	48 c7 05 48 ef 11 00 	movq   $0x1,0x11ef48(%rip)        # 136188 <xErrorDetected>
   1723c:	01 00 00 00 
   17240:	c7 45 e4 01 00 00 00 	movl   $0x1,-0x1c(%rbp)
   17247:	48 8d 75 e4          	lea    -0x1c(%rbp),%rsi
   1724b:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
   1724f:	b9 01 00 00 00       	mov    $0x1,%ecx
   17254:	ba 00 00 00 00       	mov    $0x0,%edx
   17259:	48 89 c7             	mov    %rax,%rdi
   1725c:	e8 36 eb fe ff       	callq  5d97 <xQueueGenericSend>
   17261:	c7 45 e4 00 00 00 00 	movl   $0x0,-0x1c(%rbp)
   17268:	48 8d 75 e4          	lea    -0x1c(%rbp),%rsi
   1726c:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
   17270:	b9 01 00 00 00       	mov    $0x1,%ecx
   17275:	ba 00 00 00 00       	mov    $0x0,%edx
   1727a:	48 89 c7             	mov    %rax,%rdi
   1727d:	e8 15 eb fe ff       	callq  5d97 <xQueueGenericSend>
   17282:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
   17286:	48 89 c7             	mov    %rax,%rdi
   17289:	e8 80 0b ff ff       	callq  7e0e <uxQueueMessagesWaiting>
   1728e:	48 83 f8 05          	cmp    $0x5,%rax
   17292:	74 0b                	je     1729f <prvSendFrontAndBackTest+0x211>
   17294:	48 c7 05 e9 ee 11 00 	movq   $0x1,0x11eee9(%rip)        # 136188 <xErrorDetected>
   1729b:	01 00 00 00 
   1729f:	48 8d 75 e4          	lea    -0x1c(%rbp),%rsi
   172a3:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
   172a7:	b9 01 00 00 00       	mov    $0x1,%ecx
   172ac:	ba 00 00 00 00       	mov    $0x0,%edx
   172b1:	48 89 c7             	mov    %rax,%rdi
   172b4:	e8 de ea fe ff       	callq  5d97 <xQueueGenericSend>
   172b9:	48 85 c0             	test   %rax,%rax
   172bc:	74 0b                	je     172c9 <prvSendFrontAndBackTest+0x23b>
   172be:	48 c7 05 bf ee 11 00 	movq   $0x1,0x11eebf(%rip)        # 136188 <xErrorDetected>
   172c5:	01 00 00 00 
   172c9:	48 8d 75 e4          	lea    -0x1c(%rbp),%rsi
   172cd:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
   172d1:	b9 00 00 00 00       	mov    $0x0,%ecx
   172d6:	ba 00 00 00 00       	mov    $0x0,%edx
   172db:	48 89 c7             	mov    %rax,%rdi
   172de:	e8 b4 ea fe ff       	callq  5d97 <xQueueGenericSend>
   172e3:	48 85 c0             	test   %rax,%rax
   172e6:	74 0b                	je     172f3 <prvSendFrontAndBackTest+0x265>
   172e8:	48 c7 05 95 ee 11 00 	movq   $0x1,0x11ee95(%rip)        # 136188 <xErrorDetected>
   172ef:	01 00 00 00 
   172f3:	c7 45 e4 00 00 00 00 	movl   $0x0,-0x1c(%rbp)
   172fa:	e9 8d 00 00 00       	jmpq   1738c <prvSendFrontAndBackTest+0x2fe>
   172ff:	48 8d 4d e8          	lea    -0x18(%rbp),%rcx
   17303:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
   17307:	ba 00 00 00 00       	mov    $0x0,%edx
   1730c:	48 89 ce             	mov    %rcx,%rsi
   1730f:	48 89 c7             	mov    %rax,%rdi
   17312:	e8 5b 02 ff ff       	callq  7572 <xQueuePeek>
   17317:	48 83 f8 01          	cmp    $0x1,%rax
   1731b:	74 0b                	je     17328 <prvSendFrontAndBackTest+0x29a>
   1731d:	48 c7 05 60 ee 11 00 	movq   $0x1,0x11ee60(%rip)        # 136188 <xErrorDetected>
   17324:	01 00 00 00 
   17328:	8b 55 e4             	mov    -0x1c(%rbp),%edx
   1732b:	8b 45 e8             	mov    -0x18(%rbp),%eax
   1732e:	39 c2                	cmp    %eax,%edx
   17330:	74 0b                	je     1733d <prvSendFrontAndBackTest+0x2af>
   17332:	48 c7 05 4b ee 11 00 	movq   $0x1,0x11ee4b(%rip)        # 136188 <xErrorDetected>
   17339:	01 00 00 00 
   1733d:	8b 45 e8             	mov    -0x18(%rbp),%eax
   17340:	f7 d0                	not    %eax
   17342:	89 45 e8             	mov    %eax,-0x18(%rbp)
   17345:	48 8d 4d e8          	lea    -0x18(%rbp),%rcx
   17349:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
   1734d:	ba 00 00 00 00       	mov    $0x0,%edx
   17352:	48 89 ce             	mov    %rcx,%rsi
   17355:	48 89 c7             	mov    %rax,%rdi
   17358:	e8 86 f6 fe ff       	callq  69e3 <xQueueReceive>
   1735d:	48 83 f8 01          	cmp    $0x1,%rax
   17361:	74 0b                	je     1736e <prvSendFrontAndBackTest+0x2e0>
   17363:	48 c7 05 1a ee 11 00 	movq   $0x1,0x11ee1a(%rip)        # 136188 <xErrorDetected>
   1736a:	01 00 00 00 
   1736e:	8b 55 e4             	mov    -0x1c(%rbp),%edx
   17371:	8b 45 e8             	mov    -0x18(%rbp),%eax
   17374:	39 c2                	cmp    %eax,%edx
   17376:	74 0b                	je     17383 <prvSendFrontAndBackTest+0x2f5>
   17378:	48 c7 05 05 ee 11 00 	movq   $0x1,0x11ee05(%rip)        # 136188 <xErrorDetected>
   1737f:	01 00 00 00 
   17383:	8b 45 e4             	mov    -0x1c(%rbp),%eax
   17386:	83 c0 01             	add    $0x1,%eax
   17389:	89 45 e4             	mov    %eax,-0x1c(%rbp)
   1738c:	8b 45 e4             	mov    -0x1c(%rbp),%eax
   1738f:	83 f8 04             	cmp    $0x4,%eax
   17392:	0f 86 67 ff ff ff    	jbe    172ff <prvSendFrontAndBackTest+0x271>
   17398:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
   1739c:	48 89 c7             	mov    %rax,%rdi
   1739f:	e8 6a 0a ff ff       	callq  7e0e <uxQueueMessagesWaiting>
   173a4:	48 85 c0             	test   %rax,%rax
   173a7:	74 0b                	je     173b4 <prvSendFrontAndBackTest+0x326>
   173a9:	48 c7 05 d4 ed 11 00 	movq   $0x1,0x11edd4(%rip)        # 136188 <xErrorDetected>
   173b0:	01 00 00 00 
   173b4:	c7 45 e4 0a 00 00 00 	movl   $0xa,-0x1c(%rbp)
   173bb:	48 8d 75 e4          	lea    -0x1c(%rbp),%rsi
   173bf:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
   173c3:	b9 00 00 00 00       	mov    $0x0,%ecx
   173c8:	ba 00 00 00 00       	mov    $0x0,%edx
   173cd:	48 89 c7             	mov    %rax,%rdi
   173d0:	e8 c2 e9 fe ff       	callq  5d97 <xQueueGenericSend>
   173d5:	48 83 f8 01          	cmp    $0x1,%rax
   173d9:	74 0b                	je     173e6 <prvSendFrontAndBackTest+0x358>
   173db:	48 c7 05 a2 ed 11 00 	movq   $0x1,0x11eda2(%rip)        # 136188 <xErrorDetected>
   173e2:	01 00 00 00 
   173e6:	c7 45 e4 0b 00 00 00 	movl   $0xb,-0x1c(%rbp)
   173ed:	48 8d 75 e4          	lea    -0x1c(%rbp),%rsi
   173f1:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
   173f5:	b9 00 00 00 00       	mov    $0x0,%ecx
   173fa:	ba 00 00 00 00       	mov    $0x0,%edx
   173ff:	48 89 c7             	mov    %rax,%rdi
   17402:	e8 90 e9 fe ff       	callq  5d97 <xQueueGenericSend>
   17407:	48 83 f8 01          	cmp    $0x1,%rax
   1740b:	74 0b                	je     17418 <prvSendFrontAndBackTest+0x38a>
   1740d:	48 c7 05 70 ed 11 00 	movq   $0x1,0x11ed70(%rip)        # 136188 <xErrorDetected>
   17414:	01 00 00 00 
   17418:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
   1741c:	48 89 c7             	mov    %rax,%rdi
   1741f:	e8 ea 09 ff ff       	callq  7e0e <uxQueueMessagesWaiting>
   17424:	48 83 f8 02          	cmp    $0x2,%rax
   17428:	74 0b                	je     17435 <prvSendFrontAndBackTest+0x3a7>
   1742a:	48 c7 05 53 ed 11 00 	movq   $0x1,0x11ed53(%rip)        # 136188 <xErrorDetected>
   17431:	01 00 00 00 
   17435:	c7 45 e4 09 00 00 00 	movl   $0x9,-0x1c(%rbp)
   1743c:	eb 34                	jmp    17472 <prvSendFrontAndBackTest+0x3e4>
   1743e:	48 8d 75 e4          	lea    -0x1c(%rbp),%rsi
   17442:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
   17446:	b9 01 00 00 00       	mov    $0x1,%ecx
   1744b:	ba 00 00 00 00       	mov    $0x0,%edx
   17450:	48 89 c7             	mov    %rax,%rdi
   17453:	e8 3f e9 fe ff       	callq  5d97 <xQueueGenericSend>
   17458:	48 83 f8 01          	cmp    $0x1,%rax
   1745c:	74 0b                	je     17469 <prvSendFrontAndBackTest+0x3db>
   1745e:	48 c7 05 1f ed 11 00 	movq   $0x1,0x11ed1f(%rip)        # 136188 <xErrorDetected>
   17465:	01 00 00 00 
   17469:	8b 45 e4             	mov    -0x1c(%rbp),%eax
   1746c:	83 e8 01             	sub    $0x1,%eax
   1746f:	89 45 e4             	mov    %eax,-0x1c(%rbp)
   17472:	8b 45 e4             	mov    -0x1c(%rbp),%eax
   17475:	83 f8 06             	cmp    $0x6,%eax
   17478:	77 c4                	ja     1743e <prvSendFrontAndBackTest+0x3b0>
   1747a:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
   1747e:	48 89 c7             	mov    %rax,%rdi
   17481:	e8 88 09 ff ff       	callq  7e0e <uxQueueMessagesWaiting>
   17486:	48 83 f8 05          	cmp    $0x5,%rax
   1748a:	74 0b                	je     17497 <prvSendFrontAndBackTest+0x409>
   1748c:	48 c7 05 f1 ec 11 00 	movq   $0x1,0x11ecf1(%rip)        # 136188 <xErrorDetected>
   17493:	01 00 00 00 
   17497:	48 8d 75 e4          	lea    -0x1c(%rbp),%rsi
   1749b:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
   1749f:	b9 01 00 00 00       	mov    $0x1,%ecx
   174a4:	ba 00 00 00 00       	mov    $0x0,%edx
   174a9:	48 89 c7             	mov    %rax,%rdi
   174ac:	e8 e6 e8 fe ff       	callq  5d97 <xQueueGenericSend>
   174b1:	48 85 c0             	test   %rax,%rax
   174b4:	74 0b                	je     174c1 <prvSendFrontAndBackTest+0x433>
   174b6:	48 c7 05 c7 ec 11 00 	movq   $0x1,0x11ecc7(%rip)        # 136188 <xErrorDetected>
   174bd:	01 00 00 00 
   174c1:	48 8d 75 e4          	lea    -0x1c(%rbp),%rsi
   174c5:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
   174c9:	b9 00 00 00 00       	mov    $0x0,%ecx
   174ce:	ba 00 00 00 00       	mov    $0x0,%edx
   174d3:	48 89 c7             	mov    %rax,%rdi
   174d6:	e8 bc e8 fe ff       	callq  5d97 <xQueueGenericSend>
   174db:	48 85 c0             	test   %rax,%rax
   174de:	74 0b                	je     174eb <prvSendFrontAndBackTest+0x45d>
   174e0:	48 c7 05 9d ec 11 00 	movq   $0x1,0x11ec9d(%rip)        # 136188 <xErrorDetected>
   174e7:	01 00 00 00 
   174eb:	c7 45 e4 07 00 00 00 	movl   $0x7,-0x1c(%rbp)
   174f2:	eb 47                	jmp    1753b <prvSendFrontAndBackTest+0x4ad>
   174f4:	48 8d 4d e8          	lea    -0x18(%rbp),%rcx
   174f8:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
   174fc:	ba 00 00 00 00       	mov    $0x0,%edx
   17501:	48 89 ce             	mov    %rcx,%rsi
   17504:	48 89 c7             	mov    %rax,%rdi
   17507:	e8 d7 f4 fe ff       	callq  69e3 <xQueueReceive>
   1750c:	48 83 f8 01          	cmp    $0x1,%rax
   17510:	74 0b                	je     1751d <prvSendFrontAndBackTest+0x48f>
   17512:	48 c7 05 6b ec 11 00 	movq   $0x1,0x11ec6b(%rip)        # 136188 <xErrorDetected>
   17519:	01 00 00 00 
   1751d:	8b 55 e4             	mov    -0x1c(%rbp),%edx
   17520:	8b 45 e8             	mov    -0x18(%rbp),%eax
   17523:	39 c2                	cmp    %eax,%edx
   17525:	74 0b                	je     17532 <prvSendFrontAndBackTest+0x4a4>
   17527:	48 c7 05 56 ec 11 00 	movq   $0x1,0x11ec56(%rip)        # 136188 <xErrorDetected>
   1752e:	01 00 00 00 
   17532:	8b 45 e4             	mov    -0x1c(%rbp),%eax
   17535:	83 c0 01             	add    $0x1,%eax
   17538:	89 45 e4             	mov    %eax,-0x1c(%rbp)
   1753b:	8b 45 e4             	mov    -0x1c(%rbp),%eax
   1753e:	83 f8 0b             	cmp    $0xb,%eax
   17541:	76 b1                	jbe    174f4 <prvSendFrontAndBackTest+0x466>
   17543:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
   17547:	48 89 c7             	mov    %rax,%rdi
   1754a:	e8 bf 08 ff ff       	callq  7e0e <uxQueueMessagesWaiting>
   1754f:	48 85 c0             	test   %rax,%rax
   17552:	74 0b                	je     1755f <prvSendFrontAndBackTest+0x4d1>
   17554:	48 c7 05 29 ec 11 00 	movq   $0x1,0x11ec29(%rip)        # 136188 <xErrorDetected>
   1755b:	01 00 00 00 
   1755f:	8b 05 2b ec 11 00    	mov    0x11ec2b(%rip),%eax        # 136190 <ulLoopCounter>
   17565:	83 c0 01             	add    $0x1,%eax
   17568:	89 05 22 ec 11 00    	mov    %eax,0x11ec22(%rip)        # 136190 <ulLoopCounter>
   1756e:	e9 42 fb ff ff       	jmpq   170b5 <prvSendFrontAndBackTest+0x27>

0000000000017573 <prvHighPriorityTimeout>:
   17573:	f3 0f 1e fa          	endbr64 
   17577:	55                   	push   %rbp
   17578:	48 89 e5             	mov    %rsp,%rbp
   1757b:	53                   	push   %rbx
   1757c:	48 83 ec 18          	sub    $0x18,%rsp
   17580:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
   17584:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
   17588:	48 89 c7             	mov    %rax,%rdi
   1758b:	e8 79 e4 fe ff       	callq  5a09 <xQueueGetMutexHolder>
   17590:	48 85 c0             	test   %rax,%rax
   17593:	74 0b                	je     175a0 <prvHighPriorityTimeout+0x2d>
   17595:	48 c7 05 e8 eb 11 00 	movq   $0x1,0x11ebe8(%rip)        # 136188 <xErrorDetected>
   1759c:	01 00 00 00 
   175a0:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
   175a4:	be 00 00 00 00       	mov    $0x0,%esi
   175a9:	48 89 c7             	mov    %rax,%rdi
   175ac:	e8 c3 f9 fe ff       	callq  6f74 <xQueueSemaphoreTake>
   175b1:	48 83 f8 01          	cmp    $0x1,%rax
   175b5:	74 0b                	je     175c2 <prvHighPriorityTimeout+0x4f>
   175b7:	48 c7 05 c6 eb 11 00 	movq   $0x1,0x11ebc6(%rip)        # 136188 <xErrorDetected>
   175be:	01 00 00 00 
   175c2:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
   175c6:	48 89 c7             	mov    %rax,%rdi
   175c9:	e8 3b e4 fe ff       	callq  5a09 <xQueueGetMutexHolder>
   175ce:	48 89 c3             	mov    %rax,%rbx
   175d1:	e8 a8 80 ff ff       	callq  f67e <xTaskGetCurrentTaskHandle>
   175d6:	48 39 c3             	cmp    %rax,%rbx
   175d9:	74 0b                	je     175e6 <prvHighPriorityTimeout+0x73>
   175db:	48 c7 05 a2 eb 11 00 	movq   $0x1,0x11eba2(%rip)        # 136188 <xErrorDetected>
   175e2:	01 00 00 00 
   175e6:	bf 00 00 00 00       	mov    $0x0,%edi
   175eb:	e8 b9 53 ff ff       	callq  c9a9 <uxTaskPriorityGet>
   175f0:	48 85 c0             	test   %rax,%rax
   175f3:	74 0b                	je     17600 <prvHighPriorityTimeout+0x8d>
   175f5:	48 c7 05 88 eb 11 00 	movq   $0x1,0x11eb88(%rip)        # 136188 <xErrorDetected>
   175fc:	01 00 00 00 
   17600:	48 8b 05 99 eb 11 00 	mov    0x11eb99(%rip),%rax        # 1361a0 <xHighPriorityMutexTask>
   17607:	48 89 c7             	mov    %rax,%rdi
   1760a:	e8 70 59 ff ff       	callq  cf7f <vTaskResume>
   1760f:	bf 00 00 00 00       	mov    $0x0,%edi
   17614:	e8 90 53 ff ff       	callq  c9a9 <uxTaskPriorityGet>
   17619:	48 83 f8 03          	cmp    $0x3,%rax
   1761d:	74 0b                	je     1762a <prvHighPriorityTimeout+0xb7>
   1761f:	48 c7 05 5e eb 11 00 	movq   $0x1,0x11eb5e(%rip)        # 136188 <xErrorDetected>
   17626:	01 00 00 00 
   1762a:	48 8b 05 7f eb 11 00 	mov    0x11eb7f(%rip),%rax        # 1361b0 <xSecondMediumPriorityMutexTask>
   17631:	48 89 c7             	mov    %rax,%rdi
   17634:	e8 46 59 ff ff       	callq  cf7f <vTaskResume>
   17639:	bf 00 00 00 00       	mov    $0x0,%edi
   1763e:	e8 66 53 ff ff       	callq  c9a9 <uxTaskPriorityGet>
   17643:	48 83 f8 03          	cmp    $0x3,%rax
   17647:	74 0b                	je     17654 <prvHighPriorityTimeout+0xe1>
   17649:	48 c7 05 34 eb 11 00 	movq   $0x1,0x11eb34(%rip)        # 136188 <xErrorDetected>
   17650:	01 00 00 00 
   17654:	48 8b 05 65 eb 11 00 	mov    0x11eb65(%rip),%rax        # 1361c0 <uxLoopCount.3477>
   1765b:	83 e0 07             	and    $0x7,%eax
   1765e:	48 89 c7             	mov    %rax,%rdi
   17661:	e8 3c 51 ff ff       	callq  c7a2 <vTaskDelay>
   17666:	48 c7 05 47 eb 11 00 	movq   $0x1,0x11eb47(%rip)        # 1361b8 <xBlockWasAborted>
   1766d:	01 00 00 00 
   17671:	48 8b 05 28 eb 11 00 	mov    0x11eb28(%rip),%rax        # 1361a0 <xHighPriorityMutexTask>
   17678:	48 89 c7             	mov    %rax,%rdi
   1767b:	e8 2b 67 ff ff       	callq  ddab <xTaskAbortDelay>
   17680:	48 83 f8 01          	cmp    $0x1,%rax
   17684:	74 17                	je     1769d <prvHighPriorityTimeout+0x12a>
   17686:	48 c7 05 f7 ea 11 00 	movq   $0x1,0x11eaf7(%rip)        # 136188 <xErrorDetected>
   1768d:	01 00 00 00 
   17691:	eb 0a                	jmp    1769d <prvHighPriorityTimeout+0x12a>
   17693:	bf 02 00 00 00       	mov    $0x2,%edi
   17698:	e8 05 51 ff ff       	callq  c7a2 <vTaskDelay>
   1769d:	bf 00 00 00 00       	mov    $0x0,%edi
   176a2:	e8 02 53 ff ff       	callq  c9a9 <uxTaskPriorityGet>
   176a7:	48 83 f8 02          	cmp    $0x2,%rax
   176ab:	75 e6                	jne    17693 <prvHighPriorityTimeout+0x120>
   176ad:	48 c7 05 00 eb 11 00 	movq   $0x1,0x11eb00(%rip)        # 1361b8 <xBlockWasAborted>
   176b4:	01 00 00 00 
   176b8:	48 8b 05 f1 ea 11 00 	mov    0x11eaf1(%rip),%rax        # 1361b0 <xSecondMediumPriorityMutexTask>
   176bf:	48 89 c7             	mov    %rax,%rdi
   176c2:	e8 e4 66 ff ff       	callq  ddab <xTaskAbortDelay>
   176c7:	48 83 f8 01          	cmp    $0x1,%rax
   176cb:	74 17                	je     176e4 <prvHighPriorityTimeout+0x171>
   176cd:	48 c7 05 b0 ea 11 00 	movq   $0x1,0x11eab0(%rip)        # 136188 <xErrorDetected>
   176d4:	01 00 00 00 
   176d8:	eb 0a                	jmp    176e4 <prvHighPriorityTimeout+0x171>
   176da:	bf 02 00 00 00       	mov    $0x2,%edi
   176df:	e8 be 50 ff ff       	callq  c7a2 <vTaskDelay>
   176e4:	bf 00 00 00 00       	mov    $0x0,%edi
   176e9:	e8 bb 52 ff ff       	callq  c9a9 <uxTaskPriorityGet>
   176ee:	48 85 c0             	test   %rax,%rax
   176f1:	75 e7                	jne    176da <prvHighPriorityTimeout+0x167>
   176f3:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
   176f7:	48 89 c7             	mov    %rax,%rdi
   176fa:	e8 6c e3 fe ff       	callq  5a6b <xQueueGetMutexHolderFromISR>
   176ff:	48 89 c3             	mov    %rax,%rbx
   17702:	e8 77 7f ff ff       	callq  f67e <xTaskGetCurrentTaskHandle>
   17707:	48 39 c3             	cmp    %rax,%rbx
   1770a:	74 0b                	je     17717 <prvHighPriorityTimeout+0x1a4>
   1770c:	48 c7 05 71 ea 11 00 	movq   $0x1,0x11ea71(%rip)        # 136188 <xErrorDetected>
   17713:	01 00 00 00 
   17717:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
   1771b:	b9 00 00 00 00       	mov    $0x0,%ecx
   17720:	ba 00 00 00 00       	mov    $0x0,%edx
   17725:	be 00 00 00 00       	mov    $0x0,%esi
   1772a:	48 89 c7             	mov    %rax,%rdi
   1772d:	e8 65 e6 fe ff       	callq  5d97 <xQueueGenericSend>
   17732:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
   17736:	48 89 c7             	mov    %rax,%rdi
   17739:	e8 2d e3 fe ff       	callq  5a6b <xQueueGetMutexHolderFromISR>
   1773e:	48 85 c0             	test   %rax,%rax
   17741:	74 0b                	je     1774e <prvHighPriorityTimeout+0x1db>
   17743:	48 c7 05 3a ea 11 00 	movq   $0x1,0x11ea3a(%rip)        # 136188 <xErrorDetected>
   1774a:	01 00 00 00 
   1774e:	48 8b 05 33 ea 11 00 	mov    0x11ea33(%rip),%rax        # 136188 <xErrorDetected>
   17755:	48 85 c0             	test   %rax,%rax
   17758:	74 11                	je     1776b <prvHighPriorityTimeout+0x1f8>
   1775a:	be 34 02 00 00       	mov    $0x234,%esi
   1775f:	48 8d 3d 3a 06 01 00 	lea    0x1063a(%rip),%rdi        # 27da0 <uxMaxNumberOfExtraTasksRunning+0x1c0>
   17766:	e8 a1 c5 fe ff       	callq  3d0c <vAssertCalled>
   1776b:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
   1776f:	be 00 00 00 00       	mov    $0x0,%esi
   17774:	48 89 c7             	mov    %rax,%rdi
   17777:	e8 f8 f7 fe ff       	callq  6f74 <xQueueSemaphoreTake>
   1777c:	48 83 f8 01          	cmp    $0x1,%rax
   17780:	74 0b                	je     1778d <prvHighPriorityTimeout+0x21a>
   17782:	48 c7 05 fb e9 11 00 	movq   $0x1,0x11e9fb(%rip)        # 136188 <xErrorDetected>
   17789:	01 00 00 00 
   1778d:	bf 00 00 00 00       	mov    $0x0,%edi
   17792:	e8 12 52 ff ff       	callq  c9a9 <uxTaskPriorityGet>
   17797:	48 85 c0             	test   %rax,%rax
   1779a:	74 0b                	je     177a7 <prvHighPriorityTimeout+0x234>
   1779c:	48 c7 05 e1 e9 11 00 	movq   $0x1,0x11e9e1(%rip)        # 136188 <xErrorDetected>
   177a3:	01 00 00 00 
   177a7:	48 8b 05 02 ea 11 00 	mov    0x11ea02(%rip),%rax        # 1361b0 <xSecondMediumPriorityMutexTask>
   177ae:	48 89 c7             	mov    %rax,%rdi
   177b1:	e8 c9 57 ff ff       	callq  cf7f <vTaskResume>
   177b6:	bf 00 00 00 00       	mov    $0x0,%edi
   177bb:	e8 e9 51 ff ff       	callq  c9a9 <uxTaskPriorityGet>
   177c0:	48 83 f8 02          	cmp    $0x2,%rax
   177c4:	74 0b                	je     177d1 <prvHighPriorityTimeout+0x25e>
   177c6:	48 c7 05 b7 e9 11 00 	movq   $0x1,0x11e9b7(%rip)        # 136188 <xErrorDetected>
   177cd:	01 00 00 00 
   177d1:	48 8b 05 c8 e9 11 00 	mov    0x11e9c8(%rip),%rax        # 1361a0 <xHighPriorityMutexTask>
   177d8:	48 89 c7             	mov    %rax,%rdi
   177db:	e8 9f 57 ff ff       	callq  cf7f <vTaskResume>
   177e0:	bf 00 00 00 00       	mov    $0x0,%edi
   177e5:	e8 bf 51 ff ff       	callq  c9a9 <uxTaskPriorityGet>
   177ea:	48 83 f8 03          	cmp    $0x3,%rax
   177ee:	74 0b                	je     177fb <prvHighPriorityTimeout+0x288>
   177f0:	48 c7 05 8d e9 11 00 	movq   $0x1,0x11e98d(%rip)        # 136188 <xErrorDetected>
   177f7:	01 00 00 00 
   177fb:	48 c7 05 b2 e9 11 00 	movq   $0x1,0x11e9b2(%rip)        # 1361b8 <xBlockWasAborted>
   17802:	01 00 00 00 
   17806:	48 8b 05 93 e9 11 00 	mov    0x11e993(%rip),%rax        # 1361a0 <xHighPriorityMutexTask>
   1780d:	48 89 c7             	mov    %rax,%rdi
   17810:	e8 96 65 ff ff       	callq  ddab <xTaskAbortDelay>
   17815:	48 83 f8 01          	cmp    $0x1,%rax
   17819:	74 17                	je     17832 <prvHighPriorityTimeout+0x2bf>
   1781b:	48 c7 05 62 e9 11 00 	movq   $0x1,0x11e962(%rip)        # 136188 <xErrorDetected>
   17822:	01 00 00 00 
   17826:	eb 0a                	jmp    17832 <prvHighPriorityTimeout+0x2bf>
   17828:	bf 02 00 00 00       	mov    $0x2,%edi
   1782d:	e8 70 4f ff ff       	callq  c7a2 <vTaskDelay>
   17832:	bf 00 00 00 00       	mov    $0x0,%edi
   17837:	e8 6d 51 ff ff       	callq  c9a9 <uxTaskPriorityGet>
   1783c:	48 83 f8 02          	cmp    $0x2,%rax
   17840:	75 e6                	jne    17828 <prvHighPriorityTimeout+0x2b5>
   17842:	48 c7 05 6b e9 11 00 	movq   $0x1,0x11e96b(%rip)        # 1361b8 <xBlockWasAborted>
   17849:	01 00 00 00 
   1784d:	48 8b 05 5c e9 11 00 	mov    0x11e95c(%rip),%rax        # 1361b0 <xSecondMediumPriorityMutexTask>
   17854:	48 89 c7             	mov    %rax,%rdi
   17857:	e8 4f 65 ff ff       	callq  ddab <xTaskAbortDelay>
   1785c:	48 83 f8 01          	cmp    $0x1,%rax
   17860:	74 17                	je     17879 <prvHighPriorityTimeout+0x306>
   17862:	48 c7 05 1b e9 11 00 	movq   $0x1,0x11e91b(%rip)        # 136188 <xErrorDetected>
   17869:	01 00 00 00 
   1786d:	eb 0a                	jmp    17879 <prvHighPriorityTimeout+0x306>
   1786f:	bf 02 00 00 00       	mov    $0x2,%edi
   17874:	e8 29 4f ff ff       	callq  c7a2 <vTaskDelay>
   17879:	bf 00 00 00 00       	mov    $0x0,%edi
   1787e:	e8 26 51 ff ff       	callq  c9a9 <uxTaskPriorityGet>
   17883:	48 85 c0             	test   %rax,%rax
   17886:	75 e7                	jne    1786f <prvHighPriorityTimeout+0x2fc>
   17888:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
   1788c:	b9 00 00 00 00       	mov    $0x0,%ecx
   17891:	ba 00 00 00 00       	mov    $0x0,%edx
   17896:	be 00 00 00 00       	mov    $0x0,%esi
   1789b:	48 89 c7             	mov    %rax,%rdi
   1789e:	e8 f4 e4 fe ff       	callq  5d97 <xQueueGenericSend>
   178a3:	48 8b 05 de e8 11 00 	mov    0x11e8de(%rip),%rax        # 136188 <xErrorDetected>
   178aa:	48 85 c0             	test   %rax,%rax
   178ad:	74 11                	je     178c0 <prvHighPriorityTimeout+0x34d>
   178af:	be 82 02 00 00       	mov    $0x282,%esi
   178b4:	48 8d 3d e5 04 01 00 	lea    0x104e5(%rip),%rdi        # 27da0 <uxMaxNumberOfExtraTasksRunning+0x1c0>
   178bb:	e8 4c c4 fe ff       	callq  3d0c <vAssertCalled>
   178c0:	48 8b 05 f9 e8 11 00 	mov    0x11e8f9(%rip),%rax        # 1361c0 <uxLoopCount.3477>
   178c7:	48 83 c0 01          	add    $0x1,%rax
   178cb:	48 89 05 ee e8 11 00 	mov    %rax,0x11e8ee(%rip)        # 1361c0 <uxLoopCount.3477>
   178d2:	90                   	nop
   178d3:	48 83 c4 18          	add    $0x18,%rsp
   178d7:	5b                   	pop    %rbx
   178d8:	5d                   	pop    %rbp
   178d9:	c3                   	retq   

00000000000178da <prvTakeTwoMutexesReturnInDifferentOrder>:
   178da:	f3 0f 1e fa          	endbr64 
   178de:	55                   	push   %rbp
   178df:	48 89 e5             	mov    %rsp,%rbp
   178e2:	48 83 ec 10          	sub    $0x10,%rsp
   178e6:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   178ea:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
   178ee:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   178f2:	be 00 00 00 00       	mov    $0x0,%esi
   178f7:	48 89 c7             	mov    %rax,%rdi
   178fa:	e8 75 f6 fe ff       	callq  6f74 <xQueueSemaphoreTake>
   178ff:	48 83 f8 01          	cmp    $0x1,%rax
   17903:	74 0b                	je     17910 <prvTakeTwoMutexesReturnInDifferentOrder+0x36>
   17905:	48 c7 05 78 e8 11 00 	movq   $0x1,0x11e878(%rip)        # 136188 <xErrorDetected>
   1790c:	01 00 00 00 
   17910:	c7 05 7e e8 11 00 00 	movl   $0x0,0x11e87e(%rip)        # 136198 <ulGuardedVariable>
   17917:	00 00 00 
   1791a:	bf 00 00 00 00       	mov    $0x0,%edi
   1791f:	e8 85 50 ff ff       	callq  c9a9 <uxTaskPriorityGet>
   17924:	48 85 c0             	test   %rax,%rax
   17927:	74 0b                	je     17934 <prvTakeTwoMutexesReturnInDifferentOrder+0x5a>
   17929:	48 c7 05 54 e8 11 00 	movq   $0x1,0x11e854(%rip)        # 136188 <xErrorDetected>
   17930:	01 00 00 00 
   17934:	48 8b 05 65 e8 11 00 	mov    0x11e865(%rip),%rax        # 1361a0 <xHighPriorityMutexTask>
   1793b:	48 89 c7             	mov    %rax,%rdi
   1793e:	e8 3c 56 ff ff       	callq  cf7f <vTaskResume>
   17943:	48 8b 05 56 e8 11 00 	mov    0x11e856(%rip),%rax        # 1361a0 <xHighPriorityMutexTask>
   1794a:	48 89 c7             	mov    %rax,%rdi
   1794d:	e8 36 4f ff ff       	callq  c888 <eTaskGetState>
   17952:	83 f8 02             	cmp    $0x2,%eax
   17955:	74 11                	je     17968 <prvTakeTwoMutexesReturnInDifferentOrder+0x8e>
   17957:	be ab 02 00 00       	mov    $0x2ab,%esi
   1795c:	48 8d 3d 3d 04 01 00 	lea    0x1043d(%rip),%rdi        # 27da0 <uxMaxNumberOfExtraTasksRunning+0x1c0>
   17963:	e8 a4 c3 fe ff       	callq  3d0c <vAssertCalled>
   17968:	bf 00 00 00 00       	mov    $0x0,%edi
   1796d:	e8 37 50 ff ff       	callq  c9a9 <uxTaskPriorityGet>
   17972:	48 83 f8 03          	cmp    $0x3,%rax
   17976:	74 0b                	je     17983 <prvTakeTwoMutexesReturnInDifferentOrder+0xa9>
   17978:	48 c7 05 05 e8 11 00 	movq   $0x1,0x11e805(%rip)        # 136188 <xErrorDetected>
   1797f:	01 00 00 00 
   17983:	be 01 00 00 00       	mov    $0x1,%esi
   17988:	bf 00 00 00 00       	mov    $0x0,%edi
   1798d:	e8 aa 50 ff ff       	callq  ca3c <vTaskPrioritySet>
   17992:	bf 00 00 00 00       	mov    $0x0,%edi
   17997:	e8 0d 50 ff ff       	callq  c9a9 <uxTaskPriorityGet>
   1799c:	48 83 f8 03          	cmp    $0x3,%rax
   179a0:	74 0b                	je     179ad <prvTakeTwoMutexesReturnInDifferentOrder+0xd3>
   179a2:	48 c7 05 db e7 11 00 	movq   $0x1,0x11e7db(%rip)        # 136188 <xErrorDetected>
   179a9:	01 00 00 00 
   179ad:	48 8b 05 f4 e7 11 00 	mov    0x11e7f4(%rip),%rax        # 1361a8 <xMediumPriorityMutexTask>
   179b4:	48 89 c7             	mov    %rax,%rdi
   179b7:	e8 c3 55 ff ff       	callq  cf7f <vTaskResume>
   179bc:	8b 05 d6 e7 11 00    	mov    0x11e7d6(%rip),%eax        # 136198 <ulGuardedVariable>
   179c2:	85 c0                	test   %eax,%eax
   179c4:	74 0b                	je     179d1 <prvTakeTwoMutexesReturnInDifferentOrder+0xf7>
   179c6:	48 c7 05 b7 e7 11 00 	movq   $0x1,0x11e7b7(%rip)        # 136188 <xErrorDetected>
   179cd:	01 00 00 00 
   179d1:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
   179d5:	be 00 00 00 00       	mov    $0x0,%esi
   179da:	48 89 c7             	mov    %rax,%rdi
   179dd:	e8 92 f5 fe ff       	callq  6f74 <xQueueSemaphoreTake>
   179e2:	48 83 f8 01          	cmp    $0x1,%rax
   179e6:	74 0b                	je     179f3 <prvTakeTwoMutexesReturnInDifferentOrder+0x119>
   179e8:	48 c7 05 95 e7 11 00 	movq   $0x1,0x11e795(%rip)        # 136188 <xErrorDetected>
   179ef:	01 00 00 00 
   179f3:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   179f7:	b9 00 00 00 00       	mov    $0x0,%ecx
   179fc:	ba 00 00 00 00       	mov    $0x0,%edx
   17a01:	be 00 00 00 00       	mov    $0x0,%esi
   17a06:	48 89 c7             	mov    %rax,%rdi
   17a09:	e8 89 e3 fe ff       	callq  5d97 <xQueueGenericSend>
   17a0e:	48 83 f8 01          	cmp    $0x1,%rax
   17a12:	74 0b                	je     17a1f <prvTakeTwoMutexesReturnInDifferentOrder+0x145>
   17a14:	48 c7 05 69 e7 11 00 	movq   $0x1,0x11e769(%rip)        # 136188 <xErrorDetected>
   17a1b:	01 00 00 00 
   17a1f:	8b 05 73 e7 11 00    	mov    0x11e773(%rip),%eax        # 136198 <ulGuardedVariable>
   17a25:	85 c0                	test   %eax,%eax
   17a27:	74 0b                	je     17a34 <prvTakeTwoMutexesReturnInDifferentOrder+0x15a>
   17a29:	48 c7 05 54 e7 11 00 	movq   $0x1,0x11e754(%rip)        # 136188 <xErrorDetected>
   17a30:	01 00 00 00 
   17a34:	bf 00 00 00 00       	mov    $0x0,%edi
   17a39:	e8 6b 4f ff ff       	callq  c9a9 <uxTaskPriorityGet>
   17a3e:	48 83 f8 03          	cmp    $0x3,%rax
   17a42:	74 0b                	je     17a4f <prvTakeTwoMutexesReturnInDifferentOrder+0x175>
   17a44:	48 c7 05 39 e7 11 00 	movq   $0x1,0x11e739(%rip)        # 136188 <xErrorDetected>
   17a4b:	01 00 00 00 
   17a4f:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
   17a53:	b9 00 00 00 00       	mov    $0x0,%ecx
   17a58:	ba 00 00 00 00       	mov    $0x0,%edx
   17a5d:	be 00 00 00 00       	mov    $0x0,%esi
   17a62:	48 89 c7             	mov    %rax,%rdi
   17a65:	e8 2d e3 fe ff       	callq  5d97 <xQueueGenericSend>
   17a6a:	48 83 f8 01          	cmp    $0x1,%rax
   17a6e:	74 0b                	je     17a7b <prvTakeTwoMutexesReturnInDifferentOrder+0x1a1>
   17a70:	48 c7 05 0d e7 11 00 	movq   $0x1,0x11e70d(%rip)        # 136188 <xErrorDetected>
   17a77:	01 00 00 00 
   17a7b:	8b 05 17 e7 11 00    	mov    0x11e717(%rip),%eax        # 136198 <ulGuardedVariable>
   17a81:	83 f8 01             	cmp    $0x1,%eax
   17a84:	74 0b                	je     17a91 <prvTakeTwoMutexesReturnInDifferentOrder+0x1b7>
   17a86:	48 c7 05 f7 e6 11 00 	movq   $0x1,0x11e6f7(%rip)        # 136188 <xErrorDetected>
   17a8d:	01 00 00 00 
   17a91:	bf 00 00 00 00       	mov    $0x0,%edi
   17a96:	e8 0e 4f ff ff       	callq  c9a9 <uxTaskPriorityGet>
   17a9b:	48 83 f8 01          	cmp    $0x1,%rax
   17a9f:	74 0b                	je     17aac <prvTakeTwoMutexesReturnInDifferentOrder+0x1d2>
   17aa1:	48 c7 05 dc e6 11 00 	movq   $0x1,0x11e6dc(%rip)        # 136188 <xErrorDetected>
   17aa8:	01 00 00 00 
   17aac:	be 00 00 00 00       	mov    $0x0,%esi
   17ab1:	bf 00 00 00 00       	mov    $0x0,%edi
   17ab6:	e8 81 4f ff ff       	callq  ca3c <vTaskPrioritySet>
   17abb:	90                   	nop
   17abc:	c9                   	leaveq 
   17abd:	c3                   	retq   

0000000000017abe <prvTakeTwoMutexesReturnInSameOrder>:
   17abe:	f3 0f 1e fa          	endbr64 
   17ac2:	55                   	push   %rbp
   17ac3:	48 89 e5             	mov    %rsp,%rbp
   17ac6:	48 83 ec 10          	sub    $0x10,%rsp
   17aca:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   17ace:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
   17ad2:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   17ad6:	be 00 00 00 00       	mov    $0x0,%esi
   17adb:	48 89 c7             	mov    %rax,%rdi
   17ade:	e8 91 f4 fe ff       	callq  6f74 <xQueueSemaphoreTake>
   17ae3:	48 83 f8 01          	cmp    $0x1,%rax
   17ae7:	74 0b                	je     17af4 <prvTakeTwoMutexesReturnInSameOrder+0x36>
   17ae9:	48 c7 05 94 e6 11 00 	movq   $0x1,0x11e694(%rip)        # 136188 <xErrorDetected>
   17af0:	01 00 00 00 
   17af4:	c7 05 9a e6 11 00 00 	movl   $0x0,0x11e69a(%rip)        # 136198 <ulGuardedVariable>
   17afb:	00 00 00 
   17afe:	bf 00 00 00 00       	mov    $0x0,%edi
   17b03:	e8 a1 4e ff ff       	callq  c9a9 <uxTaskPriorityGet>
   17b08:	48 85 c0             	test   %rax,%rax
   17b0b:	74 0b                	je     17b18 <prvTakeTwoMutexesReturnInSameOrder+0x5a>
   17b0d:	48 c7 05 70 e6 11 00 	movq   $0x1,0x11e670(%rip)        # 136188 <xErrorDetected>
   17b14:	01 00 00 00 
   17b18:	48 8b 05 81 e6 11 00 	mov    0x11e681(%rip),%rax        # 1361a0 <xHighPriorityMutexTask>
   17b1f:	48 89 c7             	mov    %rax,%rdi
   17b22:	e8 58 54 ff ff       	callq  cf7f <vTaskResume>
   17b27:	48 8b 05 72 e6 11 00 	mov    0x11e672(%rip),%rax        # 1361a0 <xHighPriorityMutexTask>
   17b2e:	48 89 c7             	mov    %rax,%rdi
   17b31:	e8 52 4d ff ff       	callq  c888 <eTaskGetState>
   17b36:	83 f8 02             	cmp    $0x2,%eax
   17b39:	74 11                	je     17b4c <prvTakeTwoMutexesReturnInSameOrder+0x8e>
   17b3b:	be 30 03 00 00       	mov    $0x330,%esi
   17b40:	48 8d 3d 59 02 01 00 	lea    0x10259(%rip),%rdi        # 27da0 <uxMaxNumberOfExtraTasksRunning+0x1c0>
   17b47:	e8 c0 c1 fe ff       	callq  3d0c <vAssertCalled>
   17b4c:	bf 00 00 00 00       	mov    $0x0,%edi
   17b51:	e8 53 4e ff ff       	callq  c9a9 <uxTaskPriorityGet>
   17b56:	48 83 f8 03          	cmp    $0x3,%rax
   17b5a:	74 0b                	je     17b67 <prvTakeTwoMutexesReturnInSameOrder+0xa9>
   17b5c:	48 c7 05 21 e6 11 00 	movq   $0x1,0x11e621(%rip)        # 136188 <xErrorDetected>
   17b63:	01 00 00 00 
   17b67:	48 8b 05 3a e6 11 00 	mov    0x11e63a(%rip),%rax        # 1361a8 <xMediumPriorityMutexTask>
   17b6e:	48 89 c7             	mov    %rax,%rdi
   17b71:	e8 09 54 ff ff       	callq  cf7f <vTaskResume>
   17b76:	8b 05 1c e6 11 00    	mov    0x11e61c(%rip),%eax        # 136198 <ulGuardedVariable>
   17b7c:	85 c0                	test   %eax,%eax
   17b7e:	74 0b                	je     17b8b <prvTakeTwoMutexesReturnInSameOrder+0xcd>
   17b80:	48 c7 05 fd e5 11 00 	movq   $0x1,0x11e5fd(%rip)        # 136188 <xErrorDetected>
   17b87:	01 00 00 00 
   17b8b:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
   17b8f:	be 00 00 00 00       	mov    $0x0,%esi
   17b94:	48 89 c7             	mov    %rax,%rdi
   17b97:	e8 d8 f3 fe ff       	callq  6f74 <xQueueSemaphoreTake>
   17b9c:	48 83 f8 01          	cmp    $0x1,%rax
   17ba0:	74 0b                	je     17bad <prvTakeTwoMutexesReturnInSameOrder+0xef>
   17ba2:	48 c7 05 db e5 11 00 	movq   $0x1,0x11e5db(%rip)        # 136188 <xErrorDetected>
   17ba9:	01 00 00 00 
   17bad:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
   17bb1:	b9 00 00 00 00       	mov    $0x0,%ecx
   17bb6:	ba 00 00 00 00       	mov    $0x0,%edx
   17bbb:	be 00 00 00 00       	mov    $0x0,%esi
   17bc0:	48 89 c7             	mov    %rax,%rdi
   17bc3:	e8 cf e1 fe ff       	callq  5d97 <xQueueGenericSend>
   17bc8:	48 83 f8 01          	cmp    $0x1,%rax
   17bcc:	74 0b                	je     17bd9 <prvTakeTwoMutexesReturnInSameOrder+0x11b>
   17bce:	48 c7 05 af e5 11 00 	movq   $0x1,0x11e5af(%rip)        # 136188 <xErrorDetected>
   17bd5:	01 00 00 00 
   17bd9:	8b 05 b9 e5 11 00    	mov    0x11e5b9(%rip),%eax        # 136198 <ulGuardedVariable>
   17bdf:	85 c0                	test   %eax,%eax
   17be1:	74 0b                	je     17bee <prvTakeTwoMutexesReturnInSameOrder+0x130>
   17be3:	48 c7 05 9a e5 11 00 	movq   $0x1,0x11e59a(%rip)        # 136188 <xErrorDetected>
   17bea:	01 00 00 00 
   17bee:	bf 00 00 00 00       	mov    $0x0,%edi
   17bf3:	e8 b1 4d ff ff       	callq  c9a9 <uxTaskPriorityGet>
   17bf8:	48 83 f8 03          	cmp    $0x3,%rax
   17bfc:	74 0b                	je     17c09 <prvTakeTwoMutexesReturnInSameOrder+0x14b>
   17bfe:	48 c7 05 7f e5 11 00 	movq   $0x1,0x11e57f(%rip)        # 136188 <xErrorDetected>
   17c05:	01 00 00 00 
   17c09:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   17c0d:	b9 00 00 00 00       	mov    $0x0,%ecx
   17c12:	ba 00 00 00 00       	mov    $0x0,%edx
   17c17:	be 00 00 00 00       	mov    $0x0,%esi
   17c1c:	48 89 c7             	mov    %rax,%rdi
   17c1f:	e8 73 e1 fe ff       	callq  5d97 <xQueueGenericSend>
   17c24:	48 83 f8 01          	cmp    $0x1,%rax
   17c28:	74 0b                	je     17c35 <prvTakeTwoMutexesReturnInSameOrder+0x177>
   17c2a:	48 c7 05 53 e5 11 00 	movq   $0x1,0x11e553(%rip)        # 136188 <xErrorDetected>
   17c31:	01 00 00 00 
   17c35:	8b 05 5d e5 11 00    	mov    0x11e55d(%rip),%eax        # 136198 <ulGuardedVariable>
   17c3b:	83 f8 01             	cmp    $0x1,%eax
   17c3e:	74 0b                	je     17c4b <prvTakeTwoMutexesReturnInSameOrder+0x18d>
   17c40:	48 c7 05 3d e5 11 00 	movq   $0x1,0x11e53d(%rip)        # 136188 <xErrorDetected>
   17c47:	01 00 00 00 
   17c4b:	bf 00 00 00 00       	mov    $0x0,%edi
   17c50:	e8 54 4d ff ff       	callq  c9a9 <uxTaskPriorityGet>
   17c55:	48 85 c0             	test   %rax,%rax
   17c58:	74 0b                	je     17c65 <prvTakeTwoMutexesReturnInSameOrder+0x1a7>
   17c5a:	48 c7 05 23 e5 11 00 	movq   $0x1,0x11e523(%rip)        # 136188 <xErrorDetected>
   17c61:	01 00 00 00 
   17c65:	90                   	nop
   17c66:	c9                   	leaveq 
   17c67:	c3                   	retq   

0000000000017c68 <prvLowPriorityMutexTask>:
   17c68:	f3 0f 1e fa          	endbr64 
   17c6c:	55                   	push   %rbp
   17c6d:	48 89 e5             	mov    %rsp,%rbp
   17c70:	48 83 ec 20          	sub    $0x20,%rsp
   17c74:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
   17c78:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
   17c7c:	48 89 45 f0          	mov    %rax,-0x10(%rbp)
   17c80:	bf 01 00 00 00       	mov    $0x1,%edi
   17c85:	e8 d3 dc fe ff       	callq  595d <xQueueCreateMutex>
   17c8a:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
   17c8e:	48 83 7d f8 00       	cmpq   $0x0,-0x8(%rbp)
   17c93:	75 11                	jne    17ca6 <prvLowPriorityMutexTask+0x3e>
   17c95:	be 96 03 00 00       	mov    $0x396,%esi
   17c9a:	48 8d 3d ff 00 01 00 	lea    0x100ff(%rip),%rdi        # 27da0 <uxMaxNumberOfExtraTasksRunning+0x1c0>
   17ca1:	e8 66 c0 fe ff       	callq  3d0c <vAssertCalled>
   17ca6:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
   17caa:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
   17cae:	48 89 d6             	mov    %rdx,%rsi
   17cb1:	48 89 c7             	mov    %rax,%rdi
   17cb4:	e8 21 fc ff ff       	callq  178da <prvTakeTwoMutexesReturnInDifferentOrder>
   17cb9:	8b 05 d5 e4 11 00    	mov    0x11e4d5(%rip),%eax        # 136194 <ulLoopCounter2>
   17cbf:	83 c0 01             	add    $0x1,%eax
   17cc2:	89 05 cc e4 11 00    	mov    %eax,0x11e4cc(%rip)        # 136194 <ulLoopCounter2>
   17cc8:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
   17ccc:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
   17cd0:	48 89 d6             	mov    %rdx,%rsi
   17cd3:	48 89 c7             	mov    %rax,%rdi
   17cd6:	e8 e3 fd ff ff       	callq  17abe <prvTakeTwoMutexesReturnInSameOrder>
   17cdb:	8b 05 b3 e4 11 00    	mov    0x11e4b3(%rip),%eax        # 136194 <ulLoopCounter2>
   17ce1:	83 c0 01             	add    $0x1,%eax
   17ce4:	89 05 aa e4 11 00    	mov    %eax,0x11e4aa(%rip)        # 136194 <ulLoopCounter2>
   17cea:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
   17cee:	48 89 c7             	mov    %rax,%rdi
   17cf1:	e8 7d f8 ff ff       	callq  17573 <prvHighPriorityTimeout>
   17cf6:	eb ae                	jmp    17ca6 <prvLowPriorityMutexTask+0x3e>

0000000000017cf8 <prvMediumPriorityMutexTask>:
   17cf8:	f3 0f 1e fa          	endbr64 
   17cfc:	55                   	push   %rbp
   17cfd:	48 89 e5             	mov    %rsp,%rbp
   17d00:	48 83 ec 10          	sub    $0x10,%rsp
   17d04:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   17d08:	bf 00 00 00 00       	mov    $0x0,%edi
   17d0d:	e8 4f 50 ff ff       	callq  cd61 <vTaskSuspend>
   17d12:	8b 05 80 e4 11 00    	mov    0x11e480(%rip),%eax        # 136198 <ulGuardedVariable>
   17d18:	83 c0 01             	add    $0x1,%eax
   17d1b:	89 05 77 e4 11 00    	mov    %eax,0x11e477(%rip)        # 136198 <ulGuardedVariable>
   17d21:	eb e5                	jmp    17d08 <prvMediumPriorityMutexTask+0x10>

0000000000017d23 <prvHighPriorityMutexTask>:
   17d23:	f3 0f 1e fa          	endbr64 
   17d27:	55                   	push   %rbp
   17d28:	48 89 e5             	mov    %rsp,%rbp
   17d2b:	48 83 ec 20          	sub    $0x20,%rsp
   17d2f:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
   17d33:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
   17d37:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
   17d3b:	bf 00 00 00 00       	mov    $0x0,%edi
   17d40:	e8 1c 50 ff ff       	callq  cd61 <vTaskSuspend>
   17d45:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   17d49:	48 c7 c6 ff ff ff ff 	mov    $0xffffffffffffffff,%rsi
   17d50:	48 89 c7             	mov    %rax,%rdi
   17d53:	e8 1c f2 fe ff       	callq  6f74 <xQueueSemaphoreTake>
   17d58:	48 83 f8 01          	cmp    $0x1,%rax
   17d5c:	74 26                	je     17d84 <prvHighPriorityMutexTask+0x61>
   17d5e:	48 8b 05 53 e4 11 00 	mov    0x11e453(%rip),%rax        # 1361b8 <xBlockWasAborted>
   17d65:	48 85 c0             	test   %rax,%rax
   17d68:	75 0d                	jne    17d77 <prvHighPriorityMutexTask+0x54>
   17d6a:	48 c7 05 13 e4 11 00 	movq   $0x1,0x11e413(%rip)        # 136188 <xErrorDetected>
   17d71:	01 00 00 00 
   17d75:	eb c4                	jmp    17d3b <prvHighPriorityMutexTask+0x18>
   17d77:	48 c7 05 36 e4 11 00 	movq   $0x0,0x11e436(%rip)        # 1361b8 <xBlockWasAborted>
   17d7e:	00 00 00 00 
   17d82:	eb b7                	jmp    17d3b <prvHighPriorityMutexTask+0x18>
   17d84:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   17d88:	b9 00 00 00 00       	mov    $0x0,%ecx
   17d8d:	ba 00 00 00 00       	mov    $0x0,%edx
   17d92:	be 00 00 00 00       	mov    $0x0,%esi
   17d97:	48 89 c7             	mov    %rax,%rdi
   17d9a:	e8 f8 df fe ff       	callq  5d97 <xQueueGenericSend>
   17d9f:	48 83 f8 01          	cmp    $0x1,%rax
   17da3:	74 96                	je     17d3b <prvHighPriorityMutexTask+0x18>
   17da5:	48 c7 05 d8 e3 11 00 	movq   $0x1,0x11e3d8(%rip)        # 136188 <xErrorDetected>
   17dac:	01 00 00 00 
   17db0:	eb 89                	jmp    17d3b <prvHighPriorityMutexTask+0x18>

0000000000017db2 <xAreGenericQueueTasksStillRunning>:
   17db2:	f3 0f 1e fa          	endbr64 
   17db6:	55                   	push   %rbp
   17db7:	48 89 e5             	mov    %rsp,%rbp
   17dba:	8b 15 08 e4 11 00    	mov    0x11e408(%rip),%edx        # 1361c8 <ulLastLoopCounter.3516>
   17dc0:	8b 05 ca e3 11 00    	mov    0x11e3ca(%rip),%eax        # 136190 <ulLoopCounter>
   17dc6:	39 c2                	cmp    %eax,%edx
   17dc8:	75 0b                	jne    17dd5 <xAreGenericQueueTasksStillRunning+0x23>
   17dca:	48 c7 05 b3 e3 11 00 	movq   $0x1,0x11e3b3(%rip)        # 136188 <xErrorDetected>
   17dd1:	01 00 00 00 
   17dd5:	8b 15 f1 e3 11 00    	mov    0x11e3f1(%rip),%edx        # 1361cc <ulLastLoopCounter2.3517>
   17ddb:	8b 05 b3 e3 11 00    	mov    0x11e3b3(%rip),%eax        # 136194 <ulLoopCounter2>
   17de1:	39 c2                	cmp    %eax,%edx
   17de3:	75 0b                	jne    17df0 <xAreGenericQueueTasksStillRunning+0x3e>
   17de5:	48 c7 05 98 e3 11 00 	movq   $0x1,0x11e398(%rip)        # 136188 <xErrorDetected>
   17dec:	01 00 00 00 
   17df0:	8b 05 9a e3 11 00    	mov    0x11e39a(%rip),%eax        # 136190 <ulLoopCounter>
   17df6:	89 05 cc e3 11 00    	mov    %eax,0x11e3cc(%rip)        # 1361c8 <ulLastLoopCounter.3516>
   17dfc:	8b 05 92 e3 11 00    	mov    0x11e392(%rip),%eax        # 136194 <ulLoopCounter2>
   17e02:	89 05 c4 e3 11 00    	mov    %eax,0x11e3c4(%rip)        # 1361cc <ulLastLoopCounter2.3517>
   17e08:	48 8b 05 79 e3 11 00 	mov    0x11e379(%rip),%rax        # 136188 <xErrorDetected>
   17e0f:	48 85 c0             	test   %rax,%rax
   17e12:	0f 94 c0             	sete   %al
   17e15:	0f b6 c0             	movzbl %al,%eax
   17e18:	5d                   	pop    %rbp
   17e19:	c3                   	retq   

0000000000017e1a <vStartIntegerMathTasks>:
   17e1a:	f3 0f 1e fa          	endbr64 
   17e1e:	55                   	push   %rbp
   17e1f:	48 89 e5             	mov    %rsp,%rbp
   17e22:	48 83 ec 20          	sub    $0x20,%rsp
   17e26:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
   17e2a:	66 c7 45 fe 00 00    	movw   $0x0,-0x2(%rbp)
   17e30:	eb 4b                	jmp    17e7d <vStartIntegerMathTasks+0x63>
   17e32:	0f bf 45 fe          	movswl -0x2(%rbp),%eax
   17e36:	48 98                	cltq   
   17e38:	48 8d 14 c5 00 00 00 	lea    0x0(,%rax,8),%rdx
   17e3f:	00 
   17e40:	48 8d 05 89 e3 11 00 	lea    0x11e389(%rip),%rax        # 1361d0 <xTaskCheck>
   17e47:	48 01 d0             	add    %rdx,%rax
   17e4a:	48 8b 55 e8          	mov    -0x18(%rbp),%rdx
   17e4e:	41 b9 00 00 00 00    	mov    $0x0,%r9d
   17e54:	49 89 d0             	mov    %rdx,%r8
   17e57:	48 89 c1             	mov    %rax,%rcx
   17e5a:	ba 46 00 00 00       	mov    $0x46,%edx
   17e5f:	48 8d 35 7f ff 00 00 	lea    0xff7f(%rip),%rsi        # 27de5 <uxMaxNumberOfExtraTasksRunning+0x205>
   17e66:	48 8d 3d 1b 00 00 00 	lea    0x1b(%rip),%rdi        # 17e88 <vCompeteingIntMathTask>
   17e6d:	e8 85 3e ff ff       	callq  bcf7 <xTaskCreate>
   17e72:	0f b7 45 fe          	movzwl -0x2(%rbp),%eax
   17e76:	83 c0 01             	add    $0x1,%eax
   17e79:	66 89 45 fe          	mov    %ax,-0x2(%rbp)
   17e7d:	66 83 7d fe 00       	cmpw   $0x0,-0x2(%rbp)
   17e82:	7e ae                	jle    17e32 <vStartIntegerMathTasks+0x18>
   17e84:	90                   	nop
   17e85:	90                   	nop
   17e86:	c9                   	leaveq 
   17e87:	c3                   	retq   

0000000000017e88 <vCompeteingIntMathTask>:
   17e88:	f3 0f 1e fa          	endbr64 
   17e8c:	55                   	push   %rbp
   17e8d:	48 89 e5             	mov    %rsp,%rbp
   17e90:	48 83 ec 30          	sub    $0x30,%rsp
   17e94:	48 89 7d d8          	mov    %rdi,-0x28(%rbp)
   17e98:	66 c7 45 ee 00 00    	movw   $0x0,-0x12(%rbp)
   17e9e:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
   17ea2:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
   17ea6:	48 c7 45 f0 7b 00 00 	movq   $0x7b,-0x10(%rbp)
   17ead:	00 
   17eae:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
   17eb2:	48 05 47 94 03 00    	add    $0x39447,%rax
   17eb8:	48 89 45 f0          	mov    %rax,-0x10(%rbp)
   17ebc:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
   17ec0:	48 89 c2             	mov    %rax,%rdx
   17ec3:	48 c1 e0 02          	shl    $0x2,%rax
   17ec7:	48 29 c2             	sub    %rax,%rdx
   17eca:	48 89 d0             	mov    %rdx,%rax
   17ecd:	48 89 45 f0          	mov    %rax,-0x10(%rbp)
   17ed1:	48 8b 4d f0          	mov    -0x10(%rbp),%rcx
   17ed5:	48 ba 25 49 92 24 49 	movabs $0x4924924924924925,%rdx
   17edc:	92 24 49 
   17edf:	48 89 c8             	mov    %rcx,%rax
   17ee2:	48 f7 ea             	imul   %rdx
   17ee5:	48 d1 fa             	sar    %rdx
   17ee8:	48 89 c8             	mov    %rcx,%rax
   17eeb:	48 c1 f8 3f          	sar    $0x3f,%rax
   17eef:	48 29 c2             	sub    %rax,%rdx
   17ef2:	48 89 d0             	mov    %rdx,%rax
   17ef5:	48 89 45 f0          	mov    %rax,-0x10(%rbp)
   17ef9:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
   17efd:	48 3d 1b 77 fe ff    	cmp    $0xfffffffffffe771b,%rax
   17f03:	74 06                	je     17f0b <vCompeteingIntMathTask+0x83>
   17f05:	66 c7 45 ee 01 00    	movw   $0x1,-0x12(%rbp)
   17f0b:	66 83 7d ee 00       	cmpw   $0x0,-0x12(%rbp)
   17f10:	75 94                	jne    17ea6 <vCompeteingIntMathTask+0x1e>
   17f12:	e8 b8 ae ff ff       	callq  12dcf <vPortEnterCritical>
   17f17:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   17f1b:	48 c7 00 01 00 00 00 	movq   $0x1,(%rax)
   17f22:	e8 d6 ae ff ff       	callq  12dfd <vPortExitCritical>
   17f27:	e9 7a ff ff ff       	jmpq   17ea6 <vCompeteingIntMathTask+0x1e>

0000000000017f2c <xAreIntegerMathsTaskStillRunning>:
   17f2c:	f3 0f 1e fa          	endbr64 
   17f30:	55                   	push   %rbp
   17f31:	48 89 e5             	mov    %rsp,%rbp
   17f34:	48 c7 45 f8 01 00 00 	movq   $0x1,-0x8(%rbp)
   17f3b:	00 
   17f3c:	66 c7 45 f6 00 00    	movw   $0x0,-0xa(%rbp)
   17f42:	eb 4e                	jmp    17f92 <xAreIntegerMathsTaskStillRunning+0x66>
   17f44:	0f bf 45 f6          	movswl -0xa(%rbp),%eax
   17f48:	48 98                	cltq   
   17f4a:	48 8d 14 c5 00 00 00 	lea    0x0(,%rax,8),%rdx
   17f51:	00 
   17f52:	48 8d 05 77 e2 11 00 	lea    0x11e277(%rip),%rax        # 1361d0 <xTaskCheck>
   17f59:	48 8b 04 02          	mov    (%rdx,%rax,1),%rax
   17f5d:	48 85 c0             	test   %rax,%rax
   17f60:	75 08                	jne    17f6a <xAreIntegerMathsTaskStillRunning+0x3e>
   17f62:	48 c7 45 f8 00 00 00 	movq   $0x0,-0x8(%rbp)
   17f69:	00 
   17f6a:	0f bf 45 f6          	movswl -0xa(%rbp),%eax
   17f6e:	48 98                	cltq   
   17f70:	48 8d 14 c5 00 00 00 	lea    0x0(,%rax,8),%rdx
   17f77:	00 
   17f78:	48 8d 05 51 e2 11 00 	lea    0x11e251(%rip),%rax        # 1361d0 <xTaskCheck>
   17f7f:	48 c7 04 02 00 00 00 	movq   $0x0,(%rdx,%rax,1)
   17f86:	00 
   17f87:	0f b7 45 f6          	movzwl -0xa(%rbp),%eax
   17f8b:	83 c0 01             	add    $0x1,%eax
   17f8e:	66 89 45 f6          	mov    %ax,-0xa(%rbp)
   17f92:	66 83 7d f6 00       	cmpw   $0x0,-0xa(%rbp)
   17f97:	7e ab                	jle    17f44 <xAreIntegerMathsTaskStillRunning+0x18>
   17f99:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   17f9d:	5d                   	pop    %rbp
   17f9e:	c3                   	retq   

0000000000017f9f <vStartInterruptSemaphoreTasks>:
   17f9f:	f3 0f 1e fa          	endbr64 
   17fa3:	55                   	push   %rbp
   17fa4:	48 89 e5             	mov    %rsp,%rbp
   17fa7:	bf 01 00 00 00       	mov    $0x1,%edi
   17fac:	e8 ac d9 fe ff       	callq  595d <xQueueCreateMutex>
   17fb1:	48 89 05 38 e2 11 00 	mov    %rax,0x11e238(%rip)        # 1361f0 <xISRMutex>
   17fb8:	48 8b 05 31 e2 11 00 	mov    0x11e231(%rip),%rax        # 1361f0 <xISRMutex>
   17fbf:	48 85 c0             	test   %rax,%rax
   17fc2:	75 11                	jne    17fd5 <vStartInterruptSemaphoreTasks+0x36>
   17fc4:	be 87 00 00 00       	mov    $0x87,%esi
   17fc9:	48 8d 3d 28 fe 00 00 	lea    0xfe28(%rip),%rdi        # 27df8 <xInterruptGivePeriod+0x8>
   17fd0:	e8 37 bd fe ff       	callq  3d0c <vAssertCalled>
   17fd5:	be 00 00 00 00       	mov    $0x0,%esi
   17fda:	bf 03 00 00 00       	mov    $0x3,%edi
   17fdf:	e8 39 dd fe ff       	callq  5d1d <xQueueCreateCountingSemaphore>
   17fe4:	48 89 05 0d e2 11 00 	mov    %rax,0x11e20d(%rip)        # 1361f8 <xISRCountingSemaphore>
   17feb:	48 8b 05 06 e2 11 00 	mov    0x11e206(%rip),%rax        # 1361f8 <xISRCountingSemaphore>
   17ff2:	48 85 c0             	test   %rax,%rax
   17ff5:	75 11                	jne    18008 <vStartInterruptSemaphoreTasks+0x69>
   17ff7:	be 89 00 00 00       	mov    $0x89,%esi
   17ffc:	48 8d 3d f5 fd 00 00 	lea    0xfdf5(%rip),%rdi        # 27df8 <xInterruptGivePeriod+0x8>
   18003:	e8 04 bd fe ff       	callq  3d0c <vAssertCalled>
   18008:	bf 01 00 00 00       	mov    $0x1,%edi
   1800d:	e8 4b d9 fe ff       	callq  595d <xQueueCreateMutex>
   18012:	48 89 05 e7 e1 11 00 	mov    %rax,0x11e1e7(%rip)        # 136200 <xMasterSlaveMutex>
   18019:	48 8b 05 e0 e1 11 00 	mov    0x11e1e0(%rip),%rax        # 136200 <xMasterSlaveMutex>
   18020:	48 85 c0             	test   %rax,%rax
   18023:	75 11                	jne    18036 <vStartInterruptSemaphoreTasks+0x97>
   18025:	be 8f 00 00 00       	mov    $0x8f,%esi
   1802a:	48 8d 3d c7 fd 00 00 	lea    0xfdc7(%rip),%rdi        # 27df8 <xInterruptGivePeriod+0x8>
   18031:	e8 d6 bc fe ff       	callq  3d0c <vAssertCalled>
   18036:	4c 8d 0d ab e1 11 00 	lea    0x11e1ab(%rip),%r9        # 1361e8 <xSlaveHandle>
   1803d:	41 b8 01 00 00 00    	mov    $0x1,%r8d
   18043:	b9 00 00 00 00       	mov    $0x0,%ecx
   18048:	ba 46 00 00 00       	mov    $0x46,%edx
   1804d:	48 8d 35 eb fd 00 00 	lea    0xfdeb(%rip),%rsi        # 27e3f <xInterruptGivePeriod+0x4f>
   18054:	48 8d 3d 99 04 00 00 	lea    0x499(%rip),%rdi        # 184f4 <vInterruptMutexSlaveTask>
   1805b:	e8 97 3c ff ff       	callq  bcf7 <xTaskCreate>
   18060:	41 b9 00 00 00 00    	mov    $0x0,%r9d
   18066:	41 b8 00 00 00 00    	mov    $0x0,%r8d
   1806c:	b9 00 00 00 00       	mov    $0x0,%ecx
   18071:	ba 46 00 00 00       	mov    $0x46,%edx
   18076:	48 8d 35 c9 fd 00 00 	lea    0xfdc9(%rip),%rsi        # 27e46 <xInterruptGivePeriod+0x56>
   1807d:	48 8d 3d 31 00 00 00 	lea    0x31(%rip),%rdi        # 180b5 <vInterruptMutexMasterTask>
   18084:	e8 6e 3c ff ff       	callq  bcf7 <xTaskCreate>
   18089:	41 b9 00 00 00 00    	mov    $0x0,%r9d
   1808f:	41 b8 00 00 00 00    	mov    $0x0,%r8d
   18095:	b9 00 00 00 00       	mov    $0x0,%ecx
   1809a:	ba 46 00 00 00       	mov    $0x46,%edx
   1809f:	48 8d 35 a7 fd 00 00 	lea    0xfda7(%rip),%rsi        # 27e4d <xInterruptGivePeriod+0x5d>
   180a6:	48 8d 3d b9 04 00 00 	lea    0x4b9(%rip),%rdi        # 18566 <vInterruptCountingSemaphoreTask>
   180ad:	e8 45 3c ff ff       	callq  bcf7 <xTaskCreate>
   180b2:	90                   	nop
   180b3:	5d                   	pop    %rbp
   180b4:	c3                   	retq   

00000000000180b5 <vInterruptMutexMasterTask>:
   180b5:	f3 0f 1e fa          	endbr64 
   180b9:	55                   	push   %rbp
   180ba:	48 89 e5             	mov    %rsp,%rbp
   180bd:	48 83 ec 10          	sub    $0x10,%rsp
   180c1:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   180c5:	e8 39 00 00 00       	callq  18103 <prvTakeAndGiveInTheSameOrder>
   180ca:	8b 05 10 e1 11 00    	mov    0x11e110(%rip),%eax        # 1361e0 <ulMasterLoops>
   180d0:	83 c0 01             	add    $0x1,%eax
   180d3:	89 05 07 e1 11 00    	mov    %eax,0x11e107(%rip)        # 1361e0 <ulMasterLoops>
   180d9:	bf 64 00 00 00       	mov    $0x64,%edi
   180de:	e8 bf 46 ff ff       	callq  c7a2 <vTaskDelay>
   180e3:	e8 26 02 00 00       	callq  1830e <prvTakeAndGiveInTheOppositeOrder>
   180e8:	8b 05 f2 e0 11 00    	mov    0x11e0f2(%rip),%eax        # 1361e0 <ulMasterLoops>
   180ee:	83 c0 01             	add    $0x1,%eax
   180f1:	89 05 e9 e0 11 00    	mov    %eax,0x11e0e9(%rip)        # 1361e0 <ulMasterLoops>
   180f7:	bf 64 00 00 00       	mov    $0x64,%edi
   180fc:	e8 a1 46 ff ff       	callq  c7a2 <vTaskDelay>
   18101:	eb c2                	jmp    180c5 <vInterruptMutexMasterTask+0x10>

0000000000018103 <prvTakeAndGiveInTheSameOrder>:
   18103:	f3 0f 1e fa          	endbr64 
   18107:	55                   	push   %rbp
   18108:	48 89 e5             	mov    %rsp,%rbp
   1810b:	48 8b 05 d6 e0 11 00 	mov    0x11e0d6(%rip),%rax        # 1361e8 <xSlaveHandle>
   18112:	48 89 c7             	mov    %rax,%rdi
   18115:	e8 6e 47 ff ff       	callq  c888 <eTaskGetState>
   1811a:	83 f8 03             	cmp    $0x3,%eax
   1811d:	74 11                	je     18130 <prvTakeAndGiveInTheSameOrder+0x2d>
   1811f:	be b6 00 00 00       	mov    $0xb6,%esi
   18124:	48 8d 3d cd fc 00 00 	lea    0xfccd(%rip),%rdi        # 27df8 <xInterruptGivePeriod+0x8>
   1812b:	e8 dc bb fe ff       	callq  3d0c <vAssertCalled>
   18130:	bf 00 00 00 00       	mov    $0x0,%edi
   18135:	e8 6f 48 ff ff       	callq  c9a9 <uxTaskPriorityGet>
   1813a:	48 85 c0             	test   %rax,%rax
   1813d:	74 0b                	je     1814a <prvTakeAndGiveInTheSameOrder+0x47>
   1813f:	48 c7 05 8e e0 11 00 	movq   $0x1,0x11e08e(%rip)        # 1361d8 <xErrorDetected>
   18146:	01 00 00 00 
   1814a:	48 8b 05 af e0 11 00 	mov    0x11e0af(%rip),%rax        # 136200 <xMasterSlaveMutex>
   18151:	be 00 00 00 00       	mov    $0x0,%esi
   18156:	48 89 c7             	mov    %rax,%rdi
   18159:	e8 16 ee fe ff       	callq  6f74 <xQueueSemaphoreTake>
   1815e:	48 83 f8 01          	cmp    $0x1,%rax
   18162:	74 0b                	je     1816f <prvTakeAndGiveInTheSameOrder+0x6c>
   18164:	48 c7 05 69 e0 11 00 	movq   $0x1,0x11e069(%rip)        # 1361d8 <xErrorDetected>
   1816b:	01 00 00 00 
   1816f:	48 8b 05 72 e0 11 00 	mov    0x11e072(%rip),%rax        # 1361e8 <xSlaveHandle>
   18176:	48 89 c7             	mov    %rax,%rdi
   18179:	e8 01 4e ff ff       	callq  cf7f <vTaskResume>
   1817e:	48 8b 05 63 e0 11 00 	mov    0x11e063(%rip),%rax        # 1361e8 <xSlaveHandle>
   18185:	48 89 c7             	mov    %rax,%rdi
   18188:	e8 fb 46 ff ff       	callq  c888 <eTaskGetState>
   1818d:	83 f8 02             	cmp    $0x2,%eax
   18190:	74 11                	je     181a3 <prvTakeAndGiveInTheSameOrder+0xa0>
   18192:	be cd 00 00 00       	mov    $0xcd,%esi
   18197:	48 8d 3d 5a fc 00 00 	lea    0xfc5a(%rip),%rdi        # 27df8 <xInterruptGivePeriod+0x8>
   1819e:	e8 69 bb fe ff       	callq  3d0c <vAssertCalled>
   181a3:	bf 00 00 00 00       	mov    $0x0,%edi
   181a8:	e8 fc 47 ff ff       	callq  c9a9 <uxTaskPriorityGet>
   181ad:	48 83 f8 01          	cmp    $0x1,%rax
   181b1:	74 0b                	je     181be <prvTakeAndGiveInTheSameOrder+0xbb>
   181b3:	48 c7 05 1a e0 11 00 	movq   $0x1,0x11e01a(%rip)        # 1361d8 <xErrorDetected>
   181ba:	01 00 00 00 
   181be:	48 c7 05 3f e0 11 00 	movq   $0x1,0x11e03f(%rip)        # 136208 <xOkToGiveMutex>
   181c5:	01 00 00 00 
   181c9:	b8 64 00 00 00       	mov    $0x64,%eax
   181ce:	48 8d 14 00          	lea    (%rax,%rax,1),%rdx
   181d2:	48 8b 05 17 e0 11 00 	mov    0x11e017(%rip),%rax        # 1361f0 <xISRMutex>
   181d9:	48 89 d6             	mov    %rdx,%rsi
   181dc:	48 89 c7             	mov    %rax,%rdi
   181df:	e8 90 ed fe ff       	callq  6f74 <xQueueSemaphoreTake>
   181e4:	48 83 f8 01          	cmp    $0x1,%rax
   181e8:	74 0b                	je     181f5 <prvTakeAndGiveInTheSameOrder+0xf2>
   181ea:	48 c7 05 e3 df 11 00 	movq   $0x1,0x11dfe3(%rip)        # 1361d8 <xErrorDetected>
   181f1:	01 00 00 00 
   181f5:	48 c7 05 08 e0 11 00 	movq   $0x0,0x11e008(%rip)        # 136208 <xOkToGiveMutex>
   181fc:	00 00 00 00 
   18200:	48 8b 05 e9 df 11 00 	mov    0x11dfe9(%rip),%rax        # 1361f0 <xISRMutex>
   18207:	be 00 00 00 00       	mov    $0x0,%esi
   1820c:	48 89 c7             	mov    %rax,%rdi
   1820f:	e8 60 ed fe ff       	callq  6f74 <xQueueSemaphoreTake>
   18214:	48 85 c0             	test   %rax,%rax
   18217:	74 0b                	je     18224 <prvTakeAndGiveInTheSameOrder+0x121>
   18219:	48 c7 05 b4 df 11 00 	movq   $0x1,0x11dfb4(%rip)        # 1361d8 <xErrorDetected>
   18220:	01 00 00 00 
   18224:	bf 00 00 00 00       	mov    $0x0,%edi
   18229:	e8 7b 47 ff ff       	callq  c9a9 <uxTaskPriorityGet>
   1822e:	48 83 f8 01          	cmp    $0x1,%rax
   18232:	74 0b                	je     1823f <prvTakeAndGiveInTheSameOrder+0x13c>
   18234:	48 c7 05 99 df 11 00 	movq   $0x1,0x11df99(%rip)        # 1361d8 <xErrorDetected>
   1823b:	01 00 00 00 
   1823f:	48 8b 05 aa df 11 00 	mov    0x11dfaa(%rip),%rax        # 1361f0 <xISRMutex>
   18246:	b9 00 00 00 00       	mov    $0x0,%ecx
   1824b:	ba 00 00 00 00       	mov    $0x0,%edx
   18250:	be 00 00 00 00       	mov    $0x0,%esi
   18255:	48 89 c7             	mov    %rax,%rdi
   18258:	e8 3a db fe ff       	callq  5d97 <xQueueGenericSend>
   1825d:	48 83 f8 01          	cmp    $0x1,%rax
   18261:	74 0b                	je     1826e <prvTakeAndGiveInTheSameOrder+0x16b>
   18263:	48 c7 05 6a df 11 00 	movq   $0x1,0x11df6a(%rip)        # 1361d8 <xErrorDetected>
   1826a:	01 00 00 00 
   1826e:	bf 00 00 00 00       	mov    $0x0,%edi
   18273:	e8 31 47 ff ff       	callq  c9a9 <uxTaskPriorityGet>
   18278:	48 83 f8 01          	cmp    $0x1,%rax
   1827c:	74 0b                	je     18289 <prvTakeAndGiveInTheSameOrder+0x186>
   1827e:	48 c7 05 4f df 11 00 	movq   $0x1,0x11df4f(%rip)        # 1361d8 <xErrorDetected>
   18285:	01 00 00 00 
   18289:	48 8b 05 70 df 11 00 	mov    0x11df70(%rip),%rax        # 136200 <xMasterSlaveMutex>
   18290:	b9 00 00 00 00       	mov    $0x0,%ecx
   18295:	ba 00 00 00 00       	mov    $0x0,%edx
   1829a:	be 00 00 00 00       	mov    $0x0,%esi
   1829f:	48 89 c7             	mov    %rax,%rdi
   182a2:	e8 f0 da fe ff       	callq  5d97 <xQueueGenericSend>
   182a7:	48 83 f8 01          	cmp    $0x1,%rax
   182ab:	74 0b                	je     182b8 <prvTakeAndGiveInTheSameOrder+0x1b5>
   182ad:	48 c7 05 20 df 11 00 	movq   $0x1,0x11df20(%rip)        # 1361d8 <xErrorDetected>
   182b4:	01 00 00 00 
   182b8:	bf 00 00 00 00       	mov    $0x0,%edi
   182bd:	e8 e7 46 ff ff       	callq  c9a9 <uxTaskPriorityGet>
   182c2:	48 85 c0             	test   %rax,%rax
   182c5:	74 0b                	je     182d2 <prvTakeAndGiveInTheSameOrder+0x1cf>
   182c7:	48 c7 05 06 df 11 00 	movq   $0x1,0x11df06(%rip)        # 1361d8 <xErrorDetected>
   182ce:	01 00 00 00 
   182d2:	48 8b 05 0f df 11 00 	mov    0x11df0f(%rip),%rax        # 1361e8 <xSlaveHandle>
   182d9:	48 89 c7             	mov    %rax,%rdi
   182dc:	e8 a7 45 ff ff       	callq  c888 <eTaskGetState>
   182e1:	83 f8 03             	cmp    $0x3,%eax
   182e4:	74 11                	je     182f7 <prvTakeAndGiveInTheSameOrder+0x1f4>
   182e6:	be 0d 01 00 00       	mov    $0x10d,%esi
   182eb:	48 8d 3d 06 fb 00 00 	lea    0xfb06(%rip),%rdi        # 27df8 <xInterruptGivePeriod+0x8>
   182f2:	e8 15 ba fe ff       	callq  3d0c <vAssertCalled>
   182f7:	48 8b 05 f2 de 11 00 	mov    0x11def2(%rip),%rax        # 1361f0 <xISRMutex>
   182fe:	be 00 00 00 00       	mov    $0x0,%esi
   18303:	48 89 c7             	mov    %rax,%rdi
   18306:	e8 6e d0 fe ff       	callq  5379 <xQueueGenericReset>
   1830b:	90                   	nop
   1830c:	5d                   	pop    %rbp
   1830d:	c3                   	retq   

000000000001830e <prvTakeAndGiveInTheOppositeOrder>:
   1830e:	f3 0f 1e fa          	endbr64 
   18312:	55                   	push   %rbp
   18313:	48 89 e5             	mov    %rsp,%rbp
   18316:	48 8b 05 cb de 11 00 	mov    0x11decb(%rip),%rax        # 1361e8 <xSlaveHandle>
   1831d:	48 89 c7             	mov    %rax,%rdi
   18320:	e8 63 45 ff ff       	callq  c888 <eTaskGetState>
   18325:	83 f8 03             	cmp    $0x3,%eax
   18328:	74 11                	je     1833b <prvTakeAndGiveInTheOppositeOrder+0x2d>
   1832a:	be 1c 01 00 00       	mov    $0x11c,%esi
   1832f:	48 8d 3d c2 fa 00 00 	lea    0xfac2(%rip),%rdi        # 27df8 <xInterruptGivePeriod+0x8>
   18336:	e8 d1 b9 fe ff       	callq  3d0c <vAssertCalled>
   1833b:	bf 00 00 00 00       	mov    $0x0,%edi
   18340:	e8 64 46 ff ff       	callq  c9a9 <uxTaskPriorityGet>
   18345:	48 85 c0             	test   %rax,%rax
   18348:	74 0b                	je     18355 <prvTakeAndGiveInTheOppositeOrder+0x47>
   1834a:	48 c7 05 83 de 11 00 	movq   $0x1,0x11de83(%rip)        # 1361d8 <xErrorDetected>
   18351:	01 00 00 00 
   18355:	48 8b 05 a4 de 11 00 	mov    0x11dea4(%rip),%rax        # 136200 <xMasterSlaveMutex>
   1835c:	be 00 00 00 00       	mov    $0x0,%esi
   18361:	48 89 c7             	mov    %rax,%rdi
   18364:	e8 0b ec fe ff       	callq  6f74 <xQueueSemaphoreTake>
   18369:	48 83 f8 01          	cmp    $0x1,%rax
   1836d:	74 0b                	je     1837a <prvTakeAndGiveInTheOppositeOrder+0x6c>
   1836f:	48 c7 05 5e de 11 00 	movq   $0x1,0x11de5e(%rip)        # 1361d8 <xErrorDetected>
   18376:	01 00 00 00 
   1837a:	48 8b 05 67 de 11 00 	mov    0x11de67(%rip),%rax        # 1361e8 <xSlaveHandle>
   18381:	48 89 c7             	mov    %rax,%rdi
   18384:	e8 f6 4b ff ff       	callq  cf7f <vTaskResume>
   18389:	48 8b 05 58 de 11 00 	mov    0x11de58(%rip),%rax        # 1361e8 <xSlaveHandle>
   18390:	48 89 c7             	mov    %rax,%rdi
   18393:	e8 f0 44 ff ff       	callq  c888 <eTaskGetState>
   18398:	83 f8 02             	cmp    $0x2,%eax
   1839b:	74 11                	je     183ae <prvTakeAndGiveInTheOppositeOrder+0xa0>
   1839d:	be 33 01 00 00       	mov    $0x133,%esi
   183a2:	48 8d 3d 4f fa 00 00 	lea    0xfa4f(%rip),%rdi        # 27df8 <xInterruptGivePeriod+0x8>
   183a9:	e8 5e b9 fe ff       	callq  3d0c <vAssertCalled>
   183ae:	bf 00 00 00 00       	mov    $0x0,%edi
   183b3:	e8 f1 45 ff ff       	callq  c9a9 <uxTaskPriorityGet>
   183b8:	48 83 f8 01          	cmp    $0x1,%rax
   183bc:	74 0b                	je     183c9 <prvTakeAndGiveInTheOppositeOrder+0xbb>
   183be:	48 c7 05 0f de 11 00 	movq   $0x1,0x11de0f(%rip)        # 1361d8 <xErrorDetected>
   183c5:	01 00 00 00 
   183c9:	48 c7 05 34 de 11 00 	movq   $0x1,0x11de34(%rip)        # 136208 <xOkToGiveMutex>
   183d0:	01 00 00 00 
   183d4:	b8 64 00 00 00       	mov    $0x64,%eax
   183d9:	48 8d 14 00          	lea    (%rax,%rax,1),%rdx
   183dd:	48 8b 05 0c de 11 00 	mov    0x11de0c(%rip),%rax        # 1361f0 <xISRMutex>
   183e4:	48 89 d6             	mov    %rdx,%rsi
   183e7:	48 89 c7             	mov    %rax,%rdi
   183ea:	e8 85 eb fe ff       	callq  6f74 <xQueueSemaphoreTake>
   183ef:	48 83 f8 01          	cmp    $0x1,%rax
   183f3:	74 0b                	je     18400 <prvTakeAndGiveInTheOppositeOrder+0xf2>
   183f5:	48 c7 05 d8 dd 11 00 	movq   $0x1,0x11ddd8(%rip)        # 1361d8 <xErrorDetected>
   183fc:	01 00 00 00 
   18400:	48 c7 05 fd dd 11 00 	movq   $0x0,0x11ddfd(%rip)        # 136208 <xOkToGiveMutex>
   18407:	00 00 00 00 
   1840b:	48 8b 05 de dd 11 00 	mov    0x11ddde(%rip),%rax        # 1361f0 <xISRMutex>
   18412:	be 00 00 00 00       	mov    $0x0,%esi
   18417:	48 89 c7             	mov    %rax,%rdi
   1841a:	e8 55 eb fe ff       	callq  6f74 <xQueueSemaphoreTake>
   1841f:	48 85 c0             	test   %rax,%rax
   18422:	74 0b                	je     1842f <prvTakeAndGiveInTheOppositeOrder+0x121>
   18424:	48 c7 05 a9 dd 11 00 	movq   $0x1,0x11dda9(%rip)        # 1361d8 <xErrorDetected>
   1842b:	01 00 00 00 
   1842f:	bf 00 00 00 00       	mov    $0x0,%edi
   18434:	e8 70 45 ff ff       	callq  c9a9 <uxTaskPriorityGet>
   18439:	48 83 f8 01          	cmp    $0x1,%rax
   1843d:	74 0b                	je     1844a <prvTakeAndGiveInTheOppositeOrder+0x13c>
   1843f:	48 c7 05 8e dd 11 00 	movq   $0x1,0x11dd8e(%rip)        # 1361d8 <xErrorDetected>
   18446:	01 00 00 00 
   1844a:	48 8b 05 af dd 11 00 	mov    0x11ddaf(%rip),%rax        # 136200 <xMasterSlaveMutex>
   18451:	b9 00 00 00 00       	mov    $0x0,%ecx
   18456:	ba 00 00 00 00       	mov    $0x0,%edx
   1845b:	be 00 00 00 00       	mov    $0x0,%esi
   18460:	48 89 c7             	mov    %rax,%rdi
   18463:	e8 2f d9 fe ff       	callq  5d97 <xQueueGenericSend>
   18468:	48 83 f8 01          	cmp    $0x1,%rax
   1846c:	74 0b                	je     18479 <prvTakeAndGiveInTheOppositeOrder+0x16b>
   1846e:	48 c7 05 5f dd 11 00 	movq   $0x1,0x11dd5f(%rip)        # 1361d8 <xErrorDetected>
   18475:	01 00 00 00 
   18479:	bf 00 00 00 00       	mov    $0x0,%edi
   1847e:	e8 26 45 ff ff       	callq  c9a9 <uxTaskPriorityGet>
   18483:	48 83 f8 01          	cmp    $0x1,%rax
   18487:	74 0b                	je     18494 <prvTakeAndGiveInTheOppositeOrder+0x186>
   18489:	48 c7 05 44 dd 11 00 	movq   $0x1,0x11dd44(%rip)        # 1361d8 <xErrorDetected>
   18490:	01 00 00 00 
   18494:	48 8b 05 55 dd 11 00 	mov    0x11dd55(%rip),%rax        # 1361f0 <xISRMutex>
   1849b:	b9 00 00 00 00       	mov    $0x0,%ecx
   184a0:	ba 00 00 00 00       	mov    $0x0,%edx
   184a5:	be 00 00 00 00       	mov    $0x0,%esi
   184aa:	48 89 c7             	mov    %rax,%rdi
   184ad:	e8 e5 d8 fe ff       	callq  5d97 <xQueueGenericSend>
   184b2:	48 83 f8 01          	cmp    $0x1,%rax
   184b6:	74 0b                	je     184c3 <prvTakeAndGiveInTheOppositeOrder+0x1b5>
   184b8:	48 c7 05 15 dd 11 00 	movq   $0x1,0x11dd15(%rip)        # 1361d8 <xErrorDetected>
   184bf:	01 00 00 00 
   184c3:	bf 00 00 00 00       	mov    $0x0,%edi
   184c8:	e8 dc 44 ff ff       	callq  c9a9 <uxTaskPriorityGet>
   184cd:	48 85 c0             	test   %rax,%rax
   184d0:	74 0b                	je     184dd <prvTakeAndGiveInTheOppositeOrder+0x1cf>
   184d2:	48 c7 05 fb dc 11 00 	movq   $0x1,0x11dcfb(%rip)        # 1361d8 <xErrorDetected>
   184d9:	01 00 00 00 
   184dd:	48 8b 05 0c dd 11 00 	mov    0x11dd0c(%rip),%rax        # 1361f0 <xISRMutex>
   184e4:	be 00 00 00 00       	mov    $0x0,%esi
   184e9:	48 89 c7             	mov    %rax,%rdi
   184ec:	e8 88 ce fe ff       	callq  5379 <xQueueGenericReset>
   184f1:	90                   	nop
   184f2:	5d                   	pop    %rbp
   184f3:	c3                   	retq   

00000000000184f4 <vInterruptMutexSlaveTask>:
   184f4:	f3 0f 1e fa          	endbr64 
   184f8:	55                   	push   %rbp
   184f9:	48 89 e5             	mov    %rsp,%rbp
   184fc:	48 83 ec 10          	sub    $0x10,%rsp
   18500:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   18504:	bf 00 00 00 00       	mov    $0x0,%edi
   18509:	e8 53 48 ff ff       	callq  cd61 <vTaskSuspend>
   1850e:	48 8b 05 eb dc 11 00 	mov    0x11dceb(%rip),%rax        # 136200 <xMasterSlaveMutex>
   18515:	48 c7 c6 ff ff ff ff 	mov    $0xffffffffffffffff,%rsi
   1851c:	48 89 c7             	mov    %rax,%rdi
   1851f:	e8 50 ea fe ff       	callq  6f74 <xQueueSemaphoreTake>
   18524:	48 83 f8 01          	cmp    $0x1,%rax
   18528:	74 0b                	je     18535 <vInterruptMutexSlaveTask+0x41>
   1852a:	48 c7 05 a3 dc 11 00 	movq   $0x1,0x11dca3(%rip)        # 1361d8 <xErrorDetected>
   18531:	01 00 00 00 
   18535:	48 8b 05 c4 dc 11 00 	mov    0x11dcc4(%rip),%rax        # 136200 <xMasterSlaveMutex>
   1853c:	b9 00 00 00 00       	mov    $0x0,%ecx
   18541:	ba 00 00 00 00       	mov    $0x0,%edx
   18546:	be 00 00 00 00       	mov    $0x0,%esi
   1854b:	48 89 c7             	mov    %rax,%rdi
   1854e:	e8 44 d8 fe ff       	callq  5d97 <xQueueGenericSend>
   18553:	48 83 f8 01          	cmp    $0x1,%rax
   18557:	74 ab                	je     18504 <vInterruptMutexSlaveTask+0x10>
   18559:	48 c7 05 74 dc 11 00 	movq   $0x1,0x11dc74(%rip)        # 1361d8 <xErrorDetected>
   18560:	01 00 00 00 
   18564:	eb 9e                	jmp    18504 <vInterruptMutexSlaveTask+0x10>

0000000000018566 <vInterruptCountingSemaphoreTask>:
   18566:	f3 0f 1e fa          	endbr64 
   1856a:	55                   	push   %rbp
   1856b:	48 89 e5             	mov    %rsp,%rbp
   1856e:	48 83 ec 20          	sub    $0x20,%rsp
   18572:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
   18576:	48 c7 45 f8 90 01 00 	movq   $0x190,-0x8(%rbp)
   1857d:	00 
   1857e:	48 8b 05 73 dc 11 00 	mov    0x11dc73(%rip),%rax        # 1361f8 <xISRCountingSemaphore>
   18585:	48 89 c7             	mov    %rax,%rdi
   18588:	e8 81 f8 fe ff       	callq  7e0e <uxQueueMessagesWaiting>
   1858d:	48 85 c0             	test   %rax,%rax
   18590:	74 0b                	je     1859d <vInterruptCountingSemaphoreTask+0x37>
   18592:	48 c7 05 3b dc 11 00 	movq   $0x1,0x11dc3b(%rip)        # 1361d8 <xErrorDetected>
   18599:	01 00 00 00 
   1859d:	48 c7 05 68 dc 11 00 	movq   $0x1,0x11dc68(%rip)        # 136210 <xOkToGiveCountingSemaphore>
   185a4:	01 00 00 00 
   185a8:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   185ac:	48 89 c7             	mov    %rax,%rdi
   185af:	e8 ee 41 ff ff       	callq  c7a2 <vTaskDelay>
   185b4:	48 c7 05 51 dc 11 00 	movq   $0x0,0x11dc51(%rip)        # 136210 <xOkToGiveCountingSemaphore>
   185bb:	00 00 00 00 
   185bf:	48 8b 05 32 dc 11 00 	mov    0x11dc32(%rip),%rax        # 1361f8 <xISRCountingSemaphore>
   185c6:	48 89 c7             	mov    %rax,%rdi
   185c9:	e8 40 f8 fe ff       	callq  7e0e <uxQueueMessagesWaiting>
   185ce:	48 83 f8 03          	cmp    $0x3,%rax
   185d2:	74 0b                	je     185df <vInterruptCountingSemaphoreTask+0x79>
   185d4:	48 c7 05 f9 db 11 00 	movq   $0x1,0x11dbf9(%rip)        # 1361d8 <xErrorDetected>
   185db:	01 00 00 00 
   185df:	48 8b 05 12 dc 11 00 	mov    0x11dc12(%rip),%rax        # 1361f8 <xISRCountingSemaphore>
   185e6:	48 89 c7             	mov    %rax,%rdi
   185e9:	e8 64 f8 fe ff       	callq  7e52 <uxQueueSpacesAvailable>
   185ee:	48 85 c0             	test   %rax,%rax
   185f1:	74 0b                	je     185fe <vInterruptCountingSemaphoreTask+0x98>
   185f3:	48 c7 05 da db 11 00 	movq   $0x1,0x11dbda(%rip)        # 1361d8 <xErrorDetected>
   185fa:	01 00 00 00 
   185fe:	8b 05 e0 db 11 00    	mov    0x11dbe0(%rip),%eax        # 1361e4 <ulCountingSemaphoreLoops>
   18604:	83 c0 01             	add    $0x1,%eax
   18607:	89 05 d7 db 11 00    	mov    %eax,0x11dbd7(%rip)        # 1361e4 <ulCountingSemaphoreLoops>
   1860d:	48 c7 45 f0 00 00 00 	movq   $0x0,-0x10(%rbp)
   18614:	00 
   18615:	eb 05                	jmp    1861c <vInterruptCountingSemaphoreTask+0xb6>
   18617:	48 83 45 f0 01       	addq   $0x1,-0x10(%rbp)
   1861c:	48 8b 05 d5 db 11 00 	mov    0x11dbd5(%rip),%rax        # 1361f8 <xISRCountingSemaphore>
   18623:	be 00 00 00 00       	mov    $0x0,%esi
   18628:	48 89 c7             	mov    %rax,%rdi
   1862b:	e8 44 e9 fe ff       	callq  6f74 <xQueueSemaphoreTake>
   18630:	48 83 f8 01          	cmp    $0x1,%rax
   18634:	74 e1                	je     18617 <vInterruptCountingSemaphoreTask+0xb1>
   18636:	48 83 7d f0 03       	cmpq   $0x3,-0x10(%rbp)
   1863b:	74 0b                	je     18648 <vInterruptCountingSemaphoreTask+0xe2>
   1863d:	48 c7 05 90 db 11 00 	movq   $0x1,0x11db90(%rip)        # 1361d8 <xErrorDetected>
   18644:	01 00 00 00 
   18648:	be 06 00 00 00       	mov    $0x6,%esi
   1864d:	bf 00 00 00 00       	mov    $0x0,%edi
   18652:	e8 e5 43 ff ff       	callq  ca3c <vTaskPrioritySet>
   18657:	48 c7 05 ae db 11 00 	movq   $0x1,0x11dbae(%rip)        # 136210 <xOkToGiveCountingSemaphore>
   1865e:	01 00 00 00 
   18662:	48 8b 05 8f db 11 00 	mov    0x11db8f(%rip),%rax        # 1361f8 <xISRCountingSemaphore>
   18669:	48 c7 c6 ff ff ff ff 	mov    $0xffffffffffffffff,%rsi
   18670:	48 89 c7             	mov    %rax,%rdi
   18673:	e8 fc e8 fe ff       	callq  6f74 <xQueueSemaphoreTake>
   18678:	48 8b 05 79 db 11 00 	mov    0x11db79(%rip),%rax        # 1361f8 <xISRCountingSemaphore>
   1867f:	48 c7 c6 ff ff ff ff 	mov    $0xffffffffffffffff,%rsi
   18686:	48 89 c7             	mov    %rax,%rdi
   18689:	e8 e6 e8 fe ff       	callq  6f74 <xQueueSemaphoreTake>
   1868e:	48 c7 05 77 db 11 00 	movq   $0x0,0x11db77(%rip)        # 136210 <xOkToGiveCountingSemaphore>
   18695:	00 00 00 00 
   18699:	be 00 00 00 00       	mov    $0x0,%esi
   1869e:	bf 00 00 00 00       	mov    $0x0,%edi
   186a3:	e8 94 43 ff ff       	callq  ca3c <vTaskPrioritySet>
   186a8:	8b 05 36 db 11 00    	mov    0x11db36(%rip),%eax        # 1361e4 <ulCountingSemaphoreLoops>
   186ae:	83 c0 01             	add    $0x1,%eax
   186b1:	89 05 2d db 11 00    	mov    %eax,0x11db2d(%rip)        # 1361e4 <ulCountingSemaphoreLoops>
   186b7:	e9 c2 fe ff ff       	jmpq   1857e <vInterruptCountingSemaphoreTask+0x18>

00000000000186bc <vInterruptSemaphorePeriodicTest>:
   186bc:	f3 0f 1e fa          	endbr64 
   186c0:	55                   	push   %rbp
   186c1:	48 89 e5             	mov    %rsp,%rbp
   186c4:	48 83 ec 20          	sub    $0x20,%rsp
   186c8:	64 48 8b 04 25 28 00 	mov    %fs:0x28,%rax
   186cf:	00 00 
   186d1:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
   186d5:	31 c0                	xor    %eax,%eax
   186d7:	48 c7 45 e8 00 00 00 	movq   $0x0,-0x18(%rbp)
   186de:	00 
   186df:	e8 cd 51 ff ff       	callq  d8b1 <xTaskGetTickCountFromISR>
   186e4:	48 89 45 f0          	mov    %rax,-0x10(%rbp)
   186e8:	48 8b 05 29 db 11 00 	mov    0x11db29(%rip),%rax        # 136218 <xLastGiveTime.3474>
   186ef:	48 8b 55 f0          	mov    -0x10(%rbp),%rdx
   186f3:	48 29 c2             	sub    %rax,%rdx
   186f6:	48 89 d0             	mov    %rdx,%rax
   186f9:	48 83 f8 63          	cmp    $0x63,%rax
   186fd:	0f 86 96 00 00 00    	jbe    18799 <vInterruptSemaphorePeriodicTest+0xdd>
   18703:	48 8b 05 e6 da 11 00 	mov    0x11dae6(%rip),%rax        # 1361f0 <xISRMutex>
   1870a:	48 85 c0             	test   %rax,%rax
   1870d:	75 11                	jne    18720 <vInterruptSemaphorePeriodicTest+0x64>
   1870f:	be e1 01 00 00       	mov    $0x1e1,%esi
   18714:	48 8d 3d dd f6 00 00 	lea    0xf6dd(%rip),%rdi        # 27df8 <xInterruptGivePeriod+0x8>
   1871b:	e8 ec b5 fe ff       	callq  3d0c <vAssertCalled>
   18720:	48 8b 05 e1 da 11 00 	mov    0x11dae1(%rip),%rax        # 136208 <xOkToGiveMutex>
   18727:	48 85 c0             	test   %rax,%rax
   1872a:	74 40                	je     1876c <vInterruptSemaphorePeriodicTest+0xb0>
   1872c:	48 8b 05 bd da 11 00 	mov    0x11dabd(%rip),%rax        # 1361f0 <xISRMutex>
   18733:	be 00 00 00 00       	mov    $0x0,%esi
   18738:	48 89 c7             	mov    %rax,%rdi
   1873b:	e8 7e df fe ff       	callq  66be <xQueueGiveFromISR>
   18740:	48 8b 05 a9 da 11 00 	mov    0x11daa9(%rip),%rax        # 1361f0 <xISRMutex>
   18747:	48 8d 55 e8          	lea    -0x18(%rbp),%rdx
   1874b:	48 89 d6             	mov    %rdx,%rsi
   1874e:	48 89 c7             	mov    %rax,%rdi
   18751:	e8 68 df fe ff       	callq  66be <xQueueGiveFromISR>
   18756:	48 85 c0             	test   %rax,%rax
   18759:	74 11                	je     1876c <vInterruptSemaphorePeriodicTest+0xb0>
   1875b:	be ea 01 00 00       	mov    $0x1ea,%esi
   18760:	48 8d 3d 91 f6 00 00 	lea    0xf691(%rip),%rdi        # 27df8 <xInterruptGivePeriod+0x8>
   18767:	e8 a0 b5 fe ff       	callq  3d0c <vAssertCalled>
   1876c:	48 8b 05 9d da 11 00 	mov    0x11da9d(%rip),%rax        # 136210 <xOkToGiveCountingSemaphore>
   18773:	48 85 c0             	test   %rax,%rax
   18776:	74 16                	je     1878e <vInterruptSemaphorePeriodicTest+0xd2>
   18778:	48 8b 05 79 da 11 00 	mov    0x11da79(%rip),%rax        # 1361f8 <xISRCountingSemaphore>
   1877f:	48 8d 55 e8          	lea    -0x18(%rbp),%rdx
   18783:	48 89 d6             	mov    %rdx,%rsi
   18786:	48 89 c7             	mov    %rax,%rdi
   18789:	e8 30 df fe ff       	callq  66be <xQueueGiveFromISR>
   1878e:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
   18792:	48 89 05 7f da 11 00 	mov    %rax,0x11da7f(%rip)        # 136218 <xLastGiveTime.3474>
   18799:	90                   	nop
   1879a:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   1879e:	64 48 33 04 25 28 00 	xor    %fs:0x28,%rax
   187a5:	00 00 
   187a7:	74 05                	je     187ae <vInterruptSemaphorePeriodicTest+0xf2>
   187a9:	e8 22 9d fe ff       	callq  24d0 <__stack_chk_fail@plt>
   187ae:	c9                   	leaveq 
   187af:	c3                   	retq   

00000000000187b0 <xAreInterruptSemaphoreTasksStillRunning>:
   187b0:	f3 0f 1e fa          	endbr64 
   187b4:	55                   	push   %rbp
   187b5:	48 89 e5             	mov    %rsp,%rbp
   187b8:	8b 15 62 da 11 00    	mov    0x11da62(%rip),%edx        # 136220 <ulLastMasterLoopCounter.3480>
   187be:	8b 05 1c da 11 00    	mov    0x11da1c(%rip),%eax        # 1361e0 <ulMasterLoops>
   187c4:	39 c2                	cmp    %eax,%edx
   187c6:	75 0b                	jne    187d3 <xAreInterruptSemaphoreTasksStillRunning+0x23>
   187c8:	48 c7 05 05 da 11 00 	movq   $0x1,0x11da05(%rip)        # 1361d8 <xErrorDetected>
   187cf:	01 00 00 00 
   187d3:	8b 05 07 da 11 00    	mov    0x11da07(%rip),%eax        # 1361e0 <ulMasterLoops>
   187d9:	89 05 41 da 11 00    	mov    %eax,0x11da41(%rip)        # 136220 <ulLastMasterLoopCounter.3480>
   187df:	8b 15 3f da 11 00    	mov    0x11da3f(%rip),%edx        # 136224 <ulLastCountingSemaphoreLoops.3481>
   187e5:	8b 05 f9 d9 11 00    	mov    0x11d9f9(%rip),%eax        # 1361e4 <ulCountingSemaphoreLoops>
   187eb:	39 c2                	cmp    %eax,%edx
   187ed:	75 0b                	jne    187fa <xAreInterruptSemaphoreTasksStillRunning+0x4a>
   187ef:	48 c7 05 de d9 11 00 	movq   $0x1,0x11d9de(%rip)        # 1361d8 <xErrorDetected>
   187f6:	01 00 00 00 
   187fa:	8b 05 e4 d9 11 00    	mov    0x11d9e4(%rip),%eax        # 1361e4 <ulCountingSemaphoreLoops>
   18800:	8d 50 01             	lea    0x1(%rax),%edx
   18803:	89 15 db d9 11 00    	mov    %edx,0x11d9db(%rip)        # 1361e4 <ulCountingSemaphoreLoops>
   18809:	89 05 15 da 11 00    	mov    %eax,0x11da15(%rip)        # 136224 <ulLastCountingSemaphoreLoops.3481>
   1880f:	48 8b 05 c2 d9 11 00 	mov    0x11d9c2(%rip),%rax        # 1361d8 <xErrorDetected>
   18816:	48 85 c0             	test   %rax,%rax
   18819:	0f 94 c0             	sete   %al
   1881c:	0f b6 c0             	movzbl %al,%eax
   1881f:	5d                   	pop    %rbp
   18820:	c3                   	retq   

0000000000018821 <vStartMessageBufferAMPTasks>:
   18821:	f3 0f 1e fa          	endbr64 
   18825:	55                   	push   %rbp
   18826:	48 89 e5             	mov    %rsp,%rbp
   18829:	48 83 ec 20          	sub    $0x20,%rsp
   1882d:	89 7d ec             	mov    %edi,-0x14(%rbp)
   18830:	ba 01 00 00 00       	mov    $0x1,%edx
   18835:	be 00 00 00 00       	mov    $0x0,%esi
   1883a:	bf 18 00 00 00       	mov    $0x18,%edi
   1883f:	e8 1e 06 ff ff       	callq  8e62 <xStreamBufferGenericCreate>
   18844:	48 89 05 f5 d9 11 00 	mov    %rax,0x11d9f5(%rip)        # 136240 <xControlMessageBuffer>
   1884b:	8b 45 ec             	mov    -0x14(%rbp),%eax
   1884e:	41 b9 00 00 00 00    	mov    $0x0,%r9d
   18854:	41 b8 00 00 00 00    	mov    $0x0,%r8d
   1885a:	b9 00 00 00 00       	mov    $0x0,%ecx
   1885f:	89 c2                	mov    %eax,%edx
   18861:	48 8d 35 f0 f5 00 00 	lea    0xf5f0(%rip),%rsi        # 27e58 <xInterruptGivePeriod+0x68>
   18868:	48 8d 3d a9 00 00 00 	lea    0xa9(%rip),%rdi        # 18918 <prvCoreATask>
   1886f:	e8 83 34 ff ff       	callq  bcf7 <xTaskCreate>
   18874:	48 c7 45 f8 00 00 00 	movq   $0x0,-0x8(%rbp)
   1887b:	00 
   1887c:	e9 88 00 00 00       	jmpq   18909 <vStartMessageBufferAMPTasks+0xe8>
   18881:	ba 01 00 00 00       	mov    $0x1,%edx
   18886:	be 00 00 00 00       	mov    $0x0,%esi
   1888b:	bf 3c 00 00 00       	mov    $0x3c,%edi
   18890:	e8 cd 05 ff ff       	callq  8e62 <xStreamBufferGenericCreate>
   18895:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
   18899:	48 8d 0c d5 00 00 00 	lea    0x0(,%rdx,8),%rcx
   188a0:	00 
   188a1:	48 8d 15 88 d9 11 00 	lea    0x11d988(%rip),%rdx        # 136230 <xCoreBMessageBuffers>
   188a8:	48 89 04 11          	mov    %rax,(%rcx,%rdx,1)
   188ac:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   188b0:	48 8d 14 c5 00 00 00 	lea    0x0(,%rax,8),%rdx
   188b7:	00 
   188b8:	48 8d 05 71 d9 11 00 	lea    0x11d971(%rip),%rax        # 136230 <xCoreBMessageBuffers>
   188bf:	48 8b 04 02          	mov    (%rdx,%rax,1),%rax
   188c3:	48 85 c0             	test   %rax,%rax
   188c6:	75 11                	jne    188d9 <vStartMessageBufferAMPTasks+0xb8>
   188c8:	be 90 00 00 00       	mov    $0x90,%esi
   188cd:	48 8d 3d 94 f5 00 00 	lea    0xf594(%rip),%rdi        # 27e68 <xInterruptGivePeriod+0x78>
   188d4:	e8 33 b4 fe ff       	callq  3d0c <vAssertCalled>
   188d9:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
   188dd:	8b 45 ec             	mov    -0x14(%rbp),%eax
   188e0:	41 b9 00 00 00 00    	mov    $0x0,%r9d
   188e6:	41 b8 01 00 00 00    	mov    $0x1,%r8d
   188ec:	48 89 d1             	mov    %rdx,%rcx
   188ef:	89 c2                	mov    %eax,%edx
   188f1:	48 8d 35 bd f5 00 00 	lea    0xf5bd(%rip),%rsi        # 27eb5 <xInterruptGivePeriod+0xc5>
   188f8:	48 8d 3d c1 00 00 00 	lea    0xc1(%rip),%rdi        # 189c0 <prvCoreBTasks>
   188ff:	e8 f3 33 ff ff       	callq  bcf7 <xTaskCreate>
   18904:	48 83 45 f8 01       	addq   $0x1,-0x8(%rbp)
   18909:	48 83 7d f8 01       	cmpq   $0x1,-0x8(%rbp)
   1890e:	0f 8e 6d ff ff ff    	jle    18881 <vStartMessageBufferAMPTasks+0x60>
   18914:	90                   	nop
   18915:	90                   	nop
   18916:	c9                   	leaveq 
   18917:	c3                   	retq   

0000000000018918 <prvCoreATask>:
   18918:	f3 0f 1e fa          	endbr64 
   1891c:	55                   	push   %rbp
   1891d:	48 89 e5             	mov    %rsp,%rbp
   18920:	48 83 ec 40          	sub    $0x40,%rsp
   18924:	48 89 7d c8          	mov    %rdi,-0x38(%rbp)
   18928:	64 48 8b 04 25 28 00 	mov    %fs:0x28,%rax
   1892f:	00 00 
   18931:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
   18935:	31 c0                	xor    %eax,%eax
   18937:	c7 45 d4 00 00 00 00 	movl   $0x0,-0x2c(%rbp)
   1893e:	48 c7 45 e0 fa 00 00 	movq   $0xfa,-0x20(%rbp)
   18945:	00 
   18946:	8b 55 d4             	mov    -0x2c(%rbp),%edx
   18949:	48 8d 45 e9          	lea    -0x17(%rbp),%rax
   1894d:	48 8d 35 6b f5 00 00 	lea    0xf56b(%rip),%rsi        # 27ebf <xInterruptGivePeriod+0xcf>
   18954:	48 89 c7             	mov    %rax,%rdi
   18957:	b8 00 00 00 00       	mov    $0x0,%eax
   1895c:	e8 4f 9d fe ff       	callq  26b0 <sprintf@plt>
   18961:	48 c7 45 d8 00 00 00 	movq   $0x0,-0x28(%rbp)
   18968:	00 
   18969:	eb 3c                	jmp    189a7 <prvCoreATask+0x8f>
   1896b:	48 8d 45 e9          	lea    -0x17(%rbp),%rax
   1896f:	48 89 c7             	mov    %rax,%rdi
   18972:	e8 39 9b fe ff       	callq  24b0 <strlen@plt>
   18977:	48 89 c2             	mov    %rax,%rdx
   1897a:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
   1897e:	48 8d 0c c5 00 00 00 	lea    0x0(,%rax,8),%rcx
   18985:	00 
   18986:	48 8d 05 a3 d8 11 00 	lea    0x11d8a3(%rip),%rax        # 136230 <xCoreBMessageBuffers>
   1898d:	48 8b 04 01          	mov    (%rcx,%rax,1),%rax
   18991:	48 8d 75 e9          	lea    -0x17(%rbp),%rsi
   18995:	b9 00 00 00 00       	mov    $0x0,%ecx
   1899a:	48 89 c7             	mov    %rax,%rdi
   1899d:	e8 27 0e ff ff       	callq  97c9 <xStreamBufferSend>
   189a2:	48 83 45 d8 01       	addq   $0x1,-0x28(%rbp)
   189a7:	48 83 7d d8 01       	cmpq   $0x1,-0x28(%rbp)
   189ac:	7e bd                	jle    1896b <prvCoreATask+0x53>
   189ae:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
   189b2:	48 89 c7             	mov    %rax,%rdi
   189b5:	e8 e8 3d ff ff       	callq  c7a2 <vTaskDelay>
   189ba:	83 45 d4 01          	addl   $0x1,-0x2c(%rbp)
   189be:	eb 86                	jmp    18946 <prvCoreATask+0x2e>

00000000000189c0 <prvCoreBTasks>:
   189c0:	f3 0f 1e fa          	endbr64 
   189c4:	55                   	push   %rbp
   189c5:	48 89 e5             	mov    %rsp,%rbp
   189c8:	48 83 ec 50          	sub    $0x50,%rsp
   189cc:	48 89 7d b8          	mov    %rdi,-0x48(%rbp)
   189d0:	64 48 8b 04 25 28 00 	mov    %fs:0x28,%rax
   189d7:	00 00 
   189d9:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
   189dd:	31 c0                	xor    %eax,%eax
   189df:	c7 45 c4 00 00 00 00 	movl   $0x0,-0x3c(%rbp)
   189e6:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
   189ea:	48 89 45 c8          	mov    %rax,-0x38(%rbp)
   189ee:	48 83 7d c8 01       	cmpq   $0x1,-0x38(%rbp)
   189f3:	7e 11                	jle    18a06 <prvCoreBTasks+0x46>
   189f5:	be d4 00 00 00       	mov    $0xd4,%esi
   189fa:	48 8d 3d 67 f4 00 00 	lea    0xf467(%rip),%rdi        # 27e68 <xInterruptGivePeriod+0x78>
   18a01:	e8 06 b3 fe ff       	callq  3d0c <vAssertCalled>
   18a06:	8b 55 c4             	mov    -0x3c(%rbp),%edx
   18a09:	48 8d 45 da          	lea    -0x26(%rbp),%rax
   18a0d:	48 8d 35 ab f4 00 00 	lea    0xf4ab(%rip),%rsi        # 27ebf <xInterruptGivePeriod+0xcf>
   18a14:	48 89 c7             	mov    %rax,%rdi
   18a17:	b8 00 00 00 00       	mov    $0x0,%eax
   18a1c:	e8 8f 9c fe ff       	callq  26b0 <sprintf@plt>
   18a21:	48 8d 45 e9          	lea    -0x17(%rbp),%rax
   18a25:	ba 0f 00 00 00       	mov    $0xf,%edx
   18a2a:	be 00 00 00 00       	mov    $0x0,%esi
   18a2f:	48 89 c7             	mov    %rax,%rdi
   18a32:	e8 d9 9a fe ff       	callq  2510 <memset@plt>
   18a37:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
   18a3b:	48 8d 14 c5 00 00 00 	lea    0x0(,%rax,8),%rdx
   18a42:	00 
   18a43:	48 8d 05 e6 d7 11 00 	lea    0x11d7e6(%rip),%rax        # 136230 <xCoreBMessageBuffers>
   18a4a:	48 8b 04 02          	mov    (%rdx,%rax,1),%rax
   18a4e:	48 8d 75 e9          	lea    -0x17(%rbp),%rsi
   18a52:	48 c7 c1 ff ff ff ff 	mov    $0xffffffffffffffff,%rcx
   18a59:	ba 0f 00 00 00       	mov    $0xf,%edx
   18a5e:	48 89 c7             	mov    %rax,%rdi
   18a61:	e8 8e 14 ff ff       	callq  9ef4 <xStreamBufferReceive>
   18a66:	48 89 45 d0          	mov    %rax,-0x30(%rbp)
   18a6a:	48 8d 45 da          	lea    -0x26(%rbp),%rax
   18a6e:	48 89 c7             	mov    %rax,%rdi
   18a71:	e8 3a 9a fe ff       	callq  24b0 <strlen@plt>
   18a76:	48 39 45 d0          	cmp    %rax,-0x30(%rbp)
   18a7a:	74 11                	je     18a8d <prvCoreBTasks+0xcd>
   18a7c:	be e7 00 00 00       	mov    $0xe7,%esi
   18a81:	48 8d 3d e0 f3 00 00 	lea    0xf3e0(%rip),%rdi        # 27e68 <xInterruptGivePeriod+0x78>
   18a88:	e8 7f b2 fe ff       	callq  3d0c <vAssertCalled>
   18a8d:	48 8d 55 da          	lea    -0x26(%rbp),%rdx
   18a91:	48 8d 45 e9          	lea    -0x17(%rbp),%rax
   18a95:	48 89 d6             	mov    %rdx,%rsi
   18a98:	48 89 c7             	mov    %rax,%rdi
   18a9b:	e8 b0 9a fe ff       	callq  2550 <strcmp@plt>
   18aa0:	85 c0                	test   %eax,%eax
   18aa2:	75 31                	jne    18ad5 <prvCoreBTasks+0x115>
   18aa4:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
   18aa8:	48 8d 14 85 00 00 00 	lea    0x0(,%rax,4),%rdx
   18aaf:	00 
   18ab0:	48 8d 05 91 d7 11 00 	lea    0x11d791(%rip),%rax        # 136248 <ulCycleCounters>
   18ab7:	8b 04 02             	mov    (%rdx,%rax,1),%eax
   18aba:	8d 48 01             	lea    0x1(%rax),%ecx
   18abd:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
   18ac1:	48 8d 14 85 00 00 00 	lea    0x0(,%rax,4),%rdx
   18ac8:	00 
   18ac9:	48 8d 05 78 d7 11 00 	lea    0x11d778(%rip),%rax        # 136248 <ulCycleCounters>
   18ad0:	89 0c 02             	mov    %ecx,(%rdx,%rax,1)
   18ad3:	eb 0b                	jmp    18ae0 <prvCoreBTasks+0x120>
   18ad5:	48 c7 05 70 85 01 00 	movq   $0x0,0x18570(%rip)        # 31050 <xDemoStatus>
   18adc:	00 00 00 00 
   18ae0:	83 45 c4 01          	addl   $0x1,-0x3c(%rbp)
   18ae4:	e9 1d ff ff ff       	jmpq   18a06 <prvCoreBTasks+0x46>

0000000000018ae9 <vGenerateCoreBInterrupt>:
   18ae9:	f3 0f 1e fa          	endbr64 
   18aed:	55                   	push   %rbp
   18aee:	48 89 e5             	mov    %rsp,%rbp
   18af1:	48 83 ec 20          	sub    $0x20,%rsp
   18af5:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
   18af9:	64 48 8b 04 25 28 00 	mov    %fs:0x28,%rax
   18b00:	00 00 
   18b02:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
   18b06:	31 c0                	xor    %eax,%eax
   18b08:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
   18b0c:	48 89 45 f0          	mov    %rax,-0x10(%rbp)
   18b10:	48 8b 55 f0          	mov    -0x10(%rbp),%rdx
   18b14:	48 8b 05 25 d7 11 00 	mov    0x11d725(%rip),%rax        # 136240 <xControlMessageBuffer>
   18b1b:	48 39 c2             	cmp    %rax,%rdx
   18b1e:	74 22                	je     18b42 <vGenerateCoreBInterrupt+0x59>
   18b20:	48 8b 05 19 d7 11 00 	mov    0x11d719(%rip),%rax        # 136240 <xControlMessageBuffer>
   18b27:	48 8d 75 f0          	lea    -0x10(%rbp),%rsi
   18b2b:	b9 00 00 00 00       	mov    $0x0,%ecx
   18b30:	ba 08 00 00 00       	mov    $0x8,%edx
   18b35:	48 89 c7             	mov    %rax,%rdi
   18b38:	e8 8c 0c ff ff       	callq  97c9 <xStreamBufferSend>
   18b3d:	e8 17 00 00 00       	callq  18b59 <prvCoreBInterruptHandler>
   18b42:	90                   	nop
   18b43:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   18b47:	64 48 33 04 25 28 00 	xor    %fs:0x28,%rax
   18b4e:	00 00 
   18b50:	74 05                	je     18b57 <vGenerateCoreBInterrupt+0x6e>
   18b52:	e8 79 99 fe ff       	callq  24d0 <__stack_chk_fail@plt>
   18b57:	c9                   	leaveq 
   18b58:	c3                   	retq   

0000000000018b59 <prvCoreBInterruptHandler>:
   18b59:	f3 0f 1e fa          	endbr64 
   18b5d:	55                   	push   %rbp
   18b5e:	48 89 e5             	mov    %rsp,%rbp
   18b61:	48 83 ec 20          	sub    $0x20,%rsp
   18b65:	64 48 8b 04 25 28 00 	mov    %fs:0x28,%rax
   18b6c:	00 00 
   18b6e:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
   18b72:	31 c0                	xor    %eax,%eax
   18b74:	48 c7 45 f0 00 00 00 	movq   $0x0,-0x10(%rbp)
   18b7b:	00 
   18b7c:	48 8b 05 bd d6 11 00 	mov    0x11d6bd(%rip),%rax        # 136240 <xControlMessageBuffer>
   18b83:	48 8d 75 e8          	lea    -0x18(%rbp),%rsi
   18b87:	b9 00 00 00 00       	mov    $0x0,%ecx
   18b8c:	ba 08 00 00 00       	mov    $0x8,%edx
   18b91:	48 89 c7             	mov    %rax,%rdi
   18b94:	e8 5b 13 ff ff       	callq  9ef4 <xStreamBufferReceive>
   18b99:	48 83 f8 08          	cmp    $0x8,%rax
   18b9d:	75 13                	jne    18bb2 <prvCoreBInterruptHandler+0x59>
   18b9f:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
   18ba3:	48 8d 55 f0          	lea    -0x10(%rbp),%rdx
   18ba7:	48 89 d6             	mov    %rdx,%rsi
   18baa:	48 89 c7             	mov    %rax,%rdi
   18bad:	e8 9c 1b ff ff       	callq  a74e <xStreamBufferSendCompletedFromISR>
   18bb2:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
   18bb6:	48 85 c0             	test   %rax,%rax
   18bb9:	74 05                	je     18bc0 <prvCoreBInterruptHandler+0x67>
   18bbb:	e8 b4 a2 ff ff       	callq  12e74 <vPortYield>
   18bc0:	90                   	nop
   18bc1:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   18bc5:	64 48 33 04 25 28 00 	xor    %fs:0x28,%rax
   18bcc:	00 00 
   18bce:	74 05                	je     18bd5 <prvCoreBInterruptHandler+0x7c>
   18bd0:	e8 fb 98 fe ff       	callq  24d0 <__stack_chk_fail@plt>
   18bd5:	c9                   	leaveq 
   18bd6:	c3                   	retq   

0000000000018bd7 <xAreMessageBufferAMPTasksStillRunning>:
   18bd7:	f3 0f 1e fa          	endbr64 
   18bdb:	55                   	push   %rbp
   18bdc:	48 89 e5             	mov    %rsp,%rbp
   18bdf:	48 c7 45 f8 00 00 00 	movq   $0x0,-0x8(%rbp)
   18be6:	00 
   18be7:	eb 6e                	jmp    18c57 <xAreMessageBufferAMPTasksStillRunning+0x80>
   18be9:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   18bed:	48 8d 14 85 00 00 00 	lea    0x0(,%rax,4),%rdx
   18bf4:	00 
   18bf5:	48 8d 05 54 d6 11 00 	lea    0x11d654(%rip),%rax        # 136250 <ulLastCycleCounters.3410>
   18bfc:	8b 14 02             	mov    (%rdx,%rax,1),%edx
   18bff:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   18c03:	48 8d 0c 85 00 00 00 	lea    0x0(,%rax,4),%rcx
   18c0a:	00 
   18c0b:	48 8d 05 36 d6 11 00 	lea    0x11d636(%rip),%rax        # 136248 <ulCycleCounters>
   18c12:	8b 04 01             	mov    (%rcx,%rax,1),%eax
   18c15:	39 c2                	cmp    %eax,%edx
   18c17:	75 0d                	jne    18c26 <xAreMessageBufferAMPTasksStillRunning+0x4f>
   18c19:	48 c7 05 2c 84 01 00 	movq   $0x0,0x1842c(%rip)        # 31050 <xDemoStatus>
   18c20:	00 00 00 00 
   18c24:	eb 2c                	jmp    18c52 <xAreMessageBufferAMPTasksStillRunning+0x7b>
   18c26:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   18c2a:	48 8d 14 85 00 00 00 	lea    0x0(,%rax,4),%rdx
   18c31:	00 
   18c32:	48 8d 05 0f d6 11 00 	lea    0x11d60f(%rip),%rax        # 136248 <ulCycleCounters>
   18c39:	8b 04 02             	mov    (%rdx,%rax,1),%eax
   18c3c:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
   18c40:	48 8d 0c 95 00 00 00 	lea    0x0(,%rdx,4),%rcx
   18c47:	00 
   18c48:	48 8d 15 01 d6 11 00 	lea    0x11d601(%rip),%rdx        # 136250 <ulLastCycleCounters.3410>
   18c4f:	89 04 11             	mov    %eax,(%rcx,%rdx,1)
   18c52:	48 83 45 f8 01       	addq   $0x1,-0x8(%rbp)
   18c57:	48 83 7d f8 01       	cmpq   $0x1,-0x8(%rbp)
   18c5c:	7e 8b                	jle    18be9 <xAreMessageBufferAMPTasksStillRunning+0x12>
   18c5e:	48 8b 05 eb 83 01 00 	mov    0x183eb(%rip),%rax        # 31050 <xDemoStatus>
   18c65:	5d                   	pop    %rbp
   18c66:	c3                   	retq   

0000000000018c67 <vStartMessageBufferTasks>:
   18c67:	f3 0f 1e fa          	endbr64 
   18c6b:	55                   	push   %rbp
   18c6c:	48 89 e5             	mov    %rsp,%rbp
   18c6f:	48 83 ec 20          	sub    $0x20,%rsp
   18c73:	89 7d ec             	mov    %edi,-0x14(%rbp)
   18c76:	8b 45 ec             	mov    -0x14(%rbp),%eax
   18c79:	d1 e8                	shr    %eax
   18c7b:	89 c2                	mov    %eax,%edx
   18c7d:	8b 45 ec             	mov    -0x14(%rbp),%eax
   18c80:	01 d0                	add    %edx,%eax
   18c82:	89 05 f4 d6 11 00    	mov    %eax,0x11d6f4(%rip)        # 13637c <xBlockingStackSize>
   18c88:	8b 05 ee d6 11 00    	mov    0x11d6ee(%rip),%eax        # 13637c <xBlockingStackSize>
   18c8e:	41 b9 00 00 00 00    	mov    $0x0,%r9d
   18c94:	41 b8 01 00 00 00    	mov    $0x1,%r8d
   18c9a:	b9 00 00 00 00       	mov    $0x0,%ecx
   18c9f:	89 c2                	mov    %eax,%edx
   18ca1:	48 8d 35 57 f2 00 00 	lea    0xf257(%rip),%rsi        # 27eff <xInterruptGivePeriod+0x10f>
   18ca8:	48 8d 3d 73 11 00 00 	lea    0x1173(%rip),%rdi        # 19e22 <prvEchoServer>
   18caf:	e8 43 30 ff ff       	callq  bcf7 <xTaskCreate>
   18cb4:	8b 05 c2 d6 11 00    	mov    0x11d6c2(%rip),%eax        # 13637c <xBlockingStackSize>
   18cba:	41 b9 00 00 00 00    	mov    $0x0,%r9d
   18cc0:	41 b8 00 00 00 00    	mov    $0x0,%r8d
   18cc6:	b9 00 00 00 00       	mov    $0x0,%ecx
   18ccb:	89 c2                	mov    %eax,%edx
   18ccd:	48 8d 35 37 f2 00 00 	lea    0xf237(%rip),%rsi        # 27f0b <xInterruptGivePeriod+0x11b>
   18cd4:	48 8d 3d 47 11 00 00 	lea    0x1147(%rip),%rdi        # 19e22 <prvEchoServer>
   18cdb:	e8 17 30 ff ff       	callq  bcf7 <xTaskCreate>
   18ce0:	ba 01 00 00 00       	mov    $0x1,%edx
   18ce5:	be 00 00 00 00       	mov    $0x0,%esi
   18cea:	bf 32 00 00 00       	mov    $0x32,%edi
   18cef:	e8 6e 01 ff ff       	callq  8e62 <xStreamBufferGenericCreate>
   18cf4:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
   18cf8:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
   18cfc:	8b 45 ec             	mov    -0x14(%rbp),%eax
   18cff:	41 b9 00 00 00 00    	mov    $0x0,%r9d
   18d05:	41 b8 00 00 00 00    	mov    $0x0,%r8d
   18d0b:	48 89 d1             	mov    %rdx,%rcx
   18d0e:	89 c2                	mov    %eax,%edx
   18d10:	48 8d 35 00 f2 00 00 	lea    0xf200(%rip),%rsi        # 27f17 <xInterruptGivePeriod+0x127>
   18d17:	48 8d 3d b1 0a 00 00 	lea    0xab1(%rip),%rdi        # 197cf <prvNonBlockingReceiverTask>
   18d1e:	e8 d4 2f ff ff       	callq  bcf7 <xTaskCreate>
   18d23:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
   18d27:	8b 45 ec             	mov    -0x14(%rbp),%eax
   18d2a:	41 b9 00 00 00 00    	mov    $0x0,%r9d
   18d30:	41 b8 00 00 00 00    	mov    $0x0,%r8d
   18d36:	48 89 d1             	mov    %rdx,%rcx
   18d39:	89 c2                	mov    %eax,%edx
   18d3b:	48 8d 35 de f1 00 00 	lea    0xf1de(%rip),%rsi        # 27f20 <xInterruptGivePeriod+0x130>
   18d42:	48 8d 3d 90 09 00 00 	lea    0x990(%rip),%rdi        # 196d9 <prvNonBlockingSenderTask>
   18d49:	e8 a9 2f ff ff       	callq  bcf7 <xTaskCreate>
   18d4e:	8b 05 28 d6 11 00    	mov    0x11d628(%rip),%eax        # 13637c <xBlockingStackSize>
   18d54:	41 b9 00 00 00 00    	mov    $0x0,%r9d
   18d5a:	41 b8 01 00 00 00    	mov    $0x1,%r8d
   18d60:	b9 00 00 00 00       	mov    $0x0,%ecx
   18d65:	89 c2                	mov    %eax,%edx
   18d67:	48 8d 35 bb f1 00 00 	lea    0xf1bb(%rip),%rsi        # 27f29 <xInterruptGivePeriod+0x139>
   18d6e:	48 8d 3d d7 0b 00 00 	lea    0xbd7(%rip),%rdi        # 1994c <prvSenderTask>
   18d75:	e8 7d 2f ff ff       	callq  bcf7 <xTaskCreate>
   18d7a:	8b 05 fc d5 11 00    	mov    0x11d5fc(%rip),%eax        # 13637c <xBlockingStackSize>
   18d80:	41 b9 00 00 00 00    	mov    $0x0,%r9d
   18d86:	41 b8 00 00 00 00    	mov    $0x0,%r8d
   18d8c:	b9 00 00 00 00       	mov    $0x0,%ecx
   18d91:	89 c2                	mov    %eax,%edx
   18d93:	48 8d 35 97 f1 00 00 	lea    0xf197(%rip),%rsi        # 27f31 <xInterruptGivePeriod+0x141>
   18d9a:	48 8d 3d ab 0b 00 00 	lea    0xbab(%rip),%rdi        # 1994c <prvSenderTask>
   18da1:	e8 51 2f ff ff       	callq  bcf7 <xTaskCreate>
   18da6:	90                   	nop
   18da7:	c9                   	leaveq 
   18da8:	c3                   	retq   

0000000000018da9 <prvSingleTaskTests>:
   18da9:	f3 0f 1e fa          	endbr64 
   18dad:	55                   	push   %rbp
   18dae:	48 89 e5             	mov    %rsp,%rbp
   18db1:	48 81 ec 90 00 00 00 	sub    $0x90,%rsp
   18db8:	48 89 bd 78 ff ff ff 	mov    %rdi,-0x88(%rbp)
   18dbf:	48 c7 45 98 03 00 00 	movq   $0x3,-0x68(%rbp)
   18dc6:	00 
   18dc7:	48 c7 45 a0 06 00 00 	movq   $0x6,-0x60(%rbp)
   18dce:	00 
   18dcf:	48 c7 45 a8 11 00 00 	movq   $0x11,-0x58(%rbp)
   18dd6:	00 
   18dd7:	48 c7 45 b0 19 00 00 	movq   $0x19,-0x50(%rbp)
   18dde:	00 
   18ddf:	48 c7 45 b8 03 00 00 	movq   $0x3,-0x48(%rbp)
   18de6:	00 
   18de7:	bf 32 00 00 00       	mov    $0x32,%edi
   18dec:	e8 8f 98 ff ff       	callq  12680 <pvPortMalloc>
   18df1:	48 89 45 c0          	mov    %rax,-0x40(%rbp)
   18df5:	48 83 7d c0 00       	cmpq   $0x0,-0x40(%rbp)
   18dfa:	75 11                	jne    18e0d <prvSingleTaskTests+0x64>
   18dfc:	be cd 00 00 00       	mov    $0xcd,%esi
   18e01:	48 8d 3d 38 f1 00 00 	lea    0xf138(%rip),%rdi        # 27f40 <xInterruptGivePeriod+0x150>
   18e08:	e8 ff ae fe ff       	callq  3d0c <vAssertCalled>
   18e0d:	48 8b 45 c0          	mov    -0x40(%rbp),%rax
   18e11:	48 89 45 c8          	mov    %rax,-0x38(%rbp)
   18e15:	48 8b 55 c8          	mov    -0x38(%rbp),%rdx
   18e19:	48 8b 45 a8          	mov    -0x58(%rbp),%rax
   18e1d:	48 01 d0             	add    %rdx,%rax
   18e20:	48 89 45 d0          	mov    %rax,-0x30(%rbp)
   18e24:	48 8b 85 78 ff ff ff 	mov    -0x88(%rbp),%rax
   18e2b:	48 89 c7             	mov    %rax,%rdi
   18e2e:	e8 c1 08 ff ff       	callq  96f4 <xStreamBufferSpacesAvailable>
   18e33:	48 89 45 90          	mov    %rax,-0x70(%rbp)
   18e37:	48 83 7d 90 32       	cmpq   $0x32,-0x70(%rbp)
   18e3c:	74 11                	je     18e4f <prvSingleTaskTests+0xa6>
   18e3e:	be d5 00 00 00       	mov    $0xd5,%esi
   18e43:	48 8d 3d f6 f0 00 00 	lea    0xf0f6(%rip),%rdi        # 27f40 <xInterruptGivePeriod+0x150>
   18e4a:	e8 bd ae fe ff       	callq  3d0c <vAssertCalled>
   18e4f:	48 8b 85 78 ff ff ff 	mov    -0x88(%rbp),%rax
   18e56:	48 89 c7             	mov    %rax,%rdi
   18e59:	e8 11 18 ff ff       	callq  a66f <xStreamBufferIsEmpty>
   18e5e:	48 83 f8 01          	cmp    $0x1,%rax
   18e62:	74 11                	je     18e75 <prvSingleTaskTests+0xcc>
   18e64:	be d6 00 00 00       	mov    $0xd6,%esi
   18e69:	48 8d 3d d0 f0 00 00 	lea    0xf0d0(%rip),%rdi        # 27f40 <xInterruptGivePeriod+0x150>
   18e70:	e8 97 ae fe ff       	callq  3d0c <vAssertCalled>
   18e75:	48 8b 85 78 ff ff ff 	mov    -0x88(%rbp),%rax
   18e7c:	48 89 c7             	mov    %rax,%rdi
   18e7f:	e8 fb 13 ff ff       	callq  a27f <xStreamBufferNextMessageLengthBytes>
   18e84:	48 89 45 d8          	mov    %rax,-0x28(%rbp)
   18e88:	48 83 7d d8 00       	cmpq   $0x0,-0x28(%rbp)
   18e8d:	74 11                	je     18ea0 <prvSingleTaskTests+0xf7>
   18e8f:	be d8 00 00 00       	mov    $0xd8,%esi
   18e94:	48 8d 3d a5 f0 00 00 	lea    0xf0a5(%rip),%rdi        # 27f40 <xInterruptGivePeriod+0x150>
   18e9b:	e8 6c ae fe ff       	callq  3d0c <vAssertCalled>
   18ea0:	48 8b 75 c8          	mov    -0x38(%rbp),%rsi
   18ea4:	48 8b 85 78 ff ff ff 	mov    -0x88(%rbp),%rax
   18eab:	b9 00 00 00 00       	mov    $0x0,%ecx
   18eb0:	ba 3a 00 00 00       	mov    $0x3a,%edx
   18eb5:	48 89 c7             	mov    %rax,%rdi
   18eb8:	e8 41 0d ff ff       	callq  9bfe <xStreamBufferSendFromISR>
   18ebd:	48 89 45 e0          	mov    %rax,-0x20(%rbp)
   18ec1:	48 83 7d e0 00       	cmpq   $0x0,-0x20(%rbp)
   18ec6:	74 11                	je     18ed9 <prvSingleTaskTests+0x130>
   18ec8:	be e0 00 00 00       	mov    $0xe0,%esi
   18ecd:	48 8d 3d 6c f0 00 00 	lea    0xf06c(%rip),%rdi        # 27f40 <xInterruptGivePeriod+0x150>
   18ed4:	e8 33 ae fe ff       	callq  3d0c <vAssertCalled>
   18ed9:	48 8b 75 c8          	mov    -0x38(%rbp),%rsi
   18edd:	48 8b 85 78 ff ff ff 	mov    -0x88(%rbp),%rax
   18ee4:	48 c7 c1 ff ff ff ff 	mov    $0xffffffffffffffff,%rcx
   18eeb:	ba 3a 00 00 00       	mov    $0x3a,%edx
   18ef0:	48 89 c7             	mov    %rax,%rdi
   18ef3:	e8 d1 08 ff ff       	callq  97c9 <xStreamBufferSend>
   18ef8:	48 89 45 e0          	mov    %rax,-0x20(%rbp)
   18efc:	48 83 7d e0 00       	cmpq   $0x0,-0x20(%rbp)
   18f01:	74 11                	je     18f14 <prvSingleTaskTests+0x16b>
   18f03:	be e4 00 00 00       	mov    $0xe4,%esi
   18f08:	48 8d 3d 31 f0 00 00 	lea    0xf031(%rip),%rdi        # 27f40 <xInterruptGivePeriod+0x150>
   18f0f:	e8 f8 ad fe ff       	callq  3d0c <vAssertCalled>
   18f14:	48 c7 45 88 00 00 00 	movq   $0x0,-0x78(%rbp)
   18f1b:	00 
   18f1c:	e9 f4 00 00 00       	jmpq   19015 <prvSingleTaskTests+0x26c>
   18f21:	48 8b 85 78 ff ff ff 	mov    -0x88(%rbp),%rax
   18f28:	48 89 c7             	mov    %rax,%rdi
   18f2b:	e8 a0 17 ff ff       	callq  a6d0 <xStreamBufferIsFull>
   18f30:	48 85 c0             	test   %rax,%rax
   18f33:	74 11                	je     18f46 <prvSingleTaskTests+0x19d>
   18f35:	be f0 00 00 00       	mov    $0xf0,%esi
   18f3a:	48 8d 3d ff ef 00 00 	lea    0xefff(%rip),%rdi        # 27f40 <xInterruptGivePeriod+0x150>
   18f41:	e8 c6 ad fe ff       	callq  3d0c <vAssertCalled>
   18f46:	48 8b 45 88          	mov    -0x78(%rbp),%rax
   18f4a:	8d 48 30             	lea    0x30(%rax),%ecx
   18f4d:	48 8b 55 a0          	mov    -0x60(%rbp),%rdx
   18f51:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
   18f55:	89 ce                	mov    %ecx,%esi
   18f57:	48 89 c7             	mov    %rax,%rdi
   18f5a:	e8 b1 95 fe ff       	callq  2510 <memset@plt>
   18f5f:	e8 6b 9e ff ff       	callq  12dcf <vPortEnterCritical>
   18f64:	48 8b 55 a0          	mov    -0x60(%rbp),%rdx
   18f68:	48 8b 75 c8          	mov    -0x38(%rbp),%rsi
   18f6c:	48 8b 85 78 ff ff ff 	mov    -0x88(%rbp),%rax
   18f73:	b9 00 00 00 00       	mov    $0x0,%ecx
   18f78:	48 89 c7             	mov    %rax,%rdi
   18f7b:	e8 7e 0c ff ff       	callq  9bfe <xStreamBufferSendFromISR>
   18f80:	48 89 45 e0          	mov    %rax,-0x20(%rbp)
   18f84:	e8 74 9e ff ff       	callq  12dfd <vPortExitCritical>
   18f89:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
   18f8d:	48 3b 45 a0          	cmp    -0x60(%rbp),%rax
   18f91:	74 11                	je     18fa4 <prvSingleTaskTests+0x1fb>
   18f93:	be ff 00 00 00       	mov    $0xff,%esi
   18f98:	48 8d 3d a1 ef 00 00 	lea    0xefa1(%rip),%rdi        # 27f40 <xInterruptGivePeriod+0x150>
   18f9f:	e8 68 ad fe ff       	callq  3d0c <vAssertCalled>
   18fa4:	48 8b 45 90          	mov    -0x70(%rbp),%rax
   18fa8:	48 2b 45 a0          	sub    -0x60(%rbp),%rax
   18fac:	48 83 e8 08          	sub    $0x8,%rax
   18fb0:	48 89 45 90          	mov    %rax,-0x70(%rbp)
   18fb4:	48 8b 85 78 ff ff ff 	mov    -0x88(%rbp),%rax
   18fbb:	48 89 c7             	mov    %rax,%rdi
   18fbe:	e8 31 07 ff ff       	callq  96f4 <xStreamBufferSpacesAvailable>
   18fc3:	48 89 45 e0          	mov    %rax,-0x20(%rbp)
   18fc7:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
   18fcb:	48 3b 45 90          	cmp    -0x70(%rbp),%rax
   18fcf:	74 11                	je     18fe2 <prvSingleTaskTests+0x239>
   18fd1:	be 07 01 00 00       	mov    $0x107,%esi
   18fd6:	48 8d 3d 63 ef 00 00 	lea    0xef63(%rip),%rdi        # 27f40 <xInterruptGivePeriod+0x150>
   18fdd:	e8 2a ad fe ff       	callq  3d0c <vAssertCalled>
   18fe2:	48 8b 85 78 ff ff ff 	mov    -0x88(%rbp),%rax
   18fe9:	48 89 c7             	mov    %rax,%rdi
   18fec:	e8 8e 12 ff ff       	callq  a27f <xStreamBufferNextMessageLengthBytes>
   18ff1:	48 89 45 d8          	mov    %rax,-0x28(%rbp)
   18ff5:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
   18ff9:	48 3b 45 a0          	cmp    -0x60(%rbp),%rax
   18ffd:	74 11                	je     19010 <prvSingleTaskTests+0x267>
   18fff:	be 0c 01 00 00       	mov    $0x10c,%esi
   19004:	48 8d 3d 35 ef 00 00 	lea    0xef35(%rip),%rdi        # 27f40 <xInterruptGivePeriod+0x150>
   1900b:	e8 fc ac fe ff       	callq  3d0c <vAssertCalled>
   19010:	48 83 45 88 01       	addq   $0x1,-0x78(%rbp)
   19015:	48 8b 45 88          	mov    -0x78(%rbp),%rax
   19019:	48 3b 45 98          	cmp    -0x68(%rbp),%rax
   1901d:	0f 82 fe fe ff ff    	jb     18f21 <prvSingleTaskTests+0x178>
   19023:	48 8b 85 78 ff ff ff 	mov    -0x88(%rbp),%rax
   1902a:	48 89 c7             	mov    %rax,%rdi
   1902d:	e8 9e 16 ff ff       	callq  a6d0 <xStreamBufferIsFull>
   19032:	48 83 f8 01          	cmp    $0x1,%rax
   19036:	74 11                	je     19049 <prvSingleTaskTests+0x2a0>
   19038:	be 12 01 00 00       	mov    $0x112,%esi
   1903d:	48 8d 3d fc ee 00 00 	lea    0xeefc(%rip),%rdi        # 27f40 <xInterruptGivePeriod+0x150>
   19044:	e8 c3 ac fe ff       	callq  3d0c <vAssertCalled>
   19049:	48 8b 75 c8          	mov    -0x38(%rbp),%rsi
   1904d:	48 8b 85 78 ff ff ff 	mov    -0x88(%rbp),%rax
   19054:	b9 00 00 00 00       	mov    $0x0,%ecx
   19059:	ba 01 00 00 00       	mov    $0x1,%edx
   1905e:	48 89 c7             	mov    %rax,%rdi
   19061:	e8 63 07 ff ff       	callq  97c9 <xStreamBufferSend>
   19066:	48 89 45 e0          	mov    %rax,-0x20(%rbp)
   1906a:	48 83 7d e0 00       	cmpq   $0x0,-0x20(%rbp)
   1906f:	74 11                	je     19082 <prvSingleTaskTests+0x2d9>
   19071:	be 14 01 00 00       	mov    $0x114,%esi
   19076:	48 8d 3d c3 ee 00 00 	lea    0xeec3(%rip),%rdi        # 27f40 <xInterruptGivePeriod+0x150>
   1907d:	e8 8a ac fe ff       	callq  3d0c <vAssertCalled>
   19082:	bf 00 00 00 00       	mov    $0x0,%edi
   19087:	e8 1d 39 ff ff       	callq  c9a9 <uxTaskPriorityGet>
   1908c:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
   19090:	be 06 00 00 00       	mov    $0x6,%esi
   19095:	bf 00 00 00 00       	mov    $0x0,%edi
   1909a:	e8 9d 39 ff ff       	callq  ca3c <vTaskPrioritySet>
   1909f:	e8 f4 47 ff ff       	callq  d898 <xTaskGetTickCount>
   190a4:	48 89 45 f0          	mov    %rax,-0x10(%rbp)
   190a8:	48 8b 55 b0          	mov    -0x50(%rbp),%rdx
   190ac:	48 8b 75 c8          	mov    -0x38(%rbp),%rsi
   190b0:	48 8b 85 78 ff ff ff 	mov    -0x88(%rbp),%rax
   190b7:	48 89 d1             	mov    %rdx,%rcx
   190ba:	ba 01 00 00 00       	mov    $0x1,%edx
   190bf:	48 89 c7             	mov    %rax,%rdi
   190c2:	e8 02 07 ff ff       	callq  97c9 <xStreamBufferSend>
   190c7:	48 89 45 e0          	mov    %rax,-0x20(%rbp)
   190cb:	e8 c8 47 ff ff       	callq  d898 <xTaskGetTickCount>
   190d0:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
   190d4:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
   190d8:	48 89 c6             	mov    %rax,%rsi
   190db:	bf 00 00 00 00       	mov    $0x0,%edi
   190e0:	e8 57 39 ff ff       	callq  ca3c <vTaskPrioritySet>
   190e5:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   190e9:	48 2b 45 f0          	sub    -0x10(%rbp),%rax
   190ed:	48 39 45 b0          	cmp    %rax,-0x50(%rbp)
   190f1:	76 11                	jbe    19104 <prvSingleTaskTests+0x35b>
   190f3:	be 20 01 00 00       	mov    $0x120,%esi
   190f8:	48 8d 3d 41 ee 00 00 	lea    0xee41(%rip),%rdi        # 27f40 <xInterruptGivePeriod+0x150>
   190ff:	e8 08 ac fe ff       	callq  3d0c <vAssertCalled>
   19104:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   19108:	48 2b 45 f0          	sub    -0x10(%rbp),%rax
   1910c:	48 8b 4d b0          	mov    -0x50(%rbp),%rcx
   19110:	48 8b 55 b8          	mov    -0x48(%rbp),%rdx
   19114:	48 01 ca             	add    %rcx,%rdx
   19117:	48 39 d0             	cmp    %rdx,%rax
   1911a:	72 11                	jb     1912d <prvSingleTaskTests+0x384>
   1911c:	be 21 01 00 00       	mov    $0x121,%esi
   19121:	48 8d 3d 18 ee 00 00 	lea    0xee18(%rip),%rdi        # 27f40 <xInterruptGivePeriod+0x150>
   19128:	e8 df ab fe ff       	callq  3d0c <vAssertCalled>
   1912d:	48 83 7d e0 00       	cmpq   $0x0,-0x20(%rbp)
   19132:	74 11                	je     19145 <prvSingleTaskTests+0x39c>
   19134:	be 22 01 00 00       	mov    $0x122,%esi
   19139:	48 8d 3d 00 ee 00 00 	lea    0xee00(%rip),%rdi        # 27f40 <xInterruptGivePeriod+0x150>
   19140:	e8 c7 ab fe ff       	callq  3d0c <vAssertCalled>
   19145:	48 c7 45 88 00 00 00 	movq   $0x0,-0x78(%rbp)
   1914c:	00 
   1914d:	e9 3a 01 00 00       	jmpq   1928c <prvSingleTaskTests+0x4e3>
   19152:	48 8b 45 88          	mov    -0x78(%rbp),%rax
   19156:	8d 48 30             	lea    0x30(%rax),%ecx
   19159:	48 8b 55 a0          	mov    -0x60(%rbp),%rdx
   1915d:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
   19161:	89 ce                	mov    %ecx,%esi
   19163:	48 89 c7             	mov    %rax,%rdi
   19166:	e8 a5 93 fe ff       	callq  2510 <memset@plt>
   1916b:	48 8b 45 a0          	mov    -0x60(%rbp),%rax
   1916f:	48 8d 50 ff          	lea    -0x1(%rax),%rdx
   19173:	48 8b 75 d0          	mov    -0x30(%rbp),%rsi
   19177:	48 8b 85 78 ff ff ff 	mov    -0x88(%rbp),%rax
   1917e:	b9 00 00 00 00       	mov    $0x0,%ecx
   19183:	48 89 c7             	mov    %rax,%rdi
   19186:	e8 69 0d ff ff       	callq  9ef4 <xStreamBufferReceive>
   1918b:	48 89 45 e0          	mov    %rax,-0x20(%rbp)
   1918f:	48 83 7d e0 00       	cmpq   $0x0,-0x20(%rbp)
   19194:	74 11                	je     191a7 <prvSingleTaskTests+0x3fe>
   19196:	be 32 01 00 00       	mov    $0x132,%esi
   1919b:	48 8d 3d 9e ed 00 00 	lea    0xed9e(%rip),%rdi        # 27f40 <xInterruptGivePeriod+0x150>
   191a2:	e8 65 ab fe ff       	callq  3d0c <vAssertCalled>
   191a7:	48 8b 85 78 ff ff ff 	mov    -0x88(%rbp),%rax
   191ae:	48 89 c7             	mov    %rax,%rdi
   191b1:	e8 c9 10 ff ff       	callq  a27f <xStreamBufferNextMessageLengthBytes>
   191b6:	48 89 45 d8          	mov    %rax,-0x28(%rbp)
   191ba:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
   191be:	48 3b 45 a0          	cmp    -0x60(%rbp),%rax
   191c2:	74 11                	je     191d5 <prvSingleTaskTests+0x42c>
   191c4:	be 37 01 00 00       	mov    $0x137,%esi
   191c9:	48 8d 3d 70 ed 00 00 	lea    0xed70(%rip),%rdi        # 27f40 <xInterruptGivePeriod+0x150>
   191d0:	e8 37 ab fe ff       	callq  3d0c <vAssertCalled>
   191d5:	e8 f5 9b ff ff       	callq  12dcf <vPortEnterCritical>
   191da:	48 8b 55 a0          	mov    -0x60(%rbp),%rdx
   191de:	48 8b 75 d0          	mov    -0x30(%rbp),%rsi
   191e2:	48 8b 85 78 ff ff ff 	mov    -0x88(%rbp),%rax
   191e9:	b9 00 00 00 00       	mov    $0x0,%ecx
   191ee:	48 89 c7             	mov    %rax,%rdi
   191f1:	e8 5e 11 ff ff       	callq  a354 <xStreamBufferReceiveFromISR>
   191f6:	48 89 45 e0          	mov    %rax,-0x20(%rbp)
   191fa:	e8 fe 9b ff ff       	callq  12dfd <vPortExitCritical>
   191ff:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
   19203:	48 3b 45 a0          	cmp    -0x60(%rbp),%rax
   19207:	74 11                	je     1921a <prvSingleTaskTests+0x471>
   19209:	be 44 01 00 00       	mov    $0x144,%esi
   1920e:	48 8d 3d 2b ed 00 00 	lea    0xed2b(%rip),%rdi        # 27f40 <xInterruptGivePeriod+0x150>
   19215:	e8 f2 aa fe ff       	callq  3d0c <vAssertCalled>
   1921a:	48 8b 55 a0          	mov    -0x60(%rbp),%rdx
   1921e:	48 8b 4d d0          	mov    -0x30(%rbp),%rcx
   19222:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
   19226:	48 89 ce             	mov    %rcx,%rsi
   19229:	48 89 c7             	mov    %rax,%rdi
   1922c:	e8 ef 92 fe ff       	callq  2520 <memcmp@plt>
   19231:	85 c0                	test   %eax,%eax
   19233:	74 11                	je     19246 <prvSingleTaskTests+0x49d>
   19235:	be 48 01 00 00       	mov    $0x148,%esi
   1923a:	48 8d 3d ff ec 00 00 	lea    0xecff(%rip),%rdi        # 27f40 <xInterruptGivePeriod+0x150>
   19241:	e8 c6 aa fe ff       	callq  3d0c <vAssertCalled>
   19246:	48 8b 55 a0          	mov    -0x60(%rbp),%rdx
   1924a:	48 8b 45 90          	mov    -0x70(%rbp),%rax
   1924e:	48 01 d0             	add    %rdx,%rax
   19251:	48 83 c0 08          	add    $0x8,%rax
   19255:	48 89 45 90          	mov    %rax,-0x70(%rbp)
   19259:	48 8b 85 78 ff ff ff 	mov    -0x88(%rbp),%rax
   19260:	48 89 c7             	mov    %rax,%rdi
   19263:	e8 8c 04 ff ff       	callq  96f4 <xStreamBufferSpacesAvailable>
   19268:	48 89 45 e0          	mov    %rax,-0x20(%rbp)
   1926c:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
   19270:	48 3b 45 90          	cmp    -0x70(%rbp),%rax
   19274:	74 11                	je     19287 <prvSingleTaskTests+0x4de>
   19276:	be 4f 01 00 00       	mov    $0x14f,%esi
   1927b:	48 8d 3d be ec 00 00 	lea    0xecbe(%rip),%rdi        # 27f40 <xInterruptGivePeriod+0x150>
   19282:	e8 85 aa fe ff       	callq  3d0c <vAssertCalled>
   19287:	48 83 45 88 01       	addq   $0x1,-0x78(%rbp)
   1928c:	48 8b 45 88          	mov    -0x78(%rbp),%rax
   19290:	48 3b 45 98          	cmp    -0x68(%rbp),%rax
   19294:	0f 82 b8 fe ff ff    	jb     19152 <prvSingleTaskTests+0x3a9>
   1929a:	48 8b 85 78 ff ff ff 	mov    -0x88(%rbp),%rax
   192a1:	48 89 c7             	mov    %rax,%rdi
   192a4:	e8 c6 13 ff ff       	callq  a66f <xStreamBufferIsEmpty>
   192a9:	48 83 f8 01          	cmp    $0x1,%rax
   192ad:	74 11                	je     192c0 <prvSingleTaskTests+0x517>
   192af:	be 54 01 00 00       	mov    $0x154,%esi
   192b4:	48 8d 3d 85 ec 00 00 	lea    0xec85(%rip),%rdi        # 27f40 <xInterruptGivePeriod+0x150>
   192bb:	e8 4c aa fe ff       	callq  3d0c <vAssertCalled>
   192c0:	48 8b 85 78 ff ff ff 	mov    -0x88(%rbp),%rax
   192c7:	48 89 c7             	mov    %rax,%rdi
   192ca:	e8 25 04 ff ff       	callq  96f4 <xStreamBufferSpacesAvailable>
   192cf:	48 89 45 90          	mov    %rax,-0x70(%rbp)
   192d3:	48 83 7d 90 32       	cmpq   $0x32,-0x70(%rbp)
   192d8:	74 11                	je     192eb <prvSingleTaskTests+0x542>
   192da:	be 56 01 00 00       	mov    $0x156,%esi
   192df:	48 8d 3d 5a ec 00 00 	lea    0xec5a(%rip),%rdi        # 27f40 <xInterruptGivePeriod+0x150>
   192e6:	e8 21 aa fe ff       	callq  3d0c <vAssertCalled>
   192eb:	48 8b 85 78 ff ff ff 	mov    -0x88(%rbp),%rax
   192f2:	48 89 c7             	mov    %rax,%rdi
   192f5:	e8 85 0f ff ff       	callq  a27f <xStreamBufferNextMessageLengthBytes>
   192fa:	48 89 45 d8          	mov    %rax,-0x28(%rbp)
   192fe:	48 83 7d d8 00       	cmpq   $0x0,-0x28(%rbp)
   19303:	74 11                	je     19316 <prvSingleTaskTests+0x56d>
   19305:	be 59 01 00 00       	mov    $0x159,%esi
   1930a:	48 8d 3d 2f ec 00 00 	lea    0xec2f(%rip),%rdi        # 27f40 <xInterruptGivePeriod+0x150>
   19311:	e8 f6 a9 fe ff       	callq  3d0c <vAssertCalled>
   19316:	be 06 00 00 00       	mov    $0x6,%esi
   1931b:	bf 00 00 00 00       	mov    $0x0,%edi
   19320:	e8 17 37 ff ff       	callq  ca3c <vTaskPrioritySet>
   19325:	e8 6e 45 ff ff       	callq  d898 <xTaskGetTickCount>
   1932a:	48 89 45 f0          	mov    %rax,-0x10(%rbp)
   1932e:	48 8b 4d b0          	mov    -0x50(%rbp),%rcx
   19332:	48 8b 55 a0          	mov    -0x60(%rbp),%rdx
   19336:	48 8b 75 d0          	mov    -0x30(%rbp),%rsi
   1933a:	48 8b 85 78 ff ff ff 	mov    -0x88(%rbp),%rax
   19341:	48 89 c7             	mov    %rax,%rdi
   19344:	e8 ab 0b ff ff       	callq  9ef4 <xStreamBufferReceive>
   19349:	48 89 45 e0          	mov    %rax,-0x20(%rbp)
   1934d:	e8 46 45 ff ff       	callq  d898 <xTaskGetTickCount>
   19352:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
   19356:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
   1935a:	48 89 c6             	mov    %rax,%rsi
   1935d:	bf 00 00 00 00       	mov    $0x0,%edi
   19362:	e8 d5 36 ff ff       	callq  ca3c <vTaskPrioritySet>
   19367:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   1936b:	48 2b 45 f0          	sub    -0x10(%rbp),%rax
   1936f:	48 39 45 b0          	cmp    %rax,-0x50(%rbp)
   19373:	76 11                	jbe    19386 <prvSingleTaskTests+0x5dd>
   19375:	be 65 01 00 00       	mov    $0x165,%esi
   1937a:	48 8d 3d bf eb 00 00 	lea    0xebbf(%rip),%rdi        # 27f40 <xInterruptGivePeriod+0x150>
   19381:	e8 86 a9 fe ff       	callq  3d0c <vAssertCalled>
   19386:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   1938a:	48 2b 45 f0          	sub    -0x10(%rbp),%rax
   1938e:	48 8b 4d b0          	mov    -0x50(%rbp),%rcx
   19392:	48 8b 55 b8          	mov    -0x48(%rbp),%rdx
   19396:	48 01 ca             	add    %rcx,%rdx
   19399:	48 39 d0             	cmp    %rdx,%rax
   1939c:	72 11                	jb     193af <prvSingleTaskTests+0x606>
   1939e:	be 66 01 00 00       	mov    $0x166,%esi
   193a3:	48 8d 3d 96 eb 00 00 	lea    0xeb96(%rip),%rdi        # 27f40 <xInterruptGivePeriod+0x150>
   193aa:	e8 5d a9 fe ff       	callq  3d0c <vAssertCalled>
   193af:	48 83 7d e0 00       	cmpq   $0x0,-0x20(%rbp)
   193b4:	74 11                	je     193c7 <prvSingleTaskTests+0x61e>
   193b6:	be 67 01 00 00       	mov    $0x167,%esi
   193bb:	48 8d 3d 7e eb 00 00 	lea    0xeb7e(%rip),%rdi        # 27f40 <xInterruptGivePeriod+0x150>
   193c2:	e8 45 a9 fe ff       	callq  3d0c <vAssertCalled>
   193c7:	b8 2a 00 00 00       	mov    $0x2a,%eax
   193cc:	48 2b 45 a8          	sub    -0x58(%rbp),%rax
   193d0:	48 89 45 90          	mov    %rax,-0x70(%rbp)
   193d4:	48 c7 45 88 00 00 00 	movq   $0x0,-0x78(%rbp)
   193db:	00 
   193dc:	e9 47 01 00 00       	jmpq   19528 <prvSingleTaskTests+0x77f>
   193e1:	48 8b 45 88          	mov    -0x78(%rbp),%rax
   193e5:	8d 48 30             	lea    0x30(%rax),%ecx
   193e8:	48 8b 55 a8          	mov    -0x58(%rbp),%rdx
   193ec:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
   193f0:	89 ce                	mov    %ecx,%esi
   193f2:	48 89 c7             	mov    %rax,%rdi
   193f5:	e8 16 91 fe ff       	callq  2510 <memset@plt>
   193fa:	48 8b 55 a8          	mov    -0x58(%rbp),%rdx
   193fe:	48 8b 75 c8          	mov    -0x38(%rbp),%rsi
   19402:	48 8b 85 78 ff ff ff 	mov    -0x88(%rbp),%rax
   19409:	b9 00 00 00 00       	mov    $0x0,%ecx
   1940e:	48 89 c7             	mov    %rax,%rdi
   19411:	e8 b3 03 ff ff       	callq  97c9 <xStreamBufferSend>
   19416:	48 89 45 e0          	mov    %rax,-0x20(%rbp)
   1941a:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
   1941e:	48 3b 45 a8          	cmp    -0x58(%rbp),%rax
   19422:	74 11                	je     19435 <prvSingleTaskTests+0x68c>
   19424:	be 7d 01 00 00       	mov    $0x17d,%esi
   19429:	48 8d 3d 10 eb 00 00 	lea    0xeb10(%rip),%rdi        # 27f40 <xInterruptGivePeriod+0x150>
   19430:	e8 d7 a8 fe ff       	callq  3d0c <vAssertCalled>
   19435:	48 8b 85 78 ff ff ff 	mov    -0x88(%rbp),%rax
   1943c:	48 89 c7             	mov    %rax,%rdi
   1943f:	e8 3b 0e ff ff       	callq  a27f <xStreamBufferNextMessageLengthBytes>
   19444:	48 89 45 d8          	mov    %rax,-0x28(%rbp)
   19448:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
   1944c:	48 3b 45 a8          	cmp    -0x58(%rbp),%rax
   19450:	74 11                	je     19463 <prvSingleTaskTests+0x6ba>
   19452:	be 82 01 00 00       	mov    $0x182,%esi
   19457:	48 8d 3d e2 ea 00 00 	lea    0xeae2(%rip),%rdi        # 27f40 <xInterruptGivePeriod+0x150>
   1945e:	e8 a9 a8 fe ff       	callq  3d0c <vAssertCalled>
   19463:	48 8b 85 78 ff ff ff 	mov    -0x88(%rbp),%rax
   1946a:	48 89 c7             	mov    %rax,%rdi
   1946d:	e8 82 02 ff ff       	callq  96f4 <xStreamBufferSpacesAvailable>
   19472:	48 89 45 e0          	mov    %rax,-0x20(%rbp)
   19476:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
   1947a:	48 3b 45 90          	cmp    -0x70(%rbp),%rax
   1947e:	74 11                	je     19491 <prvSingleTaskTests+0x6e8>
   19480:	be 89 01 00 00       	mov    $0x189,%esi
   19485:	48 8d 3d b4 ea 00 00 	lea    0xeab4(%rip),%rdi        # 27f40 <xInterruptGivePeriod+0x150>
   1948c:	e8 7b a8 fe ff       	callq  3d0c <vAssertCalled>
   19491:	48 8b 55 a8          	mov    -0x58(%rbp),%rdx
   19495:	48 8b 75 d0          	mov    -0x30(%rbp),%rsi
   19499:	48 8b 85 78 ff ff ff 	mov    -0x88(%rbp),%rax
   194a0:	b9 00 00 00 00       	mov    $0x0,%ecx
   194a5:	48 89 c7             	mov    %rax,%rdi
   194a8:	e8 47 0a ff ff       	callq  9ef4 <xStreamBufferReceive>
   194ad:	48 89 45 e0          	mov    %rax,-0x20(%rbp)
   194b1:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
   194b5:	48 3b 45 a8          	cmp    -0x58(%rbp),%rax
   194b9:	74 11                	je     194cc <prvSingleTaskTests+0x723>
   194bb:	be 8e 01 00 00       	mov    $0x18e,%esi
   194c0:	48 8d 3d 79 ea 00 00 	lea    0xea79(%rip),%rdi        # 27f40 <xInterruptGivePeriod+0x150>
   194c7:	e8 40 a8 fe ff       	callq  3d0c <vAssertCalled>
   194cc:	48 8b 55 a8          	mov    -0x58(%rbp),%rdx
   194d0:	48 8b 4d d0          	mov    -0x30(%rbp),%rcx
   194d4:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
   194d8:	48 89 ce             	mov    %rcx,%rsi
   194db:	48 89 c7             	mov    %rax,%rdi
   194de:	e8 3d 90 fe ff       	callq  2520 <memcmp@plt>
   194e3:	85 c0                	test   %eax,%eax
   194e5:	74 11                	je     194f8 <prvSingleTaskTests+0x74f>
   194e7:	be 92 01 00 00       	mov    $0x192,%esi
   194ec:	48 8d 3d 4d ea 00 00 	lea    0xea4d(%rip),%rdi        # 27f40 <xInterruptGivePeriod+0x150>
   194f3:	e8 14 a8 fe ff       	callq  3d0c <vAssertCalled>
   194f8:	48 8b 85 78 ff ff ff 	mov    -0x88(%rbp),%rax
   194ff:	48 89 c7             	mov    %rax,%rdi
   19502:	e8 78 0d ff ff       	callq  a27f <xStreamBufferNextMessageLengthBytes>
   19507:	48 89 45 d8          	mov    %rax,-0x28(%rbp)
   1950b:	48 83 7d d8 00       	cmpq   $0x0,-0x28(%rbp)
   19510:	74 11                	je     19523 <prvSingleTaskTests+0x77a>
   19512:	be 97 01 00 00       	mov    $0x197,%esi
   19517:	48 8d 3d 22 ea 00 00 	lea    0xea22(%rip),%rdi        # 27f40 <xInterruptGivePeriod+0x150>
   1951e:	e8 e9 a7 fe ff       	callq  3d0c <vAssertCalled>
   19523:	48 83 45 88 01       	addq   $0x1,-0x78(%rbp)
   19528:	48 83 7d 88 63       	cmpq   $0x63,-0x78(%rbp)
   1952d:	0f 86 ae fe ff ff    	jbe    193e1 <prvSingleTaskTests+0x638>
   19533:	48 8b 85 78 ff ff ff 	mov    -0x88(%rbp),%rax
   1953a:	48 89 c7             	mov    %rax,%rdi
   1953d:	e8 2d 11 ff ff       	callq  a66f <xStreamBufferIsEmpty>
   19542:	48 83 f8 01          	cmp    $0x1,%rax
   19546:	74 11                	je     19559 <prvSingleTaskTests+0x7b0>
   19548:	be 9c 01 00 00       	mov    $0x19c,%esi
   1954d:	48 8d 3d ec e9 00 00 	lea    0xe9ec(%rip),%rdi        # 27f40 <xInterruptGivePeriod+0x150>
   19554:	e8 b3 a7 fe ff       	callq  3d0c <vAssertCalled>
   19559:	48 8b 85 78 ff ff ff 	mov    -0x88(%rbp),%rax
   19560:	48 89 c7             	mov    %rax,%rdi
   19563:	e8 8c 01 ff ff       	callq  96f4 <xStreamBufferSpacesAvailable>
   19568:	48 89 45 90          	mov    %rax,-0x70(%rbp)
   1956c:	48 83 7d 90 32       	cmpq   $0x32,-0x70(%rbp)
   19571:	74 11                	je     19584 <prvSingleTaskTests+0x7db>
   19573:	be 9e 01 00 00       	mov    $0x19e,%esi
   19578:	48 8d 3d c1 e9 00 00 	lea    0xe9c1(%rip),%rdi        # 27f40 <xInterruptGivePeriod+0x150>
   1957f:	e8 88 a7 fe ff       	callq  3d0c <vAssertCalled>
   19584:	48 8b 35 cd 7a 01 00 	mov    0x17acd(%rip),%rsi        # 31058 <pc55ByteString>
   1958b:	48 8b 85 78 ff ff ff 	mov    -0x88(%rbp),%rax
   19592:	b9 00 00 00 00       	mov    $0x0,%ecx
   19597:	ba 32 00 00 00       	mov    $0x32,%edx
   1959c:	48 89 c7             	mov    %rax,%rdi
   1959f:	e8 25 02 ff ff       	callq  97c9 <xStreamBufferSend>
   195a4:	48 89 45 e0          	mov    %rax,-0x20(%rbp)
   195a8:	48 83 7d e0 00       	cmpq   $0x0,-0x20(%rbp)
   195ad:	74 11                	je     195c0 <prvSingleTaskTests+0x817>
   195af:	be a4 01 00 00       	mov    $0x1a4,%esi
   195b4:	48 8d 3d 85 e9 00 00 	lea    0xe985(%rip),%rdi        # 27f40 <xInterruptGivePeriod+0x150>
   195bb:	e8 4c a7 fe ff       	callq  3d0c <vAssertCalled>
   195c0:	48 8b 85 78 ff ff ff 	mov    -0x88(%rbp),%rax
   195c7:	48 89 c7             	mov    %rax,%rdi
   195ca:	e8 b0 0c ff ff       	callq  a27f <xStreamBufferNextMessageLengthBytes>
   195cf:	48 89 45 d8          	mov    %rax,-0x28(%rbp)
   195d3:	48 83 7d d8 00       	cmpq   $0x0,-0x28(%rbp)
   195d8:	74 11                	je     195eb <prvSingleTaskTests+0x842>
   195da:	be b9 01 00 00       	mov    $0x1b9,%esi
   195df:	48 8d 3d 5a e9 00 00 	lea    0xe95a(%rip),%rdi        # 27f40 <xInterruptGivePeriod+0x150>
   195e6:	e8 21 a7 fe ff       	callq  3d0c <vAssertCalled>
   195eb:	48 8b 35 66 7a 01 00 	mov    0x17a66(%rip),%rsi        # 31058 <pc55ByteString>
   195f2:	48 8b 85 78 ff ff ff 	mov    -0x88(%rbp),%rax
   195f9:	b9 00 00 00 00       	mov    $0x0,%ecx
   195fe:	ba 2a 00 00 00       	mov    $0x2a,%edx
   19603:	48 89 c7             	mov    %rax,%rdi
   19606:	e8 be 01 ff ff       	callq  97c9 <xStreamBufferSend>
   1960b:	48 89 45 e0          	mov    %rax,-0x20(%rbp)
   1960f:	48 83 7d e0 2a       	cmpq   $0x2a,-0x20(%rbp)
   19614:	74 11                	je     19627 <prvSingleTaskTests+0x87e>
   19616:	be be 01 00 00       	mov    $0x1be,%esi
   1961b:	48 8d 3d 1e e9 00 00 	lea    0xe91e(%rip),%rdi        # 27f40 <xInterruptGivePeriod+0x150>
   19622:	e8 e5 a6 fe ff       	callq  3d0c <vAssertCalled>
   19627:	48 8b 85 78 ff ff ff 	mov    -0x88(%rbp),%rax
   1962e:	48 89 c7             	mov    %rax,%rdi
   19631:	e8 49 0c ff ff       	callq  a27f <xStreamBufferNextMessageLengthBytes>
   19636:	48 89 45 d8          	mov    %rax,-0x28(%rbp)
   1963a:	48 83 7d d8 2a       	cmpq   $0x2a,-0x28(%rbp)
   1963f:	74 11                	je     19652 <prvSingleTaskTests+0x8a9>
   19641:	be c1 01 00 00       	mov    $0x1c1,%esi
   19646:	48 8d 3d f3 e8 00 00 	lea    0xe8f3(%rip),%rdi        # 27f40 <xInterruptGivePeriod+0x150>
   1964d:	e8 ba a6 fe ff       	callq  3d0c <vAssertCalled>
   19652:	48 8b 75 c0          	mov    -0x40(%rbp),%rsi
   19656:	48 8b 85 78 ff ff ff 	mov    -0x88(%rbp),%rax
   1965d:	b9 00 00 00 00       	mov    $0x0,%ecx
   19662:	ba 2a 00 00 00       	mov    $0x2a,%edx
   19667:	48 89 c7             	mov    %rax,%rdi
   1966a:	e8 85 08 ff ff       	callq  9ef4 <xStreamBufferReceive>
   1966f:	48 89 45 e0          	mov    %rax,-0x20(%rbp)
   19673:	48 83 7d e0 2a       	cmpq   $0x2a,-0x20(%rbp)
   19678:	74 11                	je     1968b <prvSingleTaskTests+0x8e2>
   1967a:	be c4 01 00 00       	mov    $0x1c4,%esi
   1967f:	48 8d 3d ba e8 00 00 	lea    0xe8ba(%rip),%rdi        # 27f40 <xInterruptGivePeriod+0x150>
   19686:	e8 81 a6 fe ff       	callq  3d0c <vAssertCalled>
   1968b:	48 8b 0d c6 79 01 00 	mov    0x179c6(%rip),%rcx        # 31058 <pc55ByteString>
   19692:	48 8b 45 c0          	mov    -0x40(%rbp),%rax
   19696:	ba 2a 00 00 00       	mov    $0x2a,%edx
   1969b:	48 89 ce             	mov    %rcx,%rsi
   1969e:	48 89 c7             	mov    %rax,%rdi
   196a1:	e8 7a 8e fe ff       	callq  2520 <memcmp@plt>
   196a6:	85 c0                	test   %eax,%eax
   196a8:	74 11                	je     196bb <prvSingleTaskTests+0x912>
   196aa:	be c6 01 00 00       	mov    $0x1c6,%esi
   196af:	48 8d 3d 8a e8 00 00 	lea    0xe88a(%rip),%rdi        # 27f40 <xInterruptGivePeriod+0x150>
   196b6:	e8 51 a6 fe ff       	callq  3d0c <vAssertCalled>
   196bb:	48 8b 45 c0          	mov    -0x40(%rbp),%rax
   196bf:	48 89 c7             	mov    %rax,%rdi
   196c2:	e8 d9 90 ff ff       	callq  127a0 <vPortFree>
   196c7:	48 8b 85 78 ff ff ff 	mov    -0x88(%rbp),%rax
   196ce:	48 89 c7             	mov    %rax,%rdi
   196d1:	e8 29 fe fe ff       	callq  94ff <xStreamBufferReset>
   196d6:	90                   	nop
   196d7:	c9                   	leaveq 
   196d8:	c3                   	retq   

00000000000196d9 <prvNonBlockingSenderTask>:
   196d9:	f3 0f 1e fa          	endbr64 
   196dd:	55                   	push   %rbp
   196de:	48 89 e5             	mov    %rsp,%rbp
   196e1:	48 83 ec 40          	sub    $0x40,%rsp
   196e5:	48 89 7d c8          	mov    %rdi,-0x38(%rbp)
   196e9:	64 48 8b 04 25 28 00 	mov    %fs:0x28,%rax
   196f0:	00 00 
   196f2:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
   196f6:	31 c0                	xor    %eax,%eax
   196f8:	c7 45 d0 00 00 00 00 	movl   $0x0,-0x30(%rbp)
   196ff:	c7 45 d4 dc 05 00 00 	movl   $0x5dc,-0x2c(%rbp)
   19706:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
   1970a:	48 89 45 e0          	mov    %rax,-0x20(%rbp)
   1970e:	48 8d 45 ec          	lea    -0x14(%rbp),%rax
   19712:	ba 0c 00 00 00       	mov    $0xc,%edx
   19717:	be 00 00 00 00       	mov    $0x0,%esi
   1971c:	48 89 c7             	mov    %rax,%rdi
   1971f:	e8 ec 8d fe ff       	callq  2510 <memset@plt>
   19724:	8b 55 d0             	mov    -0x30(%rbp),%edx
   19727:	48 8d 45 ec          	lea    -0x14(%rbp),%rax
   1972b:	48 8d 35 5c e8 00 00 	lea    0xe85c(%rip),%rsi        # 27f8e <xInterruptGivePeriod+0x19e>
   19732:	48 89 c7             	mov    %rax,%rdi
   19735:	b8 00 00 00 00       	mov    $0x0,%eax
   1973a:	e8 71 8f fe ff       	callq  26b0 <sprintf@plt>
   1973f:	48 8d 45 ec          	lea    -0x14(%rbp),%rax
   19743:	48 89 c7             	mov    %rax,%rdi
   19746:	e8 65 8d fe ff       	callq  24b0 <strlen@plt>
   1974b:	48 89 45 d8          	mov    %rax,-0x28(%rbp)
   1974f:	48 8d 45 ec          	lea    -0x14(%rbp),%rax
   19753:	48 89 c7             	mov    %rax,%rdi
   19756:	e8 55 8d fe ff       	callq  24b0 <strlen@plt>
   1975b:	48 89 c2             	mov    %rax,%rdx
   1975e:	48 8d 75 ec          	lea    -0x14(%rbp),%rsi
   19762:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
   19766:	b9 00 00 00 00       	mov    $0x0,%ecx
   1976b:	48 89 c7             	mov    %rax,%rdi
   1976e:	e8 56 00 ff ff       	callq  97c9 <xStreamBufferSend>
   19773:	48 39 45 d8          	cmp    %rax,-0x28(%rbp)
   19777:	75 d6                	jne    1974f <prvNonBlockingSenderTask+0x76>
   19779:	83 45 d0 01          	addl   $0x1,-0x30(%rbp)
   1977d:	8b 45 d0             	mov    -0x30(%rbp),%eax
   19780:	3b 45 d4             	cmp    -0x2c(%rbp),%eax
   19783:	7e 07                	jle    1978c <prvNonBlockingSenderTask+0xb3>
   19785:	c7 45 d0 00 00 00 00 	movl   $0x0,-0x30(%rbp)
   1978c:	48 8d 45 ec          	lea    -0x14(%rbp),%rax
   19790:	ba 0c 00 00 00       	mov    $0xc,%edx
   19795:	be 00 00 00 00       	mov    $0x0,%esi
   1979a:	48 89 c7             	mov    %rax,%rdi
   1979d:	e8 6e 8d fe ff       	callq  2510 <memset@plt>
   197a2:	8b 55 d0             	mov    -0x30(%rbp),%edx
   197a5:	48 8d 45 ec          	lea    -0x14(%rbp),%rax
   197a9:	48 8d 35 de e7 00 00 	lea    0xe7de(%rip),%rsi        # 27f8e <xInterruptGivePeriod+0x19e>
   197b0:	48 89 c7             	mov    %rax,%rdi
   197b3:	b8 00 00 00 00       	mov    $0x0,%eax
   197b8:	e8 f3 8e fe ff       	callq  26b0 <sprintf@plt>
   197bd:	48 8d 45 ec          	lea    -0x14(%rbp),%rax
   197c1:	48 89 c7             	mov    %rax,%rdi
   197c4:	e8 e7 8c fe ff       	callq  24b0 <strlen@plt>
   197c9:	48 89 45 d8          	mov    %rax,-0x28(%rbp)
   197cd:	eb 80                	jmp    1974f <prvNonBlockingSenderTask+0x76>

00000000000197cf <prvNonBlockingReceiverTask>:
   197cf:	f3 0f 1e fa          	endbr64 
   197d3:	55                   	push   %rbp
   197d4:	48 89 e5             	mov    %rsp,%rbp
   197d7:	48 83 ec 60          	sub    $0x60,%rsp
   197db:	48 89 7d a8          	mov    %rdi,-0x58(%rbp)
   197df:	64 48 8b 04 25 28 00 	mov    %fs:0x28,%rax
   197e6:	00 00 
   197e8:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
   197ec:	31 c0                	xor    %eax,%eax
   197ee:	48 c7 45 c0 00 00 00 	movq   $0x0,-0x40(%rbp)
   197f5:	00 
   197f6:	c7 45 b8 00 00 00 00 	movl   $0x0,-0x48(%rbp)
   197fd:	c7 45 bc dc 05 00 00 	movl   $0x5dc,-0x44(%rbp)
   19804:	48 8b 45 a8          	mov    -0x58(%rbp),%rax
   19808:	48 89 45 d0          	mov    %rax,-0x30(%rbp)
   1980c:	48 8d 45 e0          	lea    -0x20(%rbp),%rax
   19810:	ba 0c 00 00 00       	mov    $0xc,%edx
   19815:	be 00 00 00 00       	mov    $0x0,%esi
   1981a:	48 89 c7             	mov    %rax,%rdi
   1981d:	e8 ee 8c fe ff       	callq  2510 <memset@plt>
   19822:	48 8d 45 ec          	lea    -0x14(%rbp),%rax
   19826:	ba 0c 00 00 00       	mov    $0xc,%edx
   1982b:	be 00 00 00 00       	mov    $0x0,%esi
   19830:	48 89 c7             	mov    %rax,%rdi
   19833:	e8 d8 8c fe ff       	callq  2510 <memset@plt>
   19838:	8b 55 b8             	mov    -0x48(%rbp),%edx
   1983b:	48 8d 45 e0          	lea    -0x20(%rbp),%rax
   1983f:	48 8d 35 48 e7 00 00 	lea    0xe748(%rip),%rsi        # 27f8e <xInterruptGivePeriod+0x19e>
   19846:	48 89 c7             	mov    %rax,%rdi
   19849:	b8 00 00 00 00       	mov    $0x0,%eax
   1984e:	e8 5d 8e fe ff       	callq  26b0 <sprintf@plt>
   19853:	48 8d 45 e0          	lea    -0x20(%rbp),%rax
   19857:	48 89 c7             	mov    %rax,%rdi
   1985a:	e8 51 8c fe ff       	callq  24b0 <strlen@plt>
   1985f:	48 89 45 c8          	mov    %rax,-0x38(%rbp)
   19863:	48 8d 75 ec          	lea    -0x14(%rbp),%rsi
   19867:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
   1986b:	b9 00 00 00 00       	mov    $0x0,%ecx
   19870:	ba 0c 00 00 00       	mov    $0xc,%edx
   19875:	48 89 c7             	mov    %rax,%rdi
   19878:	e8 77 06 ff ff       	callq  9ef4 <xStreamBufferReceive>
   1987d:	48 89 45 d8          	mov    %rax,-0x28(%rbp)
   19881:	48 83 7d d8 00       	cmpq   $0x0,-0x28(%rbp)
   19886:	74 12                	je     1989a <prvNonBlockingReceiverTask+0xcb>
   19888:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
   1988c:	48 3b 45 c8          	cmp    -0x38(%rbp),%rax
   19890:	74 08                	je     1989a <prvNonBlockingReceiverTask+0xcb>
   19892:	48 c7 45 c0 01 00 00 	movq   $0x1,-0x40(%rbp)
   19899:	00 
   1989a:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
   1989e:	48 3b 45 c8          	cmp    -0x38(%rbp),%rax
   198a2:	75 bf                	jne    19863 <prvNonBlockingReceiverTask+0x94>
   198a4:	48 8d 55 e0          	lea    -0x20(%rbp),%rdx
   198a8:	48 8d 45 ec          	lea    -0x14(%rbp),%rax
   198ac:	48 89 d6             	mov    %rdx,%rsi
   198af:	48 89 c7             	mov    %rax,%rdi
   198b2:	e8 99 8c fe ff       	callq  2550 <strcmp@plt>
   198b7:	85 c0                	test   %eax,%eax
   198b9:	74 08                	je     198c3 <prvNonBlockingReceiverTask+0xf4>
   198bb:	48 c7 45 c0 01 00 00 	movq   $0x1,-0x40(%rbp)
   198c2:	00 
   198c3:	83 45 b8 01          	addl   $0x1,-0x48(%rbp)
   198c7:	8b 45 b8             	mov    -0x48(%rbp),%eax
   198ca:	3b 45 bc             	cmp    -0x44(%rbp),%eax
   198cd:	7e 07                	jle    198d6 <prvNonBlockingReceiverTask+0x107>
   198cf:	c7 45 b8 00 00 00 00 	movl   $0x0,-0x48(%rbp)
   198d6:	48 8d 45 e0          	lea    -0x20(%rbp),%rax
   198da:	ba 0c 00 00 00       	mov    $0xc,%edx
   198df:	be 00 00 00 00       	mov    $0x0,%esi
   198e4:	48 89 c7             	mov    %rax,%rdi
   198e7:	e8 24 8c fe ff       	callq  2510 <memset@plt>
   198ec:	48 8d 45 ec          	lea    -0x14(%rbp),%rax
   198f0:	ba 0c 00 00 00       	mov    $0xc,%edx
   198f5:	be 00 00 00 00       	mov    $0x0,%esi
   198fa:	48 89 c7             	mov    %rax,%rdi
   198fd:	e8 0e 8c fe ff       	callq  2510 <memset@plt>
   19902:	8b 55 b8             	mov    -0x48(%rbp),%edx
   19905:	48 8d 45 e0          	lea    -0x20(%rbp),%rax
   19909:	48 8d 35 7e e6 00 00 	lea    0xe67e(%rip),%rsi        # 27f8e <xInterruptGivePeriod+0x19e>
   19910:	48 89 c7             	mov    %rax,%rdi
   19913:	b8 00 00 00 00       	mov    $0x0,%eax
   19918:	e8 93 8d fe ff       	callq  26b0 <sprintf@plt>
   1991d:	48 8d 45 e0          	lea    -0x20(%rbp),%rax
   19921:	48 89 c7             	mov    %rax,%rdi
   19924:	e8 87 8b fe ff       	callq  24b0 <strlen@plt>
   19929:	48 89 45 c8          	mov    %rax,-0x38(%rbp)
   1992d:	48 83 7d c0 00       	cmpq   $0x0,-0x40(%rbp)
   19932:	0f 85 2b ff ff ff    	jne    19863 <prvNonBlockingReceiverTask+0x94>
   19938:	8b 05 3a ca 11 00    	mov    0x11ca3a(%rip),%eax        # 136378 <ulNonBlockingRxCounter>
   1993e:	83 c0 01             	add    $0x1,%eax
   19941:	89 05 31 ca 11 00    	mov    %eax,0x11ca31(%rip)        # 136378 <ulNonBlockingRxCounter>
   19947:	e9 17 ff ff ff       	jmpq   19863 <prvNonBlockingReceiverTask+0x94>

000000000001994c <prvSenderTask>:
   1994c:	f3 0f 1e fa          	endbr64 
   19950:	55                   	push   %rbp
   19951:	48 89 e5             	mov    %rsp,%rbp
   19954:	48 81 ec b0 00 00 00 	sub    $0xb0,%rsp
   1995b:	48 89 bd 58 ff ff ff 	mov    %rdi,-0xa8(%rbp)
   19962:	64 48 8b 04 25 28 00 	mov    %fs:0x28,%rax
   19969:	00 00 
   1996b:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
   1996f:	31 c0                	xor    %eax,%eax
   19971:	c7 85 68 ff ff ff 00 	movl   $0x0,-0x98(%rbp)
   19978:	00 00 00 
   1997b:	c7 85 6c ff ff ff 64 	movl   $0x64,-0x94(%rbp)
   19982:	00 00 00 
   19985:	48 c7 85 70 ff ff ff 	movq   $0xaf,-0x90(%rbp)
   1998c:	af 00 00 00 
   19990:	48 c7 85 78 ff ff ff 	movq   $0x32,-0x88(%rbp)
   19997:	32 00 00 00 
   1999b:	bf 00 00 00 00       	mov    $0x0,%edi
   199a0:	e8 04 30 ff ff       	callq  c9a9 <uxTaskPriorityGet>
   199a5:	48 89 45 80          	mov    %rax,-0x80(%rbp)
   199a9:	48 83 7d 80 01       	cmpq   $0x1,-0x80(%rbp)
   199ae:	76 11                	jbe    199c1 <prvSenderTask+0x75>
   199b0:	be 53 02 00 00       	mov    $0x253,%esi
   199b5:	48 8d 3d 84 e5 00 00 	lea    0xe584(%rip),%rdi        # 27f40 <xInterruptGivePeriod+0x150>
   199bc:	e8 4b a3 fe ff       	callq  3d0c <vAssertCalled>
   199c1:	48 8b 55 80          	mov    -0x80(%rbp),%rdx
   199c5:	48 89 d0             	mov    %rdx,%rax
   199c8:	48 c1 e0 03          	shl    $0x3,%rax
   199cc:	48 01 d0             	add    %rdx,%rax
   199cf:	48 c1 e0 03          	shl    $0x3,%rax
   199d3:	48 8d 15 86 c8 11 00 	lea    0x11c886(%rip),%rdx        # 136260 <xStaticMessageBuffers>
   199da:	48 8d 0c 10          	lea    (%rax,%rdx,1),%rcx
   199de:	48 8b 55 80          	mov    -0x80(%rbp),%rdx
   199e2:	48 89 d0             	mov    %rdx,%rax
   199e5:	48 01 c0             	add    %rax,%rax
   199e8:	48 01 d0             	add    %rdx,%rax
   199eb:	48 89 c2             	mov    %rax,%rdx
   199ee:	48 c1 e2 04          	shl    $0x4,%rdx
   199f2:	48 01 d0             	add    %rdx,%rax
   199f5:	48 8d 15 04 c9 11 00 	lea    0x11c904(%rip),%rdx        # 136300 <ucBufferStorage>
   199fc:	48 01 d0             	add    %rdx,%rax
   199ff:	49 89 c8             	mov    %rcx,%r8
   19a02:	48 89 c1             	mov    %rax,%rcx
   19a05:	ba 01 00 00 00       	mov    $0x1,%edx
   19a0a:	be 00 00 00 00       	mov    $0x0,%esi
   19a0f:	bf 33 00 00 00       	mov    $0x33,%edi
   19a14:	e8 98 f6 fe ff       	callq  90b1 <xStreamBufferGenericCreateStatic>
   19a19:	48 89 45 88          	mov    %rax,-0x78(%rbp)
   19a1d:	bf 00 00 00 00       	mov    $0x0,%edi
   19a22:	e8 82 2f ff ff       	callq  c9a9 <uxTaskPriorityGet>
   19a27:	48 85 c0             	test   %rax,%rax
   19a2a:	75 3c                	jne    19a68 <prvSenderTask+0x11c>
   19a2c:	48 8b 45 88          	mov    -0x78(%rbp),%rax
   19a30:	48 89 c7             	mov    %rax,%rdi
   19a33:	e8 71 f3 ff ff       	callq  18da9 <prvSingleTaskTests>
   19a38:	8b 05 3e c9 11 00    	mov    0x11c93e(%rip),%eax        # 13637c <xBlockingStackSize>
   19a3e:	48 8b 55 88          	mov    -0x78(%rbp),%rdx
   19a42:	41 b9 00 00 00 00    	mov    $0x0,%r9d
   19a48:	41 b8 01 00 00 00    	mov    $0x1,%r8d
   19a4e:	48 89 d1             	mov    %rdx,%rcx
   19a51:	89 c2                	mov    %eax,%edx
   19a53:	48 8d 35 37 e5 00 00 	lea    0xe537(%rip),%rsi        # 27f91 <xInterruptGivePeriod+0x1a1>
   19a5a:	48 8d 3d 43 01 00 00 	lea    0x143(%rip),%rdi        # 19ba4 <prvReceiverTask>
   19a61:	e8 91 22 ff ff       	callq  bcf7 <xTaskCreate>
   19a66:	eb 2e                	jmp    19a96 <prvSenderTask+0x14a>
   19a68:	8b 05 0e c9 11 00    	mov    0x11c90e(%rip),%eax        # 13637c <xBlockingStackSize>
   19a6e:	48 8b 55 88          	mov    -0x78(%rbp),%rdx
   19a72:	41 b9 00 00 00 00    	mov    $0x0,%r9d
   19a78:	41 b8 00 00 00 00    	mov    $0x0,%r8d
   19a7e:	48 89 d1             	mov    %rdx,%rcx
   19a81:	89 c2                	mov    %eax,%edx
   19a83:	48 8d 35 07 e5 00 00 	lea    0xe507(%rip),%rsi        # 27f91 <xInterruptGivePeriod+0x1a1>
   19a8a:	48 8d 3d 13 01 00 00 	lea    0x113(%rip),%rdi        # 19ba4 <prvReceiverTask>
   19a91:	e8 61 22 ff ff       	callq  bcf7 <xTaskCreate>
   19a96:	48 8d 45 ec          	lea    -0x14(%rbp),%rax
   19a9a:	ba 0c 00 00 00       	mov    $0xc,%edx
   19a9f:	be 00 00 00 00       	mov    $0x0,%esi
   19aa4:	48 89 c7             	mov    %rax,%rdi
   19aa7:	e8 64 8a fe ff       	callq  2510 <memset@plt>
   19aac:	8b 95 68 ff ff ff    	mov    -0x98(%rbp),%edx
   19ab2:	48 8d 45 ec          	lea    -0x14(%rbp),%rax
   19ab6:	48 8d 35 d1 e4 00 00 	lea    0xe4d1(%rip),%rsi        # 27f8e <xInterruptGivePeriod+0x19e>
   19abd:	48 89 c7             	mov    %rax,%rdi
   19ac0:	b8 00 00 00 00       	mov    $0x0,%eax
   19ac5:	e8 e6 8b fe ff       	callq  26b0 <sprintf@plt>
   19aca:	48 8d 45 ec          	lea    -0x14(%rbp),%rax
   19ace:	48 89 c7             	mov    %rax,%rdi
   19ad1:	e8 da 89 fe ff       	callq  24b0 <strlen@plt>
   19ad6:	48 89 c7             	mov    %rax,%rdi
   19ad9:	48 8b 95 70 ff ff ff 	mov    -0x90(%rbp),%rdx
   19ae0:	48 8d 75 ec          	lea    -0x14(%rbp),%rsi
   19ae4:	48 8b 45 88          	mov    -0x78(%rbp),%rax
   19ae8:	48 89 d1             	mov    %rdx,%rcx
   19aeb:	48 89 fa             	mov    %rdi,%rdx
   19aee:	48 89 c7             	mov    %rax,%rdi
   19af1:	e8 d3 fc fe ff       	callq  97c9 <xStreamBufferSend>
   19af6:	48 89 45 90          	mov    %rax,-0x70(%rbp)
   19afa:	48 83 7d 90 00       	cmpq   $0x0,-0x70(%rbp)
   19aff:	74 c9                	je     19aca <prvSenderTask+0x17e>
   19b01:	83 85 68 ff ff ff 01 	addl   $0x1,-0x98(%rbp)
   19b08:	8b 85 68 ff ff ff    	mov    -0x98(%rbp),%eax
   19b0e:	99                   	cltd   
   19b0f:	f7 bd 6c ff ff ff    	idivl  -0x94(%rbp)
   19b15:	89 d0                	mov    %edx,%eax
   19b17:	85 c0                	test   %eax,%eax
   19b19:	0f 85 77 ff ff ff    	jne    19a96 <prvSenderTask+0x14a>
   19b1f:	48 8b 45 80          	mov    -0x80(%rbp),%rax
   19b23:	48 8d 14 85 00 00 00 	lea    0x0(,%rax,4),%rdx
   19b2a:	00 
   19b2b:	48 8d 05 36 c8 11 00 	lea    0x11c836(%rip),%rax        # 136368 <ulSenderLoopCounters>
   19b32:	8b 04 02             	mov    (%rdx,%rax,1),%eax
   19b35:	8d 48 01             	lea    0x1(%rax),%ecx
   19b38:	48 8b 45 80          	mov    -0x80(%rbp),%rax
   19b3c:	48 8d 14 85 00 00 00 	lea    0x0(,%rax,4),%rdx
   19b43:	00 
   19b44:	48 8d 05 1d c8 11 00 	lea    0x11c81d(%rip),%rax        # 136368 <ulSenderLoopCounters>
   19b4b:	89 0c 02             	mov    %ecx,(%rdx,%rax,1)
   19b4e:	bf 00 00 00 00       	mov    $0x0,%edi
   19b53:	e8 51 2e ff ff       	callq  c9a9 <uxTaskPriorityGet>
   19b58:	48 83 f8 01          	cmp    $0x1,%rax
   19b5c:	75 0f                	jne    19b6d <prvSenderTask+0x221>
   19b5e:	48 8b 85 78 ff ff ff 	mov    -0x88(%rbp),%rax
   19b65:	48 89 c7             	mov    %rax,%rdi
   19b68:	e8 35 2c ff ff       	callq  c7a2 <vTaskDelay>
   19b6d:	48 8d 55 a0          	lea    -0x60(%rbp),%rdx
   19b71:	48 8d 45 ec          	lea    -0x14(%rbp),%rax
   19b75:	49 89 d0             	mov    %rdx,%r8
   19b78:	48 89 c1             	mov    %rax,%rcx
   19b7b:	ba 01 00 00 00       	mov    $0x1,%edx
   19b80:	be 00 00 00 00       	mov    $0x0,%esi
   19b85:	bf 0c 00 00 00       	mov    $0xc,%edi
   19b8a:	e8 22 f5 fe ff       	callq  90b1 <xStreamBufferGenericCreateStatic>
   19b8f:	48 89 45 98          	mov    %rax,-0x68(%rbp)
   19b93:	48 8b 45 98          	mov    -0x68(%rbp),%rax
   19b97:	48 89 c7             	mov    %rax,%rdi
   19b9a:	e8 ad f7 fe ff       	callq  934c <vStreamBufferDelete>
   19b9f:	e9 f2 fe ff ff       	jmpq   19a96 <prvSenderTask+0x14a>

0000000000019ba4 <prvReceiverTask>:
   19ba4:	f3 0f 1e fa          	endbr64 
   19ba8:	55                   	push   %rbp
   19ba9:	48 89 e5             	mov    %rsp,%rbp
   19bac:	48 83 ec 50          	sub    $0x50,%rsp
   19bb0:	48 89 7d b8          	mov    %rdi,-0x48(%rbp)
   19bb4:	64 48 8b 04 25 28 00 	mov    %fs:0x28,%rax
   19bbb:	00 00 
   19bbd:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
   19bc1:	31 c0                	xor    %eax,%eax
   19bc3:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
   19bc7:	48 89 45 c8          	mov    %rax,-0x38(%rbp)
   19bcb:	c7 45 c4 00 00 00 00 	movl   $0x0,-0x3c(%rbp)
   19bd2:	48 c7 45 d0 05 00 00 	movq   $0x5,-0x30(%rbp)
   19bd9:	00 
   19bda:	48 8d 45 e0          	lea    -0x20(%rbp),%rax
   19bde:	ba 0c 00 00 00       	mov    $0xc,%edx
   19be3:	be 00 00 00 00       	mov    $0x0,%esi
   19be8:	48 89 c7             	mov    %rax,%rdi
   19beb:	e8 20 89 fe ff       	callq  2510 <memset@plt>
   19bf0:	8b 55 c4             	mov    -0x3c(%rbp),%edx
   19bf3:	48 8d 45 e0          	lea    -0x20(%rbp),%rax
   19bf7:	48 8d 35 90 e3 00 00 	lea    0xe390(%rip),%rsi        # 27f8e <xInterruptGivePeriod+0x19e>
   19bfe:	48 89 c7             	mov    %rax,%rdi
   19c01:	b8 00 00 00 00       	mov    $0x0,%eax
   19c06:	e8 a5 8a fe ff       	callq  26b0 <sprintf@plt>
   19c0b:	48 8d 45 ec          	lea    -0x14(%rbp),%rax
   19c0f:	ba 0c 00 00 00       	mov    $0xc,%edx
   19c14:	be 00 00 00 00       	mov    $0x0,%esi
   19c19:	48 89 c7             	mov    %rax,%rdi
   19c1c:	e8 ef 88 fe ff       	callq  2510 <memset@plt>
   19c21:	48 8b 55 d0          	mov    -0x30(%rbp),%rdx
   19c25:	48 8d 75 ec          	lea    -0x14(%rbp),%rsi
   19c29:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
   19c2d:	48 89 d1             	mov    %rdx,%rcx
   19c30:	ba 0c 00 00 00       	mov    $0xc,%edx
   19c35:	48 89 c7             	mov    %rax,%rdi
   19c38:	e8 b7 02 ff ff       	callq  9ef4 <xStreamBufferReceive>
   19c3d:	48 89 45 d8          	mov    %rax,-0x28(%rbp)
   19c41:	48 83 7d d8 00       	cmpq   $0x0,-0x28(%rbp)
   19c46:	74 d9                	je     19c21 <prvReceiverTask+0x7d>
   19c48:	48 8d 55 ec          	lea    -0x14(%rbp),%rdx
   19c4c:	48 8d 45 e0          	lea    -0x20(%rbp),%rax
   19c50:	48 89 d6             	mov    %rdx,%rsi
   19c53:	48 89 c7             	mov    %rax,%rdi
   19c56:	e8 f5 88 fe ff       	callq  2550 <strcmp@plt>
   19c5b:	85 c0                	test   %eax,%eax
   19c5d:	74 11                	je     19c70 <prvReceiverTask+0xcc>
   19c5f:	be af 02 00 00       	mov    $0x2af,%esi
   19c64:	48 8d 3d d5 e2 00 00 	lea    0xe2d5(%rip),%rdi        # 27f40 <xInterruptGivePeriod+0x150>
   19c6b:	e8 9c a0 fe ff       	callq  3d0c <vAssertCalled>
   19c70:	83 45 c4 01          	addl   $0x1,-0x3c(%rbp)
   19c74:	e9 61 ff ff ff       	jmpq   19bda <prvReceiverTask+0x36>

0000000000019c79 <prvEchoClient>:
   19c79:	f3 0f 1e fa          	endbr64 
   19c7d:	55                   	push   %rbp
   19c7e:	48 89 e5             	mov    %rsp,%rbp
   19c81:	48 83 ec 50          	sub    $0x50,%rsp
   19c85:	48 89 7d b8          	mov    %rdi,-0x48(%rbp)
   19c89:	48 c7 45 c8 00 00 00 	movq   $0x0,-0x38(%rbp)
   19c90:	00 
   19c91:	c6 45 c7 20          	movb   $0x20,-0x39(%rbp)
   19c95:	48 c7 45 d8 32 00 00 	movq   $0x32,-0x28(%rbp)
   19c9c:	00 
   19c9d:	bf 00 00 00 00       	mov    $0x0,%edi
   19ca2:	e8 02 2d ff ff       	callq  c9a9 <uxTaskPriorityGet>
   19ca7:	48 89 45 e0          	mov    %rax,-0x20(%rbp)
   19cab:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
   19caf:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
   19cb3:	bf 32 00 00 00       	mov    $0x32,%edi
   19cb8:	e8 c3 89 ff ff       	callq  12680 <pvPortMalloc>
   19cbd:	48 89 45 f0          	mov    %rax,-0x10(%rbp)
   19cc1:	bf 32 00 00 00       	mov    $0x32,%edi
   19cc6:	e8 b5 89 ff ff       	callq  12680 <pvPortMalloc>
   19ccb:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
   19ccf:	48 83 7d f0 00       	cmpq   $0x0,-0x10(%rbp)
   19cd4:	75 11                	jne    19ce7 <prvEchoClient+0x6e>
   19cd6:	be cf 02 00 00       	mov    $0x2cf,%esi
   19cdb:	48 8d 3d 5e e2 00 00 	lea    0xe25e(%rip),%rdi        # 27f40 <xInterruptGivePeriod+0x150>
   19ce2:	e8 25 a0 fe ff       	callq  3d0c <vAssertCalled>
   19ce7:	48 83 7d f8 00       	cmpq   $0x0,-0x8(%rbp)
   19cec:	75 11                	jne    19cff <prvEchoClient+0x86>
   19cee:	be d0 02 00 00       	mov    $0x2d0,%esi
   19cf3:	48 8d 3d 46 e2 00 00 	lea    0xe246(%rip),%rdi        # 27f40 <xInterruptGivePeriod+0x150>
   19cfa:	e8 0d a0 fe ff       	callq  3d0c <vAssertCalled>
   19cff:	48 83 45 c8 01       	addq   $0x1,-0x38(%rbp)
   19d04:	48 83 7d c8 2a       	cmpq   $0x2a,-0x38(%rbp)
   19d09:	76 37                	jbe    19d42 <prvEchoClient+0xc9>
   19d0b:	48 c7 45 c8 01 00 00 	movq   $0x1,-0x38(%rbp)
   19d12:	00 
   19d13:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
   19d17:	48 8d 14 85 00 00 00 	lea    0x0(,%rax,4),%rdx
   19d1e:	00 
   19d1f:	48 8d 05 4a c6 11 00 	lea    0x11c64a(%rip),%rax        # 136370 <ulEchoLoopCounters>
   19d26:	8b 04 02             	mov    (%rdx,%rax,1),%eax
   19d29:	8d 48 01             	lea    0x1(%rax),%ecx
   19d2c:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
   19d30:	48 8d 14 85 00 00 00 	lea    0x0(,%rax,4),%rdx
   19d37:	00 
   19d38:	48 8d 05 31 c6 11 00 	lea    0x11c631(%rip),%rax        # 136370 <ulEchoLoopCounters>
   19d3f:	89 0c 02             	mov    %ecx,(%rdx,%rax,1)
   19d42:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
   19d46:	ba 32 00 00 00       	mov    $0x32,%edx
   19d4b:	be 00 00 00 00       	mov    $0x0,%esi
   19d50:	48 89 c7             	mov    %rax,%rdi
   19d53:	e8 b8 87 fe ff       	callq  2510 <memset@plt>
   19d58:	48 c7 45 d0 00 00 00 	movq   $0x0,-0x30(%rbp)
   19d5f:	00 
   19d60:	eb 2a                	jmp    19d8c <prvEchoClient+0x113>
   19d62:	48 8b 55 f0          	mov    -0x10(%rbp),%rdx
   19d66:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
   19d6a:	48 01 c2             	add    %rax,%rdx
   19d6d:	0f b6 45 c7          	movzbl -0x39(%rbp),%eax
   19d71:	88 02                	mov    %al,(%rdx)
   19d73:	0f b6 45 c7          	movzbl -0x39(%rbp),%eax
   19d77:	83 c0 01             	add    $0x1,%eax
   19d7a:	88 45 c7             	mov    %al,-0x39(%rbp)
   19d7d:	80 7d c7 7f          	cmpb   $0x7f,-0x39(%rbp)
   19d81:	75 04                	jne    19d87 <prvEchoClient+0x10e>
   19d83:	c6 45 c7 20          	movb   $0x20,-0x39(%rbp)
   19d87:	48 83 45 d0 01       	addq   $0x1,-0x30(%rbp)
   19d8c:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
   19d90:	48 3b 45 c8          	cmp    -0x38(%rbp),%rax
   19d94:	72 cc                	jb     19d62 <prvEchoClient+0xe9>
   19d96:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
   19d9a:	48 8b 00             	mov    (%rax),%rax
   19d9d:	48 8b 4d d8          	mov    -0x28(%rbp),%rcx
   19da1:	48 8b 55 c8          	mov    -0x38(%rbp),%rdx
   19da5:	48 8b 75 f0          	mov    -0x10(%rbp),%rsi
   19da9:	48 89 c7             	mov    %rax,%rdi
   19dac:	e8 18 fa fe ff       	callq  97c9 <xStreamBufferSend>
   19db1:	48 89 45 d0          	mov    %rax,-0x30(%rbp)
   19db5:	48 83 7d d0 00       	cmpq   $0x0,-0x30(%rbp)
   19dba:	74 da                	je     19d96 <prvEchoClient+0x11d>
   19dbc:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   19dc0:	ba 32 00 00 00       	mov    $0x32,%edx
   19dc5:	be 00 00 00 00       	mov    $0x0,%esi
   19dca:	48 89 c7             	mov    %rax,%rdi
   19dcd:	e8 3e 87 fe ff       	callq  2510 <memset@plt>
   19dd2:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
   19dd6:	48 8b 40 08          	mov    0x8(%rax),%rax
   19dda:	48 8b 55 c8          	mov    -0x38(%rbp),%rdx
   19dde:	48 8b 75 f8          	mov    -0x8(%rbp),%rsi
   19de2:	48 c7 c1 ff ff ff ff 	mov    $0xffffffffffffffff,%rcx
   19de9:	48 89 c7             	mov    %rax,%rdi
   19dec:	e8 03 01 ff ff       	callq  9ef4 <xStreamBufferReceive>
   19df1:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
   19df5:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
   19df9:	48 89 d6             	mov    %rdx,%rsi
   19dfc:	48 89 c7             	mov    %rax,%rdi
   19dff:	e8 4c 87 fe ff       	callq  2550 <strcmp@plt>
   19e04:	85 c0                	test   %eax,%eax
   19e06:	0f 84 f3 fe ff ff    	je     19cff <prvEchoClient+0x86>
   19e0c:	be 04 03 00 00       	mov    $0x304,%esi
   19e11:	48 8d 3d 28 e1 00 00 	lea    0xe128(%rip),%rdi        # 27f40 <xInterruptGivePeriod+0x150>
   19e18:	e8 ef 9e fe ff       	callq  3d0c <vAssertCalled>
   19e1d:	e9 dd fe ff ff       	jmpq   19cff <prvEchoClient+0x86>

0000000000019e22 <prvEchoServer>:
   19e22:	f3 0f 1e fa          	endbr64 
   19e26:	55                   	push   %rbp
   19e27:	48 89 e5             	mov    %rsp,%rbp
   19e2a:	48 83 ec 60          	sub    $0x60,%rsp
   19e2e:	48 89 7d a8          	mov    %rdi,-0x58(%rbp)
   19e32:	64 48 8b 04 25 28 00 	mov    %fs:0x28,%rax
   19e39:	00 00 
   19e3b:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
   19e3f:	31 c0                	xor    %eax,%eax
   19e41:	48 c7 45 b8 fa 00 00 	movq   $0xfa,-0x48(%rbp)
   19e48:	00 
   19e49:	ba 01 00 00 00       	mov    $0x1,%edx
   19e4e:	be 00 00 00 00       	mov    $0x0,%esi
   19e53:	bf 32 00 00 00       	mov    $0x32,%edi
   19e58:	e8 05 f0 fe ff       	callq  8e62 <xStreamBufferGenericCreate>
   19e5d:	48 89 45 e0          	mov    %rax,-0x20(%rbp)
   19e61:	ba 01 00 00 00       	mov    $0x1,%edx
   19e66:	be 00 00 00 00       	mov    $0x0,%esi
   19e6b:	bf 32 00 00 00       	mov    $0x32,%edi
   19e70:	e8 ed ef fe ff       	callq  8e62 <xStreamBufferGenericCreate>
   19e75:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
   19e79:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
   19e7d:	48 85 c0             	test   %rax,%rax
   19e80:	75 11                	jne    19e93 <prvEchoServer+0x71>
   19e82:	be 1a 03 00 00       	mov    $0x31a,%esi
   19e87:	48 8d 3d b2 e0 00 00 	lea    0xe0b2(%rip),%rdi        # 27f40 <xInterruptGivePeriod+0x150>
   19e8e:	e8 79 9e fe ff       	callq  3d0c <vAssertCalled>
   19e93:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
   19e97:	48 85 c0             	test   %rax,%rax
   19e9a:	75 11                	jne    19ead <prvEchoServer+0x8b>
   19e9c:	be 1b 03 00 00       	mov    $0x31b,%esi
   19ea1:	48 8d 3d 98 e0 00 00 	lea    0xe098(%rip),%rdi        # 27f40 <xInterruptGivePeriod+0x150>
   19ea8:	e8 5f 9e fe ff       	callq  3d0c <vAssertCalled>
   19ead:	bf 32 00 00 00       	mov    $0x32,%edi
   19eb2:	e8 c9 87 ff ff       	callq  12680 <pvPortMalloc>
   19eb7:	48 89 45 c0          	mov    %rax,-0x40(%rbp)
   19ebb:	48 83 7d c0 00       	cmpq   $0x0,-0x40(%rbp)
   19ec0:	75 11                	jne    19ed3 <prvEchoServer+0xb1>
   19ec2:	be 1f 03 00 00       	mov    $0x31f,%esi
   19ec7:	48 8d 3d 72 e0 00 00 	lea    0xe072(%rip),%rdi        # 27f40 <xInterruptGivePeriod+0x150>
   19ece:	e8 39 9e fe ff       	callq  3d0c <vAssertCalled>
   19ed3:	e8 c0 39 ff ff       	callq  d898 <xTaskGetTickCount>
   19ed8:	48 89 45 c8          	mov    %rax,-0x38(%rbp)
   19edc:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
   19ee0:	48 8b 55 b8          	mov    -0x48(%rbp),%rdx
   19ee4:	48 8b 75 c0          	mov    -0x40(%rbp),%rsi
   19ee8:	48 89 d1             	mov    %rdx,%rcx
   19eeb:	ba 32 00 00 00       	mov    $0x32,%edx
   19ef0:	48 89 c7             	mov    %rax,%rdi
   19ef3:	e8 fc ff fe ff       	callq  9ef4 <xStreamBufferReceive>
   19ef8:	48 89 45 d0          	mov    %rax,-0x30(%rbp)
   19efc:	e8 97 39 ff ff       	callq  d898 <xTaskGetTickCount>
   19f01:	48 2b 45 c8          	sub    -0x38(%rbp),%rax
   19f05:	48 39 45 b8          	cmp    %rax,-0x48(%rbp)
   19f09:	76 11                	jbe    19f1c <prvEchoServer+0xfa>
   19f0b:	be 24 03 00 00       	mov    $0x324,%esi
   19f10:	48 8d 3d 29 e0 00 00 	lea    0xe029(%rip),%rdi        # 27f40 <xInterruptGivePeriod+0x150>
   19f17:	e8 f0 9d fe ff       	callq  3d0c <vAssertCalled>
   19f1c:	48 83 7d d0 00       	cmpq   $0x0,-0x30(%rbp)
   19f21:	74 11                	je     19f34 <prvEchoServer+0x112>
   19f23:	be 25 03 00 00       	mov    $0x325,%esi
   19f28:	48 8d 3d 11 e0 00 00 	lea    0xe011(%rip),%rdi        # 27f40 <xInterruptGivePeriod+0x150>
   19f2f:	e8 d8 9d fe ff       	callq  3d0c <vAssertCalled>
   19f34:	bf 00 00 00 00       	mov    $0x0,%edi
   19f39:	e8 6b 2a ff ff       	callq  c9a9 <uxTaskPriorityGet>
   19f3e:	48 85 c0             	test   %rax,%rax
   19f41:	75 2d                	jne    19f70 <prvEchoServer+0x14e>
   19f43:	48 8d 45 e0          	lea    -0x20(%rbp),%rax
   19f47:	41 b9 00 00 00 00    	mov    $0x0,%r9d
   19f4d:	41 b8 01 00 00 00    	mov    $0x1,%r8d
   19f53:	48 89 c1             	mov    %rax,%rcx
   19f56:	ba 46 00 00 00       	mov    $0x46,%edx
   19f5b:	48 8d 35 3b e0 00 00 	lea    0xe03b(%rip),%rsi        # 27f9d <xInterruptGivePeriod+0x1ad>
   19f62:	48 8d 3d 10 fd ff ff 	lea    -0x2f0(%rip),%rdi        # 19c79 <prvEchoClient>
   19f69:	e8 89 1d ff ff       	callq  bcf7 <xTaskCreate>
   19f6e:	eb 37                	jmp    19fa7 <prvEchoServer+0x185>
   19f70:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
   19f74:	48 89 c7             	mov    %rax,%rdi
   19f77:	e8 2d ee ff ff       	callq  18da9 <prvSingleTaskTests>
   19f7c:	48 8d 45 e0          	lea    -0x20(%rbp),%rax
   19f80:	41 b9 00 00 00 00    	mov    $0x0,%r9d
   19f86:	41 b8 00 00 00 00    	mov    $0x0,%r8d
   19f8c:	48 89 c1             	mov    %rax,%rcx
   19f8f:	ba 46 00 00 00       	mov    $0x46,%edx
   19f94:	48 8d 35 02 e0 00 00 	lea    0xe002(%rip),%rsi        # 27f9d <xInterruptGivePeriod+0x1ad>
   19f9b:	48 8d 3d d7 fc ff ff 	lea    -0x329(%rip),%rdi        # 19c79 <prvEchoClient>
   19fa2:	e8 50 1d ff ff       	callq  bcf7 <xTaskCreate>
   19fa7:	48 8b 45 c0          	mov    -0x40(%rbp),%rax
   19fab:	ba 32 00 00 00       	mov    $0x32,%edx
   19fb0:	be 00 00 00 00       	mov    $0x0,%esi
   19fb5:	48 89 c7             	mov    %rax,%rdi
   19fb8:	e8 53 85 fe ff       	callq  2510 <memset@plt>
   19fbd:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
   19fc1:	48 8b 75 c0          	mov    -0x40(%rbp),%rsi
   19fc5:	48 c7 c1 ff ff ff ff 	mov    $0xffffffffffffffff,%rcx
   19fcc:	ba 32 00 00 00       	mov    $0x32,%edx
   19fd1:	48 89 c7             	mov    %rax,%rdi
   19fd4:	e8 1b ff fe ff       	callq  9ef4 <xStreamBufferReceive>
   19fd9:	48 89 45 d0          	mov    %rax,-0x30(%rbp)
   19fdd:	48 83 7d d0 00       	cmpq   $0x0,-0x30(%rbp)
   19fe2:	75 11                	jne    19ff5 <prvEchoServer+0x1d3>
   19fe4:	be 40 03 00 00       	mov    $0x340,%esi
   19fe9:	48 8d 3d 50 df 00 00 	lea    0xdf50(%rip),%rdi        # 27f40 <xInterruptGivePeriod+0x150>
   19ff0:	e8 17 9d fe ff       	callq  3d0c <vAssertCalled>
   19ff5:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
   19ff9:	48 8b 55 d0          	mov    -0x30(%rbp),%rdx
   19ffd:	48 8b 75 c0          	mov    -0x40(%rbp),%rsi
   1a001:	48 c7 c1 ff ff ff ff 	mov    $0xffffffffffffffff,%rcx
   1a008:	48 89 c7             	mov    %rax,%rdi
   1a00b:	e8 b9 f7 fe ff       	callq  97c9 <xStreamBufferSend>
   1a010:	ba 01 00 00 00       	mov    $0x1,%edx
   1a015:	be 00 00 00 00       	mov    $0x0,%esi
   1a01a:	bf 32 00 00 00       	mov    $0x32,%edi
   1a01f:	e8 3e ee fe ff       	callq  8e62 <xStreamBufferGenericCreate>
   1a024:	48 89 45 d8          	mov    %rax,-0x28(%rbp)
   1a028:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
   1a02c:	48 89 c7             	mov    %rax,%rdi
   1a02f:	e8 18 f3 fe ff       	callq  934c <vStreamBufferDelete>
   1a034:	e9 6e ff ff ff       	jmpq   19fa7 <prvEchoServer+0x185>

000000000001a039 <xAreMessageBufferTasksStillRunning>:
   1a039:	f3 0f 1e fa          	endbr64 
   1a03d:	55                   	push   %rbp
   1a03e:	48 89 e5             	mov    %rsp,%rbp
   1a041:	48 c7 45 f0 01 00 00 	movq   $0x1,-0x10(%rbp)
   1a048:	00 
   1a049:	48 c7 45 f8 00 00 00 	movq   $0x0,-0x8(%rbp)
   1a050:	00 
   1a051:	eb 6b                	jmp    1a0be <xAreMessageBufferTasksStillRunning+0x85>
   1a053:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   1a057:	48 8d 14 85 00 00 00 	lea    0x0(,%rax,4),%rdx
   1a05e:	00 
   1a05f:	48 8d 05 1a c3 11 00 	lea    0x11c31a(%rip),%rax        # 136380 <ulLastEchoLoopCounters.3494>
   1a066:	8b 14 02             	mov    (%rdx,%rax,1),%edx
   1a069:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   1a06d:	48 8d 0c 85 00 00 00 	lea    0x0(,%rax,4),%rcx
   1a074:	00 
   1a075:	48 8d 05 f4 c2 11 00 	lea    0x11c2f4(%rip),%rax        # 136370 <ulEchoLoopCounters>
   1a07c:	8b 04 01             	mov    (%rcx,%rax,1),%eax
   1a07f:	39 c2                	cmp    %eax,%edx
   1a081:	75 0a                	jne    1a08d <xAreMessageBufferTasksStillRunning+0x54>
   1a083:	48 c7 45 f0 00 00 00 	movq   $0x0,-0x10(%rbp)
   1a08a:	00 
   1a08b:	eb 2c                	jmp    1a0b9 <xAreMessageBufferTasksStillRunning+0x80>
   1a08d:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   1a091:	48 8d 14 85 00 00 00 	lea    0x0(,%rax,4),%rdx
   1a098:	00 
   1a099:	48 8d 05 d0 c2 11 00 	lea    0x11c2d0(%rip),%rax        # 136370 <ulEchoLoopCounters>
   1a0a0:	8b 04 02             	mov    (%rdx,%rax,1),%eax
   1a0a3:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
   1a0a7:	48 8d 0c 95 00 00 00 	lea    0x0(,%rdx,4),%rcx
   1a0ae:	00 
   1a0af:	48 8d 15 ca c2 11 00 	lea    0x11c2ca(%rip),%rdx        # 136380 <ulLastEchoLoopCounters.3494>
   1a0b6:	89 04 11             	mov    %eax,(%rcx,%rdx,1)
   1a0b9:	48 83 45 f8 01       	addq   $0x1,-0x8(%rbp)
   1a0be:	48 83 7d f8 01       	cmpq   $0x1,-0x8(%rbp)
   1a0c3:	7e 8e                	jle    1a053 <xAreMessageBufferTasksStillRunning+0x1a>
   1a0c5:	8b 15 ad c2 11 00    	mov    0x11c2ad(%rip),%edx        # 136378 <ulNonBlockingRxCounter>
   1a0cb:	8b 05 b7 c2 11 00    	mov    0x11c2b7(%rip),%eax        # 136388 <ulLastNonBlockingRxCounter.3495>
   1a0d1:	39 c2                	cmp    %eax,%edx
   1a0d3:	75 0a                	jne    1a0df <xAreMessageBufferTasksStillRunning+0xa6>
   1a0d5:	48 c7 45 f0 00 00 00 	movq   $0x0,-0x10(%rbp)
   1a0dc:	00 
   1a0dd:	eb 0c                	jmp    1a0eb <xAreMessageBufferTasksStillRunning+0xb2>
   1a0df:	8b 05 93 c2 11 00    	mov    0x11c293(%rip),%eax        # 136378 <ulNonBlockingRxCounter>
   1a0e5:	89 05 9d c2 11 00    	mov    %eax,0x11c29d(%rip)        # 136388 <ulLastNonBlockingRxCounter.3495>
   1a0eb:	48 c7 45 f8 00 00 00 	movq   $0x0,-0x8(%rbp)
   1a0f2:	00 
   1a0f3:	eb 6b                	jmp    1a160 <xAreMessageBufferTasksStillRunning+0x127>
   1a0f5:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   1a0f9:	48 8d 14 85 00 00 00 	lea    0x0(,%rax,4),%rdx
   1a100:	00 
   1a101:	48 8d 05 88 c2 11 00 	lea    0x11c288(%rip),%rax        # 136390 <ulLastSenderLoopCounters.3501>
   1a108:	8b 14 02             	mov    (%rdx,%rax,1),%edx
   1a10b:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   1a10f:	48 8d 0c 85 00 00 00 	lea    0x0(,%rax,4),%rcx
   1a116:	00 
   1a117:	48 8d 05 4a c2 11 00 	lea    0x11c24a(%rip),%rax        # 136368 <ulSenderLoopCounters>
   1a11e:	8b 04 01             	mov    (%rcx,%rax,1),%eax
   1a121:	39 c2                	cmp    %eax,%edx
   1a123:	75 0a                	jne    1a12f <xAreMessageBufferTasksStillRunning+0xf6>
   1a125:	48 c7 45 f0 00 00 00 	movq   $0x0,-0x10(%rbp)
   1a12c:	00 
   1a12d:	eb 2c                	jmp    1a15b <xAreMessageBufferTasksStillRunning+0x122>
   1a12f:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   1a133:	48 8d 14 85 00 00 00 	lea    0x0(,%rax,4),%rdx
   1a13a:	00 
   1a13b:	48 8d 05 26 c2 11 00 	lea    0x11c226(%rip),%rax        # 136368 <ulSenderLoopCounters>
   1a142:	8b 04 02             	mov    (%rdx,%rax,1),%eax
   1a145:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
   1a149:	48 8d 0c 95 00 00 00 	lea    0x0(,%rdx,4),%rcx
   1a150:	00 
   1a151:	48 8d 15 38 c2 11 00 	lea    0x11c238(%rip),%rdx        # 136390 <ulLastSenderLoopCounters.3501>
   1a158:	89 04 11             	mov    %eax,(%rcx,%rdx,1)
   1a15b:	48 83 45 f8 01       	addq   $0x1,-0x8(%rbp)
   1a160:	48 83 7d f8 01       	cmpq   $0x1,-0x8(%rbp)
   1a165:	7e 8e                	jle    1a0f5 <xAreMessageBufferTasksStillRunning+0xbc>
   1a167:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
   1a16b:	5d                   	pop    %rbp
   1a16c:	c3                   	retq   

000000000001a16d <vStartPolledQueueTasks>:
   1a16d:	f3 0f 1e fa          	endbr64 
   1a171:	55                   	push   %rbp
   1a172:	48 89 e5             	mov    %rsp,%rbp
   1a175:	48 83 ec 10          	sub    $0x10,%rsp
   1a179:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   1a17d:	ba 00 00 00 00       	mov    $0x0,%edx
   1a182:	be 02 00 00 00       	mov    $0x2,%esi
   1a187:	bf 0a 00 00 00       	mov    $0xa,%edi
   1a18c:	e8 62 b4 fe ff       	callq  55f3 <xQueueGenericCreate>
   1a191:	48 89 05 10 c2 11 00 	mov    %rax,0x11c210(%rip)        # 1363a8 <xPolledQueue.3431>
   1a198:	48 8b 05 09 c2 11 00 	mov    0x11c209(%rip),%rax        # 1363a8 <xPolledQueue.3431>
   1a19f:	48 85 c0             	test   %rax,%rax
   1a1a2:	74 6e                	je     1a212 <vStartPolledQueueTasks+0xa5>
   1a1a4:	48 8b 05 fd c1 11 00 	mov    0x11c1fd(%rip),%rax        # 1363a8 <xPolledQueue.3431>
   1a1ab:	48 8d 35 f6 dd 00 00 	lea    0xddf6(%rip),%rsi        # 27fa8 <xInterruptGivePeriod+0x1b8>
   1a1b2:	48 89 c7             	mov    %rax,%rdi
   1a1b5:	e8 fe e3 fe ff       	callq  85b8 <vQueueAddToRegistry>
   1a1ba:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   1a1be:	41 b9 00 00 00 00    	mov    $0x0,%r9d
   1a1c4:	49 89 c0             	mov    %rax,%r8
   1a1c7:	48 8d 0d da c1 11 00 	lea    0x11c1da(%rip),%rcx        # 1363a8 <xPolledQueue.3431>
   1a1ce:	ba 46 00 00 00       	mov    $0x46,%edx
   1a1d3:	48 8d 35 de dd 00 00 	lea    0xddde(%rip),%rsi        # 27fb8 <xInterruptGivePeriod+0x1c8>
   1a1da:	48 8d 3d de 00 00 00 	lea    0xde(%rip),%rdi        # 1a2bf <vPolledQueueConsumer>
   1a1e1:	e8 11 1b ff ff       	callq  bcf7 <xTaskCreate>
   1a1e6:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   1a1ea:	41 b9 00 00 00 00    	mov    $0x0,%r9d
   1a1f0:	49 89 c0             	mov    %rax,%r8
   1a1f3:	48 8d 0d ae c1 11 00 	lea    0x11c1ae(%rip),%rcx        # 1363a8 <xPolledQueue.3431>
   1a1fa:	ba 46 00 00 00       	mov    $0x46,%edx
   1a1ff:	48 8d 35 ba dd 00 00 	lea    0xddba(%rip),%rsi        # 27fc0 <xInterruptGivePeriod+0x1d0>
   1a206:	48 8d 3d 08 00 00 00 	lea    0x8(%rip),%rdi        # 1a215 <vPolledQueueProducer>
   1a20d:	e8 e5 1a ff ff       	callq  bcf7 <xTaskCreate>
   1a212:	90                   	nop
   1a213:	c9                   	leaveq 
   1a214:	c3                   	retq   

000000000001a215 <vPolledQueueProducer>:
   1a215:	f3 0f 1e fa          	endbr64 
   1a219:	55                   	push   %rbp
   1a21a:	48 89 e5             	mov    %rsp,%rbp
   1a21d:	48 83 ec 30          	sub    $0x30,%rsp
   1a221:	48 89 7d d8          	mov    %rdi,-0x28(%rbp)
   1a225:	64 48 8b 04 25 28 00 	mov    %fs:0x28,%rax
   1a22c:	00 00 
   1a22e:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
   1a232:	31 c0                	xor    %eax,%eax
   1a234:	66 c7 45 e6 00 00    	movw   $0x0,-0x1a(%rbp)
   1a23a:	48 c7 45 e8 00 00 00 	movq   $0x0,-0x18(%rbp)
   1a241:	00 
   1a242:	48 c7 45 f0 00 00 00 	movq   $0x0,-0x10(%rbp)
   1a249:	00 
   1a24a:	eb 60                	jmp    1a2ac <vPolledQueueProducer+0x97>
   1a24c:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
   1a250:	48 8b 00             	mov    (%rax),%rax
   1a253:	48 8d 75 e6          	lea    -0x1a(%rbp),%rsi
   1a257:	b9 00 00 00 00       	mov    $0x0,%ecx
   1a25c:	ba 00 00 00 00       	mov    $0x0,%edx
   1a261:	48 89 c7             	mov    %rax,%rdi
   1a264:	e8 2e bb fe ff       	callq  5d97 <xQueueGenericSend>
   1a269:	48 83 f8 01          	cmp    $0x1,%rax
   1a26d:	74 0a                	je     1a279 <vPolledQueueProducer+0x64>
   1a26f:	48 c7 45 e8 01 00 00 	movq   $0x1,-0x18(%rbp)
   1a276:	00 
   1a277:	eb 2e                	jmp    1a2a7 <vPolledQueueProducer+0x92>
   1a279:	48 83 7d e8 00       	cmpq   $0x0,-0x18(%rbp)
   1a27e:	75 1c                	jne    1a29c <vPolledQueueProducer+0x87>
   1a280:	e8 4a 8b ff ff       	callq  12dcf <vPortEnterCritical>
   1a285:	48 8b 05 14 c1 11 00 	mov    0x11c114(%rip),%rax        # 1363a0 <xPollingProducerCount>
   1a28c:	48 83 c0 01          	add    $0x1,%rax
   1a290:	48 89 05 09 c1 11 00 	mov    %rax,0x11c109(%rip)        # 1363a0 <xPollingProducerCount>
   1a297:	e8 61 8b ff ff       	callq  12dfd <vPortExitCritical>
   1a29c:	0f b7 45 e6          	movzwl -0x1a(%rbp),%eax
   1a2a0:	83 c0 01             	add    $0x1,%eax
   1a2a3:	66 89 45 e6          	mov    %ax,-0x1a(%rbp)
   1a2a7:	48 83 45 f0 01       	addq   $0x1,-0x10(%rbp)
   1a2ac:	48 83 7d f0 02       	cmpq   $0x2,-0x10(%rbp)
   1a2b1:	7e 99                	jle    1a24c <vPolledQueueProducer+0x37>
   1a2b3:	bf c8 00 00 00       	mov    $0xc8,%edi
   1a2b8:	e8 e5 24 ff ff       	callq  c7a2 <vTaskDelay>
   1a2bd:	eb 83                	jmp    1a242 <vPolledQueueProducer+0x2d>

000000000001a2bf <vPolledQueueConsumer>:
   1a2bf:	f3 0f 1e fa          	endbr64 
   1a2c3:	55                   	push   %rbp
   1a2c4:	48 89 e5             	mov    %rsp,%rbp
   1a2c7:	48 83 ec 30          	sub    $0x30,%rsp
   1a2cb:	48 89 7d d8          	mov    %rdi,-0x28(%rbp)
   1a2cf:	64 48 8b 04 25 28 00 	mov    %fs:0x28,%rax
   1a2d6:	00 00 
   1a2d8:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
   1a2dc:	31 c0                	xor    %eax,%eax
   1a2de:	66 c7 45 ee 00 00    	movw   $0x0,-0x12(%rbp)
   1a2e4:	48 c7 45 f0 00 00 00 	movq   $0x0,-0x10(%rbp)
   1a2eb:	00 
   1a2ec:	eb 6b                	jmp    1a359 <vPolledQueueConsumer+0x9a>
   1a2ee:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
   1a2f2:	48 8b 00             	mov    (%rax),%rax
   1a2f5:	48 8d 4d ec          	lea    -0x14(%rbp),%rcx
   1a2f9:	ba 00 00 00 00       	mov    $0x0,%edx
   1a2fe:	48 89 ce             	mov    %rcx,%rsi
   1a301:	48 89 c7             	mov    %rax,%rdi
   1a304:	e8 da c6 fe ff       	callq  69e3 <xQueueReceive>
   1a309:	48 83 f8 01          	cmp    $0x1,%rax
   1a30d:	75 4a                	jne    1a359 <vPolledQueueConsumer+0x9a>
   1a30f:	0f b7 45 ec          	movzwl -0x14(%rbp),%eax
   1a313:	66 39 45 ee          	cmp    %ax,-0x12(%rbp)
   1a317:	74 12                	je     1a32b <vPolledQueueConsumer+0x6c>
   1a319:	48 c7 45 f0 01 00 00 	movq   $0x1,-0x10(%rbp)
   1a320:	00 
   1a321:	0f b7 45 ec          	movzwl -0x14(%rbp),%eax
   1a325:	66 89 45 ee          	mov    %ax,-0x12(%rbp)
   1a329:	eb 23                	jmp    1a34e <vPolledQueueConsumer+0x8f>
   1a32b:	48 83 7d f0 00       	cmpq   $0x0,-0x10(%rbp)
   1a330:	75 1c                	jne    1a34e <vPolledQueueConsumer+0x8f>
   1a332:	e8 98 8a ff ff       	callq  12dcf <vPortEnterCritical>
   1a337:	48 8b 05 5a c0 11 00 	mov    0x11c05a(%rip),%rax        # 136398 <xPollingConsumerCount>
   1a33e:	48 83 c0 01          	add    $0x1,%rax
   1a342:	48 89 05 4f c0 11 00 	mov    %rax,0x11c04f(%rip)        # 136398 <xPollingConsumerCount>
   1a349:	e8 af 8a ff ff       	callq  12dfd <vPortExitCritical>
   1a34e:	0f b7 45 ee          	movzwl -0x12(%rbp),%eax
   1a352:	83 c0 01             	add    $0x1,%eax
   1a355:	66 89 45 ee          	mov    %ax,-0x12(%rbp)
   1a359:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
   1a35d:	48 8b 00             	mov    (%rax),%rax
   1a360:	48 89 c7             	mov    %rax,%rdi
   1a363:	e8 a6 da fe ff       	callq  7e0e <uxQueueMessagesWaiting>
   1a368:	48 85 c0             	test   %rax,%rax
   1a36b:	75 81                	jne    1a2ee <vPolledQueueConsumer+0x2f>
   1a36d:	bf b4 00 00 00       	mov    $0xb4,%edi
   1a372:	e8 2b 24 ff ff       	callq  c7a2 <vTaskDelay>
   1a377:	eb e0                	jmp    1a359 <vPolledQueueConsumer+0x9a>

000000000001a379 <xArePollingQueuesStillRunning>:
   1a379:	f3 0f 1e fa          	endbr64 
   1a37d:	55                   	push   %rbp
   1a37e:	48 89 e5             	mov    %rsp,%rbp
   1a381:	48 8b 05 10 c0 11 00 	mov    0x11c010(%rip),%rax        # 136398 <xPollingConsumerCount>
   1a388:	48 85 c0             	test   %rax,%rax
   1a38b:	74 0c                	je     1a399 <xArePollingQueuesStillRunning+0x20>
   1a38d:	48 8b 05 0c c0 11 00 	mov    0x11c00c(%rip),%rax        # 1363a0 <xPollingProducerCount>
   1a394:	48 85 c0             	test   %rax,%rax
   1a397:	75 0a                	jne    1a3a3 <xArePollingQueuesStillRunning+0x2a>
   1a399:	48 c7 45 f8 00 00 00 	movq   $0x0,-0x8(%rbp)
   1a3a0:	00 
   1a3a1:	eb 08                	jmp    1a3ab <xArePollingQueuesStillRunning+0x32>
   1a3a3:	48 c7 45 f8 01 00 00 	movq   $0x1,-0x8(%rbp)
   1a3aa:	00 
   1a3ab:	48 c7 05 e2 bf 11 00 	movq   $0x0,0x11bfe2(%rip)        # 136398 <xPollingConsumerCount>
   1a3b2:	00 00 00 00 
   1a3b6:	48 c7 05 df bf 11 00 	movq   $0x0,0x11bfdf(%rip)        # 1363a0 <xPollingProducerCount>
   1a3bd:	00 00 00 00 
   1a3c1:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   1a3c5:	5d                   	pop    %rbp
   1a3c6:	c3                   	retq   

000000000001a3c7 <vStartQueuePeekTasks>:
   1a3c7:	f3 0f 1e fa          	endbr64 
   1a3cb:	55                   	push   %rbp
   1a3cc:	48 89 e5             	mov    %rsp,%rbp
   1a3cf:	48 83 ec 10          	sub    $0x10,%rsp
   1a3d3:	ba 00 00 00 00       	mov    $0x0,%edx
   1a3d8:	be 04 00 00 00       	mov    $0x4,%esi
   1a3dd:	bf 05 00 00 00       	mov    $0x5,%edi
   1a3e2:	e8 0c b2 fe ff       	callq  55f3 <xQueueGenericCreate>
   1a3e7:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
   1a3eb:	48 83 7d f8 00       	cmpq   $0x0,-0x8(%rbp)
   1a3f0:	0f 84 c2 00 00 00    	je     1a4b8 <vStartQueuePeekTasks+0xf1>
   1a3f6:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   1a3fa:	48 8d 35 c7 db 00 00 	lea    0xdbc7(%rip),%rsi        # 27fc8 <xInterruptGivePeriod+0x1d8>
   1a401:	48 89 c7             	mov    %rax,%rdi
   1a404:	e8 af e1 fe ff       	callq  85b8 <vQueueAddToRegistry>
   1a409:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   1a40d:	41 b9 00 00 00 00    	mov    $0x0,%r9d
   1a413:	41 b8 00 00 00 00    	mov    $0x0,%r8d
   1a419:	48 89 c1             	mov    %rax,%rcx
   1a41c:	ba 46 00 00 00       	mov    $0x46,%edx
   1a421:	48 8d 35 b1 db 00 00 	lea    0xdbb1(%rip),%rsi        # 27fd9 <xInterruptGivePeriod+0x1e9>
   1a428:	48 8d 3d 87 03 00 00 	lea    0x387(%rip),%rdi        # 1a7b6 <prvLowPriorityPeekTask>
   1a42f:	e8 c3 18 ff ff       	callq  bcf7 <xTaskCreate>
   1a434:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   1a438:	4c 8d 0d d9 d8 11 00 	lea    0x11d8d9(%rip),%r9        # 137d18 <xMediumPriorityTask>
   1a43f:	41 b8 01 00 00 00    	mov    $0x1,%r8d
   1a445:	48 89 c1             	mov    %rax,%rcx
   1a448:	ba 46 00 00 00       	mov    $0x46,%edx
   1a44d:	48 8d 35 8b db 00 00 	lea    0xdb8b(%rip),%rsi        # 27fdf <xInterruptGivePeriod+0x1ef>
   1a454:	48 8d 3d bc 02 00 00 	lea    0x2bc(%rip),%rdi        # 1a717 <prvMediumPriorityPeekTask>
   1a45b:	e8 97 18 ff ff       	callq  bcf7 <xTaskCreate>
   1a460:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   1a464:	4c 8d 0d a5 d8 11 00 	lea    0x11d8a5(%rip),%r9        # 137d10 <xHighPriorityTask>
   1a46b:	41 b8 02 00 00 00    	mov    $0x2,%r8d
   1a471:	48 89 c1             	mov    %rax,%rcx
   1a474:	ba 46 00 00 00       	mov    $0x46,%edx
   1a479:	48 8d 35 65 db 00 00 	lea    0xdb65(%rip),%rsi        # 27fe5 <xInterruptGivePeriod+0x1f5>
   1a480:	48 8d 3d b3 01 00 00 	lea    0x1b3(%rip),%rdi        # 1a63a <prvHighPriorityPeekTask>
   1a487:	e8 6b 18 ff ff       	callq  bcf7 <xTaskCreate>
   1a48c:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   1a490:	4c 8d 0d 89 d8 11 00 	lea    0x11d889(%rip),%r9        # 137d20 <xHighestPriorityTask>
   1a497:	41 b8 03 00 00 00    	mov    $0x3,%r8d
   1a49d:	48 89 c1             	mov    %rax,%rcx
   1a4a0:	ba 46 00 00 00       	mov    $0x46,%edx
   1a4a5:	48 8d 35 40 db 00 00 	lea    0xdb40(%rip),%rsi        # 27fec <xInterruptGivePeriod+0x1fc>
   1a4ac:	48 8d 3d 08 00 00 00 	lea    0x8(%rip),%rdi        # 1a4bb <prvHighestPriorityPeekTask>
   1a4b3:	e8 3f 18 ff ff       	callq  bcf7 <xTaskCreate>
   1a4b8:	90                   	nop
   1a4b9:	c9                   	leaveq 
   1a4ba:	c3                   	retq   

000000000001a4bb <prvHighestPriorityPeekTask>:
   1a4bb:	f3 0f 1e fa          	endbr64 
   1a4bf:	55                   	push   %rbp
   1a4c0:	48 89 e5             	mov    %rsp,%rbp
   1a4c3:	48 83 ec 30          	sub    $0x30,%rsp
   1a4c7:	48 89 7d d8          	mov    %rdi,-0x28(%rbp)
   1a4cb:	64 48 8b 04 25 28 00 	mov    %fs:0x28,%rax
   1a4d2:	00 00 
   1a4d4:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
   1a4d8:	31 c0                	xor    %eax,%eax
   1a4da:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
   1a4de:	48 89 45 f0          	mov    %rax,-0x10(%rbp)
   1a4e2:	48 8d 4d ec          	lea    -0x14(%rbp),%rcx
   1a4e6:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
   1a4ea:	48 c7 c2 ff ff ff ff 	mov    $0xffffffffffffffff,%rdx
   1a4f1:	48 89 ce             	mov    %rcx,%rsi
   1a4f4:	48 89 c7             	mov    %rax,%rdi
   1a4f7:	e8 76 d0 fe ff       	callq  7572 <xQueuePeek>
   1a4fc:	48 83 f8 01          	cmp    $0x1,%rax
   1a500:	74 0b                	je     1a50d <prvHighestPriorityPeekTask+0x52>
   1a502:	48 c7 05 a3 be 11 00 	movq   $0x1,0x11bea3(%rip)        # 1363b0 <xErrorDetected>
   1a509:	01 00 00 00 
   1a50d:	8b 45 ec             	mov    -0x14(%rbp),%eax
   1a510:	3d 44 33 22 11       	cmp    $0x11223344,%eax
   1a515:	74 0b                	je     1a522 <prvHighestPriorityPeekTask+0x67>
   1a517:	48 c7 05 8e be 11 00 	movq   $0x1,0x11be8e(%rip)        # 1363b0 <xErrorDetected>
   1a51e:	01 00 00 00 
   1a522:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
   1a526:	48 89 c7             	mov    %rax,%rdi
   1a529:	e8 e0 d8 fe ff       	callq  7e0e <uxQueueMessagesWaiting>
   1a52e:	48 83 f8 01          	cmp    $0x1,%rax
   1a532:	74 0b                	je     1a53f <prvHighestPriorityPeekTask+0x84>
   1a534:	48 c7 05 71 be 11 00 	movq   $0x1,0x11be71(%rip)        # 1363b0 <xErrorDetected>
   1a53b:	01 00 00 00 
   1a53f:	c7 45 ec 00 00 00 00 	movl   $0x0,-0x14(%rbp)
   1a546:	48 8d 4d ec          	lea    -0x14(%rbp),%rcx
   1a54a:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
   1a54e:	ba 00 00 00 00       	mov    $0x0,%edx
   1a553:	48 89 ce             	mov    %rcx,%rsi
   1a556:	48 89 c7             	mov    %rax,%rdi
   1a559:	e8 85 c4 fe ff       	callq  69e3 <xQueueReceive>
   1a55e:	48 83 f8 01          	cmp    $0x1,%rax
   1a562:	74 0b                	je     1a56f <prvHighestPriorityPeekTask+0xb4>
   1a564:	48 c7 05 41 be 11 00 	movq   $0x1,0x11be41(%rip)        # 1363b0 <xErrorDetected>
   1a56b:	01 00 00 00 
   1a56f:	8b 45 ec             	mov    -0x14(%rbp),%eax
   1a572:	3d 44 33 22 11       	cmp    $0x11223344,%eax
   1a577:	74 0b                	je     1a584 <prvHighestPriorityPeekTask+0xc9>
   1a579:	48 c7 05 2c be 11 00 	movq   $0x1,0x11be2c(%rip)        # 1363b0 <xErrorDetected>
   1a580:	01 00 00 00 
   1a584:	48 8d 4d ec          	lea    -0x14(%rbp),%rcx
   1a588:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
   1a58c:	48 c7 c2 ff ff ff ff 	mov    $0xffffffffffffffff,%rdx
   1a593:	48 89 ce             	mov    %rcx,%rsi
   1a596:	48 89 c7             	mov    %rax,%rdi
   1a599:	e8 d4 cf fe ff       	callq  7572 <xQueuePeek>
   1a59e:	48 83 f8 01          	cmp    $0x1,%rax
   1a5a2:	74 0b                	je     1a5af <prvHighestPriorityPeekTask+0xf4>
   1a5a4:	48 c7 05 01 be 11 00 	movq   $0x1,0x11be01(%rip)        # 1363b0 <xErrorDetected>
   1a5ab:	01 00 00 00 
   1a5af:	8b 45 ec             	mov    -0x14(%rbp),%eax
   1a5b2:	3d 67 45 23 01       	cmp    $0x1234567,%eax
   1a5b7:	74 0b                	je     1a5c4 <prvHighestPriorityPeekTask+0x109>
   1a5b9:	48 c7 05 ec bd 11 00 	movq   $0x1,0x11bdec(%rip)        # 1363b0 <xErrorDetected>
   1a5c0:	01 00 00 00 
   1a5c4:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
   1a5c8:	48 89 c7             	mov    %rax,%rdi
   1a5cb:	e8 3e d8 fe ff       	callq  7e0e <uxQueueMessagesWaiting>
   1a5d0:	48 83 f8 01          	cmp    $0x1,%rax
   1a5d4:	74 0b                	je     1a5e1 <prvHighestPriorityPeekTask+0x126>
   1a5d6:	48 c7 05 cf bd 11 00 	movq   $0x1,0x11bdcf(%rip)        # 1363b0 <xErrorDetected>
   1a5dd:	01 00 00 00 
   1a5e1:	bf 00 00 00 00       	mov    $0x0,%edi
   1a5e6:	e8 76 27 ff ff       	callq  cd61 <vTaskSuspend>
   1a5eb:	48 8d 4d ec          	lea    -0x14(%rbp),%rcx
   1a5ef:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
   1a5f3:	48 c7 c2 ff ff ff ff 	mov    $0xffffffffffffffff,%rdx
   1a5fa:	48 89 ce             	mov    %rcx,%rsi
   1a5fd:	48 89 c7             	mov    %rax,%rdi
   1a600:	e8 6d cf fe ff       	callq  7572 <xQueuePeek>
   1a605:	48 83 f8 01          	cmp    $0x1,%rax
   1a609:	74 0b                	je     1a616 <prvHighestPriorityPeekTask+0x15b>
   1a60b:	48 c7 05 9a bd 11 00 	movq   $0x1,0x11bd9a(%rip)        # 1363b0 <xErrorDetected>
   1a612:	01 00 00 00 
   1a616:	8b 45 ec             	mov    -0x14(%rbp),%eax
   1a619:	3d bb aa bb aa       	cmp    $0xaabbaabb,%eax
   1a61e:	74 0b                	je     1a62b <prvHighestPriorityPeekTask+0x170>
   1a620:	48 c7 05 85 bd 11 00 	movq   $0x1,0x11bd85(%rip)        # 1363b0 <xErrorDetected>
   1a627:	01 00 00 00 
   1a62b:	bf 00 00 00 00       	mov    $0x0,%edi
   1a630:	e8 2c 27 ff ff       	callq  cd61 <vTaskSuspend>
   1a635:	e9 a8 fe ff ff       	jmpq   1a4e2 <prvHighestPriorityPeekTask+0x27>

000000000001a63a <prvHighPriorityPeekTask>:
   1a63a:	f3 0f 1e fa          	endbr64 
   1a63e:	55                   	push   %rbp
   1a63f:	48 89 e5             	mov    %rsp,%rbp
   1a642:	48 83 ec 30          	sub    $0x30,%rsp
   1a646:	48 89 7d d8          	mov    %rdi,-0x28(%rbp)
   1a64a:	64 48 8b 04 25 28 00 	mov    %fs:0x28,%rax
   1a651:	00 00 
   1a653:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
   1a657:	31 c0                	xor    %eax,%eax
   1a659:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
   1a65d:	48 89 45 f0          	mov    %rax,-0x10(%rbp)
   1a661:	48 8d 4d ec          	lea    -0x14(%rbp),%rcx
   1a665:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
   1a669:	48 c7 c2 ff ff ff ff 	mov    $0xffffffffffffffff,%rdx
   1a670:	48 89 ce             	mov    %rcx,%rsi
   1a673:	48 89 c7             	mov    %rax,%rdi
   1a676:	e8 f7 ce fe ff       	callq  7572 <xQueuePeek>
   1a67b:	48 83 f8 01          	cmp    $0x1,%rax
   1a67f:	74 0b                	je     1a68c <prvHighPriorityPeekTask+0x52>
   1a681:	48 c7 05 24 bd 11 00 	movq   $0x1,0x11bd24(%rip)        # 1363b0 <xErrorDetected>
   1a688:	01 00 00 00 
   1a68c:	8b 45 ec             	mov    -0x14(%rbp),%eax
   1a68f:	3d 67 45 23 01       	cmp    $0x1234567,%eax
   1a694:	74 0b                	je     1a6a1 <prvHighPriorityPeekTask+0x67>
   1a696:	48 c7 05 0f bd 11 00 	movq   $0x1,0x11bd0f(%rip)        # 1363b0 <xErrorDetected>
   1a69d:	01 00 00 00 
   1a6a1:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
   1a6a5:	48 89 c7             	mov    %rax,%rdi
   1a6a8:	e8 61 d7 fe ff       	callq  7e0e <uxQueueMessagesWaiting>
   1a6ad:	48 83 f8 01          	cmp    $0x1,%rax
   1a6b1:	74 0b                	je     1a6be <prvHighPriorityPeekTask+0x84>
   1a6b3:	48 c7 05 f2 bc 11 00 	movq   $0x1,0x11bcf2(%rip)        # 1363b0 <xErrorDetected>
   1a6ba:	01 00 00 00 
   1a6be:	bf 00 00 00 00       	mov    $0x0,%edi
   1a6c3:	e8 99 26 ff ff       	callq  cd61 <vTaskSuspend>
   1a6c8:	48 8d 4d ec          	lea    -0x14(%rbp),%rcx
   1a6cc:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
   1a6d0:	48 c7 c2 ff ff ff ff 	mov    $0xffffffffffffffff,%rdx
   1a6d7:	48 89 ce             	mov    %rcx,%rsi
   1a6da:	48 89 c7             	mov    %rax,%rdi
   1a6dd:	e8 01 c3 fe ff       	callq  69e3 <xQueueReceive>
   1a6e2:	48 83 f8 01          	cmp    $0x1,%rax
   1a6e6:	74 0b                	je     1a6f3 <prvHighPriorityPeekTask+0xb9>
   1a6e8:	48 c7 05 bd bc 11 00 	movq   $0x1,0x11bcbd(%rip)        # 1363b0 <xErrorDetected>
   1a6ef:	01 00 00 00 
   1a6f3:	8b 45 ec             	mov    -0x14(%rbp),%eax
   1a6f6:	3d bb aa bb aa       	cmp    $0xaabbaabb,%eax
   1a6fb:	74 0b                	je     1a708 <prvHighPriorityPeekTask+0xce>
   1a6fd:	48 c7 05 a8 bc 11 00 	movq   $0x1,0x11bca8(%rip)        # 1363b0 <xErrorDetected>
   1a704:	01 00 00 00 
   1a708:	bf 00 00 00 00       	mov    $0x0,%edi
   1a70d:	e8 4f 26 ff ff       	callq  cd61 <vTaskSuspend>
   1a712:	e9 4a ff ff ff       	jmpq   1a661 <prvHighPriorityPeekTask+0x27>

000000000001a717 <prvMediumPriorityPeekTask>:
   1a717:	f3 0f 1e fa          	endbr64 
   1a71b:	55                   	push   %rbp
   1a71c:	48 89 e5             	mov    %rsp,%rbp
   1a71f:	48 83 ec 30          	sub    $0x30,%rsp
   1a723:	48 89 7d d8          	mov    %rdi,-0x28(%rbp)
   1a727:	64 48 8b 04 25 28 00 	mov    %fs:0x28,%rax
   1a72e:	00 00 
   1a730:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
   1a734:	31 c0                	xor    %eax,%eax
   1a736:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
   1a73a:	48 89 45 f0          	mov    %rax,-0x10(%rbp)
   1a73e:	48 8d 4d ec          	lea    -0x14(%rbp),%rcx
   1a742:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
   1a746:	48 c7 c2 ff ff ff ff 	mov    $0xffffffffffffffff,%rdx
   1a74d:	48 89 ce             	mov    %rcx,%rsi
   1a750:	48 89 c7             	mov    %rax,%rdi
   1a753:	e8 1a ce fe ff       	callq  7572 <xQueuePeek>
   1a758:	48 83 f8 01          	cmp    $0x1,%rax
   1a75c:	74 0b                	je     1a769 <prvMediumPriorityPeekTask+0x52>
   1a75e:	48 c7 05 47 bc 11 00 	movq   $0x1,0x11bc47(%rip)        # 1363b0 <xErrorDetected>
   1a765:	01 00 00 00 
   1a769:	8b 45 ec             	mov    -0x14(%rbp),%eax
   1a76c:	3d 67 45 23 01       	cmp    $0x1234567,%eax
   1a771:	74 0b                	je     1a77e <prvMediumPriorityPeekTask+0x67>
   1a773:	48 c7 05 32 bc 11 00 	movq   $0x1,0x11bc32(%rip)        # 1363b0 <xErrorDetected>
   1a77a:	01 00 00 00 
   1a77e:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
   1a782:	48 89 c7             	mov    %rax,%rdi
   1a785:	e8 84 d6 fe ff       	callq  7e0e <uxQueueMessagesWaiting>
   1a78a:	48 83 f8 01          	cmp    $0x1,%rax
   1a78e:	74 0b                	je     1a79b <prvMediumPriorityPeekTask+0x84>
   1a790:	48 c7 05 15 bc 11 00 	movq   $0x1,0x11bc15(%rip)        # 1363b0 <xErrorDetected>
   1a797:	01 00 00 00 
   1a79b:	8b 05 17 bc 11 00    	mov    0x11bc17(%rip),%eax        # 1363b8 <ulLoopCounter>
   1a7a1:	83 c0 01             	add    $0x1,%eax
   1a7a4:	89 05 0e bc 11 00    	mov    %eax,0x11bc0e(%rip)        # 1363b8 <ulLoopCounter>
   1a7aa:	bf 00 00 00 00       	mov    $0x0,%edi
   1a7af:	e8 ad 25 ff ff       	callq  cd61 <vTaskSuspend>
   1a7b4:	eb 88                	jmp    1a73e <prvMediumPriorityPeekTask+0x27>

000000000001a7b6 <prvLowPriorityPeekTask>:
   1a7b6:	f3 0f 1e fa          	endbr64 
   1a7ba:	55                   	push   %rbp
   1a7bb:	48 89 e5             	mov    %rsp,%rbp
   1a7be:	48 83 ec 30          	sub    $0x30,%rsp
   1a7c2:	48 89 7d d8          	mov    %rdi,-0x28(%rbp)
   1a7c6:	64 48 8b 04 25 28 00 	mov    %fs:0x28,%rax
   1a7cd:	00 00 
   1a7cf:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
   1a7d3:	31 c0                	xor    %eax,%eax
   1a7d5:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
   1a7d9:	48 89 45 f0          	mov    %rax,-0x10(%rbp)
   1a7dd:	c7 45 ec 44 33 22 11 	movl   $0x11223344,-0x14(%rbp)
   1a7e4:	48 8d 75 ec          	lea    -0x14(%rbp),%rsi
   1a7e8:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
   1a7ec:	b9 00 00 00 00       	mov    $0x0,%ecx
   1a7f1:	ba 00 00 00 00       	mov    $0x0,%edx
   1a7f6:	48 89 c7             	mov    %rax,%rdi
   1a7f9:	e8 99 b5 fe ff       	callq  5d97 <xQueueGenericSend>
   1a7fe:	48 83 f8 01          	cmp    $0x1,%rax
   1a802:	74 0b                	je     1a80f <prvLowPriorityPeekTask+0x59>
   1a804:	48 c7 05 a1 bb 11 00 	movq   $0x1,0x11bba1(%rip)        # 1363b0 <xErrorDetected>
   1a80b:	01 00 00 00 
   1a80f:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
   1a813:	48 89 c7             	mov    %rax,%rdi
   1a816:	e8 f3 d5 fe ff       	callq  7e0e <uxQueueMessagesWaiting>
   1a81b:	48 85 c0             	test   %rax,%rax
   1a81e:	74 0b                	je     1a82b <prvLowPriorityPeekTask+0x75>
   1a820:	48 c7 05 85 bb 11 00 	movq   $0x1,0x11bb85(%rip)        # 1363b0 <xErrorDetected>
   1a827:	01 00 00 00 
   1a82b:	c7 45 ec 67 45 23 01 	movl   $0x1234567,-0x14(%rbp)
   1a832:	48 8d 75 ec          	lea    -0x14(%rbp),%rsi
   1a836:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
   1a83a:	b9 00 00 00 00       	mov    $0x0,%ecx
   1a83f:	ba 00 00 00 00       	mov    $0x0,%edx
   1a844:	48 89 c7             	mov    %rax,%rdi
   1a847:	e8 4b b5 fe ff       	callq  5d97 <xQueueGenericSend>
   1a84c:	48 83 f8 01          	cmp    $0x1,%rax
   1a850:	74 0b                	je     1a85d <prvLowPriorityPeekTask+0xa7>
   1a852:	48 c7 05 53 bb 11 00 	movq   $0x1,0x11bb53(%rip)        # 1363b0 <xErrorDetected>
   1a859:	01 00 00 00 
   1a85d:	c7 45 ec 00 00 00 00 	movl   $0x0,-0x14(%rbp)
   1a864:	48 8d 4d ec          	lea    -0x14(%rbp),%rcx
   1a868:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
   1a86c:	ba 00 00 00 00       	mov    $0x0,%edx
   1a871:	48 89 ce             	mov    %rcx,%rsi
   1a874:	48 89 c7             	mov    %rax,%rdi
   1a877:	e8 67 c1 fe ff       	callq  69e3 <xQueueReceive>
   1a87c:	48 83 f8 01          	cmp    $0x1,%rax
   1a880:	74 0b                	je     1a88d <prvLowPriorityPeekTask+0xd7>
   1a882:	48 c7 05 23 bb 11 00 	movq   $0x1,0x11bb23(%rip)        # 1363b0 <xErrorDetected>
   1a889:	01 00 00 00 
   1a88d:	8b 45 ec             	mov    -0x14(%rbp),%eax
   1a890:	3d 67 45 23 01       	cmp    $0x1234567,%eax
   1a895:	74 0b                	je     1a8a2 <prvLowPriorityPeekTask+0xec>
   1a897:	48 c7 05 0e bb 11 00 	movq   $0x1,0x11bb0e(%rip)        # 1363b0 <xErrorDetected>
   1a89e:	01 00 00 00 
   1a8a2:	bf 0a 00 00 00       	mov    $0xa,%edi
   1a8a7:	e8 f6 1e ff ff       	callq  c7a2 <vTaskDelay>
   1a8ac:	48 8b 05 65 d4 11 00 	mov    0x11d465(%rip),%rax        # 137d18 <xMediumPriorityTask>
   1a8b3:	48 89 c7             	mov    %rax,%rdi
   1a8b6:	e8 c4 26 ff ff       	callq  cf7f <vTaskResume>
   1a8bb:	48 8b 05 4e d4 11 00 	mov    0x11d44e(%rip),%rax        # 137d10 <xHighPriorityTask>
   1a8c2:	48 89 c7             	mov    %rax,%rdi
   1a8c5:	e8 b5 26 ff ff       	callq  cf7f <vTaskResume>
   1a8ca:	48 8b 05 4f d4 11 00 	mov    0x11d44f(%rip),%rax        # 137d20 <xHighestPriorityTask>
   1a8d1:	48 89 c7             	mov    %rax,%rdi
   1a8d4:	e8 a6 26 ff ff       	callq  cf7f <vTaskResume>
   1a8d9:	c7 45 ec bb aa bb aa 	movl   $0xaabbaabb,-0x14(%rbp)
   1a8e0:	48 8d 75 ec          	lea    -0x14(%rbp),%rsi
   1a8e4:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
   1a8e8:	b9 01 00 00 00       	mov    $0x1,%ecx
   1a8ed:	ba 00 00 00 00       	mov    $0x0,%edx
   1a8f2:	48 89 c7             	mov    %rax,%rdi
   1a8f5:	e8 9d b4 fe ff       	callq  5d97 <xQueueGenericSend>
   1a8fa:	48 83 f8 01          	cmp    $0x1,%rax
   1a8fe:	74 0b                	je     1a90b <prvLowPriorityPeekTask+0x155>
   1a900:	48 c7 05 a5 ba 11 00 	movq   $0x1,0x11baa5(%rip)        # 1363b0 <xErrorDetected>
   1a907:	01 00 00 00 
   1a90b:	48 8d 4d ec          	lea    -0x14(%rbp),%rcx
   1a90f:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
   1a913:	ba 00 00 00 00       	mov    $0x0,%edx
   1a918:	48 89 ce             	mov    %rcx,%rsi
   1a91b:	48 89 c7             	mov    %rax,%rdi
   1a91e:	e8 4f cc fe ff       	callq  7572 <xQueuePeek>
   1a923:	48 85 c0             	test   %rax,%rax
   1a926:	74 0b                	je     1a933 <prvLowPriorityPeekTask+0x17d>
   1a928:	48 c7 05 7d ba 11 00 	movq   $0x1,0x11ba7d(%rip)        # 1363b0 <xErrorDetected>
   1a92f:	01 00 00 00 
   1a933:	48 8b 05 d6 d3 11 00 	mov    0x11d3d6(%rip),%rax        # 137d10 <xHighPriorityTask>
   1a93a:	48 89 c7             	mov    %rax,%rdi
   1a93d:	e8 3d 26 ff ff       	callq  cf7f <vTaskResume>
   1a942:	48 8b 05 d7 d3 11 00 	mov    0x11d3d7(%rip),%rax        # 137d20 <xHighestPriorityTask>
   1a949:	48 89 c7             	mov    %rax,%rdi
   1a94c:	e8 2e 26 ff ff       	callq  cf7f <vTaskResume>
   1a951:	bf 0a 00 00 00       	mov    $0xa,%edi
   1a956:	e8 47 1e ff ff       	callq  c7a2 <vTaskDelay>
   1a95b:	e9 7d fe ff ff       	jmpq   1a7dd <prvLowPriorityPeekTask+0x27>

000000000001a960 <xAreQueuePeekTasksStillRunning>:
   1a960:	f3 0f 1e fa          	endbr64 
   1a964:	55                   	push   %rbp
   1a965:	48 89 e5             	mov    %rsp,%rbp
   1a968:	8b 15 4e ba 11 00    	mov    0x11ba4e(%rip),%edx        # 1363bc <ulLastLoopCounter.3467>
   1a96e:	8b 05 44 ba 11 00    	mov    0x11ba44(%rip),%eax        # 1363b8 <ulLoopCounter>
   1a974:	39 c2                	cmp    %eax,%edx
   1a976:	75 0b                	jne    1a983 <xAreQueuePeekTasksStillRunning+0x23>
   1a978:	48 c7 05 2d ba 11 00 	movq   $0x1,0x11ba2d(%rip)        # 1363b0 <xErrorDetected>
   1a97f:	01 00 00 00 
   1a983:	8b 05 2f ba 11 00    	mov    0x11ba2f(%rip),%eax        # 1363b8 <ulLoopCounter>
   1a989:	89 05 2d ba 11 00    	mov    %eax,0x11ba2d(%rip)        # 1363bc <ulLastLoopCounter.3467>
   1a98f:	48 8b 05 1a ba 11 00 	mov    0x11ba1a(%rip),%rax        # 1363b0 <xErrorDetected>
   1a996:	48 85 c0             	test   %rax,%rax
   1a999:	0f 94 c0             	sete   %al
   1a99c:	0f b6 c0             	movzbl %al,%eax
   1a99f:	5d                   	pop    %rbp
   1a9a0:	c3                   	retq   

000000000001a9a1 <vStartQueueOverwriteTask>:
   1a9a1:	f3 0f 1e fa          	endbr64 
   1a9a5:	55                   	push   %rbp
   1a9a6:	48 89 e5             	mov    %rsp,%rbp
   1a9a9:	48 83 ec 20          	sub    $0x20,%rsp
   1a9ad:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
   1a9b1:	48 c7 45 f8 01 00 00 	movq   $0x1,-0x8(%rbp)
   1a9b8:	00 
   1a9b9:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   1a9bd:	ba 00 00 00 00       	mov    $0x0,%edx
   1a9c2:	be 04 00 00 00       	mov    $0x4,%esi
   1a9c7:	48 89 c7             	mov    %rax,%rdi
   1a9ca:	e8 24 ac fe ff       	callq  55f3 <xQueueGenericCreate>
   1a9cf:	48 89 05 f2 b9 11 00 	mov    %rax,0x11b9f2(%rip)        # 1363c8 <xISRQueue>
   1a9d6:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
   1a9da:	41 b9 00 00 00 00    	mov    $0x0,%r9d
   1a9e0:	49 89 c0             	mov    %rax,%r8
   1a9e3:	b9 00 00 00 00       	mov    $0x0,%ecx
   1a9e8:	ba 46 00 00 00       	mov    $0x46,%edx
   1a9ed:	48 8d 35 04 d6 00 00 	lea    0xd604(%rip),%rsi        # 27ff8 <xInterruptGivePeriod+0x208>
   1a9f4:	48 8d 3d 08 00 00 00 	lea    0x8(%rip),%rdi        # 1aa03 <prvQueueOverwriteTask>
   1a9fb:	e8 f7 12 ff ff       	callq  bcf7 <xTaskCreate>
   1aa00:	90                   	nop
   1aa01:	c9                   	leaveq 
   1aa02:	c3                   	retq   

000000000001aa03 <prvQueueOverwriteTask>:
   1aa03:	f3 0f 1e fa          	endbr64 
   1aa07:	55                   	push   %rbp
   1aa08:	48 89 e5             	mov    %rsp,%rbp
   1aa0b:	48 83 ec 40          	sub    $0x40,%rsp
   1aa0f:	48 89 7d c8          	mov    %rdi,-0x38(%rbp)
   1aa13:	64 48 8b 04 25 28 00 	mov    %fs:0x28,%rax
   1aa1a:	00 00 
   1aa1c:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
   1aa20:	31 c0                	xor    %eax,%eax
   1aa22:	48 c7 45 e8 01 00 00 	movq   $0x1,-0x18(%rbp)
   1aa29:	00 
   1aa2a:	c7 45 e4 01 00 00 00 	movl   $0x1,-0x1c(%rbp)
   1aa31:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
   1aa35:	ba 00 00 00 00       	mov    $0x0,%edx
   1aa3a:	be 04 00 00 00       	mov    $0x4,%esi
   1aa3f:	48 89 c7             	mov    %rax,%rdi
   1aa42:	e8 ac ab fe ff       	callq  55f3 <xQueueGenericCreate>
   1aa47:	48 89 45 f0          	mov    %rax,-0x10(%rbp)
   1aa4b:	48 83 7d f0 00       	cmpq   $0x0,-0x10(%rbp)
   1aa50:	75 11                	jne    1aa63 <prvQueueOverwriteTask+0x60>
   1aa52:	be 5a 00 00 00       	mov    $0x5a,%esi
   1aa57:	48 8d 3d a2 d5 00 00 	lea    0xd5a2(%rip),%rdi        # 28000 <xInterruptGivePeriod+0x210>
   1aa5e:	e8 a9 92 fe ff       	callq  3d0c <vAssertCalled>
   1aa63:	c7 45 dc 0a 00 00 00 	movl   $0xa,-0x24(%rbp)
   1aa6a:	48 8d 75 dc          	lea    -0x24(%rbp),%rsi
   1aa6e:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
   1aa72:	b9 02 00 00 00       	mov    $0x2,%ecx
   1aa77:	ba 00 00 00 00       	mov    $0x0,%edx
   1aa7c:	48 89 c7             	mov    %rax,%rdi
   1aa7f:	e8 13 b3 fe ff       	callq  5d97 <xQueueGenericSend>
   1aa84:	c7 45 dc 00 00 00 00 	movl   $0x0,-0x24(%rbp)
   1aa8b:	48 8d 4d dc          	lea    -0x24(%rbp),%rcx
   1aa8f:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
   1aa93:	ba 00 00 00 00       	mov    $0x0,%edx
   1aa98:	48 89 ce             	mov    %rcx,%rsi
   1aa9b:	48 89 c7             	mov    %rax,%rdi
   1aa9e:	e8 40 bf fe ff       	callq  69e3 <xQueueReceive>
   1aaa3:	8b 45 dc             	mov    -0x24(%rbp),%eax
   1aaa6:	83 f8 0a             	cmp    $0xa,%eax
   1aaa9:	74 07                	je     1aab2 <prvQueueOverwriteTask+0xaf>
   1aaab:	c7 45 e4 00 00 00 00 	movl   $0x0,-0x1c(%rbp)
   1aab2:	c7 45 e0 00 00 00 00 	movl   $0x0,-0x20(%rbp)
   1aab9:	eb 65                	jmp    1ab20 <prvQueueOverwriteTask+0x11d>
   1aabb:	48 8d 75 e0          	lea    -0x20(%rbp),%rsi
   1aabf:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
   1aac3:	b9 02 00 00 00       	mov    $0x2,%ecx
   1aac8:	ba 00 00 00 00       	mov    $0x0,%edx
   1aacd:	48 89 c7             	mov    %rax,%rdi
   1aad0:	e8 c2 b2 fe ff       	callq  5d97 <xQueueGenericSend>
   1aad5:	48 8d 4d dc          	lea    -0x24(%rbp),%rcx
   1aad9:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
   1aadd:	ba 00 00 00 00       	mov    $0x0,%edx
   1aae2:	48 89 ce             	mov    %rcx,%rsi
   1aae5:	48 89 c7             	mov    %rax,%rdi
   1aae8:	e8 85 ca fe ff       	callq  7572 <xQueuePeek>
   1aaed:	8b 55 dc             	mov    -0x24(%rbp),%edx
   1aaf0:	8b 45 e0             	mov    -0x20(%rbp),%eax
   1aaf3:	39 c2                	cmp    %eax,%edx
   1aaf5:	74 07                	je     1aafe <prvQueueOverwriteTask+0xfb>
   1aaf7:	c7 45 e4 00 00 00 00 	movl   $0x0,-0x1c(%rbp)
   1aafe:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
   1ab02:	48 89 c7             	mov    %rax,%rdi
   1ab05:	e8 04 d3 fe ff       	callq  7e0e <uxQueueMessagesWaiting>
   1ab0a:	48 39 45 e8          	cmp    %rax,-0x18(%rbp)
   1ab0e:	74 07                	je     1ab17 <prvQueueOverwriteTask+0x114>
   1ab10:	c7 45 e4 00 00 00 00 	movl   $0x0,-0x1c(%rbp)
   1ab17:	8b 45 e0             	mov    -0x20(%rbp),%eax
   1ab1a:	83 c0 01             	add    $0x1,%eax
   1ab1d:	89 45 e0             	mov    %eax,-0x20(%rbp)
   1ab20:	8b 45 e0             	mov    -0x20(%rbp),%eax
   1ab23:	83 f8 04             	cmp    $0x4,%eax
   1ab26:	76 93                	jbe    1aabb <prvQueueOverwriteTask+0xb8>
   1ab28:	48 8d 4d dc          	lea    -0x24(%rbp),%rcx
   1ab2c:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
   1ab30:	ba 00 00 00 00       	mov    $0x0,%edx
   1ab35:	48 89 ce             	mov    %rcx,%rsi
   1ab38:	48 89 c7             	mov    %rax,%rdi
   1ab3b:	e8 a3 be fe ff       	callq  69e3 <xQueueReceive>
   1ab40:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
   1ab44:	48 89 c7             	mov    %rax,%rdi
   1ab47:	e8 c2 d2 fe ff       	callq  7e0e <uxQueueMessagesWaiting>
   1ab4c:	48 85 c0             	test   %rax,%rax
   1ab4f:	74 07                	je     1ab58 <prvQueueOverwriteTask+0x155>
   1ab51:	c7 45 e4 00 00 00 00 	movl   $0x0,-0x1c(%rbp)
   1ab58:	83 7d e4 00          	cmpl   $0x0,-0x1c(%rbp)
   1ab5c:	0f 84 01 ff ff ff    	je     1aa63 <prvQueueOverwriteTask+0x60>
   1ab62:	8b 05 58 b8 11 00    	mov    0x11b858(%rip),%eax        # 1363c0 <ulLoopCounter>
   1ab68:	83 c0 01             	add    $0x1,%eax
   1ab6b:	89 05 4f b8 11 00    	mov    %eax,0x11b84f(%rip)        # 1363c0 <ulLoopCounter>
   1ab71:	e9 ed fe ff ff       	jmpq   1aa63 <prvQueueOverwriteTask+0x60>

000000000001ab76 <xIsQueueOverwriteTaskStillRunning>:
   1ab76:	f3 0f 1e fa          	endbr64 
   1ab7a:	55                   	push   %rbp
   1ab7b:	48 89 e5             	mov    %rsp,%rbp
   1ab7e:	48 8b 05 db 64 01 00 	mov    0x164db(%rip),%rax        # 31060 <xISRTestStatus>
   1ab85:	48 83 f8 01          	cmp    $0x1,%rax
   1ab89:	74 0a                	je     1ab95 <xIsQueueOverwriteTaskStillRunning+0x1f>
   1ab8b:	48 c7 45 f8 00 00 00 	movq   $0x0,-0x8(%rbp)
   1ab92:	00 
   1ab93:	eb 1c                	jmp    1abb1 <xIsQueueOverwriteTaskStillRunning+0x3b>
   1ab95:	8b 05 25 b8 11 00    	mov    0x11b825(%rip),%eax        # 1363c0 <ulLoopCounter>
   1ab9b:	85 c0                	test   %eax,%eax
   1ab9d:	74 0a                	je     1aba9 <xIsQueueOverwriteTaskStillRunning+0x33>
   1ab9f:	48 c7 45 f8 01 00 00 	movq   $0x1,-0x8(%rbp)
   1aba6:	00 
   1aba7:	eb 08                	jmp    1abb1 <xIsQueueOverwriteTaskStillRunning+0x3b>
   1aba9:	48 c7 45 f8 00 00 00 	movq   $0x0,-0x8(%rbp)
   1abb0:	00 
   1abb1:	c7 05 05 b8 11 00 00 	movl   $0x0,0x11b805(%rip)        # 1363c0 <ulLoopCounter>
   1abb8:	00 00 00 
   1abbb:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   1abbf:	5d                   	pop    %rbp
   1abc0:	c3                   	retq   

000000000001abc1 <vQueueOverwritePeriodicISRDemo>:
   1abc1:	f3 0f 1e fa          	endbr64 
   1abc5:	55                   	push   %rbp
   1abc6:	48 89 e5             	mov    %rsp,%rbp
   1abc9:	48 83 ec 20          	sub    $0x20,%rsp
   1abcd:	64 48 8b 04 25 28 00 	mov    %fs:0x28,%rax
   1abd4:	00 00 
   1abd6:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
   1abda:	31 c0                	xor    %eax,%eax
   1abdc:	c7 45 e8 0a 00 00 00 	movl   $0xa,-0x18(%rbp)
   1abe3:	c7 45 ec 14 00 00 00 	movl   $0x14,-0x14(%rbp)
   1abea:	c7 45 f4 03 00 00 00 	movl   $0x3,-0xc(%rbp)
   1abf1:	48 8b 05 d0 b7 11 00 	mov    0x11b7d0(%rip),%rax        # 1363c8 <xISRQueue>
   1abf8:	48 85 c0             	test   %rax,%rax
   1abfb:	75 11                	jne    1ac0e <vQueueOverwritePeriodicISRDemo+0x4d>
   1abfd:	be b9 00 00 00       	mov    $0xb9,%esi
   1ac02:	48 8d 3d f7 d3 00 00 	lea    0xd3f7(%rip),%rdi        # 28000 <xInterruptGivePeriod+0x210>
   1ac09:	e8 fe 90 fe ff       	callq  3d0c <vAssertCalled>
   1ac0e:	8b 05 bc b7 11 00    	mov    0x11b7bc(%rip),%eax        # 1363d0 <ulCallCount.2938>
   1ac14:	83 f8 02             	cmp    $0x2,%eax
   1ac17:	0f 84 80 00 00 00    	je     1ac9d <vQueueOverwritePeriodicISRDemo+0xdc>
   1ac1d:	83 f8 02             	cmp    $0x2,%eax
   1ac20:	0f 87 ad 00 00 00    	ja     1acd3 <vQueueOverwritePeriodicISRDemo+0x112>
   1ac26:	85 c0                	test   %eax,%eax
   1ac28:	74 0a                	je     1ac34 <vQueueOverwritePeriodicISRDemo+0x73>
   1ac2a:	83 f8 01             	cmp    $0x1,%eax
   1ac2d:	74 4f                	je     1ac7e <vQueueOverwritePeriodicISRDemo+0xbd>
   1ac2f:	e9 9f 00 00 00       	jmpq   1acd3 <vQueueOverwritePeriodicISRDemo+0x112>
   1ac34:	48 8b 05 8d b7 11 00 	mov    0x11b78d(%rip),%rax        # 1363c8 <xISRQueue>
   1ac3b:	48 8d 75 e8          	lea    -0x18(%rbp),%rsi
   1ac3f:	b9 02 00 00 00       	mov    $0x2,%ecx
   1ac44:	ba 00 00 00 00       	mov    $0x0,%edx
   1ac49:	48 89 c7             	mov    %rax,%rdi
   1ac4c:	e8 38 b7 fe ff       	callq  6389 <xQueueGenericSendFromISR>
   1ac51:	48 8b 05 70 b7 11 00 	mov    0x11b770(%rip),%rax        # 1363c8 <xISRQueue>
   1ac58:	48 8d 55 f0          	lea    -0x10(%rbp),%rdx
   1ac5c:	48 89 d6             	mov    %rdx,%rsi
   1ac5f:	48 89 c7             	mov    %rax,%rdi
   1ac62:	e8 b5 d0 fe ff       	callq  7d1c <xQueuePeekFromISR>
   1ac67:	8b 55 f0             	mov    -0x10(%rbp),%edx
   1ac6a:	8b 45 e8             	mov    -0x18(%rbp),%eax
   1ac6d:	39 c2                	cmp    %eax,%edx
   1ac6f:	74 5e                	je     1accf <vQueueOverwritePeriodicISRDemo+0x10e>
   1ac71:	48 c7 05 e4 63 01 00 	movq   $0x0,0x163e4(%rip)        # 31060 <xISRTestStatus>
   1ac78:	00 00 00 00 
   1ac7c:	eb 51                	jmp    1accf <vQueueOverwritePeriodicISRDemo+0x10e>
   1ac7e:	48 8b 05 43 b7 11 00 	mov    0x11b743(%rip),%rax        # 1363c8 <xISRQueue>
   1ac85:	48 8d 75 ec          	lea    -0x14(%rbp),%rsi
   1ac89:	b9 02 00 00 00       	mov    $0x2,%ecx
   1ac8e:	ba 00 00 00 00       	mov    $0x0,%edx
   1ac93:	48 89 c7             	mov    %rax,%rdi
   1ac96:	e8 ee b6 fe ff       	callq  6389 <xQueueGenericSendFromISR>
   1ac9b:	eb 36                	jmp    1acd3 <vQueueOverwritePeriodicISRDemo+0x112>
   1ac9d:	48 8b 05 24 b7 11 00 	mov    0x11b724(%rip),%rax        # 1363c8 <xISRQueue>
   1aca4:	48 8d 4d f0          	lea    -0x10(%rbp),%rcx
   1aca8:	ba 00 00 00 00       	mov    $0x0,%edx
   1acad:	48 89 ce             	mov    %rcx,%rsi
   1acb0:	48 89 c7             	mov    %rax,%rdi
   1acb3:	e8 d8 cd fe ff       	callq  7a90 <xQueueReceiveFromISR>
   1acb8:	8b 55 f0             	mov    -0x10(%rbp),%edx
   1acbb:	8b 45 ec             	mov    -0x14(%rbp),%eax
   1acbe:	39 c2                	cmp    %eax,%edx
   1acc0:	74 10                	je     1acd2 <vQueueOverwritePeriodicISRDemo+0x111>
   1acc2:	48 c7 05 93 63 01 00 	movq   $0x0,0x16393(%rip)        # 31060 <xISRTestStatus>
   1acc9:	00 00 00 00 
   1accd:	eb 03                	jmp    1acd2 <vQueueOverwritePeriodicISRDemo+0x111>
   1accf:	90                   	nop
   1acd0:	eb 01                	jmp    1acd3 <vQueueOverwritePeriodicISRDemo+0x112>
   1acd2:	90                   	nop
   1acd3:	8b 05 f7 b6 11 00    	mov    0x11b6f7(%rip),%eax        # 1363d0 <ulCallCount.2938>
   1acd9:	83 c0 01             	add    $0x1,%eax
   1acdc:	89 05 ee b6 11 00    	mov    %eax,0x11b6ee(%rip)        # 1363d0 <ulCallCount.2938>
   1ace2:	8b 05 e8 b6 11 00    	mov    0x11b6e8(%rip),%eax        # 1363d0 <ulCallCount.2938>
   1ace8:	39 45 f4             	cmp    %eax,-0xc(%rbp)
   1aceb:	77 0a                	ja     1acf7 <vQueueOverwritePeriodicISRDemo+0x136>
   1aced:	c7 05 d9 b6 11 00 00 	movl   $0x0,0x11b6d9(%rip)        # 1363d0 <ulCallCount.2938>
   1acf4:	00 00 00 
   1acf7:	90                   	nop
   1acf8:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   1acfc:	64 48 33 04 25 28 00 	xor    %fs:0x28,%rax
   1ad03:	00 00 
   1ad05:	74 05                	je     1ad0c <vQueueOverwritePeriodicISRDemo+0x14b>
   1ad07:	e8 c4 77 fe ff       	callq  24d0 <__stack_chk_fail@plt>
   1ad0c:	c9                   	leaveq 
   1ad0d:	c3                   	retq   

000000000001ad0e <vStartQueueSetTasks>:
   1ad0e:	f3 0f 1e fa          	endbr64 
   1ad12:	55                   	push   %rbp
   1ad13:	48 89 e5             	mov    %rsp,%rbp
   1ad16:	4c 8d 0d 0b d0 11 00 	lea    0x11d00b(%rip),%r9        # 137d28 <xQueueSetSendingTask>
   1ad1d:	41 b8 01 00 00 00    	mov    $0x1,%r8d
   1ad23:	b9 00 00 00 00       	mov    $0x0,%ecx
   1ad28:	ba 46 00 00 00       	mov    $0x46,%edx
   1ad2d:	48 8d 35 1c d3 00 00 	lea    0xd31c(%rip),%rsi        # 28050 <xInterruptGivePeriod+0x260>
   1ad34:	48 8d 3d 41 01 00 00 	lea    0x141(%rip),%rdi        # 1ae7c <prvQueueSetSendingTask>
   1ad3b:	e8 b7 0f ff ff       	callq  bcf7 <xTaskCreate>
   1ad40:	48 8b 05 e1 cf 11 00 	mov    0x11cfe1(%rip),%rax        # 137d28 <xQueueSetSendingTask>
   1ad47:	48 85 c0             	test   %rax,%rax
   1ad4a:	74 3e                	je     1ad8a <vStartQueueSetTasks+0x7c>
   1ad4c:	48 8b 05 d5 cf 11 00 	mov    0x11cfd5(%rip),%rax        # 137d28 <xQueueSetSendingTask>
   1ad53:	4c 8d 0d d6 cf 11 00 	lea    0x11cfd6(%rip),%r9        # 137d30 <xQueueSetReceivingTask>
   1ad5a:	41 b8 01 00 00 00    	mov    $0x1,%r8d
   1ad60:	48 89 c1             	mov    %rax,%rcx
   1ad63:	ba 46 00 00 00       	mov    $0x46,%edx
   1ad68:	48 8d 35 e7 d2 00 00 	lea    0xd2e7(%rip),%rsi        # 28056 <xInterruptGivePeriod+0x266>
   1ad6f:	48 8d 3d e3 02 00 00 	lea    0x2e3(%rip),%rdi        # 1b059 <prvQueueSetReceivingTask>
   1ad76:	e8 7c 0f ff ff       	callq  bcf7 <xTaskCreate>
   1ad7b:	48 8b 05 a6 cf 11 00 	mov    0x11cfa6(%rip),%rax        # 137d28 <xQueueSetSendingTask>
   1ad82:	48 89 c7             	mov    %rax,%rdi
   1ad85:	e8 d7 1f ff ff       	callq  cd61 <vTaskSuspend>
   1ad8a:	90                   	nop
   1ad8b:	5d                   	pop    %rbp
   1ad8c:	c3                   	retq   

000000000001ad8d <xAreQueueSetTasksStillRunning>:
   1ad8d:	f3 0f 1e fa          	endbr64 
   1ad91:	55                   	push   %rbp
   1ad92:	48 89 e5             	mov    %rsp,%rbp
   1ad95:	48 c7 45 f0 01 00 00 	movq   $0x1,-0x10(%rbp)
   1ad9c:	00 
   1ad9d:	8b 15 85 b6 11 00    	mov    0x11b685(%rip),%edx        # 136428 <ulLastCycleCounter.3472>
   1ada3:	8b 05 67 b6 11 00    	mov    0x11b667(%rip),%eax        # 136410 <ulCycleCounter>
   1ada9:	39 c2                	cmp    %eax,%edx
   1adab:	75 08                	jne    1adb5 <xAreQueueSetTasksStillRunning+0x28>
   1adad:	48 c7 45 f0 00 00 00 	movq   $0x0,-0x10(%rbp)
   1adb4:	00 
   1adb5:	8b 05 55 b6 11 00    	mov    0x11b655(%rip),%eax        # 136410 <ulCycleCounter>
   1adbb:	89 05 67 b6 11 00    	mov    %eax,0x11b667(%rip)        # 136428 <ulLastCycleCounter.3472>
   1adc1:	48 c7 45 f8 00 00 00 	movq   $0x0,-0x8(%rbp)
   1adc8:	00 
   1adc9:	eb 69                	jmp    1ae34 <xAreQueueSetTasksStillRunning+0xa7>
   1adcb:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   1adcf:	48 8d 14 85 00 00 00 	lea    0x0(,%rax,4),%rdx
   1add6:	00 
   1add7:	48 8d 05 52 b6 11 00 	lea    0x11b652(%rip),%rax        # 136430 <ulLastQueueUsedCounter.3474>
   1adde:	8b 14 02             	mov    (%rdx,%rax,1),%edx
   1ade1:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   1ade5:	48 8d 0c 85 00 00 00 	lea    0x0(,%rax,4),%rcx
   1adec:	00 
   1aded:	48 8d 05 04 b6 11 00 	lea    0x11b604(%rip),%rax        # 1363f8 <ulQueueUsedCounter>
   1adf4:	8b 04 01             	mov    (%rcx,%rax,1),%eax
   1adf7:	39 c2                	cmp    %eax,%edx
   1adf9:	75 08                	jne    1ae03 <xAreQueueSetTasksStillRunning+0x76>
   1adfb:	48 c7 45 f0 00 00 00 	movq   $0x0,-0x10(%rbp)
   1ae02:	00 
   1ae03:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   1ae07:	48 8d 14 85 00 00 00 	lea    0x0(,%rax,4),%rdx
   1ae0e:	00 
   1ae0f:	48 8d 05 e2 b5 11 00 	lea    0x11b5e2(%rip),%rax        # 1363f8 <ulQueueUsedCounter>
   1ae16:	8b 04 02             	mov    (%rdx,%rax,1),%eax
   1ae19:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
   1ae1d:	48 8d 0c 95 00 00 00 	lea    0x0(,%rdx,4),%rcx
   1ae24:	00 
   1ae25:	48 8d 15 04 b6 11 00 	lea    0x11b604(%rip),%rdx        # 136430 <ulLastQueueUsedCounter.3474>
   1ae2c:	89 04 11             	mov    %eax,(%rcx,%rdx,1)
   1ae2f:	48 83 45 f8 01       	addq   $0x1,-0x8(%rbp)
   1ae34:	48 83 7d f8 02       	cmpq   $0x2,-0x8(%rbp)
   1ae39:	7e 90                	jle    1adcb <xAreQueueSetTasksStillRunning+0x3e>
   1ae3b:	48 8b 05 26 62 01 00 	mov    0x16226(%rip),%rax        # 31068 <xQueueSetTasksStatus>
   1ae42:	48 83 f8 01          	cmp    $0x1,%rax
   1ae46:	74 08                	je     1ae50 <xAreQueueSetTasksStillRunning+0xc3>
   1ae48:	48 c7 45 f0 00 00 00 	movq   $0x0,-0x10(%rbp)
   1ae4f:	00 
   1ae50:	8b 15 1a 62 01 00    	mov    0x1621a(%rip),%edx        # 31070 <ulISRTxValue>
   1ae56:	8b 05 e0 b5 11 00    	mov    0x11b5e0(%rip),%eax        # 13643c <ulLastISRTxValue.3473>
   1ae5c:	39 c2                	cmp    %eax,%edx
   1ae5e:	75 0a                	jne    1ae6a <xAreQueueSetTasksStillRunning+0xdd>
   1ae60:	48 c7 45 f0 00 00 00 	movq   $0x0,-0x10(%rbp)
   1ae67:	00 
   1ae68:	eb 0c                	jmp    1ae76 <xAreQueueSetTasksStillRunning+0xe9>
   1ae6a:	8b 05 00 62 01 00    	mov    0x16200(%rip),%eax        # 31070 <ulISRTxValue>
   1ae70:	89 05 c6 b5 11 00    	mov    %eax,0x11b5c6(%rip)        # 13643c <ulLastISRTxValue.3473>
   1ae76:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
   1ae7a:	5d                   	pop    %rbp
   1ae7b:	c3                   	retq   

000000000001ae7c <prvQueueSetSendingTask>:
   1ae7c:	f3 0f 1e fa          	endbr64 
   1ae80:	55                   	push   %rbp
   1ae81:	48 89 e5             	mov    %rsp,%rbp
   1ae84:	48 83 ec 30          	sub    $0x30,%rsp
   1ae88:	48 89 7d d8          	mov    %rdi,-0x28(%rbp)
   1ae8c:	64 48 8b 04 25 28 00 	mov    %fs:0x28,%rax
   1ae93:	00 00 
   1ae95:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
   1ae99:	31 c0                	xor    %eax,%eax
   1ae9b:	c7 45 e4 00 00 00 00 	movl   $0x0,-0x1c(%rbp)
   1aea2:	48 8d 45 e4          	lea    -0x1c(%rbp),%rax
   1aea6:	48 89 c7             	mov    %rax,%rdi
   1aea9:	e8 cb 12 00 00       	callq  1c179 <prvSRand>
   1aeae:	e8 91 12 00 00       	callq  1c144 <prvRand>
   1aeb3:	48 89 c1             	mov    %rax,%rcx
   1aeb6:	48 ba ab aa aa aa aa 	movabs $0xaaaaaaaaaaaaaaab,%rdx
   1aebd:	aa aa aa 
   1aec0:	48 89 c8             	mov    %rcx,%rax
   1aec3:	48 f7 e2             	mul    %rdx
   1aec6:	48 89 d0             	mov    %rdx,%rax
   1aec9:	48 d1 e8             	shr    %rax
   1aecc:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
   1aed0:	48 8b 55 e8          	mov    -0x18(%rbp),%rdx
   1aed4:	48 89 d0             	mov    %rdx,%rax
   1aed7:	48 01 c0             	add    %rax,%rax
   1aeda:	48 01 d0             	add    %rdx,%rax
   1aedd:	48 29 c1             	sub    %rax,%rcx
   1aee0:	48 89 c8             	mov    %rcx,%rax
   1aee3:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
   1aee7:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
   1aeeb:	48 8d 14 c5 00 00 00 	lea    0x0(,%rax,8),%rdx
   1aef2:	00 
   1aef3:	48 8d 05 e6 b4 11 00 	lea    0x11b4e6(%rip),%rax        # 1363e0 <xQueues>
   1aefa:	48 8b 04 02          	mov    (%rdx,%rax,1),%rax
   1aefe:	48 89 45 f0          	mov    %rax,-0x10(%rbp)
   1af02:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
   1af06:	48 8d 14 85 00 00 00 	lea    0x0(,%rax,4),%rdx
   1af0d:	00 
   1af0e:	48 8d 05 e3 b4 11 00 	lea    0x11b4e3(%rip),%rax        # 1363f8 <ulQueueUsedCounter>
   1af15:	8b 04 02             	mov    (%rdx,%rax,1),%eax
   1af18:	8d 48 01             	lea    0x1(%rax),%ecx
   1af1b:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
   1af1f:	48 8d 14 85 00 00 00 	lea    0x0(,%rax,4),%rdx
   1af26:	00 
   1af27:	48 8d 05 ca b4 11 00 	lea    0x11b4ca(%rip),%rax        # 1363f8 <ulQueueUsedCounter>
   1af2e:	89 0c 02             	mov    %ecx,(%rdx,%rax,1)
   1af31:	48 8d 75 e4          	lea    -0x1c(%rbp),%rsi
   1af35:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
   1af39:	b9 00 00 00 00       	mov    $0x0,%ecx
   1af3e:	48 c7 c2 ff ff ff ff 	mov    $0xffffffffffffffff,%rdx
   1af45:	48 89 c7             	mov    %rax,%rdi
   1af48:	e8 4a ae fe ff       	callq  5d97 <xQueueGenericSend>
   1af4d:	48 83 f8 01          	cmp    $0x1,%rax
   1af51:	74 0b                	je     1af5e <prvQueueSetSendingTask+0xe2>
   1af53:	48 c7 05 0a 61 01 00 	movq   $0x0,0x1610a(%rip)        # 31068 <xQueueSetTasksStatus>
   1af5a:	00 00 00 00 
   1af5e:	8b 45 e4             	mov    -0x1c(%rbp),%eax
   1af61:	83 c0 01             	add    $0x1,%eax
   1af64:	89 45 e4             	mov    %eax,-0x1c(%rbp)
   1af67:	8b 45 e4             	mov    -0x1c(%rbp),%eax
   1af6a:	3d ff ff 00 00       	cmp    $0xffff,%eax
   1af6f:	75 07                	jne    1af78 <prvQueueSetSendingTask+0xfc>
   1af71:	c7 45 e4 00 00 00 00 	movl   $0x0,-0x1c(%rbp)
   1af78:	e8 05 00 00 00       	callq  1af82 <prvChangeRelativePriorities>
   1af7d:	e9 2c ff ff ff       	jmpq   1aeae <prvQueueSetSendingTask+0x32>

000000000001af82 <prvChangeRelativePriorities>:
   1af82:	f3 0f 1e fa          	endbr64 
   1af86:	55                   	push   %rbp
   1af87:	48 89 e5             	mov    %rsp,%rbp
   1af8a:	48 8b 05 af b4 11 00 	mov    0x11b4af(%rip),%rax        # 136440 <ulLoops.3490>
   1af91:	48 83 c0 01          	add    $0x1,%rax
   1af95:	48 89 05 a4 b4 11 00 	mov    %rax,0x11b4a4(%rip)        # 136440 <ulLoops.3490>
   1af9c:	48 8b 05 9d b4 11 00 	mov    0x11b49d(%rip),%rax        # 136440 <ulLoops.3490>
   1afa3:	48 83 f8 11          	cmp    $0x11,%rax
   1afa7:	0f 86 a8 00 00 00    	jbe    1b055 <prvChangeRelativePriorities+0xd3>
   1afad:	48 c7 05 88 b4 11 00 	movq   $0x0,0x11b488(%rip)        # 136440 <ulLoops.3490>
   1afb4:	00 00 00 00 
   1afb8:	8b 05 8a b4 11 00    	mov    0x11b48a(%rip),%eax        # 136448 <ePriorities.3491>
   1afbe:	83 f8 02             	cmp    $0x2,%eax
   1afc1:	74 68                	je     1b02b <prvChangeRelativePriorities+0xa9>
   1afc3:	83 f8 02             	cmp    $0x2,%eax
   1afc6:	0f 87 8a 00 00 00    	ja     1b056 <prvChangeRelativePriorities+0xd4>
   1afcc:	85 c0                	test   %eax,%eax
   1afce:	74 07                	je     1afd7 <prvChangeRelativePriorities+0x55>
   1afd0:	83 f8 01             	cmp    $0x1,%eax
   1afd3:	74 22                	je     1aff7 <prvChangeRelativePriorities+0x75>
   1afd5:	eb 7f                	jmp    1b056 <prvChangeRelativePriorities+0xd4>
   1afd7:	48 8b 05 52 cd 11 00 	mov    0x11cd52(%rip),%rax        # 137d30 <xQueueSetReceivingTask>
   1afde:	be 00 00 00 00       	mov    $0x0,%esi
   1afe3:	48 89 c7             	mov    %rax,%rdi
   1afe6:	e8 51 1a ff ff       	callq  ca3c <vTaskPrioritySet>
   1afeb:	c7 05 53 b4 11 00 01 	movl   $0x1,0x11b453(%rip)        # 136448 <ePriorities.3491>
   1aff2:	00 00 00 
   1aff5:	eb 5f                	jmp    1b056 <prvChangeRelativePriorities+0xd4>
   1aff7:	48 8b 05 32 cd 11 00 	mov    0x11cd32(%rip),%rax        # 137d30 <xQueueSetReceivingTask>
   1affe:	be 01 00 00 00       	mov    $0x1,%esi
   1b003:	48 89 c7             	mov    %rax,%rdi
   1b006:	e8 31 1a ff ff       	callq  ca3c <vTaskPrioritySet>
   1b00b:	48 8b 05 16 cd 11 00 	mov    0x11cd16(%rip),%rax        # 137d28 <xQueueSetSendingTask>
   1b012:	be 00 00 00 00       	mov    $0x0,%esi
   1b017:	48 89 c7             	mov    %rax,%rdi
   1b01a:	e8 1d 1a ff ff       	callq  ca3c <vTaskPrioritySet>
   1b01f:	c7 05 1f b4 11 00 02 	movl   $0x2,0x11b41f(%rip)        # 136448 <ePriorities.3491>
   1b026:	00 00 00 
   1b029:	eb 2b                	jmp    1b056 <prvChangeRelativePriorities+0xd4>
   1b02b:	48 8b 05 f6 cc 11 00 	mov    0x11ccf6(%rip),%rax        # 137d28 <xQueueSetSendingTask>
   1b032:	be 01 00 00 00       	mov    $0x1,%esi
   1b037:	48 89 c7             	mov    %rax,%rdi
   1b03a:	e8 fd 19 ff ff       	callq  ca3c <vTaskPrioritySet>
   1b03f:	c7 05 ff b3 11 00 00 	movl   $0x0,0x11b3ff(%rip)        # 136448 <ePriorities.3491>
   1b046:	00 00 00 
   1b049:	bf c8 00 00 00       	mov    $0xc8,%edi
   1b04e:	e8 4f 17 ff ff       	callq  c7a2 <vTaskDelay>
   1b053:	eb 01                	jmp    1b056 <prvChangeRelativePriorities+0xd4>
   1b055:	90                   	nop
   1b056:	90                   	nop
   1b057:	5d                   	pop    %rbp
   1b058:	c3                   	retq   

000000000001b059 <prvQueueSetReceivingTask>:
   1b059:	f3 0f 1e fa          	endbr64 
   1b05d:	55                   	push   %rbp
   1b05e:	48 89 e5             	mov    %rsp,%rbp
   1b061:	48 83 ec 30          	sub    $0x30,%rsp
   1b065:	48 89 7d d8          	mov    %rdi,-0x28(%rbp)
   1b069:	64 48 8b 04 25 28 00 	mov    %fs:0x28,%rax
   1b070:	00 00 
   1b072:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
   1b076:	31 c0                	xor    %eax,%eax
   1b078:	e8 50 0e 00 00       	callq  1becd <prvSetupTest>
   1b07d:	bf 00 00 00 00       	mov    $0x0,%edi
   1b082:	e8 22 19 ff ff       	callq  c9a9 <uxTaskPriorityGet>
   1b087:	48 85 c0             	test   %rax,%rax
   1b08a:	75 0a                	jne    1b096 <prvQueueSetReceivingTask+0x3d>
   1b08c:	48 c7 45 e8 00 00 00 	movq   $0x0,-0x18(%rbp)
   1b093:	00 
   1b094:	eb 08                	jmp    1b09e <prvQueueSetReceivingTask+0x45>
   1b096:	48 c7 45 e8 ff ff ff 	movq   $0xffffffffffffffff,-0x18(%rbp)
   1b09d:	ff 
   1b09e:	48 8b 05 63 b3 11 00 	mov    0x11b363(%rip),%rax        # 136408 <xQueueSet>
   1b0a5:	48 c7 c6 ff ff ff ff 	mov    $0xffffffffffffffff,%rsi
   1b0ac:	48 89 c7             	mov    %rax,%rdi
   1b0af:	e8 eb d8 fe ff       	callq  899f <xQueueSelectFromSet>
   1b0b4:	48 89 45 f0          	mov    %rax,-0x10(%rbp)
   1b0b8:	48 83 7d f0 00       	cmpq   $0x0,-0x10(%rbp)
   1b0bd:	75 14                	jne    1b0d3 <prvQueueSetReceivingTask+0x7a>
   1b0bf:	48 83 7d e8 00       	cmpq   $0x0,-0x18(%rbp)
   1b0c4:	74 b7                	je     1b07d <prvQueueSetReceivingTask+0x24>
   1b0c6:	48 c7 05 97 5f 01 00 	movq   $0x0,0x15f97(%rip)        # 31068 <xQueueSetTasksStatus>
   1b0cd:	00 00 00 00 
   1b0d1:	eb aa                	jmp    1b07d <prvQueueSetReceivingTask+0x24>
   1b0d3:	48 8d 4d e4          	lea    -0x1c(%rbp),%rcx
   1b0d7:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
   1b0db:	ba 00 00 00 00       	mov    $0x0,%edx
   1b0e0:	48 89 ce             	mov    %rcx,%rsi
   1b0e3:	48 89 c7             	mov    %rax,%rdi
   1b0e6:	e8 f8 b8 fe ff       	callq  69e3 <xQueueReceive>
   1b0eb:	48 83 f8 01          	cmp    $0x1,%rax
   1b0ef:	74 0b                	je     1b0fc <prvQueueSetReceivingTask+0xa3>
   1b0f1:	48 c7 05 6c 5f 01 00 	movq   $0x0,0x15f6c(%rip)        # 31068 <xQueueSetTasksStatus>
   1b0f8:	00 00 00 00 
   1b0fc:	e8 ce 7c ff ff       	callq  12dcf <vPortEnterCritical>
   1b101:	8b 45 e4             	mov    -0x1c(%rbp),%eax
   1b104:	89 c7                	mov    %eax,%edi
   1b106:	e8 70 00 00 00       	callq  1b17b <prvCheckReceivedValue>
   1b10b:	e8 ed 7c ff ff       	callq  12dfd <vPortExitCritical>
   1b110:	48 8b 05 51 5f 01 00 	mov    0x15f51(%rip),%rax        # 31068 <xQueueSetTasksStatus>
   1b117:	48 83 f8 01          	cmp    $0x1,%rax
   1b11b:	0f 85 5c ff ff ff    	jne    1b07d <prvQueueSetReceivingTask+0x24>
   1b121:	8b 05 e9 b2 11 00    	mov    0x11b2e9(%rip),%eax        # 136410 <ulCycleCounter>
   1b127:	83 c0 01             	add    $0x1,%eax
   1b12a:	89 05 e0 b2 11 00    	mov    %eax,0x11b2e0(%rip)        # 136410 <ulCycleCounter>
   1b130:	e9 48 ff ff ff       	jmpq   1b07d <prvQueueSetReceivingTask+0x24>

000000000001b135 <vQueueSetAccessQueueSetFromISR>:
   1b135:	f3 0f 1e fa          	endbr64 
   1b139:	55                   	push   %rbp
   1b13a:	48 89 e5             	mov    %rsp,%rbp
   1b13d:	48 8b 05 d4 b2 11 00 	mov    0x11b2d4(%rip),%rax        # 136418 <xSetupComplete>
   1b144:	48 83 f8 01          	cmp    $0x1,%rax
   1b148:	75 2e                	jne    1b178 <vQueueSetAccessQueueSetFromISR+0x43>
   1b14a:	8b 05 fc b2 11 00    	mov    0x11b2fc(%rip),%eax        # 13644c <ulCallCount.3506>
   1b150:	83 c0 01             	add    $0x1,%eax
   1b153:	89 05 f3 b2 11 00    	mov    %eax,0x11b2f3(%rip)        # 13644c <ulCallCount.3506>
   1b159:	8b 05 ed b2 11 00    	mov    0x11b2ed(%rip),%eax        # 13644c <ulCallCount.3506>
   1b15f:	83 f8 64             	cmp    $0x64,%eax
   1b162:	76 14                	jbe    1b178 <vQueueSetAccessQueueSetFromISR+0x43>
   1b164:	c7 05 de b2 11 00 00 	movl   $0x0,0x11b2de(%rip)        # 13644c <ulCallCount.3506>
   1b16b:	00 00 00 
   1b16e:	e8 a6 01 00 00       	callq  1b319 <prvReceiveFromQueueInSetFromISR>
   1b173:	e8 20 02 00 00       	callq  1b398 <prvSendToQueueInSetFromISR>
   1b178:	90                   	nop
   1b179:	5d                   	pop    %rbp
   1b17a:	c3                   	retq   

000000000001b17b <prvCheckReceivedValue>:
   1b17b:	f3 0f 1e fa          	endbr64 
   1b17f:	55                   	push   %rbp
   1b180:	48 89 e5             	mov    %rsp,%rbp
   1b183:	48 83 ec 10          	sub    $0x10,%rsp
   1b187:	89 7d fc             	mov    %edi,-0x4(%rbp)
   1b18a:	81 7d fc fe ff 00 00 	cmpl   $0xfffe,-0x4(%rbp)
   1b191:	76 7b                	jbe    1b20e <prvCheckReceivedValue+0x93>
   1b193:	8b 45 fc             	mov    -0x4(%rbp),%eax
   1b196:	48 2d ff ff 00 00    	sub    $0xffff,%rax
   1b19c:	48 83 f8 05          	cmp    $0x5,%rax
   1b1a0:	76 23                	jbe    1b1c5 <prvCheckReceivedValue+0x4a>
   1b1a2:	8b 15 cc 5e 01 00    	mov    0x15ecc(%rip),%edx        # 31074 <ulExpectedReceivedFromISR.3511>
   1b1a8:	8b 45 fc             	mov    -0x4(%rbp),%eax
   1b1ab:	89 d6                	mov    %edx,%esi
   1b1ad:	89 c7                	mov    %eax,%edi
   1b1af:	e8 dd 00 00 00       	callq  1b291 <prvCheckReceivedValueWithinExpectedRange>
   1b1b4:	48 83 f8 01          	cmp    $0x1,%rax
   1b1b8:	74 0b                	je     1b1c5 <prvCheckReceivedValue+0x4a>
   1b1ba:	48 c7 05 a3 5e 01 00 	movq   $0x0,0x15ea3(%rip)        # 31068 <xQueueSetTasksStatus>
   1b1c1:	00 00 00 00 
   1b1c5:	48 8b 05 9c 5e 01 00 	mov    0x15e9c(%rip),%rax        # 31068 <xQueueSetTasksStatus>
   1b1cc:	48 85 c0             	test   %rax,%rax
   1b1cf:	75 11                	jne    1b1e2 <prvCheckReceivedValue+0x67>
   1b1d1:	be fe 01 00 00       	mov    $0x1fe,%esi
   1b1d6:	48 8d 3d 83 ce 00 00 	lea    0xce83(%rip),%rdi        # 28060 <xInterruptGivePeriod+0x270>
   1b1dd:	e8 2a 8b fe ff       	callq  3d0c <vAssertCalled>
   1b1e2:	8b 05 8c 5e 01 00    	mov    0x15e8c(%rip),%eax        # 31074 <ulExpectedReceivedFromISR.3511>
   1b1e8:	83 c0 01             	add    $0x1,%eax
   1b1eb:	89 05 83 5e 01 00    	mov    %eax,0x15e83(%rip)        # 31074 <ulExpectedReceivedFromISR.3511>
   1b1f1:	8b 05 7d 5e 01 00    	mov    0x15e7d(%rip),%eax        # 31074 <ulExpectedReceivedFromISR.3511>
   1b1f7:	85 c0                	test   %eax,%eax
   1b1f9:	0f 85 8f 00 00 00    	jne    1b28e <prvCheckReceivedValue+0x113>
   1b1ff:	c7 05 6b 5e 01 00 ff 	movl   $0xffff,0x15e6b(%rip)        # 31074 <ulExpectedReceivedFromISR.3511>
   1b206:	ff 00 00 
   1b209:	e9 80 00 00 00       	jmpq   1b28e <prvCheckReceivedValue+0x113>
   1b20e:	83 7d fc 05          	cmpl   $0x5,-0x4(%rbp)
   1b212:	76 37                	jbe    1b24b <prvCheckReceivedValue+0xd0>
   1b214:	8b 45 fc             	mov    -0x4(%rbp),%eax
   1b217:	ba fe ff 00 00       	mov    $0xfffe,%edx
   1b21c:	48 29 c2             	sub    %rax,%rdx
   1b21f:	48 89 d0             	mov    %rdx,%rax
   1b222:	48 83 f8 06          	cmp    $0x6,%rax
   1b226:	76 23                	jbe    1b24b <prvCheckReceivedValue+0xd0>
   1b228:	8b 15 22 b2 11 00    	mov    0x11b222(%rip),%edx        # 136450 <ulExpectedReceivedFromTask.3510>
   1b22e:	8b 45 fc             	mov    -0x4(%rbp),%eax
   1b231:	89 d6                	mov    %edx,%esi
   1b233:	89 c7                	mov    %eax,%edi
   1b235:	e8 57 00 00 00       	callq  1b291 <prvCheckReceivedValueWithinExpectedRange>
   1b23a:	48 83 f8 01          	cmp    $0x1,%rax
   1b23e:	74 0b                	je     1b24b <prvCheckReceivedValue+0xd0>
   1b240:	48 c7 05 1d 5e 01 00 	movq   $0x0,0x15e1d(%rip)        # 31068 <xQueueSetTasksStatus>
   1b247:	00 00 00 00 
   1b24b:	48 8b 05 16 5e 01 00 	mov    0x15e16(%rip),%rax        # 31068 <xQueueSetTasksStatus>
   1b252:	48 85 c0             	test   %rax,%rax
   1b255:	75 11                	jne    1b268 <prvCheckReceivedValue+0xed>
   1b257:	be 1e 02 00 00       	mov    $0x21e,%esi
   1b25c:	48 8d 3d fd cd 00 00 	lea    0xcdfd(%rip),%rdi        # 28060 <xInterruptGivePeriod+0x270>
   1b263:	e8 a4 8a fe ff       	callq  3d0c <vAssertCalled>
   1b268:	8b 05 e2 b1 11 00    	mov    0x11b1e2(%rip),%eax        # 136450 <ulExpectedReceivedFromTask.3510>
   1b26e:	83 c0 01             	add    $0x1,%eax
   1b271:	89 05 d9 b1 11 00    	mov    %eax,0x11b1d9(%rip)        # 136450 <ulExpectedReceivedFromTask.3510>
   1b277:	8b 05 d3 b1 11 00    	mov    0x11b1d3(%rip),%eax        # 136450 <ulExpectedReceivedFromTask.3510>
   1b27d:	3d fe ff 00 00       	cmp    $0xfffe,%eax
   1b282:	76 0a                	jbe    1b28e <prvCheckReceivedValue+0x113>
   1b284:	c7 05 c2 b1 11 00 00 	movl   $0x0,0x11b1c2(%rip)        # 136450 <ulExpectedReceivedFromTask.3510>
   1b28b:	00 00 00 
   1b28e:	90                   	nop
   1b28f:	c9                   	leaveq 
   1b290:	c3                   	retq   

000000000001b291 <prvCheckReceivedValueWithinExpectedRange>:
   1b291:	f3 0f 1e fa          	endbr64 
   1b295:	55                   	push   %rbp
   1b296:	48 89 e5             	mov    %rsp,%rbp
   1b299:	48 83 ec 20          	sub    $0x20,%rsp
   1b29d:	89 7d ec             	mov    %edi,-0x14(%rbp)
   1b2a0:	89 75 e8             	mov    %esi,-0x18(%rbp)
   1b2a3:	48 c7 45 f8 01 00 00 	movq   $0x1,-0x8(%rbp)
   1b2aa:	00 
   1b2ab:	8b 45 ec             	mov    -0x14(%rbp),%eax
   1b2ae:	3b 45 e8             	cmp    -0x18(%rbp),%eax
   1b2b1:	76 31                	jbe    1b2e4 <prvCheckReceivedValueWithinExpectedRange+0x53>
   1b2b3:	8b 45 ec             	mov    -0x14(%rbp),%eax
   1b2b6:	2b 45 e8             	sub    -0x18(%rbp),%eax
   1b2b9:	83 f8 03             	cmp    $0x3,%eax
   1b2bc:	76 11                	jbe    1b2cf <prvCheckReceivedValueWithinExpectedRange+0x3e>
   1b2be:	be 32 02 00 00       	mov    $0x232,%esi
   1b2c3:	48 8d 3d 96 cd 00 00 	lea    0xcd96(%rip),%rdi        # 28060 <xInterruptGivePeriod+0x270>
   1b2ca:	e8 3d 8a fe ff       	callq  3d0c <vAssertCalled>
   1b2cf:	8b 45 ec             	mov    -0x14(%rbp),%eax
   1b2d2:	2b 45 e8             	sub    -0x18(%rbp),%eax
   1b2d5:	83 f8 03             	cmp    $0x3,%eax
   1b2d8:	76 39                	jbe    1b313 <prvCheckReceivedValueWithinExpectedRange+0x82>
   1b2da:	48 c7 45 f8 00 00 00 	movq   $0x0,-0x8(%rbp)
   1b2e1:	00 
   1b2e2:	eb 2f                	jmp    1b313 <prvCheckReceivedValueWithinExpectedRange+0x82>
   1b2e4:	8b 45 e8             	mov    -0x18(%rbp),%eax
   1b2e7:	2b 45 ec             	sub    -0x14(%rbp),%eax
   1b2ea:	83 f8 03             	cmp    $0x3,%eax
   1b2ed:	76 11                	jbe    1b300 <prvCheckReceivedValueWithinExpectedRange+0x6f>
   1b2ef:	be 3b 02 00 00       	mov    $0x23b,%esi
   1b2f4:	48 8d 3d 65 cd 00 00 	lea    0xcd65(%rip),%rdi        # 28060 <xInterruptGivePeriod+0x270>
   1b2fb:	e8 0c 8a fe ff       	callq  3d0c <vAssertCalled>
   1b300:	8b 45 e8             	mov    -0x18(%rbp),%eax
   1b303:	2b 45 ec             	sub    -0x14(%rbp),%eax
   1b306:	83 f8 03             	cmp    $0x3,%eax
   1b309:	76 08                	jbe    1b313 <prvCheckReceivedValueWithinExpectedRange+0x82>
   1b30b:	48 c7 45 f8 00 00 00 	movq   $0x0,-0x8(%rbp)
   1b312:	00 
   1b313:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   1b317:	c9                   	leaveq 
   1b318:	c3                   	retq   

000000000001b319 <prvReceiveFromQueueInSetFromISR>:
   1b319:	f3 0f 1e fa          	endbr64 
   1b31d:	55                   	push   %rbp
   1b31e:	48 89 e5             	mov    %rsp,%rbp
   1b321:	48 83 ec 20          	sub    $0x20,%rsp
   1b325:	64 48 8b 04 25 28 00 	mov    %fs:0x28,%rax
   1b32c:	00 00 
   1b32e:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
   1b332:	31 c0                	xor    %eax,%eax
   1b334:	48 8b 05 cd b0 11 00 	mov    0x11b0cd(%rip),%rax        # 136408 <xQueueSet>
   1b33b:	48 89 c7             	mov    %rax,%rdi
   1b33e:	e8 b8 d6 fe ff       	callq  89fb <xQueueSelectFromSetFromISR>
   1b343:	48 89 45 f0          	mov    %rax,-0x10(%rbp)
   1b347:	48 83 7d f0 00       	cmpq   $0x0,-0x10(%rbp)
   1b34c:	74 33                	je     1b381 <prvReceiveFromQueueInSetFromISR+0x68>
   1b34e:	48 8d 4d ec          	lea    -0x14(%rbp),%rcx
   1b352:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
   1b356:	ba 00 00 00 00       	mov    $0x0,%edx
   1b35b:	48 89 ce             	mov    %rcx,%rsi
   1b35e:	48 89 c7             	mov    %rax,%rdi
   1b361:	e8 2a c7 fe ff       	callq  7a90 <xQueueReceiveFromISR>
   1b366:	48 83 f8 01          	cmp    $0x1,%rax
   1b36a:	74 0b                	je     1b377 <prvReceiveFromQueueInSetFromISR+0x5e>
   1b36c:	48 c7 05 f1 5c 01 00 	movq   $0x0,0x15cf1(%rip)        # 31068 <xQueueSetTasksStatus>
   1b373:	00 00 00 00 
   1b377:	8b 45 ec             	mov    -0x14(%rbp),%eax
   1b37a:	89 c7                	mov    %eax,%edi
   1b37c:	e8 fa fd ff ff       	callq  1b17b <prvCheckReceivedValue>
   1b381:	90                   	nop
   1b382:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   1b386:	64 48 33 04 25 28 00 	xor    %fs:0x28,%rax
   1b38d:	00 00 
   1b38f:	74 05                	je     1b396 <prvReceiveFromQueueInSetFromISR+0x7d>
   1b391:	e8 3a 71 fe ff       	callq  24d0 <__stack_chk_fail@plt>
   1b396:	c9                   	leaveq 
   1b397:	c3                   	retq   

000000000001b398 <prvSendToQueueInSetFromISR>:
   1b398:	f3 0f 1e fa          	endbr64 
   1b39c:	55                   	push   %rbp
   1b39d:	48 89 e5             	mov    %rsp,%rbp
   1b3a0:	48 83 ec 10          	sub    $0x10,%rsp
   1b3a4:	64 48 8b 04 25 28 00 	mov    %fs:0x28,%rax
   1b3ab:	00 00 
   1b3ad:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
   1b3b1:	31 c0                	xor    %eax,%eax
   1b3b3:	8b 05 b7 5c 01 00    	mov    0x15cb7(%rip),%eax        # 31070 <ulISRTxValue>
   1b3b9:	89 45 f4             	mov    %eax,-0xc(%rbp)
   1b3bc:	48 8b 05 95 b0 11 00 	mov    0x11b095(%rip),%rax        # 136458 <xQueueToWriteTo.3525>
   1b3c3:	48 8d 14 c5 00 00 00 	lea    0x0(,%rax,8),%rdx
   1b3ca:	00 
   1b3cb:	48 8d 05 0e b0 11 00 	lea    0x11b00e(%rip),%rax        # 1363e0 <xQueues>
   1b3d2:	48 8b 04 02          	mov    (%rdx,%rax,1),%rax
   1b3d6:	48 8d 75 f4          	lea    -0xc(%rbp),%rsi
   1b3da:	b9 00 00 00 00       	mov    $0x0,%ecx
   1b3df:	ba 00 00 00 00       	mov    $0x0,%edx
   1b3e4:	48 89 c7             	mov    %rax,%rdi
   1b3e7:	e8 9d af fe ff       	callq  6389 <xQueueGenericSendFromISR>
   1b3ec:	48 83 f8 01          	cmp    $0x1,%rax
   1b3f0:	75 4d                	jne    1b43f <prvSendToQueueInSetFromISR+0xa7>
   1b3f2:	8b 05 78 5c 01 00    	mov    0x15c78(%rip),%eax        # 31070 <ulISRTxValue>
   1b3f8:	83 c0 01             	add    $0x1,%eax
   1b3fb:	89 05 6f 5c 01 00    	mov    %eax,0x15c6f(%rip)        # 31070 <ulISRTxValue>
   1b401:	8b 05 69 5c 01 00    	mov    0x15c69(%rip),%eax        # 31070 <ulISRTxValue>
   1b407:	85 c0                	test   %eax,%eax
   1b409:	75 0a                	jne    1b415 <prvSendToQueueInSetFromISR+0x7d>
   1b40b:	c7 05 5b 5c 01 00 ff 	movl   $0xffff,0x15c5b(%rip)        # 31070 <ulISRTxValue>
   1b412:	ff 00 00 
   1b415:	48 8b 05 3c b0 11 00 	mov    0x11b03c(%rip),%rax        # 136458 <xQueueToWriteTo.3525>
   1b41c:	48 83 c0 01          	add    $0x1,%rax
   1b420:	48 89 05 31 b0 11 00 	mov    %rax,0x11b031(%rip)        # 136458 <xQueueToWriteTo.3525>
   1b427:	48 8b 05 2a b0 11 00 	mov    0x11b02a(%rip),%rax        # 136458 <xQueueToWriteTo.3525>
   1b42e:	48 83 f8 02          	cmp    $0x2,%rax
   1b432:	7e 0b                	jle    1b43f <prvSendToQueueInSetFromISR+0xa7>
   1b434:	48 c7 05 19 b0 11 00 	movq   $0x0,0x11b019(%rip)        # 136458 <xQueueToWriteTo.3525>
   1b43b:	00 00 00 00 
   1b43f:	90                   	nop
   1b440:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   1b444:	64 48 33 04 25 28 00 	xor    %fs:0x28,%rax
   1b44b:	00 00 
   1b44d:	74 05                	je     1b454 <prvSendToQueueInSetFromISR+0xbc>
   1b44f:	e8 7c 70 fe ff       	callq  24d0 <__stack_chk_fail@plt>
   1b454:	c9                   	leaveq 
   1b455:	c3                   	retq   

000000000001b456 <prvTestQueueOverwriteWithQueueSet>:
   1b456:	f3 0f 1e fa          	endbr64 
   1b45a:	55                   	push   %rbp
   1b45b:	48 89 e5             	mov    %rsp,%rbp
   1b45e:	48 83 ec 30          	sub    $0x30,%rsp
   1b462:	64 48 8b 04 25 28 00 	mov    %fs:0x28,%rax
   1b469:	00 00 
   1b46b:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
   1b46f:	31 c0                	xor    %eax,%eax
   1b471:	c7 45 d8 00 00 00 00 	movl   $0x0,-0x28(%rbp)
   1b478:	c7 45 dc 00 00 00 00 	movl   $0x0,-0x24(%rbp)
   1b47f:	48 c7 45 e8 00 00 00 	movq   $0x0,-0x18(%rbp)
   1b486:	00 
   1b487:	48 c7 45 e0 00 00 00 	movq   $0x0,-0x20(%rbp)
   1b48e:	00 
   1b48f:	48 c7 45 f0 01 00 00 	movq   $0x1,-0x10(%rbp)
   1b496:	00 
   1b497:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
   1b49b:	ba 00 00 00 00       	mov    $0x0,%edx
   1b4a0:	be 04 00 00 00       	mov    $0x4,%esi
   1b4a5:	48 89 c7             	mov    %rax,%rdi
   1b4a8:	e8 46 a1 fe ff       	callq  55f3 <xQueueGenericCreate>
   1b4ad:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
   1b4b1:	48 83 7d e8 00       	cmpq   $0x0,-0x18(%rbp)
   1b4b6:	75 11                	jne    1b4c9 <prvTestQueueOverwriteWithQueueSet+0x73>
   1b4b8:	be 82 02 00 00       	mov    $0x282,%esi
   1b4bd:	48 8d 3d 9c cb 00 00 	lea    0xcb9c(%rip),%rdi        # 28060 <xInterruptGivePeriod+0x270>
   1b4c4:	e8 43 88 fe ff       	callq  3d0c <vAssertCalled>
   1b4c9:	48 83 7d e8 00       	cmpq   $0x0,-0x18(%rbp)
   1b4ce:	0f 84 8a 01 00 00    	je     1b65e <prvTestQueueOverwriteWithQueueSet+0x208>
   1b4d4:	48 8b 15 2d af 11 00 	mov    0x11af2d(%rip),%rdx        # 136408 <xQueueSet>
   1b4db:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
   1b4df:	48 89 d6             	mov    %rdx,%rsi
   1b4e2:	48 89 c7             	mov    %rax,%rdi
   1b4e5:	e8 d4 d3 fe ff       	callq  88be <xQueueAddToSet>
   1b4ea:	48 8d 75 d8          	lea    -0x28(%rbp),%rsi
   1b4ee:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
   1b4f2:	b9 02 00 00 00       	mov    $0x2,%ecx
   1b4f7:	ba 00 00 00 00       	mov    $0x0,%edx
   1b4fc:	48 89 c7             	mov    %rax,%rdi
   1b4ff:	e8 93 a8 fe ff       	callq  5d97 <xQueueGenericSend>
   1b504:	48 8b 05 fd ae 11 00 	mov    0x11aefd(%rip),%rax        # 136408 <xQueueSet>
   1b50b:	48 89 c7             	mov    %rax,%rdi
   1b50e:	e8 fb c8 fe ff       	callq  7e0e <uxQueueMessagesWaiting>
   1b513:	48 83 f8 01          	cmp    $0x1,%rax
   1b517:	74 0b                	je     1b524 <prvTestQueueOverwriteWithQueueSet+0xce>
   1b519:	48 c7 05 44 5b 01 00 	movq   $0x0,0x15b44(%rip)        # 31068 <xQueueSetTasksStatus>
   1b520:	00 00 00 00 
   1b524:	48 8b 05 dd ae 11 00 	mov    0x11aedd(%rip),%rax        # 136408 <xQueueSet>
   1b52b:	48 8d 4d e0          	lea    -0x20(%rbp),%rcx
   1b52f:	ba 00 00 00 00       	mov    $0x0,%edx
   1b534:	48 89 ce             	mov    %rcx,%rsi
   1b537:	48 89 c7             	mov    %rax,%rdi
   1b53a:	e8 33 c0 fe ff       	callq  7572 <xQueuePeek>
   1b53f:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
   1b543:	48 39 45 e8          	cmp    %rax,-0x18(%rbp)
   1b547:	74 0b                	je     1b554 <prvTestQueueOverwriteWithQueueSet+0xfe>
   1b549:	48 c7 05 14 5b 01 00 	movq   $0x0,0x15b14(%rip)        # 31068 <xQueueSetTasksStatus>
   1b550:	00 00 00 00 
   1b554:	8b 45 d8             	mov    -0x28(%rbp),%eax
   1b557:	83 c0 01             	add    $0x1,%eax
   1b55a:	89 45 d8             	mov    %eax,-0x28(%rbp)
   1b55d:	48 8d 75 d8          	lea    -0x28(%rbp),%rsi
   1b561:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
   1b565:	b9 02 00 00 00       	mov    $0x2,%ecx
   1b56a:	ba 00 00 00 00       	mov    $0x0,%edx
   1b56f:	48 89 c7             	mov    %rax,%rdi
   1b572:	e8 20 a8 fe ff       	callq  5d97 <xQueueGenericSend>
   1b577:	48 8b 05 8a ae 11 00 	mov    0x11ae8a(%rip),%rax        # 136408 <xQueueSet>
   1b57e:	48 89 c7             	mov    %rax,%rdi
   1b581:	e8 88 c8 fe ff       	callq  7e0e <uxQueueMessagesWaiting>
   1b586:	48 83 f8 01          	cmp    $0x1,%rax
   1b58a:	74 0b                	je     1b597 <prvTestQueueOverwriteWithQueueSet+0x141>
   1b58c:	48 c7 05 d1 5a 01 00 	movq   $0x0,0x15ad1(%rip)        # 31068 <xQueueSetTasksStatus>
   1b593:	00 00 00 00 
   1b597:	48 8b 05 6a ae 11 00 	mov    0x11ae6a(%rip),%rax        # 136408 <xQueueSet>
   1b59e:	be 00 00 00 00       	mov    $0x0,%esi
   1b5a3:	48 89 c7             	mov    %rax,%rdi
   1b5a6:	e8 f4 d3 fe ff       	callq  899f <xQueueSelectFromSet>
   1b5ab:	48 89 45 e0          	mov    %rax,-0x20(%rbp)
   1b5af:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
   1b5b3:	48 39 45 e8          	cmp    %rax,-0x18(%rbp)
   1b5b7:	74 0b                	je     1b5c4 <prvTestQueueOverwriteWithQueueSet+0x16e>
   1b5b9:	48 c7 05 a4 5a 01 00 	movq   $0x0,0x15aa4(%rip)        # 31068 <xQueueSetTasksStatus>
   1b5c0:	00 00 00 00 
   1b5c4:	48 8d 4d dc          	lea    -0x24(%rbp),%rcx
   1b5c8:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
   1b5cc:	ba 00 00 00 00       	mov    $0x0,%edx
   1b5d1:	48 89 ce             	mov    %rcx,%rsi
   1b5d4:	48 89 c7             	mov    %rax,%rdi
   1b5d7:	e8 07 b4 fe ff       	callq  69e3 <xQueueReceive>
   1b5dc:	8b 55 dc             	mov    -0x24(%rbp),%edx
   1b5df:	8b 45 d8             	mov    -0x28(%rbp),%eax
   1b5e2:	39 c2                	cmp    %eax,%edx
   1b5e4:	74 0b                	je     1b5f1 <prvTestQueueOverwriteWithQueueSet+0x19b>
   1b5e6:	48 c7 05 77 5a 01 00 	movq   $0x0,0x15a77(%rip)        # 31068 <xQueueSetTasksStatus>
   1b5ed:	00 00 00 00 
   1b5f1:	48 8b 05 10 ae 11 00 	mov    0x11ae10(%rip),%rax        # 136408 <xQueueSet>
   1b5f8:	48 89 c7             	mov    %rax,%rdi
   1b5fb:	e8 0e c8 fe ff       	callq  7e0e <uxQueueMessagesWaiting>
   1b600:	48 85 c0             	test   %rax,%rax
   1b603:	74 0b                	je     1b610 <prvTestQueueOverwriteWithQueueSet+0x1ba>
   1b605:	48 c7 05 58 5a 01 00 	movq   $0x0,0x15a58(%rip)        # 31068 <xQueueSetTasksStatus>
   1b60c:	00 00 00 00 
   1b610:	48 8b 05 f1 ad 11 00 	mov    0x11adf1(%rip),%rax        # 136408 <xQueueSet>
   1b617:	be 00 00 00 00       	mov    $0x0,%esi
   1b61c:	48 89 c7             	mov    %rax,%rdi
   1b61f:	e8 7b d3 fe ff       	callq  899f <xQueueSelectFromSet>
   1b624:	48 89 45 e0          	mov    %rax,-0x20(%rbp)
   1b628:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
   1b62c:	48 85 c0             	test   %rax,%rax
   1b62f:	74 0b                	je     1b63c <prvTestQueueOverwriteWithQueueSet+0x1e6>
   1b631:	48 c7 05 2c 5a 01 00 	movq   $0x0,0x15a2c(%rip)        # 31068 <xQueueSetTasksStatus>
   1b638:	00 00 00 00 
   1b63c:	48 8b 15 c5 ad 11 00 	mov    0x11adc5(%rip),%rdx        # 136408 <xQueueSet>
   1b643:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
   1b647:	48 89 d6             	mov    %rdx,%rsi
   1b64a:	48 89 c7             	mov    %rax,%rdi
   1b64d:	e8 d8 d2 fe ff       	callq  892a <xQueueRemoveFromSet>
   1b652:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
   1b656:	48 89 c7             	mov    %rax,%rdi
   1b659:	e8 90 c8 fe ff       	callq  7eee <vQueueDelete>
   1b65e:	90                   	nop
   1b65f:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   1b663:	64 48 33 04 25 28 00 	xor    %fs:0x28,%rax
   1b66a:	00 00 
   1b66c:	74 05                	je     1b673 <prvTestQueueOverwriteWithQueueSet+0x21d>
   1b66e:	e8 5d 6e fe ff       	callq  24d0 <__stack_chk_fail@plt>
   1b673:	c9                   	leaveq 
   1b674:	c3                   	retq   

000000000001b675 <prvTestQueueOverwriteOnTwoQueusInQueueSet>:
   1b675:	f3 0f 1e fa          	endbr64 
   1b679:	55                   	push   %rbp
   1b67a:	48 89 e5             	mov    %rsp,%rbp
   1b67d:	48 83 ec 40          	sub    $0x40,%rsp
   1b681:	64 48 8b 04 25 28 00 	mov    %fs:0x28,%rax
   1b688:	00 00 
   1b68a:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
   1b68e:	31 c0                	xor    %eax,%eax
   1b690:	c7 45 cc 01 00 00 00 	movl   $0x1,-0x34(%rbp)
   1b697:	c7 45 d0 02 00 00 00 	movl   $0x2,-0x30(%rbp)
   1b69e:	c7 45 d4 00 00 00 00 	movl   $0x0,-0x2c(%rbp)
   1b6a5:	48 c7 45 e0 00 00 00 	movq   $0x0,-0x20(%rbp)
   1b6ac:	00 
   1b6ad:	48 c7 45 e8 00 00 00 	movq   $0x0,-0x18(%rbp)
   1b6b4:	00 
   1b6b5:	48 c7 45 d8 00 00 00 	movq   $0x0,-0x28(%rbp)
   1b6bc:	00 
   1b6bd:	48 c7 45 f0 01 00 00 	movq   $0x1,-0x10(%rbp)
   1b6c4:	00 
   1b6c5:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
   1b6c9:	ba 00 00 00 00       	mov    $0x0,%edx
   1b6ce:	be 04 00 00 00       	mov    $0x4,%esi
   1b6d3:	48 89 c7             	mov    %rax,%rdi
   1b6d6:	e8 18 9f fe ff       	callq  55f3 <xQueueGenericCreate>
   1b6db:	48 89 45 e0          	mov    %rax,-0x20(%rbp)
   1b6df:	48 83 7d e0 00       	cmpq   $0x0,-0x20(%rbp)
   1b6e4:	75 11                	jne    1b6f7 <prvTestQueueOverwriteOnTwoQueusInQueueSet+0x82>
   1b6e6:	be d8 02 00 00       	mov    $0x2d8,%esi
   1b6eb:	48 8d 3d 6e c9 00 00 	lea    0xc96e(%rip),%rdi        # 28060 <xInterruptGivePeriod+0x270>
   1b6f2:	e8 15 86 fe ff       	callq  3d0c <vAssertCalled>
   1b6f7:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
   1b6fb:	ba 00 00 00 00       	mov    $0x0,%edx
   1b700:	be 04 00 00 00       	mov    $0x4,%esi
   1b705:	48 89 c7             	mov    %rax,%rdi
   1b708:	e8 e6 9e fe ff       	callq  55f3 <xQueueGenericCreate>
   1b70d:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
   1b711:	48 83 7d e8 00       	cmpq   $0x0,-0x18(%rbp)
   1b716:	75 11                	jne    1b729 <prvTestQueueOverwriteOnTwoQueusInQueueSet+0xb4>
   1b718:	be da 02 00 00       	mov    $0x2da,%esi
   1b71d:	48 8d 3d 3c c9 00 00 	lea    0xc93c(%rip),%rdi        # 28060 <xInterruptGivePeriod+0x270>
   1b724:	e8 e3 85 fe ff       	callq  3d0c <vAssertCalled>
   1b729:	48 83 7d e0 00       	cmpq   $0x0,-0x20(%rbp)
   1b72e:	0f 84 56 03 00 00    	je     1ba8a <prvTestQueueOverwriteOnTwoQueusInQueueSet+0x415>
   1b734:	48 83 7d e8 00       	cmpq   $0x0,-0x18(%rbp)
   1b739:	0f 84 4b 03 00 00    	je     1ba8a <prvTestQueueOverwriteOnTwoQueusInQueueSet+0x415>
   1b73f:	48 8b 15 c2 ac 11 00 	mov    0x11acc2(%rip),%rdx        # 136408 <xQueueSet>
   1b746:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
   1b74a:	48 89 d6             	mov    %rdx,%rsi
   1b74d:	48 89 c7             	mov    %rax,%rdi
   1b750:	e8 69 d1 fe ff       	callq  88be <xQueueAddToSet>
   1b755:	48 8b 15 ac ac 11 00 	mov    0x11acac(%rip),%rdx        # 136408 <xQueueSet>
   1b75c:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
   1b760:	48 89 d6             	mov    %rdx,%rsi
   1b763:	48 89 c7             	mov    %rax,%rdi
   1b766:	e8 53 d1 fe ff       	callq  88be <xQueueAddToSet>
   1b76b:	48 8d 75 cc          	lea    -0x34(%rbp),%rsi
   1b76f:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
   1b773:	b9 02 00 00 00       	mov    $0x2,%ecx
   1b778:	ba 00 00 00 00       	mov    $0x0,%edx
   1b77d:	48 89 c7             	mov    %rax,%rdi
   1b780:	e8 12 a6 fe ff       	callq  5d97 <xQueueGenericSend>
   1b785:	48 8b 05 7c ac 11 00 	mov    0x11ac7c(%rip),%rax        # 136408 <xQueueSet>
   1b78c:	48 89 c7             	mov    %rax,%rdi
   1b78f:	e8 7a c6 fe ff       	callq  7e0e <uxQueueMessagesWaiting>
   1b794:	48 83 f8 01          	cmp    $0x1,%rax
   1b798:	74 0b                	je     1b7a5 <prvTestQueueOverwriteOnTwoQueusInQueueSet+0x130>
   1b79a:	48 c7 05 c3 58 01 00 	movq   $0x0,0x158c3(%rip)        # 31068 <xQueueSetTasksStatus>
   1b7a1:	00 00 00 00 
   1b7a5:	48 8b 05 5c ac 11 00 	mov    0x11ac5c(%rip),%rax        # 136408 <xQueueSet>
   1b7ac:	48 8d 4d d8          	lea    -0x28(%rbp),%rcx
   1b7b0:	ba 00 00 00 00       	mov    $0x0,%edx
   1b7b5:	48 89 ce             	mov    %rcx,%rsi
   1b7b8:	48 89 c7             	mov    %rax,%rdi
   1b7bb:	e8 b2 bd fe ff       	callq  7572 <xQueuePeek>
   1b7c0:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
   1b7c4:	48 39 45 e0          	cmp    %rax,-0x20(%rbp)
   1b7c8:	74 0b                	je     1b7d5 <prvTestQueueOverwriteOnTwoQueusInQueueSet+0x160>
   1b7ca:	48 c7 05 93 58 01 00 	movq   $0x0,0x15893(%rip)        # 31068 <xQueueSetTasksStatus>
   1b7d1:	00 00 00 00 
   1b7d5:	48 8d 75 d0          	lea    -0x30(%rbp),%rsi
   1b7d9:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
   1b7dd:	b9 02 00 00 00       	mov    $0x2,%ecx
   1b7e2:	ba 00 00 00 00       	mov    $0x0,%edx
   1b7e7:	48 89 c7             	mov    %rax,%rdi
   1b7ea:	e8 a8 a5 fe ff       	callq  5d97 <xQueueGenericSend>
   1b7ef:	48 8b 05 12 ac 11 00 	mov    0x11ac12(%rip),%rax        # 136408 <xQueueSet>
   1b7f6:	48 89 c7             	mov    %rax,%rdi
   1b7f9:	e8 10 c6 fe ff       	callq  7e0e <uxQueueMessagesWaiting>
   1b7fe:	48 83 f8 02          	cmp    $0x2,%rax
   1b802:	74 0b                	je     1b80f <prvTestQueueOverwriteOnTwoQueusInQueueSet+0x19a>
   1b804:	48 c7 05 59 58 01 00 	movq   $0x0,0x15859(%rip)        # 31068 <xQueueSetTasksStatus>
   1b80b:	00 00 00 00 
   1b80f:	48 8b 05 f2 ab 11 00 	mov    0x11abf2(%rip),%rax        # 136408 <xQueueSet>
   1b816:	48 8d 4d d8          	lea    -0x28(%rbp),%rcx
   1b81a:	ba 00 00 00 00       	mov    $0x0,%edx
   1b81f:	48 89 ce             	mov    %rcx,%rsi
   1b822:	48 89 c7             	mov    %rax,%rdi
   1b825:	e8 48 bd fe ff       	callq  7572 <xQueuePeek>
   1b82a:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
   1b82e:	48 39 45 e0          	cmp    %rax,-0x20(%rbp)
   1b832:	74 0b                	je     1b83f <prvTestQueueOverwriteOnTwoQueusInQueueSet+0x1ca>
   1b834:	48 c7 05 29 58 01 00 	movq   $0x0,0x15829(%rip)        # 31068 <xQueueSetTasksStatus>
   1b83b:	00 00 00 00 
   1b83f:	48 8d 75 d0          	lea    -0x30(%rbp),%rsi
   1b843:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
   1b847:	b9 02 00 00 00       	mov    $0x2,%ecx
   1b84c:	ba 00 00 00 00       	mov    $0x0,%edx
   1b851:	48 89 c7             	mov    %rax,%rdi
   1b854:	e8 3e a5 fe ff       	callq  5d97 <xQueueGenericSend>
   1b859:	48 8b 05 a8 ab 11 00 	mov    0x11aba8(%rip),%rax        # 136408 <xQueueSet>
   1b860:	48 89 c7             	mov    %rax,%rdi
   1b863:	e8 a6 c5 fe ff       	callq  7e0e <uxQueueMessagesWaiting>
   1b868:	48 83 f8 02          	cmp    $0x2,%rax
   1b86c:	74 0b                	je     1b879 <prvTestQueueOverwriteOnTwoQueusInQueueSet+0x204>
   1b86e:	48 c7 05 ef 57 01 00 	movq   $0x0,0x157ef(%rip)        # 31068 <xQueueSetTasksStatus>
   1b875:	00 00 00 00 
   1b879:	48 8d 75 cc          	lea    -0x34(%rbp),%rsi
   1b87d:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
   1b881:	b9 02 00 00 00       	mov    $0x2,%ecx
   1b886:	ba 00 00 00 00       	mov    $0x0,%edx
   1b88b:	48 89 c7             	mov    %rax,%rdi
   1b88e:	e8 04 a5 fe ff       	callq  5d97 <xQueueGenericSend>
   1b893:	48 8b 05 6e ab 11 00 	mov    0x11ab6e(%rip),%rax        # 136408 <xQueueSet>
   1b89a:	48 89 c7             	mov    %rax,%rdi
   1b89d:	e8 6c c5 fe ff       	callq  7e0e <uxQueueMessagesWaiting>
   1b8a2:	48 83 f8 02          	cmp    $0x2,%rax
   1b8a6:	74 0b                	je     1b8b3 <prvTestQueueOverwriteOnTwoQueusInQueueSet+0x23e>
   1b8a8:	48 c7 05 b5 57 01 00 	movq   $0x0,0x157b5(%rip)        # 31068 <xQueueSetTasksStatus>
   1b8af:	00 00 00 00 
   1b8b3:	48 8d 75 d0          	lea    -0x30(%rbp),%rsi
   1b8b7:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
   1b8bb:	b9 02 00 00 00       	mov    $0x2,%ecx
   1b8c0:	ba 00 00 00 00       	mov    $0x0,%edx
   1b8c5:	48 89 c7             	mov    %rax,%rdi
   1b8c8:	e8 ca a4 fe ff       	callq  5d97 <xQueueGenericSend>
   1b8cd:	48 8b 05 34 ab 11 00 	mov    0x11ab34(%rip),%rax        # 136408 <xQueueSet>
   1b8d4:	48 89 c7             	mov    %rax,%rdi
   1b8d7:	e8 32 c5 fe ff       	callq  7e0e <uxQueueMessagesWaiting>
   1b8dc:	48 83 f8 02          	cmp    $0x2,%rax
   1b8e0:	74 0b                	je     1b8ed <prvTestQueueOverwriteOnTwoQueusInQueueSet+0x278>
   1b8e2:	48 c7 05 7b 57 01 00 	movq   $0x0,0x1577b(%rip)        # 31068 <xQueueSetTasksStatus>
   1b8e9:	00 00 00 00 
   1b8ed:	48 8d 75 cc          	lea    -0x34(%rbp),%rsi
   1b8f1:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
   1b8f5:	b9 02 00 00 00       	mov    $0x2,%ecx
   1b8fa:	ba 00 00 00 00       	mov    $0x0,%edx
   1b8ff:	48 89 c7             	mov    %rax,%rdi
   1b902:	e8 90 a4 fe ff       	callq  5d97 <xQueueGenericSend>
   1b907:	48 8b 05 fa aa 11 00 	mov    0x11aafa(%rip),%rax        # 136408 <xQueueSet>
   1b90e:	48 89 c7             	mov    %rax,%rdi
   1b911:	e8 f8 c4 fe ff       	callq  7e0e <uxQueueMessagesWaiting>
   1b916:	48 83 f8 02          	cmp    $0x2,%rax
   1b91a:	74 0b                	je     1b927 <prvTestQueueOverwriteOnTwoQueusInQueueSet+0x2b2>
   1b91c:	48 c7 05 41 57 01 00 	movq   $0x0,0x15741(%rip)        # 31068 <xQueueSetTasksStatus>
   1b923:	00 00 00 00 
   1b927:	48 8b 05 da aa 11 00 	mov    0x11aada(%rip),%rax        # 136408 <xQueueSet>
   1b92e:	be 00 00 00 00       	mov    $0x0,%esi
   1b933:	48 89 c7             	mov    %rax,%rdi
   1b936:	e8 64 d0 fe ff       	callq  899f <xQueueSelectFromSet>
   1b93b:	48 89 45 d8          	mov    %rax,-0x28(%rbp)
   1b93f:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
   1b943:	48 39 45 e0          	cmp    %rax,-0x20(%rbp)
   1b947:	74 0b                	je     1b954 <prvTestQueueOverwriteOnTwoQueusInQueueSet+0x2df>
   1b949:	48 c7 05 14 57 01 00 	movq   $0x0,0x15714(%rip)        # 31068 <xQueueSetTasksStatus>
   1b950:	00 00 00 00 
   1b954:	48 8b 05 ad aa 11 00 	mov    0x11aaad(%rip),%rax        # 136408 <xQueueSet>
   1b95b:	48 89 c7             	mov    %rax,%rdi
   1b95e:	e8 ab c4 fe ff       	callq  7e0e <uxQueueMessagesWaiting>
   1b963:	48 83 f8 01          	cmp    $0x1,%rax
   1b967:	74 0b                	je     1b974 <prvTestQueueOverwriteOnTwoQueusInQueueSet+0x2ff>
   1b969:	48 c7 05 f4 56 01 00 	movq   $0x0,0x156f4(%rip)        # 31068 <xQueueSetTasksStatus>
   1b970:	00 00 00 00 
   1b974:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
   1b978:	48 8d 4d d4          	lea    -0x2c(%rbp),%rcx
   1b97c:	ba 00 00 00 00       	mov    $0x0,%edx
   1b981:	48 89 ce             	mov    %rcx,%rsi
   1b984:	48 89 c7             	mov    %rax,%rdi
   1b987:	e8 57 b0 fe ff       	callq  69e3 <xQueueReceive>
   1b98c:	8b 55 d4             	mov    -0x2c(%rbp),%edx
   1b98f:	8b 45 d0             	mov    -0x30(%rbp),%eax
   1b992:	39 c2                	cmp    %eax,%edx
   1b994:	74 0b                	je     1b9a1 <prvTestQueueOverwriteOnTwoQueusInQueueSet+0x32c>
   1b996:	48 c7 05 c7 56 01 00 	movq   $0x0,0x156c7(%rip)        # 31068 <xQueueSetTasksStatus>
   1b99d:	00 00 00 00 
   1b9a1:	48 8b 05 60 aa 11 00 	mov    0x11aa60(%rip),%rax        # 136408 <xQueueSet>
   1b9a8:	be 00 00 00 00       	mov    $0x0,%esi
   1b9ad:	48 89 c7             	mov    %rax,%rdi
   1b9b0:	e8 ea cf fe ff       	callq  899f <xQueueSelectFromSet>
   1b9b5:	48 89 45 d8          	mov    %rax,-0x28(%rbp)
   1b9b9:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
   1b9bd:	48 39 45 e8          	cmp    %rax,-0x18(%rbp)
   1b9c1:	74 0b                	je     1b9ce <prvTestQueueOverwriteOnTwoQueusInQueueSet+0x359>
   1b9c3:	48 c7 05 9a 56 01 00 	movq   $0x0,0x1569a(%rip)        # 31068 <xQueueSetTasksStatus>
   1b9ca:	00 00 00 00 
   1b9ce:	48 8b 05 33 aa 11 00 	mov    0x11aa33(%rip),%rax        # 136408 <xQueueSet>
   1b9d5:	48 89 c7             	mov    %rax,%rdi
   1b9d8:	e8 31 c4 fe ff       	callq  7e0e <uxQueueMessagesWaiting>
   1b9dd:	48 85 c0             	test   %rax,%rax
   1b9e0:	74 0b                	je     1b9ed <prvTestQueueOverwriteOnTwoQueusInQueueSet+0x378>
   1b9e2:	48 c7 05 7b 56 01 00 	movq   $0x0,0x1567b(%rip)        # 31068 <xQueueSetTasksStatus>
   1b9e9:	00 00 00 00 
   1b9ed:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
   1b9f1:	48 8d 4d d4          	lea    -0x2c(%rbp),%rcx
   1b9f5:	ba 00 00 00 00       	mov    $0x0,%edx
   1b9fa:	48 89 ce             	mov    %rcx,%rsi
   1b9fd:	48 89 c7             	mov    %rax,%rdi
   1ba00:	e8 de af fe ff       	callq  69e3 <xQueueReceive>
   1ba05:	8b 55 d4             	mov    -0x2c(%rbp),%edx
   1ba08:	8b 45 cc             	mov    -0x34(%rbp),%eax
   1ba0b:	39 c2                	cmp    %eax,%edx
   1ba0d:	74 0b                	je     1ba1a <prvTestQueueOverwriteOnTwoQueusInQueueSet+0x3a5>
   1ba0f:	48 c7 05 4e 56 01 00 	movq   $0x0,0x1564e(%rip)        # 31068 <xQueueSetTasksStatus>
   1ba16:	00 00 00 00 
   1ba1a:	48 8b 05 e7 a9 11 00 	mov    0x11a9e7(%rip),%rax        # 136408 <xQueueSet>
   1ba21:	be 00 00 00 00       	mov    $0x0,%esi
   1ba26:	48 89 c7             	mov    %rax,%rdi
   1ba29:	e8 71 cf fe ff       	callq  899f <xQueueSelectFromSet>
   1ba2e:	48 89 45 d8          	mov    %rax,-0x28(%rbp)
   1ba32:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
   1ba36:	48 85 c0             	test   %rax,%rax
   1ba39:	74 0b                	je     1ba46 <prvTestQueueOverwriteOnTwoQueusInQueueSet+0x3d1>
   1ba3b:	48 c7 05 22 56 01 00 	movq   $0x0,0x15622(%rip)        # 31068 <xQueueSetTasksStatus>
   1ba42:	00 00 00 00 
   1ba46:	48 8b 15 bb a9 11 00 	mov    0x11a9bb(%rip),%rdx        # 136408 <xQueueSet>
   1ba4d:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
   1ba51:	48 89 d6             	mov    %rdx,%rsi
   1ba54:	48 89 c7             	mov    %rax,%rdi
   1ba57:	e8 ce ce fe ff       	callq  892a <xQueueRemoveFromSet>
   1ba5c:	48 8b 15 a5 a9 11 00 	mov    0x11a9a5(%rip),%rdx        # 136408 <xQueueSet>
   1ba63:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
   1ba67:	48 89 d6             	mov    %rdx,%rsi
   1ba6a:	48 89 c7             	mov    %rax,%rdi
   1ba6d:	e8 b8 ce fe ff       	callq  892a <xQueueRemoveFromSet>
   1ba72:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
   1ba76:	48 89 c7             	mov    %rax,%rdi
   1ba79:	e8 70 c4 fe ff       	callq  7eee <vQueueDelete>
   1ba7e:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
   1ba82:	48 89 c7             	mov    %rax,%rdi
   1ba85:	e8 64 c4 fe ff       	callq  7eee <vQueueDelete>
   1ba8a:	90                   	nop
   1ba8b:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   1ba8f:	64 48 33 04 25 28 00 	xor    %fs:0x28,%rax
   1ba96:	00 00 
   1ba98:	74 05                	je     1ba9f <prvTestQueueOverwriteOnTwoQueusInQueueSet+0x42a>
   1ba9a:	e8 31 6a fe ff       	callq  24d0 <__stack_chk_fail@plt>
   1ba9f:	c9                   	leaveq 
   1baa0:	c3                   	retq   

000000000001baa1 <prvTestQueueOverwriteFromISROnTwoQueusInQueueSet>:
   1baa1:	f3 0f 1e fa          	endbr64 
   1baa5:	55                   	push   %rbp
   1baa6:	48 89 e5             	mov    %rsp,%rbp
   1baa9:	48 83 ec 40          	sub    $0x40,%rsp
   1baad:	64 48 8b 04 25 28 00 	mov    %fs:0x28,%rax
   1bab4:	00 00 
   1bab6:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
   1baba:	31 c0                	xor    %eax,%eax
   1babc:	c7 45 cc 01 00 00 00 	movl   $0x1,-0x34(%rbp)
   1bac3:	c7 45 d0 02 00 00 00 	movl   $0x2,-0x30(%rbp)
   1baca:	c7 45 d4 00 00 00 00 	movl   $0x0,-0x2c(%rbp)
   1bad1:	48 c7 45 e0 00 00 00 	movq   $0x0,-0x20(%rbp)
   1bad8:	00 
   1bad9:	48 c7 45 e8 00 00 00 	movq   $0x0,-0x18(%rbp)
   1bae0:	00 
   1bae1:	48 c7 45 d8 00 00 00 	movq   $0x0,-0x28(%rbp)
   1bae8:	00 
   1bae9:	48 c7 45 f0 01 00 00 	movq   $0x1,-0x10(%rbp)
   1baf0:	00 
   1baf1:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
   1baf5:	ba 00 00 00 00       	mov    $0x0,%edx
   1bafa:	be 04 00 00 00       	mov    $0x4,%esi
   1baff:	48 89 c7             	mov    %rax,%rdi
   1bb02:	e8 ec 9a fe ff       	callq  55f3 <xQueueGenericCreate>
   1bb07:	48 89 45 e0          	mov    %rax,-0x20(%rbp)
   1bb0b:	48 83 7d e0 00       	cmpq   $0x0,-0x20(%rbp)
   1bb10:	75 11                	jne    1bb23 <prvTestQueueOverwriteFromISROnTwoQueusInQueueSet+0x82>
   1bb12:	be 7c 03 00 00       	mov    $0x37c,%esi
   1bb17:	48 8d 3d 42 c5 00 00 	lea    0xc542(%rip),%rdi        # 28060 <xInterruptGivePeriod+0x270>
   1bb1e:	e8 e9 81 fe ff       	callq  3d0c <vAssertCalled>
   1bb23:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
   1bb27:	ba 00 00 00 00       	mov    $0x0,%edx
   1bb2c:	be 04 00 00 00       	mov    $0x4,%esi
   1bb31:	48 89 c7             	mov    %rax,%rdi
   1bb34:	e8 ba 9a fe ff       	callq  55f3 <xQueueGenericCreate>
   1bb39:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
   1bb3d:	48 83 7d e8 00       	cmpq   $0x0,-0x18(%rbp)
   1bb42:	75 11                	jne    1bb55 <prvTestQueueOverwriteFromISROnTwoQueusInQueueSet+0xb4>
   1bb44:	be 7e 03 00 00       	mov    $0x37e,%esi
   1bb49:	48 8d 3d 10 c5 00 00 	lea    0xc510(%rip),%rdi        # 28060 <xInterruptGivePeriod+0x270>
   1bb50:	e8 b7 81 fe ff       	callq  3d0c <vAssertCalled>
   1bb55:	48 83 7d e0 00       	cmpq   $0x0,-0x20(%rbp)
   1bb5a:	0f 84 56 03 00 00    	je     1beb6 <prvTestQueueOverwriteFromISROnTwoQueusInQueueSet+0x415>
   1bb60:	48 83 7d e8 00       	cmpq   $0x0,-0x18(%rbp)
   1bb65:	0f 84 4b 03 00 00    	je     1beb6 <prvTestQueueOverwriteFromISROnTwoQueusInQueueSet+0x415>
   1bb6b:	48 8b 15 96 a8 11 00 	mov    0x11a896(%rip),%rdx        # 136408 <xQueueSet>
   1bb72:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
   1bb76:	48 89 d6             	mov    %rdx,%rsi
   1bb79:	48 89 c7             	mov    %rax,%rdi
   1bb7c:	e8 3d cd fe ff       	callq  88be <xQueueAddToSet>
   1bb81:	48 8b 15 80 a8 11 00 	mov    0x11a880(%rip),%rdx        # 136408 <xQueueSet>
   1bb88:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
   1bb8c:	48 89 d6             	mov    %rdx,%rsi
   1bb8f:	48 89 c7             	mov    %rax,%rdi
   1bb92:	e8 27 cd fe ff       	callq  88be <xQueueAddToSet>
   1bb97:	48 8d 75 cc          	lea    -0x34(%rbp),%rsi
   1bb9b:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
   1bb9f:	b9 02 00 00 00       	mov    $0x2,%ecx
   1bba4:	ba 00 00 00 00       	mov    $0x0,%edx
   1bba9:	48 89 c7             	mov    %rax,%rdi
   1bbac:	e8 d8 a7 fe ff       	callq  6389 <xQueueGenericSendFromISR>
   1bbb1:	48 8b 05 50 a8 11 00 	mov    0x11a850(%rip),%rax        # 136408 <xQueueSet>
   1bbb8:	48 89 c7             	mov    %rax,%rdi
   1bbbb:	e8 4e c2 fe ff       	callq  7e0e <uxQueueMessagesWaiting>
   1bbc0:	48 83 f8 01          	cmp    $0x1,%rax
   1bbc4:	74 0b                	je     1bbd1 <prvTestQueueOverwriteFromISROnTwoQueusInQueueSet+0x130>
   1bbc6:	48 c7 05 97 54 01 00 	movq   $0x0,0x15497(%rip)        # 31068 <xQueueSetTasksStatus>
   1bbcd:	00 00 00 00 
   1bbd1:	48 8b 05 30 a8 11 00 	mov    0x11a830(%rip),%rax        # 136408 <xQueueSet>
   1bbd8:	48 8d 4d d8          	lea    -0x28(%rbp),%rcx
   1bbdc:	ba 00 00 00 00       	mov    $0x0,%edx
   1bbe1:	48 89 ce             	mov    %rcx,%rsi
   1bbe4:	48 89 c7             	mov    %rax,%rdi
   1bbe7:	e8 86 b9 fe ff       	callq  7572 <xQueuePeek>
   1bbec:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
   1bbf0:	48 39 45 e0          	cmp    %rax,-0x20(%rbp)
   1bbf4:	74 0b                	je     1bc01 <prvTestQueueOverwriteFromISROnTwoQueusInQueueSet+0x160>
   1bbf6:	48 c7 05 67 54 01 00 	movq   $0x0,0x15467(%rip)        # 31068 <xQueueSetTasksStatus>
   1bbfd:	00 00 00 00 
   1bc01:	48 8d 75 d0          	lea    -0x30(%rbp),%rsi
   1bc05:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
   1bc09:	b9 02 00 00 00       	mov    $0x2,%ecx
   1bc0e:	ba 00 00 00 00       	mov    $0x0,%edx
   1bc13:	48 89 c7             	mov    %rax,%rdi
   1bc16:	e8 6e a7 fe ff       	callq  6389 <xQueueGenericSendFromISR>
   1bc1b:	48 8b 05 e6 a7 11 00 	mov    0x11a7e6(%rip),%rax        # 136408 <xQueueSet>
   1bc22:	48 89 c7             	mov    %rax,%rdi
   1bc25:	e8 e4 c1 fe ff       	callq  7e0e <uxQueueMessagesWaiting>
   1bc2a:	48 83 f8 02          	cmp    $0x2,%rax
   1bc2e:	74 0b                	je     1bc3b <prvTestQueueOverwriteFromISROnTwoQueusInQueueSet+0x19a>
   1bc30:	48 c7 05 2d 54 01 00 	movq   $0x0,0x1542d(%rip)        # 31068 <xQueueSetTasksStatus>
   1bc37:	00 00 00 00 
   1bc3b:	48 8b 05 c6 a7 11 00 	mov    0x11a7c6(%rip),%rax        # 136408 <xQueueSet>
   1bc42:	48 8d 4d d8          	lea    -0x28(%rbp),%rcx
   1bc46:	ba 00 00 00 00       	mov    $0x0,%edx
   1bc4b:	48 89 ce             	mov    %rcx,%rsi
   1bc4e:	48 89 c7             	mov    %rax,%rdi
   1bc51:	e8 1c b9 fe ff       	callq  7572 <xQueuePeek>
   1bc56:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
   1bc5a:	48 39 45 e0          	cmp    %rax,-0x20(%rbp)
   1bc5e:	74 0b                	je     1bc6b <prvTestQueueOverwriteFromISROnTwoQueusInQueueSet+0x1ca>
   1bc60:	48 c7 05 fd 53 01 00 	movq   $0x0,0x153fd(%rip)        # 31068 <xQueueSetTasksStatus>
   1bc67:	00 00 00 00 
   1bc6b:	48 8d 75 d0          	lea    -0x30(%rbp),%rsi
   1bc6f:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
   1bc73:	b9 02 00 00 00       	mov    $0x2,%ecx
   1bc78:	ba 00 00 00 00       	mov    $0x0,%edx
   1bc7d:	48 89 c7             	mov    %rax,%rdi
   1bc80:	e8 04 a7 fe ff       	callq  6389 <xQueueGenericSendFromISR>
   1bc85:	48 8b 05 7c a7 11 00 	mov    0x11a77c(%rip),%rax        # 136408 <xQueueSet>
   1bc8c:	48 89 c7             	mov    %rax,%rdi
   1bc8f:	e8 7a c1 fe ff       	callq  7e0e <uxQueueMessagesWaiting>
   1bc94:	48 83 f8 02          	cmp    $0x2,%rax
   1bc98:	74 0b                	je     1bca5 <prvTestQueueOverwriteFromISROnTwoQueusInQueueSet+0x204>
   1bc9a:	48 c7 05 c3 53 01 00 	movq   $0x0,0x153c3(%rip)        # 31068 <xQueueSetTasksStatus>
   1bca1:	00 00 00 00 
   1bca5:	48 8d 75 cc          	lea    -0x34(%rbp),%rsi
   1bca9:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
   1bcad:	b9 02 00 00 00       	mov    $0x2,%ecx
   1bcb2:	ba 00 00 00 00       	mov    $0x0,%edx
   1bcb7:	48 89 c7             	mov    %rax,%rdi
   1bcba:	e8 ca a6 fe ff       	callq  6389 <xQueueGenericSendFromISR>
   1bcbf:	48 8b 05 42 a7 11 00 	mov    0x11a742(%rip),%rax        # 136408 <xQueueSet>
   1bcc6:	48 89 c7             	mov    %rax,%rdi
   1bcc9:	e8 40 c1 fe ff       	callq  7e0e <uxQueueMessagesWaiting>
   1bcce:	48 83 f8 02          	cmp    $0x2,%rax
   1bcd2:	74 0b                	je     1bcdf <prvTestQueueOverwriteFromISROnTwoQueusInQueueSet+0x23e>
   1bcd4:	48 c7 05 89 53 01 00 	movq   $0x0,0x15389(%rip)        # 31068 <xQueueSetTasksStatus>
   1bcdb:	00 00 00 00 
   1bcdf:	48 8d 75 d0          	lea    -0x30(%rbp),%rsi
   1bce3:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
   1bce7:	b9 02 00 00 00       	mov    $0x2,%ecx
   1bcec:	ba 00 00 00 00       	mov    $0x0,%edx
   1bcf1:	48 89 c7             	mov    %rax,%rdi
   1bcf4:	e8 90 a6 fe ff       	callq  6389 <xQueueGenericSendFromISR>
   1bcf9:	48 8b 05 08 a7 11 00 	mov    0x11a708(%rip),%rax        # 136408 <xQueueSet>
   1bd00:	48 89 c7             	mov    %rax,%rdi
   1bd03:	e8 06 c1 fe ff       	callq  7e0e <uxQueueMessagesWaiting>
   1bd08:	48 83 f8 02          	cmp    $0x2,%rax
   1bd0c:	74 0b                	je     1bd19 <prvTestQueueOverwriteFromISROnTwoQueusInQueueSet+0x278>
   1bd0e:	48 c7 05 4f 53 01 00 	movq   $0x0,0x1534f(%rip)        # 31068 <xQueueSetTasksStatus>
   1bd15:	00 00 00 00 
   1bd19:	48 8d 75 cc          	lea    -0x34(%rbp),%rsi
   1bd1d:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
   1bd21:	b9 02 00 00 00       	mov    $0x2,%ecx
   1bd26:	ba 00 00 00 00       	mov    $0x0,%edx
   1bd2b:	48 89 c7             	mov    %rax,%rdi
   1bd2e:	e8 56 a6 fe ff       	callq  6389 <xQueueGenericSendFromISR>
   1bd33:	48 8b 05 ce a6 11 00 	mov    0x11a6ce(%rip),%rax        # 136408 <xQueueSet>
   1bd3a:	48 89 c7             	mov    %rax,%rdi
   1bd3d:	e8 cc c0 fe ff       	callq  7e0e <uxQueueMessagesWaiting>
   1bd42:	48 83 f8 02          	cmp    $0x2,%rax
   1bd46:	74 0b                	je     1bd53 <prvTestQueueOverwriteFromISROnTwoQueusInQueueSet+0x2b2>
   1bd48:	48 c7 05 15 53 01 00 	movq   $0x0,0x15315(%rip)        # 31068 <xQueueSetTasksStatus>
   1bd4f:	00 00 00 00 
   1bd53:	48 8b 05 ae a6 11 00 	mov    0x11a6ae(%rip),%rax        # 136408 <xQueueSet>
   1bd5a:	be 00 00 00 00       	mov    $0x0,%esi
   1bd5f:	48 89 c7             	mov    %rax,%rdi
   1bd62:	e8 38 cc fe ff       	callq  899f <xQueueSelectFromSet>
   1bd67:	48 89 45 d8          	mov    %rax,-0x28(%rbp)
   1bd6b:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
   1bd6f:	48 39 45 e0          	cmp    %rax,-0x20(%rbp)
   1bd73:	74 0b                	je     1bd80 <prvTestQueueOverwriteFromISROnTwoQueusInQueueSet+0x2df>
   1bd75:	48 c7 05 e8 52 01 00 	movq   $0x0,0x152e8(%rip)        # 31068 <xQueueSetTasksStatus>
   1bd7c:	00 00 00 00 
   1bd80:	48 8b 05 81 a6 11 00 	mov    0x11a681(%rip),%rax        # 136408 <xQueueSet>
   1bd87:	48 89 c7             	mov    %rax,%rdi
   1bd8a:	e8 7f c0 fe ff       	callq  7e0e <uxQueueMessagesWaiting>
   1bd8f:	48 83 f8 01          	cmp    $0x1,%rax
   1bd93:	74 0b                	je     1bda0 <prvTestQueueOverwriteFromISROnTwoQueusInQueueSet+0x2ff>
   1bd95:	48 c7 05 c8 52 01 00 	movq   $0x0,0x152c8(%rip)        # 31068 <xQueueSetTasksStatus>
   1bd9c:	00 00 00 00 
   1bda0:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
   1bda4:	48 8d 4d d4          	lea    -0x2c(%rbp),%rcx
   1bda8:	ba 00 00 00 00       	mov    $0x0,%edx
   1bdad:	48 89 ce             	mov    %rcx,%rsi
   1bdb0:	48 89 c7             	mov    %rax,%rdi
   1bdb3:	e8 2b ac fe ff       	callq  69e3 <xQueueReceive>
   1bdb8:	8b 55 d4             	mov    -0x2c(%rbp),%edx
   1bdbb:	8b 45 d0             	mov    -0x30(%rbp),%eax
   1bdbe:	39 c2                	cmp    %eax,%edx
   1bdc0:	74 0b                	je     1bdcd <prvTestQueueOverwriteFromISROnTwoQueusInQueueSet+0x32c>
   1bdc2:	48 c7 05 9b 52 01 00 	movq   $0x0,0x1529b(%rip)        # 31068 <xQueueSetTasksStatus>
   1bdc9:	00 00 00 00 
   1bdcd:	48 8b 05 34 a6 11 00 	mov    0x11a634(%rip),%rax        # 136408 <xQueueSet>
   1bdd4:	be 00 00 00 00       	mov    $0x0,%esi
   1bdd9:	48 89 c7             	mov    %rax,%rdi
   1bddc:	e8 be cb fe ff       	callq  899f <xQueueSelectFromSet>
   1bde1:	48 89 45 d8          	mov    %rax,-0x28(%rbp)
   1bde5:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
   1bde9:	48 39 45 e8          	cmp    %rax,-0x18(%rbp)
   1bded:	74 0b                	je     1bdfa <prvTestQueueOverwriteFromISROnTwoQueusInQueueSet+0x359>
   1bdef:	48 c7 05 6e 52 01 00 	movq   $0x0,0x1526e(%rip)        # 31068 <xQueueSetTasksStatus>
   1bdf6:	00 00 00 00 
   1bdfa:	48 8b 05 07 a6 11 00 	mov    0x11a607(%rip),%rax        # 136408 <xQueueSet>
   1be01:	48 89 c7             	mov    %rax,%rdi
   1be04:	e8 05 c0 fe ff       	callq  7e0e <uxQueueMessagesWaiting>
   1be09:	48 85 c0             	test   %rax,%rax
   1be0c:	74 0b                	je     1be19 <prvTestQueueOverwriteFromISROnTwoQueusInQueueSet+0x378>
   1be0e:	48 c7 05 4f 52 01 00 	movq   $0x0,0x1524f(%rip)        # 31068 <xQueueSetTasksStatus>
   1be15:	00 00 00 00 
   1be19:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
   1be1d:	48 8d 4d d4          	lea    -0x2c(%rbp),%rcx
   1be21:	ba 00 00 00 00       	mov    $0x0,%edx
   1be26:	48 89 ce             	mov    %rcx,%rsi
   1be29:	48 89 c7             	mov    %rax,%rdi
   1be2c:	e8 b2 ab fe ff       	callq  69e3 <xQueueReceive>
   1be31:	8b 55 d4             	mov    -0x2c(%rbp),%edx
   1be34:	8b 45 cc             	mov    -0x34(%rbp),%eax
   1be37:	39 c2                	cmp    %eax,%edx
   1be39:	74 0b                	je     1be46 <prvTestQueueOverwriteFromISROnTwoQueusInQueueSet+0x3a5>
   1be3b:	48 c7 05 22 52 01 00 	movq   $0x0,0x15222(%rip)        # 31068 <xQueueSetTasksStatus>
   1be42:	00 00 00 00 
   1be46:	48 8b 05 bb a5 11 00 	mov    0x11a5bb(%rip),%rax        # 136408 <xQueueSet>
   1be4d:	be 00 00 00 00       	mov    $0x0,%esi
   1be52:	48 89 c7             	mov    %rax,%rdi
   1be55:	e8 45 cb fe ff       	callq  899f <xQueueSelectFromSet>
   1be5a:	48 89 45 d8          	mov    %rax,-0x28(%rbp)
   1be5e:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
   1be62:	48 85 c0             	test   %rax,%rax
   1be65:	74 0b                	je     1be72 <prvTestQueueOverwriteFromISROnTwoQueusInQueueSet+0x3d1>
   1be67:	48 c7 05 f6 51 01 00 	movq   $0x0,0x151f6(%rip)        # 31068 <xQueueSetTasksStatus>
   1be6e:	00 00 00 00 
   1be72:	48 8b 15 8f a5 11 00 	mov    0x11a58f(%rip),%rdx        # 136408 <xQueueSet>
   1be79:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
   1be7d:	48 89 d6             	mov    %rdx,%rsi
   1be80:	48 89 c7             	mov    %rax,%rdi
   1be83:	e8 a2 ca fe ff       	callq  892a <xQueueRemoveFromSet>
   1be88:	48 8b 15 79 a5 11 00 	mov    0x11a579(%rip),%rdx        # 136408 <xQueueSet>
   1be8f:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
   1be93:	48 89 d6             	mov    %rdx,%rsi
   1be96:	48 89 c7             	mov    %rax,%rdi
   1be99:	e8 8c ca fe ff       	callq  892a <xQueueRemoveFromSet>
   1be9e:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
   1bea2:	48 89 c7             	mov    %rax,%rdi
   1bea5:	e8 44 c0 fe ff       	callq  7eee <vQueueDelete>
   1beaa:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
   1beae:	48 89 c7             	mov    %rax,%rdi
   1beb1:	e8 38 c0 fe ff       	callq  7eee <vQueueDelete>
   1beb6:	90                   	nop
   1beb7:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   1bebb:	64 48 33 04 25 28 00 	xor    %fs:0x28,%rax
   1bec2:	00 00 
   1bec4:	74 05                	je     1becb <prvTestQueueOverwriteFromISROnTwoQueusInQueueSet+0x42a>
   1bec6:	e8 05 66 fe ff       	callq  24d0 <__stack_chk_fail@plt>
   1becb:	c9                   	leaveq 
   1becc:	c3                   	retq   

000000000001becd <prvSetupTest>:
   1becd:	f3 0f 1e fa          	endbr64 
   1bed1:	55                   	push   %rbp
   1bed2:	48 89 e5             	mov    %rsp,%rbp
   1bed5:	48 83 ec 20          	sub    $0x20,%rsp
   1bed9:	64 48 8b 04 25 28 00 	mov    %fs:0x28,%rax
   1bee0:	00 00 
   1bee2:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
   1bee6:	31 c0                	xor    %eax,%eax
   1bee8:	c7 45 ec 00 00 00 00 	movl   $0x0,-0x14(%rbp)
   1beef:	bf 09 00 00 00       	mov    $0x9,%edi
   1bef4:	e8 95 c9 fe ff       	callq  888e <xQueueCreateSet>
   1bef9:	48 89 05 08 a5 11 00 	mov    %rax,0x11a508(%rip)        # 136408 <xQueueSet>
   1bf00:	48 c7 45 f0 00 00 00 	movq   $0x0,-0x10(%rbp)
   1bf07:	00 
   1bf08:	e9 d2 00 00 00       	jmpq   1bfdf <prvSetupTest+0x112>
   1bf0d:	ba 00 00 00 00       	mov    $0x0,%edx
   1bf12:	be 04 00 00 00       	mov    $0x4,%esi
   1bf17:	bf 03 00 00 00       	mov    $0x3,%edi
   1bf1c:	e8 d2 96 fe ff       	callq  55f3 <xQueueGenericCreate>
   1bf21:	48 8b 55 f0          	mov    -0x10(%rbp),%rdx
   1bf25:	48 8d 0c d5 00 00 00 	lea    0x0(,%rdx,8),%rcx
   1bf2c:	00 
   1bf2d:	48 8d 15 ac a4 11 00 	lea    0x11a4ac(%rip),%rdx        # 1363e0 <xQueues>
   1bf34:	48 89 04 11          	mov    %rax,(%rcx,%rdx,1)
   1bf38:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
   1bf3c:	48 8d 14 c5 00 00 00 	lea    0x0(,%rax,8),%rdx
   1bf43:	00 
   1bf44:	48 8d 05 95 a4 11 00 	lea    0x11a495(%rip),%rax        # 1363e0 <xQueues>
   1bf4b:	48 8b 04 02          	mov    (%rdx,%rax,1),%rax
   1bf4f:	48 85 c0             	test   %rax,%rax
   1bf52:	75 11                	jne    1bf65 <prvSetupTest+0x98>
   1bf54:	be 2a 04 00 00       	mov    $0x42a,%esi
   1bf59:	48 8d 3d 00 c1 00 00 	lea    0xc100(%rip),%rdi        # 28060 <xInterruptGivePeriod+0x270>
   1bf60:	e8 a7 7d fe ff       	callq  3d0c <vAssertCalled>
   1bf65:	48 8b 15 9c a4 11 00 	mov    0x11a49c(%rip),%rdx        # 136408 <xQueueSet>
   1bf6c:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
   1bf70:	48 8d 0c c5 00 00 00 	lea    0x0(,%rax,8),%rcx
   1bf77:	00 
   1bf78:	48 8d 05 61 a4 11 00 	lea    0x11a461(%rip),%rax        # 1363e0 <xQueues>
   1bf7f:	48 8b 04 01          	mov    (%rcx,%rax,1),%rax
   1bf83:	48 89 d6             	mov    %rdx,%rsi
   1bf86:	48 89 c7             	mov    %rax,%rdi
   1bf89:	e8 30 c9 fe ff       	callq  88be <xQueueAddToSet>
   1bf8e:	48 83 f8 01          	cmp    $0x1,%rax
   1bf92:	74 0d                	je     1bfa1 <prvSetupTest+0xd4>
   1bf94:	48 c7 05 c9 50 01 00 	movq   $0x0,0x150c9(%rip)        # 31068 <xQueueSetTasksStatus>
   1bf9b:	00 00 00 00 
   1bf9f:	eb 39                	jmp    1bfda <prvSetupTest+0x10d>
   1bfa1:	48 8b 15 60 a4 11 00 	mov    0x11a460(%rip),%rdx        # 136408 <xQueueSet>
   1bfa8:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
   1bfac:	48 8d 0c c5 00 00 00 	lea    0x0(,%rax,8),%rcx
   1bfb3:	00 
   1bfb4:	48 8d 05 25 a4 11 00 	lea    0x11a425(%rip),%rax        # 1363e0 <xQueues>
   1bfbb:	48 8b 04 01          	mov    (%rcx,%rax,1),%rax
   1bfbf:	48 89 d6             	mov    %rdx,%rsi
   1bfc2:	48 89 c7             	mov    %rax,%rdi
   1bfc5:	e8 f4 c8 fe ff       	callq  88be <xQueueAddToSet>
   1bfca:	48 85 c0             	test   %rax,%rax
   1bfcd:	74 0b                	je     1bfda <prvSetupTest+0x10d>
   1bfcf:	48 c7 05 8e 50 01 00 	movq   $0x0,0x1508e(%rip)        # 31068 <xQueueSetTasksStatus>
   1bfd6:	00 00 00 00 
   1bfda:	48 83 45 f0 01       	addq   $0x1,-0x10(%rbp)
   1bfdf:	48 83 7d f0 02       	cmpq   $0x2,-0x10(%rbp)
   1bfe4:	0f 8e 23 ff ff ff    	jle    1bf0d <prvSetupTest+0x40>
   1bfea:	48 8b 05 ef a3 11 00 	mov    0x11a3ef(%rip),%rax        # 1363e0 <xQueues>
   1bff1:	be 00 00 00 00       	mov    $0x0,%esi
   1bff6:	48 89 c7             	mov    %rax,%rdi
   1bff9:	e8 2c c9 fe ff       	callq  892a <xQueueRemoveFromSet>
   1bffe:	48 85 c0             	test   %rax,%rax
   1c001:	74 0b                	je     1c00e <prvSetupTest+0x141>
   1c003:	48 c7 05 5a 50 01 00 	movq   $0x0,0x1505a(%rip)        # 31068 <xQueueSetTasksStatus>
   1c00a:	00 00 00 00 
   1c00e:	48 8b 15 f3 a3 11 00 	mov    0x11a3f3(%rip),%rdx        # 136408 <xQueueSet>
   1c015:	48 8b 05 c4 a3 11 00 	mov    0x11a3c4(%rip),%rax        # 1363e0 <xQueues>
   1c01c:	48 89 d6             	mov    %rdx,%rsi
   1c01f:	48 89 c7             	mov    %rax,%rdi
   1c022:	e8 03 c9 fe ff       	callq  892a <xQueueRemoveFromSet>
   1c027:	48 83 f8 01          	cmp    $0x1,%rax
   1c02b:	74 0b                	je     1c038 <prvSetupTest+0x16b>
   1c02d:	48 c7 05 30 50 01 00 	movq   $0x0,0x15030(%rip)        # 31068 <xQueueSetTasksStatus>
   1c034:	00 00 00 00 
   1c038:	48 8b 05 a1 a3 11 00 	mov    0x11a3a1(%rip),%rax        # 1363e0 <xQueues>
   1c03f:	48 8d 75 ec          	lea    -0x14(%rbp),%rsi
   1c043:	b9 00 00 00 00       	mov    $0x0,%ecx
   1c048:	ba 00 00 00 00       	mov    $0x0,%edx
   1c04d:	48 89 c7             	mov    %rax,%rdi
   1c050:	e8 42 9d fe ff       	callq  5d97 <xQueueGenericSend>
   1c055:	48 8b 15 ac a3 11 00 	mov    0x11a3ac(%rip),%rdx        # 136408 <xQueueSet>
   1c05c:	48 8b 05 7d a3 11 00 	mov    0x11a37d(%rip),%rax        # 1363e0 <xQueues>
   1c063:	48 89 d6             	mov    %rdx,%rsi
   1c066:	48 89 c7             	mov    %rax,%rdi
   1c069:	e8 50 c8 fe ff       	callq  88be <xQueueAddToSet>
   1c06e:	48 85 c0             	test   %rax,%rax
   1c071:	74 0b                	je     1c07e <prvSetupTest+0x1b1>
   1c073:	48 c7 05 ea 4f 01 00 	movq   $0x0,0x14fea(%rip)        # 31068 <xQueueSetTasksStatus>
   1c07a:	00 00 00 00 
   1c07e:	48 8b 05 5b a3 11 00 	mov    0x11a35b(%rip),%rax        # 1363e0 <xQueues>
   1c085:	48 8d 4d ec          	lea    -0x14(%rbp),%rcx
   1c089:	ba 00 00 00 00       	mov    $0x0,%edx
   1c08e:	48 89 ce             	mov    %rcx,%rsi
   1c091:	48 89 c7             	mov    %rax,%rdi
   1c094:	e8 4a a9 fe ff       	callq  69e3 <xQueueReceive>
   1c099:	48 8b 15 68 a3 11 00 	mov    0x11a368(%rip),%rdx        # 136408 <xQueueSet>
   1c0a0:	48 8b 05 39 a3 11 00 	mov    0x11a339(%rip),%rax        # 1363e0 <xQueues>
   1c0a7:	48 89 d6             	mov    %rdx,%rsi
   1c0aa:	48 89 c7             	mov    %rax,%rdi
   1c0ad:	e8 0c c8 fe ff       	callq  88be <xQueueAddToSet>
   1c0b2:	48 83 f8 01          	cmp    $0x1,%rax
   1c0b6:	74 0b                	je     1c0c3 <prvSetupTest+0x1f6>
   1c0b8:	48 c7 05 a5 4f 01 00 	movq   $0x0,0x14fa5(%rip)        # 31068 <xQueueSetTasksStatus>
   1c0bf:	00 00 00 00 
   1c0c3:	48 8b 05 3e a3 11 00 	mov    0x11a33e(%rip),%rax        # 136408 <xQueueSet>
   1c0ca:	be c8 00 00 00       	mov    $0xc8,%esi
   1c0cf:	48 89 c7             	mov    %rax,%rdi
   1c0d2:	e8 c8 c8 fe ff       	callq  899f <xQueueSelectFromSet>
   1c0d7:	48 85 c0             	test   %rax,%rax
   1c0da:	74 0b                	je     1c0e7 <prvSetupTest+0x21a>
   1c0dc:	48 c7 05 81 4f 01 00 	movq   $0x0,0x14f81(%rip)        # 31068 <xQueueSetTasksStatus>
   1c0e3:	00 00 00 00 
   1c0e7:	e8 6a f3 ff ff       	callq  1b456 <prvTestQueueOverwriteWithQueueSet>
   1c0ec:	e8 84 f5 ff ff       	callq  1b675 <prvTestQueueOverwriteOnTwoQueusInQueueSet>
   1c0f1:	e8 ab f9 ff ff       	callq  1baa1 <prvTestQueueOverwriteFromISROnTwoQueusInQueueSet>
   1c0f6:	48 8b 05 6b 4f 01 00 	mov    0x14f6b(%rip),%rax        # 31068 <xQueueSetTasksStatus>
   1c0fd:	48 85 c0             	test   %rax,%rax
   1c100:	75 11                	jne    1c113 <prvSetupTest+0x246>
   1c102:	be 73 04 00 00       	mov    $0x473,%esi
   1c107:	48 8d 3d 52 bf 00 00 	lea    0xbf52(%rip),%rdi        # 28060 <xInterruptGivePeriod+0x270>
   1c10e:	e8 f9 7b fe ff       	callq  3d0c <vAssertCalled>
   1c113:	48 8b 05 0e bc 11 00 	mov    0x11bc0e(%rip),%rax        # 137d28 <xQueueSetSendingTask>
   1c11a:	48 89 c7             	mov    %rax,%rdi
   1c11d:	e8 5d 0e ff ff       	callq  cf7f <vTaskResume>
   1c122:	48 c7 05 eb a2 11 00 	movq   $0x1,0x11a2eb(%rip)        # 136418 <xSetupComplete>
   1c129:	01 00 00 00 
   1c12d:	90                   	nop
   1c12e:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   1c132:	64 48 33 04 25 28 00 	xor    %fs:0x28,%rax
   1c139:	00 00 
   1c13b:	74 05                	je     1c142 <prvSetupTest+0x275>
   1c13d:	e8 8e 63 fe ff       	callq  24d0 <__stack_chk_fail@plt>
   1c142:	c9                   	leaveq 
   1c143:	c3                   	retq   

000000000001c144 <prvRand>:
   1c144:	f3 0f 1e fa          	endbr64 
   1c148:	55                   	push   %rbp
   1c149:	48 89 e5             	mov    %rsp,%rbp
   1c14c:	48 8b 05 cd a2 11 00 	mov    0x11a2cd(%rip),%rax        # 136420 <uxNextRand>
   1c153:	48 69 c0 6d 4e c6 41 	imul   $0x41c64e6d,%rax,%rax
   1c15a:	48 05 39 30 00 00    	add    $0x3039,%rax
   1c160:	48 89 05 b9 a2 11 00 	mov    %rax,0x11a2b9(%rip)        # 136420 <uxNextRand>
   1c167:	48 8b 05 b2 a2 11 00 	mov    0x11a2b2(%rip),%rax        # 136420 <uxNextRand>
   1c16e:	48 c1 e8 10          	shr    $0x10,%rax
   1c172:	25 ff 7f 00 00       	and    $0x7fff,%eax
   1c177:	5d                   	pop    %rbp
   1c178:	c3                   	retq   

000000000001c179 <prvSRand>:
   1c179:	f3 0f 1e fa          	endbr64 
   1c17d:	55                   	push   %rbp
   1c17e:	48 89 e5             	mov    %rsp,%rbp
   1c181:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   1c185:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   1c189:	48 89 05 90 a2 11 00 	mov    %rax,0x11a290(%rip)        # 136420 <uxNextRand>
   1c190:	90                   	nop
   1c191:	5d                   	pop    %rbp
   1c192:	c3                   	retq   

000000000001c193 <vStartQueueSetPollingTask>:
   1c193:	f3 0f 1e fa          	endbr64 
   1c197:	55                   	push   %rbp
   1c198:	48 89 e5             	mov    %rsp,%rbp
   1c19b:	ba 00 00 00 00       	mov    $0x0,%edx
   1c1a0:	be 04 00 00 00       	mov    $0x4,%esi
   1c1a5:	bf 0a 00 00 00       	mov    $0xa,%edi
   1c1aa:	e8 44 94 fe ff       	callq  55f3 <xQueueGenericCreate>
   1c1af:	48 89 05 aa a2 11 00 	mov    %rax,0x11a2aa(%rip)        # 136460 <xQueue>
   1c1b6:	bf 0a 00 00 00       	mov    $0xa,%edi
   1c1bb:	e8 ce c6 fe ff       	callq  888e <xQueueCreateSet>
   1c1c0:	48 89 05 a1 a2 11 00 	mov    %rax,0x11a2a1(%rip)        # 136468 <xQueueSet>
   1c1c7:	48 8b 05 92 a2 11 00 	mov    0x11a292(%rip),%rax        # 136460 <xQueue>
   1c1ce:	48 85 c0             	test   %rax,%rax
   1c1d1:	74 4e                	je     1c221 <vStartQueueSetPollingTask+0x8e>
   1c1d3:	48 8b 05 8e a2 11 00 	mov    0x11a28e(%rip),%rax        # 136468 <xQueueSet>
   1c1da:	48 85 c0             	test   %rax,%rax
   1c1dd:	74 42                	je     1c221 <vStartQueueSetPollingTask+0x8e>
   1c1df:	48 8b 15 82 a2 11 00 	mov    0x11a282(%rip),%rdx        # 136468 <xQueueSet>
   1c1e6:	48 8b 05 73 a2 11 00 	mov    0x11a273(%rip),%rax        # 136460 <xQueue>
   1c1ed:	48 89 d6             	mov    %rdx,%rsi
   1c1f0:	48 89 c7             	mov    %rax,%rdi
   1c1f3:	e8 c6 c6 fe ff       	callq  88be <xQueueAddToSet>
   1c1f8:	41 b9 00 00 00 00    	mov    $0x0,%r9d
   1c1fe:	41 b8 00 00 00 00    	mov    $0x0,%r8d
   1c204:	b9 00 00 00 00       	mov    $0x0,%ecx
   1c209:	ba 46 00 00 00       	mov    $0x46,%edx
   1c20e:	48 8d 35 90 be 00 00 	lea    0xbe90(%rip),%rsi        # 280a5 <xInterruptGivePeriod+0x2b5>
   1c215:	48 8d 3d 08 00 00 00 	lea    0x8(%rip),%rdi        # 1c224 <prvQueueSetReceivingTask>
   1c21c:	e8 d6 fa fe ff       	callq  bcf7 <xTaskCreate>
   1c221:	90                   	nop
   1c222:	5d                   	pop    %rbp
   1c223:	c3                   	retq   

000000000001c224 <prvQueueSetReceivingTask>:
   1c224:	f3 0f 1e fa          	endbr64 
   1c228:	55                   	push   %rbp
   1c229:	48 89 e5             	mov    %rsp,%rbp
   1c22c:	48 83 ec 30          	sub    $0x30,%rsp
   1c230:	48 89 7d d8          	mov    %rdi,-0x28(%rbp)
   1c234:	64 48 8b 04 25 28 00 	mov    %fs:0x28,%rax
   1c23b:	00 00 
   1c23d:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
   1c241:	31 c0                	xor    %eax,%eax
   1c243:	c7 45 ec 00 00 00 00 	movl   $0x0,-0x14(%rbp)
   1c24a:	48 8b 05 17 a2 11 00 	mov    0x11a217(%rip),%rax        # 136468 <xQueueSet>
   1c251:	be 00 00 00 00       	mov    $0x0,%esi
   1c256:	48 89 c7             	mov    %rax,%rdi
   1c259:	e8 41 c7 fe ff       	callq  899f <xQueueSelectFromSet>
   1c25e:	48 89 45 f0          	mov    %rax,-0x10(%rbp)
   1c262:	48 83 7d f0 00       	cmpq   $0x0,-0x10(%rbp)
   1c267:	74 e1                	je     1c24a <prvQueueSetReceivingTask+0x26>
   1c269:	48 8d 4d e8          	lea    -0x18(%rbp),%rcx
   1c26d:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
   1c271:	ba 00 00 00 00       	mov    $0x0,%edx
   1c276:	48 89 ce             	mov    %rcx,%rsi
   1c279:	48 89 c7             	mov    %rax,%rdi
   1c27c:	e8 62 a7 fe ff       	callq  69e3 <xQueueReceive>
   1c281:	48 83 f8 01          	cmp    $0x1,%rax
   1c285:	74 0b                	je     1c292 <prvQueueSetReceivingTask+0x6e>
   1c287:	48 c7 05 e6 4d 01 00 	movq   $0x0,0x14de6(%rip)        # 31078 <xQueueSetPollStatus>
   1c28e:	00 00 00 00 
   1c292:	8b 45 e8             	mov    -0x18(%rbp),%eax
   1c295:	39 45 ec             	cmp    %eax,-0x14(%rbp)
   1c298:	75 06                	jne    1c2a0 <prvQueueSetReceivingTask+0x7c>
   1c29a:	83 45 ec 01          	addl   $0x1,-0x14(%rbp)
   1c29e:	eb 0b                	jmp    1c2ab <prvQueueSetReceivingTask+0x87>
   1c2a0:	48 c7 05 cd 4d 01 00 	movq   $0x0,0x14dcd(%rip)        # 31078 <xQueueSetPollStatus>
   1c2a7:	00 00 00 00 
   1c2ab:	48 8b 05 c6 4d 01 00 	mov    0x14dc6(%rip),%rax        # 31078 <xQueueSetPollStatus>
   1c2b2:	48 83 f8 01          	cmp    $0x1,%rax
   1c2b6:	75 92                	jne    1c24a <prvQueueSetReceivingTask+0x26>
   1c2b8:	8b 05 b2 a1 11 00    	mov    0x11a1b2(%rip),%eax        # 136470 <ulCycleCounter>
   1c2be:	83 c0 01             	add    $0x1,%eax
   1c2c1:	89 05 a9 a1 11 00    	mov    %eax,0x11a1a9(%rip)        # 136470 <ulCycleCounter>
   1c2c7:	eb 81                	jmp    1c24a <prvQueueSetReceivingTask+0x26>

000000000001c2c9 <vQueueSetPollingInterruptAccess>:
   1c2c9:	f3 0f 1e fa          	endbr64 
   1c2cd:	55                   	push   %rbp
   1c2ce:	48 89 e5             	mov    %rsp,%rbp
   1c2d1:	8b 05 9d a1 11 00    	mov    0x11a19d(%rip),%eax        # 136474 <ulCallCount.3443>
   1c2d7:	83 c0 01             	add    $0x1,%eax
   1c2da:	89 05 94 a1 11 00    	mov    %eax,0x11a194(%rip)        # 136474 <ulCallCount.3443>
   1c2e0:	8b 05 8e a1 11 00    	mov    0x11a18e(%rip),%eax        # 136474 <ulCallCount.3443>
   1c2e6:	83 f8 32             	cmp    $0x32,%eax
   1c2e9:	76 3f                	jbe    1c32a <vQueueSetPollingInterruptAccess+0x61>
   1c2eb:	c7 05 7f a1 11 00 00 	movl   $0x0,0x11a17f(%rip)        # 136474 <ulCallCount.3443>
   1c2f2:	00 00 00 
   1c2f5:	48 8b 05 64 a1 11 00 	mov    0x11a164(%rip),%rax        # 136460 <xQueue>
   1c2fc:	b9 00 00 00 00       	mov    $0x0,%ecx
   1c301:	ba 00 00 00 00       	mov    $0x0,%edx
   1c306:	48 8d 35 6b a1 11 00 	lea    0x11a16b(%rip),%rsi        # 136478 <ulValueToSend.3444>
   1c30d:	48 89 c7             	mov    %rax,%rdi
   1c310:	e8 74 a0 fe ff       	callq  6389 <xQueueGenericSendFromISR>
   1c315:	48 83 f8 01          	cmp    $0x1,%rax
   1c319:	75 0f                	jne    1c32a <vQueueSetPollingInterruptAccess+0x61>
   1c31b:	8b 05 57 a1 11 00    	mov    0x11a157(%rip),%eax        # 136478 <ulValueToSend.3444>
   1c321:	83 c0 01             	add    $0x1,%eax
   1c324:	89 05 4e a1 11 00    	mov    %eax,0x11a14e(%rip)        # 136478 <ulValueToSend.3444>
   1c32a:	90                   	nop
   1c32b:	5d                   	pop    %rbp
   1c32c:	c3                   	retq   

000000000001c32d <xAreQueueSetPollTasksStillRunning>:
   1c32d:	f3 0f 1e fa          	endbr64 
   1c331:	55                   	push   %rbp
   1c332:	48 89 e5             	mov    %rsp,%rbp
   1c335:	8b 15 41 a1 11 00    	mov    0x11a141(%rip),%edx        # 13647c <ulLastCycleCounter.3448>
   1c33b:	8b 05 2f a1 11 00    	mov    0x11a12f(%rip),%eax        # 136470 <ulCycleCounter>
   1c341:	39 c2                	cmp    %eax,%edx
   1c343:	75 0b                	jne    1c350 <xAreQueueSetPollTasksStillRunning+0x23>
   1c345:	48 c7 05 28 4d 01 00 	movq   $0x0,0x14d28(%rip)        # 31078 <xQueueSetPollStatus>
   1c34c:	00 00 00 00 
   1c350:	8b 05 1a a1 11 00    	mov    0x11a11a(%rip),%eax        # 136470 <ulCycleCounter>
   1c356:	89 05 20 a1 11 00    	mov    %eax,0x11a120(%rip)        # 13647c <ulLastCycleCounter.3448>
   1c35c:	48 8b 05 15 4d 01 00 	mov    0x14d15(%rip),%rax        # 31078 <xQueueSetPollStatus>
   1c363:	5d                   	pop    %rbp
   1c364:	c3                   	retq   

000000000001c365 <vStartRecursiveMutexTasks>:
   1c365:	f3 0f 1e fa          	endbr64 
   1c369:	55                   	push   %rbp
   1c36a:	48 89 e5             	mov    %rsp,%rbp
   1c36d:	bf 04 00 00 00       	mov    $0x4,%edi
   1c372:	e8 e6 95 fe ff       	callq  595d <xQueueCreateMutex>
   1c377:	48 89 05 02 a1 11 00 	mov    %rax,0x11a102(%rip)        # 136480 <xMutex>
   1c37e:	48 8b 05 fb a0 11 00 	mov    0x11a0fb(%rip),%rax        # 136480 <xMutex>
   1c385:	48 85 c0             	test   %rax,%rax
   1c388:	0f 84 93 00 00 00    	je     1c421 <vStartRecursiveMutexTasks+0xbc>
   1c38e:	48 8b 05 eb a0 11 00 	mov    0x11a0eb(%rip),%rax        # 136480 <xMutex>
   1c395:	48 8d 35 14 bd 00 00 	lea    0xbd14(%rip),%rsi        # 280b0 <xInterruptGivePeriod+0x2c0>
   1c39c:	48 89 c7             	mov    %rax,%rdi
   1c39f:	e8 14 c2 fe ff       	callq  85b8 <vQueueAddToRegistry>
   1c3a4:	4c 8d 0d 0d a1 11 00 	lea    0x11a10d(%rip),%r9        # 1364b8 <xControllingTaskHandle>
   1c3ab:	41 b8 02 00 00 00    	mov    $0x2,%r8d
   1c3b1:	b9 00 00 00 00       	mov    $0x0,%ecx
   1c3b6:	ba 46 00 00 00       	mov    $0x46,%edx
   1c3bb:	48 8d 35 fe bc 00 00 	lea    0xbcfe(%rip),%rsi        # 280c0 <xInterruptGivePeriod+0x2d0>
   1c3c2:	48 8d 3d 5b 00 00 00 	lea    0x5b(%rip),%rdi        # 1c424 <prvRecursiveMutexControllingTask>
   1c3c9:	e8 29 f9 fe ff       	callq  bcf7 <xTaskCreate>
   1c3ce:	4c 8d 0d eb a0 11 00 	lea    0x11a0eb(%rip),%r9        # 1364c0 <xBlockingTaskHandle>
   1c3d5:	41 b8 01 00 00 00    	mov    $0x1,%r8d
   1c3db:	b9 00 00 00 00       	mov    $0x0,%ecx
   1c3e0:	ba 46 00 00 00       	mov    $0x46,%edx
   1c3e5:	48 8d 35 d9 bc 00 00 	lea    0xbcd9(%rip),%rsi        # 280c5 <xInterruptGivePeriod+0x2d5>
   1c3ec:	48 8d 3d 3d 01 00 00 	lea    0x13d(%rip),%rdi        # 1c530 <prvRecursiveMutexBlockingTask>
   1c3f3:	e8 ff f8 fe ff       	callq  bcf7 <xTaskCreate>
   1c3f8:	41 b9 00 00 00 00    	mov    $0x0,%r9d
   1c3fe:	41 b8 00 00 00 00    	mov    $0x0,%r8d
   1c404:	b9 00 00 00 00       	mov    $0x0,%ecx
   1c409:	ba 46 00 00 00       	mov    $0x46,%edx
   1c40e:	48 8d 35 b5 bc 00 00 	lea    0xbcb5(%rip),%rsi        # 280ca <xInterruptGivePeriod+0x2da>
   1c415:	48 8d 3d e0 01 00 00 	lea    0x1e0(%rip),%rdi        # 1c5fc <prvRecursiveMutexPollingTask>
   1c41c:	e8 d6 f8 fe ff       	callq  bcf7 <xTaskCreate>
   1c421:	90                   	nop
   1c422:	5d                   	pop    %rbp
   1c423:	c3                   	retq   

000000000001c424 <prvRecursiveMutexControllingTask>:
   1c424:	f3 0f 1e fa          	endbr64 
   1c428:	55                   	push   %rbp
   1c429:	48 89 e5             	mov    %rsp,%rbp
   1c42c:	48 83 ec 20          	sub    $0x20,%rsp
   1c430:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
   1c434:	48 8b 05 45 a0 11 00 	mov    0x11a045(%rip),%rax        # 136480 <xMutex>
   1c43b:	48 89 c7             	mov    %rax,%rdi
   1c43e:	e8 78 96 fe ff       	callq  5abb <xQueueGiveMutexRecursive>
   1c443:	48 83 f8 01          	cmp    $0x1,%rax
   1c447:	75 0b                	jne    1c454 <prvRecursiveMutexControllingTask+0x30>
   1c449:	48 c7 05 34 a0 11 00 	movq   $0x1,0x11a034(%rip)        # 136488 <xErrorOccurred>
   1c450:	01 00 00 00 
   1c454:	48 c7 45 f8 00 00 00 	movq   $0x0,-0x8(%rbp)
   1c45b:	00 
   1c45c:	eb 34                	jmp    1c492 <prvRecursiveMutexControllingTask+0x6e>
   1c45e:	48 8b 05 1b a0 11 00 	mov    0x11a01b(%rip),%rax        # 136480 <xMutex>
   1c465:	be 0f 00 00 00       	mov    $0xf,%esi
   1c46a:	48 89 c7             	mov    %rax,%rdi
   1c46d:	e8 7e 97 fe ff       	callq  5bf0 <xQueueTakeMutexRecursive>
   1c472:	48 83 f8 01          	cmp    $0x1,%rax
   1c476:	74 0b                	je     1c483 <prvRecursiveMutexControllingTask+0x5f>
   1c478:	48 c7 05 05 a0 11 00 	movq   $0x1,0x11a005(%rip)        # 136488 <xErrorOccurred>
   1c47f:	01 00 00 00 
   1c483:	bf 14 00 00 00       	mov    $0x14,%edi
   1c488:	e8 15 03 ff ff       	callq  c7a2 <vTaskDelay>
   1c48d:	48 83 45 f8 01       	addq   $0x1,-0x8(%rbp)
   1c492:	48 83 7d f8 09       	cmpq   $0x9,-0x8(%rbp)
   1c497:	76 c5                	jbe    1c45e <prvRecursiveMutexControllingTask+0x3a>
   1c499:	48 c7 45 f8 00 00 00 	movq   $0x0,-0x8(%rbp)
   1c4a0:	00 
   1c4a1:	eb 2f                	jmp    1c4d2 <prvRecursiveMutexControllingTask+0xae>
   1c4a3:	bf 14 00 00 00       	mov    $0x14,%edi
   1c4a8:	e8 f5 02 ff ff       	callq  c7a2 <vTaskDelay>
   1c4ad:	48 8b 05 cc 9f 11 00 	mov    0x119fcc(%rip),%rax        # 136480 <xMutex>
   1c4b4:	48 89 c7             	mov    %rax,%rdi
   1c4b7:	e8 ff 95 fe ff       	callq  5abb <xQueueGiveMutexRecursive>
   1c4bc:	48 83 f8 01          	cmp    $0x1,%rax
   1c4c0:	74 0b                	je     1c4cd <prvRecursiveMutexControllingTask+0xa9>
   1c4c2:	48 c7 05 bb 9f 11 00 	movq   $0x1,0x119fbb(%rip)        # 136488 <xErrorOccurred>
   1c4c9:	01 00 00 00 
   1c4cd:	48 83 45 f8 01       	addq   $0x1,-0x8(%rbp)
   1c4d2:	48 83 7d f8 09       	cmpq   $0x9,-0x8(%rbp)
   1c4d7:	76 ca                	jbe    1c4a3 <prvRecursiveMutexControllingTask+0x7f>
   1c4d9:	48 8b 05 a0 9f 11 00 	mov    0x119fa0(%rip),%rax        # 136480 <xMutex>
   1c4e0:	48 89 c7             	mov    %rax,%rdi
   1c4e3:	e8 d3 95 fe ff       	callq  5abb <xQueueGiveMutexRecursive>
   1c4e8:	48 83 f8 01          	cmp    $0x1,%rax
   1c4ec:	75 0b                	jne    1c4f9 <prvRecursiveMutexControllingTask+0xd5>
   1c4ee:	48 c7 05 8f 9f 11 00 	movq   $0x1,0x119f8f(%rip)        # 136488 <xErrorOccurred>
   1c4f5:	01 00 00 00 
   1c4f9:	48 8b 05 a0 9f 11 00 	mov    0x119fa0(%rip),%rax        # 1364a0 <uxControllingCycles>
   1c500:	48 83 c0 01          	add    $0x1,%rax
   1c504:	48 89 05 95 9f 11 00 	mov    %rax,0x119f95(%rip)        # 1364a0 <uxControllingCycles>
   1c50b:	48 c7 05 7a 9f 11 00 	movq   $0x1,0x119f7a(%rip)        # 136490 <xControllingIsSuspended>
   1c512:	01 00 00 00 
   1c516:	bf 00 00 00 00       	mov    $0x0,%edi
   1c51b:	e8 41 08 ff ff       	callq  cd61 <vTaskSuspend>
   1c520:	48 c7 05 65 9f 11 00 	movq   $0x0,0x119f65(%rip)        # 136490 <xControllingIsSuspended>
   1c527:	00 00 00 00 
   1c52b:	e9 04 ff ff ff       	jmpq   1c434 <prvRecursiveMutexControllingTask+0x10>

000000000001c530 <prvRecursiveMutexBlockingTask>:
   1c530:	f3 0f 1e fa          	endbr64 
   1c534:	55                   	push   %rbp
   1c535:	48 89 e5             	mov    %rsp,%rbp
   1c538:	48 83 ec 10          	sub    $0x10,%rsp
   1c53c:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   1c540:	48 8b 05 39 9f 11 00 	mov    0x119f39(%rip),%rax        # 136480 <xMutex>
   1c547:	48 c7 c6 fe ff ff ff 	mov    $0xfffffffffffffffe,%rsi
   1c54e:	48 89 c7             	mov    %rax,%rdi
   1c551:	e8 9a 96 fe ff       	callq  5bf0 <xQueueTakeMutexRecursive>
   1c556:	48 83 f8 01          	cmp    $0x1,%rax
   1c55a:	75 5c                	jne    1c5b8 <prvRecursiveMutexBlockingTask+0x88>
   1c55c:	48 8b 05 2d 9f 11 00 	mov    0x119f2d(%rip),%rax        # 136490 <xControllingIsSuspended>
   1c563:	48 83 f8 01          	cmp    $0x1,%rax
   1c567:	74 0d                	je     1c576 <prvRecursiveMutexBlockingTask+0x46>
   1c569:	48 c7 05 14 9f 11 00 	movq   $0x1,0x119f14(%rip)        # 136488 <xErrorOccurred>
   1c570:	01 00 00 00 
   1c574:	eb 4d                	jmp    1c5c3 <prvRecursiveMutexBlockingTask+0x93>
   1c576:	48 8b 05 03 9f 11 00 	mov    0x119f03(%rip),%rax        # 136480 <xMutex>
   1c57d:	48 89 c7             	mov    %rax,%rdi
   1c580:	e8 36 95 fe ff       	callq  5abb <xQueueGiveMutexRecursive>
   1c585:	48 83 f8 01          	cmp    $0x1,%rax
   1c589:	74 0b                	je     1c596 <prvRecursiveMutexBlockingTask+0x66>
   1c58b:	48 c7 05 f2 9e 11 00 	movq   $0x1,0x119ef2(%rip)        # 136488 <xErrorOccurred>
   1c592:	01 00 00 00 
   1c596:	48 c7 05 f7 9e 11 00 	movq   $0x1,0x119ef7(%rip)        # 136498 <xBlockingIsSuspended>
   1c59d:	01 00 00 00 
   1c5a1:	bf 00 00 00 00       	mov    $0x0,%edi
   1c5a6:	e8 b6 07 ff ff       	callq  cd61 <vTaskSuspend>
   1c5ab:	48 c7 05 e2 9e 11 00 	movq   $0x0,0x119ee2(%rip)        # 136498 <xBlockingIsSuspended>
   1c5b2:	00 00 00 00 
   1c5b6:	eb 0b                	jmp    1c5c3 <prvRecursiveMutexBlockingTask+0x93>
   1c5b8:	48 c7 05 c5 9e 11 00 	movq   $0x1,0x119ec5(%rip)        # 136488 <xErrorOccurred>
   1c5bf:	01 00 00 00 
   1c5c3:	48 8b 05 de 9e 11 00 	mov    0x119ede(%rip),%rax        # 1364a8 <uxBlockingCycles>
   1c5ca:	48 8d 50 01          	lea    0x1(%rax),%rdx
   1c5ce:	48 8b 05 cb 9e 11 00 	mov    0x119ecb(%rip),%rax        # 1364a0 <uxControllingCycles>
   1c5d5:	48 39 c2             	cmp    %rax,%rdx
   1c5d8:	74 0b                	je     1c5e5 <prvRecursiveMutexBlockingTask+0xb5>
   1c5da:	48 c7 05 a3 9e 11 00 	movq   $0x1,0x119ea3(%rip)        # 136488 <xErrorOccurred>
   1c5e1:	01 00 00 00 
   1c5e5:	48 8b 05 bc 9e 11 00 	mov    0x119ebc(%rip),%rax        # 1364a8 <uxBlockingCycles>
   1c5ec:	48 83 c0 01          	add    $0x1,%rax
   1c5f0:	48 89 05 b1 9e 11 00 	mov    %rax,0x119eb1(%rip)        # 1364a8 <uxBlockingCycles>
   1c5f7:	e9 44 ff ff ff       	jmpq   1c540 <prvRecursiveMutexBlockingTask+0x10>

000000000001c5fc <prvRecursiveMutexPollingTask>:
   1c5fc:	f3 0f 1e fa          	endbr64 
   1c600:	55                   	push   %rbp
   1c601:	48 89 e5             	mov    %rsp,%rbp
   1c604:	48 83 ec 10          	sub    $0x10,%rsp
   1c608:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   1c60c:	48 8b 05 6d 9e 11 00 	mov    0x119e6d(%rip),%rax        # 136480 <xMutex>
   1c613:	be 00 00 00 00       	mov    $0x0,%esi
   1c618:	48 89 c7             	mov    %rax,%rdi
   1c61b:	e8 d0 95 fe ff       	callq  5bf0 <xQueueTakeMutexRecursive>
   1c620:	48 83 f8 01          	cmp    $0x1,%rax
   1c624:	75 e6                	jne    1c60c <prvRecursiveMutexPollingTask+0x10>
   1c626:	48 8b 05 8b 9e 11 00 	mov    0x119e8b(%rip),%rax        # 1364b8 <xControllingTaskHandle>
   1c62d:	48 89 c7             	mov    %rax,%rdi
   1c630:	e8 53 02 ff ff       	callq  c888 <eTaskGetState>
   1c635:	83 f8 03             	cmp    $0x3,%eax
   1c638:	74 11                	je     1c64b <prvRecursiveMutexPollingTask+0x4f>
   1c63a:	be 1e 01 00 00       	mov    $0x11e,%esi
   1c63f:	48 8d 3d 8a ba 00 00 	lea    0xba8a(%rip),%rdi        # 280d0 <xInterruptGivePeriod+0x2e0>
   1c646:	e8 c1 76 fe ff       	callq  3d0c <vAssertCalled>
   1c64b:	48 8b 05 6e 9e 11 00 	mov    0x119e6e(%rip),%rax        # 1364c0 <xBlockingTaskHandle>
   1c652:	48 89 c7             	mov    %rax,%rdi
   1c655:	e8 2e 02 ff ff       	callq  c888 <eTaskGetState>
   1c65a:	83 f8 03             	cmp    $0x3,%eax
   1c65d:	74 11                	je     1c670 <prvRecursiveMutexPollingTask+0x74>
   1c65f:	be 1f 01 00 00       	mov    $0x11f,%esi
   1c664:	48 8d 3d 65 ba 00 00 	lea    0xba65(%rip),%rdi        # 280d0 <xInterruptGivePeriod+0x2e0>
   1c66b:	e8 9c 76 fe ff       	callq  3d0c <vAssertCalled>
   1c670:	48 8b 05 21 9e 11 00 	mov    0x119e21(%rip),%rax        # 136498 <xBlockingIsSuspended>
   1c677:	48 83 f8 01          	cmp    $0x1,%rax
   1c67b:	75 0d                	jne    1c68a <prvRecursiveMutexPollingTask+0x8e>
   1c67d:	48 8b 05 0c 9e 11 00 	mov    0x119e0c(%rip),%rax        # 136490 <xControllingIsSuspended>
   1c684:	48 83 f8 01          	cmp    $0x1,%rax
   1c688:	74 10                	je     1c69a <prvRecursiveMutexPollingTask+0x9e>
   1c68a:	48 c7 05 f3 9d 11 00 	movq   $0x1,0x119df3(%rip)        # 136488 <xErrorOccurred>
   1c691:	01 00 00 00 
   1c695:	e9 04 01 00 00       	jmpq   1c79e <prvRecursiveMutexPollingTask+0x1a2>
   1c69a:	48 8b 05 0f 9e 11 00 	mov    0x119e0f(%rip),%rax        # 1364b0 <uxPollingCycles>
   1c6a1:	48 83 c0 01          	add    $0x1,%rax
   1c6a5:	48 89 05 04 9e 11 00 	mov    %rax,0x119e04(%rip)        # 1364b0 <uxPollingCycles>
   1c6ac:	48 8b 05 0d 9e 11 00 	mov    0x119e0d(%rip),%rax        # 1364c0 <xBlockingTaskHandle>
   1c6b3:	48 89 c7             	mov    %rax,%rdi
   1c6b6:	e8 c4 08 ff ff       	callq  cf7f <vTaskResume>
   1c6bb:	48 8b 05 f6 9d 11 00 	mov    0x119df6(%rip),%rax        # 1364b8 <xControllingTaskHandle>
   1c6c2:	48 89 c7             	mov    %rax,%rdi
   1c6c5:	e8 b5 08 ff ff       	callq  cf7f <vTaskResume>
   1c6ca:	48 8b 05 c7 9d 11 00 	mov    0x119dc7(%rip),%rax        # 136498 <xBlockingIsSuspended>
   1c6d1:	48 83 f8 01          	cmp    $0x1,%rax
   1c6d5:	74 0d                	je     1c6e4 <prvRecursiveMutexPollingTask+0xe8>
   1c6d7:	48 8b 05 b2 9d 11 00 	mov    0x119db2(%rip),%rax        # 136490 <xControllingIsSuspended>
   1c6de:	48 83 f8 01          	cmp    $0x1,%rax
   1c6e2:	75 0b                	jne    1c6ef <prvRecursiveMutexPollingTask+0xf3>
   1c6e4:	48 c7 05 99 9d 11 00 	movq   $0x1,0x119d99(%rip)        # 136488 <xErrorOccurred>
   1c6eb:	01 00 00 00 
   1c6ef:	bf 00 00 00 00       	mov    $0x0,%edi
   1c6f4:	e8 b0 02 ff ff       	callq  c9a9 <uxTaskPriorityGet>
   1c6f9:	48 83 f8 02          	cmp    $0x2,%rax
   1c6fd:	74 11                	je     1c710 <prvRecursiveMutexPollingTask+0x114>
   1c6ff:	be 4b 01 00 00       	mov    $0x14b,%esi
   1c704:	48 8d 3d c5 b9 00 00 	lea    0xb9c5(%rip),%rdi        # 280d0 <xInterruptGivePeriod+0x2e0>
   1c70b:	e8 fc 75 fe ff       	callq  3d0c <vAssertCalled>
   1c710:	48 8b 05 a1 9d 11 00 	mov    0x119da1(%rip),%rax        # 1364b8 <xControllingTaskHandle>
   1c717:	48 89 c7             	mov    %rax,%rdi
   1c71a:	e8 69 01 ff ff       	callq  c888 <eTaskGetState>
   1c71f:	83 f8 02             	cmp    $0x2,%eax
   1c722:	74 11                	je     1c735 <prvRecursiveMutexPollingTask+0x139>
   1c724:	be 51 01 00 00       	mov    $0x151,%esi
   1c729:	48 8d 3d a0 b9 00 00 	lea    0xb9a0(%rip),%rdi        # 280d0 <xInterruptGivePeriod+0x2e0>
   1c730:	e8 d7 75 fe ff       	callq  3d0c <vAssertCalled>
   1c735:	48 8b 05 84 9d 11 00 	mov    0x119d84(%rip),%rax        # 1364c0 <xBlockingTaskHandle>
   1c73c:	48 89 c7             	mov    %rax,%rdi
   1c73f:	e8 44 01 ff ff       	callq  c888 <eTaskGetState>
   1c744:	83 f8 02             	cmp    $0x2,%eax
   1c747:	74 11                	je     1c75a <prvRecursiveMutexPollingTask+0x15e>
   1c749:	be 52 01 00 00       	mov    $0x152,%esi
   1c74e:	48 8d 3d 7b b9 00 00 	lea    0xb97b(%rip),%rdi        # 280d0 <xInterruptGivePeriod+0x2e0>
   1c755:	e8 b2 75 fe ff       	callq  3d0c <vAssertCalled>
   1c75a:	48 8b 05 1f 9d 11 00 	mov    0x119d1f(%rip),%rax        # 136480 <xMutex>
   1c761:	48 89 c7             	mov    %rax,%rdi
   1c764:	e8 52 93 fe ff       	callq  5abb <xQueueGiveMutexRecursive>
   1c769:	48 83 f8 01          	cmp    $0x1,%rax
   1c76d:	74 0b                	je     1c77a <prvRecursiveMutexPollingTask+0x17e>
   1c76f:	48 c7 05 0e 9d 11 00 	movq   $0x1,0x119d0e(%rip)        # 136488 <xErrorOccurred>
   1c776:	01 00 00 00 
   1c77a:	bf 00 00 00 00       	mov    $0x0,%edi
   1c77f:	e8 25 02 ff ff       	callq  c9a9 <uxTaskPriorityGet>
   1c784:	48 85 c0             	test   %rax,%rax
   1c787:	0f 84 7f fe ff ff    	je     1c60c <prvRecursiveMutexPollingTask+0x10>
   1c78d:	be 5f 01 00 00       	mov    $0x15f,%esi
   1c792:	48 8d 3d 37 b9 00 00 	lea    0xb937(%rip),%rdi        # 280d0 <xInterruptGivePeriod+0x2e0>
   1c799:	e8 6e 75 fe ff       	callq  3d0c <vAssertCalled>
   1c79e:	e9 69 fe ff ff       	jmpq   1c60c <prvRecursiveMutexPollingTask+0x10>

000000000001c7a3 <xAreRecursiveMutexTasksStillRunning>:
   1c7a3:	f3 0f 1e fa          	endbr64 
   1c7a7:	55                   	push   %rbp
   1c7a8:	48 89 e5             	mov    %rsp,%rbp
   1c7ab:	48 8b 15 16 9d 11 00 	mov    0x119d16(%rip),%rdx        # 1364c8 <uxLastControllingCycles.2950>
   1c7b2:	48 8b 05 e7 9c 11 00 	mov    0x119ce7(%rip),%rax        # 1364a0 <uxControllingCycles>
   1c7b9:	48 39 c2             	cmp    %rax,%rdx
   1c7bc:	75 0d                	jne    1c7cb <xAreRecursiveMutexTasksStillRunning+0x28>
   1c7be:	48 c7 05 bf 9c 11 00 	movq   $0x1,0x119cbf(%rip)        # 136488 <xErrorOccurred>
   1c7c5:	01 00 00 00 
   1c7c9:	eb 0e                	jmp    1c7d9 <xAreRecursiveMutexTasksStillRunning+0x36>
   1c7cb:	48 8b 05 ce 9c 11 00 	mov    0x119cce(%rip),%rax        # 1364a0 <uxControllingCycles>
   1c7d2:	48 89 05 ef 9c 11 00 	mov    %rax,0x119cef(%rip)        # 1364c8 <uxLastControllingCycles.2950>
   1c7d9:	48 8b 15 f0 9c 11 00 	mov    0x119cf0(%rip),%rdx        # 1364d0 <uxLastBlockingCycles.2951>
   1c7e0:	48 8b 05 c1 9c 11 00 	mov    0x119cc1(%rip),%rax        # 1364a8 <uxBlockingCycles>
   1c7e7:	48 39 c2             	cmp    %rax,%rdx
   1c7ea:	75 0d                	jne    1c7f9 <xAreRecursiveMutexTasksStillRunning+0x56>
   1c7ec:	48 c7 05 91 9c 11 00 	movq   $0x1,0x119c91(%rip)        # 136488 <xErrorOccurred>
   1c7f3:	01 00 00 00 
   1c7f7:	eb 0e                	jmp    1c807 <xAreRecursiveMutexTasksStillRunning+0x64>
   1c7f9:	48 8b 05 a8 9c 11 00 	mov    0x119ca8(%rip),%rax        # 1364a8 <uxBlockingCycles>
   1c800:	48 89 05 c9 9c 11 00 	mov    %rax,0x119cc9(%rip)        # 1364d0 <uxLastBlockingCycles.2951>
   1c807:	48 8b 15 ca 9c 11 00 	mov    0x119cca(%rip),%rdx        # 1364d8 <uxLastPollingCycles.2952>
   1c80e:	48 8b 05 9b 9c 11 00 	mov    0x119c9b(%rip),%rax        # 1364b0 <uxPollingCycles>
   1c815:	48 39 c2             	cmp    %rax,%rdx
   1c818:	75 0d                	jne    1c827 <xAreRecursiveMutexTasksStillRunning+0x84>
   1c81a:	48 c7 05 63 9c 11 00 	movq   $0x1,0x119c63(%rip)        # 136488 <xErrorOccurred>
   1c821:	01 00 00 00 
   1c825:	eb 0e                	jmp    1c835 <xAreRecursiveMutexTasksStillRunning+0x92>
   1c827:	48 8b 05 82 9c 11 00 	mov    0x119c82(%rip),%rax        # 1364b0 <uxPollingCycles>
   1c82e:	48 89 05 a3 9c 11 00 	mov    %rax,0x119ca3(%rip)        # 1364d8 <uxLastPollingCycles.2952>
   1c835:	48 8b 05 4c 9c 11 00 	mov    0x119c4c(%rip),%rax        # 136488 <xErrorOccurred>
   1c83c:	48 83 f8 01          	cmp    $0x1,%rax
   1c840:	75 0a                	jne    1c84c <xAreRecursiveMutexTasksStillRunning+0xa9>
   1c842:	48 c7 45 f8 00 00 00 	movq   $0x0,-0x8(%rbp)
   1c849:	00 
   1c84a:	eb 08                	jmp    1c854 <xAreRecursiveMutexTasksStillRunning+0xb1>
   1c84c:	48 c7 45 f8 01 00 00 	movq   $0x1,-0x8(%rbp)
   1c853:	00 
   1c854:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   1c858:	5d                   	pop    %rbp
   1c859:	c3                   	retq   

000000000001c85a <vStartSemaphoreTasks>:
   1c85a:	f3 0f 1e fa          	endbr64 
   1c85e:	55                   	push   %rbp
   1c85f:	48 89 e5             	mov    %rsp,%rbp
   1c862:	48 83 ec 30          	sub    $0x30,%rsp
   1c866:	48 89 7d d8          	mov    %rdi,-0x28(%rbp)
   1c86a:	48 c7 45 e8 64 00 00 	movq   $0x64,-0x18(%rbp)
   1c871:	00 
   1c872:	bf 18 00 00 00       	mov    $0x18,%edi
   1c877:	e8 04 5e ff ff       	callq  12680 <pvPortMalloc>
   1c87c:	48 89 45 f0          	mov    %rax,-0x10(%rbp)
   1c880:	48 83 7d f0 00       	cmpq   $0x0,-0x10(%rbp)
   1c885:	0f 84 e1 00 00 00    	je     1c96c <vStartSemaphoreTasks+0x112>
   1c88b:	ba 03 00 00 00       	mov    $0x3,%edx
   1c890:	be 00 00 00 00       	mov    $0x0,%esi
   1c895:	bf 01 00 00 00       	mov    $0x1,%edi
   1c89a:	e8 54 8d fe ff       	callq  55f3 <xQueueGenericCreate>
   1c89f:	48 8b 55 f0          	mov    -0x10(%rbp),%rdx
   1c8a3:	48 89 02             	mov    %rax,(%rdx)
   1c8a6:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
   1c8aa:	48 8b 00             	mov    (%rax),%rax
   1c8ad:	48 85 c0             	test   %rax,%rax
   1c8b0:	0f 84 b6 00 00 00    	je     1c96c <vStartSemaphoreTasks+0x112>
   1c8b6:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
   1c8ba:	48 8b 00             	mov    (%rax),%rax
   1c8bd:	b9 00 00 00 00       	mov    $0x0,%ecx
   1c8c2:	ba 00 00 00 00       	mov    $0x0,%edx
   1c8c7:	be 00 00 00 00       	mov    $0x0,%esi
   1c8cc:	48 89 c7             	mov    %rax,%rdi
   1c8cf:	e8 c3 94 fe ff       	callq  5d97 <xQueueGenericSend>
   1c8d4:	bf 04 00 00 00       	mov    $0x4,%edi
   1c8d9:	e8 a2 5d ff ff       	callq  12680 <pvPortMalloc>
   1c8de:	48 8b 55 f0          	mov    -0x10(%rbp),%rdx
   1c8e2:	48 89 42 08          	mov    %rax,0x8(%rdx)
   1c8e6:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
   1c8ea:	48 8b 40 08          	mov    0x8(%rax),%rax
   1c8ee:	c7 00 ff 00 00 00    	movl   $0xff,(%rax)
   1c8f4:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
   1c8f8:	48 c7 40 10 00 00 00 	movq   $0x0,0x10(%rax)
   1c8ff:	00 
   1c900:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
   1c904:	41 b9 00 00 00 00    	mov    $0x0,%r9d
   1c90a:	41 b8 00 00 00 00    	mov    $0x0,%r8d
   1c910:	48 89 c1             	mov    %rax,%rcx
   1c913:	ba 46 00 00 00       	mov    $0x46,%edx
   1c918:	48 8d 35 f6 b7 00 00 	lea    0xb7f6(%rip),%rsi        # 28115 <xInterruptGivePeriod+0x325>
   1c91f:	48 8d 3d 45 01 00 00 	lea    0x145(%rip),%rdi        # 1ca6b <prvSemaphoreTest>
   1c926:	e8 cc f3 fe ff       	callq  bcf7 <xTaskCreate>
   1c92b:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
   1c92f:	41 b9 00 00 00 00    	mov    $0x0,%r9d
   1c935:	41 b8 00 00 00 00    	mov    $0x0,%r8d
   1c93b:	48 89 c1             	mov    %rax,%rcx
   1c93e:	ba 46 00 00 00       	mov    $0x46,%edx
   1c943:	48 8d 35 d3 b7 00 00 	lea    0xb7d3(%rip),%rsi        # 2811d <xInterruptGivePeriod+0x32d>
   1c94a:	48 8d 3d 1a 01 00 00 	lea    0x11a(%rip),%rdi        # 1ca6b <prvSemaphoreTest>
   1c951:	e8 a1 f3 fe ff       	callq  bcf7 <xTaskCreate>
   1c956:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
   1c95a:	48 8b 00             	mov    (%rax),%rax
   1c95d:	48 8d 35 c1 b7 00 00 	lea    0xb7c1(%rip),%rsi        # 28125 <xInterruptGivePeriod+0x335>
   1c964:	48 89 c7             	mov    %rax,%rdi
   1c967:	e8 4c bc fe ff       	callq  85b8 <vQueueAddToRegistry>
   1c96c:	bf 18 00 00 00       	mov    $0x18,%edi
   1c971:	e8 0a 5d ff ff       	callq  12680 <pvPortMalloc>
   1c976:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
   1c97a:	48 83 7d f8 00       	cmpq   $0x0,-0x8(%rbp)
   1c97f:	0f 84 e3 00 00 00    	je     1ca68 <vStartSemaphoreTasks+0x20e>
   1c985:	ba 03 00 00 00       	mov    $0x3,%edx
   1c98a:	be 00 00 00 00       	mov    $0x0,%esi
   1c98f:	bf 01 00 00 00       	mov    $0x1,%edi
   1c994:	e8 5a 8c fe ff       	callq  55f3 <xQueueGenericCreate>
   1c999:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
   1c99d:	48 89 02             	mov    %rax,(%rdx)
   1c9a0:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   1c9a4:	48 8b 00             	mov    (%rax),%rax
   1c9a7:	48 85 c0             	test   %rax,%rax
   1c9aa:	0f 84 b8 00 00 00    	je     1ca68 <vStartSemaphoreTasks+0x20e>
   1c9b0:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   1c9b4:	48 8b 00             	mov    (%rax),%rax
   1c9b7:	b9 00 00 00 00       	mov    $0x0,%ecx
   1c9bc:	ba 00 00 00 00       	mov    $0x0,%edx
   1c9c1:	be 00 00 00 00       	mov    $0x0,%esi
   1c9c6:	48 89 c7             	mov    %rax,%rdi
   1c9c9:	e8 c9 93 fe ff       	callq  5d97 <xQueueGenericSend>
   1c9ce:	bf 04 00 00 00       	mov    $0x4,%edi
   1c9d3:	e8 a8 5c ff ff       	callq  12680 <pvPortMalloc>
   1c9d8:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
   1c9dc:	48 89 42 08          	mov    %rax,0x8(%rdx)
   1c9e0:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   1c9e4:	48 8b 40 08          	mov    0x8(%rax),%rax
   1c9e8:	c7 00 ff 0f 00 00    	movl   $0xfff,(%rax)
   1c9ee:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   1c9f2:	48 8b 55 e8          	mov    -0x18(%rbp),%rdx
   1c9f6:	48 89 50 10          	mov    %rdx,0x10(%rax)
   1c9fa:	48 8b 55 d8          	mov    -0x28(%rbp),%rdx
   1c9fe:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   1ca02:	41 b9 00 00 00 00    	mov    $0x0,%r9d
   1ca08:	49 89 d0             	mov    %rdx,%r8
   1ca0b:	48 89 c1             	mov    %rax,%rcx
   1ca0e:	ba 46 00 00 00       	mov    $0x46,%edx
   1ca13:	48 8d 35 1a b7 00 00 	lea    0xb71a(%rip),%rsi        # 28134 <xInterruptGivePeriod+0x344>
   1ca1a:	48 8d 3d 4a 00 00 00 	lea    0x4a(%rip),%rdi        # 1ca6b <prvSemaphoreTest>
   1ca21:	e8 d1 f2 fe ff       	callq  bcf7 <xTaskCreate>
   1ca26:	48 8b 55 d8          	mov    -0x28(%rbp),%rdx
   1ca2a:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   1ca2e:	41 b9 00 00 00 00    	mov    $0x0,%r9d
   1ca34:	49 89 d0             	mov    %rdx,%r8
   1ca37:	48 89 c1             	mov    %rax,%rcx
   1ca3a:	ba 46 00 00 00       	mov    $0x46,%edx
   1ca3f:	48 8d 35 f6 b6 00 00 	lea    0xb6f6(%rip),%rsi        # 2813c <xInterruptGivePeriod+0x34c>
   1ca46:	48 8d 3d 1e 00 00 00 	lea    0x1e(%rip),%rdi        # 1ca6b <prvSemaphoreTest>
   1ca4d:	e8 a5 f2 fe ff       	callq  bcf7 <xTaskCreate>
   1ca52:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   1ca56:	48 8b 00             	mov    (%rax),%rax
   1ca59:	48 8d 35 e4 b6 00 00 	lea    0xb6e4(%rip),%rsi        # 28144 <xInterruptGivePeriod+0x354>
   1ca60:	48 89 c7             	mov    %rax,%rdi
   1ca63:	e8 50 bb fe ff       	callq  85b8 <vQueueAddToRegistry>
   1ca68:	90                   	nop
   1ca69:	c9                   	leaveq 
   1ca6a:	c3                   	retq   

000000000001ca6b <prvSemaphoreTest>:
   1ca6b:	f3 0f 1e fa          	endbr64 
   1ca6f:	55                   	push   %rbp
   1ca70:	48 89 e5             	mov    %rsp,%rbp
   1ca73:	48 83 ec 30          	sub    $0x30,%rsp
   1ca77:	48 89 7d d8          	mov    %rdi,-0x28(%rbp)
   1ca7b:	66 c7 45 e4 00 00    	movw   $0x0,-0x1c(%rbp)
   1ca81:	e8 49 63 ff ff       	callq  12dcf <vPortEnterCritical>
   1ca86:	0f b7 05 5b 9a 11 00 	movzwl 0x119a5b(%rip),%eax        # 1364e8 <sNextCheckVariable>
   1ca8d:	66 89 45 e6          	mov    %ax,-0x1a(%rbp)
   1ca91:	0f b7 05 50 9a 11 00 	movzwl 0x119a50(%rip),%eax        # 1364e8 <sNextCheckVariable>
   1ca98:	83 c0 01             	add    $0x1,%eax
   1ca9b:	66 89 05 46 9a 11 00 	mov    %ax,0x119a46(%rip)        # 1364e8 <sNextCheckVariable>
   1caa2:	e8 56 63 ff ff       	callq  12dfd <vPortExitCritical>
   1caa7:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
   1caab:	48 89 45 f0          	mov    %rax,-0x10(%rbp)
   1caaf:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
   1cab3:	48 8b 40 08          	mov    0x8(%rax),%rax
   1cab7:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
   1cabb:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
   1cabf:	48 8b 40 10          	mov    0x10(%rax),%rax
   1cac3:	48 85 c0             	test   %rax,%rax
   1cac6:	74 09                	je     1cad1 <prvSemaphoreTest+0x66>
   1cac8:	c7 45 e8 ff 0f 00 00 	movl   $0xfff,-0x18(%rbp)
   1cacf:	eb 07                	jmp    1cad8 <prvSemaphoreTest+0x6d>
   1cad1:	c7 45 e8 ff 00 00 00 	movl   $0xff,-0x18(%rbp)
   1cad8:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
   1cadc:	48 8b 50 10          	mov    0x10(%rax),%rdx
   1cae0:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
   1cae4:	48 8b 00             	mov    (%rax),%rax
   1cae7:	48 89 d6             	mov    %rdx,%rsi
   1caea:	48 89 c7             	mov    %rax,%rdi
   1caed:	e8 82 a4 fe ff       	callq  6f74 <xQueueSemaphoreTake>
   1caf2:	48 83 f8 01          	cmp    $0x1,%rax
   1caf6:	0f 85 d8 00 00 00    	jne    1cbd4 <prvSemaphoreTest+0x169>
   1cafc:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   1cb00:	8b 10                	mov    (%rax),%edx
   1cb02:	8b 45 e8             	mov    -0x18(%rbp),%eax
   1cb05:	39 c2                	cmp    %eax,%edx
   1cb07:	74 06                	je     1cb0f <prvSemaphoreTest+0xa4>
   1cb09:	66 c7 45 e4 01 00    	movw   $0x1,-0x1c(%rbp)
   1cb0f:	c7 45 ec 00 00 00 00 	movl   $0x0,-0x14(%rbp)
   1cb16:	eb 1e                	jmp    1cb36 <prvSemaphoreTest+0xcb>
   1cb18:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   1cb1c:	8b 55 ec             	mov    -0x14(%rbp),%edx
   1cb1f:	89 10                	mov    %edx,(%rax)
   1cb21:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   1cb25:	8b 00                	mov    (%rax),%eax
   1cb27:	39 45 ec             	cmp    %eax,-0x14(%rbp)
   1cb2a:	74 06                	je     1cb32 <prvSemaphoreTest+0xc7>
   1cb2c:	66 c7 45 e4 01 00    	movw   $0x1,-0x1c(%rbp)
   1cb32:	83 45 ec 01          	addl   $0x1,-0x14(%rbp)
   1cb36:	8b 45 e8             	mov    -0x18(%rbp),%eax
   1cb39:	39 45 ec             	cmp    %eax,-0x14(%rbp)
   1cb3c:	76 da                	jbe    1cb18 <prvSemaphoreTest+0xad>
   1cb3e:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
   1cb42:	48 8b 00             	mov    (%rax),%rax
   1cb45:	b9 00 00 00 00       	mov    $0x0,%ecx
   1cb4a:	ba 00 00 00 00       	mov    $0x0,%edx
   1cb4f:	be 00 00 00 00       	mov    $0x0,%esi
   1cb54:	48 89 c7             	mov    %rax,%rdi
   1cb57:	e8 3b 92 fe ff       	callq  5d97 <xQueueGenericSend>
   1cb5c:	48 85 c0             	test   %rax,%rax
   1cb5f:	75 06                	jne    1cb67 <prvSemaphoreTest+0xfc>
   1cb61:	66 c7 45 e4 01 00    	movw   $0x1,-0x1c(%rbp)
   1cb67:	66 83 7d e4 00       	cmpw   $0x0,-0x1c(%rbp)
   1cb6c:	75 33                	jne    1cba1 <prvSemaphoreTest+0x136>
   1cb6e:	66 83 7d e6 03       	cmpw   $0x3,-0x1a(%rbp)
   1cb73:	7f 2c                	jg     1cba1 <prvSemaphoreTest+0x136>
   1cb75:	0f bf 45 e6          	movswl -0x1a(%rbp),%eax
   1cb79:	48 63 d0             	movslq %eax,%rdx
   1cb7c:	48 8d 0c 12          	lea    (%rdx,%rdx,1),%rcx
   1cb80:	48 8d 15 59 99 11 00 	lea    0x119959(%rip),%rdx        # 1364e0 <sCheckVariables>
   1cb87:	0f b7 14 11          	movzwl (%rcx,%rdx,1),%edx
   1cb8b:	83 c2 01             	add    $0x1,%edx
   1cb8e:	89 d1                	mov    %edx,%ecx
   1cb90:	48 98                	cltq   
   1cb92:	48 8d 14 00          	lea    (%rax,%rax,1),%rdx
   1cb96:	48 8d 05 43 99 11 00 	lea    0x119943(%rip),%rax        # 1364e0 <sCheckVariables>
   1cb9d:	66 89 0c 02          	mov    %cx,(%rdx,%rax,1)
   1cba1:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
   1cba5:	48 8b 40 10          	mov    0x10(%rax),%rax
   1cba9:	48 85 c0             	test   %rax,%rax
   1cbac:	0f 84 26 ff ff ff    	je     1cad8 <prvSemaphoreTest+0x6d>
   1cbb2:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
   1cbb6:	48 8b 50 10          	mov    0x10(%rax),%rdx
   1cbba:	48 89 d0             	mov    %rdx,%rax
   1cbbd:	48 c1 e0 02          	shl    $0x2,%rax
   1cbc1:	48 01 d0             	add    %rdx,%rax
   1cbc4:	48 01 c0             	add    %rax,%rax
   1cbc7:	48 89 c7             	mov    %rax,%rdi
   1cbca:	e8 d3 fb fe ff       	callq  c7a2 <vTaskDelay>
   1cbcf:	e9 04 ff ff ff       	jmpq   1cad8 <prvSemaphoreTest+0x6d>
   1cbd4:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
   1cbd8:	48 8b 40 10          	mov    0x10(%rax),%rax
   1cbdc:	48 85 c0             	test   %rax,%rax
   1cbdf:	0f 85 f3 fe ff ff    	jne    1cad8 <prvSemaphoreTest+0x6d>
   1cbe5:	e8 8a 62 ff ff       	callq  12e74 <vPortYield>
   1cbea:	e9 e9 fe ff ff       	jmpq   1cad8 <prvSemaphoreTest+0x6d>

000000000001cbef <xAreSemaphoreTasksStillRunning>:
   1cbef:	f3 0f 1e fa          	endbr64 
   1cbf3:	55                   	push   %rbp
   1cbf4:	48 89 e5             	mov    %rsp,%rbp
   1cbf7:	48 c7 45 f8 01 00 00 	movq   $0x1,-0x8(%rbp)
   1cbfe:	00 
   1cbff:	48 c7 45 f0 00 00 00 	movq   $0x0,-0x10(%rbp)
   1cc06:	00 
   1cc07:	eb 5e                	jmp    1cc67 <xAreSemaphoreTasksStillRunning+0x78>
   1cc09:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
   1cc0d:	48 8d 14 00          	lea    (%rax,%rax,1),%rdx
   1cc11:	48 8d 05 d8 98 11 00 	lea    0x1198d8(%rip),%rax        # 1364f0 <sLastCheckVariables.3454>
   1cc18:	0f b7 14 02          	movzwl (%rdx,%rax,1),%edx
   1cc1c:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
   1cc20:	48 8d 0c 00          	lea    (%rax,%rax,1),%rcx
   1cc24:	48 8d 05 b5 98 11 00 	lea    0x1198b5(%rip),%rax        # 1364e0 <sCheckVariables>
   1cc2b:	0f b7 04 01          	movzwl (%rcx,%rax,1),%eax
   1cc2f:	66 39 c2             	cmp    %ax,%dx
   1cc32:	75 08                	jne    1cc3c <xAreSemaphoreTasksStillRunning+0x4d>
   1cc34:	48 c7 45 f8 00 00 00 	movq   $0x0,-0x8(%rbp)
   1cc3b:	00 
   1cc3c:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
   1cc40:	48 8d 14 00          	lea    (%rax,%rax,1),%rdx
   1cc44:	48 8d 05 95 98 11 00 	lea    0x119895(%rip),%rax        # 1364e0 <sCheckVariables>
   1cc4b:	0f b7 04 02          	movzwl (%rdx,%rax,1),%eax
   1cc4f:	48 8b 55 f0          	mov    -0x10(%rbp),%rdx
   1cc53:	48 8d 0c 12          	lea    (%rdx,%rdx,1),%rcx
   1cc57:	48 8d 15 92 98 11 00 	lea    0x119892(%rip),%rdx        # 1364f0 <sLastCheckVariables.3454>
   1cc5e:	66 89 04 11          	mov    %ax,(%rcx,%rdx,1)
   1cc62:	48 83 45 f0 01       	addq   $0x1,-0x10(%rbp)
   1cc67:	48 83 7d f0 03       	cmpq   $0x3,-0x10(%rbp)
   1cc6c:	7e 9b                	jle    1cc09 <xAreSemaphoreTasksStillRunning+0x1a>
   1cc6e:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   1cc72:	5d                   	pop    %rbp
   1cc73:	c3                   	retq   

000000000001cc74 <vStartStaticallyAllocatedTasks>:
   1cc74:	f3 0f 1e fa          	endbr64 
   1cc78:	55                   	push   %rbp
   1cc79:	48 89 e5             	mov    %rsp,%rbp
   1cc7c:	48 83 ec 08          	sub    $0x8,%rsp
   1cc80:	48 8d 05 79 98 11 00 	lea    0x119879(%rip),%rax        # 136500 <xCreatorTaskTCBBuffer>
   1cc87:	50                   	push   %rax
   1cc88:	4c 8d 0d 31 99 11 00 	lea    0x119931(%rip),%r9        # 1365c0 <uxCreatorTaskStackBuffer>
   1cc8f:	41 b8 02 00 00 00    	mov    $0x2,%r8d
   1cc95:	b9 00 00 00 00       	mov    $0x0,%ecx
   1cc9a:	ba 8c 00 00 00       	mov    $0x8c,%edx
   1cc9f:	48 8d 35 b2 b4 00 00 	lea    0xb4b2(%rip),%rsi        # 28158 <xInterruptGivePeriod+0x368>
   1cca6:	48 8d 3d 0c 00 00 00 	lea    0xc(%rip),%rdi        # 1ccb9 <prvStaticallyAllocatedCreator>
   1ccad:	e8 27 ef fe ff       	callq  bbd9 <xTaskCreateStatic>
   1ccb2:	48 83 c4 10          	add    $0x10,%rsp
   1ccb6:	90                   	nop
   1ccb7:	c9                   	leaveq 
   1ccb8:	c3                   	retq   

000000000001ccb9 <prvStaticallyAllocatedCreator>:
   1ccb9:	f3 0f 1e fa          	endbr64 
   1ccbd:	55                   	push   %rbp
   1ccbe:	48 89 e5             	mov    %rsp,%rbp
   1ccc1:	48 83 ec 10          	sub    $0x10,%rsp
   1ccc5:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   1ccc9:	e8 2e 09 00 00       	callq  1d5fc <prvCreateAndDeleteStaticallyAllocatedTasks>
   1ccce:	e8 62 02 00 00       	callq  1cf35 <prvCreateAndDeleteStaticallyAllocatedQueues>
   1ccd3:	e8 e7 0a 00 00       	callq  1d7bf <prvGetNextDelayTime>
   1ccd8:	48 89 c7             	mov    %rax,%rdi
   1ccdb:	e8 c2 fa fe ff       	callq  c7a2 <vTaskDelay>
   1cce0:	48 8b 05 41 9d 11 00 	mov    0x119d41(%rip),%rax        # 136a28 <uxCycleCounter>
   1cce7:	48 83 c0 01          	add    $0x1,%rax
   1cceb:	48 89 05 36 9d 11 00 	mov    %rax,0x119d36(%rip)        # 136a28 <uxCycleCounter>
   1ccf2:	e8 35 04 00 00       	callq  1d12c <prvCreateAndDeleteStaticallyAllocatedBinarySemaphores>
   1ccf7:	e8 57 00 00 00       	callq  1cd53 <prvCreateAndDeleteStaticallyAllocatedCountingSemaphores>
   1ccfc:	e8 be 0a 00 00       	callq  1d7bf <prvGetNextDelayTime>
   1cd01:	48 89 c7             	mov    %rax,%rdi
   1cd04:	e8 99 fa fe ff       	callq  c7a2 <vTaskDelay>
   1cd09:	48 8b 05 18 9d 11 00 	mov    0x119d18(%rip),%rax        # 136a28 <uxCycleCounter>
   1cd10:	48 83 c0 01          	add    $0x1,%rax
   1cd14:	48 89 05 0d 9d 11 00 	mov    %rax,0x119d0d(%rip)        # 136a28 <uxCycleCounter>
   1cd1b:	e8 c9 02 00 00       	callq  1cfe9 <prvCreateAndDeleteStaticallyAllocatedMutexes>
   1cd20:	e8 37 01 00 00       	callq  1ce5c <prvCreateAndDeleteStaticallyAllocatedRecursiveMutexes>
   1cd25:	e8 95 0a 00 00       	callq  1d7bf <prvGetNextDelayTime>
   1cd2a:	48 89 c7             	mov    %rax,%rdi
   1cd2d:	e8 70 fa fe ff       	callq  c7a2 <vTaskDelay>
   1cd32:	48 8b 05 ef 9c 11 00 	mov    0x119cef(%rip),%rax        # 136a28 <uxCycleCounter>
   1cd39:	48 83 c0 01          	add    $0x1,%rax
   1cd3d:	48 89 05 e4 9c 11 00 	mov    %rax,0x119ce4(%rip)        # 136a28 <uxCycleCounter>
   1cd44:	e8 05 08 00 00       	callq  1d54e <prvCreateAndDeleteStaticallyAllocatedEventGroups>
   1cd49:	e8 de 05 00 00       	callq  1d32c <prvCreateAndDeleteStaticallyAllocatedTimers>
   1cd4e:	e9 76 ff ff ff       	jmpq   1ccc9 <prvStaticallyAllocatedCreator+0x10>

000000000001cd53 <prvCreateAndDeleteStaticallyAllocatedCountingSemaphores>:
   1cd53:	f3 0f 1e fa          	endbr64 
   1cd57:	55                   	push   %rbp
   1cd58:	48 89 e5             	mov    %rsp,%rbp
   1cd5b:	48 81 ec c0 00 00 00 	sub    $0xc0,%rsp
   1cd62:	64 48 8b 04 25 28 00 	mov    %fs:0x28,%rax
   1cd69:	00 00 
   1cd6b:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
   1cd6f:	31 c0                	xor    %eax,%eax
   1cd71:	48 c7 85 40 ff ff ff 	movq   $0xa,-0xc0(%rbp)
   1cd78:	0a 00 00 00 
   1cd7c:	48 8d 95 50 ff ff ff 	lea    -0xb0(%rbp),%rdx
   1cd83:	48 8b 85 40 ff ff ff 	mov    -0xc0(%rbp),%rax
   1cd8a:	be 00 00 00 00       	mov    $0x0,%esi
   1cd8f:	48 89 c7             	mov    %rax,%rdi
   1cd92:	e8 fb 8e fe ff       	callq  5c92 <xQueueCreateCountingSemaphoreStatic>
   1cd97:	48 89 85 48 ff ff ff 	mov    %rax,-0xb8(%rbp)
   1cd9e:	48 8d 85 50 ff ff ff 	lea    -0xb0(%rbp),%rax
   1cda5:	48 39 85 48 ff ff ff 	cmp    %rax,-0xb8(%rbp)
   1cdac:	74 11                	je     1cdbf <prvCreateAndDeleteStaticallyAllocatedCountingSemaphores+0x6c>
   1cdae:	be 19 01 00 00       	mov    $0x119,%esi
   1cdb3:	48 8d 3d ae b3 00 00 	lea    0xb3ae(%rip),%rdi        # 28168 <xInterruptGivePeriod+0x378>
   1cdba:	e8 4d 6f fe ff       	callq  3d0c <vAssertCalled>
   1cdbf:	48 8b 95 40 ff ff ff 	mov    -0xc0(%rbp),%rdx
   1cdc6:	48 8b 85 48 ff ff ff 	mov    -0xb8(%rbp),%rax
   1cdcd:	48 89 d6             	mov    %rdx,%rsi
   1cdd0:	48 89 c7             	mov    %rax,%rdi
   1cdd3:	e8 3e 0b 00 00       	callq  1d916 <prvSanityCheckCreatedSemaphore>
   1cdd8:	48 8b 85 48 ff ff ff 	mov    -0xb8(%rbp),%rax
   1cddf:	48 89 c7             	mov    %rax,%rdi
   1cde2:	e8 07 b1 fe ff       	callq  7eee <vQueueDelete>
   1cde7:	48 8b 85 40 ff ff ff 	mov    -0xc0(%rbp),%rax
   1cdee:	be 00 00 00 00       	mov    $0x0,%esi
   1cdf3:	48 89 c7             	mov    %rax,%rdi
   1cdf6:	e8 22 8f fe ff       	callq  5d1d <xQueueCreateCountingSemaphore>
   1cdfb:	48 89 85 48 ff ff ff 	mov    %rax,-0xb8(%rbp)
   1ce02:	48 83 bd 48 ff ff ff 	cmpq   $0x0,-0xb8(%rbp)
   1ce09:	00 
   1ce0a:	75 11                	jne    1ce1d <prvCreateAndDeleteStaticallyAllocatedCountingSemaphores+0xca>
   1ce0c:	be 27 01 00 00       	mov    $0x127,%esi
   1ce11:	48 8d 3d 50 b3 00 00 	lea    0xb350(%rip),%rdi        # 28168 <xInterruptGivePeriod+0x378>
   1ce18:	e8 ef 6e fe ff       	callq  3d0c <vAssertCalled>
   1ce1d:	48 8b 95 40 ff ff ff 	mov    -0xc0(%rbp),%rdx
   1ce24:	48 8b 85 48 ff ff ff 	mov    -0xb8(%rbp),%rax
   1ce2b:	48 89 d6             	mov    %rdx,%rsi
   1ce2e:	48 89 c7             	mov    %rax,%rdi
   1ce31:	e8 e0 0a 00 00       	callq  1d916 <prvSanityCheckCreatedSemaphore>
   1ce36:	48 8b 85 48 ff ff ff 	mov    -0xb8(%rbp),%rax
   1ce3d:	48 89 c7             	mov    %rax,%rdi
   1ce40:	e8 a9 b0 fe ff       	callq  7eee <vQueueDelete>
   1ce45:	90                   	nop
   1ce46:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   1ce4a:	64 48 33 04 25 28 00 	xor    %fs:0x28,%rax
   1ce51:	00 00 
   1ce53:	74 05                	je     1ce5a <prvCreateAndDeleteStaticallyAllocatedCountingSemaphores+0x107>
   1ce55:	e8 76 56 fe ff       	callq  24d0 <__stack_chk_fail@plt>
   1ce5a:	c9                   	leaveq 
   1ce5b:	c3                   	retq   

000000000001ce5c <prvCreateAndDeleteStaticallyAllocatedRecursiveMutexes>:
   1ce5c:	f3 0f 1e fa          	endbr64 
   1ce60:	55                   	push   %rbp
   1ce61:	48 89 e5             	mov    %rsp,%rbp
   1ce64:	48 81 ec c0 00 00 00 	sub    $0xc0,%rsp
   1ce6b:	64 48 8b 04 25 28 00 	mov    %fs:0x28,%rax
   1ce72:	00 00 
   1ce74:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
   1ce78:	31 c0                	xor    %eax,%eax
   1ce7a:	48 8d 85 50 ff ff ff 	lea    -0xb0(%rbp),%rax
   1ce81:	48 89 c6             	mov    %rax,%rsi
   1ce84:	bf 04 00 00 00       	mov    $0x4,%edi
   1ce89:	e8 1d 8b fe ff       	callq  59ab <xQueueCreateMutexStatic>
   1ce8e:	48 89 85 48 ff ff ff 	mov    %rax,-0xb8(%rbp)
   1ce95:	48 8d 85 50 ff ff ff 	lea    -0xb0(%rbp),%rax
   1ce9c:	48 39 85 48 ff ff ff 	cmp    %rax,-0xb8(%rbp)
   1cea3:	74 11                	je     1ceb6 <prvCreateAndDeleteStaticallyAllocatedRecursiveMutexes+0x5a>
   1cea5:	be 46 01 00 00       	mov    $0x146,%esi
   1ceaa:	48 8d 3d b7 b2 00 00 	lea    0xb2b7(%rip),%rdi        # 28168 <xInterruptGivePeriod+0x378>
   1ceb1:	e8 56 6e fe ff       	callq  3d0c <vAssertCalled>
   1ceb6:	48 8b 85 48 ff ff ff 	mov    -0xb8(%rbp),%rax
   1cebd:	48 89 c7             	mov    %rax,%rdi
   1cec0:	e8 9d 0d 00 00       	callq  1dc62 <prvSanityCheckCreatedRecursiveMutex>
   1cec5:	48 8b 85 48 ff ff ff 	mov    -0xb8(%rbp),%rax
   1cecc:	48 89 c7             	mov    %rax,%rdi
   1cecf:	e8 1a b0 fe ff       	callq  7eee <vQueueDelete>
   1ced4:	bf 04 00 00 00       	mov    $0x4,%edi
   1ced9:	e8 7f 8a fe ff       	callq  595d <xQueueCreateMutex>
   1cede:	48 89 85 48 ff ff ff 	mov    %rax,-0xb8(%rbp)
   1cee5:	48 83 bd 48 ff ff ff 	cmpq   $0x0,-0xb8(%rbp)
   1ceec:	00 
   1ceed:	75 11                	jne    1cf00 <prvCreateAndDeleteStaticallyAllocatedRecursiveMutexes+0xa4>
   1ceef:	be 55 01 00 00       	mov    $0x155,%esi
   1cef4:	48 8d 3d 6d b2 00 00 	lea    0xb26d(%rip),%rdi        # 28168 <xInterruptGivePeriod+0x378>
   1cefb:	e8 0c 6e fe ff       	callq  3d0c <vAssertCalled>
   1cf00:	48 8b 85 48 ff ff ff 	mov    -0xb8(%rbp),%rax
   1cf07:	48 89 c7             	mov    %rax,%rdi
   1cf0a:	e8 53 0d 00 00       	callq  1dc62 <prvSanityCheckCreatedRecursiveMutex>
   1cf0f:	48 8b 85 48 ff ff ff 	mov    -0xb8(%rbp),%rax
   1cf16:	48 89 c7             	mov    %rax,%rdi
   1cf19:	e8 d0 af fe ff       	callq  7eee <vQueueDelete>
   1cf1e:	90                   	nop
   1cf1f:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   1cf23:	64 48 33 04 25 28 00 	xor    %fs:0x28,%rax
   1cf2a:	00 00 
   1cf2c:	74 05                	je     1cf33 <prvCreateAndDeleteStaticallyAllocatedRecursiveMutexes+0xd7>
   1cf2e:	e8 9d 55 fe ff       	callq  24d0 <__stack_chk_fail@plt>
   1cf33:	c9                   	leaveq 
   1cf34:	c3                   	retq   

000000000001cf35 <prvCreateAndDeleteStaticallyAllocatedQueues>:
   1cf35:	f3 0f 1e fa          	endbr64 
   1cf39:	55                   	push   %rbp
   1cf3a:	48 89 e5             	mov    %rsp,%rbp
   1cf3d:	48 83 ec 10          	sub    $0x10,%rsp
   1cf41:	41 b8 00 00 00 00    	mov    $0x0,%r8d
   1cf47:	48 8d 0d 32 9b 11 00 	lea    0x119b32(%rip),%rcx        # 136a80 <xStaticQueue.3084>
   1cf4e:	48 8d 15 eb 9a 11 00 	lea    0x119aeb(%rip),%rdx        # 136a40 <ucQueueStorageArea.3085>
   1cf55:	be 08 00 00 00       	mov    $0x8,%esi
   1cf5a:	bf 05 00 00 00       	mov    $0x5,%edi
   1cf5f:	e8 a4 85 fe ff       	callq  5508 <xQueueGenericCreateStatic>
   1cf64:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
   1cf68:	48 8d 05 11 9b 11 00 	lea    0x119b11(%rip),%rax        # 136a80 <xStaticQueue.3084>
   1cf6f:	48 39 45 f8          	cmp    %rax,-0x8(%rbp)
   1cf73:	74 11                	je     1cf86 <prvCreateAndDeleteStaticallyAllocatedQueues+0x51>
   1cf75:	be 7e 01 00 00       	mov    $0x17e,%esi
   1cf7a:	48 8d 3d e7 b1 00 00 	lea    0xb1e7(%rip),%rdi        # 28168 <xInterruptGivePeriod+0x378>
   1cf81:	e8 86 6d fe ff       	callq  3d0c <vAssertCalled>
   1cf86:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   1cf8a:	48 89 c7             	mov    %rax,%rdi
   1cf8d:	e8 3b 0b 00 00       	callq  1dacd <prvSanityCheckCreatedQueue>
   1cf92:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   1cf96:	48 89 c7             	mov    %rax,%rdi
   1cf99:	e8 50 af fe ff       	callq  7eee <vQueueDelete>
   1cf9e:	ba 00 00 00 00       	mov    $0x0,%edx
   1cfa3:	be 08 00 00 00       	mov    $0x8,%esi
   1cfa8:	bf 05 00 00 00       	mov    $0x5,%edi
   1cfad:	e8 41 86 fe ff       	callq  55f3 <xQueueGenericCreate>
   1cfb2:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
   1cfb6:	48 83 7d f8 00       	cmpq   $0x0,-0x8(%rbp)
   1cfbb:	75 11                	jne    1cfce <prvCreateAndDeleteStaticallyAllocatedQueues+0x99>
   1cfbd:	be 90 01 00 00       	mov    $0x190,%esi
   1cfc2:	48 8d 3d 9f b1 00 00 	lea    0xb19f(%rip),%rdi        # 28168 <xInterruptGivePeriod+0x378>
   1cfc9:	e8 3e 6d fe ff       	callq  3d0c <vAssertCalled>
   1cfce:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   1cfd2:	48 89 c7             	mov    %rax,%rdi
   1cfd5:	e8 f3 0a 00 00       	callq  1dacd <prvSanityCheckCreatedQueue>
   1cfda:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   1cfde:	48 89 c7             	mov    %rax,%rdi
   1cfe1:	e8 08 af fe ff       	callq  7eee <vQueueDelete>
   1cfe6:	90                   	nop
   1cfe7:	c9                   	leaveq 
   1cfe8:	c3                   	retq   

000000000001cfe9 <prvCreateAndDeleteStaticallyAllocatedMutexes>:
   1cfe9:	f3 0f 1e fa          	endbr64 
   1cfed:	55                   	push   %rbp
   1cfee:	48 89 e5             	mov    %rsp,%rbp
   1cff1:	48 81 ec c0 00 00 00 	sub    $0xc0,%rsp
   1cff8:	64 48 8b 04 25 28 00 	mov    %fs:0x28,%rax
   1cfff:	00 00 
   1d001:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
   1d005:	31 c0                	xor    %eax,%eax
   1d007:	48 8d 85 50 ff ff ff 	lea    -0xb0(%rbp),%rax
   1d00e:	48 89 c6             	mov    %rax,%rsi
   1d011:	bf 01 00 00 00       	mov    $0x1,%edi
   1d016:	e8 90 89 fe ff       	callq  59ab <xQueueCreateMutexStatic>
   1d01b:	48 89 85 40 ff ff ff 	mov    %rax,-0xc0(%rbp)
   1d022:	48 8d 85 50 ff ff ff 	lea    -0xb0(%rbp),%rax
   1d029:	48 39 85 40 ff ff ff 	cmp    %rax,-0xc0(%rbp)
   1d030:	74 11                	je     1d043 <prvCreateAndDeleteStaticallyAllocatedMutexes+0x5a>
   1d032:	be b4 01 00 00       	mov    $0x1b4,%esi
   1d037:	48 8d 3d 2a b1 00 00 	lea    0xb12a(%rip),%rdi        # 28168 <xInterruptGivePeriod+0x378>
   1d03e:	e8 c9 6c fe ff       	callq  3d0c <vAssertCalled>
   1d043:	48 8b 85 40 ff ff ff 	mov    -0xc0(%rbp),%rax
   1d04a:	be 00 00 00 00       	mov    $0x0,%esi
   1d04f:	48 89 c7             	mov    %rax,%rdi
   1d052:	e8 1d 9f fe ff       	callq  6f74 <xQueueSemaphoreTake>
   1d057:	48 89 85 48 ff ff ff 	mov    %rax,-0xb8(%rbp)
   1d05e:	48 83 bd 48 ff ff ff 	cmpq   $0x1,-0xb8(%rbp)
   1d065:	01 
   1d066:	74 0b                	je     1d073 <prvCreateAndDeleteStaticallyAllocatedMutexes+0x8a>
   1d068:	48 c7 05 bd 99 11 00 	movq   $0x1,0x1199bd(%rip)        # 136a30 <xErrorOccurred>
   1d06f:	01 00 00 00 
   1d073:	48 8b 85 40 ff ff ff 	mov    -0xc0(%rbp),%rax
   1d07a:	be 01 00 00 00       	mov    $0x1,%esi
   1d07f:	48 89 c7             	mov    %rax,%rdi
   1d082:	e8 8f 08 00 00       	callq  1d916 <prvSanityCheckCreatedSemaphore>
   1d087:	48 8b 85 40 ff ff ff 	mov    -0xc0(%rbp),%rax
   1d08e:	48 89 c7             	mov    %rax,%rdi
   1d091:	e8 58 ae fe ff       	callq  7eee <vQueueDelete>
   1d096:	bf 01 00 00 00       	mov    $0x1,%edi
   1d09b:	e8 bd 88 fe ff       	callq  595d <xQueueCreateMutex>
   1d0a0:	48 89 85 40 ff ff ff 	mov    %rax,-0xc0(%rbp)
   1d0a7:	48 83 bd 40 ff ff ff 	cmpq   $0x0,-0xc0(%rbp)
   1d0ae:	00 
   1d0af:	75 11                	jne    1d0c2 <prvCreateAndDeleteStaticallyAllocatedMutexes+0xd9>
   1d0b1:	be ce 01 00 00       	mov    $0x1ce,%esi
   1d0b6:	48 8d 3d ab b0 00 00 	lea    0xb0ab(%rip),%rdi        # 28168 <xInterruptGivePeriod+0x378>
   1d0bd:	e8 4a 6c fe ff       	callq  3d0c <vAssertCalled>
   1d0c2:	48 8b 85 40 ff ff ff 	mov    -0xc0(%rbp),%rax
   1d0c9:	be 00 00 00 00       	mov    $0x0,%esi
   1d0ce:	48 89 c7             	mov    %rax,%rdi
   1d0d1:	e8 9e 9e fe ff       	callq  6f74 <xQueueSemaphoreTake>
   1d0d6:	48 89 85 48 ff ff ff 	mov    %rax,-0xb8(%rbp)
   1d0dd:	48 83 bd 48 ff ff ff 	cmpq   $0x1,-0xb8(%rbp)
   1d0e4:	01 
   1d0e5:	74 0b                	je     1d0f2 <prvCreateAndDeleteStaticallyAllocatedMutexes+0x109>
   1d0e7:	48 c7 05 3e 99 11 00 	movq   $0x1,0x11993e(%rip)        # 136a30 <xErrorOccurred>
   1d0ee:	01 00 00 00 
   1d0f2:	48 8b 85 40 ff ff ff 	mov    -0xc0(%rbp),%rax
   1d0f9:	be 01 00 00 00       	mov    $0x1,%esi
   1d0fe:	48 89 c7             	mov    %rax,%rdi
   1d101:	e8 10 08 00 00       	callq  1d916 <prvSanityCheckCreatedSemaphore>
   1d106:	48 8b 85 40 ff ff ff 	mov    -0xc0(%rbp),%rax
   1d10d:	48 89 c7             	mov    %rax,%rdi
   1d110:	e8 d9 ad fe ff       	callq  7eee <vQueueDelete>
   1d115:	90                   	nop
   1d116:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   1d11a:	64 48 33 04 25 28 00 	xor    %fs:0x28,%rax
   1d121:	00 00 
   1d123:	74 05                	je     1d12a <prvCreateAndDeleteStaticallyAllocatedMutexes+0x141>
   1d125:	e8 a6 53 fe ff       	callq  24d0 <__stack_chk_fail@plt>
   1d12a:	c9                   	leaveq 
   1d12b:	c3                   	retq   

000000000001d12c <prvCreateAndDeleteStaticallyAllocatedBinarySemaphores>:
   1d12c:	f3 0f 1e fa          	endbr64 
   1d130:	55                   	push   %rbp
   1d131:	48 89 e5             	mov    %rsp,%rbp
   1d134:	48 81 ec c0 00 00 00 	sub    $0xc0,%rsp
   1d13b:	64 48 8b 04 25 28 00 	mov    %fs:0x28,%rax
   1d142:	00 00 
   1d144:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
   1d148:	31 c0                	xor    %eax,%eax
   1d14a:	48 8d 85 50 ff ff ff 	lea    -0xb0(%rbp),%rax
   1d151:	41 b8 03 00 00 00    	mov    $0x3,%r8d
   1d157:	48 89 c1             	mov    %rax,%rcx
   1d15a:	ba 00 00 00 00       	mov    $0x0,%edx
   1d15f:	be 00 00 00 00       	mov    $0x0,%esi
   1d164:	bf 01 00 00 00       	mov    $0x1,%edi
   1d169:	e8 9a 83 fe ff       	callq  5508 <xQueueGenericCreateStatic>
   1d16e:	48 89 85 48 ff ff ff 	mov    %rax,-0xb8(%rbp)
   1d175:	48 8d 85 50 ff ff ff 	lea    -0xb0(%rbp),%rax
   1d17c:	48 39 85 48 ff ff ff 	cmp    %rax,-0xb8(%rbp)
   1d183:	74 11                	je     1d196 <prvCreateAndDeleteStaticallyAllocatedBinarySemaphores+0x6a>
   1d185:	be fc 01 00 00       	mov    $0x1fc,%esi
   1d18a:	48 8d 3d d7 af 00 00 	lea    0xafd7(%rip),%rdi        # 28168 <xInterruptGivePeriod+0x378>
   1d191:	e8 76 6b fe ff       	callq  3d0c <vAssertCalled>
   1d196:	48 8b 85 48 ff ff ff 	mov    -0xb8(%rbp),%rax
   1d19d:	be 01 00 00 00       	mov    $0x1,%esi
   1d1a2:	48 89 c7             	mov    %rax,%rdi
   1d1a5:	e8 6c 07 00 00       	callq  1d916 <prvSanityCheckCreatedSemaphore>
   1d1aa:	48 8b 85 48 ff ff ff 	mov    -0xb8(%rbp),%rax
   1d1b1:	48 89 c7             	mov    %rax,%rdi
   1d1b4:	e8 35 ad fe ff       	callq  7eee <vQueueDelete>
   1d1b9:	ba 03 00 00 00       	mov    $0x3,%edx
   1d1be:	be 00 00 00 00       	mov    $0x0,%esi
   1d1c3:	bf 01 00 00 00       	mov    $0x1,%edi
   1d1c8:	e8 26 84 fe ff       	callq  55f3 <xQueueGenericCreate>
   1d1cd:	48 89 85 48 ff ff ff 	mov    %rax,-0xb8(%rbp)
   1d1d4:	48 83 bd 48 ff ff ff 	cmpq   $0x0,-0xb8(%rbp)
   1d1db:	00 
   1d1dc:	75 11                	jne    1d1ef <prvCreateAndDeleteStaticallyAllocatedBinarySemaphores+0xc3>
   1d1de:	be 0a 02 00 00       	mov    $0x20a,%esi
   1d1e3:	48 8d 3d 7e af 00 00 	lea    0xaf7e(%rip),%rdi        # 28168 <xInterruptGivePeriod+0x378>
   1d1ea:	e8 1d 6b fe ff       	callq  3d0c <vAssertCalled>
   1d1ef:	48 8b 85 48 ff ff ff 	mov    -0xb8(%rbp),%rax
   1d1f6:	be 01 00 00 00       	mov    $0x1,%esi
   1d1fb:	48 89 c7             	mov    %rax,%rdi
   1d1fe:	e8 13 07 00 00       	callq  1d916 <prvSanityCheckCreatedSemaphore>
   1d203:	48 8b 85 48 ff ff ff 	mov    -0xb8(%rbp),%rax
   1d20a:	48 89 c7             	mov    %rax,%rdi
   1d20d:	e8 dc ac fe ff       	callq  7eee <vQueueDelete>
   1d212:	ba 03 00 00 00       	mov    $0x3,%edx
   1d217:	be 00 00 00 00       	mov    $0x0,%esi
   1d21c:	bf 01 00 00 00       	mov    $0x1,%edi
   1d221:	e8 cd 83 fe ff       	callq  55f3 <xQueueGenericCreate>
   1d226:	48 89 85 48 ff ff ff 	mov    %rax,-0xb8(%rbp)
   1d22d:	48 83 bd 48 ff ff ff 	cmpq   $0x0,-0xb8(%rbp)
   1d234:	00 
   1d235:	74 1e                	je     1d255 <prvCreateAndDeleteStaticallyAllocatedBinarySemaphores+0x129>
   1d237:	48 8b 85 48 ff ff ff 	mov    -0xb8(%rbp),%rax
   1d23e:	b9 00 00 00 00       	mov    $0x0,%ecx
   1d243:	ba 00 00 00 00       	mov    $0x0,%edx
   1d248:	be 00 00 00 00       	mov    $0x0,%esi
   1d24d:	48 89 c7             	mov    %rax,%rdi
   1d250:	e8 42 8b fe ff       	callq  5d97 <xQueueGenericSend>
   1d255:	48 8b 85 48 ff ff ff 	mov    -0xb8(%rbp),%rax
   1d25c:	be 00 00 00 00       	mov    $0x0,%esi
   1d261:	48 89 c7             	mov    %rax,%rdi
   1d264:	e8 0b 9d fe ff       	callq  6f74 <xQueueSemaphoreTake>
   1d269:	48 85 c0             	test   %rax,%rax
   1d26c:	75 0b                	jne    1d279 <prvCreateAndDeleteStaticallyAllocatedBinarySemaphores+0x14d>
   1d26e:	48 c7 05 b7 97 11 00 	movq   $0x1,0x1197b7(%rip)        # 136a30 <xErrorOccurred>
   1d275:	01 00 00 00 
   1d279:	48 8b 85 48 ff ff ff 	mov    -0xb8(%rbp),%rax
   1d280:	be 01 00 00 00       	mov    $0x1,%esi
   1d285:	48 89 c7             	mov    %rax,%rdi
   1d288:	e8 89 06 00 00       	callq  1d916 <prvSanityCheckCreatedSemaphore>
   1d28d:	48 8b 85 48 ff ff ff 	mov    -0xb8(%rbp),%rax
   1d294:	48 89 c7             	mov    %rax,%rdi
   1d297:	e8 52 ac fe ff       	callq  7eee <vQueueDelete>
   1d29c:	90                   	nop
   1d29d:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   1d2a1:	64 48 33 04 25 28 00 	xor    %fs:0x28,%rax
   1d2a8:	00 00 
   1d2aa:	74 05                	je     1d2b1 <prvCreateAndDeleteStaticallyAllocatedBinarySemaphores+0x185>
   1d2ac:	e8 1f 52 fe ff       	callq  24d0 <__stack_chk_fail@plt>
   1d2b1:	c9                   	leaveq 
   1d2b2:	c3                   	retq   

000000000001d2b3 <prvTimerCallback>:
   1d2b3:	f3 0f 1e fa          	endbr64 
   1d2b7:	55                   	push   %rbp
   1d2b8:	48 89 e5             	mov    %rsp,%rbp
   1d2bb:	48 83 ec 20          	sub    $0x20,%rsp
   1d2bf:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
   1d2c3:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
   1d2c7:	48 89 c7             	mov    %rax,%rdi
   1d2ca:	e8 d2 50 ff ff       	callq  123a1 <pvTimerGetTimerID>
   1d2cf:	48 89 45 f0          	mov    %rax,-0x10(%rbp)
   1d2d3:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
   1d2d7:	48 8b 00             	mov    (%rax),%rax
   1d2da:	48 8d 50 01          	lea    0x1(%rax),%rdx
   1d2de:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
   1d2e2:	48 89 10             	mov    %rdx,(%rax)
   1d2e5:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
   1d2e9:	48 8b 00             	mov    (%rax),%rax
   1d2ec:	48 83 f8 05          	cmp    $0x5,%rax
   1d2f0:	75 37                	jne    1d329 <prvTimerCallback+0x76>
   1d2f2:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
   1d2f6:	41 b8 00 00 00 00    	mov    $0x0,%r8d
   1d2fc:	b9 00 00 00 00       	mov    $0x0,%ecx
   1d301:	ba 00 00 00 00       	mov    $0x0,%edx
   1d306:	be 03 00 00 00       	mov    $0x3,%esi
   1d30b:	48 89 c7             	mov    %rax,%rdi
   1d30e:	e8 22 43 ff ff       	callq  11635 <xTimerGenericCommand>
   1d313:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
   1d317:	48 83 7d f8 01       	cmpq   $0x1,-0x8(%rbp)
   1d31c:	74 0b                	je     1d329 <prvTimerCallback+0x76>
   1d31e:	48 c7 05 07 97 11 00 	movq   $0x1,0x119707(%rip)        # 136a30 <xErrorOccurred>
   1d325:	01 00 00 00 
   1d329:	90                   	nop
   1d32a:	c9                   	leaveq 
   1d32b:	c3                   	retq   

000000000001d32c <prvCreateAndDeleteStaticallyAllocatedTimers>:
   1d32c:	f3 0f 1e fa          	endbr64 
   1d330:	55                   	push   %rbp
   1d331:	48 89 e5             	mov    %rsp,%rbp
   1d334:	48 83 c4 80          	add    $0xffffffffffffff80,%rsp
   1d338:	64 48 8b 04 25 28 00 	mov    %fs:0x28,%rax
   1d33f:	00 00 
   1d341:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
   1d345:	31 c0                	xor    %eax,%eax
   1d347:	48 c7 45 88 14 00 00 	movq   $0x14,-0x78(%rbp)
   1d34e:	00 
   1d34f:	48 8d 4d a0          	lea    -0x60(%rbp),%rcx
   1d353:	48 8d 55 80          	lea    -0x80(%rbp),%rdx
   1d357:	48 8b 45 88          	mov    -0x78(%rbp),%rax
   1d35b:	49 89 c9             	mov    %rcx,%r9
   1d35e:	4c 8d 05 4e ff ff ff 	lea    -0xb2(%rip),%r8        # 1d2b3 <prvTimerCallback>
   1d365:	48 89 d1             	mov    %rdx,%rcx
   1d368:	ba 01 00 00 00       	mov    $0x1,%edx
   1d36d:	48 89 c6             	mov    %rax,%rsi
   1d370:	48 8d 3d 3e ae 00 00 	lea    0xae3e(%rip),%rdi        # 281b5 <xInterruptGivePeriod+0x3c5>
   1d377:	e8 b2 40 ff ff       	callq  1142e <xTimerCreateStatic>
   1d37c:	48 89 45 90          	mov    %rax,-0x70(%rbp)
   1d380:	48 8d 45 a0          	lea    -0x60(%rbp),%rax
   1d384:	48 39 45 90          	cmp    %rax,-0x70(%rbp)
   1d388:	74 11                	je     1d39b <prvCreateAndDeleteStaticallyAllocatedTimers+0x6f>
   1d38a:	be 60 02 00 00       	mov    $0x260,%esi
   1d38f:	48 8d 3d d2 ad 00 00 	lea    0xadd2(%rip),%rdi        # 28168 <xInterruptGivePeriod+0x378>
   1d396:	e8 71 69 fe ff       	callq  3d0c <vAssertCalled>
   1d39b:	48 c7 45 80 00 00 00 	movq   $0x0,-0x80(%rbp)
   1d3a2:	00 
   1d3a3:	e8 f0 04 ff ff       	callq  d898 <xTaskGetTickCount>
   1d3a8:	48 89 c2             	mov    %rax,%rdx
   1d3ab:	48 8b 45 90          	mov    -0x70(%rbp),%rax
   1d3af:	41 b8 00 00 00 00    	mov    $0x0,%r8d
   1d3b5:	b9 00 00 00 00       	mov    $0x0,%ecx
   1d3ba:	be 01 00 00 00       	mov    $0x1,%esi
   1d3bf:	48 89 c7             	mov    %rax,%rdi
   1d3c2:	e8 6e 42 ff ff       	callq  11635 <xTimerGenericCommand>
   1d3c7:	48 89 45 98          	mov    %rax,-0x68(%rbp)
   1d3cb:	48 83 7d 98 01       	cmpq   $0x1,-0x68(%rbp)
   1d3d0:	74 0b                	je     1d3dd <prvCreateAndDeleteStaticallyAllocatedTimers+0xb1>
   1d3d2:	48 c7 05 53 96 11 00 	movq   $0x1,0x119653(%rip)        # 136a30 <xErrorOccurred>
   1d3d9:	01 00 00 00 
   1d3dd:	48 8b 55 88          	mov    -0x78(%rbp),%rdx
   1d3e1:	48 89 d0             	mov    %rdx,%rax
   1d3e4:	48 c1 e0 02          	shl    $0x2,%rax
   1d3e8:	48 01 d0             	add    %rdx,%rax
   1d3eb:	48 89 c7             	mov    %rax,%rdi
   1d3ee:	e8 af f3 fe ff       	callq  c7a2 <vTaskDelay>
   1d3f3:	48 8b 45 80          	mov    -0x80(%rbp),%rax
   1d3f7:	48 83 f8 05          	cmp    $0x5,%rax
   1d3fb:	74 0b                	je     1d408 <prvCreateAndDeleteStaticallyAllocatedTimers+0xdc>
   1d3fd:	48 c7 05 28 96 11 00 	movq   $0x1,0x119628(%rip)        # 136a30 <xErrorOccurred>
   1d404:	01 00 00 00 
   1d408:	48 8b 45 90          	mov    -0x70(%rbp),%rax
   1d40c:	41 b8 00 00 00 00    	mov    $0x0,%r8d
   1d412:	b9 00 00 00 00       	mov    $0x0,%ecx
   1d417:	ba 00 00 00 00       	mov    $0x0,%edx
   1d41c:	be 05 00 00 00       	mov    $0x5,%esi
   1d421:	48 89 c7             	mov    %rax,%rdi
   1d424:	e8 0c 42 ff ff       	callq  11635 <xTimerGenericCommand>
   1d429:	48 89 45 98          	mov    %rax,-0x68(%rbp)
   1d42d:	48 83 7d 98 01       	cmpq   $0x1,-0x68(%rbp)
   1d432:	74 0b                	je     1d43f <prvCreateAndDeleteStaticallyAllocatedTimers+0x113>
   1d434:	48 c7 05 f1 95 11 00 	movq   $0x1,0x1195f1(%rip)        # 136a30 <xErrorOccurred>
   1d43b:	01 00 00 00 
   1d43f:	48 8b 05 e2 95 11 00 	mov    0x1195e2(%rip),%rax        # 136a28 <uxCycleCounter>
   1d446:	48 83 c0 01          	add    $0x1,%rax
   1d44a:	48 89 05 d7 95 11 00 	mov    %rax,0x1195d7(%rip)        # 136a28 <uxCycleCounter>
   1d451:	48 8d 55 80          	lea    -0x80(%rbp),%rdx
   1d455:	48 8b 45 88          	mov    -0x78(%rbp),%rax
   1d459:	4c 8d 05 53 fe ff ff 	lea    -0x1ad(%rip),%r8        # 1d2b3 <prvTimerCallback>
   1d460:	48 89 d1             	mov    %rdx,%rcx
   1d463:	ba 01 00 00 00       	mov    $0x1,%edx
   1d468:	48 89 c6             	mov    %rax,%rsi
   1d46b:	48 8d 3d 43 ad 00 00 	lea    0xad43(%rip),%rdi        # 281b5 <xInterruptGivePeriod+0x3c5>
   1d472:	e8 4e 3f ff ff       	callq  113c5 <xTimerCreate>
   1d477:	48 89 45 90          	mov    %rax,-0x70(%rbp)
   1d47b:	48 83 7d 90 00       	cmpq   $0x0,-0x70(%rbp)
   1d480:	75 11                	jne    1d493 <prvCreateAndDeleteStaticallyAllocatedTimers+0x167>
   1d482:	be 8f 02 00 00       	mov    $0x28f,%esi
   1d487:	48 8d 3d da ac 00 00 	lea    0xacda(%rip),%rdi        # 28168 <xInterruptGivePeriod+0x378>
   1d48e:	e8 79 68 fe ff       	callq  3d0c <vAssertCalled>
   1d493:	48 c7 45 80 00 00 00 	movq   $0x0,-0x80(%rbp)
   1d49a:	00 
   1d49b:	e8 f8 03 ff ff       	callq  d898 <xTaskGetTickCount>
   1d4a0:	48 89 c2             	mov    %rax,%rdx
   1d4a3:	48 8b 45 90          	mov    -0x70(%rbp),%rax
   1d4a7:	41 b8 00 00 00 00    	mov    $0x0,%r8d
   1d4ad:	b9 00 00 00 00       	mov    $0x0,%ecx
   1d4b2:	be 01 00 00 00       	mov    $0x1,%esi
   1d4b7:	48 89 c7             	mov    %rax,%rdi
   1d4ba:	e8 76 41 ff ff       	callq  11635 <xTimerGenericCommand>
   1d4bf:	48 89 45 98          	mov    %rax,-0x68(%rbp)
   1d4c3:	48 83 7d 98 01       	cmpq   $0x1,-0x68(%rbp)
   1d4c8:	74 0b                	je     1d4d5 <prvCreateAndDeleteStaticallyAllocatedTimers+0x1a9>
   1d4ca:	48 c7 05 5b 95 11 00 	movq   $0x1,0x11955b(%rip)        # 136a30 <xErrorOccurred>
   1d4d1:	01 00 00 00 
   1d4d5:	48 8b 55 88          	mov    -0x78(%rbp),%rdx
   1d4d9:	48 89 d0             	mov    %rdx,%rax
   1d4dc:	48 c1 e0 02          	shl    $0x2,%rax
   1d4e0:	48 01 d0             	add    %rdx,%rax
   1d4e3:	48 89 c7             	mov    %rax,%rdi
   1d4e6:	e8 b7 f2 fe ff       	callq  c7a2 <vTaskDelay>
   1d4eb:	48 8b 45 80          	mov    -0x80(%rbp),%rax
   1d4ef:	48 83 f8 05          	cmp    $0x5,%rax
   1d4f3:	74 0b                	je     1d500 <prvCreateAndDeleteStaticallyAllocatedTimers+0x1d4>
   1d4f5:	48 c7 05 30 95 11 00 	movq   $0x1,0x119530(%rip)        # 136a30 <xErrorOccurred>
   1d4fc:	01 00 00 00 
   1d500:	48 8b 45 90          	mov    -0x70(%rbp),%rax
   1d504:	41 b8 00 00 00 00    	mov    $0x0,%r8d
   1d50a:	b9 00 00 00 00       	mov    $0x0,%ecx
   1d50f:	ba 00 00 00 00       	mov    $0x0,%edx
   1d514:	be 05 00 00 00       	mov    $0x5,%esi
   1d519:	48 89 c7             	mov    %rax,%rdi
   1d51c:	e8 14 41 ff ff       	callq  11635 <xTimerGenericCommand>
   1d521:	48 89 45 98          	mov    %rax,-0x68(%rbp)
   1d525:	48 83 7d 98 01       	cmpq   $0x1,-0x68(%rbp)
   1d52a:	74 0b                	je     1d537 <prvCreateAndDeleteStaticallyAllocatedTimers+0x20b>
   1d52c:	48 c7 05 f9 94 11 00 	movq   $0x1,0x1194f9(%rip)        # 136a30 <xErrorOccurred>
   1d533:	01 00 00 00 
   1d537:	90                   	nop
   1d538:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   1d53c:	64 48 33 04 25 28 00 	xor    %fs:0x28,%rax
   1d543:	00 00 
   1d545:	74 05                	je     1d54c <prvCreateAndDeleteStaticallyAllocatedTimers+0x220>
   1d547:	e8 84 4f fe ff       	callq  24d0 <__stack_chk_fail@plt>
   1d54c:	c9                   	leaveq 
   1d54d:	c3                   	retq   

000000000001d54e <prvCreateAndDeleteStaticallyAllocatedEventGroups>:
   1d54e:	f3 0f 1e fa          	endbr64 
   1d552:	55                   	push   %rbp
   1d553:	48 89 e5             	mov    %rsp,%rbp
   1d556:	48 83 ec 60          	sub    $0x60,%rsp
   1d55a:	64 48 8b 04 25 28 00 	mov    %fs:0x28,%rax
   1d561:	00 00 
   1d563:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
   1d567:	31 c0                	xor    %eax,%eax
   1d569:	48 8d 45 b0          	lea    -0x50(%rbp),%rax
   1d56d:	48 89 c7             	mov    %rax,%rdi
   1d570:	e8 8e d6 fe ff       	callq  ac03 <xEventGroupCreateStatic>
   1d575:	48 89 45 a8          	mov    %rax,-0x58(%rbp)
   1d579:	48 8d 45 b0          	lea    -0x50(%rbp),%rax
   1d57d:	48 39 45 a8          	cmp    %rax,-0x58(%rbp)
   1d581:	74 11                	je     1d594 <prvCreateAndDeleteStaticallyAllocatedEventGroups+0x46>
   1d583:	be c0 02 00 00       	mov    $0x2c0,%esi
   1d588:	48 8d 3d d9 ab 00 00 	lea    0xabd9(%rip),%rdi        # 28168 <xInterruptGivePeriod+0x378>
   1d58f:	e8 78 67 fe ff       	callq  3d0c <vAssertCalled>
   1d594:	48 8b 45 a8          	mov    -0x58(%rbp),%rax
   1d598:	48 89 c7             	mov    %rax,%rdi
   1d59b:	e8 71 02 00 00       	callq  1d811 <prvSanityCheckCreatedEventGroup>
   1d5a0:	48 8b 45 a8          	mov    -0x58(%rbp),%rax
   1d5a4:	48 89 c7             	mov    %rax,%rdi
   1d5a7:	e8 37 e3 fe ff       	callq  b8e3 <vEventGroupDelete>
   1d5ac:	e8 c8 d7 fe ff       	callq  ad79 <xEventGroupCreate>
   1d5b1:	48 89 45 a8          	mov    %rax,-0x58(%rbp)
   1d5b5:	48 83 7d a8 00       	cmpq   $0x0,-0x58(%rbp)
   1d5ba:	75 11                	jne    1d5cd <prvCreateAndDeleteStaticallyAllocatedEventGroups+0x7f>
   1d5bc:	be cf 02 00 00       	mov    $0x2cf,%esi
   1d5c1:	48 8d 3d a0 ab 00 00 	lea    0xaba0(%rip),%rdi        # 28168 <xInterruptGivePeriod+0x378>
   1d5c8:	e8 3f 67 fe ff       	callq  3d0c <vAssertCalled>
   1d5cd:	48 8b 45 a8          	mov    -0x58(%rbp),%rax
   1d5d1:	48 89 c7             	mov    %rax,%rdi
   1d5d4:	e8 38 02 00 00       	callq  1d811 <prvSanityCheckCreatedEventGroup>
   1d5d9:	48 8b 45 a8          	mov    -0x58(%rbp),%rax
   1d5dd:	48 89 c7             	mov    %rax,%rdi
   1d5e0:	e8 fe e2 fe ff       	callq  b8e3 <vEventGroupDelete>
   1d5e5:	90                   	nop
   1d5e6:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   1d5ea:	64 48 33 04 25 28 00 	xor    %fs:0x28,%rax
   1d5f1:	00 00 
   1d5f3:	74 05                	je     1d5fa <prvCreateAndDeleteStaticallyAllocatedEventGroups+0xac>
   1d5f5:	e8 d6 4e fe ff       	callq  24d0 <__stack_chk_fail@plt>
   1d5fa:	c9                   	leaveq 
   1d5fb:	c3                   	retq   

000000000001d5fc <prvCreateAndDeleteStaticallyAllocatedTasks>:
   1d5fc:	f3 0f 1e fa          	endbr64 
   1d600:	55                   	push   %rbp
   1d601:	48 89 e5             	mov    %rsp,%rbp
   1d604:	48 81 ec d0 00 00 00 	sub    $0xd0,%rsp
   1d60b:	64 48 8b 04 25 28 00 	mov    %fs:0x28,%rax
   1d612:	00 00 
   1d614:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
   1d618:	31 c0                	xor    %eax,%eax
   1d61a:	bf 00 00 00 00       	mov    $0x0,%edi
   1d61f:	e8 85 f3 fe ff       	callq  c9a9 <uxTaskPriorityGet>
   1d624:	48 8d 50 01          	lea    0x1(%rax),%rdx
   1d628:	48 83 ec 08          	sub    $0x8,%rsp
   1d62c:	48 8d 85 40 ff ff ff 	lea    -0xc0(%rbp),%rax
   1d633:	50                   	push   %rax
   1d634:	4c 8d 0d 05 95 11 00 	lea    0x119505(%rip),%r9        # 136b40 <uxStackBuffer.3120>
   1d63b:	49 89 d0             	mov    %rdx,%r8
   1d63e:	b9 00 00 00 00       	mov    $0x0,%ecx
   1d643:	ba 46 00 00 00       	mov    $0x46,%edx
   1d648:	48 8d 35 69 ab 00 00 	lea    0xab69(%rip),%rsi        # 281b8 <xInterruptGivePeriod+0x3c8>
   1d64f:	48 8d 3d 0d 01 00 00 	lea    0x10d(%rip),%rdi        # 1d763 <prvStaticallyAllocatedTask>
   1d656:	e8 7e e5 fe ff       	callq  bbd9 <xTaskCreateStatic>
   1d65b:	48 83 c4 10          	add    $0x10,%rsp
   1d65f:	48 89 85 30 ff ff ff 	mov    %rax,-0xd0(%rbp)
   1d666:	48 8b 85 30 ff ff ff 	mov    -0xd0(%rbp),%rax
   1d66d:	48 85 c0             	test   %rax,%rax
   1d670:	75 0d                	jne    1d67f <prvCreateAndDeleteStaticallyAllocatedTasks+0x83>
   1d672:	48 c7 05 b3 93 11 00 	movq   $0x1,0x1193b3(%rip)        # 136a30 <xErrorOccurred>
   1d679:	01 00 00 00 
   1d67d:	eb 30                	jmp    1d6af <prvCreateAndDeleteStaticallyAllocatedTasks+0xb3>
   1d67f:	48 8b 85 30 ff ff ff 	mov    -0xd0(%rbp),%rax
   1d686:	48 89 c7             	mov    %rax,%rdi
   1d689:	e8 fa f1 fe ff       	callq  c888 <eTaskGetState>
   1d68e:	83 f8 03             	cmp    $0x3,%eax
   1d691:	74 0d                	je     1d6a0 <prvCreateAndDeleteStaticallyAllocatedTasks+0xa4>
   1d693:	48 c7 05 92 93 11 00 	movq   $0x1,0x119392(%rip)        # 136a30 <xErrorOccurred>
   1d69a:	01 00 00 00 
   1d69e:	eb 0f                	jmp    1d6af <prvCreateAndDeleteStaticallyAllocatedTasks+0xb3>
   1d6a0:	48 8b 85 30 ff ff ff 	mov    -0xd0(%rbp),%rax
   1d6a7:	48 89 c7             	mov    %rax,%rdi
   1d6aa:	e8 22 ec fe ff       	callq  c2d1 <vTaskDelete>
   1d6af:	bf 00 00 00 00       	mov    $0x0,%edi
   1d6b4:	e8 f0 f2 fe ff       	callq  c9a9 <uxTaskPriorityGet>
   1d6b9:	48 8d 50 01          	lea    0x1(%rax),%rdx
   1d6bd:	48 8d 85 30 ff ff ff 	lea    -0xd0(%rbp),%rax
   1d6c4:	49 89 c1             	mov    %rax,%r9
   1d6c7:	49 89 d0             	mov    %rdx,%r8
   1d6ca:	b9 00 00 00 00       	mov    $0x0,%ecx
   1d6cf:	ba 46 00 00 00       	mov    $0x46,%edx
   1d6d4:	48 8d 35 dd aa 00 00 	lea    0xaadd(%rip),%rsi        # 281b8 <xInterruptGivePeriod+0x3c8>
   1d6db:	48 8d 3d 81 00 00 00 	lea    0x81(%rip),%rdi        # 1d763 <prvStaticallyAllocatedTask>
   1d6e2:	e8 10 e6 fe ff       	callq  bcf7 <xTaskCreate>
   1d6e7:	48 89 85 38 ff ff ff 	mov    %rax,-0xc8(%rbp)
   1d6ee:	48 8b 85 30 ff ff ff 	mov    -0xd0(%rbp),%rax
   1d6f5:	48 89 c7             	mov    %rax,%rdi
   1d6f8:	e8 8b f1 fe ff       	callq  c888 <eTaskGetState>
   1d6fd:	83 f8 03             	cmp    $0x3,%eax
   1d700:	74 0b                	je     1d70d <prvCreateAndDeleteStaticallyAllocatedTasks+0x111>
   1d702:	48 c7 05 23 93 11 00 	movq   $0x1,0x119323(%rip)        # 136a30 <xErrorOccurred>
   1d709:	01 00 00 00 
   1d70d:	48 83 bd 38 ff ff ff 	cmpq   $0x1,-0xc8(%rbp)
   1d714:	01 
   1d715:	74 11                	je     1d728 <prvCreateAndDeleteStaticallyAllocatedTasks+0x12c>
   1d717:	be 1a 03 00 00       	mov    $0x31a,%esi
   1d71c:	48 8d 3d 45 aa 00 00 	lea    0xaa45(%rip),%rdi        # 28168 <xInterruptGivePeriod+0x378>
   1d723:	e8 e4 65 fe ff       	callq  3d0c <vAssertCalled>
   1d728:	48 83 bd 38 ff ff ff 	cmpq   $0x1,-0xc8(%rbp)
   1d72f:	01 
   1d730:	74 0b                	je     1d73d <prvCreateAndDeleteStaticallyAllocatedTasks+0x141>
   1d732:	48 c7 05 f3 92 11 00 	movq   $0x1,0x1192f3(%rip)        # 136a30 <xErrorOccurred>
   1d739:	01 00 00 00 
   1d73d:	48 8b 85 30 ff ff ff 	mov    -0xd0(%rbp),%rax
   1d744:	48 89 c7             	mov    %rax,%rdi
   1d747:	e8 85 eb fe ff       	callq  c2d1 <vTaskDelete>
   1d74c:	90                   	nop
   1d74d:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   1d751:	64 48 33 04 25 28 00 	xor    %fs:0x28,%rax
   1d758:	00 00 
   1d75a:	74 05                	je     1d761 <prvCreateAndDeleteStaticallyAllocatedTasks+0x165>
   1d75c:	e8 6f 4d fe ff       	callq  24d0 <__stack_chk_fail@plt>
   1d761:	c9                   	leaveq 
   1d762:	c3                   	retq   

000000000001d763 <prvStaticallyAllocatedTask>:
   1d763:	f3 0f 1e fa          	endbr64 
   1d767:	55                   	push   %rbp
   1d768:	48 89 e5             	mov    %rsp,%rbp
   1d76b:	48 83 ec 10          	sub    $0x10,%rsp
   1d76f:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   1d773:	bf 00 00 00 00       	mov    $0x0,%edi
   1d778:	e8 e4 f5 fe ff       	callq  cd61 <vTaskSuspend>
   1d77d:	90                   	nop
   1d77e:	c9                   	leaveq 
   1d77f:	c3                   	retq   

000000000001d780 <prvRand>:
   1d780:	f3 0f 1e fa          	endbr64 
   1d784:	55                   	push   %rbp
   1d785:	48 89 e5             	mov    %rsp,%rbp
   1d788:	c7 45 f8 35 4e 5a 01 	movl   $0x15a4e35,-0x8(%rbp)
   1d78f:	c7 45 fc 01 00 00 00 	movl   $0x1,-0x4(%rbp)
   1d796:	8b 05 84 92 11 00    	mov    0x119284(%rip),%eax        # 136a20 <ulNextRand>
   1d79c:	0f af 45 f8          	imul   -0x8(%rbp),%eax
   1d7a0:	89 c2                	mov    %eax,%edx
   1d7a2:	8b 45 fc             	mov    -0x4(%rbp),%eax
   1d7a5:	01 d0                	add    %edx,%eax
   1d7a7:	89 05 73 92 11 00    	mov    %eax,0x119273(%rip)        # 136a20 <ulNextRand>
   1d7ad:	8b 05 6d 92 11 00    	mov    0x11926d(%rip),%eax        # 136a20 <ulNextRand>
   1d7b3:	c1 e8 10             	shr    $0x10,%eax
   1d7b6:	89 c0                	mov    %eax,%eax
   1d7b8:	25 ff 7f 00 00       	and    $0x7fff,%eax
   1d7bd:	5d                   	pop    %rbp
   1d7be:	c3                   	retq   

000000000001d7bf <prvGetNextDelayTime>:
   1d7bf:	f3 0f 1e fa          	endbr64 
   1d7c3:	55                   	push   %rbp
   1d7c4:	48 89 e5             	mov    %rsp,%rbp
   1d7c7:	48 83 ec 20          	sub    $0x20,%rsp
   1d7cb:	48 c7 45 e0 96 00 00 	movq   $0x96,-0x20(%rbp)
   1d7d2:	00 
   1d7d3:	48 c7 45 e8 4b 00 00 	movq   $0x4b,-0x18(%rbp)
   1d7da:	00 
   1d7db:	48 c7 45 f0 02 00 00 	movq   $0x2,-0x10(%rbp)
   1d7e2:	00 
   1d7e3:	e8 98 ff ff ff       	callq  1d780 <prvRand>
   1d7e8:	ba 00 00 00 00       	mov    $0x0,%edx
   1d7ed:	48 f7 75 e0          	divq   -0x20(%rbp)
   1d7f1:	48 89 55 f8          	mov    %rdx,-0x8(%rbp)
   1d7f5:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
   1d7f9:	48 89 c7             	mov    %rax,%rdi
   1d7fc:	e8 a1 ef fe ff       	callq  c7a2 <vTaskDelay>
   1d801:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   1d805:	48 3b 45 e8          	cmp    -0x18(%rbp),%rax
   1d809:	72 d8                	jb     1d7e3 <prvGetNextDelayTime+0x24>
   1d80b:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   1d80f:	c9                   	leaveq 
   1d810:	c3                   	retq   

000000000001d811 <prvSanityCheckCreatedEventGroup>:
   1d811:	f3 0f 1e fa          	endbr64 
   1d815:	55                   	push   %rbp
   1d816:	48 89 e5             	mov    %rsp,%rbp
   1d819:	48 83 ec 30          	sub    $0x30,%rsp
   1d81d:	48 89 7d d8          	mov    %rdi,-0x28(%rbp)
   1d821:	48 c7 45 e8 aa 00 00 	movq   $0xaa,-0x18(%rbp)
   1d828:	00 
   1d829:	48 c7 45 f0 55 00 00 	movq   $0x55,-0x10(%rbp)
   1d830:	00 
   1d831:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
   1d835:	be 00 00 00 00       	mov    $0x0,%esi
   1d83a:	48 89 c7             	mov    %rax,%rdi
   1d83d:	e8 fa dc fe ff       	callq  b53c <xEventGroupClearBits>
   1d842:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
   1d846:	48 83 7d f8 00       	cmpq   $0x0,-0x8(%rbp)
   1d84b:	74 0b                	je     1d858 <prvSanityCheckCreatedEventGroup+0x47>
   1d84d:	48 c7 05 d8 91 11 00 	movq   $0x1,0x1191d8(%rip)        # 136a30 <xErrorOccurred>
   1d854:	01 00 00 00 
   1d858:	48 8b 55 e8          	mov    -0x18(%rbp),%rdx
   1d85c:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
   1d860:	48 89 d6             	mov    %rdx,%rsi
   1d863:	48 89 c7             	mov    %rax,%rdi
   1d866:	e8 7c de fe ff       	callq  b6e7 <xEventGroupSetBits>
   1d86b:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
   1d86f:	be 00 00 00 00       	mov    $0x0,%esi
   1d874:	48 89 c7             	mov    %rax,%rdi
   1d877:	e8 c0 dc fe ff       	callq  b53c <xEventGroupClearBits>
   1d87c:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
   1d880:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   1d884:	48 3b 45 e8          	cmp    -0x18(%rbp),%rax
   1d888:	74 0b                	je     1d895 <prvSanityCheckCreatedEventGroup+0x84>
   1d88a:	48 c7 05 9b 91 11 00 	movq   $0x1,0x11919b(%rip)        # 136a30 <xErrorOccurred>
   1d891:	01 00 00 00 
   1d895:	48 8b 55 f0          	mov    -0x10(%rbp),%rdx
   1d899:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
   1d89d:	48 89 d6             	mov    %rdx,%rsi
   1d8a0:	48 89 c7             	mov    %rax,%rdi
   1d8a3:	e8 3f de fe ff       	callq  b6e7 <xEventGroupSetBits>
   1d8a8:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
   1d8ac:	be 00 00 00 00       	mov    $0x0,%esi
   1d8b1:	48 89 c7             	mov    %rax,%rdi
   1d8b4:	e8 83 dc fe ff       	callq  b53c <xEventGroupClearBits>
   1d8b9:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
   1d8bd:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
   1d8c1:	48 0b 45 f0          	or     -0x10(%rbp),%rax
   1d8c5:	48 39 45 f8          	cmp    %rax,-0x8(%rbp)
   1d8c9:	74 0b                	je     1d8d6 <prvSanityCheckCreatedEventGroup+0xc5>
   1d8cb:	48 c7 05 5a 91 11 00 	movq   $0x1,0x11915a(%rip)        # 136a30 <xErrorOccurred>
   1d8d2:	01 00 00 00 
   1d8d6:	48 8b 55 e8          	mov    -0x18(%rbp),%rdx
   1d8da:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
   1d8de:	48 89 d6             	mov    %rdx,%rsi
   1d8e1:	48 89 c7             	mov    %rax,%rdi
   1d8e4:	e8 53 dc fe ff       	callq  b53c <xEventGroupClearBits>
   1d8e9:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
   1d8ed:	be 00 00 00 00       	mov    $0x0,%esi
   1d8f2:	48 89 c7             	mov    %rax,%rdi
   1d8f5:	e8 42 dc fe ff       	callq  b53c <xEventGroupClearBits>
   1d8fa:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
   1d8fe:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   1d902:	48 3b 45 f0          	cmp    -0x10(%rbp),%rax
   1d906:	74 0b                	je     1d913 <prvSanityCheckCreatedEventGroup+0x102>
   1d908:	48 c7 05 1d 91 11 00 	movq   $0x1,0x11911d(%rip)        # 136a30 <xErrorOccurred>
   1d90f:	01 00 00 00 
   1d913:	90                   	nop
   1d914:	c9                   	leaveq 
   1d915:	c3                   	retq   

000000000001d916 <prvSanityCheckCreatedSemaphore>:
   1d916:	f3 0f 1e fa          	endbr64 
   1d91a:	55                   	push   %rbp
   1d91b:	48 89 e5             	mov    %rsp,%rbp
   1d91e:	48 83 ec 30          	sub    $0x30,%rsp
   1d922:	48 89 7d d8          	mov    %rdi,-0x28(%rbp)
   1d926:	48 89 75 d0          	mov    %rsi,-0x30(%rbp)
   1d92a:	48 c7 45 e8 0a 00 00 	movq   $0xa,-0x18(%rbp)
   1d931:	00 
   1d932:	e8 61 ff fe ff       	callq  d898 <xTaskGetTickCount>
   1d937:	48 89 45 f0          	mov    %rax,-0x10(%rbp)
   1d93b:	48 8b 55 e8          	mov    -0x18(%rbp),%rdx
   1d93f:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
   1d943:	48 89 d6             	mov    %rdx,%rsi
   1d946:	48 89 c7             	mov    %rax,%rdi
   1d949:	e8 26 96 fe ff       	callq  6f74 <xQueueSemaphoreTake>
   1d94e:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
   1d952:	e8 41 ff fe ff       	callq  d898 <xTaskGetTickCount>
   1d957:	48 2b 45 f0          	sub    -0x10(%rbp),%rax
   1d95b:	48 39 45 e8          	cmp    %rax,-0x18(%rbp)
   1d95f:	76 0b                	jbe    1d96c <prvSanityCheckCreatedSemaphore+0x56>
   1d961:	48 c7 05 c4 90 11 00 	movq   $0x1,0x1190c4(%rip)        # 136a30 <xErrorOccurred>
   1d968:	01 00 00 00 
   1d96c:	48 83 7d f8 00       	cmpq   $0x0,-0x8(%rbp)
   1d971:	74 0b                	je     1d97e <prvSanityCheckCreatedSemaphore+0x68>
   1d973:	48 c7 05 b2 90 11 00 	movq   $0x1,0x1190b2(%rip)        # 136a30 <xErrorOccurred>
   1d97a:	01 00 00 00 
   1d97e:	48 c7 45 e0 00 00 00 	movq   $0x0,-0x20(%rbp)
   1d985:	00 
   1d986:	eb 36                	jmp    1d9be <prvSanityCheckCreatedSemaphore+0xa8>
   1d988:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
   1d98c:	b9 00 00 00 00       	mov    $0x0,%ecx
   1d991:	ba 00 00 00 00       	mov    $0x0,%edx
   1d996:	be 00 00 00 00       	mov    $0x0,%esi
   1d99b:	48 89 c7             	mov    %rax,%rdi
   1d99e:	e8 f4 83 fe ff       	callq  5d97 <xQueueGenericSend>
   1d9a3:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
   1d9a7:	48 83 7d f8 00       	cmpq   $0x0,-0x8(%rbp)
   1d9ac:	75 0b                	jne    1d9b9 <prvSanityCheckCreatedSemaphore+0xa3>
   1d9ae:	48 c7 05 77 90 11 00 	movq   $0x1,0x119077(%rip)        # 136a30 <xErrorOccurred>
   1d9b5:	01 00 00 00 
   1d9b9:	48 83 45 e0 01       	addq   $0x1,-0x20(%rbp)
   1d9be:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
   1d9c2:	48 3b 45 d0          	cmp    -0x30(%rbp),%rax
   1d9c6:	72 c0                	jb     1d988 <prvSanityCheckCreatedSemaphore+0x72>
   1d9c8:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
   1d9cc:	b9 00 00 00 00       	mov    $0x0,%ecx
   1d9d1:	ba 00 00 00 00       	mov    $0x0,%edx
   1d9d6:	be 00 00 00 00       	mov    $0x0,%esi
   1d9db:	48 89 c7             	mov    %rax,%rdi
   1d9de:	e8 b4 83 fe ff       	callq  5d97 <xQueueGenericSend>
   1d9e3:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
   1d9e7:	48 83 7d f8 00       	cmpq   $0x0,-0x8(%rbp)
   1d9ec:	74 0b                	je     1d9f9 <prvSanityCheckCreatedSemaphore+0xe3>
   1d9ee:	48 c7 05 37 90 11 00 	movq   $0x1,0x119037(%rip)        # 136a30 <xErrorOccurred>
   1d9f5:	01 00 00 00 
   1d9f9:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
   1d9fd:	48 89 c7             	mov    %rax,%rdi
   1da00:	e8 09 a4 fe ff       	callq  7e0e <uxQueueMessagesWaiting>
   1da05:	48 39 45 d0          	cmp    %rax,-0x30(%rbp)
   1da09:	74 11                	je     1da1c <prvSanityCheckCreatedSemaphore+0x106>
   1da0b:	be ab 03 00 00       	mov    $0x3ab,%esi
   1da10:	48 8d 3d 51 a7 00 00 	lea    0xa751(%rip),%rdi        # 28168 <xInterruptGivePeriod+0x378>
   1da17:	e8 f0 62 fe ff       	callq  3d0c <vAssertCalled>
   1da1c:	48 c7 45 e0 00 00 00 	movq   $0x0,-0x20(%rbp)
   1da23:	00 
   1da24:	eb 2c                	jmp    1da52 <prvSanityCheckCreatedSemaphore+0x13c>
   1da26:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
   1da2a:	be 00 00 00 00       	mov    $0x0,%esi
   1da2f:	48 89 c7             	mov    %rax,%rdi
   1da32:	e8 3d 95 fe ff       	callq  6f74 <xQueueSemaphoreTake>
   1da37:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
   1da3b:	48 83 7d f8 00       	cmpq   $0x0,-0x8(%rbp)
   1da40:	75 0b                	jne    1da4d <prvSanityCheckCreatedSemaphore+0x137>
   1da42:	48 c7 05 e3 8f 11 00 	movq   $0x1,0x118fe3(%rip)        # 136a30 <xErrorOccurred>
   1da49:	01 00 00 00 
   1da4d:	48 83 45 e0 01       	addq   $0x1,-0x20(%rbp)
   1da52:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
   1da56:	48 3b 45 d0          	cmp    -0x30(%rbp),%rax
   1da5a:	72 ca                	jb     1da26 <prvSanityCheckCreatedSemaphore+0x110>
   1da5c:	e8 37 fe fe ff       	callq  d898 <xTaskGetTickCount>
   1da61:	48 89 45 f0          	mov    %rax,-0x10(%rbp)
   1da65:	48 8b 55 e8          	mov    -0x18(%rbp),%rdx
   1da69:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
   1da6d:	48 89 d6             	mov    %rdx,%rsi
   1da70:	48 89 c7             	mov    %rax,%rdi
   1da73:	e8 fc 94 fe ff       	callq  6f74 <xQueueSemaphoreTake>
   1da78:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
   1da7c:	e8 17 fe fe ff       	callq  d898 <xTaskGetTickCount>
   1da81:	48 2b 45 f0          	sub    -0x10(%rbp),%rax
   1da85:	48 39 45 e8          	cmp    %rax,-0x18(%rbp)
   1da89:	76 0b                	jbe    1da96 <prvSanityCheckCreatedSemaphore+0x180>
   1da8b:	48 c7 05 9a 8f 11 00 	movq   $0x1,0x118f9a(%rip)        # 136a30 <xErrorOccurred>
   1da92:	01 00 00 00 
   1da96:	48 83 7d f8 00       	cmpq   $0x0,-0x8(%rbp)
   1da9b:	74 0b                	je     1daa8 <prvSanityCheckCreatedSemaphore+0x192>
   1da9d:	48 c7 05 88 8f 11 00 	movq   $0x1,0x118f88(%rip)        # 136a30 <xErrorOccurred>
   1daa4:	01 00 00 00 
   1daa8:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
   1daac:	48 89 c7             	mov    %rax,%rdi
   1daaf:	e8 5a a3 fe ff       	callq  7e0e <uxQueueMessagesWaiting>
   1dab4:	48 85 c0             	test   %rax,%rax
   1dab7:	74 11                	je     1daca <prvSanityCheckCreatedSemaphore+0x1b4>
   1dab9:	be c9 03 00 00       	mov    $0x3c9,%esi
   1dabe:	48 8d 3d a3 a6 00 00 	lea    0xa6a3(%rip),%rdi        # 28168 <xInterruptGivePeriod+0x378>
   1dac5:	e8 42 62 fe ff       	callq  3d0c <vAssertCalled>
   1daca:	90                   	nop
   1dacb:	c9                   	leaveq 
   1dacc:	c3                   	retq   

000000000001dacd <prvSanityCheckCreatedQueue>:
   1dacd:	f3 0f 1e fa          	endbr64 
   1dad1:	55                   	push   %rbp
   1dad2:	48 89 e5             	mov    %rsp,%rbp
   1dad5:	48 83 ec 40          	sub    $0x40,%rsp
   1dad9:	48 89 7d c8          	mov    %rdi,-0x38(%rbp)
   1dadd:	64 48 8b 04 25 28 00 	mov    %fs:0x28,%rax
   1dae4:	00 00 
   1dae6:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
   1daea:	31 c0                	xor    %eax,%eax
   1daec:	48 c7 45 e8 00 00 00 	movq   $0x0,-0x18(%rbp)
   1daf3:	00 
   1daf4:	e9 47 01 00 00       	jmpq   1dc40 <prvSanityCheckCreatedQueue+0x173>
   1daf9:	48 8d 4d d8          	lea    -0x28(%rbp),%rcx
   1dafd:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
   1db01:	ba 00 00 00 00       	mov    $0x0,%edx
   1db06:	48 89 ce             	mov    %rcx,%rsi
   1db09:	48 89 c7             	mov    %rax,%rdi
   1db0c:	e8 d2 8e fe ff       	callq  69e3 <xQueueReceive>
   1db11:	48 89 45 f0          	mov    %rax,-0x10(%rbp)
   1db15:	48 83 7d f0 00       	cmpq   $0x0,-0x10(%rbp)
   1db1a:	74 0b                	je     1db27 <prvSanityCheckCreatedQueue+0x5a>
   1db1c:	48 c7 05 09 8f 11 00 	movq   $0x1,0x118f09(%rip)        # 136a30 <xErrorOccurred>
   1db23:	01 00 00 00 
   1db27:	48 c7 45 d8 00 00 00 	movq   $0x0,-0x28(%rbp)
   1db2e:	00 
   1db2f:	eb 3c                	jmp    1db6d <prvSanityCheckCreatedQueue+0xa0>
   1db31:	48 8d 75 d8          	lea    -0x28(%rbp),%rsi
   1db35:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
   1db39:	b9 00 00 00 00       	mov    $0x0,%ecx
   1db3e:	ba 00 00 00 00       	mov    $0x0,%edx
   1db43:	48 89 c7             	mov    %rax,%rdi
   1db46:	e8 4c 82 fe ff       	callq  5d97 <xQueueGenericSend>
   1db4b:	48 89 45 f0          	mov    %rax,-0x10(%rbp)
   1db4f:	48 83 7d f0 01       	cmpq   $0x1,-0x10(%rbp)
   1db54:	74 0b                	je     1db61 <prvSanityCheckCreatedQueue+0x94>
   1db56:	48 c7 05 cf 8e 11 00 	movq   $0x1,0x118ecf(%rip)        # 136a30 <xErrorOccurred>
   1db5d:	01 00 00 00 
   1db61:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
   1db65:	48 83 c0 01          	add    $0x1,%rax
   1db69:	48 89 45 d8          	mov    %rax,-0x28(%rbp)
   1db6d:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
   1db71:	48 83 f8 04          	cmp    $0x4,%rax
   1db75:	76 ba                	jbe    1db31 <prvSanityCheckCreatedQueue+0x64>
   1db77:	48 8d 75 d8          	lea    -0x28(%rbp),%rsi
   1db7b:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
   1db7f:	b9 00 00 00 00       	mov    $0x0,%ecx
   1db84:	ba 00 00 00 00       	mov    $0x0,%edx
   1db89:	48 89 c7             	mov    %rax,%rdi
   1db8c:	e8 06 82 fe ff       	callq  5d97 <xQueueGenericSend>
   1db91:	48 89 45 f0          	mov    %rax,-0x10(%rbp)
   1db95:	48 83 7d f0 00       	cmpq   $0x0,-0x10(%rbp)
   1db9a:	74 0b                	je     1dba7 <prvSanityCheckCreatedQueue+0xda>
   1db9c:	48 c7 05 89 8e 11 00 	movq   $0x1,0x118e89(%rip)        # 136a30 <xErrorOccurred>
   1dba3:	01 00 00 00 
   1dba7:	48 c7 45 d8 00 00 00 	movq   $0x0,-0x28(%rbp)
   1dbae:	00 
   1dbaf:	eb 52                	jmp    1dc03 <prvSanityCheckCreatedQueue+0x136>
   1dbb1:	48 8d 4d e0          	lea    -0x20(%rbp),%rcx
   1dbb5:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
   1dbb9:	ba 00 00 00 00       	mov    $0x0,%edx
   1dbbe:	48 89 ce             	mov    %rcx,%rsi
   1dbc1:	48 89 c7             	mov    %rax,%rdi
   1dbc4:	e8 1a 8e fe ff       	callq  69e3 <xQueueReceive>
   1dbc9:	48 89 45 f0          	mov    %rax,-0x10(%rbp)
   1dbcd:	48 83 7d f0 01       	cmpq   $0x1,-0x10(%rbp)
   1dbd2:	74 0b                	je     1dbdf <prvSanityCheckCreatedQueue+0x112>
   1dbd4:	48 c7 05 51 8e 11 00 	movq   $0x1,0x118e51(%rip)        # 136a30 <xErrorOccurred>
   1dbdb:	01 00 00 00 
   1dbdf:	48 8b 55 e0          	mov    -0x20(%rbp),%rdx
   1dbe3:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
   1dbe7:	48 39 c2             	cmp    %rax,%rdx
   1dbea:	74 0b                	je     1dbf7 <prvSanityCheckCreatedQueue+0x12a>
   1dbec:	48 c7 05 39 8e 11 00 	movq   $0x1,0x118e39(%rip)        # 136a30 <xErrorOccurred>
   1dbf3:	01 00 00 00 
   1dbf7:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
   1dbfb:	48 83 c0 01          	add    $0x1,%rax
   1dbff:	48 89 45 d8          	mov    %rax,-0x28(%rbp)
   1dc03:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
   1dc07:	48 83 f8 04          	cmp    $0x4,%rax
   1dc0b:	76 a4                	jbe    1dbb1 <prvSanityCheckCreatedQueue+0xe4>
   1dc0d:	48 8d 4d d8          	lea    -0x28(%rbp),%rcx
   1dc11:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
   1dc15:	ba 00 00 00 00       	mov    $0x0,%edx
   1dc1a:	48 89 ce             	mov    %rcx,%rsi
   1dc1d:	48 89 c7             	mov    %rax,%rdi
   1dc20:	e8 be 8d fe ff       	callq  69e3 <xQueueReceive>
   1dc25:	48 89 45 f0          	mov    %rax,-0x10(%rbp)
   1dc29:	48 83 7d f0 00       	cmpq   $0x0,-0x10(%rbp)
   1dc2e:	74 0b                	je     1dc3b <prvSanityCheckCreatedQueue+0x16e>
   1dc30:	48 c7 05 f5 8d 11 00 	movq   $0x1,0x118df5(%rip)        # 136a30 <xErrorOccurred>
   1dc37:	01 00 00 00 
   1dc3b:	48 83 45 e8 01       	addq   $0x1,-0x18(%rbp)
   1dc40:	48 83 7d e8 01       	cmpq   $0x1,-0x18(%rbp)
   1dc45:	0f 8e ae fe ff ff    	jle    1daf9 <prvSanityCheckCreatedQueue+0x2c>
   1dc4b:	90                   	nop
   1dc4c:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   1dc50:	64 48 33 04 25 28 00 	xor    %fs:0x28,%rax
   1dc57:	00 00 
   1dc59:	74 05                	je     1dc60 <prvSanityCheckCreatedQueue+0x193>
   1dc5b:	e8 70 48 fe ff       	callq  24d0 <__stack_chk_fail@plt>
   1dc60:	c9                   	leaveq 
   1dc61:	c3                   	retq   

000000000001dc62 <prvSanityCheckCreatedRecursiveMutex>:
   1dc62:	f3 0f 1e fa          	endbr64 
   1dc66:	55                   	push   %rbp
   1dc67:	48 89 e5             	mov    %rsp,%rbp
   1dc6a:	48 83 ec 30          	sub    $0x30,%rsp
   1dc6e:	48 89 7d d8          	mov    %rdi,-0x28(%rbp)
   1dc72:	48 c7 45 f0 05 00 00 	movq   $0x5,-0x10(%rbp)
   1dc79:	00 
   1dc7a:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
   1dc7e:	48 89 c7             	mov    %rax,%rdi
   1dc81:	e8 35 7e fe ff       	callq  5abb <xQueueGiveMutexRecursive>
   1dc86:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
   1dc8a:	48 83 7d f8 00       	cmpq   $0x0,-0x8(%rbp)
   1dc8f:	74 0b                	je     1dc9c <prvSanityCheckCreatedRecursiveMutex+0x3a>
   1dc91:	48 c7 05 94 8d 11 00 	movq   $0x1,0x118d94(%rip)        # 136a30 <xErrorOccurred>
   1dc98:	01 00 00 00 
   1dc9c:	48 c7 45 e8 00 00 00 	movq   $0x0,-0x18(%rbp)
   1dca3:	00 
   1dca4:	eb 2c                	jmp    1dcd2 <prvSanityCheckCreatedRecursiveMutex+0x70>
   1dca6:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
   1dcaa:	be 00 00 00 00       	mov    $0x0,%esi
   1dcaf:	48 89 c7             	mov    %rax,%rdi
   1dcb2:	e8 39 7f fe ff       	callq  5bf0 <xQueueTakeMutexRecursive>
   1dcb7:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
   1dcbb:	48 83 7d f8 01       	cmpq   $0x1,-0x8(%rbp)
   1dcc0:	74 0b                	je     1dccd <prvSanityCheckCreatedRecursiveMutex+0x6b>
   1dcc2:	48 c7 05 63 8d 11 00 	movq   $0x1,0x118d63(%rip)        # 136a30 <xErrorOccurred>
   1dcc9:	01 00 00 00 
   1dccd:	48 83 45 e8 01       	addq   $0x1,-0x18(%rbp)
   1dcd2:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
   1dcd6:	48 3b 45 f0          	cmp    -0x10(%rbp),%rax
   1dcda:	7c ca                	jl     1dca6 <prvSanityCheckCreatedRecursiveMutex+0x44>
   1dcdc:	48 c7 45 e8 00 00 00 	movq   $0x0,-0x18(%rbp)
   1dce3:	00 
   1dce4:	eb 27                	jmp    1dd0d <prvSanityCheckCreatedRecursiveMutex+0xab>
   1dce6:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
   1dcea:	48 89 c7             	mov    %rax,%rdi
   1dced:	e8 c9 7d fe ff       	callq  5abb <xQueueGiveMutexRecursive>
   1dcf2:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
   1dcf6:	48 83 7d f8 01       	cmpq   $0x1,-0x8(%rbp)
   1dcfb:	74 0b                	je     1dd08 <prvSanityCheckCreatedRecursiveMutex+0xa6>
   1dcfd:	48 c7 05 28 8d 11 00 	movq   $0x1,0x118d28(%rip)        # 136a30 <xErrorOccurred>
   1dd04:	01 00 00 00 
   1dd08:	48 83 45 e8 01       	addq   $0x1,-0x18(%rbp)
   1dd0d:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
   1dd11:	48 3b 45 f0          	cmp    -0x10(%rbp),%rax
   1dd15:	7c cf                	jl     1dce6 <prvSanityCheckCreatedRecursiveMutex+0x84>
   1dd17:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
   1dd1b:	48 89 c7             	mov    %rax,%rdi
   1dd1e:	e8 98 7d fe ff       	callq  5abb <xQueueGiveMutexRecursive>
   1dd23:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
   1dd27:	48 83 7d f8 00       	cmpq   $0x0,-0x8(%rbp)
   1dd2c:	74 0b                	je     1dd39 <prvSanityCheckCreatedRecursiveMutex+0xd7>
   1dd2e:	48 c7 05 f7 8c 11 00 	movq   $0x1,0x118cf7(%rip)        # 136a30 <xErrorOccurred>
   1dd35:	01 00 00 00 
   1dd39:	90                   	nop
   1dd3a:	c9                   	leaveq 
   1dd3b:	c3                   	retq   

000000000001dd3c <xAreStaticAllocationTasksStillRunning>:
   1dd3c:	f3 0f 1e fa          	endbr64 
   1dd40:	55                   	push   %rbp
   1dd41:	48 89 e5             	mov    %rsp,%rbp
   1dd44:	48 8b 15 dd 8c 11 00 	mov    0x118cdd(%rip),%rdx        # 136a28 <uxCycleCounter>
   1dd4b:	48 8b 05 1e 90 11 00 	mov    0x11901e(%rip),%rax        # 136d70 <uxLastCycleCounter.3190>
   1dd52:	48 39 c2             	cmp    %rax,%rdx
   1dd55:	75 0d                	jne    1dd64 <xAreStaticAllocationTasksStillRunning+0x28>
   1dd57:	48 c7 05 ce 8c 11 00 	movq   $0x1,0x118cce(%rip)        # 136a30 <xErrorOccurred>
   1dd5e:	01 00 00 00 
   1dd62:	eb 0e                	jmp    1dd72 <xAreStaticAllocationTasksStillRunning+0x36>
   1dd64:	48 8b 05 bd 8c 11 00 	mov    0x118cbd(%rip),%rax        # 136a28 <uxCycleCounter>
   1dd6b:	48 89 05 fe 8f 11 00 	mov    %rax,0x118ffe(%rip)        # 136d70 <uxLastCycleCounter.3190>
   1dd72:	48 8b 05 b7 8c 11 00 	mov    0x118cb7(%rip),%rax        # 136a30 <xErrorOccurred>
   1dd79:	48 85 c0             	test   %rax,%rax
   1dd7c:	74 0a                	je     1dd88 <xAreStaticAllocationTasksStillRunning+0x4c>
   1dd7e:	48 c7 45 f8 00 00 00 	movq   $0x0,-0x8(%rbp)
   1dd85:	00 
   1dd86:	eb 08                	jmp    1dd90 <xAreStaticAllocationTasksStillRunning+0x54>
   1dd88:	48 c7 45 f8 01 00 00 	movq   $0x1,-0x8(%rbp)
   1dd8f:	00 
   1dd90:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   1dd94:	5d                   	pop    %rbp
   1dd95:	c3                   	retq   

000000000001dd96 <vStartStreamBufferTasks>:
   1dd96:	f3 0f 1e fa          	endbr64 
   1dd9a:	55                   	push   %rbp
   1dd9b:	48 89 e5             	mov    %rsp,%rbp
   1dd9e:	48 83 ec 10          	sub    $0x10,%rsp
   1dda2:	41 b9 00 00 00 00    	mov    $0x0,%r9d
   1dda8:	41 b8 01 00 00 00    	mov    $0x1,%r8d
   1ddae:	b9 00 00 00 00       	mov    $0x0,%ecx
   1ddb3:	ba 69 00 00 00       	mov    $0x69,%edx
   1ddb8:	48 8d 35 80 a4 00 00 	lea    0xa480(%rip),%rsi        # 2823f <xInterruptGivePeriod+0x44f>
   1ddbf:	48 8d 3d ed 1c 00 00 	lea    0x1ced(%rip),%rdi        # 1fab3 <prvEchoServer>
   1ddc6:	e8 2c df fe ff       	callq  bcf7 <xTaskCreate>
   1ddcb:	41 b9 00 00 00 00    	mov    $0x0,%r9d
   1ddd1:	41 b8 00 00 00 00    	mov    $0x0,%r8d
   1ddd7:	b9 00 00 00 00       	mov    $0x0,%ecx
   1dddc:	ba 69 00 00 00       	mov    $0x69,%edx
   1dde1:	48 8d 35 66 a4 00 00 	lea    0xa466(%rip),%rsi        # 2824e <xInterruptGivePeriod+0x45e>
   1dde8:	48 8d 3d c4 1c 00 00 	lea    0x1cc4(%rip),%rdi        # 1fab3 <prvEchoServer>
   1ddef:	e8 03 df fe ff       	callq  bcf7 <xTaskCreate>
   1ddf4:	ba 00 00 00 00       	mov    $0x0,%edx
   1ddf9:	be 01 00 00 00       	mov    $0x1,%esi
   1ddfe:	bf 1e 00 00 00       	mov    $0x1e,%edi
   1de03:	e8 5a b0 fe ff       	callq  8e62 <xStreamBufferGenericCreate>
   1de08:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
   1de0c:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   1de10:	41 b9 00 00 00 00    	mov    $0x0,%r9d
   1de16:	41 b8 00 00 00 00    	mov    $0x0,%r8d
   1de1c:	48 89 c1             	mov    %rax,%rcx
   1de1f:	ba 46 00 00 00       	mov    $0x46,%edx
   1de24:	48 8d 35 32 a4 00 00 	lea    0xa432(%rip),%rsi        # 2825d <xInterruptGivePeriod+0x46d>
   1de2b:	48 8d 3d 3e 14 00 00 	lea    0x143e(%rip),%rdi        # 1f270 <prvNonBlockingReceiverTask>
   1de32:	e8 c0 de fe ff       	callq  bcf7 <xTaskCreate>
   1de37:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   1de3b:	41 b9 00 00 00 00    	mov    $0x0,%r9d
   1de41:	41 b8 00 00 00 00    	mov    $0x0,%r8d
   1de47:	48 89 c1             	mov    %rax,%rcx
   1de4a:	ba 46 00 00 00       	mov    $0x46,%edx
   1de4f:	48 8d 35 13 a4 00 00 	lea    0xa413(%rip),%rsi        # 28269 <xInterruptGivePeriod+0x479>
   1de56:	48 8d 3d 64 13 00 00 	lea    0x1364(%rip),%rdi        # 1f1c1 <prvNonBlockingSenderTask>
   1de5d:	e8 95 de fe ff       	callq  bcf7 <xTaskCreate>
   1de62:	41 b9 00 00 00 00    	mov    $0x0,%r9d
   1de68:	41 b8 06 00 00 00    	mov    $0x6,%r8d
   1de6e:	b9 00 00 00 00       	mov    $0x0,%ecx
   1de73:	ba 46 00 00 00       	mov    $0x46,%edx
   1de78:	48 8d 35 f6 a3 00 00 	lea    0xa3f6(%rip),%rsi        # 28275 <xInterruptGivePeriod+0x485>
   1de7f:	48 8d 3d bb 1e 00 00 	lea    0x1ebb(%rip),%rdi        # 1fd41 <prvInterruptTriggerLevelTest>
   1de86:	e8 6c de fe ff       	callq  bcf7 <xTaskCreate>
   1de8b:	41 b9 00 00 00 00    	mov    $0x0,%r9d
   1de91:	41 b8 01 00 00 00    	mov    $0x1,%r8d
   1de97:	b9 00 00 00 00       	mov    $0x0,%ecx
   1de9c:	ba 69 00 00 00       	mov    $0x69,%edx
   1dea1:	48 8d 35 d5 a3 00 00 	lea    0xa3d5(%rip),%rsi        # 2827d <xInterruptGivePeriod+0x48d>
   1dea8:	48 8d 3d 18 15 00 00 	lea    0x1518(%rip),%rdi        # 1f3c7 <prvSenderTask>
   1deaf:	e8 43 de fe ff       	callq  bcf7 <xTaskCreate>
   1deb4:	41 b9 00 00 00 00    	mov    $0x0,%r9d
   1deba:	41 b8 00 00 00 00    	mov    $0x0,%r8d
   1dec0:	b9 00 00 00 00       	mov    $0x0,%ecx
   1dec5:	ba 69 00 00 00       	mov    $0x69,%edx
   1deca:	48 8d 35 b7 a3 00 00 	lea    0xa3b7(%rip),%rsi        # 28288 <xInterruptGivePeriod+0x498>
   1ded1:	48 8d 3d ef 14 00 00 	lea    0x14ef(%rip),%rdi        # 1f3c7 <prvSenderTask>
   1ded8:	e8 1a de fe ff       	callq  bcf7 <xTaskCreate>
   1dedd:	90                   	nop
   1dede:	c9                   	leaveq 
   1dedf:	c3                   	retq   

000000000001dee0 <prvCheckExpectedState>:
   1dee0:	f3 0f 1e fa          	endbr64 
   1dee4:	55                   	push   %rbp
   1dee5:	48 89 e5             	mov    %rsp,%rbp
   1dee8:	48 83 ec 10          	sub    $0x10,%rsp
   1deec:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   1def0:	48 83 7d f8 00       	cmpq   $0x0,-0x8(%rbp)
   1def5:	75 11                	jne    1df08 <prvCheckExpectedState+0x28>
   1def7:	be dc 00 00 00       	mov    $0xdc,%esi
   1defc:	48 8d 3d 95 a3 00 00 	lea    0xa395(%rip),%rdi        # 28298 <xInterruptGivePeriod+0x4a8>
   1df03:	e8 04 5e fe ff       	callq  3d0c <vAssertCalled>
   1df08:	48 83 7d f8 00       	cmpq   $0x0,-0x8(%rbp)
   1df0d:	75 0b                	jne    1df1a <prvCheckExpectedState+0x3a>
   1df0f:	48 c7 05 66 31 01 00 	movq   $0x0,0x13166(%rip)        # 31080 <xErrorStatus>
   1df16:	00 00 00 00 
   1df1a:	90                   	nop
   1df1b:	c9                   	leaveq 
   1df1c:	c3                   	retq   

000000000001df1d <prvSingleTaskTests>:
   1df1d:	f3 0f 1e fa          	endbr64 
   1df21:	55                   	push   %rbp
   1df22:	48 89 e5             	mov    %rsp,%rbp
   1df25:	48 81 ec b0 00 00 00 	sub    $0xb0,%rsp
   1df2c:	48 89 bd 58 ff ff ff 	mov    %rdi,-0xa8(%rbp)
   1df33:	48 c7 85 78 ff ff ff 	movq   $0x5,-0x88(%rbp)
   1df3a:	05 00 00 00 
   1df3e:	48 c7 45 80 1f 00 00 	movq   $0x1f,-0x80(%rbp)
   1df45:	00 
   1df46:	48 c7 45 88 06 00 00 	movq   $0x6,-0x78(%rbp)
   1df4d:	00 
   1df4e:	48 c7 45 90 11 00 00 	movq   $0x11,-0x70(%rbp)
   1df55:	00 
   1df56:	48 c7 45 98 3c 00 00 	movq   $0x3c,-0x68(%rbp)
   1df5d:	00 
   1df5e:	48 c7 45 a0 0f 00 00 	movq   $0xf,-0x60(%rbp)
   1df65:	00 
   1df66:	48 c7 45 a8 03 00 00 	movq   $0x3,-0x58(%rbp)
   1df6d:	00 
   1df6e:	48 c7 45 b0 02 00 00 	movq   $0x2,-0x50(%rbp)
   1df75:	00 
   1df76:	48 8b 45 98          	mov    -0x68(%rbp),%rax
   1df7a:	48 89 c7             	mov    %rax,%rdi
   1df7d:	e8 fe 46 ff ff       	callq  12680 <pvPortMalloc>
   1df82:	48 89 45 b8          	mov    %rax,-0x48(%rbp)
   1df86:	48 83 7d b8 00       	cmpq   $0x0,-0x48(%rbp)
   1df8b:	75 11                	jne    1df9e <prvSingleTaskTests+0x81>
   1df8d:	be f7 00 00 00       	mov    $0xf7,%esi
   1df92:	48 8d 3d ff a2 00 00 	lea    0xa2ff(%rip),%rdi        # 28298 <xInterruptGivePeriod+0x4a8>
   1df99:	e8 6e 5d fe ff       	callq  3d0c <vAssertCalled>
   1df9e:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
   1dfa2:	48 89 45 c0          	mov    %rax,-0x40(%rbp)
   1dfa6:	48 8b 55 c0          	mov    -0x40(%rbp),%rdx
   1dfaa:	48 8b 45 90          	mov    -0x70(%rbp),%rax
   1dfae:	48 01 d0             	add    %rdx,%rax
   1dfb1:	48 89 45 c8          	mov    %rax,-0x38(%rbp)
   1dfb5:	48 c7 45 d0 1e 00 00 	movq   $0x1e,-0x30(%rbp)
   1dfbc:	00 
   1dfbd:	48 c7 45 d8 00 00 00 	movq   $0x0,-0x28(%rbp)
   1dfc4:	00 
   1dfc5:	48 8b 85 58 ff ff ff 	mov    -0xa8(%rbp),%rax
   1dfcc:	48 89 c7             	mov    %rax,%rdi
   1dfcf:	e8 20 b7 fe ff       	callq  96f4 <xStreamBufferSpacesAvailable>
   1dfd4:	48 89 85 70 ff ff ff 	mov    %rax,-0x90(%rbp)
   1dfdb:	48 8b 85 70 ff ff ff 	mov    -0x90(%rbp),%rax
   1dfe2:	48 3b 45 d0          	cmp    -0x30(%rbp),%rax
   1dfe6:	0f 94 c0             	sete   %al
   1dfe9:	0f b6 c0             	movzbl %al,%eax
   1dfec:	48 89 c7             	mov    %rax,%rdi
   1dfef:	e8 ec fe ff ff       	callq  1dee0 <prvCheckExpectedState>
   1dff4:	48 8b 85 58 ff ff ff 	mov    -0xa8(%rbp),%rax
   1dffb:	48 89 c7             	mov    %rax,%rdi
   1dffe:	e8 80 b7 fe ff       	callq  9783 <xStreamBufferBytesAvailable>
   1e003:	48 89 85 70 ff ff ff 	mov    %rax,-0x90(%rbp)
   1e00a:	48 8b 85 70 ff ff ff 	mov    -0x90(%rbp),%rax
   1e011:	48 3b 45 d8          	cmp    -0x28(%rbp),%rax
   1e015:	0f 94 c0             	sete   %al
   1e018:	0f b6 c0             	movzbl %al,%eax
   1e01b:	48 89 c7             	mov    %rax,%rdi
   1e01e:	e8 bd fe ff ff       	callq  1dee0 <prvCheckExpectedState>
   1e023:	48 8b 85 58 ff ff ff 	mov    -0xa8(%rbp),%rax
   1e02a:	48 89 c7             	mov    %rax,%rdi
   1e02d:	e8 3d c6 fe ff       	callq  a66f <xStreamBufferIsEmpty>
   1e032:	48 83 f8 01          	cmp    $0x1,%rax
   1e036:	0f 94 c0             	sete   %al
   1e039:	0f b6 c0             	movzbl %al,%eax
   1e03c:	48 89 c7             	mov    %rax,%rdi
   1e03f:	e8 9c fe ff ff       	callq  1dee0 <prvCheckExpectedState>
   1e044:	48 8b 85 58 ff ff ff 	mov    -0xa8(%rbp),%rax
   1e04b:	48 89 c7             	mov    %rax,%rdi
   1e04e:	e8 7d c6 fe ff       	callq  a6d0 <xStreamBufferIsFull>
   1e053:	48 85 c0             	test   %rax,%rax
   1e056:	0f 94 c0             	sete   %al
   1e059:	0f b6 c0             	movzbl %al,%eax
   1e05c:	48 89 c7             	mov    %rax,%rdi
   1e05f:	e8 7c fe ff ff       	callq  1dee0 <prvCheckExpectedState>
   1e064:	48 83 6d d0 01       	subq   $0x1,-0x30(%rbp)
   1e069:	48 83 45 d8 01       	addq   $0x1,-0x28(%rbp)
   1e06e:	48 8b 75 c0          	mov    -0x40(%rbp),%rsi
   1e072:	48 8b 85 58 ff ff ff 	mov    -0xa8(%rbp),%rax
   1e079:	b9 00 00 00 00       	mov    $0x0,%ecx
   1e07e:	ba 01 00 00 00       	mov    $0x1,%edx
   1e083:	48 89 c7             	mov    %rax,%rdi
   1e086:	e8 3e b7 fe ff       	callq  97c9 <xStreamBufferSend>
   1e08b:	48 89 45 e0          	mov    %rax,-0x20(%rbp)
   1e08f:	48 83 7d e0 01       	cmpq   $0x1,-0x20(%rbp)
   1e094:	0f 94 c0             	sete   %al
   1e097:	0f b6 c0             	movzbl %al,%eax
   1e09a:	48 89 c7             	mov    %rax,%rdi
   1e09d:	e8 3e fe ff ff       	callq  1dee0 <prvCheckExpectedState>
   1e0a2:	48 8b 85 58 ff ff ff 	mov    -0xa8(%rbp),%rax
   1e0a9:	48 89 c7             	mov    %rax,%rdi
   1e0ac:	e8 43 b6 fe ff       	callq  96f4 <xStreamBufferSpacesAvailable>
   1e0b1:	48 89 85 70 ff ff ff 	mov    %rax,-0x90(%rbp)
   1e0b8:	48 8b 85 70 ff ff ff 	mov    -0x90(%rbp),%rax
   1e0bf:	48 3b 45 d0          	cmp    -0x30(%rbp),%rax
   1e0c3:	0f 94 c0             	sete   %al
   1e0c6:	0f b6 c0             	movzbl %al,%eax
   1e0c9:	48 89 c7             	mov    %rax,%rdi
   1e0cc:	e8 0f fe ff ff       	callq  1dee0 <prvCheckExpectedState>
   1e0d1:	48 8b 85 58 ff ff ff 	mov    -0xa8(%rbp),%rax
   1e0d8:	48 89 c7             	mov    %rax,%rdi
   1e0db:	e8 a3 b6 fe ff       	callq  9783 <xStreamBufferBytesAvailable>
   1e0e0:	48 89 85 70 ff ff ff 	mov    %rax,-0x90(%rbp)
   1e0e7:	48 8b 85 70 ff ff ff 	mov    -0x90(%rbp),%rax
   1e0ee:	48 3b 45 d8          	cmp    -0x28(%rbp),%rax
   1e0f2:	0f 94 c0             	sete   %al
   1e0f5:	0f b6 c0             	movzbl %al,%eax
   1e0f8:	48 89 c7             	mov    %rax,%rdi
   1e0fb:	e8 e0 fd ff ff       	callq  1dee0 <prvCheckExpectedState>
   1e100:	48 8b 85 58 ff ff ff 	mov    -0xa8(%rbp),%rax
   1e107:	48 89 c7             	mov    %rax,%rdi
   1e10a:	e8 60 c5 fe ff       	callq  a66f <xStreamBufferIsEmpty>
   1e10f:	48 85 c0             	test   %rax,%rax
   1e112:	0f 94 c0             	sete   %al
   1e115:	0f b6 c0             	movzbl %al,%eax
   1e118:	48 89 c7             	mov    %rax,%rdi
   1e11b:	e8 c0 fd ff ff       	callq  1dee0 <prvCheckExpectedState>
   1e120:	48 8b 85 58 ff ff ff 	mov    -0xa8(%rbp),%rax
   1e127:	48 89 c7             	mov    %rax,%rdi
   1e12a:	e8 a1 c5 fe ff       	callq  a6d0 <xStreamBufferIsFull>
   1e12f:	48 85 c0             	test   %rax,%rax
   1e132:	0f 94 c0             	sete   %al
   1e135:	0f b6 c0             	movzbl %al,%eax
   1e138:	48 89 c7             	mov    %rax,%rdi
   1e13b:	e8 a0 fd ff ff       	callq  1dee0 <prvCheckExpectedState>
   1e140:	48 83 6d d0 1d       	subq   $0x1d,-0x30(%rbp)
   1e145:	48 83 45 d8 1d       	addq   $0x1d,-0x28(%rbp)
   1e14a:	48 8b 75 c0          	mov    -0x40(%rbp),%rsi
   1e14e:	48 8b 85 58 ff ff ff 	mov    -0xa8(%rbp),%rax
   1e155:	b9 00 00 00 00       	mov    $0x0,%ecx
   1e15a:	ba 1d 00 00 00       	mov    $0x1d,%edx
   1e15f:	48 89 c7             	mov    %rax,%rdi
   1e162:	e8 62 b6 fe ff       	callq  97c9 <xStreamBufferSend>
   1e167:	48 89 45 e0          	mov    %rax,-0x20(%rbp)
   1e16b:	48 83 7d e0 1d       	cmpq   $0x1d,-0x20(%rbp)
   1e170:	0f 94 c0             	sete   %al
   1e173:	0f b6 c0             	movzbl %al,%eax
   1e176:	48 89 c7             	mov    %rax,%rdi
   1e179:	e8 62 fd ff ff       	callq  1dee0 <prvCheckExpectedState>
   1e17e:	48 8b 85 58 ff ff ff 	mov    -0xa8(%rbp),%rax
   1e185:	48 89 c7             	mov    %rax,%rdi
   1e188:	e8 67 b5 fe ff       	callq  96f4 <xStreamBufferSpacesAvailable>
   1e18d:	48 89 85 70 ff ff ff 	mov    %rax,-0x90(%rbp)
   1e194:	48 8b 85 70 ff ff ff 	mov    -0x90(%rbp),%rax
   1e19b:	48 3b 45 d0          	cmp    -0x30(%rbp),%rax
   1e19f:	0f 94 c0             	sete   %al
   1e1a2:	0f b6 c0             	movzbl %al,%eax
   1e1a5:	48 89 c7             	mov    %rax,%rdi
   1e1a8:	e8 33 fd ff ff       	callq  1dee0 <prvCheckExpectedState>
   1e1ad:	48 8b 85 58 ff ff ff 	mov    -0xa8(%rbp),%rax
   1e1b4:	48 89 c7             	mov    %rax,%rdi
   1e1b7:	e8 c7 b5 fe ff       	callq  9783 <xStreamBufferBytesAvailable>
   1e1bc:	48 89 85 70 ff ff ff 	mov    %rax,-0x90(%rbp)
   1e1c3:	48 8b 85 70 ff ff ff 	mov    -0x90(%rbp),%rax
   1e1ca:	48 3b 45 d8          	cmp    -0x28(%rbp),%rax
   1e1ce:	0f 94 c0             	sete   %al
   1e1d1:	0f b6 c0             	movzbl %al,%eax
   1e1d4:	48 89 c7             	mov    %rax,%rdi
   1e1d7:	e8 04 fd ff ff       	callq  1dee0 <prvCheckExpectedState>
   1e1dc:	48 8b 85 58 ff ff ff 	mov    -0xa8(%rbp),%rax
   1e1e3:	48 89 c7             	mov    %rax,%rdi
   1e1e6:	e8 84 c4 fe ff       	callq  a66f <xStreamBufferIsEmpty>
   1e1eb:	48 85 c0             	test   %rax,%rax
   1e1ee:	0f 94 c0             	sete   %al
   1e1f1:	0f b6 c0             	movzbl %al,%eax
   1e1f4:	48 89 c7             	mov    %rax,%rdi
   1e1f7:	e8 e4 fc ff ff       	callq  1dee0 <prvCheckExpectedState>
   1e1fc:	48 8b 85 58 ff ff ff 	mov    -0xa8(%rbp),%rax
   1e203:	48 89 c7             	mov    %rax,%rdi
   1e206:	e8 c5 c4 fe ff       	callq  a6d0 <xStreamBufferIsFull>
   1e20b:	48 83 f8 01          	cmp    $0x1,%rax
   1e20f:	0f 94 c0             	sete   %al
   1e212:	0f b6 c0             	movzbl %al,%eax
   1e215:	48 89 c7             	mov    %rax,%rdi
   1e218:	e8 c3 fc ff ff       	callq  1dee0 <prvCheckExpectedState>
   1e21d:	48 8b 75 c0          	mov    -0x40(%rbp),%rsi
   1e221:	48 8b 85 58 ff ff ff 	mov    -0xa8(%rbp),%rax
   1e228:	b9 00 00 00 00       	mov    $0x0,%ecx
   1e22d:	ba 01 00 00 00       	mov    $0x1,%edx
   1e232:	48 89 c7             	mov    %rax,%rdi
   1e235:	e8 8f b5 fe ff       	callq  97c9 <xStreamBufferSend>
   1e23a:	48 89 45 e0          	mov    %rax,-0x20(%rbp)
   1e23e:	48 83 7d e0 00       	cmpq   $0x0,-0x20(%rbp)
   1e243:	0f 94 c0             	sete   %al
   1e246:	0f b6 c0             	movzbl %al,%eax
   1e249:	48 89 c7             	mov    %rax,%rdi
   1e24c:	e8 8f fc ff ff       	callq  1dee0 <prvCheckExpectedState>
   1e251:	48 83 45 d0 01       	addq   $0x1,-0x30(%rbp)
   1e256:	48 83 6d d8 01       	subq   $0x1,-0x28(%rbp)
   1e25b:	48 8b 75 c0          	mov    -0x40(%rbp),%rsi
   1e25f:	48 8b 85 58 ff ff ff 	mov    -0xa8(%rbp),%rax
   1e266:	b9 00 00 00 00       	mov    $0x0,%ecx
   1e26b:	ba 01 00 00 00       	mov    $0x1,%edx
   1e270:	48 89 c7             	mov    %rax,%rdi
   1e273:	e8 7c bc fe ff       	callq  9ef4 <xStreamBufferReceive>
   1e278:	48 89 45 e0          	mov    %rax,-0x20(%rbp)
   1e27c:	48 83 7d e0 01       	cmpq   $0x1,-0x20(%rbp)
   1e281:	0f 94 c0             	sete   %al
   1e284:	0f b6 c0             	movzbl %al,%eax
   1e287:	48 89 c7             	mov    %rax,%rdi
   1e28a:	e8 51 fc ff ff       	callq  1dee0 <prvCheckExpectedState>
   1e28f:	48 8b 85 58 ff ff ff 	mov    -0xa8(%rbp),%rax
   1e296:	48 89 c7             	mov    %rax,%rdi
   1e299:	e8 56 b4 fe ff       	callq  96f4 <xStreamBufferSpacesAvailable>
   1e29e:	48 89 85 70 ff ff ff 	mov    %rax,-0x90(%rbp)
   1e2a5:	48 8b 85 70 ff ff ff 	mov    -0x90(%rbp),%rax
   1e2ac:	48 3b 45 d0          	cmp    -0x30(%rbp),%rax
   1e2b0:	0f 94 c0             	sete   %al
   1e2b3:	0f b6 c0             	movzbl %al,%eax
   1e2b6:	48 89 c7             	mov    %rax,%rdi
   1e2b9:	e8 22 fc ff ff       	callq  1dee0 <prvCheckExpectedState>
   1e2be:	48 8b 85 58 ff ff ff 	mov    -0xa8(%rbp),%rax
   1e2c5:	48 89 c7             	mov    %rax,%rdi
   1e2c8:	e8 b6 b4 fe ff       	callq  9783 <xStreamBufferBytesAvailable>
   1e2cd:	48 89 85 70 ff ff ff 	mov    %rax,-0x90(%rbp)
   1e2d4:	48 8b 85 70 ff ff ff 	mov    -0x90(%rbp),%rax
   1e2db:	48 3b 45 d8          	cmp    -0x28(%rbp),%rax
   1e2df:	0f 94 c0             	sete   %al
   1e2e2:	0f b6 c0             	movzbl %al,%eax
   1e2e5:	48 89 c7             	mov    %rax,%rdi
   1e2e8:	e8 f3 fb ff ff       	callq  1dee0 <prvCheckExpectedState>
   1e2ed:	48 8b 85 58 ff ff ff 	mov    -0xa8(%rbp),%rax
   1e2f4:	48 89 c7             	mov    %rax,%rdi
   1e2f7:	e8 73 c3 fe ff       	callq  a66f <xStreamBufferIsEmpty>
   1e2fc:	48 85 c0             	test   %rax,%rax
   1e2ff:	0f 94 c0             	sete   %al
   1e302:	0f b6 c0             	movzbl %al,%eax
   1e305:	48 89 c7             	mov    %rax,%rdi
   1e308:	e8 d3 fb ff ff       	callq  1dee0 <prvCheckExpectedState>
   1e30d:	48 8b 85 58 ff ff ff 	mov    -0xa8(%rbp),%rax
   1e314:	48 89 c7             	mov    %rax,%rdi
   1e317:	e8 b4 c3 fe ff       	callq  a6d0 <xStreamBufferIsFull>
   1e31c:	48 85 c0             	test   %rax,%rax
   1e31f:	0f 94 c0             	sete   %al
   1e322:	0f b6 c0             	movzbl %al,%eax
   1e325:	48 89 c7             	mov    %rax,%rdi
   1e328:	e8 b3 fb ff ff       	callq  1dee0 <prvCheckExpectedState>
   1e32d:	48 83 6d d0 01       	subq   $0x1,-0x30(%rbp)
   1e332:	48 83 45 d8 01       	addq   $0x1,-0x28(%rbp)
   1e337:	48 8b 75 c0          	mov    -0x40(%rbp),%rsi
   1e33b:	48 8b 85 58 ff ff ff 	mov    -0xa8(%rbp),%rax
   1e342:	b9 00 00 00 00       	mov    $0x0,%ecx
   1e347:	ba 01 00 00 00       	mov    $0x1,%edx
   1e34c:	48 89 c7             	mov    %rax,%rdi
   1e34f:	e8 75 b4 fe ff       	callq  97c9 <xStreamBufferSend>
   1e354:	48 89 45 e0          	mov    %rax,-0x20(%rbp)
   1e358:	48 83 7d e0 01       	cmpq   $0x1,-0x20(%rbp)
   1e35d:	0f 94 c0             	sete   %al
   1e360:	0f b6 c0             	movzbl %al,%eax
   1e363:	48 89 c7             	mov    %rax,%rdi
   1e366:	e8 75 fb ff ff       	callq  1dee0 <prvCheckExpectedState>
   1e36b:	48 8b 85 58 ff ff ff 	mov    -0xa8(%rbp),%rax
   1e372:	48 89 c7             	mov    %rax,%rdi
   1e375:	e8 7a b3 fe ff       	callq  96f4 <xStreamBufferSpacesAvailable>
   1e37a:	48 89 85 70 ff ff ff 	mov    %rax,-0x90(%rbp)
   1e381:	48 8b 85 70 ff ff ff 	mov    -0x90(%rbp),%rax
   1e388:	48 3b 45 d0          	cmp    -0x30(%rbp),%rax
   1e38c:	0f 94 c0             	sete   %al
   1e38f:	0f b6 c0             	movzbl %al,%eax
   1e392:	48 89 c7             	mov    %rax,%rdi
   1e395:	e8 46 fb ff ff       	callq  1dee0 <prvCheckExpectedState>
   1e39a:	48 8b 85 58 ff ff ff 	mov    -0xa8(%rbp),%rax
   1e3a1:	48 89 c7             	mov    %rax,%rdi
   1e3a4:	e8 da b3 fe ff       	callq  9783 <xStreamBufferBytesAvailable>
   1e3a9:	48 89 85 70 ff ff ff 	mov    %rax,-0x90(%rbp)
   1e3b0:	48 8b 85 70 ff ff ff 	mov    -0x90(%rbp),%rax
   1e3b7:	48 3b 45 d8          	cmp    -0x28(%rbp),%rax
   1e3bb:	0f 94 c0             	sete   %al
   1e3be:	0f b6 c0             	movzbl %al,%eax
   1e3c1:	48 89 c7             	mov    %rax,%rdi
   1e3c4:	e8 17 fb ff ff       	callq  1dee0 <prvCheckExpectedState>
   1e3c9:	48 8b 85 58 ff ff ff 	mov    -0xa8(%rbp),%rax
   1e3d0:	48 89 c7             	mov    %rax,%rdi
   1e3d3:	e8 97 c2 fe ff       	callq  a66f <xStreamBufferIsEmpty>
   1e3d8:	48 85 c0             	test   %rax,%rax
   1e3db:	0f 94 c0             	sete   %al
   1e3de:	0f b6 c0             	movzbl %al,%eax
   1e3e1:	48 89 c7             	mov    %rax,%rdi
   1e3e4:	e8 f7 fa ff ff       	callq  1dee0 <prvCheckExpectedState>
   1e3e9:	48 8b 85 58 ff ff ff 	mov    -0xa8(%rbp),%rax
   1e3f0:	48 89 c7             	mov    %rax,%rdi
   1e3f3:	e8 d8 c2 fe ff       	callq  a6d0 <xStreamBufferIsFull>
   1e3f8:	48 83 f8 01          	cmp    $0x1,%rax
   1e3fc:	0f 94 c0             	sete   %al
   1e3ff:	0f b6 c0             	movzbl %al,%eax
   1e402:	48 89 c7             	mov    %rax,%rdi
   1e405:	e8 d6 fa ff ff       	callq  1dee0 <prvCheckExpectedState>
   1e40a:	48 83 45 d0 1d       	addq   $0x1d,-0x30(%rbp)
   1e40f:	48 83 6d d8 1d       	subq   $0x1d,-0x28(%rbp)
   1e414:	48 8b 75 c0          	mov    -0x40(%rbp),%rsi
   1e418:	48 8b 85 58 ff ff ff 	mov    -0xa8(%rbp),%rax
   1e41f:	b9 00 00 00 00       	mov    $0x0,%ecx
   1e424:	ba 1d 00 00 00       	mov    $0x1d,%edx
   1e429:	48 89 c7             	mov    %rax,%rdi
   1e42c:	e8 c3 ba fe ff       	callq  9ef4 <xStreamBufferReceive>
   1e431:	48 89 45 e0          	mov    %rax,-0x20(%rbp)
   1e435:	48 83 7d e0 1d       	cmpq   $0x1d,-0x20(%rbp)
   1e43a:	0f 94 c0             	sete   %al
   1e43d:	0f b6 c0             	movzbl %al,%eax
   1e440:	48 89 c7             	mov    %rax,%rdi
   1e443:	e8 98 fa ff ff       	callq  1dee0 <prvCheckExpectedState>
   1e448:	48 8b 85 58 ff ff ff 	mov    -0xa8(%rbp),%rax
   1e44f:	48 89 c7             	mov    %rax,%rdi
   1e452:	e8 9d b2 fe ff       	callq  96f4 <xStreamBufferSpacesAvailable>
   1e457:	48 89 85 70 ff ff ff 	mov    %rax,-0x90(%rbp)
   1e45e:	48 8b 85 70 ff ff ff 	mov    -0x90(%rbp),%rax
   1e465:	48 3b 45 d0          	cmp    -0x30(%rbp),%rax
   1e469:	0f 94 c0             	sete   %al
   1e46c:	0f b6 c0             	movzbl %al,%eax
   1e46f:	48 89 c7             	mov    %rax,%rdi
   1e472:	e8 69 fa ff ff       	callq  1dee0 <prvCheckExpectedState>
   1e477:	48 8b 85 58 ff ff ff 	mov    -0xa8(%rbp),%rax
   1e47e:	48 89 c7             	mov    %rax,%rdi
   1e481:	e8 fd b2 fe ff       	callq  9783 <xStreamBufferBytesAvailable>
   1e486:	48 89 85 70 ff ff ff 	mov    %rax,-0x90(%rbp)
   1e48d:	48 8b 85 70 ff ff ff 	mov    -0x90(%rbp),%rax
   1e494:	48 3b 45 d8          	cmp    -0x28(%rbp),%rax
   1e498:	0f 94 c0             	sete   %al
   1e49b:	0f b6 c0             	movzbl %al,%eax
   1e49e:	48 89 c7             	mov    %rax,%rdi
   1e4a1:	e8 3a fa ff ff       	callq  1dee0 <prvCheckExpectedState>
   1e4a6:	48 8b 85 58 ff ff ff 	mov    -0xa8(%rbp),%rax
   1e4ad:	48 89 c7             	mov    %rax,%rdi
   1e4b0:	e8 ba c1 fe ff       	callq  a66f <xStreamBufferIsEmpty>
   1e4b5:	48 85 c0             	test   %rax,%rax
   1e4b8:	0f 94 c0             	sete   %al
   1e4bb:	0f b6 c0             	movzbl %al,%eax
   1e4be:	48 89 c7             	mov    %rax,%rdi
   1e4c1:	e8 1a fa ff ff       	callq  1dee0 <prvCheckExpectedState>
   1e4c6:	48 8b 85 58 ff ff ff 	mov    -0xa8(%rbp),%rax
   1e4cd:	48 89 c7             	mov    %rax,%rdi
   1e4d0:	e8 fb c1 fe ff       	callq  a6d0 <xStreamBufferIsFull>
   1e4d5:	48 85 c0             	test   %rax,%rax
   1e4d8:	0f 94 c0             	sete   %al
   1e4db:	0f b6 c0             	movzbl %al,%eax
   1e4de:	48 89 c7             	mov    %rax,%rdi
   1e4e1:	e8 fa f9 ff ff       	callq  1dee0 <prvCheckExpectedState>
   1e4e6:	48 83 45 d0 01       	addq   $0x1,-0x30(%rbp)
   1e4eb:	48 83 6d d8 01       	subq   $0x1,-0x28(%rbp)
   1e4f0:	48 8b 75 c0          	mov    -0x40(%rbp),%rsi
   1e4f4:	48 8b 85 58 ff ff ff 	mov    -0xa8(%rbp),%rax
   1e4fb:	b9 00 00 00 00       	mov    $0x0,%ecx
   1e500:	ba 01 00 00 00       	mov    $0x1,%edx
   1e505:	48 89 c7             	mov    %rax,%rdi
   1e508:	e8 e7 b9 fe ff       	callq  9ef4 <xStreamBufferReceive>
   1e50d:	48 89 45 e0          	mov    %rax,-0x20(%rbp)
   1e511:	48 83 7d e0 01       	cmpq   $0x1,-0x20(%rbp)
   1e516:	0f 94 c0             	sete   %al
   1e519:	0f b6 c0             	movzbl %al,%eax
   1e51c:	48 89 c7             	mov    %rax,%rdi
   1e51f:	e8 bc f9 ff ff       	callq  1dee0 <prvCheckExpectedState>
   1e524:	48 8b 85 58 ff ff ff 	mov    -0xa8(%rbp),%rax
   1e52b:	48 89 c7             	mov    %rax,%rdi
   1e52e:	e8 c1 b1 fe ff       	callq  96f4 <xStreamBufferSpacesAvailable>
   1e533:	48 89 85 70 ff ff ff 	mov    %rax,-0x90(%rbp)
   1e53a:	48 8b 85 70 ff ff ff 	mov    -0x90(%rbp),%rax
   1e541:	48 3b 45 d0          	cmp    -0x30(%rbp),%rax
   1e545:	0f 94 c0             	sete   %al
   1e548:	0f b6 c0             	movzbl %al,%eax
   1e54b:	48 89 c7             	mov    %rax,%rdi
   1e54e:	e8 8d f9 ff ff       	callq  1dee0 <prvCheckExpectedState>
   1e553:	48 8b 85 58 ff ff ff 	mov    -0xa8(%rbp),%rax
   1e55a:	48 89 c7             	mov    %rax,%rdi
   1e55d:	e8 21 b2 fe ff       	callq  9783 <xStreamBufferBytesAvailable>
   1e562:	48 89 85 70 ff ff ff 	mov    %rax,-0x90(%rbp)
   1e569:	48 8b 85 70 ff ff ff 	mov    -0x90(%rbp),%rax
   1e570:	48 3b 45 d8          	cmp    -0x28(%rbp),%rax
   1e574:	0f 94 c0             	sete   %al
   1e577:	0f b6 c0             	movzbl %al,%eax
   1e57a:	48 89 c7             	mov    %rax,%rdi
   1e57d:	e8 5e f9 ff ff       	callq  1dee0 <prvCheckExpectedState>
   1e582:	48 8b 85 58 ff ff ff 	mov    -0xa8(%rbp),%rax
   1e589:	48 89 c7             	mov    %rax,%rdi
   1e58c:	e8 de c0 fe ff       	callq  a66f <xStreamBufferIsEmpty>
   1e591:	48 83 f8 01          	cmp    $0x1,%rax
   1e595:	0f 94 c0             	sete   %al
   1e598:	0f b6 c0             	movzbl %al,%eax
   1e59b:	48 89 c7             	mov    %rax,%rdi
   1e59e:	e8 3d f9 ff ff       	callq  1dee0 <prvCheckExpectedState>
   1e5a3:	48 8b 85 58 ff ff ff 	mov    -0xa8(%rbp),%rax
   1e5aa:	48 89 c7             	mov    %rax,%rdi
   1e5ad:	e8 1e c1 fe ff       	callq  a6d0 <xStreamBufferIsFull>
   1e5b2:	48 85 c0             	test   %rax,%rax
   1e5b5:	0f 94 c0             	sete   %al
   1e5b8:	0f b6 c0             	movzbl %al,%eax
   1e5bb:	48 89 c7             	mov    %rax,%rdi
   1e5be:	e8 1d f9 ff ff       	callq  1dee0 <prvCheckExpectedState>
   1e5c3:	48 8b 55 80          	mov    -0x80(%rbp),%rdx
   1e5c7:	48 8b 75 c0          	mov    -0x40(%rbp),%rsi
   1e5cb:	48 8b 85 58 ff ff ff 	mov    -0xa8(%rbp),%rax
   1e5d2:	48 c7 c1 ff ff ff ff 	mov    $0xffffffffffffffff,%rcx
   1e5d9:	48 89 c7             	mov    %rax,%rdi
   1e5dc:	e8 e8 b1 fe ff       	callq  97c9 <xStreamBufferSend>
   1e5e1:	48 89 45 e0          	mov    %rax,-0x20(%rbp)
   1e5e5:	48 c7 45 d0 00 00 00 	movq   $0x0,-0x30(%rbp)
   1e5ec:	00 
   1e5ed:	48 8b 45 80          	mov    -0x80(%rbp),%rax
   1e5f1:	48 83 e8 01          	sub    $0x1,%rax
   1e5f5:	48 39 45 e0          	cmp    %rax,-0x20(%rbp)
   1e5f9:	0f 94 c0             	sete   %al
   1e5fc:	0f b6 c0             	movzbl %al,%eax
   1e5ff:	48 89 c7             	mov    %rax,%rdi
   1e602:	e8 d9 f8 ff ff       	callq  1dee0 <prvCheckExpectedState>
   1e607:	48 8b 85 58 ff ff ff 	mov    -0xa8(%rbp),%rax
   1e60e:	48 89 c7             	mov    %rax,%rdi
   1e611:	e8 de b0 fe ff       	callq  96f4 <xStreamBufferSpacesAvailable>
   1e616:	48 89 85 70 ff ff ff 	mov    %rax,-0x90(%rbp)
   1e61d:	48 8b 85 70 ff ff ff 	mov    -0x90(%rbp),%rax
   1e624:	48 3b 45 d0          	cmp    -0x30(%rbp),%rax
   1e628:	0f 94 c0             	sete   %al
   1e62b:	0f b6 c0             	movzbl %al,%eax
   1e62e:	48 89 c7             	mov    %rax,%rdi
   1e631:	e8 aa f8 ff ff       	callq  1dee0 <prvCheckExpectedState>
   1e636:	48 8b 85 58 ff ff ff 	mov    -0xa8(%rbp),%rax
   1e63d:	48 89 c7             	mov    %rax,%rdi
   1e640:	e8 2a c0 fe ff       	callq  a66f <xStreamBufferIsEmpty>
   1e645:	48 85 c0             	test   %rax,%rax
   1e648:	0f 94 c0             	sete   %al
   1e64b:	0f b6 c0             	movzbl %al,%eax
   1e64e:	48 89 c7             	mov    %rax,%rdi
   1e651:	e8 8a f8 ff ff       	callq  1dee0 <prvCheckExpectedState>
   1e656:	48 8b 85 58 ff ff ff 	mov    -0xa8(%rbp),%rax
   1e65d:	48 89 c7             	mov    %rax,%rdi
   1e660:	e8 6b c0 fe ff       	callq  a6d0 <xStreamBufferIsFull>
   1e665:	48 83 f8 01          	cmp    $0x1,%rax
   1e669:	0f 94 c0             	sete   %al
   1e66c:	0f b6 c0             	movzbl %al,%eax
   1e66f:	48 89 c7             	mov    %rax,%rdi
   1e672:	e8 69 f8 ff ff       	callq  1dee0 <prvCheckExpectedState>
   1e677:	48 8b 55 80          	mov    -0x80(%rbp),%rdx
   1e67b:	48 8b 75 c0          	mov    -0x40(%rbp),%rsi
   1e67f:	48 8b 85 58 ff ff ff 	mov    -0xa8(%rbp),%rax
   1e686:	48 c7 c1 ff ff ff ff 	mov    $0xffffffffffffffff,%rcx
   1e68d:	48 89 c7             	mov    %rax,%rdi
   1e690:	e8 5f b8 fe ff       	callq  9ef4 <xStreamBufferReceive>
   1e695:	48 89 45 e0          	mov    %rax,-0x20(%rbp)
   1e699:	48 8b 45 80          	mov    -0x80(%rbp),%rax
   1e69d:	48 83 e8 01          	sub    $0x1,%rax
   1e6a1:	48 39 45 e0          	cmp    %rax,-0x20(%rbp)
   1e6a5:	0f 94 c0             	sete   %al
   1e6a8:	0f b6 c0             	movzbl %al,%eax
   1e6ab:	48 89 c7             	mov    %rax,%rdi
   1e6ae:	e8 2d f8 ff ff       	callq  1dee0 <prvCheckExpectedState>
   1e6b3:	48 8b 85 58 ff ff ff 	mov    -0xa8(%rbp),%rax
   1e6ba:	48 89 c7             	mov    %rax,%rdi
   1e6bd:	e8 32 b0 fe ff       	callq  96f4 <xStreamBufferSpacesAvailable>
   1e6c2:	48 89 85 70 ff ff ff 	mov    %rax,-0x90(%rbp)
   1e6c9:	48 83 bd 70 ff ff ff 	cmpq   $0x1e,-0x90(%rbp)
   1e6d0:	1e 
   1e6d1:	0f 94 c0             	sete   %al
   1e6d4:	0f b6 c0             	movzbl %al,%eax
   1e6d7:	48 89 c7             	mov    %rax,%rdi
   1e6da:	e8 01 f8 ff ff       	callq  1dee0 <prvCheckExpectedState>
   1e6df:	48 8b 85 58 ff ff ff 	mov    -0xa8(%rbp),%rax
   1e6e6:	48 89 c7             	mov    %rax,%rdi
   1e6e9:	e8 95 b0 fe ff       	callq  9783 <xStreamBufferBytesAvailable>
   1e6ee:	48 89 85 70 ff ff ff 	mov    %rax,-0x90(%rbp)
   1e6f5:	48 83 bd 70 ff ff ff 	cmpq   $0x0,-0x90(%rbp)
   1e6fc:	00 
   1e6fd:	0f 94 c0             	sete   %al
   1e700:	0f b6 c0             	movzbl %al,%eax
   1e703:	48 89 c7             	mov    %rax,%rdi
   1e706:	e8 d5 f7 ff ff       	callq  1dee0 <prvCheckExpectedState>
   1e70b:	48 8b 85 58 ff ff ff 	mov    -0xa8(%rbp),%rax
   1e712:	48 89 c7             	mov    %rax,%rdi
   1e715:	e8 55 bf fe ff       	callq  a66f <xStreamBufferIsEmpty>
   1e71a:	48 83 f8 01          	cmp    $0x1,%rax
   1e71e:	0f 94 c0             	sete   %al
   1e721:	0f b6 c0             	movzbl %al,%eax
   1e724:	48 89 c7             	mov    %rax,%rdi
   1e727:	e8 b4 f7 ff ff       	callq  1dee0 <prvCheckExpectedState>
   1e72c:	48 8b 85 58 ff ff ff 	mov    -0xa8(%rbp),%rax
   1e733:	48 89 c7             	mov    %rax,%rdi
   1e736:	e8 95 bf fe ff       	callq  a6d0 <xStreamBufferIsFull>
   1e73b:	48 85 c0             	test   %rax,%rax
   1e73e:	0f 94 c0             	sete   %al
   1e741:	0f b6 c0             	movzbl %al,%eax
   1e744:	48 89 c7             	mov    %rax,%rdi
   1e747:	e8 94 f7 ff ff       	callq  1dee0 <prvCheckExpectedState>
   1e74c:	48 8b 85 58 ff ff ff 	mov    -0xa8(%rbp),%rax
   1e753:	48 89 c7             	mov    %rax,%rdi
   1e756:	e8 99 af fe ff       	callq  96f4 <xStreamBufferSpacesAvailable>
   1e75b:	48 89 85 70 ff ff ff 	mov    %rax,-0x90(%rbp)
   1e762:	48 c7 85 68 ff ff ff 	movq   $0x0,-0x98(%rbp)
   1e769:	00 00 00 00 
   1e76d:	e9 f0 00 00 00       	jmpq   1e862 <prvSingleTaskTests+0x945>
   1e772:	48 8b 85 58 ff ff ff 	mov    -0xa8(%rbp),%rax
   1e779:	48 89 c7             	mov    %rax,%rdi
   1e77c:	e8 4f bf fe ff       	callq  a6d0 <xStreamBufferIsFull>
   1e781:	48 85 c0             	test   %rax,%rax
   1e784:	0f 94 c0             	sete   %al
   1e787:	0f b6 c0             	movzbl %al,%eax
   1e78a:	48 89 c7             	mov    %rax,%rdi
   1e78d:	e8 4e f7 ff ff       	callq  1dee0 <prvCheckExpectedState>
   1e792:	48 8b 85 68 ff ff ff 	mov    -0x98(%rbp),%rax
   1e799:	8d 48 30             	lea    0x30(%rax),%ecx
   1e79c:	48 8b 55 88          	mov    -0x78(%rbp),%rdx
   1e7a0:	48 8b 45 c0          	mov    -0x40(%rbp),%rax
   1e7a4:	89 ce                	mov    %ecx,%esi
   1e7a6:	48 89 c7             	mov    %rax,%rdi
   1e7a9:	e8 62 3d fe ff       	callq  2510 <memset@plt>
   1e7ae:	e8 1c 46 ff ff       	callq  12dcf <vPortEnterCritical>
   1e7b3:	48 8b 55 88          	mov    -0x78(%rbp),%rdx
   1e7b7:	48 8b 75 c0          	mov    -0x40(%rbp),%rsi
   1e7bb:	48 8b 85 58 ff ff ff 	mov    -0xa8(%rbp),%rax
   1e7c2:	b9 00 00 00 00       	mov    $0x0,%ecx
   1e7c7:	48 89 c7             	mov    %rax,%rdi
   1e7ca:	e8 2f b4 fe ff       	callq  9bfe <xStreamBufferSendFromISR>
   1e7cf:	48 89 45 e0          	mov    %rax,-0x20(%rbp)
   1e7d3:	e8 25 46 ff ff       	callq  12dfd <vPortExitCritical>
   1e7d8:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
   1e7dc:	48 3b 45 88          	cmp    -0x78(%rbp),%rax
   1e7e0:	0f 94 c0             	sete   %al
   1e7e3:	0f b6 c0             	movzbl %al,%eax
   1e7e6:	48 89 c7             	mov    %rax,%rdi
   1e7e9:	e8 f2 f6 ff ff       	callq  1dee0 <prvCheckExpectedState>
   1e7ee:	48 8b 45 88          	mov    -0x78(%rbp),%rax
   1e7f2:	48 29 85 70 ff ff ff 	sub    %rax,-0x90(%rbp)
   1e7f9:	48 8b 85 58 ff ff ff 	mov    -0xa8(%rbp),%rax
   1e800:	48 89 c7             	mov    %rax,%rdi
   1e803:	e8 ec ae fe ff       	callq  96f4 <xStreamBufferSpacesAvailable>
   1e808:	48 89 45 e0          	mov    %rax,-0x20(%rbp)
   1e80c:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
   1e810:	48 3b 85 70 ff ff ff 	cmp    -0x90(%rbp),%rax
   1e817:	0f 94 c0             	sete   %al
   1e81a:	0f b6 c0             	movzbl %al,%eax
   1e81d:	48 89 c7             	mov    %rax,%rdi
   1e820:	e8 bb f6 ff ff       	callq  1dee0 <prvCheckExpectedState>
   1e825:	48 8b 85 58 ff ff ff 	mov    -0xa8(%rbp),%rax
   1e82c:	48 89 c7             	mov    %rax,%rdi
   1e82f:	e8 4f af fe ff       	callq  9783 <xStreamBufferBytesAvailable>
   1e834:	48 89 45 e0          	mov    %rax,-0x20(%rbp)
   1e838:	48 8b 85 68 ff ff ff 	mov    -0x98(%rbp),%rax
   1e83f:	48 83 c0 01          	add    $0x1,%rax
   1e843:	48 0f af 45 88       	imul   -0x78(%rbp),%rax
   1e848:	48 39 45 e0          	cmp    %rax,-0x20(%rbp)
   1e84c:	0f 94 c0             	sete   %al
   1e84f:	0f b6 c0             	movzbl %al,%eax
   1e852:	48 89 c7             	mov    %rax,%rdi
   1e855:	e8 86 f6 ff ff       	callq  1dee0 <prvCheckExpectedState>
   1e85a:	48 83 85 68 ff ff ff 	addq   $0x1,-0x98(%rbp)
   1e861:	01 
   1e862:	48 8b 85 68 ff ff ff 	mov    -0x98(%rbp),%rax
   1e869:	48 3b 85 78 ff ff ff 	cmp    -0x88(%rbp),%rax
   1e870:	0f 82 fc fe ff ff    	jb     1e772 <prvSingleTaskTests+0x855>
   1e876:	48 8b 85 58 ff ff ff 	mov    -0xa8(%rbp),%rax
   1e87d:	48 89 c7             	mov    %rax,%rdi
   1e880:	e8 4b be fe ff       	callq  a6d0 <xStreamBufferIsFull>
   1e885:	48 83 f8 01          	cmp    $0x1,%rax
   1e889:	0f 94 c0             	sete   %al
   1e88c:	0f b6 c0             	movzbl %al,%eax
   1e88f:	48 89 c7             	mov    %rax,%rdi
   1e892:	e8 49 f6 ff ff       	callq  1dee0 <prvCheckExpectedState>
   1e897:	48 8b 75 c0          	mov    -0x40(%rbp),%rsi
   1e89b:	48 8b 85 58 ff ff ff 	mov    -0xa8(%rbp),%rax
   1e8a2:	b9 00 00 00 00       	mov    $0x0,%ecx
   1e8a7:	ba 01 00 00 00       	mov    $0x1,%edx
   1e8ac:	48 89 c7             	mov    %rax,%rdi
   1e8af:	e8 15 af fe ff       	callq  97c9 <xStreamBufferSend>
   1e8b4:	48 89 45 e0          	mov    %rax,-0x20(%rbp)
   1e8b8:	48 83 7d e0 00       	cmpq   $0x0,-0x20(%rbp)
   1e8bd:	0f 94 c0             	sete   %al
   1e8c0:	0f b6 c0             	movzbl %al,%eax
   1e8c3:	48 89 c7             	mov    %rax,%rdi
   1e8c6:	e8 15 f6 ff ff       	callq  1dee0 <prvCheckExpectedState>
   1e8cb:	bf 00 00 00 00       	mov    $0x0,%edi
   1e8d0:	e8 d4 e0 fe ff       	callq  c9a9 <uxTaskPriorityGet>
   1e8d5:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
   1e8d9:	be 06 00 00 00       	mov    $0x6,%esi
   1e8de:	bf 00 00 00 00       	mov    $0x0,%edi
   1e8e3:	e8 54 e1 fe ff       	callq  ca3c <vTaskPrioritySet>
   1e8e8:	e8 ab ef fe ff       	callq  d898 <xTaskGetTickCount>
   1e8ed:	48 89 45 f0          	mov    %rax,-0x10(%rbp)
   1e8f1:	48 8b 55 a0          	mov    -0x60(%rbp),%rdx
   1e8f5:	48 8b 75 c0          	mov    -0x40(%rbp),%rsi
   1e8f9:	48 8b 85 58 ff ff ff 	mov    -0xa8(%rbp),%rax
   1e900:	48 89 d1             	mov    %rdx,%rcx
   1e903:	ba 01 00 00 00       	mov    $0x1,%edx
   1e908:	48 89 c7             	mov    %rax,%rdi
   1e90b:	e8 b9 ae fe ff       	callq  97c9 <xStreamBufferSend>
   1e910:	48 89 45 e0          	mov    %rax,-0x20(%rbp)
   1e914:	e8 7f ef fe ff       	callq  d898 <xTaskGetTickCount>
   1e919:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
   1e91d:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
   1e921:	48 89 c6             	mov    %rax,%rsi
   1e924:	bf 00 00 00 00       	mov    $0x0,%edi
   1e929:	e8 0e e1 fe ff       	callq  ca3c <vTaskPrioritySet>
   1e92e:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   1e932:	48 2b 45 f0          	sub    -0x10(%rbp),%rax
   1e936:	48 39 45 a0          	cmp    %rax,-0x60(%rbp)
   1e93a:	0f 96 c0             	setbe  %al
   1e93d:	0f b6 c0             	movzbl %al,%eax
   1e940:	48 89 c7             	mov    %rax,%rdi
   1e943:	e8 98 f5 ff ff       	callq  1dee0 <prvCheckExpectedState>
   1e948:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   1e94c:	48 2b 45 f0          	sub    -0x10(%rbp),%rax
   1e950:	48 8b 4d a0          	mov    -0x60(%rbp),%rcx
   1e954:	48 8b 55 a8          	mov    -0x58(%rbp),%rdx
   1e958:	48 01 ca             	add    %rcx,%rdx
   1e95b:	48 39 d0             	cmp    %rdx,%rax
   1e95e:	0f 92 c0             	setb   %al
   1e961:	0f b6 c0             	movzbl %al,%eax
   1e964:	48 89 c7             	mov    %rax,%rdi
   1e967:	e8 74 f5 ff ff       	callq  1dee0 <prvCheckExpectedState>
   1e96c:	48 83 7d e0 00       	cmpq   $0x0,-0x20(%rbp)
   1e971:	0f 94 c0             	sete   %al
   1e974:	0f b6 c0             	movzbl %al,%eax
   1e977:	48 89 c7             	mov    %rax,%rdi
   1e97a:	e8 61 f5 ff ff       	callq  1dee0 <prvCheckExpectedState>
   1e97f:	48 c7 85 68 ff ff ff 	movq   $0x0,-0x98(%rbp)
   1e986:	00 00 00 00 
   1e98a:	e9 f3 00 00 00       	jmpq   1ea82 <prvSingleTaskTests+0xb65>
   1e98f:	48 8b 85 68 ff ff ff 	mov    -0x98(%rbp),%rax
   1e996:	8d 48 30             	lea    0x30(%rax),%ecx
   1e999:	48 8b 55 88          	mov    -0x78(%rbp),%rdx
   1e99d:	48 8b 45 c0          	mov    -0x40(%rbp),%rax
   1e9a1:	89 ce                	mov    %ecx,%esi
   1e9a3:	48 89 c7             	mov    %rax,%rdi
   1e9a6:	e8 65 3b fe ff       	callq  2510 <memset@plt>
   1e9ab:	e8 1f 44 ff ff       	callq  12dcf <vPortEnterCritical>
   1e9b0:	48 8b 55 88          	mov    -0x78(%rbp),%rdx
   1e9b4:	48 8b 75 c8          	mov    -0x38(%rbp),%rsi
   1e9b8:	48 8b 85 58 ff ff ff 	mov    -0xa8(%rbp),%rax
   1e9bf:	b9 00 00 00 00       	mov    $0x0,%ecx
   1e9c4:	48 89 c7             	mov    %rax,%rdi
   1e9c7:	e8 88 b9 fe ff       	callq  a354 <xStreamBufferReceiveFromISR>
   1e9cc:	48 89 45 e0          	mov    %rax,-0x20(%rbp)
   1e9d0:	e8 28 44 ff ff       	callq  12dfd <vPortExitCritical>
   1e9d5:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
   1e9d9:	48 3b 45 88          	cmp    -0x78(%rbp),%rax
   1e9dd:	0f 94 c0             	sete   %al
   1e9e0:	0f b6 c0             	movzbl %al,%eax
   1e9e3:	48 89 c7             	mov    %rax,%rdi
   1e9e6:	e8 f5 f4 ff ff       	callq  1dee0 <prvCheckExpectedState>
   1e9eb:	48 8b 55 88          	mov    -0x78(%rbp),%rdx
   1e9ef:	48 8b 4d c8          	mov    -0x38(%rbp),%rcx
   1e9f3:	48 8b 45 c0          	mov    -0x40(%rbp),%rax
   1e9f7:	48 89 ce             	mov    %rcx,%rsi
   1e9fa:	48 89 c7             	mov    %rax,%rdi
   1e9fd:	e8 1e 3b fe ff       	callq  2520 <memcmp@plt>
   1ea02:	85 c0                	test   %eax,%eax
   1ea04:	0f 94 c0             	sete   %al
   1ea07:	0f b6 c0             	movzbl %al,%eax
   1ea0a:	48 89 c7             	mov    %rax,%rdi
   1ea0d:	e8 ce f4 ff ff       	callq  1dee0 <prvCheckExpectedState>
   1ea12:	48 8b 45 88          	mov    -0x78(%rbp),%rax
   1ea16:	48 01 85 70 ff ff ff 	add    %rax,-0x90(%rbp)
   1ea1d:	48 8b 85 58 ff ff ff 	mov    -0xa8(%rbp),%rax
   1ea24:	48 89 c7             	mov    %rax,%rdi
   1ea27:	e8 c8 ac fe ff       	callq  96f4 <xStreamBufferSpacesAvailable>
   1ea2c:	48 89 45 e0          	mov    %rax,-0x20(%rbp)
   1ea30:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
   1ea34:	48 3b 85 70 ff ff ff 	cmp    -0x90(%rbp),%rax
   1ea3b:	0f 94 c0             	sete   %al
   1ea3e:	0f b6 c0             	movzbl %al,%eax
   1ea41:	48 89 c7             	mov    %rax,%rdi
   1ea44:	e8 97 f4 ff ff       	callq  1dee0 <prvCheckExpectedState>
   1ea49:	48 8b 85 58 ff ff ff 	mov    -0xa8(%rbp),%rax
   1ea50:	48 89 c7             	mov    %rax,%rdi
   1ea53:	e8 2b ad fe ff       	callq  9783 <xStreamBufferBytesAvailable>
   1ea58:	48 89 45 e0          	mov    %rax,-0x20(%rbp)
   1ea5c:	b8 1e 00 00 00       	mov    $0x1e,%eax
   1ea61:	48 2b 85 70 ff ff ff 	sub    -0x90(%rbp),%rax
   1ea68:	48 39 45 e0          	cmp    %rax,-0x20(%rbp)
   1ea6c:	0f 94 c0             	sete   %al
   1ea6f:	0f b6 c0             	movzbl %al,%eax
   1ea72:	48 89 c7             	mov    %rax,%rdi
   1ea75:	e8 66 f4 ff ff       	callq  1dee0 <prvCheckExpectedState>
   1ea7a:	48 83 85 68 ff ff ff 	addq   $0x1,-0x98(%rbp)
   1ea81:	01 
   1ea82:	48 8b 85 68 ff ff ff 	mov    -0x98(%rbp),%rax
   1ea89:	48 3b 85 78 ff ff ff 	cmp    -0x88(%rbp),%rax
   1ea90:	0f 82 f9 fe ff ff    	jb     1e98f <prvSingleTaskTests+0xa72>
   1ea96:	48 8b 85 58 ff ff ff 	mov    -0xa8(%rbp),%rax
   1ea9d:	48 89 c7             	mov    %rax,%rdi
   1eaa0:	e8 ca bb fe ff       	callq  a66f <xStreamBufferIsEmpty>
   1eaa5:	48 83 f8 01          	cmp    $0x1,%rax
   1eaa9:	0f 94 c0             	sete   %al
   1eaac:	0f b6 c0             	movzbl %al,%eax
   1eaaf:	48 89 c7             	mov    %rax,%rdi
   1eab2:	e8 29 f4 ff ff       	callq  1dee0 <prvCheckExpectedState>
   1eab7:	48 8b 85 58 ff ff ff 	mov    -0xa8(%rbp),%rax
   1eabe:	48 89 c7             	mov    %rax,%rdi
   1eac1:	e8 2e ac fe ff       	callq  96f4 <xStreamBufferSpacesAvailable>
   1eac6:	48 89 85 70 ff ff ff 	mov    %rax,-0x90(%rbp)
   1eacd:	48 83 bd 70 ff ff ff 	cmpq   $0x1e,-0x90(%rbp)
   1ead4:	1e 
   1ead5:	0f 94 c0             	sete   %al
   1ead8:	0f b6 c0             	movzbl %al,%eax
   1eadb:	48 89 c7             	mov    %rax,%rdi
   1eade:	e8 fd f3 ff ff       	callq  1dee0 <prvCheckExpectedState>
   1eae3:	be 06 00 00 00       	mov    $0x6,%esi
   1eae8:	bf 00 00 00 00       	mov    $0x0,%edi
   1eaed:	e8 4a df fe ff       	callq  ca3c <vTaskPrioritySet>
   1eaf2:	e8 a1 ed fe ff       	callq  d898 <xTaskGetTickCount>
   1eaf7:	48 89 45 f0          	mov    %rax,-0x10(%rbp)
   1eafb:	48 8b 4d a0          	mov    -0x60(%rbp),%rcx
   1eaff:	48 8b 55 88          	mov    -0x78(%rbp),%rdx
   1eb03:	48 8b 75 c8          	mov    -0x38(%rbp),%rsi
   1eb07:	48 8b 85 58 ff ff ff 	mov    -0xa8(%rbp),%rax
   1eb0e:	48 89 c7             	mov    %rax,%rdi
   1eb11:	e8 de b3 fe ff       	callq  9ef4 <xStreamBufferReceive>
   1eb16:	48 89 45 e0          	mov    %rax,-0x20(%rbp)
   1eb1a:	e8 79 ed fe ff       	callq  d898 <xTaskGetTickCount>
   1eb1f:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
   1eb23:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
   1eb27:	48 89 c6             	mov    %rax,%rsi
   1eb2a:	bf 00 00 00 00       	mov    $0x0,%edi
   1eb2f:	e8 08 df fe ff       	callq  ca3c <vTaskPrioritySet>
   1eb34:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   1eb38:	48 2b 45 f0          	sub    -0x10(%rbp),%rax
   1eb3c:	48 39 45 a0          	cmp    %rax,-0x60(%rbp)
   1eb40:	0f 96 c0             	setbe  %al
   1eb43:	0f b6 c0             	movzbl %al,%eax
   1eb46:	48 89 c7             	mov    %rax,%rdi
   1eb49:	e8 92 f3 ff ff       	callq  1dee0 <prvCheckExpectedState>
   1eb4e:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   1eb52:	48 2b 45 f0          	sub    -0x10(%rbp),%rax
   1eb56:	48 8b 4d a0          	mov    -0x60(%rbp),%rcx
   1eb5a:	48 8b 55 a8          	mov    -0x58(%rbp),%rdx
   1eb5e:	48 01 ca             	add    %rcx,%rdx
   1eb61:	48 39 d0             	cmp    %rdx,%rax
   1eb64:	0f 92 c0             	setb   %al
   1eb67:	0f b6 c0             	movzbl %al,%eax
   1eb6a:	48 89 c7             	mov    %rax,%rdi
   1eb6d:	e8 6e f3 ff ff       	callq  1dee0 <prvCheckExpectedState>
   1eb72:	48 83 7d e0 00       	cmpq   $0x0,-0x20(%rbp)
   1eb77:	0f 94 c0             	sete   %al
   1eb7a:	0f b6 c0             	movzbl %al,%eax
   1eb7d:	48 89 c7             	mov    %rax,%rdi
   1eb80:	e8 5b f3 ff ff       	callq  1dee0 <prvCheckExpectedState>
   1eb85:	b8 1e 00 00 00       	mov    $0x1e,%eax
   1eb8a:	48 2b 45 90          	sub    -0x70(%rbp),%rax
   1eb8e:	48 89 85 70 ff ff ff 	mov    %rax,-0x90(%rbp)
   1eb95:	48 c7 85 68 ff ff ff 	movq   $0x0,-0x98(%rbp)
   1eb9c:	00 00 00 00 
   1eba0:	e9 d9 01 00 00       	jmpq   1ed7e <prvSingleTaskTests+0xe61>
   1eba5:	48 8b 85 68 ff ff ff 	mov    -0x98(%rbp),%rax
   1ebac:	8d 48 30             	lea    0x30(%rax),%ecx
   1ebaf:	48 8b 55 90          	mov    -0x70(%rbp),%rdx
   1ebb3:	48 8b 45 c0          	mov    -0x40(%rbp),%rax
   1ebb7:	89 ce                	mov    %ecx,%esi
   1ebb9:	48 89 c7             	mov    %rax,%rdi
   1ebbc:	e8 4f 39 fe ff       	callq  2510 <memset@plt>
   1ebc1:	48 8b 55 90          	mov    -0x70(%rbp),%rdx
   1ebc5:	48 8b 75 c0          	mov    -0x40(%rbp),%rsi
   1ebc9:	48 8b 85 58 ff ff ff 	mov    -0xa8(%rbp),%rax
   1ebd0:	b9 00 00 00 00       	mov    $0x0,%ecx
   1ebd5:	48 89 c7             	mov    %rax,%rdi
   1ebd8:	e8 ec ab fe ff       	callq  97c9 <xStreamBufferSend>
   1ebdd:	48 89 45 e0          	mov    %rax,-0x20(%rbp)
   1ebe1:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
   1ebe5:	48 3b 45 90          	cmp    -0x70(%rbp),%rax
   1ebe9:	0f 94 c0             	sete   %al
   1ebec:	0f b6 c0             	movzbl %al,%eax
   1ebef:	48 89 c7             	mov    %rax,%rdi
   1ebf2:	e8 e9 f2 ff ff       	callq  1dee0 <prvCheckExpectedState>
   1ebf7:	48 8b 85 58 ff ff ff 	mov    -0xa8(%rbp),%rax
   1ebfe:	48 89 c7             	mov    %rax,%rdi
   1ec01:	e8 ee aa fe ff       	callq  96f4 <xStreamBufferSpacesAvailable>
   1ec06:	48 89 45 e0          	mov    %rax,-0x20(%rbp)
   1ec0a:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
   1ec0e:	48 3b 85 70 ff ff ff 	cmp    -0x90(%rbp),%rax
   1ec15:	0f 94 c0             	sete   %al
   1ec18:	0f b6 c0             	movzbl %al,%eax
   1ec1b:	48 89 c7             	mov    %rax,%rdi
   1ec1e:	e8 bd f2 ff ff       	callq  1dee0 <prvCheckExpectedState>
   1ec23:	48 8b 85 58 ff ff ff 	mov    -0xa8(%rbp),%rax
   1ec2a:	48 89 c7             	mov    %rax,%rdi
   1ec2d:	e8 51 ab fe ff       	callq  9783 <xStreamBufferBytesAvailable>
   1ec32:	48 89 45 e0          	mov    %rax,-0x20(%rbp)
   1ec36:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
   1ec3a:	48 3b 45 90          	cmp    -0x70(%rbp),%rax
   1ec3e:	0f 94 c0             	sete   %al
   1ec41:	0f b6 c0             	movzbl %al,%eax
   1ec44:	48 89 c7             	mov    %rax,%rdi
   1ec47:	e8 94 f2 ff ff       	callq  1dee0 <prvCheckExpectedState>
   1ec4c:	48 8b 85 58 ff ff ff 	mov    -0xa8(%rbp),%rax
   1ec53:	48 89 c7             	mov    %rax,%rdi
   1ec56:	e8 75 ba fe ff       	callq  a6d0 <xStreamBufferIsFull>
   1ec5b:	48 85 c0             	test   %rax,%rax
   1ec5e:	0f 94 c0             	sete   %al
   1ec61:	0f b6 c0             	movzbl %al,%eax
   1ec64:	48 89 c7             	mov    %rax,%rdi
   1ec67:	e8 74 f2 ff ff       	callq  1dee0 <prvCheckExpectedState>
   1ec6c:	48 8b 85 58 ff ff ff 	mov    -0xa8(%rbp),%rax
   1ec73:	48 89 c7             	mov    %rax,%rdi
   1ec76:	e8 f4 b9 fe ff       	callq  a66f <xStreamBufferIsEmpty>
   1ec7b:	48 85 c0             	test   %rax,%rax
   1ec7e:	0f 94 c0             	sete   %al
   1ec81:	0f b6 c0             	movzbl %al,%eax
   1ec84:	48 89 c7             	mov    %rax,%rdi
   1ec87:	e8 54 f2 ff ff       	callq  1dee0 <prvCheckExpectedState>
   1ec8c:	48 8b 55 90          	mov    -0x70(%rbp),%rdx
   1ec90:	48 8b 75 c8          	mov    -0x38(%rbp),%rsi
   1ec94:	48 8b 85 58 ff ff ff 	mov    -0xa8(%rbp),%rax
   1ec9b:	b9 00 00 00 00       	mov    $0x0,%ecx
   1eca0:	48 89 c7             	mov    %rax,%rdi
   1eca3:	e8 4c b2 fe ff       	callq  9ef4 <xStreamBufferReceive>
   1eca8:	48 89 45 e0          	mov    %rax,-0x20(%rbp)
   1ecac:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
   1ecb0:	48 3b 45 90          	cmp    -0x70(%rbp),%rax
   1ecb4:	0f 94 c0             	sete   %al
   1ecb7:	0f b6 c0             	movzbl %al,%eax
   1ecba:	48 89 c7             	mov    %rax,%rdi
   1ecbd:	e8 1e f2 ff ff       	callq  1dee0 <prvCheckExpectedState>
   1ecc2:	48 8b 55 90          	mov    -0x70(%rbp),%rdx
   1ecc6:	48 8b 4d c8          	mov    -0x38(%rbp),%rcx
   1ecca:	48 8b 45 c0          	mov    -0x40(%rbp),%rax
   1ecce:	48 89 ce             	mov    %rcx,%rsi
   1ecd1:	48 89 c7             	mov    %rax,%rdi
   1ecd4:	e8 47 38 fe ff       	callq  2520 <memcmp@plt>
   1ecd9:	85 c0                	test   %eax,%eax
   1ecdb:	0f 94 c0             	sete   %al
   1ecde:	0f b6 c0             	movzbl %al,%eax
   1ece1:	48 89 c7             	mov    %rax,%rdi
   1ece4:	e8 f7 f1 ff ff       	callq  1dee0 <prvCheckExpectedState>
   1ece9:	48 8b 85 58 ff ff ff 	mov    -0xa8(%rbp),%rax
   1ecf0:	48 89 c7             	mov    %rax,%rdi
   1ecf3:	e8 fc a9 fe ff       	callq  96f4 <xStreamBufferSpacesAvailable>
   1ecf8:	48 89 45 e0          	mov    %rax,-0x20(%rbp)
   1ecfc:	48 83 7d e0 1e       	cmpq   $0x1e,-0x20(%rbp)
   1ed01:	0f 94 c0             	sete   %al
   1ed04:	0f b6 c0             	movzbl %al,%eax
   1ed07:	48 89 c7             	mov    %rax,%rdi
   1ed0a:	e8 d1 f1 ff ff       	callq  1dee0 <prvCheckExpectedState>
   1ed0f:	48 8b 85 58 ff ff ff 	mov    -0xa8(%rbp),%rax
   1ed16:	48 89 c7             	mov    %rax,%rdi
   1ed19:	e8 65 aa fe ff       	callq  9783 <xStreamBufferBytesAvailable>
   1ed1e:	48 89 45 e0          	mov    %rax,-0x20(%rbp)
   1ed22:	48 83 7d e0 00       	cmpq   $0x0,-0x20(%rbp)
   1ed27:	0f 94 c0             	sete   %al
   1ed2a:	0f b6 c0             	movzbl %al,%eax
   1ed2d:	48 89 c7             	mov    %rax,%rdi
   1ed30:	e8 ab f1 ff ff       	callq  1dee0 <prvCheckExpectedState>
   1ed35:	48 8b 85 58 ff ff ff 	mov    -0xa8(%rbp),%rax
   1ed3c:	48 89 c7             	mov    %rax,%rdi
   1ed3f:	e8 8c b9 fe ff       	callq  a6d0 <xStreamBufferIsFull>
   1ed44:	48 85 c0             	test   %rax,%rax
   1ed47:	0f 94 c0             	sete   %al
   1ed4a:	0f b6 c0             	movzbl %al,%eax
   1ed4d:	48 89 c7             	mov    %rax,%rdi
   1ed50:	e8 8b f1 ff ff       	callq  1dee0 <prvCheckExpectedState>
   1ed55:	48 8b 85 58 ff ff ff 	mov    -0xa8(%rbp),%rax
   1ed5c:	48 89 c7             	mov    %rax,%rdi
   1ed5f:	e8 0b b9 fe ff       	callq  a66f <xStreamBufferIsEmpty>
   1ed64:	48 83 f8 01          	cmp    $0x1,%rax
   1ed68:	0f 94 c0             	sete   %al
   1ed6b:	0f b6 c0             	movzbl %al,%eax
   1ed6e:	48 89 c7             	mov    %rax,%rdi
   1ed71:	e8 6a f1 ff ff       	callq  1dee0 <prvCheckExpectedState>
   1ed76:	48 83 85 68 ff ff ff 	addq   $0x1,-0x98(%rbp)
   1ed7d:	01 
   1ed7e:	48 83 bd 68 ff ff ff 	cmpq   $0x63,-0x98(%rbp)
   1ed85:	63 
   1ed86:	0f 86 19 fe ff ff    	jbe    1eba5 <prvSingleTaskTests+0xc88>
   1ed8c:	48 8b 35 fd 22 01 00 	mov    0x122fd(%rip),%rsi        # 31090 <pc55ByteString>
   1ed93:	48 8b 85 58 ff ff ff 	mov    -0xa8(%rbp),%rax
   1ed9a:	b9 00 00 00 00       	mov    $0x0,%ecx
   1ed9f:	ba 1e 00 00 00       	mov    $0x1e,%edx
   1eda4:	48 89 c7             	mov    %rax,%rdi
   1eda7:	e8 1d aa fe ff       	callq  97c9 <xStreamBufferSend>
   1edac:	48 8b 75 b8          	mov    -0x48(%rbp),%rsi
   1edb0:	48 8b 85 58 ff ff ff 	mov    -0xa8(%rbp),%rax
   1edb7:	b9 00 00 00 00       	mov    $0x0,%ecx
   1edbc:	ba 1e 00 00 00       	mov    $0x1e,%edx
   1edc1:	48 89 c7             	mov    %rax,%rdi
   1edc4:	e8 2b b1 fe ff       	callq  9ef4 <xStreamBufferReceive>
   1edc9:	48 8b 05 c0 22 01 00 	mov    0x122c0(%rip),%rax        # 31090 <pc55ByteString>
   1edd0:	48 8b 4d b8          	mov    -0x48(%rbp),%rcx
   1edd4:	ba 1e 00 00 00       	mov    $0x1e,%edx
   1edd9:	48 89 ce             	mov    %rcx,%rsi
   1eddc:	48 89 c7             	mov    %rax,%rdi
   1eddf:	e8 3c 37 fe ff       	callq  2520 <memcmp@plt>
   1ede4:	85 c0                	test   %eax,%eax
   1ede6:	0f 94 c0             	sete   %al
   1ede9:	0f b6 c0             	movzbl %al,%eax
   1edec:	48 89 c7             	mov    %rax,%rdi
   1edef:	e8 ec f0 ff ff       	callq  1dee0 <prvCheckExpectedState>
   1edf4:	48 c7 85 68 ff ff ff 	movq   $0x0,-0x98(%rbp)
   1edfb:	00 00 00 00 
   1edff:	eb 33                	jmp    1ee34 <prvSingleTaskTests+0xf17>
   1ee01:	48 8b 15 90 22 01 00 	mov    0x12290(%rip),%rdx        # 31098 <pc54ByteString>
   1ee08:	48 8b 85 68 ff ff ff 	mov    -0x98(%rbp),%rax
   1ee0f:	48 8d 34 02          	lea    (%rdx,%rax,1),%rsi
   1ee13:	48 8b 85 58 ff ff ff 	mov    -0xa8(%rbp),%rax
   1ee1a:	b9 7d 00 00 00       	mov    $0x7d,%ecx
   1ee1f:	ba 01 00 00 00       	mov    $0x1,%edx
   1ee24:	48 89 c7             	mov    %rax,%rdi
   1ee27:	e8 9d a9 fe ff       	callq  97c9 <xStreamBufferSend>
   1ee2c:	48 83 85 68 ff ff ff 	addq   $0x1,-0x98(%rbp)
   1ee33:	01 
   1ee34:	48 83 bd 68 ff ff ff 	cmpq   $0x1d,-0x98(%rbp)
   1ee3b:	1d 
   1ee3c:	76 c3                	jbe    1ee01 <prvSingleTaskTests+0xee4>
   1ee3e:	48 8b 85 58 ff ff ff 	mov    -0xa8(%rbp),%rax
   1ee45:	48 89 c7             	mov    %rax,%rdi
   1ee48:	e8 83 b8 fe ff       	callq  a6d0 <xStreamBufferIsFull>
   1ee4d:	48 83 f8 01          	cmp    $0x1,%rax
   1ee51:	0f 94 c0             	sete   %al
   1ee54:	0f b6 c0             	movzbl %al,%eax
   1ee57:	48 89 c7             	mov    %rax,%rdi
   1ee5a:	e8 81 f0 ff ff       	callq  1dee0 <prvCheckExpectedState>
   1ee5f:	48 8b 75 b8          	mov    -0x48(%rbp),%rsi
   1ee63:	48 8b 85 58 ff ff ff 	mov    -0xa8(%rbp),%rax
   1ee6a:	b9 7d 00 00 00       	mov    $0x7d,%ecx
   1ee6f:	ba 3c 00 00 00       	mov    $0x3c,%edx
   1ee74:	48 89 c7             	mov    %rax,%rdi
   1ee77:	e8 78 b0 fe ff       	callq  9ef4 <xStreamBufferReceive>
   1ee7c:	48 89 45 e0          	mov    %rax,-0x20(%rbp)
   1ee80:	48 83 7d e0 1e       	cmpq   $0x1e,-0x20(%rbp)
   1ee85:	0f 94 c0             	sete   %al
   1ee88:	0f b6 c0             	movzbl %al,%eax
   1ee8b:	48 89 c7             	mov    %rax,%rdi
   1ee8e:	e8 4d f0 ff ff       	callq  1dee0 <prvCheckExpectedState>
   1ee93:	48 8b 05 fe 21 01 00 	mov    0x121fe(%rip),%rax        # 31098 <pc54ByteString>
   1ee9a:	48 8b 4d b8          	mov    -0x48(%rbp),%rcx
   1ee9e:	ba 1e 00 00 00       	mov    $0x1e,%edx
   1eea3:	48 89 ce             	mov    %rcx,%rsi
   1eea6:	48 89 c7             	mov    %rax,%rdi
   1eea9:	e8 72 36 fe ff       	callq  2520 <memcmp@plt>
   1eeae:	85 c0                	test   %eax,%eax
   1eeb0:	0f 94 c0             	sete   %al
   1eeb3:	0f b6 c0             	movzbl %al,%eax
   1eeb6:	48 89 c7             	mov    %rax,%rdi
   1eeb9:	e8 22 f0 ff ff       	callq  1dee0 <prvCheckExpectedState>
   1eebe:	48 8b 35 cb 21 01 00 	mov    0x121cb(%rip),%rsi        # 31090 <pc55ByteString>
   1eec5:	48 8b 85 58 ff ff ff 	mov    -0xa8(%rbp),%rax
   1eecc:	b9 7d 00 00 00       	mov    $0x7d,%ecx
   1eed1:	ba 1e 00 00 00       	mov    $0x1e,%edx
   1eed6:	48 89 c7             	mov    %rax,%rdi
   1eed9:	e8 eb a8 fe ff       	callq  97c9 <xStreamBufferSend>
   1eede:	48 89 45 e0          	mov    %rax,-0x20(%rbp)
   1eee2:	48 83 7d e0 1e       	cmpq   $0x1e,-0x20(%rbp)
   1eee7:	0f 94 c0             	sete   %al
   1eeea:	0f b6 c0             	movzbl %al,%eax
   1eeed:	48 89 c7             	mov    %rax,%rdi
   1eef0:	e8 eb ef ff ff       	callq  1dee0 <prvCheckExpectedState>
   1eef5:	48 8b 85 58 ff ff ff 	mov    -0xa8(%rbp),%rax
   1eefc:	48 89 c7             	mov    %rax,%rdi
   1eeff:	e8 cc b7 fe ff       	callq  a6d0 <xStreamBufferIsFull>
   1ef04:	48 83 f8 01          	cmp    $0x1,%rax
   1ef08:	0f 94 c0             	sete   %al
   1ef0b:	0f b6 c0             	movzbl %al,%eax
   1ef0e:	48 89 c7             	mov    %rax,%rdi
   1ef11:	e8 ca ef ff ff       	callq  1dee0 <prvCheckExpectedState>
   1ef16:	48 8b 85 58 ff ff ff 	mov    -0xa8(%rbp),%rax
   1ef1d:	48 89 c7             	mov    %rax,%rdi
   1ef20:	e8 4a b7 fe ff       	callq  a66f <xStreamBufferIsEmpty>
   1ef25:	48 85 c0             	test   %rax,%rax
   1ef28:	0f 94 c0             	sete   %al
   1ef2b:	0f b6 c0             	movzbl %al,%eax
   1ef2e:	48 89 c7             	mov    %rax,%rdi
   1ef31:	e8 aa ef ff ff       	callq  1dee0 <prvCheckExpectedState>
   1ef36:	48 8b 85 58 ff ff ff 	mov    -0xa8(%rbp),%rax
   1ef3d:	48 89 c7             	mov    %rax,%rdi
   1ef40:	e8 3e a8 fe ff       	callq  9783 <xStreamBufferBytesAvailable>
   1ef45:	48 83 f8 1e          	cmp    $0x1e,%rax
   1ef49:	0f 94 c0             	sete   %al
   1ef4c:	0f b6 c0             	movzbl %al,%eax
   1ef4f:	48 89 c7             	mov    %rax,%rdi
   1ef52:	e8 89 ef ff ff       	callq  1dee0 <prvCheckExpectedState>
   1ef57:	48 8b 85 58 ff ff ff 	mov    -0xa8(%rbp),%rax
   1ef5e:	48 89 c7             	mov    %rax,%rdi
   1ef61:	e8 8e a7 fe ff       	callq  96f4 <xStreamBufferSpacesAvailable>
   1ef66:	48 85 c0             	test   %rax,%rax
   1ef69:	0f 94 c0             	sete   %al
   1ef6c:	0f b6 c0             	movzbl %al,%eax
   1ef6f:	48 89 c7             	mov    %rax,%rdi
   1ef72:	e8 69 ef ff ff       	callq  1dee0 <prvCheckExpectedState>
   1ef77:	48 c7 85 68 ff ff ff 	movq   $0x0,-0x98(%rbp)
   1ef7e:	00 00 00 00 
   1ef82:	eb 56                	jmp    1efda <prvSingleTaskTests+0x10bd>
   1ef84:	48 8b 75 b8          	mov    -0x48(%rbp),%rsi
   1ef88:	48 8b 85 58 ff ff ff 	mov    -0xa8(%rbp),%rax
   1ef8f:	b9 7d 00 00 00       	mov    $0x7d,%ecx
   1ef94:	ba 01 00 00 00       	mov    $0x1,%edx
   1ef99:	48 89 c7             	mov    %rax,%rdi
   1ef9c:	e8 53 af fe ff       	callq  9ef4 <xStreamBufferReceive>
   1efa1:	48 8b 15 e8 20 01 00 	mov    0x120e8(%rip),%rdx        # 31090 <pc55ByteString>
   1efa8:	48 8b 85 68 ff ff ff 	mov    -0x98(%rbp),%rax
   1efaf:	48 01 d0             	add    %rdx,%rax
   1efb2:	0f b6 00             	movzbl (%rax),%eax
   1efb5:	0f be d0             	movsbl %al,%edx
   1efb8:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
   1efbc:	0f b6 00             	movzbl (%rax),%eax
   1efbf:	0f b6 c0             	movzbl %al,%eax
   1efc2:	39 c2                	cmp    %eax,%edx
   1efc4:	0f 94 c0             	sete   %al
   1efc7:	0f b6 c0             	movzbl %al,%eax
   1efca:	48 89 c7             	mov    %rax,%rdi
   1efcd:	e8 0e ef ff ff       	callq  1dee0 <prvCheckExpectedState>
   1efd2:	48 83 85 68 ff ff ff 	addq   $0x1,-0x98(%rbp)
   1efd9:	01 
   1efda:	48 83 bd 68 ff ff ff 	cmpq   $0x1d,-0x98(%rbp)
   1efe1:	1d 
   1efe2:	76 a0                	jbe    1ef84 <prvSingleTaskTests+0x1067>
   1efe4:	48 8b 85 58 ff ff ff 	mov    -0xa8(%rbp),%rax
   1efeb:	48 89 c7             	mov    %rax,%rdi
   1efee:	e8 7c b6 fe ff       	callq  a66f <xStreamBufferIsEmpty>
   1eff3:	48 83 f8 01          	cmp    $0x1,%rax
   1eff7:	0f 94 c0             	sete   %al
   1effa:	0f b6 c0             	movzbl %al,%eax
   1effd:	48 89 c7             	mov    %rax,%rdi
   1f000:	e8 db ee ff ff       	callq  1dee0 <prvCheckExpectedState>
   1f005:	48 8b 85 58 ff ff ff 	mov    -0xa8(%rbp),%rax
   1f00c:	48 89 c7             	mov    %rax,%rdi
   1f00f:	e8 bc b6 fe ff       	callq  a6d0 <xStreamBufferIsFull>
   1f014:	48 85 c0             	test   %rax,%rax
   1f017:	0f 94 c0             	sete   %al
   1f01a:	0f b6 c0             	movzbl %al,%eax
   1f01d:	48 89 c7             	mov    %rax,%rdi
   1f020:	e8 bb ee ff ff       	callq  1dee0 <prvCheckExpectedState>
   1f025:	be 06 00 00 00       	mov    $0x6,%esi
   1f02a:	bf 00 00 00 00       	mov    $0x0,%edi
   1f02f:	e8 08 da fe ff       	callq  ca3c <vTaskPrioritySet>
   1f034:	48 8b 35 5d 20 01 00 	mov    0x1205d(%rip),%rsi        # 31098 <pc54ByteString>
   1f03b:	48 8b 55 b0          	mov    -0x50(%rbp),%rdx
   1f03f:	48 8b 85 58 ff ff ff 	mov    -0xa8(%rbp),%rax
   1f046:	48 89 d1             	mov    %rdx,%rcx
   1f049:	ba 3c 00 00 00       	mov    $0x3c,%edx
   1f04e:	48 89 c7             	mov    %rax,%rdi
   1f051:	e8 73 a7 fe ff       	callq  97c9 <xStreamBufferSend>
   1f056:	48 89 45 e0          	mov    %rax,-0x20(%rbp)
   1f05a:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
   1f05e:	48 89 c6             	mov    %rax,%rsi
   1f061:	bf 00 00 00 00       	mov    $0x0,%edi
   1f066:	e8 d1 d9 fe ff       	callq  ca3c <vTaskPrioritySet>
   1f06b:	48 83 7d e0 1e       	cmpq   $0x1e,-0x20(%rbp)
   1f070:	0f 94 c0             	sete   %al
   1f073:	0f b6 c0             	movzbl %al,%eax
   1f076:	48 89 c7             	mov    %rax,%rdi
   1f079:	e8 62 ee ff ff       	callq  1dee0 <prvCheckExpectedState>
   1f07e:	48 8b 85 58 ff ff ff 	mov    -0xa8(%rbp),%rax
   1f085:	48 89 c7             	mov    %rax,%rdi
   1f088:	e8 43 b6 fe ff       	callq  a6d0 <xStreamBufferIsFull>
   1f08d:	48 83 f8 01          	cmp    $0x1,%rax
   1f091:	0f 94 c0             	sete   %al
   1f094:	0f b6 c0             	movzbl %al,%eax
   1f097:	48 89 c7             	mov    %rax,%rdi
   1f09a:	e8 41 ee ff ff       	callq  1dee0 <prvCheckExpectedState>
   1f09f:	48 8b 85 58 ff ff ff 	mov    -0xa8(%rbp),%rax
   1f0a6:	48 89 c7             	mov    %rax,%rdi
   1f0a9:	e8 c1 b5 fe ff       	callq  a66f <xStreamBufferIsEmpty>
   1f0ae:	48 85 c0             	test   %rax,%rax
   1f0b1:	0f 94 c0             	sete   %al
   1f0b4:	0f b6 c0             	movzbl %al,%eax
   1f0b7:	48 89 c7             	mov    %rax,%rdi
   1f0ba:	e8 21 ee ff ff       	callq  1dee0 <prvCheckExpectedState>
   1f0bf:	48 8b 35 d2 1f 01 00 	mov    0x11fd2(%rip),%rsi        # 31098 <pc54ByteString>
   1f0c6:	48 8b 55 b0          	mov    -0x50(%rbp),%rdx
   1f0ca:	48 8b 85 58 ff ff ff 	mov    -0xa8(%rbp),%rax
   1f0d1:	48 89 d1             	mov    %rdx,%rcx
   1f0d4:	ba 3c 00 00 00       	mov    $0x3c,%edx
   1f0d9:	48 89 c7             	mov    %rax,%rdi
   1f0dc:	e8 e8 a6 fe ff       	callq  97c9 <xStreamBufferSend>
   1f0e1:	48 89 45 e0          	mov    %rax,-0x20(%rbp)
   1f0e5:	48 83 7d e0 00       	cmpq   $0x0,-0x20(%rbp)
   1f0ea:	0f 94 c0             	sete   %al
   1f0ed:	0f b6 c0             	movzbl %al,%eax
   1f0f0:	48 89 c7             	mov    %rax,%rdi
   1f0f3:	e8 e8 ed ff ff       	callq  1dee0 <prvCheckExpectedState>
   1f0f8:	48 8b 4d b0          	mov    -0x50(%rbp),%rcx
   1f0fc:	48 8b 55 98          	mov    -0x68(%rbp),%rdx
   1f100:	48 8b 75 b8          	mov    -0x48(%rbp),%rsi
   1f104:	48 8b 85 58 ff ff ff 	mov    -0xa8(%rbp),%rax
   1f10b:	48 89 c7             	mov    %rax,%rdi
   1f10e:	e8 e1 ad fe ff       	callq  9ef4 <xStreamBufferReceive>
   1f113:	48 89 45 e0          	mov    %rax,-0x20(%rbp)
   1f117:	48 8b 0d 7a 1f 01 00 	mov    0x11f7a(%rip),%rcx        # 31098 <pc54ByteString>
   1f11e:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
   1f122:	ba 1e 00 00 00       	mov    $0x1e,%edx
   1f127:	48 89 ce             	mov    %rcx,%rsi
   1f12a:	48 89 c7             	mov    %rax,%rdi
   1f12d:	e8 ee 33 fe ff       	callq  2520 <memcmp@plt>
   1f132:	85 c0                	test   %eax,%eax
   1f134:	0f 94 c0             	sete   %al
   1f137:	0f b6 c0             	movzbl %al,%eax
   1f13a:	48 89 c7             	mov    %rax,%rdi
   1f13d:	e8 9e ed ff ff       	callq  1dee0 <prvCheckExpectedState>
   1f142:	48 8b 85 58 ff ff ff 	mov    -0xa8(%rbp),%rax
   1f149:	48 89 c7             	mov    %rax,%rdi
   1f14c:	e8 7f b5 fe ff       	callq  a6d0 <xStreamBufferIsFull>
   1f151:	48 85 c0             	test   %rax,%rax
   1f154:	0f 94 c0             	sete   %al
   1f157:	0f b6 c0             	movzbl %al,%eax
   1f15a:	48 89 c7             	mov    %rax,%rdi
   1f15d:	e8 7e ed ff ff       	callq  1dee0 <prvCheckExpectedState>
   1f162:	48 8b 85 58 ff ff ff 	mov    -0xa8(%rbp),%rax
   1f169:	48 89 c7             	mov    %rax,%rdi
   1f16c:	e8 fe b4 fe ff       	callq  a66f <xStreamBufferIsEmpty>
   1f171:	48 83 f8 01          	cmp    $0x1,%rax
   1f175:	0f 94 c0             	sete   %al
   1f178:	0f b6 c0             	movzbl %al,%eax
   1f17b:	48 89 c7             	mov    %rax,%rdi
   1f17e:	e8 5d ed ff ff       	callq  1dee0 <prvCheckExpectedState>
   1f183:	48 8b 35 06 1f 01 00 	mov    0x11f06(%rip),%rsi        # 31090 <pc55ByteString>
   1f18a:	48 8b 85 58 ff ff ff 	mov    -0xa8(%rbp),%rax
   1f191:	b9 00 00 00 00       	mov    $0x0,%ecx
   1f196:	ba 0f 00 00 00       	mov    $0xf,%edx
   1f19b:	48 89 c7             	mov    %rax,%rdi
   1f19e:	e8 26 a6 fe ff       	callq  97c9 <xStreamBufferSend>
   1f1a3:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
   1f1a7:	48 89 c7             	mov    %rax,%rdi
   1f1aa:	e8 f1 35 ff ff       	callq  127a0 <vPortFree>
   1f1af:	48 8b 85 58 ff ff ff 	mov    -0xa8(%rbp),%rax
   1f1b6:	48 89 c7             	mov    %rax,%rdi
   1f1b9:	e8 41 a3 fe ff       	callq  94ff <xStreamBufferReset>
   1f1be:	90                   	nop
   1f1bf:	c9                   	leaveq 
   1f1c0:	c3                   	retq   

000000000001f1c1 <prvNonBlockingSenderTask>:
   1f1c1:	f3 0f 1e fa          	endbr64 
   1f1c5:	55                   	push   %rbp
   1f1c6:	48 89 e5             	mov    %rsp,%rbp
   1f1c9:	48 83 ec 40          	sub    $0x40,%rsp
   1f1cd:	48 89 7d c8          	mov    %rdi,-0x38(%rbp)
   1f1d1:	48 c7 45 d8 00 00 00 	movq   $0x0,-0x28(%rbp)
   1f1d8:	00 
   1f1d9:	48 8b 05 b8 1e 01 00 	mov    0x11eb8(%rip),%rax        # 31098 <pc54ByteString>
   1f1e0:	48 89 c7             	mov    %rax,%rdi
   1f1e3:	e8 c8 32 fe ff       	callq  24b0 <strlen@plt>
   1f1e8:	48 89 45 e0          	mov    %rax,-0x20(%rbp)
   1f1ec:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
   1f1f0:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
   1f1f4:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
   1f1f8:	48 2b 45 d8          	sub    -0x28(%rbp),%rax
   1f1fc:	48 89 45 f0          	mov    %rax,-0x10(%rbp)
   1f200:	48 8b 15 91 1e 01 00 	mov    0x11e91(%rip),%rdx        # 31098 <pc54ByteString>
   1f207:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
   1f20b:	48 8d 34 02          	lea    (%rdx,%rax,1),%rsi
   1f20f:	48 8b 55 f0          	mov    -0x10(%rbp),%rdx
   1f213:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
   1f217:	b9 00 00 00 00       	mov    $0x0,%ecx
   1f21c:	48 89 c7             	mov    %rax,%rdi
   1f21f:	e8 a5 a5 fe ff       	callq  97c9 <xStreamBufferSend>
   1f224:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
   1f228:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   1f22c:	48 3b 45 f0          	cmp    -0x10(%rbp),%rax
   1f230:	0f 96 c0             	setbe  %al
   1f233:	0f b6 c0             	movzbl %al,%eax
   1f236:	48 89 c7             	mov    %rax,%rdi
   1f239:	e8 a2 ec ff ff       	callq  1dee0 <prvCheckExpectedState>
   1f23e:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   1f242:	48 01 45 d8          	add    %rax,-0x28(%rbp)
   1f246:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
   1f24a:	48 3b 45 e0          	cmp    -0x20(%rbp),%rax
   1f24e:	0f 96 c0             	setbe  %al
   1f251:	0f b6 c0             	movzbl %al,%eax
   1f254:	48 89 c7             	mov    %rax,%rdi
   1f257:	e8 84 ec ff ff       	callq  1dee0 <prvCheckExpectedState>
   1f25c:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
   1f260:	48 3b 45 e0          	cmp    -0x20(%rbp),%rax
   1f264:	75 8e                	jne    1f1f4 <prvNonBlockingSenderTask+0x33>
   1f266:	48 c7 45 d8 00 00 00 	movq   $0x0,-0x28(%rbp)
   1f26d:	00 
   1f26e:	eb 84                	jmp    1f1f4 <prvNonBlockingSenderTask+0x33>

000000000001f270 <prvNonBlockingReceiverTask>:
   1f270:	f3 0f 1e fa          	endbr64 
   1f274:	55                   	push   %rbp
   1f275:	48 89 e5             	mov    %rsp,%rbp
   1f278:	48 83 ec 60          	sub    $0x60,%rsp
   1f27c:	48 89 7d a8          	mov    %rdi,-0x58(%rbp)
   1f280:	64 48 8b 04 25 28 00 	mov    %fs:0x28,%rax
   1f287:	00 00 
   1f289:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
   1f28d:	31 c0                	xor    %eax,%eax
   1f28f:	48 c7 45 b0 00 00 00 	movq   $0x0,-0x50(%rbp)
   1f296:	00 
   1f297:	48 8b 05 fa 1d 01 00 	mov    0x11dfa(%rip),%rax        # 31098 <pc54ByteString>
   1f29e:	48 89 c7             	mov    %rax,%rdi
   1f2a1:	e8 0a 32 fe ff       	callq  24b0 <strlen@plt>
   1f2a6:	48 89 45 d0          	mov    %rax,-0x30(%rbp)
   1f2aa:	48 c7 45 c8 00 00 00 	movq   $0x0,-0x38(%rbp)
   1f2b1:	00 
   1f2b2:	48 8b 45 a8          	mov    -0x58(%rbp),%rax
   1f2b6:	48 89 45 d8          	mov    %rax,-0x28(%rbp)
   1f2ba:	48 8d 75 ec          	lea    -0x14(%rbp),%rsi
   1f2be:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
   1f2c2:	b9 00 00 00 00       	mov    $0x0,%ecx
   1f2c7:	ba 0c 00 00 00       	mov    $0xc,%edx
   1f2cc:	48 89 c7             	mov    %rax,%rdi
   1f2cf:	e8 20 ac fe ff       	callq  9ef4 <xStreamBufferReceive>
   1f2d4:	48 89 45 e0          	mov    %rax,-0x20(%rbp)
   1f2d8:	48 83 7d e0 00       	cmpq   $0x0,-0x20(%rbp)
   1f2dd:	74 db                	je     1f2ba <prvNonBlockingReceiverTask+0x4a>
   1f2df:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
   1f2e3:	48 89 45 b8          	mov    %rax,-0x48(%rbp)
   1f2e7:	48 8b 55 b0          	mov    -0x50(%rbp),%rdx
   1f2eb:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
   1f2ef:	48 01 d0             	add    %rdx,%rax
   1f2f2:	48 39 45 d0          	cmp    %rax,-0x30(%rbp)
   1f2f6:	73 58                	jae    1f350 <prvNonBlockingReceiverTask+0xe0>
   1f2f8:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
   1f2fc:	48 2b 45 b0          	sub    -0x50(%rbp),%rax
   1f300:	48 89 45 b8          	mov    %rax,-0x48(%rbp)
   1f304:	48 8b 15 8d 1d 01 00 	mov    0x11d8d(%rip),%rdx        # 31098 <pc54ByteString>
   1f30b:	48 8b 45 b0          	mov    -0x50(%rbp),%rax
   1f30f:	48 8d 0c 02          	lea    (%rdx,%rax,1),%rcx
   1f313:	48 8b 55 b8          	mov    -0x48(%rbp),%rdx
   1f317:	48 8d 45 ec          	lea    -0x14(%rbp),%rax
   1f31b:	48 89 c6             	mov    %rax,%rsi
   1f31e:	48 89 cf             	mov    %rcx,%rdi
   1f321:	e8 fa 31 fe ff       	callq  2520 <memcmp@plt>
   1f326:	85 c0                	test   %eax,%eax
   1f328:	74 08                	je     1f332 <prvNonBlockingReceiverTask+0xc2>
   1f32a:	48 c7 45 c8 01 00 00 	movq   $0x1,-0x38(%rbp)
   1f331:	00 
   1f332:	48 c7 45 b0 00 00 00 	movq   $0x0,-0x50(%rbp)
   1f339:	00 
   1f33a:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
   1f33e:	48 89 45 c0          	mov    %rax,-0x40(%rbp)
   1f342:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
   1f346:	48 2b 45 b8          	sub    -0x48(%rbp),%rax
   1f34a:	48 89 45 b8          	mov    %rax,-0x48(%rbp)
   1f34e:	eb 08                	jmp    1f358 <prvNonBlockingReceiverTask+0xe8>
   1f350:	48 c7 45 c0 00 00 00 	movq   $0x0,-0x40(%rbp)
   1f357:	00 
   1f358:	48 8d 55 ec          	lea    -0x14(%rbp),%rdx
   1f35c:	48 8b 45 c0          	mov    -0x40(%rbp),%rax
   1f360:	48 8d 34 02          	lea    (%rdx,%rax,1),%rsi
   1f364:	48 8b 15 2d 1d 01 00 	mov    0x11d2d(%rip),%rdx        # 31098 <pc54ByteString>
   1f36b:	48 8b 45 b0          	mov    -0x50(%rbp),%rax
   1f36f:	48 8d 0c 02          	lea    (%rdx,%rax,1),%rcx
   1f373:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
   1f377:	48 89 c2             	mov    %rax,%rdx
   1f37a:	48 89 cf             	mov    %rcx,%rdi
   1f37d:	e8 9e 31 fe ff       	callq  2520 <memcmp@plt>
   1f382:	85 c0                	test   %eax,%eax
   1f384:	74 08                	je     1f38e <prvNonBlockingReceiverTask+0x11e>
   1f386:	48 c7 45 c8 01 00 00 	movq   $0x1,-0x38(%rbp)
   1f38d:	00 
   1f38e:	48 83 7d c8 00       	cmpq   $0x0,-0x38(%rbp)
   1f393:	75 0f                	jne    1f3a4 <prvNonBlockingReceiverTask+0x134>
   1f395:	8b 05 cd 7a 11 00    	mov    0x117acd(%rip),%eax        # 136e68 <ulNonBlockingRxCounter>
   1f39b:	83 c0 01             	add    $0x1,%eax
   1f39e:	89 05 c4 7a 11 00    	mov    %eax,0x117ac4(%rip)        # 136e68 <ulNonBlockingRxCounter>
   1f3a4:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
   1f3a8:	48 01 45 b0          	add    %rax,-0x50(%rbp)
   1f3ac:	48 8b 45 b0          	mov    -0x50(%rbp),%rax
   1f3b0:	48 3b 45 d0          	cmp    -0x30(%rbp),%rax
   1f3b4:	0f 82 00 ff ff ff    	jb     1f2ba <prvNonBlockingReceiverTask+0x4a>
   1f3ba:	48 c7 45 b0 00 00 00 	movq   $0x0,-0x50(%rbp)
   1f3c1:	00 
   1f3c2:	e9 f3 fe ff ff       	jmpq   1f2ba <prvNonBlockingReceiverTask+0x4a>

000000000001f3c7 <prvSenderTask>:
   1f3c7:	f3 0f 1e fa          	endbr64 
   1f3cb:	55                   	push   %rbp
   1f3cc:	48 89 e5             	mov    %rsp,%rbp
   1f3cf:	48 81 ec b0 00 00 00 	sub    $0xb0,%rsp
   1f3d6:	48 89 bd 58 ff ff ff 	mov    %rdi,-0xa8(%rbp)
   1f3dd:	64 48 8b 04 25 28 00 	mov    %fs:0x28,%rax
   1f3e4:	00 00 
   1f3e6:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
   1f3ea:	31 c0                	xor    %eax,%eax
   1f3ec:	48 c7 85 70 ff ff ff 	movq   $0x7d,-0x90(%rbp)
   1f3f3:	7d 00 00 00 
   1f3f7:	48 c7 85 78 ff ff ff 	movq   $0x32,-0x88(%rbp)
   1f3fe:	32 00 00 00 
   1f402:	48 c7 85 68 ff ff ff 	movq   $0x0,-0x98(%rbp)
   1f409:	00 00 00 00 
   1f40d:	48 8b 05 7c 1c 01 00 	mov    0x11c7c(%rip),%rax        # 31090 <pc55ByteString>
   1f414:	48 89 c7             	mov    %rax,%rdi
   1f417:	e8 94 30 fe ff       	callq  24b0 <strlen@plt>
   1f41c:	48 89 45 80          	mov    %rax,-0x80(%rbp)
   1f420:	bf 00 00 00 00       	mov    $0x0,%edi
   1f425:	e8 7f d5 fe ff       	callq  c9a9 <uxTaskPriorityGet>
   1f42a:	48 89 45 88          	mov    %rax,-0x78(%rbp)
   1f42e:	48 83 7d 88 01       	cmpq   $0x1,-0x78(%rbp)
   1f433:	0f 96 c0             	setbe  %al
   1f436:	0f b6 c0             	movzbl %al,%eax
   1f439:	48 89 c7             	mov    %rax,%rdi
   1f43c:	e8 9f ea ff ff       	callq  1dee0 <prvCheckExpectedState>
   1f441:	48 8b 55 88          	mov    -0x78(%rbp),%rdx
   1f445:	48 89 d0             	mov    %rdx,%rax
   1f448:	48 c1 e0 03          	shl    $0x3,%rax
   1f44c:	48 01 d0             	add    %rdx,%rax
   1f44f:	48 c1 e0 03          	shl    $0x3,%rax
   1f453:	48 8d 15 26 79 11 00 	lea    0x117926(%rip),%rdx        # 136d80 <xStaticStreamBuffers>
   1f45a:	48 8d 0c 10          	lea    (%rax,%rdx,1),%rcx
   1f45e:	48 8b 55 88          	mov    -0x78(%rbp),%rdx
   1f462:	48 89 d0             	mov    %rdx,%rax
   1f465:	48 c1 e0 05          	shl    $0x5,%rax
   1f469:	48 29 d0             	sub    %rdx,%rax
   1f46c:	48 8d 15 ad 79 11 00 	lea    0x1179ad(%rip),%rdx        # 136e20 <ucBufferStorage>
   1f473:	48 01 d0             	add    %rdx,%rax
   1f476:	49 89 c8             	mov    %rcx,%r8
   1f479:	48 89 c1             	mov    %rax,%rcx
   1f47c:	ba 00 00 00 00       	mov    $0x0,%edx
   1f481:	be 01 00 00 00       	mov    $0x1,%esi
   1f486:	bf 1f 00 00 00       	mov    $0x1f,%edi
   1f48b:	e8 21 9c fe ff       	callq  90b1 <xStreamBufferGenericCreateStatic>
   1f490:	48 89 45 90          	mov    %rax,-0x70(%rbp)
   1f494:	bf 00 00 00 00       	mov    $0x0,%edi
   1f499:	e8 0b d5 fe ff       	callq  c9a9 <uxTaskPriorityGet>
   1f49e:	48 85 c0             	test   %rax,%rax
   1f4a1:	75 39                	jne    1f4dc <prvSenderTask+0x115>
   1f4a3:	48 8b 45 90          	mov    -0x70(%rbp),%rax
   1f4a7:	48 89 c7             	mov    %rax,%rdi
   1f4aa:	e8 6e ea ff ff       	callq  1df1d <prvSingleTaskTests>
   1f4af:	48 8b 45 90          	mov    -0x70(%rbp),%rax
   1f4b3:	41 b9 00 00 00 00    	mov    $0x0,%r9d
   1f4b9:	41 b8 01 00 00 00    	mov    $0x1,%r8d
   1f4bf:	48 89 c1             	mov    %rax,%rcx
   1f4c2:	ba 69 00 00 00       	mov    $0x69,%edx
   1f4c7:	48 8d 35 17 8e 00 00 	lea    0x8e17(%rip),%rsi        # 282e5 <xInterruptGivePeriod+0x4f5>
   1f4ce:	48 8d 3d 51 01 00 00 	lea    0x151(%rip),%rdi        # 1f626 <prvReceiverTask>
   1f4d5:	e8 1d c8 fe ff       	callq  bcf7 <xTaskCreate>
   1f4da:	eb 2b                	jmp    1f507 <prvSenderTask+0x140>
   1f4dc:	48 8b 45 90          	mov    -0x70(%rbp),%rax
   1f4e0:	41 b9 00 00 00 00    	mov    $0x0,%r9d
   1f4e6:	41 b8 00 00 00 00    	mov    $0x0,%r8d
   1f4ec:	48 89 c1             	mov    %rax,%rcx
   1f4ef:	ba 69 00 00 00       	mov    $0x69,%edx
   1f4f4:	48 8d 35 ea 8d 00 00 	lea    0x8dea(%rip),%rsi        # 282e5 <xInterruptGivePeriod+0x4f5>
   1f4fb:	48 8d 3d 24 01 00 00 	lea    0x124(%rip),%rdi        # 1f626 <prvReceiverTask>
   1f502:	e8 f0 c7 fe ff       	callq  bcf7 <xTaskCreate>
   1f507:	48 8b 45 80          	mov    -0x80(%rbp),%rax
   1f50b:	48 2b 85 68 ff ff ff 	sub    -0x98(%rbp),%rax
   1f512:	48 89 45 98          	mov    %rax,-0x68(%rbp)
   1f516:	48 8b 15 73 1b 01 00 	mov    0x11b73(%rip),%rdx        # 31090 <pc55ByteString>
   1f51d:	48 8b 85 68 ff ff ff 	mov    -0x98(%rbp),%rax
   1f524:	48 8d 34 02          	lea    (%rdx,%rax,1),%rsi
   1f528:	48 8b 8d 70 ff ff ff 	mov    -0x90(%rbp),%rcx
   1f52f:	48 8b 55 98          	mov    -0x68(%rbp),%rdx
   1f533:	48 8b 45 90          	mov    -0x70(%rbp),%rax
   1f537:	48 89 c7             	mov    %rax,%rdi
   1f53a:	e8 8a a2 fe ff       	callq  97c9 <xStreamBufferSend>
   1f53f:	48 89 45 a0          	mov    %rax,-0x60(%rbp)
   1f543:	48 8b 45 a0          	mov    -0x60(%rbp),%rax
   1f547:	48 3b 45 98          	cmp    -0x68(%rbp),%rax
   1f54b:	0f 96 c0             	setbe  %al
   1f54e:	0f b6 c0             	movzbl %al,%eax
   1f551:	48 89 c7             	mov    %rax,%rdi
   1f554:	e8 87 e9 ff ff       	callq  1dee0 <prvCheckExpectedState>
   1f559:	48 8b 45 a0          	mov    -0x60(%rbp),%rax
   1f55d:	48 01 85 68 ff ff ff 	add    %rax,-0x98(%rbp)
   1f564:	48 8b 85 68 ff ff ff 	mov    -0x98(%rbp),%rax
   1f56b:	48 3b 45 80          	cmp    -0x80(%rbp),%rax
   1f56f:	0f 96 c0             	setbe  %al
   1f572:	0f b6 c0             	movzbl %al,%eax
   1f575:	48 89 c7             	mov    %rax,%rdi
   1f578:	e8 63 e9 ff ff       	callq  1dee0 <prvCheckExpectedState>
   1f57d:	48 8b 85 68 ff ff ff 	mov    -0x98(%rbp),%rax
   1f584:	48 3b 45 80          	cmp    -0x80(%rbp),%rax
   1f588:	75 0b                	jne    1f595 <prvSenderTask+0x1ce>
   1f58a:	48 c7 85 68 ff ff ff 	movq   $0x0,-0x98(%rbp)
   1f591:	00 00 00 00 
   1f595:	48 8b 45 88          	mov    -0x78(%rbp),%rax
   1f599:	48 8d 14 85 00 00 00 	lea    0x0(,%rax,4),%rdx
   1f5a0:	00 
   1f5a1:	48 8d 05 68 78 11 00 	lea    0x117868(%rip),%rax        # 136e10 <ulSenderLoopCounters>
   1f5a8:	8b 04 02             	mov    (%rdx,%rax,1),%eax
   1f5ab:	8d 48 01             	lea    0x1(%rax),%ecx
   1f5ae:	48 8b 45 88          	mov    -0x78(%rbp),%rax
   1f5b2:	48 8d 14 85 00 00 00 	lea    0x0(,%rax,4),%rdx
   1f5b9:	00 
   1f5ba:	48 8d 05 4f 78 11 00 	lea    0x11784f(%rip),%rax        # 136e10 <ulSenderLoopCounters>
   1f5c1:	89 0c 02             	mov    %ecx,(%rdx,%rax,1)
   1f5c4:	bf 00 00 00 00       	mov    $0x0,%edi
   1f5c9:	e8 db d3 fe ff       	callq  c9a9 <uxTaskPriorityGet>
   1f5ce:	48 83 f8 01          	cmp    $0x1,%rax
   1f5d2:	75 0f                	jne    1f5e3 <prvSenderTask+0x21c>
   1f5d4:	48 8b 85 78 ff ff ff 	mov    -0x88(%rbp),%rax
   1f5db:	48 89 c7             	mov    %rax,%rdi
   1f5de:	e8 bf d1 fe ff       	callq  c7a2 <vTaskDelay>
   1f5e3:	48 8d 45 b0          	lea    -0x50(%rbp),%rax
   1f5e7:	49 89 c0             	mov    %rax,%r8
   1f5ea:	48 8d 0d 87 78 11 00 	lea    0x117887(%rip),%rcx        # 136e78 <ucTempBuffer.3463>
   1f5f1:	ba 00 00 00 00       	mov    $0x0,%edx
   1f5f6:	be 01 00 00 00       	mov    $0x1,%esi
   1f5fb:	bf 0a 00 00 00       	mov    $0xa,%edi
   1f600:	e8 ac 9a fe ff       	callq  90b1 <xStreamBufferGenericCreateStatic>
   1f605:	48 89 45 a8          	mov    %rax,-0x58(%rbp)
   1f609:	48 8b 45 a8          	mov    -0x58(%rbp),%rax
   1f60d:	48 89 c7             	mov    %rax,%rdi
   1f610:	e8 ea 9e fe ff       	callq  94ff <xStreamBufferReset>
   1f615:	48 8b 45 a8          	mov    -0x58(%rbp),%rax
   1f619:	48 89 c7             	mov    %rax,%rdi
   1f61c:	e8 2b 9d fe ff       	callq  934c <vStreamBufferDelete>
   1f621:	e9 e1 fe ff ff       	jmpq   1f507 <prvSenderTask+0x140>

000000000001f626 <prvReceiverTask>:
   1f626:	f3 0f 1e fa          	endbr64 
   1f62a:	55                   	push   %rbp
   1f62b:	48 89 e5             	mov    %rsp,%rbp
   1f62e:	48 83 ec 60          	sub    $0x60,%rsp
   1f632:	48 89 7d a8          	mov    %rdi,-0x58(%rbp)
   1f636:	64 48 8b 04 25 28 00 	mov    %fs:0x28,%rax
   1f63d:	00 00 
   1f63f:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
   1f643:	31 c0                	xor    %eax,%eax
   1f645:	48 8b 45 a8          	mov    -0x58(%rbp),%rax
   1f649:	48 89 45 c0          	mov    %rax,-0x40(%rbp)
   1f64d:	48 c7 45 c8 05 00 00 	movq   $0x5,-0x38(%rbp)
   1f654:	00 
   1f655:	48 8b 05 34 1a 01 00 	mov    0x11a34(%rip),%rax        # 31090 <pc55ByteString>
   1f65c:	48 89 c7             	mov    %rax,%rdi
   1f65f:	e8 4c 2e fe ff       	callq  24b0 <strlen@plt>
   1f664:	48 89 45 d0          	mov    %rax,-0x30(%rbp)
   1f668:	48 c7 45 b8 00 00 00 	movq   $0x0,-0x48(%rbp)
   1f66f:	00 
   1f670:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
   1f674:	48 2b 45 b8          	sub    -0x48(%rbp),%rax
   1f678:	ba 0c 00 00 00       	mov    $0xc,%edx
   1f67d:	48 83 f8 0c          	cmp    $0xc,%rax
   1f681:	48 0f 47 c2          	cmova  %rdx,%rax
   1f685:	48 89 45 d8          	mov    %rax,-0x28(%rbp)
   1f689:	48 8b 4d c8          	mov    -0x38(%rbp),%rcx
   1f68d:	48 8b 55 d8          	mov    -0x28(%rbp),%rdx
   1f691:	48 8d 75 ec          	lea    -0x14(%rbp),%rsi
   1f695:	48 8b 45 c0          	mov    -0x40(%rbp),%rax
   1f699:	48 89 c7             	mov    %rax,%rdi
   1f69c:	e8 53 a8 fe ff       	callq  9ef4 <xStreamBufferReceive>
   1f6a1:	48 89 45 e0          	mov    %rax,-0x20(%rbp)
   1f6a5:	48 83 7d e0 00       	cmpq   $0x0,-0x20(%rbp)
   1f6aa:	74 dd                	je     1f689 <prvReceiverTask+0x63>
   1f6ac:	48 8b 15 dd 19 01 00 	mov    0x119dd(%rip),%rdx        # 31090 <pc55ByteString>
   1f6b3:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
   1f6b7:	48 8d 0c 02          	lea    (%rdx,%rax,1),%rcx
   1f6bb:	48 8b 55 e0          	mov    -0x20(%rbp),%rdx
   1f6bf:	48 8d 45 ec          	lea    -0x14(%rbp),%rax
   1f6c3:	48 89 ce             	mov    %rcx,%rsi
   1f6c6:	48 89 c7             	mov    %rax,%rdi
   1f6c9:	e8 52 2e fe ff       	callq  2520 <memcmp@plt>
   1f6ce:	85 c0                	test   %eax,%eax
   1f6d0:	0f 94 c0             	sete   %al
   1f6d3:	0f b6 c0             	movzbl %al,%eax
   1f6d6:	48 89 c7             	mov    %rax,%rdi
   1f6d9:	e8 02 e8 ff ff       	callq  1dee0 <prvCheckExpectedState>
   1f6de:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
   1f6e2:	48 01 45 b8          	add    %rax,-0x48(%rbp)
   1f6e6:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
   1f6ea:	48 3b 45 d0          	cmp    -0x30(%rbp),%rax
   1f6ee:	72 80                	jb     1f670 <prvReceiverTask+0x4a>
   1f6f0:	48 c7 45 b8 00 00 00 	movq   $0x0,-0x48(%rbp)
   1f6f7:	00 
   1f6f8:	e9 73 ff ff ff       	jmpq   1f670 <prvReceiverTask+0x4a>

000000000001f6fd <prvEchoClient>:
   1f6fd:	f3 0f 1e fa          	endbr64 
   1f701:	55                   	push   %rbp
   1f702:	48 89 e5             	mov    %rsp,%rbp
   1f705:	48 83 ec 60          	sub    $0x60,%rsp
   1f709:	48 89 7d a8          	mov    %rdi,-0x58(%rbp)
   1f70d:	48 c7 45 c0 00 00 00 	movq   $0x0,-0x40(%rbp)
   1f714:	00 
   1f715:	c6 45 bf 20          	movb   $0x20,-0x41(%rbp)
   1f719:	48 c7 45 d0 32 00 00 	movq   $0x32,-0x30(%rbp)
   1f720:	00 
   1f721:	bf 00 00 00 00       	mov    $0x0,%edi
   1f726:	e8 7e d2 fe ff       	callq  c9a9 <uxTaskPriorityGet>
   1f72b:	48 89 45 d8          	mov    %rax,-0x28(%rbp)
   1f72f:	48 8b 45 a8          	mov    -0x58(%rbp),%rax
   1f733:	48 89 45 e0          	mov    %rax,-0x20(%rbp)
   1f737:	bf 1e 00 00 00       	mov    $0x1e,%edi
   1f73c:	e8 3f 2f ff ff       	callq  12680 <pvPortMalloc>
   1f741:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
   1f745:	bf 1e 00 00 00       	mov    $0x1e,%edi
   1f74a:	e8 31 2f ff ff       	callq  12680 <pvPortMalloc>
   1f74f:	48 89 45 f0          	mov    %rax,-0x10(%rbp)
   1f753:	48 83 7d e8 00       	cmpq   $0x0,-0x18(%rbp)
   1f758:	75 11                	jne    1f76b <prvEchoClient+0x6e>
   1f75a:	be 4c 03 00 00       	mov    $0x34c,%esi
   1f75f:	48 8d 3d 32 8b 00 00 	lea    0x8b32(%rip),%rdi        # 28298 <xInterruptGivePeriod+0x4a8>
   1f766:	e8 a1 45 fe ff       	callq  3d0c <vAssertCalled>
   1f76b:	48 83 7d f0 00       	cmpq   $0x0,-0x10(%rbp)
   1f770:	75 11                	jne    1f783 <prvEchoClient+0x86>
   1f772:	be 4d 03 00 00       	mov    $0x34d,%esi
   1f777:	48 8d 3d 1a 8b 00 00 	lea    0x8b1a(%rip),%rdi        # 28298 <xInterruptGivePeriod+0x4a8>
   1f77e:	e8 89 45 fe ff       	callq  3d0c <vAssertCalled>
   1f783:	48 83 45 c0 01       	addq   $0x1,-0x40(%rbp)
   1f788:	48 83 7d c0 16       	cmpq   $0x16,-0x40(%rbp)
   1f78d:	76 08                	jbe    1f797 <prvEchoClient+0x9a>
   1f78f:	48 c7 45 c0 01 00 00 	movq   $0x1,-0x40(%rbp)
   1f796:	00 
   1f797:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
   1f79b:	ba 1e 00 00 00       	mov    $0x1e,%edx
   1f7a0:	be 00 00 00 00       	mov    $0x0,%esi
   1f7a5:	48 89 c7             	mov    %rax,%rdi
   1f7a8:	e8 63 2d fe ff       	callq  2510 <memset@plt>
   1f7ad:	48 c7 45 c8 00 00 00 	movq   $0x0,-0x38(%rbp)
   1f7b4:	00 
   1f7b5:	eb 2a                	jmp    1f7e1 <prvEchoClient+0xe4>
   1f7b7:	48 8b 55 e8          	mov    -0x18(%rbp),%rdx
   1f7bb:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
   1f7bf:	48 01 c2             	add    %rax,%rdx
   1f7c2:	0f b6 45 bf          	movzbl -0x41(%rbp),%eax
   1f7c6:	88 02                	mov    %al,(%rdx)
   1f7c8:	0f b6 45 bf          	movzbl -0x41(%rbp),%eax
   1f7cc:	83 c0 01             	add    $0x1,%eax
   1f7cf:	88 45 bf             	mov    %al,-0x41(%rbp)
   1f7d2:	80 7d bf 7f          	cmpb   $0x7f,-0x41(%rbp)
   1f7d6:	75 04                	jne    1f7dc <prvEchoClient+0xdf>
   1f7d8:	c6 45 bf 20          	movb   $0x20,-0x41(%rbp)
   1f7dc:	48 83 45 c8 01       	addq   $0x1,-0x38(%rbp)
   1f7e1:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
   1f7e5:	48 3b 45 c0          	cmp    -0x40(%rbp),%rax
   1f7e9:	72 cc                	jb     1f7b7 <prvEchoClient+0xba>
   1f7eb:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
   1f7ef:	48 8b 00             	mov    (%rax),%rax
   1f7f2:	48 8b 4d d0          	mov    -0x30(%rbp),%rcx
   1f7f6:	48 8b 55 c0          	mov    -0x40(%rbp),%rdx
   1f7fa:	48 8b 75 e8          	mov    -0x18(%rbp),%rsi
   1f7fe:	48 89 c7             	mov    %rax,%rdi
   1f801:	e8 c3 9f fe ff       	callq  97c9 <xStreamBufferSend>
   1f806:	48 89 45 c8          	mov    %rax,-0x38(%rbp)
   1f80a:	48 83 7d c8 00       	cmpq   $0x0,-0x38(%rbp)
   1f80f:	74 da                	je     1f7eb <prvEchoClient+0xee>
   1f811:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
   1f815:	ba 1e 00 00 00       	mov    $0x1e,%edx
   1f81a:	be 00 00 00 00       	mov    $0x0,%esi
   1f81f:	48 89 c7             	mov    %rax,%rdi
   1f822:	e8 e9 2c fe ff       	callq  2510 <memset@plt>
   1f827:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
   1f82b:	48 8b 40 08          	mov    0x8(%rax),%rax
   1f82f:	48 8b 55 c0          	mov    -0x40(%rbp),%rdx
   1f833:	48 8b 75 f0          	mov    -0x10(%rbp),%rsi
   1f837:	48 c7 c1 ff ff ff ff 	mov    $0xffffffffffffffff,%rcx
   1f83e:	48 89 c7             	mov    %rax,%rdi
   1f841:	e8 ae a6 fe ff       	callq  9ef4 <xStreamBufferReceive>
   1f846:	48 8b 55 f0          	mov    -0x10(%rbp),%rdx
   1f84a:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
   1f84e:	48 89 d6             	mov    %rdx,%rsi
   1f851:	48 89 c7             	mov    %rax,%rdi
   1f854:	e8 f7 2c fe ff       	callq  2550 <strcmp@plt>
   1f859:	85 c0                	test   %eax,%eax
   1f85b:	0f 94 c0             	sete   %al
   1f85e:	0f b6 c0             	movzbl %al,%eax
   1f861:	48 89 c7             	mov    %rax,%rdi
   1f864:	e8 77 e6 ff ff       	callq  1dee0 <prvCheckExpectedState>
   1f869:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
   1f86d:	48 8d 14 85 00 00 00 	lea    0x0(,%rax,4),%rdx
   1f874:	00 
   1f875:	48 8d 05 e4 75 11 00 	lea    0x1175e4(%rip),%rax        # 136e60 <ulEchoLoopCounters>
   1f87c:	8b 04 02             	mov    (%rdx,%rax,1),%eax
   1f87f:	8d 48 01             	lea    0x1(%rax),%ecx
   1f882:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
   1f886:	48 8d 14 85 00 00 00 	lea    0x0(,%rax,4),%rdx
   1f88d:	00 
   1f88e:	48 8d 05 cb 75 11 00 	lea    0x1175cb(%rip),%rax        # 136e60 <ulEchoLoopCounters>
   1f895:	89 0c 02             	mov    %ecx,(%rdx,%rax,1)
   1f898:	ba 00 00 00 00       	mov    $0x0,%edx
   1f89d:	be 01 00 00 00       	mov    $0x1,%esi
   1f8a2:	bf 1e 00 00 00       	mov    $0x1e,%edi
   1f8a7:	e8 b6 95 fe ff       	callq  8e62 <xStreamBufferGenericCreate>
   1f8ac:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
   1f8b0:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   1f8b4:	48 89 c7             	mov    %rax,%rdi
   1f8b7:	e8 90 9a fe ff       	callq  934c <vStreamBufferDelete>
   1f8bc:	ba 00 00 00 00       	mov    $0x0,%edx
   1f8c1:	be 01 00 00 00       	mov    $0x1,%esi
   1f8c6:	bf 01 00 00 00       	mov    $0x1,%edi
   1f8cb:	e8 92 95 fe ff       	callq  8e62 <xStreamBufferGenericCreate>
   1f8d0:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
   1f8d4:	48 83 7d f8 00       	cmpq   $0x0,-0x8(%rbp)
   1f8d9:	75 11                	jne    1f8ec <prvEchoClient+0x1ef>
   1f8db:	be 87 03 00 00       	mov    $0x387,%esi
   1f8e0:	48 8d 3d b1 89 00 00 	lea    0x89b1(%rip),%rdi        # 28298 <xInterruptGivePeriod+0x4a8>
   1f8e7:	e8 20 44 fe ff       	callq  3d0c <vAssertCalled>
   1f8ec:	48 8b 75 e8          	mov    -0x18(%rbp),%rsi
   1f8f0:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   1f8f4:	b9 00 00 00 00       	mov    $0x0,%ecx
   1f8f9:	ba 01 00 00 00       	mov    $0x1,%edx
   1f8fe:	48 89 c7             	mov    %rax,%rdi
   1f901:	e8 c3 9e fe ff       	callq  97c9 <xStreamBufferSend>
   1f906:	48 89 45 c8          	mov    %rax,-0x38(%rbp)
   1f90a:	48 83 7d c8 01       	cmpq   $0x1,-0x38(%rbp)
   1f90f:	74 11                	je     1f922 <prvEchoClient+0x225>
   1f911:	be 8c 03 00 00       	mov    $0x38c,%esi
   1f916:	48 8d 3d 7b 89 00 00 	lea    0x897b(%rip),%rdi        # 28298 <xInterruptGivePeriod+0x4a8>
   1f91d:	e8 ea 43 fe ff       	callq  3d0c <vAssertCalled>
   1f922:	48 8b 75 e8          	mov    -0x18(%rbp),%rsi
   1f926:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   1f92a:	b9 00 00 00 00       	mov    $0x0,%ecx
   1f92f:	ba 01 00 00 00       	mov    $0x1,%edx
   1f934:	48 89 c7             	mov    %rax,%rdi
   1f937:	e8 8d 9e fe ff       	callq  97c9 <xStreamBufferSend>
   1f93c:	48 89 45 c8          	mov    %rax,-0x38(%rbp)
   1f940:	48 83 7d c8 00       	cmpq   $0x0,-0x38(%rbp)
   1f945:	74 11                	je     1f958 <prvEchoClient+0x25b>
   1f947:	be 90 03 00 00       	mov    $0x390,%esi
   1f94c:	48 8d 3d 45 89 00 00 	lea    0x8945(%rip),%rdi        # 28298 <xInterruptGivePeriod+0x4a8>
   1f953:	e8 b4 43 fe ff       	callq  3d0c <vAssertCalled>
   1f958:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
   1f95c:	ba 1e 00 00 00       	mov    $0x1e,%edx
   1f961:	be 00 00 00 00       	mov    $0x0,%esi
   1f966:	48 89 c7             	mov    %rax,%rdi
   1f969:	e8 a2 2b fe ff       	callq  2510 <memset@plt>
   1f96e:	48 8b 75 f0          	mov    -0x10(%rbp),%rsi
   1f972:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   1f976:	b9 00 00 00 00       	mov    $0x0,%ecx
   1f97b:	ba 01 00 00 00       	mov    $0x1,%edx
   1f980:	48 89 c7             	mov    %rax,%rdi
   1f983:	e8 6c a5 fe ff       	callq  9ef4 <xStreamBufferReceive>
   1f988:	48 89 45 c8          	mov    %rax,-0x38(%rbp)
   1f98c:	48 83 7d c8 01       	cmpq   $0x1,-0x38(%rbp)
   1f991:	74 11                	je     1f9a4 <prvEchoClient+0x2a7>
   1f993:	be 96 03 00 00       	mov    $0x396,%esi
   1f998:	48 8d 3d f9 88 00 00 	lea    0x88f9(%rip),%rdi        # 28298 <xInterruptGivePeriod+0x4a8>
   1f99f:	e8 68 43 fe ff       	callq  3d0c <vAssertCalled>
   1f9a4:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
   1f9a8:	0f b6 10             	movzbl (%rax),%edx
   1f9ab:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
   1f9af:	0f b6 00             	movzbl (%rax),%eax
   1f9b2:	38 c2                	cmp    %al,%dl
   1f9b4:	74 11                	je     1f9c7 <prvEchoClient+0x2ca>
   1f9b6:	be 98 03 00 00       	mov    $0x398,%esi
   1f9bb:	48 8d 3d d6 88 00 00 	lea    0x88d6(%rip),%rdi        # 28298 <xInterruptGivePeriod+0x4a8>
   1f9c2:	e8 45 43 fe ff       	callq  3d0c <vAssertCalled>
   1f9c7:	48 8b 75 f0          	mov    -0x10(%rbp),%rsi
   1f9cb:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   1f9cf:	b9 00 00 00 00       	mov    $0x0,%ecx
   1f9d4:	ba 01 00 00 00       	mov    $0x1,%edx
   1f9d9:	48 89 c7             	mov    %rax,%rdi
   1f9dc:	e8 13 a5 fe ff       	callq  9ef4 <xStreamBufferReceive>
   1f9e1:	48 89 45 c8          	mov    %rax,-0x38(%rbp)
   1f9e5:	48 83 7d c8 00       	cmpq   $0x0,-0x38(%rbp)
   1f9ea:	74 11                	je     1f9fd <prvEchoClient+0x300>
   1f9ec:	be 9c 03 00 00       	mov    $0x39c,%esi
   1f9f1:	48 8d 3d a0 88 00 00 	lea    0x88a0(%rip),%rdi        # 28298 <xInterruptGivePeriod+0x4a8>
   1f9f8:	e8 0f 43 fe ff       	callq  3d0c <vAssertCalled>
   1f9fd:	48 8b 75 e8          	mov    -0x18(%rbp),%rsi
   1fa01:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   1fa05:	b9 00 00 00 00       	mov    $0x0,%ecx
   1fa0a:	ba 02 00 00 00       	mov    $0x2,%edx
   1fa0f:	48 89 c7             	mov    %rax,%rdi
   1fa12:	e8 b2 9d fe ff       	callq  97c9 <xStreamBufferSend>
   1fa17:	48 89 45 c8          	mov    %rax,-0x38(%rbp)
   1fa1b:	48 83 7d c8 01       	cmpq   $0x1,-0x38(%rbp)
   1fa20:	74 11                	je     1fa33 <prvEchoClient+0x336>
   1fa22:	be a2 03 00 00       	mov    $0x3a2,%esi
   1fa27:	48 8d 3d 6a 88 00 00 	lea    0x886a(%rip),%rdi        # 28298 <xInterruptGivePeriod+0x4a8>
   1fa2e:	e8 d9 42 fe ff       	callq  3d0c <vAssertCalled>
   1fa33:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
   1fa37:	ba 1e 00 00 00       	mov    $0x1e,%edx
   1fa3c:	be 00 00 00 00       	mov    $0x0,%esi
   1fa41:	48 89 c7             	mov    %rax,%rdi
   1fa44:	e8 c7 2a fe ff       	callq  2510 <memset@plt>
   1fa49:	48 8b 75 f0          	mov    -0x10(%rbp),%rsi
   1fa4d:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   1fa51:	b9 00 00 00 00       	mov    $0x0,%ecx
   1fa56:	ba 02 00 00 00       	mov    $0x2,%edx
   1fa5b:	48 89 c7             	mov    %rax,%rdi
   1fa5e:	e8 91 a4 fe ff       	callq  9ef4 <xStreamBufferReceive>
   1fa63:	48 89 45 c8          	mov    %rax,-0x38(%rbp)
   1fa67:	48 83 7d c8 01       	cmpq   $0x1,-0x38(%rbp)
   1fa6c:	74 11                	je     1fa7f <prvEchoClient+0x382>
   1fa6e:	be a9 03 00 00       	mov    $0x3a9,%esi
   1fa73:	48 8d 3d 1e 88 00 00 	lea    0x881e(%rip),%rdi        # 28298 <xInterruptGivePeriod+0x4a8>
   1fa7a:	e8 8d 42 fe ff       	callq  3d0c <vAssertCalled>
   1fa7f:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
   1fa83:	0f b6 10             	movzbl (%rax),%edx
   1fa86:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
   1fa8a:	0f b6 00             	movzbl (%rax),%eax
   1fa8d:	38 c2                	cmp    %al,%dl
   1fa8f:	74 11                	je     1faa2 <prvEchoClient+0x3a5>
   1fa91:	be ab 03 00 00       	mov    $0x3ab,%esi
   1fa96:	48 8d 3d fb 87 00 00 	lea    0x87fb(%rip),%rdi        # 28298 <xInterruptGivePeriod+0x4a8>
   1fa9d:	e8 6a 42 fe ff       	callq  3d0c <vAssertCalled>
   1faa2:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   1faa6:	48 89 c7             	mov    %rax,%rdi
   1faa9:	e8 9e 98 fe ff       	callq  934c <vStreamBufferDelete>
   1faae:	e9 d0 fc ff ff       	jmpq   1f783 <prvEchoClient+0x86>

000000000001fab3 <prvEchoServer>:
   1fab3:	f3 0f 1e fa          	endbr64 
   1fab7:	55                   	push   %rbp
   1fab8:	48 89 e5             	mov    %rsp,%rbp
   1fabb:	48 83 ec 50          	sub    $0x50,%rsp
   1fabf:	48 89 7d b8          	mov    %rdi,-0x48(%rbp)
   1fac3:	64 48 8b 04 25 28 00 	mov    %fs:0x28,%rax
   1faca:	00 00 
   1facc:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
   1fad0:	31 c0                	xor    %eax,%eax
   1fad2:	48 c7 45 c0 5e 01 00 	movq   $0x15e,-0x40(%rbp)
   1fad9:	00 
   1fada:	ba 00 00 00 00       	mov    $0x0,%edx
   1fadf:	be 01 00 00 00       	mov    $0x1,%esi
   1fae4:	bf 1e 00 00 00       	mov    $0x1e,%edi
   1fae9:	e8 74 93 fe ff       	callq  8e62 <xStreamBufferGenericCreate>
   1faee:	48 89 45 e0          	mov    %rax,-0x20(%rbp)
   1faf2:	ba 00 00 00 00       	mov    $0x0,%edx
   1faf7:	be 01 00 00 00       	mov    $0x1,%esi
   1fafc:	bf 1e 00 00 00       	mov    $0x1e,%edi
   1fb01:	e8 5c 93 fe ff       	callq  8e62 <xStreamBufferGenericCreate>
   1fb06:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
   1fb0a:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
   1fb0e:	48 85 c0             	test   %rax,%rax
   1fb11:	75 11                	jne    1fb24 <prvEchoServer+0x71>
   1fb13:	be c3 03 00 00       	mov    $0x3c3,%esi
   1fb18:	48 8d 3d 79 87 00 00 	lea    0x8779(%rip),%rdi        # 28298 <xInterruptGivePeriod+0x4a8>
   1fb1f:	e8 e8 41 fe ff       	callq  3d0c <vAssertCalled>
   1fb24:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
   1fb28:	48 85 c0             	test   %rax,%rax
   1fb2b:	75 11                	jne    1fb3e <prvEchoServer+0x8b>
   1fb2d:	be c4 03 00 00       	mov    $0x3c4,%esi
   1fb32:	48 8d 3d 5f 87 00 00 	lea    0x875f(%rip),%rdi        # 28298 <xInterruptGivePeriod+0x4a8>
   1fb39:	e8 ce 41 fe ff       	callq  3d0c <vAssertCalled>
   1fb3e:	bf 1e 00 00 00       	mov    $0x1e,%edi
   1fb43:	e8 38 2b ff ff       	callq  12680 <pvPortMalloc>
   1fb48:	48 89 45 c8          	mov    %rax,-0x38(%rbp)
   1fb4c:	48 83 7d c8 00       	cmpq   $0x0,-0x38(%rbp)
   1fb51:	75 11                	jne    1fb64 <prvEchoServer+0xb1>
   1fb53:	be c8 03 00 00       	mov    $0x3c8,%esi
   1fb58:	48 8d 3d 39 87 00 00 	lea    0x8739(%rip),%rdi        # 28298 <xInterruptGivePeriod+0x4a8>
   1fb5f:	e8 a8 41 fe ff       	callq  3d0c <vAssertCalled>
   1fb64:	e8 2f dd fe ff       	callq  d898 <xTaskGetTickCount>
   1fb69:	48 89 45 d0          	mov    %rax,-0x30(%rbp)
   1fb6d:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
   1fb71:	48 8b 55 c0          	mov    -0x40(%rbp),%rdx
   1fb75:	48 8b 75 c8          	mov    -0x38(%rbp),%rsi
   1fb79:	48 89 d1             	mov    %rdx,%rcx
   1fb7c:	ba 1e 00 00 00       	mov    $0x1e,%edx
   1fb81:	48 89 c7             	mov    %rax,%rdi
   1fb84:	e8 6b a3 fe ff       	callq  9ef4 <xStreamBufferReceive>
   1fb89:	48 89 45 d8          	mov    %rax,-0x28(%rbp)
   1fb8d:	e8 06 dd fe ff       	callq  d898 <xTaskGetTickCount>
   1fb92:	48 2b 45 d0          	sub    -0x30(%rbp),%rax
   1fb96:	48 39 45 c0          	cmp    %rax,-0x40(%rbp)
   1fb9a:	0f 96 c0             	setbe  %al
   1fb9d:	0f b6 c0             	movzbl %al,%eax
   1fba0:	48 89 c7             	mov    %rax,%rdi
   1fba3:	e8 38 e3 ff ff       	callq  1dee0 <prvCheckExpectedState>
   1fba8:	48 83 7d d8 00       	cmpq   $0x0,-0x28(%rbp)
   1fbad:	0f 94 c0             	sete   %al
   1fbb0:	0f b6 c0             	movzbl %al,%eax
   1fbb3:	48 89 c7             	mov    %rax,%rdi
   1fbb6:	e8 25 e3 ff ff       	callq  1dee0 <prvCheckExpectedState>
   1fbbb:	bf 00 00 00 00       	mov    $0x0,%edi
   1fbc0:	e8 e4 cd fe ff       	callq  c9a9 <uxTaskPriorityGet>
   1fbc5:	48 85 c0             	test   %rax,%rax
   1fbc8:	75 2d                	jne    1fbf7 <prvEchoServer+0x144>
   1fbca:	48 8d 45 e0          	lea    -0x20(%rbp),%rax
   1fbce:	41 b9 00 00 00 00    	mov    $0x0,%r9d
   1fbd4:	41 b8 01 00 00 00    	mov    $0x1,%r8d
   1fbda:	48 89 c1             	mov    %rax,%rcx
   1fbdd:	ba 69 00 00 00       	mov    $0x69,%edx
   1fbe2:	48 8d 35 08 87 00 00 	lea    0x8708(%rip),%rsi        # 282f1 <xInterruptGivePeriod+0x501>
   1fbe9:	48 8d 3d 0d fb ff ff 	lea    -0x4f3(%rip),%rdi        # 1f6fd <prvEchoClient>
   1fbf0:	e8 02 c1 fe ff       	callq  bcf7 <xTaskCreate>
   1fbf5:	eb 37                	jmp    1fc2e <prvEchoServer+0x17b>
   1fbf7:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
   1fbfb:	48 89 c7             	mov    %rax,%rdi
   1fbfe:	e8 1a e3 ff ff       	callq  1df1d <prvSingleTaskTests>
   1fc03:	48 8d 45 e0          	lea    -0x20(%rbp),%rax
   1fc07:	41 b9 00 00 00 00    	mov    $0x0,%r9d
   1fc0d:	41 b8 00 00 00 00    	mov    $0x0,%r8d
   1fc13:	48 89 c1             	mov    %rax,%rcx
   1fc16:	ba 69 00 00 00       	mov    $0x69,%edx
   1fc1b:	48 8d 35 cf 86 00 00 	lea    0x86cf(%rip),%rsi        # 282f1 <xInterruptGivePeriod+0x501>
   1fc22:	48 8d 3d d4 fa ff ff 	lea    -0x52c(%rip),%rdi        # 1f6fd <prvEchoClient>
   1fc29:	e8 c9 c0 fe ff       	callq  bcf7 <xTaskCreate>
   1fc2e:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
   1fc32:	ba 1e 00 00 00       	mov    $0x1e,%edx
   1fc37:	be 00 00 00 00       	mov    $0x0,%esi
   1fc3c:	48 89 c7             	mov    %rax,%rdi
   1fc3f:	e8 cc 28 fe ff       	callq  2510 <memset@plt>
   1fc44:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
   1fc48:	48 8b 75 c8          	mov    -0x38(%rbp),%rsi
   1fc4c:	48 c7 c1 ff ff ff ff 	mov    $0xffffffffffffffff,%rcx
   1fc53:	ba 1e 00 00 00       	mov    $0x1e,%edx
   1fc58:	48 89 c7             	mov    %rax,%rdi
   1fc5b:	e8 94 a2 fe ff       	callq  9ef4 <xStreamBufferReceive>
   1fc60:	48 89 45 d8          	mov    %rax,-0x28(%rbp)
   1fc64:	48 83 7d d8 00       	cmpq   $0x0,-0x28(%rbp)
   1fc69:	0f 95 c0             	setne  %al
   1fc6c:	0f b6 c0             	movzbl %al,%eax
   1fc6f:	48 89 c7             	mov    %rax,%rdi
   1fc72:	e8 69 e2 ff ff       	callq  1dee0 <prvCheckExpectedState>
   1fc77:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
   1fc7b:	48 8b 55 d8          	mov    -0x28(%rbp),%rdx
   1fc7f:	48 8b 75 c8          	mov    -0x38(%rbp),%rsi
   1fc83:	48 c7 c1 ff ff ff ff 	mov    $0xffffffffffffffff,%rcx
   1fc8a:	48 89 c7             	mov    %rax,%rdi
   1fc8d:	e8 37 9b fe ff       	callq  97c9 <xStreamBufferSend>
   1fc92:	eb 9a                	jmp    1fc2e <prvEchoServer+0x17b>

000000000001fc94 <vPeriodicStreamBufferProcessing>:
   1fc94:	f3 0f 1e fa          	endbr64 
   1fc98:	55                   	push   %rbp
   1fc99:	48 89 e5             	mov    %rsp,%rbp
   1fc9c:	48 83 ec 10          	sub    $0x10,%rsp
   1fca0:	64 48 8b 04 25 28 00 	mov    %fs:0x28,%rax
   1fca7:	00 00 
   1fca9:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
   1fcad:	31 c0                	xor    %eax,%eax
   1fcaf:	48 c7 45 f0 00 00 00 	movq   $0x0,-0x10(%rbp)
   1fcb6:	00 
   1fcb7:	48 8b 05 b2 71 11 00 	mov    0x1171b2(%rip),%rax        # 136e70 <xInterruptStreamBuffer>
   1fcbe:	48 85 c0             	test   %rax,%rax
   1fcc1:	74 5c                	je     1fd1f <vPeriodicStreamBufferProcessing+0x8b>
   1fcc3:	48 8b 15 be 13 01 00 	mov    0x113be(%rip),%rdx        # 31088 <pcDataSentFromInterrupt>
   1fcca:	48 8b 05 b7 71 11 00 	mov    0x1171b7(%rip),%rax        # 136e88 <xNextChar.3516>
   1fcd1:	48 8d 34 02          	lea    (%rdx,%rax,1),%rsi
   1fcd5:	48 8b 05 94 71 11 00 	mov    0x117194(%rip),%rax        # 136e70 <xInterruptStreamBuffer>
   1fcdc:	48 8d 55 f0          	lea    -0x10(%rbp),%rdx
   1fce0:	48 89 d1             	mov    %rdx,%rcx
   1fce3:	ba 01 00 00 00       	mov    $0x1,%edx
   1fce8:	48 89 c7             	mov    %rax,%rdi
   1fceb:	e8 0e 9f fe ff       	callq  9bfe <xStreamBufferSendFromISR>
   1fcf0:	48 8b 05 91 13 01 00 	mov    0x11391(%rip),%rax        # 31088 <pcDataSentFromInterrupt>
   1fcf7:	48 89 c7             	mov    %rax,%rdi
   1fcfa:	e8 b1 27 fe ff       	callq  24b0 <strlen@plt>
   1fcff:	48 8b 15 82 71 11 00 	mov    0x117182(%rip),%rdx        # 136e88 <xNextChar.3516>
   1fd06:	48 39 d0             	cmp    %rdx,%rax
   1fd09:	76 1f                	jbe    1fd2a <vPeriodicStreamBufferProcessing+0x96>
   1fd0b:	48 8b 05 76 71 11 00 	mov    0x117176(%rip),%rax        # 136e88 <xNextChar.3516>
   1fd12:	48 83 c0 01          	add    $0x1,%rax
   1fd16:	48 89 05 6b 71 11 00 	mov    %rax,0x11716b(%rip)        # 136e88 <xNextChar.3516>
   1fd1d:	eb 0b                	jmp    1fd2a <vPeriodicStreamBufferProcessing+0x96>
   1fd1f:	48 c7 05 5e 71 11 00 	movq   $0x0,0x11715e(%rip)        # 136e88 <xNextChar.3516>
   1fd26:	00 00 00 00 
   1fd2a:	90                   	nop
   1fd2b:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   1fd2f:	64 48 33 04 25 28 00 	xor    %fs:0x28,%rax
   1fd36:	00 00 
   1fd38:	74 05                	je     1fd3f <vPeriodicStreamBufferProcessing+0xab>
   1fd3a:	e8 91 27 fe ff       	callq  24d0 <__stack_chk_fail@plt>
   1fd3f:	c9                   	leaveq 
   1fd40:	c3                   	retq   

000000000001fd41 <prvInterruptTriggerLevelTest>:
   1fd41:	f3 0f 1e fa          	endbr64 
   1fd45:	55                   	push   %rbp
   1fd46:	48 89 e5             	mov    %rsp,%rbp
   1fd49:	48 83 c4 80          	add    $0xffffffffffffff80,%rsp
   1fd4d:	48 89 7d 88          	mov    %rdi,-0x78(%rbp)
   1fd51:	64 48 8b 04 25 28 00 	mov    %fs:0x28,%rax
   1fd58:	00 00 
   1fd5a:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
   1fd5e:	31 c0                	xor    %eax,%eax
   1fd60:	48 c7 45 98 01 00 00 	movq   $0x1,-0x68(%rbp)
   1fd67:	00 
   1fd68:	48 c7 45 a8 09 00 00 	movq   $0x9,-0x58(%rbp)
   1fd6f:	00 
   1fd70:	48 c7 45 b0 07 00 00 	movq   $0x7,-0x50(%rbp)
   1fd77:	00 
   1fd78:	48 c7 45 b8 02 00 00 	movq   $0x2,-0x48(%rbp)
   1fd7f:	00 
   1fd80:	48 c7 45 c0 05 00 00 	movq   $0x5,-0x40(%rbp)
   1fd87:	00 
   1fd88:	48 c7 45 c8 64 00 00 	movq   $0x64,-0x38(%rbp)
   1fd8f:	00 
   1fd90:	48 c7 45 a0 00 00 00 	movq   $0x0,-0x60(%rbp)
   1fd97:	00 
   1fd98:	48 c7 45 d0 00 00 00 	movq   $0x0,-0x30(%rbp)
   1fd9f:	00 
   1fda0:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
   1fda4:	48 89 45 98          	mov    %rax,-0x68(%rbp)
   1fda8:	e9 ba 01 00 00       	jmpq   1ff67 <prvInterruptTriggerLevelTest+0x226>
   1fdad:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
   1fdb1:	48 89 c7             	mov    %rax,%rdi
   1fdb4:	e8 e9 c9 fe ff       	callq  c7a2 <vTaskDelay>
   1fdb9:	48 8d 45 ef          	lea    -0x11(%rbp),%rax
   1fdbd:	ba 09 00 00 00       	mov    $0x9,%edx
   1fdc2:	be 00 00 00 00       	mov    $0x0,%esi
   1fdc7:	48 89 c7             	mov    %rax,%rdi
   1fdca:	e8 41 27 fe ff       	callq  2510 <memset@plt>
   1fdcf:	48 8b 4d 98          	mov    -0x68(%rbp),%rcx
   1fdd3:	48 8b 45 a8          	mov    -0x58(%rbp),%rax
   1fdd7:	ba 00 00 00 00       	mov    $0x0,%edx
   1fddc:	48 89 ce             	mov    %rcx,%rsi
   1fddf:	48 89 c7             	mov    %rax,%rdi
   1fde2:	e8 7b 90 fe ff       	callq  8e62 <xStreamBufferGenericCreate>
   1fde7:	48 89 45 d8          	mov    %rax,-0x28(%rbp)
   1fdeb:	48 83 7d d8 00       	cmpq   $0x0,-0x28(%rbp)
   1fdf0:	75 11                	jne    1fe03 <prvInterruptTriggerLevelTest+0xc2>
   1fdf2:	be 2c 04 00 00       	mov    $0x42c,%esi
   1fdf7:	48 8d 3d 9a 84 00 00 	lea    0x849a(%rip),%rdi        # 28298 <xInterruptGivePeriod+0x4a8>
   1fdfe:	e8 09 3f fe ff       	callq  3d0c <vAssertCalled>
   1fe03:	e8 c7 2f ff ff       	callq  12dcf <vPortEnterCritical>
   1fe08:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
   1fe0c:	48 89 05 5d 70 11 00 	mov    %rax,0x11705d(%rip)        # 136e70 <xInterruptStreamBuffer>
   1fe13:	e8 e5 2f ff ff       	callq  12dfd <vPortExitCritical>
   1fe18:	48 8b 55 c0          	mov    -0x40(%rbp),%rdx
   1fe1c:	48 8d 75 ef          	lea    -0x11(%rbp),%rsi
   1fe20:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
   1fe24:	48 89 d1             	mov    %rdx,%rcx
   1fe27:	ba 09 00 00 00       	mov    $0x9,%edx
   1fe2c:	48 89 c7             	mov    %rax,%rdi
   1fe2f:	e8 c0 a0 fe ff       	callq  9ef4 <xStreamBufferReceive>
   1fe34:	48 89 45 e0          	mov    %rax,-0x20(%rbp)
   1fe38:	e8 92 2f ff ff       	callq  12dcf <vPortEnterCritical>
   1fe3d:	48 c7 05 28 70 11 00 	movq   $0x0,0x117028(%rip)        # 136e70 <xInterruptStreamBuffer>
   1fe44:	00 00 00 00 
   1fe48:	e8 b0 2f ff ff       	callq  12dfd <vPortExitCritical>
   1fe4d:	48 8b 45 98          	mov    -0x68(%rbp),%rax
   1fe51:	48 3b 45 c0          	cmp    -0x40(%rbp),%rax
   1fe55:	76 44                	jbe    1fe9b <prvInterruptTriggerLevelTest+0x15a>
   1fe57:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
   1fe5b:	48 3b 45 c0          	cmp    -0x40(%rbp),%rax
   1fe5f:	76 1f                	jbe    1fe80 <prvInterruptTriggerLevelTest+0x13f>
   1fe61:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
   1fe65:	48 2b 45 c0          	sub    -0x40(%rbp),%rax
   1fe69:	48 39 45 d0          	cmp    %rax,-0x30(%rbp)
   1fe6d:	0f 83 96 00 00 00    	jae    1ff09 <prvInterruptTriggerLevelTest+0x1c8>
   1fe73:	48 c7 45 a0 01 00 00 	movq   $0x1,-0x60(%rbp)
   1fe7a:	00 
   1fe7b:	e9 89 00 00 00       	jmpq   1ff09 <prvInterruptTriggerLevelTest+0x1c8>
   1fe80:	48 8b 45 c0          	mov    -0x40(%rbp),%rax
   1fe84:	48 3b 45 e0          	cmp    -0x20(%rbp),%rax
   1fe88:	74 7f                	je     1ff09 <prvInterruptTriggerLevelTest+0x1c8>
   1fe8a:	48 83 7d e0 01       	cmpq   $0x1,-0x20(%rbp)
   1fe8f:	74 78                	je     1ff09 <prvInterruptTriggerLevelTest+0x1c8>
   1fe91:	48 c7 45 a0 01 00 00 	movq   $0x1,-0x60(%rbp)
   1fe98:	00 
   1fe99:	eb 6e                	jmp    1ff09 <prvInterruptTriggerLevelTest+0x1c8>
   1fe9b:	48 8b 45 98          	mov    -0x68(%rbp),%rax
   1fe9f:	48 3b 45 c0          	cmp    -0x40(%rbp),%rax
   1fea3:	73 33                	jae    1fed8 <prvInterruptTriggerLevelTest+0x197>
   1fea5:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
   1fea9:	48 3b 45 98          	cmp    -0x68(%rbp),%rax
   1fead:	73 11                	jae    1fec0 <prvInterruptTriggerLevelTest+0x17f>
   1feaf:	48 83 7d e0 01       	cmpq   $0x1,-0x20(%rbp)
   1feb4:	74 53                	je     1ff09 <prvInterruptTriggerLevelTest+0x1c8>
   1feb6:	48 c7 45 a0 01 00 00 	movq   $0x1,-0x60(%rbp)
   1febd:	00 
   1febe:	eb 49                	jmp    1ff09 <prvInterruptTriggerLevelTest+0x1c8>
   1fec0:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
   1fec4:	48 2b 45 98          	sub    -0x68(%rbp),%rax
   1fec8:	48 39 45 d0          	cmp    %rax,-0x30(%rbp)
   1fecc:	73 3b                	jae    1ff09 <prvInterruptTriggerLevelTest+0x1c8>
   1fece:	48 c7 45 a0 01 00 00 	movq   $0x1,-0x60(%rbp)
   1fed5:	00 
   1fed6:	eb 31                	jmp    1ff09 <prvInterruptTriggerLevelTest+0x1c8>
   1fed8:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
   1fedc:	48 3b 45 c0          	cmp    -0x40(%rbp),%rax
   1fee0:	73 11                	jae    1fef3 <prvInterruptTriggerLevelTest+0x1b2>
   1fee2:	48 83 7d e0 01       	cmpq   $0x1,-0x20(%rbp)
   1fee7:	74 20                	je     1ff09 <prvInterruptTriggerLevelTest+0x1c8>
   1fee9:	48 c7 45 a0 01 00 00 	movq   $0x1,-0x60(%rbp)
   1fef0:	00 
   1fef1:	eb 16                	jmp    1ff09 <prvInterruptTriggerLevelTest+0x1c8>
   1fef3:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
   1fef7:	48 2b 45 c0          	sub    -0x40(%rbp),%rax
   1fefb:	48 39 45 d0          	cmp    %rax,-0x30(%rbp)
   1feff:	73 08                	jae    1ff09 <prvInterruptTriggerLevelTest+0x1c8>
   1ff01:	48 c7 45 a0 01 00 00 	movq   $0x1,-0x60(%rbp)
   1ff08:	00 
   1ff09:	48 83 7d e0 09       	cmpq   $0x9,-0x20(%rbp)
   1ff0e:	76 0a                	jbe    1ff1a <prvInterruptTriggerLevelTest+0x1d9>
   1ff10:	48 c7 45 a0 01 00 00 	movq   $0x1,-0x60(%rbp)
   1ff17:	00 
   1ff18:	eb 26                	jmp    1ff40 <prvInterruptTriggerLevelTest+0x1ff>
   1ff1a:	48 8b 0d 67 11 01 00 	mov    0x11167(%rip),%rcx        # 31088 <pcDataSentFromInterrupt>
   1ff21:	48 8b 55 e0          	mov    -0x20(%rbp),%rdx
   1ff25:	48 8d 45 ef          	lea    -0x11(%rbp),%rax
   1ff29:	48 89 ce             	mov    %rcx,%rsi
   1ff2c:	48 89 c7             	mov    %rax,%rdi
   1ff2f:	e8 ec 25 fe ff       	callq  2520 <memcmp@plt>
   1ff34:	85 c0                	test   %eax,%eax
   1ff36:	74 08                	je     1ff40 <prvInterruptTriggerLevelTest+0x1ff>
   1ff38:	48 c7 45 a0 01 00 00 	movq   $0x1,-0x60(%rbp)
   1ff3f:	00 
   1ff40:	48 83 7d a0 00       	cmpq   $0x0,-0x60(%rbp)
   1ff45:	75 0f                	jne    1ff56 <prvInterruptTriggerLevelTest+0x215>
   1ff47:	8b 05 1f 6f 11 00    	mov    0x116f1f(%rip),%eax        # 136e6c <ulInterruptTriggerCounter>
   1ff4d:	83 c0 01             	add    $0x1,%eax
   1ff50:	89 05 16 6f 11 00    	mov    %eax,0x116f16(%rip)        # 136e6c <ulInterruptTriggerCounter>
   1ff56:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
   1ff5a:	48 89 c7             	mov    %rax,%rdi
   1ff5d:	e8 ea 93 fe ff       	callq  934c <vStreamBufferDelete>
   1ff62:	48 83 45 98 01       	addq   $0x1,-0x68(%rbp)
   1ff67:	48 8b 45 98          	mov    -0x68(%rbp),%rax
   1ff6b:	48 3b 45 b0          	cmp    -0x50(%rbp),%rax
   1ff6f:	0f 82 38 fe ff ff    	jb     1fdad <prvInterruptTriggerLevelTest+0x6c>
   1ff75:	e9 26 fe ff ff       	jmpq   1fda0 <prvInterruptTriggerLevelTest+0x5f>

000000000001ff7a <xAreStreamBufferTasksStillRunning>:
   1ff7a:	f3 0f 1e fa          	endbr64 
   1ff7e:	55                   	push   %rbp
   1ff7f:	48 89 e5             	mov    %rsp,%rbp
   1ff82:	48 c7 45 f8 00 00 00 	movq   $0x0,-0x8(%rbp)
   1ff89:	00 
   1ff8a:	eb 6e                	jmp    1fffa <xAreStreamBufferTasksStillRunning+0x80>
   1ff8c:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   1ff90:	48 8d 14 85 00 00 00 	lea    0x0(,%rax,4),%rdx
   1ff97:	00 
   1ff98:	48 8d 05 f1 6e 11 00 	lea    0x116ef1(%rip),%rax        # 136e90 <ulLastEchoLoopCounters.3539>
   1ff9f:	8b 14 02             	mov    (%rdx,%rax,1),%edx
   1ffa2:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   1ffa6:	48 8d 0c 85 00 00 00 	lea    0x0(,%rax,4),%rcx
   1ffad:	00 
   1ffae:	48 8d 05 ab 6e 11 00 	lea    0x116eab(%rip),%rax        # 136e60 <ulEchoLoopCounters>
   1ffb5:	8b 04 01             	mov    (%rcx,%rax,1),%eax
   1ffb8:	39 c2                	cmp    %eax,%edx
   1ffba:	75 0d                	jne    1ffc9 <xAreStreamBufferTasksStillRunning+0x4f>
   1ffbc:	48 c7 05 b9 10 01 00 	movq   $0x0,0x110b9(%rip)        # 31080 <xErrorStatus>
   1ffc3:	00 00 00 00 
   1ffc7:	eb 2c                	jmp    1fff5 <xAreStreamBufferTasksStillRunning+0x7b>
   1ffc9:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   1ffcd:	48 8d 14 85 00 00 00 	lea    0x0(,%rax,4),%rdx
   1ffd4:	00 
   1ffd5:	48 8d 05 84 6e 11 00 	lea    0x116e84(%rip),%rax        # 136e60 <ulEchoLoopCounters>
   1ffdc:	8b 04 02             	mov    (%rdx,%rax,1),%eax
   1ffdf:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
   1ffe3:	48 8d 0c 95 00 00 00 	lea    0x0(,%rdx,4),%rcx
   1ffea:	00 
   1ffeb:	48 8d 15 9e 6e 11 00 	lea    0x116e9e(%rip),%rdx        # 136e90 <ulLastEchoLoopCounters.3539>
   1fff2:	89 04 11             	mov    %eax,(%rcx,%rdx,1)
   1fff5:	48 83 45 f8 01       	addq   $0x1,-0x8(%rbp)
   1fffa:	48 83 7d f8 01       	cmpq   $0x1,-0x8(%rbp)
   1ffff:	7e 8b                	jle    1ff8c <xAreStreamBufferTasksStillRunning+0x12>
   20001:	8b 15 61 6e 11 00    	mov    0x116e61(%rip),%edx        # 136e68 <ulNonBlockingRxCounter>
   20007:	8b 05 8b 6e 11 00    	mov    0x116e8b(%rip),%eax        # 136e98 <ulLastNonBlockingRxCounter.3540>
   2000d:	39 c2                	cmp    %eax,%edx
   2000f:	75 0d                	jne    2001e <xAreStreamBufferTasksStillRunning+0xa4>
   20011:	48 c7 05 64 10 01 00 	movq   $0x0,0x11064(%rip)        # 31080 <xErrorStatus>
   20018:	00 00 00 00 
   2001c:	eb 0c                	jmp    2002a <xAreStreamBufferTasksStillRunning+0xb0>
   2001e:	8b 05 44 6e 11 00    	mov    0x116e44(%rip),%eax        # 136e68 <ulNonBlockingRxCounter>
   20024:	89 05 6e 6e 11 00    	mov    %eax,0x116e6e(%rip)        # 136e98 <ulLastNonBlockingRxCounter.3540>
   2002a:	8b 15 6c 6e 11 00    	mov    0x116e6c(%rip),%edx        # 136e9c <ulLastInterruptTriggerCounter.3541>
   20030:	8b 05 36 6e 11 00    	mov    0x116e36(%rip),%eax        # 136e6c <ulInterruptTriggerCounter>
   20036:	39 c2                	cmp    %eax,%edx
   20038:	75 0d                	jne    20047 <xAreStreamBufferTasksStillRunning+0xcd>
   2003a:	48 c7 05 3b 10 01 00 	movq   $0x0,0x1103b(%rip)        # 31080 <xErrorStatus>
   20041:	00 00 00 00 
   20045:	eb 0c                	jmp    20053 <xAreStreamBufferTasksStillRunning+0xd9>
   20047:	8b 05 1f 6e 11 00    	mov    0x116e1f(%rip),%eax        # 136e6c <ulInterruptTriggerCounter>
   2004d:	89 05 49 6e 11 00    	mov    %eax,0x116e49(%rip)        # 136e9c <ulLastInterruptTriggerCounter.3541>
   20053:	48 c7 45 f8 00 00 00 	movq   $0x0,-0x8(%rbp)
   2005a:	00 
   2005b:	eb 6e                	jmp    200cb <xAreStreamBufferTasksStillRunning+0x151>
   2005d:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   20061:	48 8d 14 85 00 00 00 	lea    0x0(,%rax,4),%rdx
   20068:	00 
   20069:	48 8d 05 30 6e 11 00 	lea    0x116e30(%rip),%rax        # 136ea0 <ulLastSenderLoopCounters.3546>
   20070:	8b 14 02             	mov    (%rdx,%rax,1),%edx
   20073:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   20077:	48 8d 0c 85 00 00 00 	lea    0x0(,%rax,4),%rcx
   2007e:	00 
   2007f:	48 8d 05 8a 6d 11 00 	lea    0x116d8a(%rip),%rax        # 136e10 <ulSenderLoopCounters>
   20086:	8b 04 01             	mov    (%rcx,%rax,1),%eax
   20089:	39 c2                	cmp    %eax,%edx
   2008b:	75 0d                	jne    2009a <xAreStreamBufferTasksStillRunning+0x120>
   2008d:	48 c7 05 e8 0f 01 00 	movq   $0x0,0x10fe8(%rip)        # 31080 <xErrorStatus>
   20094:	00 00 00 00 
   20098:	eb 2c                	jmp    200c6 <xAreStreamBufferTasksStillRunning+0x14c>
   2009a:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   2009e:	48 8d 14 85 00 00 00 	lea    0x0(,%rax,4),%rdx
   200a5:	00 
   200a6:	48 8d 05 63 6d 11 00 	lea    0x116d63(%rip),%rax        # 136e10 <ulSenderLoopCounters>
   200ad:	8b 04 02             	mov    (%rdx,%rax,1),%eax
   200b0:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
   200b4:	48 8d 0c 95 00 00 00 	lea    0x0(,%rdx,4),%rcx
   200bb:	00 
   200bc:	48 8d 15 dd 6d 11 00 	lea    0x116ddd(%rip),%rdx        # 136ea0 <ulLastSenderLoopCounters.3546>
   200c3:	89 04 11             	mov    %eax,(%rcx,%rdx,1)
   200c6:	48 83 45 f8 01       	addq   $0x1,-0x8(%rbp)
   200cb:	48 83 7d f8 01       	cmpq   $0x1,-0x8(%rbp)
   200d0:	7e 8b                	jle    2005d <xAreStreamBufferTasksStillRunning+0xe3>
   200d2:	48 8b 05 a7 0f 01 00 	mov    0x10fa7(%rip),%rax        # 31080 <xErrorStatus>
   200d9:	5d                   	pop    %rbp
   200da:	c3                   	retq   

00000000000200db <vStartStreamBufferInterruptDemo>:
   200db:	f3 0f 1e fa          	endbr64 
   200df:	55                   	push   %rbp
   200e0:	48 89 e5             	mov    %rsp,%rbp
   200e3:	ba 00 00 00 00       	mov    $0x0,%edx
   200e8:	be 0a 00 00 00       	mov    $0xa,%esi
   200ed:	bf 64 00 00 00       	mov    $0x64,%edi
   200f2:	e8 6b 8d fe ff       	callq  8e62 <xStreamBufferGenericCreate>
   200f7:	48 89 05 aa 6d 11 00 	mov    %rax,0x116daa(%rip)        # 136ea8 <xStreamBuffer>
   200fe:	41 b9 00 00 00 00    	mov    $0x0,%r9d
   20104:	41 b8 02 00 00 00    	mov    $0x2,%r8d
   2010a:	b9 00 00 00 00       	mov    $0x0,%ecx
   2010f:	ba 46 00 00 00       	mov    $0x46,%edx
   20114:	48 8d 35 0d 82 00 00 	lea    0x820d(%rip),%rsi        # 28328 <xInterruptGivePeriod+0x538>
   2011b:	48 8d 3d 08 00 00 00 	lea    0x8(%rip),%rdi        # 2012a <prvReceivingTask>
   20122:	e8 d0 bb fe ff       	callq  bcf7 <xTaskCreate>
   20127:	90                   	nop
   20128:	5d                   	pop    %rbp
   20129:	c3                   	retq   

000000000002012a <prvReceivingTask>:
   2012a:	f3 0f 1e fa          	endbr64 
   2012e:	55                   	push   %rbp
   2012f:	48 89 e5             	mov    %rsp,%rbp
   20132:	48 83 ec 40          	sub    $0x40,%rsp
   20136:	48 89 7d c8          	mov    %rdi,-0x38(%rbp)
   2013a:	64 48 8b 04 25 28 00 	mov    %fs:0x28,%rax
   20141:	00 00 
   20143:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
   20147:	31 c0                	xor    %eax,%eax
   20149:	48 c7 45 d8 00 00 00 	movq   $0x0,-0x28(%rbp)
   20150:	00 
   20151:	48 8b 05 58 0f 01 00 	mov    0x10f58(%rip),%rax        # 310b0 <pcStringToReceive>
   20158:	48 89 c7             	mov    %rax,%rdi
   2015b:	e8 50 23 fe ff       	callq  24b0 <strlen@plt>
   20160:	48 83 f8 13          	cmp    $0x13,%rax
   20164:	76 11                	jbe    20177 <prvReceivingTask+0x4d>
   20166:	be 6e 00 00 00       	mov    $0x6e,%esi
   2016b:	48 8d 3d c6 81 00 00 	lea    0x81c6(%rip),%rdi        # 28338 <xInterruptGivePeriod+0x548>
   20172:	e8 95 3b fe ff       	callq  3d0c <vAssertCalled>
   20177:	48 8b 05 2a 6d 11 00 	mov    0x116d2a(%rip),%rax        # 136ea8 <xStreamBuffer>
   2017e:	48 85 c0             	test   %rax,%rax
   20181:	75 11                	jne    20194 <prvReceivingTask+0x6a>
   20183:	be 71 00 00 00       	mov    $0x71,%esi
   20188:	48 8d 3d a9 81 00 00 	lea    0x81a9(%rip),%rdi        # 28338 <xInterruptGivePeriod+0x548>
   2018f:	e8 78 3b fe ff       	callq  3d0c <vAssertCalled>
   20194:	48 8d 45 e0          	lea    -0x20(%rbp),%rax
   20198:	ba 14 00 00 00       	mov    $0x14,%edx
   2019d:	be 00 00 00 00       	mov    $0x0,%esi
   201a2:	48 89 c7             	mov    %rax,%rdi
   201a5:	e8 66 23 fe ff       	callq  2510 <memset@plt>
   201aa:	48 8d 55 e0          	lea    -0x20(%rbp),%rdx
   201ae:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
   201b2:	48 8d 34 02          	lea    (%rdx,%rax,1),%rsi
   201b6:	48 8b 05 eb 6c 11 00 	mov    0x116ceb(%rip),%rax        # 136ea8 <xStreamBuffer>
   201bd:	48 c7 c1 ff ff ff ff 	mov    $0xffffffffffffffff,%rcx
   201c4:	ba 01 00 00 00       	mov    $0x1,%edx
   201c9:	48 89 c7             	mov    %rax,%rdi
   201cc:	e8 23 9d fe ff       	callq  9ef4 <xStreamBufferReceive>
   201d1:	48 83 7d d8 00       	cmpq   $0x0,-0x28(%rbp)
   201d6:	75 19                	jne    201f1 <prvReceivingTask+0xc7>
   201d8:	48 8d 55 e0          	lea    -0x20(%rbp),%rdx
   201dc:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
   201e0:	48 01 d0             	add    %rdx,%rax
   201e3:	0f b6 00             	movzbl (%rax),%eax
   201e6:	3c 48                	cmp    $0x48,%al
   201e8:	75 c0                	jne    201aa <prvReceivingTask+0x80>
   201ea:	48 83 45 d8 01       	addq   $0x1,-0x28(%rbp)
   201ef:	eb b9                	jmp    201aa <prvReceivingTask+0x80>
   201f1:	48 8d 55 e0          	lea    -0x20(%rbp),%rdx
   201f5:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
   201f9:	48 01 d0             	add    %rdx,%rax
   201fc:	0f b6 00             	movzbl (%rax),%eax
   201ff:	3c 53                	cmp    $0x53,%al
   20201:	75 68                	jne    2026b <prvReceivingTask+0x141>
   20203:	48 8b 15 a6 0e 01 00 	mov    0x10ea6(%rip),%rdx        # 310b0 <pcStringToReceive>
   2020a:	48 8d 45 e0          	lea    -0x20(%rbp),%rax
   2020e:	48 89 d6             	mov    %rdx,%rsi
   20211:	48 89 c7             	mov    %rax,%rdi
   20214:	e8 37 23 fe ff       	callq  2550 <strcmp@plt>
   20219:	85 c0                	test   %eax,%eax
   2021b:	74 0b                	je     20228 <prvReceivingTask+0xfe>
   2021d:	48 c7 05 78 0e 01 00 	movq   $0x0,0x10e78(%rip)        # 310a0 <xDemoStatus>
   20224:	00 00 00 00 
   20228:	48 8d 45 e0          	lea    -0x20(%rbp),%rax
   2022c:	ba 14 00 00 00       	mov    $0x14,%edx
   20231:	be 00 00 00 00       	mov    $0x0,%esi
   20236:	48 89 c7             	mov    %rax,%rdi
   20239:	e8 d2 22 fe ff       	callq  2510 <memset@plt>
   2023e:	48 c7 45 d8 00 00 00 	movq   $0x0,-0x28(%rbp)
   20245:	00 
   20246:	48 8b 05 53 0e 01 00 	mov    0x10e53(%rip),%rax        # 310a0 <xDemoStatus>
   2024d:	48 83 f8 01          	cmp    $0x1,%rax
   20251:	0f 85 53 ff ff ff    	jne    201aa <prvReceivingTask+0x80>
   20257:	8b 05 53 6c 11 00    	mov    0x116c53(%rip),%eax        # 136eb0 <ulCycleCount>
   2025d:	83 c0 01             	add    $0x1,%eax
   20260:	89 05 4a 6c 11 00    	mov    %eax,0x116c4a(%rip)        # 136eb0 <ulCycleCount>
   20266:	e9 3f ff ff ff       	jmpq   201aa <prvReceivingTask+0x80>
   2026b:	48 83 45 d8 01       	addq   $0x1,-0x28(%rbp)
   20270:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
   20274:	48 83 f8 13          	cmp    $0x13,%rax
   20278:	0f 86 2c ff ff ff    	jbe    201aa <prvReceivingTask+0x80>
   2027e:	be b0 00 00 00       	mov    $0xb0,%esi
   20283:	48 8d 3d ae 80 00 00 	lea    0x80ae(%rip),%rdi        # 28338 <xInterruptGivePeriod+0x548>
   2028a:	e8 7d 3a fe ff       	callq  3d0c <vAssertCalled>
   2028f:	e9 16 ff ff ff       	jmpq   201aa <prvReceivingTask+0x80>

0000000000020294 <vBasicStreamBufferSendFromISR>:
   20294:	f3 0f 1e fa          	endbr64 
   20298:	55                   	push   %rbp
   20299:	48 89 e5             	mov    %rsp,%rbp
   2029c:	48 83 ec 10          	sub    $0x10,%rsp
   202a0:	48 c7 45 f0 64 00 00 	movq   $0x64,-0x10(%rbp)
   202a7:	00 
   202a8:	48 c7 45 f8 04 00 00 	movq   $0x4,-0x8(%rbp)
   202af:	00 
   202b0:	48 8b 05 01 6c 11 00 	mov    0x116c01(%rip),%rax        # 136eb8 <xCallCount.3382>
   202b7:	48 83 c0 01          	add    $0x1,%rax
   202bb:	48 89 05 f6 6b 11 00 	mov    %rax,0x116bf6(%rip)        # 136eb8 <xCallCount.3382>
   202c2:	48 8b 05 ef 6b 11 00 	mov    0x116bef(%rip),%rax        # 136eb8 <xCallCount.3382>
   202c9:	48 39 45 f0          	cmp    %rax,-0x10(%rbp)
   202cd:	7d 70                	jge    2033f <vBasicStreamBufferSendFromISR+0xab>
   202cf:	48 c7 05 de 6b 11 00 	movq   $0x0,0x116bde(%rip)        # 136eb8 <xCallCount.3382>
   202d6:	00 00 00 00 
   202da:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
   202de:	48 8b 0d c3 0d 01 00 	mov    0x10dc3(%rip),%rcx        # 310a8 <pcStringToSend>
   202e5:	48 8b 05 d4 6b 11 00 	mov    0x116bd4(%rip),%rax        # 136ec0 <xNextByteToSend.3379>
   202ec:	48 8d 34 01          	lea    (%rcx,%rax,1),%rsi
   202f0:	48 8b 05 b1 6b 11 00 	mov    0x116bb1(%rip),%rax        # 136ea8 <xStreamBuffer>
   202f7:	b9 00 00 00 00       	mov    $0x0,%ecx
   202fc:	48 89 c7             	mov    %rax,%rdi
   202ff:	e8 fa 98 fe ff       	callq  9bfe <xStreamBufferSendFromISR>
   20304:	48 8b 15 b5 6b 11 00 	mov    0x116bb5(%rip),%rdx        # 136ec0 <xNextByteToSend.3379>
   2030b:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   2030f:	48 01 d0             	add    %rdx,%rax
   20312:	48 89 05 a7 6b 11 00 	mov    %rax,0x116ba7(%rip)        # 136ec0 <xNextByteToSend.3379>
   20319:	48 8b 05 88 0d 01 00 	mov    0x10d88(%rip),%rax        # 310a8 <pcStringToSend>
   20320:	48 89 c7             	mov    %rax,%rdi
   20323:	e8 88 21 fe ff       	callq  24b0 <strlen@plt>
   20328:	48 8b 15 91 6b 11 00 	mov    0x116b91(%rip),%rdx        # 136ec0 <xNextByteToSend.3379>
   2032f:	48 39 d0             	cmp    %rdx,%rax
   20332:	77 0b                	ja     2033f <vBasicStreamBufferSendFromISR+0xab>
   20334:	48 c7 05 81 6b 11 00 	movq   $0x0,0x116b81(%rip)        # 136ec0 <xNextByteToSend.3379>
   2033b:	00 00 00 00 
   2033f:	90                   	nop
   20340:	c9                   	leaveq 
   20341:	c3                   	retq   

0000000000020342 <xIsInterruptStreamBufferDemoStillRunning>:
   20342:	f3 0f 1e fa          	endbr64 
   20346:	55                   	push   %rbp
   20347:	48 89 e5             	mov    %rsp,%rbp
   2034a:	c7 45 fc 00 00 00 00 	movl   $0x0,-0x4(%rbp)
   20351:	8b 05 59 6b 11 00    	mov    0x116b59(%rip),%eax        # 136eb0 <ulCycleCount>
   20357:	39 45 fc             	cmp    %eax,-0x4(%rbp)
   2035a:	75 0d                	jne    20369 <xIsInterruptStreamBufferDemoStillRunning+0x27>
   2035c:	48 c7 05 39 0d 01 00 	movq   $0x0,0x10d39(%rip)        # 310a0 <xDemoStatus>
   20363:	00 00 00 00 
   20367:	eb 09                	jmp    20372 <xIsInterruptStreamBufferDemoStillRunning+0x30>
   20369:	8b 05 41 6b 11 00    	mov    0x116b41(%rip),%eax        # 136eb0 <ulCycleCount>
   2036f:	89 45 fc             	mov    %eax,-0x4(%rbp)
   20372:	48 8b 05 27 0d 01 00 	mov    0x10d27(%rip),%rax        # 310a0 <xDemoStatus>
   20379:	5d                   	pop    %rbp
   2037a:	c3                   	retq   

000000000002037b <vStartTaskNotifyTask>:
   2037b:	f3 0f 1e fa          	endbr64 
   2037f:	55                   	push   %rbp
   20380:	48 89 e5             	mov    %rsp,%rbp
   20383:	4c 8d 0d 46 6b 11 00 	lea    0x116b46(%rip),%r9        # 136ed0 <xTaskToNotify>
   2038a:	41 b8 00 00 00 00    	mov    $0x0,%r8d
   20390:	b9 00 00 00 00       	mov    $0x0,%ecx
   20395:	ba 46 00 00 00       	mov    $0x46,%edx
   2039a:	48 8d 35 ef 7f 00 00 	lea    0x7fef(%rip),%rsi        # 28390 <xInterruptGivePeriod+0x5a0>
   203a1:	48 8d 3d 58 0d 00 00 	lea    0xd58(%rip),%rdi        # 21100 <prvNotifiedTask>
   203a8:	e8 4a b9 fe ff       	callq  bcf7 <xTaskCreate>
   203ad:	48 8d 05 34 11 00 00 	lea    0x1134(%rip),%rax        # 214e8 <prvRand>
   203b4:	48 89 05 2d 6b 11 00 	mov    %rax,0x116b2d(%rip)        # 136ee8 <uxNextRand>
   203bb:	90                   	nop
   203bc:	5d                   	pop    %rbp
   203bd:	c3                   	retq   

00000000000203be <prvSingleTaskTests>:
   203be:	f3 0f 1e fa          	endbr64 
   203c2:	55                   	push   %rbp
   203c3:	48 89 e5             	mov    %rsp,%rbp
   203c6:	48 83 ec 50          	sub    $0x50,%rsp
   203ca:	64 48 8b 04 25 28 00 	mov    %fs:0x28,%rax
   203d1:	00 00 
   203d3:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
   203d7:	31 c0                	xor    %eax,%eax
   203d9:	48 c7 45 d8 64 00 00 	movq   $0x64,-0x28(%rbp)
   203e0:	00 
   203e1:	c7 45 c4 a1 86 01 00 	movl   $0x186a1,-0x3c(%rbp)
   203e8:	c7 45 c8 b3 15 00 00 	movl   $0x15b3,-0x38(%rbp)
   203ef:	c7 45 cc 05 00 00 00 	movl   $0x5,-0x34(%rbp)
   203f6:	c7 45 d0 01 00 00 00 	movl   $0x1,-0x30(%rbp)
   203fd:	c7 45 d4 02 00 00 00 	movl   $0x2,-0x2c(%rbp)
   20404:	e8 8f d4 fe ff       	callq  d898 <xTaskGetTickCount>
   20409:	48 89 45 e0          	mov    %rax,-0x20(%rbp)
   2040d:	48 8b 55 d8          	mov    -0x28(%rbp),%rdx
   20411:	48 8d 45 b0          	lea    -0x50(%rbp),%rax
   20415:	49 89 d0             	mov    %rdx,%r8
   20418:	48 89 c1             	mov    %rax,%rcx
   2041b:	ba 00 00 00 00       	mov    $0x0,%edx
   20420:	be ff ff ff ff       	mov    $0xffffffff,%esi
   20425:	bf 00 00 00 00       	mov    $0x0,%edi
   2042a:	e8 05 fe fe ff       	callq  10234 <xTaskGenericNotifyWait>
   2042f:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
   20433:	e8 60 d4 fe ff       	callq  d898 <xTaskGetTickCount>
   20438:	48 2b 45 e0          	sub    -0x20(%rbp),%rax
   2043c:	48 39 45 d8          	cmp    %rax,-0x28(%rbp)
   20440:	76 0b                	jbe    2044d <prvSingleTaskTests+0x8f>
   20442:	48 c7 05 6b 0c 01 00 	movq   $0x0,0x10c6b(%rip)        # 310b8 <xErrorStatus>
   20449:	00 00 00 00 
   2044d:	48 83 7d e8 00       	cmpq   $0x0,-0x18(%rbp)
   20452:	74 11                	je     20465 <prvSingleTaskTests+0xa7>
   20454:	be 98 00 00 00       	mov    $0x98,%esi
   20459:	48 8d 3d 40 7f 00 00 	lea    0x7f40(%rip),%rdi        # 283a0 <xInterruptGivePeriod+0x5b0>
   20460:	e8 a7 38 fe ff       	callq  3d0c <vAssertCalled>
   20465:	8b 45 b0             	mov    -0x50(%rbp),%eax
   20468:	85 c0                	test   %eax,%eax
   2046a:	74 11                	je     2047d <prvSingleTaskTests+0xbf>
   2046c:	be 99 00 00 00       	mov    $0x99,%esi
   20471:	48 8d 3d 28 7f 00 00 	lea    0x7f28(%rip),%rdi        # 283a0 <xInterruptGivePeriod+0x5b0>
   20478:	e8 8f 38 fe ff       	callq  3d0c <vAssertCalled>
   2047d:	48 8b 05 4c 6a 11 00 	mov    0x116a4c(%rip),%rax        # 136ed0 <xTaskToNotify>
   20484:	48 8d 4d b4          	lea    -0x4c(%rbp),%rcx
   20488:	8b 55 c4             	mov    -0x3c(%rbp),%edx
   2048b:	49 89 c8             	mov    %rcx,%r8
   2048e:	b9 04 00 00 00       	mov    $0x4,%ecx
   20493:	be 00 00 00 00       	mov    $0x0,%esi
   20498:	48 89 c7             	mov    %rax,%rdi
   2049b:	e8 fb ff fe ff       	callq  1049b <xTaskGenericNotify>
   204a0:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
   204a4:	48 83 7d e8 01       	cmpq   $0x1,-0x18(%rbp)
   204a9:	74 11                	je     204bc <prvSingleTaskTests+0xfe>
   204ab:	be a7 00 00 00       	mov    $0xa7,%esi
   204b0:	48 8d 3d e9 7e 00 00 	lea    0x7ee9(%rip),%rdi        # 283a0 <xInterruptGivePeriod+0x5b0>
   204b7:	e8 50 38 fe ff       	callq  3d0c <vAssertCalled>
   204bc:	8b 45 b4             	mov    -0x4c(%rbp),%eax
   204bf:	85 c0                	test   %eax,%eax
   204c1:	74 11                	je     204d4 <prvSingleTaskTests+0x116>
   204c3:	be ab 00 00 00       	mov    $0xab,%esi
   204c8:	48 8d 3d d1 7e 00 00 	lea    0x7ed1(%rip),%rdi        # 283a0 <xInterruptGivePeriod+0x5b0>
   204cf:	e8 38 38 fe ff       	callq  3d0c <vAssertCalled>
   204d4:	e8 bf d3 fe ff       	callq  d898 <xTaskGetTickCount>
   204d9:	48 89 45 e0          	mov    %rax,-0x20(%rbp)
   204dd:	48 8b 55 d8          	mov    -0x28(%rbp),%rdx
   204e1:	48 8d 45 b0          	lea    -0x50(%rbp),%rax
   204e5:	49 89 d0             	mov    %rdx,%r8
   204e8:	48 89 c1             	mov    %rax,%rcx
   204eb:	ba 00 00 00 00       	mov    $0x0,%edx
   204f0:	be ff ff ff ff       	mov    $0xffffffff,%esi
   204f5:	bf 00 00 00 00       	mov    $0x0,%edi
   204fa:	e8 35 fd fe ff       	callq  10234 <xTaskGenericNotifyWait>
   204ff:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
   20503:	e8 90 d3 fe ff       	callq  d898 <xTaskGetTickCount>
   20508:	48 2b 45 e0          	sub    -0x20(%rbp),%rax
   2050c:	48 39 45 d8          	cmp    %rax,-0x28(%rbp)
   20510:	77 0b                	ja     2051d <prvSingleTaskTests+0x15f>
   20512:	48 c7 05 9b 0b 01 00 	movq   $0x0,0x10b9b(%rip)        # 310b8 <xErrorStatus>
   20519:	00 00 00 00 
   2051d:	48 83 7d e8 01       	cmpq   $0x1,-0x18(%rbp)
   20522:	74 11                	je     20535 <prvSingleTaskTests+0x177>
   20524:	be b9 00 00 00       	mov    $0xb9,%esi
   20529:	48 8d 3d 70 7e 00 00 	lea    0x7e70(%rip),%rdi        # 283a0 <xInterruptGivePeriod+0x5b0>
   20530:	e8 d7 37 fe ff       	callq  3d0c <vAssertCalled>
   20535:	8b 45 b0             	mov    -0x50(%rbp),%eax
   20538:	39 45 c4             	cmp    %eax,-0x3c(%rbp)
   2053b:	74 11                	je     2054e <prvSingleTaskTests+0x190>
   2053d:	be ba 00 00 00       	mov    $0xba,%esi
   20542:	48 8d 3d 57 7e 00 00 	lea    0x7e57(%rip),%rdi        # 283a0 <xInterruptGivePeriod+0x5b0>
   20549:	e8 be 37 fe ff       	callq  3d0c <vAssertCalled>
   2054e:	8b 05 74 69 11 00    	mov    0x116974(%rip),%eax        # 136ec8 <ulNotifyCycleCount>
   20554:	83 c0 01             	add    $0x1,%eax
   20557:	89 05 6b 69 11 00    	mov    %eax,0x11696b(%rip)        # 136ec8 <ulNotifyCycleCount>
   2055d:	48 8b 05 6c 69 11 00 	mov    0x11696c(%rip),%rax        # 136ed0 <xTaskToNotify>
   20564:	8b 55 c4             	mov    -0x3c(%rbp),%edx
   20567:	41 b8 00 00 00 00    	mov    $0x0,%r8d
   2056d:	b9 04 00 00 00       	mov    $0x4,%ecx
   20572:	be 00 00 00 00       	mov    $0x0,%esi
   20577:	48 89 c7             	mov    %rax,%rdi
   2057a:	e8 1c ff fe ff       	callq  1049b <xTaskGenericNotify>
   2057f:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
   20583:	48 83 7d e8 01       	cmpq   $0x1,-0x18(%rbp)
   20588:	74 11                	je     2059b <prvSingleTaskTests+0x1dd>
   2058a:	be c9 00 00 00       	mov    $0xc9,%esi
   2058f:	48 8d 3d 0a 7e 00 00 	lea    0x7e0a(%rip),%rdi        # 283a0 <xInterruptGivePeriod+0x5b0>
   20596:	e8 71 37 fe ff       	callq  3d0c <vAssertCalled>
   2059b:	48 8b 05 2e 69 11 00 	mov    0x11692e(%rip),%rax        # 136ed0 <xTaskToNotify>
   205a2:	8b 55 c8             	mov    -0x38(%rbp),%edx
   205a5:	41 b8 00 00 00 00    	mov    $0x0,%r8d
   205ab:	b9 04 00 00 00       	mov    $0x4,%ecx
   205b0:	be 00 00 00 00       	mov    $0x0,%esi
   205b5:	48 89 c7             	mov    %rax,%rdi
   205b8:	e8 de fe fe ff       	callq  1049b <xTaskGenericNotify>
   205bd:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
   205c1:	48 83 7d e8 00       	cmpq   $0x0,-0x18(%rbp)
   205c6:	74 11                	je     205d9 <prvSingleTaskTests+0x21b>
   205c8:	be cd 00 00 00       	mov    $0xcd,%esi
   205cd:	48 8d 3d cc 7d 00 00 	lea    0x7dcc(%rip),%rdi        # 283a0 <xInterruptGivePeriod+0x5b0>
   205d4:	e8 33 37 fe ff       	callq  3d0c <vAssertCalled>
   205d9:	48 8d 45 b0          	lea    -0x50(%rbp),%rax
   205dd:	41 b8 00 00 00 00    	mov    $0x0,%r8d
   205e3:	48 89 c1             	mov    %rax,%rcx
   205e6:	ba 00 00 00 00       	mov    $0x0,%edx
   205eb:	be ff ff ff ff       	mov    $0xffffffff,%esi
   205f0:	bf 00 00 00 00       	mov    $0x0,%edi
   205f5:	e8 3a fc fe ff       	callq  10234 <xTaskGenericNotifyWait>
   205fa:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
   205fe:	48 83 7d e8 01       	cmpq   $0x1,-0x18(%rbp)
   20603:	74 11                	je     20616 <prvSingleTaskTests+0x258>
   20605:	be d4 00 00 00       	mov    $0xd4,%esi
   2060a:	48 8d 3d 8f 7d 00 00 	lea    0x7d8f(%rip),%rdi        # 283a0 <xInterruptGivePeriod+0x5b0>
   20611:	e8 f6 36 fe ff       	callq  3d0c <vAssertCalled>
   20616:	8b 45 b0             	mov    -0x50(%rbp),%eax
   20619:	39 45 c4             	cmp    %eax,-0x3c(%rbp)
   2061c:	74 11                	je     2062f <prvSingleTaskTests+0x271>
   2061e:	be d5 00 00 00       	mov    $0xd5,%esi
   20623:	48 8d 3d 76 7d 00 00 	lea    0x7d76(%rip),%rdi        # 283a0 <xInterruptGivePeriod+0x5b0>
   2062a:	e8 dd 36 fe ff       	callq  3d0c <vAssertCalled>
   2062f:	48 8b 05 9a 68 11 00 	mov    0x11689a(%rip),%rax        # 136ed0 <xTaskToNotify>
   20636:	8b 55 c4             	mov    -0x3c(%rbp),%edx
   20639:	41 b8 00 00 00 00    	mov    $0x0,%r8d
   2063f:	b9 03 00 00 00       	mov    $0x3,%ecx
   20644:	be 00 00 00 00       	mov    $0x0,%esi
   20649:	48 89 c7             	mov    %rax,%rdi
   2064c:	e8 4a fe fe ff       	callq  1049b <xTaskGenericNotify>
   20651:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
   20655:	48 83 7d e8 01       	cmpq   $0x1,-0x18(%rbp)
   2065a:	74 11                	je     2066d <prvSingleTaskTests+0x2af>
   2065c:	be e1 00 00 00       	mov    $0xe1,%esi
   20661:	48 8d 3d 38 7d 00 00 	lea    0x7d38(%rip),%rdi        # 283a0 <xInterruptGivePeriod+0x5b0>
   20668:	e8 9f 36 fe ff       	callq  3d0c <vAssertCalled>
   2066d:	48 8b 05 5c 68 11 00 	mov    0x11685c(%rip),%rax        # 136ed0 <xTaskToNotify>
   20674:	8b 55 c8             	mov    -0x38(%rbp),%edx
   20677:	41 b8 00 00 00 00    	mov    $0x0,%r8d
   2067d:	b9 03 00 00 00       	mov    $0x3,%ecx
   20682:	be 00 00 00 00       	mov    $0x0,%esi
   20687:	48 89 c7             	mov    %rax,%rdi
   2068a:	e8 0c fe fe ff       	callq  1049b <xTaskGenericNotify>
   2068f:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
   20693:	48 83 7d e8 01       	cmpq   $0x1,-0x18(%rbp)
   20698:	74 11                	je     206ab <prvSingleTaskTests+0x2ed>
   2069a:	be e4 00 00 00       	mov    $0xe4,%esi
   2069f:	48 8d 3d fa 7c 00 00 	lea    0x7cfa(%rip),%rdi        # 283a0 <xInterruptGivePeriod+0x5b0>
   206a6:	e8 61 36 fe ff       	callq  3d0c <vAssertCalled>
   206ab:	48 8d 45 b0          	lea    -0x50(%rbp),%rax
   206af:	41 b8 00 00 00 00    	mov    $0x0,%r8d
   206b5:	48 89 c1             	mov    %rax,%rcx
   206b8:	ba 00 00 00 00       	mov    $0x0,%edx
   206bd:	be ff ff ff ff       	mov    $0xffffffff,%esi
   206c2:	bf 00 00 00 00       	mov    $0x0,%edi
   206c7:	e8 68 fb fe ff       	callq  10234 <xTaskGenericNotifyWait>
   206cc:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
   206d0:	48 83 7d e8 01       	cmpq   $0x1,-0x18(%rbp)
   206d5:	74 11                	je     206e8 <prvSingleTaskTests+0x32a>
   206d7:	be e7 00 00 00       	mov    $0xe7,%esi
   206dc:	48 8d 3d bd 7c 00 00 	lea    0x7cbd(%rip),%rdi        # 283a0 <xInterruptGivePeriod+0x5b0>
   206e3:	e8 24 36 fe ff       	callq  3d0c <vAssertCalled>
   206e8:	8b 45 b0             	mov    -0x50(%rbp),%eax
   206eb:	39 45 c8             	cmp    %eax,-0x38(%rbp)
   206ee:	74 11                	je     20701 <prvSingleTaskTests+0x343>
   206f0:	be e9 00 00 00       	mov    $0xe9,%esi
   206f5:	48 8d 3d a4 7c 00 00 	lea    0x7ca4(%rip),%rdi        # 283a0 <xInterruptGivePeriod+0x5b0>
   206fc:	e8 0b 36 fe ff       	callq  3d0c <vAssertCalled>
   20701:	48 8b 05 c8 67 11 00 	mov    0x1167c8(%rip),%rax        # 136ed0 <xTaskToNotify>
   20708:	8b 55 c4             	mov    -0x3c(%rbp),%edx
   2070b:	41 b8 00 00 00 00    	mov    $0x0,%r8d
   20711:	b9 00 00 00 00       	mov    $0x0,%ecx
   20716:	be 00 00 00 00       	mov    $0x0,%esi
   2071b:	48 89 c7             	mov    %rax,%rdi
   2071e:	e8 78 fd fe ff       	callq  1049b <xTaskGenericNotify>
   20723:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
   20727:	48 83 7d e8 01       	cmpq   $0x1,-0x18(%rbp)
   2072c:	74 11                	je     2073f <prvSingleTaskTests+0x381>
   2072e:	be f3 00 00 00       	mov    $0xf3,%esi
   20733:	48 8d 3d 66 7c 00 00 	lea    0x7c66(%rip),%rdi        # 283a0 <xInterruptGivePeriod+0x5b0>
   2073a:	e8 cd 35 fe ff       	callq  3d0c <vAssertCalled>
   2073f:	48 8d 45 b0          	lea    -0x50(%rbp),%rax
   20743:	41 b8 00 00 00 00    	mov    $0x0,%r8d
   20749:	48 89 c1             	mov    %rax,%rcx
   2074c:	ba 00 00 00 00       	mov    $0x0,%edx
   20751:	be ff ff ff ff       	mov    $0xffffffff,%esi
   20756:	bf 00 00 00 00       	mov    $0x0,%edi
   2075b:	e8 d4 fa fe ff       	callq  10234 <xTaskGenericNotifyWait>
   20760:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
   20764:	8b 45 b0             	mov    -0x50(%rbp),%eax
   20767:	39 45 c8             	cmp    %eax,-0x38(%rbp)
   2076a:	74 11                	je     2077d <prvSingleTaskTests+0x3bf>
   2076c:	be f6 00 00 00       	mov    $0xf6,%esi
   20771:	48 8d 3d 28 7c 00 00 	lea    0x7c28(%rip),%rdi        # 283a0 <xInterruptGivePeriod+0x5b0>
   20778:	e8 8f 35 fe ff       	callq  3d0c <vAssertCalled>
   2077d:	c7 45 b8 00 00 00 00 	movl   $0x0,-0x48(%rbp)
   20784:	eb 44                	jmp    207ca <prvSingleTaskTests+0x40c>
   20786:	48 8b 05 43 67 11 00 	mov    0x116743(%rip),%rax        # 136ed0 <xTaskToNotify>
   2078d:	41 b8 00 00 00 00    	mov    $0x0,%r8d
   20793:	b9 02 00 00 00       	mov    $0x2,%ecx
   20798:	ba 00 00 00 00       	mov    $0x0,%edx
   2079d:	be 00 00 00 00       	mov    $0x0,%esi
   207a2:	48 89 c7             	mov    %rax,%rdi
   207a5:	e8 f1 fc fe ff       	callq  1049b <xTaskGenericNotify>
   207aa:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
   207ae:	48 83 7d e8 01       	cmpq   $0x1,-0x18(%rbp)
   207b3:	74 11                	je     207c6 <prvSingleTaskTests+0x408>
   207b5:	be 00 01 00 00       	mov    $0x100,%esi
   207ba:	48 8d 3d df 7b 00 00 	lea    0x7bdf(%rip),%rdi        # 283a0 <xInterruptGivePeriod+0x5b0>
   207c1:	e8 46 35 fe ff       	callq  3d0c <vAssertCalled>
   207c6:	83 45 b8 01          	addl   $0x1,-0x48(%rbp)
   207ca:	8b 45 b8             	mov    -0x48(%rbp),%eax
   207cd:	3b 45 cc             	cmp    -0x34(%rbp),%eax
   207d0:	72 b4                	jb     20786 <prvSingleTaskTests+0x3c8>
   207d2:	48 8d 45 b0          	lea    -0x50(%rbp),%rax
   207d6:	41 b8 00 00 00 00    	mov    $0x0,%r8d
   207dc:	48 89 c1             	mov    %rax,%rcx
   207df:	ba 00 00 00 00       	mov    $0x0,%edx
   207e4:	be ff ff ff ff       	mov    $0xffffffff,%esi
   207e9:	bf 00 00 00 00       	mov    $0x0,%edi
   207ee:	e8 41 fa fe ff       	callq  10234 <xTaskGenericNotifyWait>
   207f3:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
   207f7:	48 83 7d e8 01       	cmpq   $0x1,-0x18(%rbp)
   207fc:	74 11                	je     2080f <prvSingleTaskTests+0x451>
   207fe:	be 05 01 00 00       	mov    $0x105,%esi
   20803:	48 8d 3d 96 7b 00 00 	lea    0x7b96(%rip),%rdi        # 283a0 <xInterruptGivePeriod+0x5b0>
   2080a:	e8 fd 34 fe ff       	callq  3d0c <vAssertCalled>
   2080f:	8b 55 c8             	mov    -0x38(%rbp),%edx
   20812:	8b 45 cc             	mov    -0x34(%rbp),%eax
   20815:	01 c2                	add    %eax,%edx
   20817:	8b 45 b0             	mov    -0x50(%rbp),%eax
   2081a:	39 c2                	cmp    %eax,%edx
   2081c:	74 11                	je     2082f <prvSingleTaskTests+0x471>
   2081e:	be 06 01 00 00       	mov    $0x106,%esi
   20823:	48 8d 3d 76 7b 00 00 	lea    0x7b76(%rip),%rdi        # 283a0 <xInterruptGivePeriod+0x5b0>
   2082a:	e8 dd 34 fe ff       	callq  3d0c <vAssertCalled>
   2082f:	48 8d 45 b0          	lea    -0x50(%rbp),%rax
   20833:	41 b8 00 00 00 00    	mov    $0x0,%r8d
   20839:	48 89 c1             	mov    %rax,%rcx
   2083c:	ba 00 00 00 00       	mov    $0x0,%edx
   20841:	be 00 00 00 00       	mov    $0x0,%esi
   20846:	bf 00 00 00 00       	mov    $0x0,%edi
   2084b:	e8 e4 f9 fe ff       	callq  10234 <xTaskGenericNotifyWait>
   20850:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
   20854:	48 83 7d e8 00       	cmpq   $0x0,-0x18(%rbp)
   20859:	74 11                	je     2086c <prvSingleTaskTests+0x4ae>
   2085b:	be 0c 01 00 00       	mov    $0x10c,%esi
   20860:	48 8d 3d 39 7b 00 00 	lea    0x7b39(%rip),%rdi        # 283a0 <xInterruptGivePeriod+0x5b0>
   20867:	e8 a0 34 fe ff       	callq  3d0c <vAssertCalled>
   2086c:	c7 45 bc 01 00 00 00 	movl   $0x1,-0x44(%rbp)
   20873:	c7 45 b8 00 00 00 00 	movl   $0x0,-0x48(%rbp)
   2087a:	48 8d 45 b0          	lea    -0x50(%rbp),%rax
   2087e:	41 b8 00 00 00 00    	mov    $0x0,%r8d
   20884:	48 89 c1             	mov    %rax,%rcx
   20887:	ba 00 00 00 00       	mov    $0x0,%edx
   2088c:	be ff ff ff ff       	mov    $0xffffffff,%esi
   20891:	bf 00 00 00 00       	mov    $0x0,%edi
   20896:	e8 99 f9 fe ff       	callq  10234 <xTaskGenericNotifyWait>
   2089b:	48 8b 05 2e 66 11 00 	mov    0x11662e(%rip),%rax        # 136ed0 <xTaskToNotify>
   208a2:	8b 55 bc             	mov    -0x44(%rbp),%edx
   208a5:	41 b8 00 00 00 00    	mov    $0x0,%r8d
   208ab:	b9 01 00 00 00       	mov    $0x1,%ecx
   208b0:	be 00 00 00 00       	mov    $0x0,%esi
   208b5:	48 89 c7             	mov    %rax,%rdi
   208b8:	e8 de fb fe ff       	callq  1049b <xTaskGenericNotify>
   208bd:	48 8d 45 b0          	lea    -0x50(%rbp),%rax
   208c1:	41 b8 00 00 00 00    	mov    $0x0,%r8d
   208c7:	48 89 c1             	mov    %rax,%rcx
   208ca:	ba 00 00 00 00       	mov    $0x0,%edx
   208cf:	be 00 00 00 00       	mov    $0x0,%esi
   208d4:	bf 00 00 00 00       	mov    $0x0,%edi
   208d9:	e8 56 f9 fe ff       	callq  10234 <xTaskGenericNotifyWait>
   208de:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
   208e2:	48 83 7d e8 01       	cmpq   $0x1,-0x18(%rbp)
   208e7:	74 11                	je     208fa <prvSingleTaskTests+0x53c>
   208e9:	be 26 01 00 00       	mov    $0x126,%esi
   208ee:	48 8d 3d ab 7a 00 00 	lea    0x7aab(%rip),%rdi        # 283a0 <xInterruptGivePeriod+0x5b0>
   208f5:	e8 12 34 fe ff       	callq  3d0c <vAssertCalled>
   208fa:	83 45 b8 01          	addl   $0x1,-0x48(%rbp)
   208fe:	d1 65 bc             	shll   -0x44(%rbp)
   20901:	8b 45 b0             	mov    -0x50(%rbp),%eax
   20904:	83 f8 ff             	cmp    $0xffffffff,%eax
   20907:	75 92                	jne    2089b <prvSingleTaskTests+0x4dd>
   20909:	83 7d b8 20          	cmpl   $0x20,-0x48(%rbp)
   2090d:	74 11                	je     20920 <prvSingleTaskTests+0x562>
   2090f:	be 31 01 00 00       	mov    $0x131,%esi
   20914:	48 8d 3d 85 7a 00 00 	lea    0x7a85(%rip),%rdi        # 283a0 <xInterruptGivePeriod+0x5b0>
   2091b:	e8 ec 33 fe ff       	callq  3d0c <vAssertCalled>
   20920:	48 8b 75 d8          	mov    -0x28(%rbp),%rsi
   20924:	48 8d 4d b0          	lea    -0x50(%rbp),%rcx
   20928:	8b 55 d4             	mov    -0x2c(%rbp),%edx
   2092b:	8b 45 d0             	mov    -0x30(%rbp),%eax
   2092e:	49 89 f0             	mov    %rsi,%r8
   20931:	89 c6                	mov    %eax,%esi
   20933:	bf 00 00 00 00       	mov    $0x0,%edi
   20938:	e8 f7 f8 fe ff       	callq  10234 <xTaskGenericNotifyWait>
   2093d:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
   20941:	48 83 7d e8 00       	cmpq   $0x0,-0x18(%rbp)
   20946:	74 11                	je     20959 <prvSingleTaskTests+0x59b>
   20948:	be 3d 01 00 00       	mov    $0x13d,%esi
   2094d:	48 8d 3d 4c 7a 00 00 	lea    0x7a4c(%rip),%rdi        # 283a0 <xInterruptGivePeriod+0x5b0>
   20954:	e8 b3 33 fe ff       	callq  3d0c <vAssertCalled>
   20959:	48 8b 05 70 65 11 00 	mov    0x116570(%rip),%rax        # 136ed0 <xTaskToNotify>
   20960:	41 b8 00 00 00 00    	mov    $0x0,%r8d
   20966:	b9 00 00 00 00       	mov    $0x0,%ecx
   2096b:	ba ff ff ff ff       	mov    $0xffffffff,%edx
   20970:	be 00 00 00 00       	mov    $0x0,%esi
   20975:	48 89 c7             	mov    %rax,%rdi
   20978:	e8 1e fb fe ff       	callq  1049b <xTaskGenericNotify>
   2097d:	48 8d 45 b0          	lea    -0x50(%rbp),%rax
   20981:	41 b8 00 00 00 00    	mov    $0x0,%r8d
   20987:	48 89 c1             	mov    %rax,%rcx
   2098a:	ba 00 00 00 00       	mov    $0x0,%edx
   2098f:	be 00 00 00 00       	mov    $0x0,%esi
   20994:	bf 00 00 00 00       	mov    $0x0,%edi
   20999:	e8 96 f8 fe ff       	callq  10234 <xTaskGenericNotifyWait>
   2099e:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
   209a2:	48 83 7d e8 01       	cmpq   $0x1,-0x18(%rbp)
   209a7:	74 11                	je     209ba <prvSingleTaskTests+0x5fc>
   209a9:	be 48 01 00 00       	mov    $0x148,%esi
   209ae:	48 8d 3d eb 79 00 00 	lea    0x79eb(%rip),%rdi        # 283a0 <xInterruptGivePeriod+0x5b0>
   209b5:	e8 52 33 fe ff       	callq  3d0c <vAssertCalled>
   209ba:	8b 45 d0             	mov    -0x30(%rbp),%eax
   209bd:	f7 d0                	not    %eax
   209bf:	89 c2                	mov    %eax,%edx
   209c1:	8b 45 b0             	mov    -0x50(%rbp),%eax
   209c4:	39 c2                	cmp    %eax,%edx
   209c6:	74 11                	je     209d9 <prvSingleTaskTests+0x61b>
   209c8:	be 49 01 00 00       	mov    $0x149,%esi
   209cd:	48 8d 3d cc 79 00 00 	lea    0x79cc(%rip),%rdi        # 283a0 <xInterruptGivePeriod+0x5b0>
   209d4:	e8 33 33 fe ff       	callq  3d0c <vAssertCalled>
   209d9:	48 8b 05 f0 64 11 00 	mov    0x1164f0(%rip),%rax        # 136ed0 <xTaskToNotify>
   209e0:	41 b8 00 00 00 00    	mov    $0x0,%r8d
   209e6:	b9 00 00 00 00       	mov    $0x0,%ecx
   209eb:	ba 00 00 00 00       	mov    $0x0,%edx
   209f0:	be 00 00 00 00       	mov    $0x0,%esi
   209f5:	48 89 c7             	mov    %rax,%rdi
   209f8:	e8 9e fa fe ff       	callq  1049b <xTaskGenericNotify>
   209fd:	48 8d 55 b0          	lea    -0x50(%rbp),%rdx
   20a01:	8b 45 d4             	mov    -0x2c(%rbp),%eax
   20a04:	41 b8 00 00 00 00    	mov    $0x0,%r8d
   20a0a:	48 89 d1             	mov    %rdx,%rcx
   20a0d:	89 c2                	mov    %eax,%edx
   20a0f:	be 00 00 00 00       	mov    $0x0,%esi
   20a14:	bf 00 00 00 00       	mov    $0x0,%edi
   20a19:	e8 16 f8 fe ff       	callq  10234 <xTaskGenericNotifyWait>
   20a1e:	8b 45 d0             	mov    -0x30(%rbp),%eax
   20a21:	f7 d0                	not    %eax
   20a23:	89 c2                	mov    %eax,%edx
   20a25:	8b 45 b0             	mov    -0x50(%rbp),%eax
   20a28:	39 c2                	cmp    %eax,%edx
   20a2a:	74 11                	je     20a3d <prvSingleTaskTests+0x67f>
   20a2c:	be 57 01 00 00       	mov    $0x157,%esi
   20a31:	48 8d 3d 68 79 00 00 	lea    0x7968(%rip),%rdi        # 283a0 <xInterruptGivePeriod+0x5b0>
   20a38:	e8 cf 32 fe ff       	callq  3d0c <vAssertCalled>
   20a3d:	48 8d 45 b0          	lea    -0x50(%rbp),%rax
   20a41:	41 b8 00 00 00 00    	mov    $0x0,%r8d
   20a47:	48 89 c1             	mov    %rax,%rcx
   20a4a:	ba 00 00 00 00       	mov    $0x0,%edx
   20a4f:	be 00 00 00 00       	mov    $0x0,%esi
   20a54:	bf 00 00 00 00       	mov    $0x0,%edi
   20a59:	e8 d6 f7 fe ff       	callq  10234 <xTaskGenericNotifyWait>
   20a5e:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
   20a62:	48 83 7d e8 00       	cmpq   $0x0,-0x18(%rbp)
   20a67:	74 11                	je     20a7a <prvSingleTaskTests+0x6bc>
   20a69:	be 5d 01 00 00       	mov    $0x15d,%esi
   20a6e:	48 8d 3d 2b 79 00 00 	lea    0x792b(%rip),%rdi        # 283a0 <xInterruptGivePeriod+0x5b0>
   20a75:	e8 92 32 fe ff       	callq  3d0c <vAssertCalled>
   20a7a:	8b 45 d0             	mov    -0x30(%rbp),%eax
   20a7d:	0b 45 d4             	or     -0x2c(%rbp),%eax
   20a80:	f7 d0                	not    %eax
   20a82:	89 c2                	mov    %eax,%edx
   20a84:	8b 45 b0             	mov    -0x50(%rbp),%eax
   20a87:	39 c2                	cmp    %eax,%edx
   20a89:	74 11                	je     20a9c <prvSingleTaskTests+0x6de>
   20a8b:	be 5e 01 00 00       	mov    $0x15e,%esi
   20a90:	48 8d 3d 09 79 00 00 	lea    0x7909(%rip),%rdi        # 283a0 <xInterruptGivePeriod+0x5b0>
   20a97:	e8 70 32 fe ff       	callq  3d0c <vAssertCalled>
   20a9c:	48 8b 05 2d 64 11 00 	mov    0x11642d(%rip),%rax        # 136ed0 <xTaskToNotify>
   20aa3:	48 8d 55 b4          	lea    -0x4c(%rbp),%rdx
   20aa7:	49 89 d0             	mov    %rdx,%r8
   20aaa:	b9 01 00 00 00       	mov    $0x1,%ecx
   20aaf:	ba 00 00 00 00       	mov    $0x0,%edx
   20ab4:	be 00 00 00 00       	mov    $0x0,%esi
   20ab9:	48 89 c7             	mov    %rax,%rdi
   20abc:	e8 da f9 fe ff       	callq  1049b <xTaskGenericNotify>
   20ac1:	8b 45 d0             	mov    -0x30(%rbp),%eax
   20ac4:	0b 45 d4             	or     -0x2c(%rbp),%eax
   20ac7:	f7 d0                	not    %eax
   20ac9:	89 c2                	mov    %eax,%edx
   20acb:	8b 45 b0             	mov    -0x50(%rbp),%eax
   20ace:	39 c2                	cmp    %eax,%edx
   20ad0:	74 11                	je     20ae3 <prvSingleTaskTests+0x725>
   20ad2:	be 66 01 00 00       	mov    $0x166,%esi
   20ad7:	48 8d 3d c2 78 00 00 	lea    0x78c2(%rip),%rdi        # 283a0 <xInterruptGivePeriod+0x5b0>
   20ade:	e8 29 32 fe ff       	callq  3d0c <vAssertCalled>
   20ae3:	48 8d 45 b0          	lea    -0x50(%rbp),%rax
   20ae7:	41 b8 00 00 00 00    	mov    $0x0,%r8d
   20aed:	48 89 c1             	mov    %rax,%rcx
   20af0:	ba ff ff ff ff       	mov    $0xffffffff,%edx
   20af5:	be 00 00 00 00       	mov    $0x0,%esi
   20afa:	bf 00 00 00 00       	mov    $0x0,%edi
   20aff:	e8 30 f7 fe ff       	callq  10234 <xTaskGenericNotifyWait>
   20b04:	48 8b 05 c5 63 11 00 	mov    0x1163c5(%rip),%rax        # 136ed0 <xTaskToNotify>
   20b0b:	48 8d 55 b4          	lea    -0x4c(%rbp),%rdx
   20b0f:	49 89 d0             	mov    %rdx,%r8
   20b12:	b9 01 00 00 00       	mov    $0x1,%ecx
   20b17:	ba 00 00 00 00       	mov    $0x0,%edx
   20b1c:	be 00 00 00 00       	mov    $0x0,%esi
   20b21:	48 89 c7             	mov    %rax,%rdi
   20b24:	e8 72 f9 fe ff       	callq  1049b <xTaskGenericNotify>
   20b29:	8b 45 b4             	mov    -0x4c(%rbp),%eax
   20b2c:	85 c0                	test   %eax,%eax
   20b2e:	74 11                	je     20b41 <prvSingleTaskTests+0x783>
   20b30:	be 6b 01 00 00       	mov    $0x16b,%esi
   20b35:	48 8d 3d 64 78 00 00 	lea    0x7864(%rip),%rdi        # 283a0 <xInterruptGivePeriod+0x5b0>
   20b3c:	e8 cb 31 fe ff       	callq  3d0c <vAssertCalled>
   20b41:	c7 45 c0 00 00 00 00 	movl   $0x0,-0x40(%rbp)
   20b48:	c7 45 b8 01 00 00 00 	movl   $0x1,-0x48(%rbp)
   20b4f:	eb 45                	jmp    20b96 <prvSingleTaskTests+0x7d8>
   20b51:	48 8b 05 78 63 11 00 	mov    0x116378(%rip),%rax        # 136ed0 <xTaskToNotify>
   20b58:	48 8d 4d b4          	lea    -0x4c(%rbp),%rcx
   20b5c:	8b 55 b8             	mov    -0x48(%rbp),%edx
   20b5f:	49 89 c8             	mov    %rcx,%r8
   20b62:	b9 01 00 00 00       	mov    $0x1,%ecx
   20b67:	be 00 00 00 00       	mov    $0x0,%esi
   20b6c:	48 89 c7             	mov    %rax,%rdi
   20b6f:	e8 27 f9 fe ff       	callq  1049b <xTaskGenericNotify>
   20b74:	8b 45 b4             	mov    -0x4c(%rbp),%eax
   20b77:	39 45 c0             	cmp    %eax,-0x40(%rbp)
   20b7a:	74 11                	je     20b8d <prvSingleTaskTests+0x7cf>
   20b7c:	be 75 01 00 00       	mov    $0x175,%esi
   20b81:	48 8d 3d 18 78 00 00 	lea    0x7818(%rip),%rdi        # 283a0 <xInterruptGivePeriod+0x5b0>
   20b88:	e8 7f 31 fe ff       	callq  3d0c <vAssertCalled>
   20b8d:	8b 45 b8             	mov    -0x48(%rbp),%eax
   20b90:	09 45 c0             	or     %eax,-0x40(%rbp)
   20b93:	d1 65 b8             	shll   -0x48(%rbp)
   20b96:	83 7d b8 7f          	cmpl   $0x7f,-0x48(%rbp)
   20b9a:	76 b5                	jbe    20b51 <prvSingleTaskTests+0x793>
   20b9c:	48 8d 45 b0          	lea    -0x50(%rbp),%rax
   20ba0:	41 b8 00 00 00 00    	mov    $0x0,%r8d
   20ba6:	48 89 c1             	mov    %rax,%rcx
   20ba9:	ba 00 00 00 00       	mov    $0x0,%edx
   20bae:	be ff ff ff ff       	mov    $0xffffffff,%esi
   20bb3:	bf 00 00 00 00       	mov    $0x0,%edi
   20bb8:	e8 77 f6 fe ff       	callq  10234 <xTaskGenericNotifyWait>
   20bbd:	be 00 00 00 00       	mov    $0x0,%esi
   20bc2:	bf 00 00 00 00       	mov    $0x0,%edi
   20bc7:	e8 52 04 ff ff       	callq  1101e <xTaskGenericNotifyStateClear>
   20bcc:	48 85 c0             	test   %rax,%rax
   20bcf:	74 11                	je     20be2 <prvSingleTaskTests+0x824>
   20bd1:	be 7f 01 00 00       	mov    $0x17f,%esi
   20bd6:	48 8d 3d c3 77 00 00 	lea    0x77c3(%rip),%rdi        # 283a0 <xInterruptGivePeriod+0x5b0>
   20bdd:	e8 2a 31 fe ff       	callq  3d0c <vAssertCalled>
   20be2:	48 8b 05 e7 62 11 00 	mov    0x1162e7(%rip),%rax        # 136ed0 <xTaskToNotify>
   20be9:	48 8d 4d b4          	lea    -0x4c(%rbp),%rcx
   20bed:	8b 55 c4             	mov    -0x3c(%rbp),%edx
   20bf0:	49 89 c8             	mov    %rcx,%r8
   20bf3:	b9 04 00 00 00       	mov    $0x4,%ecx
   20bf8:	be 00 00 00 00       	mov    $0x0,%esi
   20bfd:	48 89 c7             	mov    %rax,%rdi
   20c00:	e8 96 f8 fe ff       	callq  1049b <xTaskGenericNotify>
   20c05:	be 00 00 00 00       	mov    $0x0,%esi
   20c0a:	bf 00 00 00 00       	mov    $0x0,%edi
   20c0f:	e8 0a 04 ff ff       	callq  1101e <xTaskGenericNotifyStateClear>
   20c14:	48 83 f8 01          	cmp    $0x1,%rax
   20c18:	74 11                	je     20c2b <prvSingleTaskTests+0x86d>
   20c1a:	be 87 01 00 00       	mov    $0x187,%esi
   20c1f:	48 8d 3d 7a 77 00 00 	lea    0x777a(%rip),%rdi        # 283a0 <xInterruptGivePeriod+0x5b0>
   20c26:	e8 e1 30 fe ff       	callq  3d0c <vAssertCalled>
   20c2b:	be 00 00 00 00       	mov    $0x0,%esi
   20c30:	bf 00 00 00 00       	mov    $0x0,%edi
   20c35:	e8 e4 03 ff ff       	callq  1101e <xTaskGenericNotifyStateClear>
   20c3a:	48 85 c0             	test   %rax,%rax
   20c3d:	74 11                	je     20c50 <prvSingleTaskTests+0x892>
   20c3f:	be 88 01 00 00       	mov    $0x188,%esi
   20c44:	48 8d 3d 55 77 00 00 	lea    0x7755(%rip),%rdi        # 283a0 <xInterruptGivePeriod+0x5b0>
   20c4b:	e8 bc 30 fe ff       	callq  3d0c <vAssertCalled>
   20c50:	48 8b 05 79 62 11 00 	mov    0x116279(%rip),%rax        # 136ed0 <xTaskToNotify>
   20c57:	41 b8 00 00 00 00    	mov    $0x0,%r8d
   20c5d:	b9 01 00 00 00       	mov    $0x1,%ecx
   20c62:	ba ff ff ff ff       	mov    $0xffffffff,%edx
   20c67:	be 00 00 00 00       	mov    $0x0,%esi
   20c6c:	48 89 c7             	mov    %rax,%rdi
   20c6f:	e8 27 f8 fe ff       	callq  1049b <xTaskGenericNotify>
   20c74:	48 8b 05 55 62 11 00 	mov    0x116255(%rip),%rax        # 136ed0 <xTaskToNotify>
   20c7b:	ba 00 00 00 ff       	mov    $0xff000000,%edx
   20c80:	be 00 00 00 00       	mov    $0x0,%esi
   20c85:	48 89 c7             	mov    %rax,%rdi
   20c88:	e8 23 04 ff ff       	callq  110b0 <ulTaskGenericNotifyValueClear>
   20c8d:	83 f8 ff             	cmp    $0xffffffff,%eax
   20c90:	74 11                	je     20ca3 <prvSingleTaskTests+0x8e5>
   20c92:	be 95 01 00 00       	mov    $0x195,%esi
   20c97:	48 8d 3d 02 77 00 00 	lea    0x7702(%rip),%rdi        # 283a0 <xInterruptGivePeriod+0x5b0>
   20c9e:	e8 69 30 fe ff       	callq  3d0c <vAssertCalled>
   20ca3:	48 8b 05 26 62 11 00 	mov    0x116226(%rip),%rax        # 136ed0 <xTaskToNotify>
   20caa:	ba ff 00 00 00       	mov    $0xff,%edx
   20caf:	be 00 00 00 00       	mov    $0x0,%esi
   20cb4:	48 89 c7             	mov    %rax,%rdi
   20cb7:	e8 f4 03 ff ff       	callq  110b0 <ulTaskGenericNotifyValueClear>
   20cbc:	3d ff ff ff 00       	cmp    $0xffffff,%eax
   20cc1:	74 11                	je     20cd4 <prvSingleTaskTests+0x916>
   20cc3:	be 99 01 00 00       	mov    $0x199,%esi
   20cc8:	48 8d 3d d1 76 00 00 	lea    0x76d1(%rip),%rdi        # 283a0 <xInterruptGivePeriod+0x5b0>
   20ccf:	e8 38 30 fe ff       	callq  3d0c <vAssertCalled>
   20cd4:	48 8b 05 f5 61 11 00 	mov    0x1161f5(%rip),%rax        # 136ed0 <xTaskToNotify>
   20cdb:	ba ff ff ff ff       	mov    $0xffffffff,%edx
   20ce0:	be 00 00 00 00       	mov    $0x0,%esi
   20ce5:	48 89 c7             	mov    %rax,%rdi
   20ce8:	e8 c3 03 ff ff       	callq  110b0 <ulTaskGenericNotifyValueClear>
   20ced:	3d 00 ff ff 00       	cmp    $0xffff00,%eax
   20cf2:	74 11                	je     20d05 <prvSingleTaskTests+0x947>
   20cf4:	be 9d 01 00 00       	mov    $0x19d,%esi
   20cf9:	48 8d 3d a0 76 00 00 	lea    0x76a0(%rip),%rdi        # 283a0 <xInterruptGivePeriod+0x5b0>
   20d00:	e8 07 30 fe ff       	callq  3d0c <vAssertCalled>
   20d05:	48 8b 05 c4 61 11 00 	mov    0x1161c4(%rip),%rax        # 136ed0 <xTaskToNotify>
   20d0c:	ba ff ff ff ff       	mov    $0xffffffff,%edx
   20d11:	be 00 00 00 00       	mov    $0x0,%esi
   20d16:	48 89 c7             	mov    %rax,%rdi
   20d19:	e8 92 03 ff ff       	callq  110b0 <ulTaskGenericNotifyValueClear>
   20d1e:	85 c0                	test   %eax,%eax
   20d20:	74 11                	je     20d33 <prvSingleTaskTests+0x975>
   20d22:	be a0 01 00 00       	mov    $0x1a0,%esi
   20d27:	48 8d 3d 72 76 00 00 	lea    0x7672(%rip),%rdi        # 283a0 <xInterruptGivePeriod+0x5b0>
   20d2e:	e8 d9 2f fe ff       	callq  3d0c <vAssertCalled>
   20d33:	48 8b 05 96 61 11 00 	mov    0x116196(%rip),%rax        # 136ed0 <xTaskToNotify>
   20d3a:	ba 00 00 00 00       	mov    $0x0,%edx
   20d3f:	be 00 00 00 00       	mov    $0x0,%esi
   20d44:	48 89 c7             	mov    %rax,%rdi
   20d47:	e8 64 03 ff ff       	callq  110b0 <ulTaskGenericNotifyValueClear>
   20d4c:	85 c0                	test   %eax,%eax
   20d4e:	74 11                	je     20d61 <prvSingleTaskTests+0x9a3>
   20d50:	be a1 01 00 00       	mov    $0x1a1,%esi
   20d55:	48 8d 3d 44 76 00 00 	lea    0x7644(%rip),%rdi        # 283a0 <xInterruptGivePeriod+0x5b0>
   20d5c:	e8 ab 2f fe ff       	callq  3d0c <vAssertCalled>
   20d61:	48 8b 05 68 61 11 00 	mov    0x116168(%rip),%rax        # 136ed0 <xTaskToNotify>
   20d68:	ba ff ff ff ff       	mov    $0xffffffff,%edx
   20d6d:	be 00 00 00 00       	mov    $0x0,%esi
   20d72:	48 89 c7             	mov    %rax,%rdi
   20d75:	e8 36 03 ff ff       	callq  110b0 <ulTaskGenericNotifyValueClear>
   20d7a:	85 c0                	test   %eax,%eax
   20d7c:	74 11                	je     20d8f <prvSingleTaskTests+0x9d1>
   20d7e:	be a2 01 00 00       	mov    $0x1a2,%esi
   20d83:	48 8d 3d 16 76 00 00 	lea    0x7616(%rip),%rdi        # 283a0 <xInterruptGivePeriod+0x5b0>
   20d8a:	e8 7d 2f fe ff       	callq  3d0c <vAssertCalled>
   20d8f:	be 00 00 00 00       	mov    $0x0,%esi
   20d94:	bf 00 00 00 00       	mov    $0x0,%edi
   20d99:	e8 80 02 ff ff       	callq  1101e <xTaskGenericNotifyStateClear>
   20d9e:	48 83 f8 01          	cmp    $0x1,%rax
   20da2:	74 11                	je     20db5 <prvSingleTaskTests+0x9f7>
   20da4:	be a6 01 00 00       	mov    $0x1a6,%esi
   20da9:	48 8d 3d f0 75 00 00 	lea    0x75f0(%rip),%rdi        # 283a0 <xInterruptGivePeriod+0x5b0>
   20db0:	e8 57 2f fe ff       	callq  3d0c <vAssertCalled>
   20db5:	be 00 00 00 00       	mov    $0x0,%esi
   20dba:	bf 00 00 00 00       	mov    $0x0,%edi
   20dbf:	e8 5a 02 ff ff       	callq  1101e <xTaskGenericNotifyStateClear>
   20dc4:	48 85 c0             	test   %rax,%rax
   20dc7:	74 11                	je     20dda <prvSingleTaskTests+0xa1c>
   20dc9:	be a7 01 00 00       	mov    $0x1a7,%esi
   20dce:	48 8d 3d cb 75 00 00 	lea    0x75cb(%rip),%rdi        # 283a0 <xInterruptGivePeriod+0x5b0>
   20dd5:	e8 32 2f fe ff       	callq  3d0c <vAssertCalled>
   20dda:	4c 8d 05 f6 01 00 00 	lea    0x1f6(%rip),%r8        # 20fd7 <prvSuspendedTaskTimerTestCallback>
   20de1:	b9 00 00 00 00       	mov    $0x0,%ecx
   20de6:	ba 00 00 00 00       	mov    $0x0,%edx
   20deb:	be 32 00 00 00       	mov    $0x32,%esi
   20df0:	48 8d 3d f0 75 00 00 	lea    0x75f0(%rip),%rdi        # 283e7 <xInterruptGivePeriod+0x5f7>
   20df7:	e8 c9 05 ff ff       	callq  113c5 <xTimerCreate>
   20dfc:	48 89 45 f0          	mov    %rax,-0x10(%rbp)
   20e00:	48 83 7d f0 00       	cmpq   $0x0,-0x10(%rbp)
   20e05:	75 11                	jne    20e18 <prvSingleTaskTests+0xa5a>
   20e07:	be ae 01 00 00       	mov    $0x1ae,%esi
   20e0c:	48 8d 3d 8d 75 00 00 	lea    0x758d(%rip),%rdi        # 283a0 <xInterruptGivePeriod+0x5b0>
   20e13:	e8 f4 2e fe ff       	callq  3d0c <vAssertCalled>
   20e18:	8b 05 aa 60 11 00    	mov    0x1160aa(%rip),%eax        # 136ec8 <ulNotifyCycleCount>
   20e1e:	83 c0 01             	add    $0x1,%eax
   20e21:	89 05 a1 60 11 00    	mov    %eax,0x1160a1(%rip)        # 136ec8 <ulNotifyCycleCount>
   20e27:	41 b8 00 00 00 00    	mov    $0x0,%r8d
   20e2d:	b9 00 00 00 00       	mov    $0x0,%ecx
   20e32:	ba 00 00 00 00       	mov    $0x0,%edx
   20e37:	be ff ff ff ff       	mov    $0xffffffff,%esi
   20e3c:	bf 00 00 00 00       	mov    $0x0,%edi
   20e41:	e8 ee f3 fe ff       	callq  10234 <xTaskGenericNotifyWait>
   20e46:	be 06 00 00 00       	mov    $0x6,%esi
   20e4b:	bf 00 00 00 00       	mov    $0x0,%edi
   20e50:	e8 e7 bb fe ff       	callq  ca3c <vTaskPrioritySet>
   20e55:	c7 45 b0 00 00 00 00 	movl   $0x0,-0x50(%rbp)
   20e5c:	e8 37 ca fe ff       	callq  d898 <xTaskGetTickCount>
   20e61:	48 89 c2             	mov    %rax,%rdx
   20e64:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
   20e68:	49 c7 c0 ff ff ff ff 	mov    $0xffffffffffffffff,%r8
   20e6f:	b9 00 00 00 00       	mov    $0x0,%ecx
   20e74:	be 01 00 00 00       	mov    $0x1,%esi
   20e79:	48 89 c7             	mov    %rax,%rdi
   20e7c:	e8 b4 07 ff ff       	callq  11635 <xTimerGenericCommand>
   20e81:	48 8d 45 b0          	lea    -0x50(%rbp),%rax
   20e85:	49 c7 c0 ff ff ff ff 	mov    $0xffffffffffffffff,%r8
   20e8c:	48 89 c1             	mov    %rax,%rcx
   20e8f:	ba 00 00 00 00       	mov    $0x0,%edx
   20e94:	be 00 00 00 00       	mov    $0x0,%esi
   20e99:	bf 00 00 00 00       	mov    $0x0,%edi
   20e9e:	e8 91 f3 fe ff       	callq  10234 <xTaskGenericNotifyWait>
   20ea3:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
   20ea7:	48 83 7d e8 00       	cmpq   $0x0,-0x18(%rbp)
   20eac:	74 11                	je     20ebf <prvSingleTaskTests+0xb01>
   20eae:	be c3 01 00 00       	mov    $0x1c3,%esi
   20eb3:	48 8d 3d e6 74 00 00 	lea    0x74e6(%rip),%rdi        # 283a0 <xInterruptGivePeriod+0x5b0>
   20eba:	e8 4d 2e fe ff       	callq  3d0c <vAssertCalled>
   20ebf:	8b 45 b0             	mov    -0x50(%rbp),%eax
   20ec2:	85 c0                	test   %eax,%eax
   20ec4:	74 11                	je     20ed7 <prvSingleTaskTests+0xb19>
   20ec6:	be c4 01 00 00       	mov    $0x1c4,%esi
   20ecb:	48 8d 3d ce 74 00 00 	lea    0x74ce(%rip),%rdi        # 283a0 <xInterruptGivePeriod+0x5b0>
   20ed2:	e8 35 2e fe ff       	callq  3d0c <vAssertCalled>
   20ed7:	8b 05 eb 5f 11 00    	mov    0x115feb(%rip),%eax        # 136ec8 <ulNotifyCycleCount>
   20edd:	83 c0 01             	add    $0x1,%eax
   20ee0:	89 05 e2 5f 11 00    	mov    %eax,0x115fe2(%rip)        # 136ec8 <ulNotifyCycleCount>
   20ee6:	e8 ad c9 fe ff       	callq  d898 <xTaskGetTickCount>
   20eeb:	48 89 c2             	mov    %rax,%rdx
   20eee:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
   20ef2:	49 c7 c0 ff ff ff ff 	mov    $0xffffffffffffffff,%r8
   20ef9:	b9 00 00 00 00       	mov    $0x0,%ecx
   20efe:	be 01 00 00 00       	mov    $0x1,%esi
   20f03:	48 89 c7             	mov    %rax,%rdi
   20f06:	e8 2a 07 ff ff       	callq  11635 <xTimerGenericCommand>
   20f0b:	48 8d 45 b0          	lea    -0x50(%rbp),%rax
   20f0f:	49 c7 c0 ff ff ff ff 	mov    $0xffffffffffffffff,%r8
   20f16:	48 89 c1             	mov    %rax,%rcx
   20f19:	ba 00 00 00 00       	mov    $0x0,%edx
   20f1e:	be 00 00 00 00       	mov    $0x0,%esi
   20f23:	bf 00 00 00 00       	mov    $0x0,%edi
   20f28:	e8 07 f3 fe ff       	callq  10234 <xTaskGenericNotifyWait>
   20f2d:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
   20f31:	48 83 7d e8 01       	cmpq   $0x1,-0x18(%rbp)
   20f36:	74 11                	je     20f49 <prvSingleTaskTests+0xb8b>
   20f38:	be d2 01 00 00       	mov    $0x1d2,%esi
   20f3d:	48 8d 3d 5c 74 00 00 	lea    0x745c(%rip),%rdi        # 283a0 <xInterruptGivePeriod+0x5b0>
   20f44:	e8 c3 2d fe ff       	callq  3d0c <vAssertCalled>
   20f49:	8b 45 b0             	mov    -0x50(%rbp),%eax
   20f4c:	85 c0                	test   %eax,%eax
   20f4e:	75 11                	jne    20f61 <prvSingleTaskTests+0xba3>
   20f50:	be d4 01 00 00       	mov    $0x1d4,%esi
   20f55:	48 8d 3d 44 74 00 00 	lea    0x7444(%rip),%rdi        # 283a0 <xInterruptGivePeriod+0x5b0>
   20f5c:	e8 ab 2d fe ff       	callq  3d0c <vAssertCalled>
   20f61:	be 00 00 00 00       	mov    $0x0,%esi
   20f66:	bf 00 00 00 00       	mov    $0x0,%edi
   20f6b:	e8 cc ba fe ff       	callq  ca3c <vTaskPrioritySet>
   20f70:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
   20f74:	49 c7 c0 ff ff ff ff 	mov    $0xffffffffffffffff,%r8
   20f7b:	b9 00 00 00 00       	mov    $0x0,%ecx
   20f80:	ba 00 00 00 00       	mov    $0x0,%edx
   20f85:	be 05 00 00 00       	mov    $0x5,%esi
   20f8a:	48 89 c7             	mov    %rax,%rdi
   20f8d:	e8 a3 06 ff ff       	callq  11635 <xTimerGenericCommand>
   20f92:	8b 05 30 5f 11 00    	mov    0x115f30(%rip),%eax        # 136ec8 <ulNotifyCycleCount>
   20f98:	83 c0 01             	add    $0x1,%eax
   20f9b:	89 05 27 5f 11 00    	mov    %eax,0x115f27(%rip)        # 136ec8 <ulNotifyCycleCount>
   20fa1:	41 b8 00 00 00 00    	mov    $0x0,%r8d
   20fa7:	b9 00 00 00 00       	mov    $0x0,%ecx
   20fac:	ba 00 00 00 00       	mov    $0x0,%edx
   20fb1:	be ff ff ff ff       	mov    $0xffffffff,%esi
   20fb6:	bf 00 00 00 00       	mov    $0x0,%edi
   20fbb:	e8 74 f2 fe ff       	callq  10234 <xTaskGenericNotifyWait>
   20fc0:	90                   	nop
   20fc1:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   20fc5:	64 48 33 04 25 28 00 	xor    %fs:0x28,%rax
   20fcc:	00 00 
   20fce:	74 05                	je     20fd5 <prvSingleTaskTests+0xc17>
   20fd0:	e8 fb 14 fe ff       	callq  24d0 <__stack_chk_fail@plt>
   20fd5:	c9                   	leaveq 
   20fd6:	c3                   	retq   

0000000000020fd7 <prvSuspendedTaskTimerTestCallback>:
   20fd7:	f3 0f 1e fa          	endbr64 
   20fdb:	55                   	push   %rbp
   20fdc:	48 89 e5             	mov    %rsp,%rbp
   20fdf:	48 83 ec 10          	sub    $0x10,%rsp
   20fe3:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   20fe7:	8b 05 03 5f 11 00    	mov    0x115f03(%rip),%eax        # 136ef0 <ulCallCount.2897>
   20fed:	85 c0                	test   %eax,%eax
   20fef:	75 45                	jne    21036 <prvSuspendedTaskTimerTestCallback+0x5f>
   20ff1:	48 8b 05 d8 5e 11 00 	mov    0x115ed8(%rip),%rax        # 136ed0 <xTaskToNotify>
   20ff8:	48 89 c7             	mov    %rax,%rdi
   20ffb:	e8 61 bd fe ff       	callq  cd61 <vTaskSuspend>
   21000:	48 8b 05 c9 5e 11 00 	mov    0x115ec9(%rip),%rax        # 136ed0 <xTaskToNotify>
   21007:	48 89 c7             	mov    %rax,%rdi
   2100a:	e8 79 b8 fe ff       	callq  c888 <eTaskGetState>
   2100f:	83 f8 03             	cmp    $0x3,%eax
   21012:	74 11                	je     21025 <prvSuspendedTaskTimerTestCallback+0x4e>
   21014:	be f2 01 00 00       	mov    $0x1f2,%esi
   21019:	48 8d 3d 80 73 00 00 	lea    0x7380(%rip),%rdi        # 283a0 <xInterruptGivePeriod+0x5b0>
   21020:	e8 e7 2c fe ff       	callq  3d0c <vAssertCalled>
   21025:	48 8b 05 a4 5e 11 00 	mov    0x115ea4(%rip),%rax        # 136ed0 <xTaskToNotify>
   2102c:	48 89 c7             	mov    %rax,%rdi
   2102f:	e8 4b bf fe ff       	callq  cf7f <vTaskResume>
   21034:	eb 68                	jmp    2109e <prvSuspendedTaskTimerTestCallback+0xc7>
   21036:	48 8b 05 93 5e 11 00 	mov    0x115e93(%rip),%rax        # 136ed0 <xTaskToNotify>
   2103d:	48 89 c7             	mov    %rax,%rdi
   21040:	e8 1c bd fe ff       	callq  cd61 <vTaskSuspend>
   21045:	8b 15 a5 5e 11 00    	mov    0x115ea5(%rip),%edx        # 136ef0 <ulCallCount.2897>
   2104b:	48 8b 05 7e 5e 11 00 	mov    0x115e7e(%rip),%rax        # 136ed0 <xTaskToNotify>
   21052:	41 b8 00 00 00 00    	mov    $0x0,%r8d
   21058:	b9 03 00 00 00       	mov    $0x3,%ecx
   2105d:	be 00 00 00 00       	mov    $0x0,%esi
   21062:	48 89 c7             	mov    %rax,%rdi
   21065:	e8 31 f4 fe ff       	callq  1049b <xTaskGenericNotify>
   2106a:	48 8b 05 5f 5e 11 00 	mov    0x115e5f(%rip),%rax        # 136ed0 <xTaskToNotify>
   21071:	48 89 c7             	mov    %rax,%rdi
   21074:	e8 0f b8 fe ff       	callq  c888 <eTaskGetState>
   21079:	83 f8 03             	cmp    $0x3,%eax
   2107c:	74 11                	je     2108f <prvSuspendedTaskTimerTestCallback+0xb8>
   2107e:	be ff 01 00 00       	mov    $0x1ff,%esi
   21083:	48 8d 3d 16 73 00 00 	lea    0x7316(%rip),%rdi        # 283a0 <xInterruptGivePeriod+0x5b0>
   2108a:	e8 7d 2c fe ff       	callq  3d0c <vAssertCalled>
   2108f:	48 8b 05 3a 5e 11 00 	mov    0x115e3a(%rip),%rax        # 136ed0 <xTaskToNotify>
   21096:	48 89 c7             	mov    %rax,%rdi
   21099:	e8 e1 be fe ff       	callq  cf7f <vTaskResume>
   2109e:	8b 05 4c 5e 11 00    	mov    0x115e4c(%rip),%eax        # 136ef0 <ulCallCount.2897>
   210a4:	83 c0 01             	add    $0x1,%eax
   210a7:	89 05 43 5e 11 00    	mov    %eax,0x115e43(%rip)        # 136ef0 <ulCallCount.2897>
   210ad:	90                   	nop
   210ae:	c9                   	leaveq 
   210af:	c3                   	retq   

00000000000210b0 <prvNotifyingTimer>:
   210b0:	f3 0f 1e fa          	endbr64 
   210b4:	55                   	push   %rbp
   210b5:	48 89 e5             	mov    %rsp,%rbp
   210b8:	48 83 ec 10          	sub    $0x10,%rsp
   210bc:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   210c0:	48 8b 05 09 5e 11 00 	mov    0x115e09(%rip),%rax        # 136ed0 <xTaskToNotify>
   210c7:	41 b8 00 00 00 00    	mov    $0x0,%r8d
   210cd:	b9 02 00 00 00       	mov    $0x2,%ecx
   210d2:	ba 00 00 00 00       	mov    $0x0,%edx
   210d7:	be 00 00 00 00       	mov    $0x0,%esi
   210dc:	48 89 c7             	mov    %rax,%rdi
   210df:	e8 b7 f3 fe ff       	callq  1049b <xTaskGenericNotify>
   210e4:	e8 e6 1c ff ff       	callq  12dcf <vPortEnterCritical>
   210e9:	8b 05 ed 5d 11 00    	mov    0x115ded(%rip),%eax        # 136edc <ulTimerNotificationsSent>
   210ef:	83 c0 01             	add    $0x1,%eax
   210f2:	89 05 e4 5d 11 00    	mov    %eax,0x115de4(%rip)        # 136edc <ulTimerNotificationsSent>
   210f8:	e8 00 1d ff ff       	callq  12dfd <vPortExitCritical>
   210fd:	90                   	nop
   210fe:	c9                   	leaveq 
   210ff:	c3                   	retq   

0000000000021100 <prvNotifiedTask>:
   21100:	f3 0f 1e fa          	endbr64 
   21104:	55                   	push   %rbp
   21105:	48 89 e5             	mov    %rsp,%rbp
   21108:	48 83 ec 40          	sub    $0x40,%rsp
   2110c:	48 89 7d c8          	mov    %rdi,-0x38(%rbp)
   21110:	48 c7 45 e8 5a 00 00 	movq   $0x5a,-0x18(%rbp)
   21117:	00 
   21118:	48 c7 45 f0 0a 00 00 	movq   $0xa,-0x10(%rbp)
   2111f:	00 
   21120:	48 c7 45 f8 00 00 00 	movq   $0x0,-0x8(%rbp)
   21127:	00 
   21128:	c7 45 dc 32 00 00 00 	movl   $0x32,-0x24(%rbp)
   2112f:	e8 8a f2 ff ff       	callq  203be <prvSingleTaskTests>
   21134:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
   21138:	4c 8d 05 71 ff ff ff 	lea    -0x8f(%rip),%r8        # 210b0 <prvNotifyingTimer>
   2113f:	b9 00 00 00 00       	mov    $0x0,%ecx
   21144:	ba 00 00 00 00       	mov    $0x0,%edx
   21149:	48 89 c6             	mov    %rax,%rsi
   2114c:	48 8d 3d a1 72 00 00 	lea    0x72a1(%rip),%rdi        # 283f4 <xInterruptGivePeriod+0x604>
   21153:	e8 6d 02 ff ff       	callq  113c5 <xTimerCreate>
   21158:	48 89 05 81 5d 11 00 	mov    %rax,0x115d81(%rip)        # 136ee0 <xTimer>
   2115f:	e8 84 03 00 00       	callq  214e8 <prvRand>
   21164:	ba 00 00 00 00       	mov    $0x0,%edx
   21169:	48 f7 75 e8          	divq   -0x18(%rbp)
   2116d:	48 89 55 e0          	mov    %rdx,-0x20(%rbp)
   21171:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
   21175:	48 3b 45 f0          	cmp    -0x10(%rbp),%rax
   21179:	73 08                	jae    21183 <prvNotifiedTask+0x83>
   2117b:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
   2117f:	48 89 45 e0          	mov    %rax,-0x20(%rbp)
   21183:	48 8b 05 56 5d 11 00 	mov    0x115d56(%rip),%rax        # 136ee0 <xTimer>
   2118a:	48 8b 55 e0          	mov    -0x20(%rbp),%rdx
   2118e:	49 c7 c0 ff ff ff ff 	mov    $0xffffffffffffffff,%r8
   21195:	b9 00 00 00 00       	mov    $0x0,%ecx
   2119a:	be 04 00 00 00       	mov    $0x4,%esi
   2119f:	48 89 c7             	mov    %rax,%rdi
   211a2:	e8 8e 04 ff ff       	callq  11635 <xTimerGenericCommand>
   211a7:	e8 3c 03 00 00       	callq  214e8 <prvRand>
   211ac:	ba 00 00 00 00       	mov    $0x0,%edx
   211b1:	48 f7 75 e8          	divq   -0x18(%rbp)
   211b5:	48 89 55 e0          	mov    %rdx,-0x20(%rbp)
   211b9:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
   211bd:	48 3b 45 f0          	cmp    -0x10(%rbp),%rax
   211c1:	73 08                	jae    211cb <prvNotifiedTask+0xcb>
   211c3:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
   211c7:	48 89 45 e0          	mov    %rax,-0x20(%rbp)
   211cb:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
   211cf:	48 89 c2             	mov    %rax,%rdx
   211d2:	be 00 00 00 00       	mov    $0x0,%esi
   211d7:	bf 00 00 00 00       	mov    $0x0,%edi
   211dc:	e8 c5 ed fe ff       	callq  ffa6 <ulTaskGenericNotifyTake>
   211e1:	85 c0                	test   %eax,%eax
   211e3:	74 0f                	je     211f4 <prvNotifiedTask+0xf4>
   211e5:	8b 05 ed 5c 11 00    	mov    0x115ced(%rip),%eax        # 136ed8 <ulTimerNotificationsReceived>
   211eb:	83 c0 01             	add    $0x1,%eax
   211ee:	89 05 e4 5c 11 00    	mov    %eax,0x115ce4(%rip)        # 136ed8 <ulTimerNotificationsReceived>
   211f4:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   211f8:	48 89 c2             	mov    %rax,%rdx
   211fb:	be 00 00 00 00       	mov    $0x0,%esi
   21200:	bf 00 00 00 00       	mov    $0x0,%edi
   21205:	e8 9c ed fe ff       	callq  ffa6 <ulTaskGenericNotifyTake>
   2120a:	85 c0                	test   %eax,%eax
   2120c:	74 0f                	je     2121d <prvNotifiedTask+0x11d>
   2120e:	8b 05 c4 5c 11 00    	mov    0x115cc4(%rip),%eax        # 136ed8 <ulTimerNotificationsReceived>
   21214:	83 c0 01             	add    $0x1,%eax
   21217:	89 05 bb 5c 11 00    	mov    %eax,0x115cbb(%rip)        # 136ed8 <ulTimerNotificationsReceived>
   2121d:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
   21221:	48 89 c2             	mov    %rax,%rdx
   21224:	be 01 00 00 00       	mov    $0x1,%esi
   21229:	bf 00 00 00 00       	mov    $0x0,%edi
   2122e:	e8 73 ed fe ff       	callq  ffa6 <ulTaskGenericNotifyTake>
   21233:	8b 15 9f 5c 11 00    	mov    0x115c9f(%rip),%edx        # 136ed8 <ulTimerNotificationsReceived>
   21239:	01 d0                	add    %edx,%eax
   2123b:	89 05 97 5c 11 00    	mov    %eax,0x115c97(%rip)        # 136ed8 <ulTimerNotificationsReceived>
   21241:	8b 05 81 5c 11 00    	mov    0x115c81(%rip),%eax        # 136ec8 <ulNotifyCycleCount>
   21247:	ba 00 00 00 00       	mov    $0x0,%edx
   2124c:	f7 75 dc             	divl   -0x24(%rbp)
   2124f:	89 d0                	mov    %edx,%eax
   21251:	85 c0                	test   %eax,%eax
   21253:	75 4e                	jne    212a3 <prvNotifiedTask+0x1a3>
   21255:	48 8b 05 74 5c 11 00 	mov    0x115c74(%rip),%rax        # 136ed0 <xTaskToNotify>
   2125c:	be 06 00 00 00       	mov    $0x6,%esi
   21261:	48 89 c7             	mov    %rax,%rdi
   21264:	e8 d3 b7 fe ff       	callq  ca3c <vTaskPrioritySet>
   21269:	48 c7 c2 ff ff ff ff 	mov    $0xffffffffffffffff,%rdx
   21270:	be 01 00 00 00       	mov    $0x1,%esi
   21275:	bf 00 00 00 00       	mov    $0x0,%edi
   2127a:	e8 27 ed fe ff       	callq  ffa6 <ulTaskGenericNotifyTake>
   2127f:	8b 15 53 5c 11 00    	mov    0x115c53(%rip),%edx        # 136ed8 <ulTimerNotificationsReceived>
   21285:	01 d0                	add    %edx,%eax
   21287:	89 05 4b 5c 11 00    	mov    %eax,0x115c4b(%rip)        # 136ed8 <ulTimerNotificationsReceived>
   2128d:	48 8b 05 3c 5c 11 00 	mov    0x115c3c(%rip),%rax        # 136ed0 <xTaskToNotify>
   21294:	be 00 00 00 00       	mov    $0x0,%esi
   21299:	48 89 c7             	mov    %rax,%rdi
   2129c:	e8 9b b7 fe ff       	callq  ca3c <vTaskPrioritySet>
   212a1:	eb 24                	jmp    212c7 <prvNotifiedTask+0x1c7>
   212a3:	48 c7 c2 ff ff ff ff 	mov    $0xffffffffffffffff,%rdx
   212aa:	be 01 00 00 00       	mov    $0x1,%esi
   212af:	bf 00 00 00 00       	mov    $0x0,%edi
   212b4:	e8 ed ec fe ff       	callq  ffa6 <ulTaskGenericNotifyTake>
   212b9:	8b 15 19 5c 11 00    	mov    0x115c19(%rip),%edx        # 136ed8 <ulTimerNotificationsReceived>
   212bf:	01 d0                	add    %edx,%eax
   212c1:	89 05 11 5c 11 00    	mov    %eax,0x115c11(%rip)        # 136ed8 <ulTimerNotificationsReceived>
   212c7:	8b 05 fb 5b 11 00    	mov    0x115bfb(%rip),%eax        # 136ec8 <ulNotifyCycleCount>
   212cd:	83 c0 01             	add    $0x1,%eax
   212d0:	89 05 f2 5b 11 00    	mov    %eax,0x115bf2(%rip)        # 136ec8 <ulNotifyCycleCount>
   212d6:	e9 84 fe ff ff       	jmpq   2115f <prvNotifiedTask+0x5f>

00000000000212db <xNotifyTaskFromISR>:
   212db:	f3 0f 1e fa          	endbr64 
   212df:	55                   	push   %rbp
   212e0:	48 89 e5             	mov    %rsp,%rbp
   212e3:	48 83 ec 20          	sub    $0x20,%rsp
   212e7:	64 48 8b 04 25 28 00 	mov    %fs:0x28,%rax
   212ee:	00 00 
   212f0:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
   212f4:	31 c0                	xor    %eax,%eax
   212f6:	48 c7 45 f0 32 00 00 	movq   $0x32,-0x10(%rbp)
   212fd:	00 
   212fe:	c7 45 ec ff 00 00 00 	movl   $0xff,-0x14(%rbp)
   21305:	48 8b 05 c4 5b 11 00 	mov    0x115bc4(%rip),%rax        # 136ed0 <xTaskToNotify>
   2130c:	48 85 c0             	test   %rax,%rax
   2130f:	75 11                	jne    21322 <xNotifyTaskFromISR+0x47>
   21311:	be 7b 02 00 00       	mov    $0x27b,%esi
   21316:	48 8d 3d 83 70 00 00 	lea    0x7083(%rip),%rdi        # 283a0 <xInterruptGivePeriod+0x5b0>
   2131d:	e8 ea 29 fe ff       	callq  3d0c <vAssertCalled>
   21322:	48 8b 05 b7 5b 11 00 	mov    0x115bb7(%rip),%rax        # 136ee0 <xTimer>
   21329:	48 85 c0             	test   %rax,%rax
   2132c:	0f 84 2e 01 00 00    	je     21460 <xNotifyTaskFromISR+0x185>
   21332:	48 8b 05 bf 5b 11 00 	mov    0x115bbf(%rip),%rax        # 136ef8 <xCallCount.2913>
   21339:	48 83 c0 01          	add    $0x1,%rax
   2133d:	48 89 05 b4 5b 11 00 	mov    %rax,0x115bb4(%rip)        # 136ef8 <xCallCount.2913>
   21344:	48 8b 05 ad 5b 11 00 	mov    0x115bad(%rip),%rax        # 136ef8 <xCallCount.2913>
   2134b:	48 39 45 f0          	cmp    %rax,-0x10(%rbp)
   2134f:	0f 8f 0b 01 00 00    	jg     21460 <xNotifyTaskFromISR+0x185>
   21355:	48 c7 05 98 5b 11 00 	movq   $0x0,0x115b98(%rip)        # 136ef8 <xCallCount.2913>
   2135c:	00 00 00 00 
   21360:	48 8b 05 99 5b 11 00 	mov    0x115b99(%rip),%rax        # 136f00 <xAPIToUse.2914>
   21367:	48 83 f8 02          	cmp    $0x2,%rax
   2136b:	0f 84 88 00 00 00    	je     213f9 <xNotifyTaskFromISR+0x11e>
   21371:	48 83 f8 02          	cmp    $0x2,%rax
   21375:	0f 8f d5 00 00 00    	jg     21450 <xNotifyTaskFromISR+0x175>
   2137b:	48 85 c0             	test   %rax,%rax
   2137e:	74 0b                	je     2138b <xNotifyTaskFromISR+0xb0>
   21380:	48 83 f8 01          	cmp    $0x1,%rax
   21384:	74 35                	je     213bb <xNotifyTaskFromISR+0xe0>
   21386:	e9 c5 00 00 00       	jmpq   21450 <xNotifyTaskFromISR+0x175>
   2138b:	48 8b 05 3e 5b 11 00 	mov    0x115b3e(%rip),%rax        # 136ed0 <xTaskToNotify>
   21392:	ba 00 00 00 00       	mov    $0x0,%edx
   21397:	be 00 00 00 00       	mov    $0x0,%esi
   2139c:	48 89 c7             	mov    %rax,%rdi
   2139f:	e8 11 f9 fe ff       	callq  10cb5 <vTaskGenericNotifyGiveFromISR>
   213a4:	48 8b 05 55 5b 11 00 	mov    0x115b55(%rip),%rax        # 136f00 <xAPIToUse.2914>
   213ab:	48 83 c0 01          	add    $0x1,%rax
   213af:	48 89 05 4a 5b 11 00 	mov    %rax,0x115b4a(%rip)        # 136f00 <xAPIToUse.2914>
   213b6:	e9 96 00 00 00       	jmpq   21451 <xNotifyTaskFromISR+0x176>
   213bb:	48 8b 05 0e 5b 11 00 	mov    0x115b0e(%rip),%rax        # 136ed0 <xTaskToNotify>
   213c2:	41 b9 00 00 00 00    	mov    $0x0,%r9d
   213c8:	41 b8 00 00 00 00    	mov    $0x0,%r8d
   213ce:	b9 02 00 00 00       	mov    $0x2,%ecx
   213d3:	ba 00 00 00 00       	mov    $0x0,%edx
   213d8:	be 00 00 00 00       	mov    $0x0,%esi
   213dd:	48 89 c7             	mov    %rax,%rdi
   213e0:	e8 7e f4 fe ff       	callq  10863 <xTaskGenericNotifyFromISR>
   213e5:	48 8b 05 14 5b 11 00 	mov    0x115b14(%rip),%rax        # 136f00 <xAPIToUse.2914>
   213ec:	48 83 c0 01          	add    $0x1,%rax
   213f0:	48 89 05 09 5b 11 00 	mov    %rax,0x115b09(%rip)        # 136f00 <xAPIToUse.2914>
   213f7:	eb 58                	jmp    21451 <xNotifyTaskFromISR+0x176>
   213f9:	8b 45 ec             	mov    -0x14(%rbp),%eax
   213fc:	89 45 e8             	mov    %eax,-0x18(%rbp)
   213ff:	48 8b 05 ca 5a 11 00 	mov    0x115aca(%rip),%rax        # 136ed0 <xTaskToNotify>
   21406:	48 8d 55 e8          	lea    -0x18(%rbp),%rdx
   2140a:	41 b9 00 00 00 00    	mov    $0x0,%r9d
   21410:	49 89 d0             	mov    %rdx,%r8
   21413:	b9 02 00 00 00       	mov    $0x2,%ecx
   21418:	ba 00 00 00 00       	mov    $0x0,%edx
   2141d:	be 00 00 00 00       	mov    $0x0,%esi
   21422:	48 89 c7             	mov    %rax,%rdi
   21425:	e8 39 f4 fe ff       	callq  10863 <xTaskGenericNotifyFromISR>
   2142a:	8b 45 e8             	mov    -0x18(%rbp),%eax
   2142d:	39 45 ec             	cmp    %eax,-0x14(%rbp)
   21430:	75 11                	jne    21443 <xNotifyTaskFromISR+0x168>
   21432:	be 9b 02 00 00       	mov    $0x29b,%esi
   21437:	48 8d 3d 62 6f 00 00 	lea    0x6f62(%rip),%rdi        # 283a0 <xInterruptGivePeriod+0x5b0>
   2143e:	e8 c9 28 fe ff       	callq  3d0c <vAssertCalled>
   21443:	48 c7 05 b2 5a 11 00 	movq   $0x0,0x115ab2(%rip)        # 136f00 <xAPIToUse.2914>
   2144a:	00 00 00 00 
   2144e:	eb 01                	jmp    21451 <xNotifyTaskFromISR+0x176>
   21450:	90                   	nop
   21451:	8b 05 85 5a 11 00    	mov    0x115a85(%rip),%eax        # 136edc <ulTimerNotificationsSent>
   21457:	83 c0 01             	add    $0x1,%eax
   2145a:	89 05 7c 5a 11 00    	mov    %eax,0x115a7c(%rip)        # 136edc <ulTimerNotificationsSent>
   21460:	90                   	nop
   21461:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   21465:	64 48 33 04 25 28 00 	xor    %fs:0x28,%rax
   2146c:	00 00 
   2146e:	74 05                	je     21475 <xNotifyTaskFromISR+0x19a>
   21470:	e8 5b 10 fe ff       	callq  24d0 <__stack_chk_fail@plt>
   21475:	c9                   	leaveq 
   21476:	c3                   	retq   

0000000000021477 <xAreTaskNotificationTasksStillRunning>:
   21477:	f3 0f 1e fa          	endbr64 
   2147b:	55                   	push   %rbp
   2147c:	48 89 e5             	mov    %rsp,%rbp
   2147f:	c7 45 fc 05 00 00 00 	movl   $0x5,-0x4(%rbp)
   21486:	8b 15 7c 5a 11 00    	mov    0x115a7c(%rip),%edx        # 136f08 <ulLastNotifyCycleCount.2926>
   2148c:	8b 05 36 5a 11 00    	mov    0x115a36(%rip),%eax        # 136ec8 <ulNotifyCycleCount>
   21492:	39 c2                	cmp    %eax,%edx
   21494:	75 0d                	jne    214a3 <xAreTaskNotificationTasksStillRunning+0x2c>
   21496:	48 c7 05 17 fc 00 00 	movq   $0x0,0xfc17(%rip)        # 310b8 <xErrorStatus>
   2149d:	00 00 00 00 
   214a1:	eb 0c                	jmp    214af <xAreTaskNotificationTasksStillRunning+0x38>
   214a3:	8b 05 1f 5a 11 00    	mov    0x115a1f(%rip),%eax        # 136ec8 <ulNotifyCycleCount>
   214a9:	89 05 59 5a 11 00    	mov    %eax,0x115a59(%rip)        # 136f08 <ulLastNotifyCycleCount.2926>
   214af:	8b 15 27 5a 11 00    	mov    0x115a27(%rip),%edx        # 136edc <ulTimerNotificationsSent>
   214b5:	8b 05 1d 5a 11 00    	mov    0x115a1d(%rip),%eax        # 136ed8 <ulTimerNotificationsReceived>
   214bb:	39 c2                	cmp    %eax,%edx
   214bd:	76 20                	jbe    214df <xAreTaskNotificationTasksStillRunning+0x68>
   214bf:	8b 15 17 5a 11 00    	mov    0x115a17(%rip),%edx        # 136edc <ulTimerNotificationsSent>
   214c5:	8b 05 0d 5a 11 00    	mov    0x115a0d(%rip),%eax        # 136ed8 <ulTimerNotificationsReceived>
   214cb:	29 c2                	sub    %eax,%edx
   214cd:	89 d0                	mov    %edx,%eax
   214cf:	39 45 fc             	cmp    %eax,-0x4(%rbp)
   214d2:	73 0b                	jae    214df <xAreTaskNotificationTasksStillRunning+0x68>
   214d4:	48 c7 05 d9 fb 00 00 	movq   $0x0,0xfbd9(%rip)        # 310b8 <xErrorStatus>
   214db:	00 00 00 00 
   214df:	48 8b 05 d2 fb 00 00 	mov    0xfbd2(%rip),%rax        # 310b8 <xErrorStatus>
   214e6:	5d                   	pop    %rbp
   214e7:	c3                   	retq   

00000000000214e8 <prvRand>:
   214e8:	f3 0f 1e fa          	endbr64 
   214ec:	55                   	push   %rbp
   214ed:	48 89 e5             	mov    %rsp,%rbp
   214f0:	48 c7 45 f0 35 4e 5a 	movq   $0x15a4e35,-0x10(%rbp)
   214f7:	01 
   214f8:	48 c7 45 f8 01 00 00 	movq   $0x1,-0x8(%rbp)
   214ff:	00 
   21500:	48 8b 05 e1 59 11 00 	mov    0x1159e1(%rip),%rax        # 136ee8 <uxNextRand>
   21507:	48 0f af 45 f0       	imul   -0x10(%rbp),%rax
   2150c:	48 89 c2             	mov    %rax,%rdx
   2150f:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   21513:	48 01 d0             	add    %rdx,%rax
   21516:	48 89 05 cb 59 11 00 	mov    %rax,0x1159cb(%rip)        # 136ee8 <uxNextRand>
   2151d:	48 8b 05 c4 59 11 00 	mov    0x1159c4(%rip),%rax        # 136ee8 <uxNextRand>
   21524:	48 c1 e8 10          	shr    $0x10,%rax
   21528:	25 ff 7f 00 00       	and    $0x7fff,%eax
   2152d:	5d                   	pop    %rbp
   2152e:	c3                   	retq   

000000000002152f <vStartTimerDemoTask>:
   2152f:	f3 0f 1e fa          	endbr64 
   21533:	55                   	push   %rbp
   21534:	48 89 e5             	mov    %rsp,%rbp
   21537:	48 83 ec 10          	sub    $0x10,%rsp
   2153b:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   2153f:	ba 15 00 00 00       	mov    $0x15,%edx
   21544:	be 00 00 00 00       	mov    $0x0,%esi
   21549:	48 8d 3d a0 5a 11 00 	lea    0x115aa0(%rip),%rdi        # 136ff0 <ucAutoReloadTimerCounters>
   21550:	e8 bb 0f fe ff       	callq  2510 <memset@plt>
   21555:	ba a8 00 00 00       	mov    $0xa8,%edx
   2155a:	be 00 00 00 00       	mov    $0x0,%esi
   2155f:	48 8d 3d da 59 11 00 	lea    0x1159da(%rip),%rdi        # 136f40 <xAutoReloadTimers>
   21566:	e8 a5 0f fe ff       	callq  2510 <memset@plt>
   2156b:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   2156f:	48 89 05 c2 5a 11 00 	mov    %rax,0x115ac2(%rip)        # 137038 <xBasePeriod>
   21576:	e8 28 02 00 00       	callq  217a3 <prvTest1_CreateTimersWithoutSchedulerRunning>
   2157b:	48 8b 05 3e fb 00 00 	mov    0xfb3e(%rip),%rax        # 310c0 <xTestStatus>
   21582:	48 85 c0             	test   %rax,%rax
   21585:	74 29                	je     215b0 <vStartTimerDemoTask+0x81>
   21587:	41 b9 00 00 00 00    	mov    $0x0,%r9d
   2158d:	41 b8 05 00 00 00    	mov    $0x5,%r8d
   21593:	b9 00 00 00 00       	mov    $0x0,%ecx
   21598:	ba 46 00 00 00       	mov    $0x46,%edx
   2159d:	48 8d 35 5c 6e 00 00 	lea    0x6e5c(%rip),%rsi        # 28400 <xInterruptGivePeriod+0x610>
   215a4:	48 8d 3d 21 00 00 00 	lea    0x21(%rip),%rdi        # 215cc <prvTimerTestTask>
   215ab:	e8 47 a7 fe ff       	callq  bcf7 <xTaskCreate>
   215b0:	90                   	nop
   215b1:	c9                   	leaveq 
   215b2:	c3                   	retq   

00000000000215b3 <vTimerDemoIncludeBacklogTests>:
   215b3:	f3 0f 1e fa          	endbr64 
   215b7:	55                   	push   %rbp
   215b8:	48 89 e5             	mov    %rsp,%rbp
   215bb:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   215bf:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   215c3:	88 05 57 59 11 00    	mov    %al,0x115957(%rip)        # 136f20 <ucIsBacklogDemoEnabled>
   215c9:	90                   	nop
   215ca:	5d                   	pop    %rbp
   215cb:	c3                   	retq   

00000000000215cc <prvTimerTestTask>:
   215cc:	f3 0f 1e fa          	endbr64 
   215d0:	55                   	push   %rbp
   215d1:	48 89 e5             	mov    %rsp,%rbp
   215d4:	48 83 ec 10          	sub    $0x10,%rsp
   215d8:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   215dc:	48 8b 15 55 5a 11 00 	mov    0x115a55(%rip),%rdx        # 137038 <xBasePeriod>
   215e3:	48 89 d0             	mov    %rdx,%rax
   215e6:	48 01 c0             	add    %rax,%rax
   215e9:	48 01 d0             	add    %rdx,%rax
   215ec:	4c 8d 05 55 1a 00 00 	lea    0x1a55(%rip),%r8        # 23048 <prvOneShotTimerCallback>
   215f3:	b9 00 00 00 00       	mov    $0x0,%ecx
   215f8:	ba 00 00 00 00       	mov    $0x0,%edx
   215fd:	48 89 c6             	mov    %rax,%rsi
   21600:	48 8d 3d 01 6e 00 00 	lea    0x6e01(%rip),%rdi        # 28408 <xInterruptGivePeriod+0x618>
   21607:	e8 b9 fd fe ff       	callq  113c5 <xTimerCreate>
   2160c:	48 89 05 f5 59 11 00 	mov    %rax,0x1159f5(%rip)        # 137008 <xOneShotTimer>
   21613:	48 8b 05 ee 59 11 00 	mov    0x1159ee(%rip),%rax        # 137008 <xOneShotTimer>
   2161a:	48 85 c0             	test   %rax,%rax
   2161d:	75 28                	jne    21647 <prvTimerTestTask+0x7b>
   2161f:	48 c7 05 96 fa 00 00 	movq   $0x0,0xfa96(%rip)        # 310c0 <xTestStatus>
   21626:	00 00 00 00 
   2162a:	48 8b 05 8f fa 00 00 	mov    0xfa8f(%rip),%rax        # 310c0 <xTestStatus>
   21631:	48 85 c0             	test   %rax,%rax
   21634:	75 11                	jne    21647 <prvTimerTestTask+0x7b>
   21636:	be b2 00 00 00       	mov    $0xb2,%esi
   2163b:	48 8d 3d d6 6d 00 00 	lea    0x6dd6(%rip),%rdi        # 28418 <xInterruptGivePeriod+0x628>
   21642:	e8 c5 26 fe ff       	callq  3d0c <vAssertCalled>
   21647:	48 8b 05 ba 59 11 00 	mov    0x1159ba(%rip),%rax        # 137008 <xOneShotTimer>
   2164e:	be 01 00 00 00       	mov    $0x1,%esi
   21653:	48 89 c7             	mov    %rax,%rdi
   21656:	e8 82 03 ff ff       	callq  119dd <vTimerSetReloadMode>
   2165b:	48 8b 05 a6 59 11 00 	mov    0x1159a6(%rip),%rax        # 137008 <xOneShotTimer>
   21662:	48 89 c7             	mov    %rax,%rdi
   21665:	e8 e5 03 ff ff       	callq  11a4f <uxTimerGetReloadMode>
   2166a:	48 83 f8 01          	cmp    $0x1,%rax
   2166e:	74 11                	je     21681 <prvTimerTestTask+0xb5>
   21670:	be bc 00 00 00       	mov    $0xbc,%esi
   21675:	48 8d 3d 9c 6d 00 00 	lea    0x6d9c(%rip),%rdi        # 28418 <xInterruptGivePeriod+0x628>
   2167c:	e8 8b 26 fe ff       	callq  3d0c <vAssertCalled>
   21681:	48 8b 05 80 59 11 00 	mov    0x115980(%rip),%rax        # 137008 <xOneShotTimer>
   21688:	be 00 00 00 00       	mov    $0x0,%esi
   2168d:	48 89 c7             	mov    %rax,%rdi
   21690:	e8 48 03 ff ff       	callq  119dd <vTimerSetReloadMode>
   21695:	48 8b 05 6c 59 11 00 	mov    0x11596c(%rip),%rax        # 137008 <xOneShotTimer>
   2169c:	48 89 c7             	mov    %rax,%rdi
   2169f:	e8 ab 03 ff ff       	callq  11a4f <uxTimerGetReloadMode>
   216a4:	48 85 c0             	test   %rax,%rax
   216a7:	74 11                	je     216ba <prvTimerTestTask+0xee>
   216a9:	be c2 00 00 00       	mov    $0xc2,%esi
   216ae:	48 8d 3d 63 6d 00 00 	lea    0x6d63(%rip),%rdi        # 28418 <xInterruptGivePeriod+0x628>
   216b5:	e8 52 26 fe ff       	callq  3d0c <vAssertCalled>
   216ba:	e8 bb 03 00 00       	callq  21a7a <prvTest2_CheckTaskAndTimersInitialState>
   216bf:	e8 65 04 00 00       	callq  21b29 <prvTest3_CheckAutoReloadExpireRates>
   216c4:	e8 88 05 00 00       	callq  21c51 <prvTest4_CheckAutoReloadTimersCanBeStopped>
   216c9:	e8 60 07 00 00       	callq  21e2e <prvTest5_CheckBasicOneShotTimerBehaviour>
   216ce:	e8 e5 08 00 00       	callq  21fb8 <prvTest6_CheckAutoReloadResetBehaviour>
   216d3:	0f b6 05 46 58 11 00 	movzbl 0x115846(%rip),%eax        # 136f20 <ucIsBacklogDemoEnabled>
   216da:	3c 01                	cmp    $0x1,%al
   216dc:	75 05                	jne    216e3 <prvTimerTestTask+0x117>
   216de:	e8 b0 0c 00 00       	callq  22393 <prvTest7_CheckBacklogBehaviour>
   216e3:	e8 0c 0e 00 00       	callq  224f4 <prvResetStartConditionsForNextIteration>
   216e8:	eb d5                	jmp    216bf <prvTimerTestTask+0xf3>

00000000000216ea <xAreTimerDemoTasksStillRunning>:
   216ea:	f3 0f 1e fa          	endbr64 
   216ee:	55                   	push   %rbp
   216ef:	48 89 e5             	mov    %rsp,%rbp
   216f2:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
   216f6:	48 8b 05 43 59 11 00 	mov    0x115943(%rip),%rax        # 137040 <xLastCycleFrequency.3087>
   216fd:	48 39 45 e8          	cmp    %rax,-0x18(%rbp)
   21701:	74 16                	je     21719 <xAreTimerDemoTasksStillRunning+0x2f>
   21703:	48 c7 05 3a 59 11 00 	movq   $0x0,0x11593a(%rip)        # 137048 <xIterationsWithoutCounterIncrement.3086>
   2170a:	00 00 00 00 
   2170e:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
   21712:	48 89 05 27 59 11 00 	mov    %rax,0x115927(%rip)        # 137040 <xLastCycleFrequency.3087>
   21719:	48 8b 15 18 59 11 00 	mov    0x115918(%rip),%rdx        # 137038 <xBasePeriod>
   21720:	48 89 d0             	mov    %rdx,%rax
   21723:	48 c1 e0 02          	shl    $0x2,%rax
   21727:	48 01 d0             	add    %rdx,%rax
   2172a:	48 c1 e0 02          	shl    $0x2,%rax
   2172e:	48 89 45 f0          	mov    %rax,-0x10(%rbp)
   21732:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
   21736:	ba 00 00 00 00       	mov    $0x0,%edx
   2173b:	48 f7 75 e8          	divq   -0x18(%rbp)
   2173f:	48 83 c0 01          	add    $0x1,%rax
   21743:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
   21747:	8b 15 03 59 11 00    	mov    0x115903(%rip),%edx        # 137050 <ulLastLoopCounter.3083>
   2174d:	8b 05 d1 57 11 00    	mov    0x1157d1(%rip),%eax        # 136f24 <ulLoopCounter>
   21753:	39 c2                	cmp    %eax,%edx
   21755:	75 2c                	jne    21783 <xAreTimerDemoTasksStillRunning+0x99>
   21757:	48 8b 05 ea 58 11 00 	mov    0x1158ea(%rip),%rax        # 137048 <xIterationsWithoutCounterIncrement.3086>
   2175e:	48 83 c0 01          	add    $0x1,%rax
   21762:	48 89 05 df 58 11 00 	mov    %rax,0x1158df(%rip)        # 137048 <xIterationsWithoutCounterIncrement.3086>
   21769:	48 8b 05 d8 58 11 00 	mov    0x1158d8(%rip),%rax        # 137048 <xIterationsWithoutCounterIncrement.3086>
   21770:	48 39 45 f8          	cmp    %rax,-0x8(%rbp)
   21774:	73 18                	jae    2178e <xAreTimerDemoTasksStillRunning+0xa4>
   21776:	48 c7 05 3f f9 00 00 	movq   $0x0,0xf93f(%rip)        # 310c0 <xTestStatus>
   2177d:	00 00 00 00 
   21781:	eb 0b                	jmp    2178e <xAreTimerDemoTasksStillRunning+0xa4>
   21783:	48 c7 05 ba 58 11 00 	movq   $0x0,0x1158ba(%rip)        # 137048 <xIterationsWithoutCounterIncrement.3086>
   2178a:	00 00 00 00 
   2178e:	8b 05 90 57 11 00    	mov    0x115790(%rip),%eax        # 136f24 <ulLoopCounter>
   21794:	89 05 b6 58 11 00    	mov    %eax,0x1158b6(%rip)        # 137050 <ulLastLoopCounter.3083>
   2179a:	48 8b 05 1f f9 00 00 	mov    0xf91f(%rip),%rax        # 310c0 <xTestStatus>
   217a1:	5d                   	pop    %rbp
   217a2:	c3                   	retq   

00000000000217a3 <prvTest1_CreateTimersWithoutSchedulerRunning>:
   217a3:	f3 0f 1e fa          	endbr64 
   217a7:	55                   	push   %rbp
   217a8:	48 89 e5             	mov    %rsp,%rbp
   217ab:	48 83 ec 10          	sub    $0x10,%rsp
   217af:	48 c7 45 f8 00 00 00 	movq   $0x0,-0x8(%rbp)
   217b6:	00 
   217b7:	e9 47 01 00 00       	jmpq   21903 <prvTest1_CreateTimersWithoutSchedulerRunning+0x160>
   217bc:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
   217c0:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   217c4:	48 8d 48 01          	lea    0x1(%rax),%rcx
   217c8:	48 8b 05 69 58 11 00 	mov    0x115869(%rip),%rax        # 137038 <xBasePeriod>
   217cf:	48 0f af c1          	imul   %rcx,%rax
   217d3:	4c 8d 05 bc 17 00 00 	lea    0x17bc(%rip),%r8        # 22f96 <prvAutoReloadTimerCallback>
   217da:	48 89 d1             	mov    %rdx,%rcx
   217dd:	ba 01 00 00 00       	mov    $0x1,%edx
   217e2:	48 89 c6             	mov    %rax,%rsi
   217e5:	48 8d 3d 72 6c 00 00 	lea    0x6c72(%rip),%rdi        # 2845e <xInterruptGivePeriod+0x66e>
   217ec:	e8 d4 fb fe ff       	callq  113c5 <xTimerCreate>
   217f1:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
   217f5:	48 8d 0c d5 00 00 00 	lea    0x0(,%rdx,8),%rcx
   217fc:	00 
   217fd:	48 8d 15 3c 57 11 00 	lea    0x11573c(%rip),%rdx        # 136f40 <xAutoReloadTimers>
   21804:	48 89 04 11          	mov    %rax,(%rcx,%rdx,1)
   21808:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   2180c:	48 8d 14 c5 00 00 00 	lea    0x0(,%rax,8),%rdx
   21813:	00 
   21814:	48 8d 05 25 57 11 00 	lea    0x115725(%rip),%rax        # 136f40 <xAutoReloadTimers>
   2181b:	48 8b 04 02          	mov    (%rdx,%rax,1),%rax
   2181f:	48 85 c0             	test   %rax,%rax
   21822:	75 31                	jne    21855 <prvTest1_CreateTimersWithoutSchedulerRunning+0xb2>
   21824:	48 c7 05 91 f8 00 00 	movq   $0x0,0xf891(%rip)        # 310c0 <xTestStatus>
   2182b:	00 00 00 00 
   2182f:	48 8b 05 8a f8 00 00 	mov    0xf88a(%rip),%rax        # 310c0 <xTestStatus>
   21836:	48 85 c0             	test   %rax,%rax
   21839:	0f 85 bf 00 00 00    	jne    218fe <prvTest1_CreateTimersWithoutSchedulerRunning+0x15b>
   2183f:	be 2a 01 00 00       	mov    $0x12a,%esi
   21844:	48 8d 3d cd 6b 00 00 	lea    0x6bcd(%rip),%rdi        # 28418 <xInterruptGivePeriod+0x628>
   2184b:	e8 bc 24 fe ff       	callq  3d0c <vAssertCalled>
   21850:	e9 a9 00 00 00       	jmpq   218fe <prvTest1_CreateTimersWithoutSchedulerRunning+0x15b>
   21855:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   21859:	48 8d 14 c5 00 00 00 	lea    0x0(,%rax,8),%rdx
   21860:	00 
   21861:	48 8d 05 d8 56 11 00 	lea    0x1156d8(%rip),%rax        # 136f40 <xAutoReloadTimers>
   21868:	48 8b 04 02          	mov    (%rdx,%rax,1),%rax
   2186c:	48 89 c7             	mov    %rax,%rdi
   2186f:	e8 81 02 ff ff       	callq  11af5 <pcTimerGetName>
   21874:	48 8d 35 e3 6b 00 00 	lea    0x6be3(%rip),%rsi        # 2845e <xInterruptGivePeriod+0x66e>
   2187b:	48 89 c7             	mov    %rax,%rdi
   2187e:	e8 cd 0c fe ff       	callq  2550 <strcmp@plt>
   21883:	85 c0                	test   %eax,%eax
   21885:	74 11                	je     21898 <prvTest1_CreateTimersWithoutSchedulerRunning+0xf5>
   21887:	be 2e 01 00 00       	mov    $0x12e,%esi
   2188c:	48 8d 3d 85 6b 00 00 	lea    0x6b85(%rip),%rdi        # 28418 <xInterruptGivePeriod+0x628>
   21893:	e8 74 24 fe ff       	callq  3d0c <vAssertCalled>
   21898:	e8 fb bf fe ff       	callq  d898 <xTaskGetTickCount>
   2189d:	48 89 c2             	mov    %rax,%rdx
   218a0:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   218a4:	48 8d 0c c5 00 00 00 	lea    0x0(,%rax,8),%rcx
   218ab:	00 
   218ac:	48 8d 05 8d 56 11 00 	lea    0x11568d(%rip),%rax        # 136f40 <xAutoReloadTimers>
   218b3:	48 8b 04 01          	mov    (%rcx,%rax,1),%rax
   218b7:	49 c7 c0 ff ff ff ff 	mov    $0xffffffffffffffff,%r8
   218be:	b9 00 00 00 00       	mov    $0x0,%ecx
   218c3:	be 01 00 00 00       	mov    $0x1,%esi
   218c8:	48 89 c7             	mov    %rax,%rdi
   218cb:	e8 65 fd fe ff       	callq  11635 <xTimerGenericCommand>
   218d0:	48 83 f8 01          	cmp    $0x1,%rax
   218d4:	74 28                	je     218fe <prvTest1_CreateTimersWithoutSchedulerRunning+0x15b>
   218d6:	48 c7 05 df f7 00 00 	movq   $0x0,0xf7df(%rip)        # 310c0 <xTestStatus>
   218dd:	00 00 00 00 
   218e1:	48 8b 05 d8 f7 00 00 	mov    0xf7d8(%rip),%rax        # 310c0 <xTestStatus>
   218e8:	48 85 c0             	test   %rax,%rax
   218eb:	75 11                	jne    218fe <prvTest1_CreateTimersWithoutSchedulerRunning+0x15b>
   218ed:	be 37 01 00 00       	mov    $0x137,%esi
   218f2:	48 8d 3d 1f 6b 00 00 	lea    0x6b1f(%rip),%rdi        # 28418 <xInterruptGivePeriod+0x628>
   218f9:	e8 0e 24 fe ff       	callq  3d0c <vAssertCalled>
   218fe:	48 83 45 f8 01       	addq   $0x1,-0x8(%rbp)
   21903:	48 83 7d f8 13       	cmpq   $0x13,-0x8(%rbp)
   21908:	0f 86 ae fe ff ff    	jbe    217bc <prvTest1_CreateTimersWithoutSchedulerRunning+0x19>
   2190e:	48 8b 4d f8          	mov    -0x8(%rbp),%rcx
   21912:	48 8b 15 1f 57 11 00 	mov    0x11571f(%rip),%rdx        # 137038 <xBasePeriod>
   21919:	48 89 d0             	mov    %rdx,%rax
   2191c:	48 c1 e0 02          	shl    $0x2,%rax
   21920:	48 01 d0             	add    %rdx,%rax
   21923:	48 c1 e0 02          	shl    $0x2,%rax
   21927:	4c 8d 05 68 16 00 00 	lea    0x1668(%rip),%r8        # 22f96 <prvAutoReloadTimerCallback>
   2192e:	ba 01 00 00 00       	mov    $0x1,%edx
   21933:	48 89 c6             	mov    %rax,%rsi
   21936:	48 8d 3d 21 6b 00 00 	lea    0x6b21(%rip),%rdi        # 2845e <xInterruptGivePeriod+0x66e>
   2193d:	e8 83 fa fe ff       	callq  113c5 <xTimerCreate>
   21942:	48 89 05 97 56 11 00 	mov    %rax,0x115697(%rip)        # 136fe0 <xAutoReloadTimers+0xa0>
   21949:	48 8b 05 90 56 11 00 	mov    0x115690(%rip),%rax        # 136fe0 <xAutoReloadTimers+0xa0>
   21950:	48 85 c0             	test   %rax,%rax
   21953:	75 2a                	jne    2197f <prvTest1_CreateTimersWithoutSchedulerRunning+0x1dc>
   21955:	48 c7 05 60 f7 00 00 	movq   $0x0,0xf760(%rip)        # 310c0 <xTestStatus>
   2195c:	00 00 00 00 
   21960:	48 8b 05 59 f7 00 00 	mov    0xf759(%rip),%rax        # 310c0 <xTestStatus>
   21967:	48 85 c0             	test   %rax,%rax
   2196a:	75 79                	jne    219e5 <prvTest1_CreateTimersWithoutSchedulerRunning+0x242>
   2196c:	be 48 01 00 00       	mov    $0x148,%esi
   21971:	48 8d 3d a0 6a 00 00 	lea    0x6aa0(%rip),%rdi        # 28418 <xInterruptGivePeriod+0x628>
   21978:	e8 8f 23 fe ff       	callq  3d0c <vAssertCalled>
   2197d:	eb 66                	jmp    219e5 <prvTest1_CreateTimersWithoutSchedulerRunning+0x242>
   2197f:	e8 14 bf fe ff       	callq  d898 <xTaskGetTickCount>
   21984:	48 89 c2             	mov    %rax,%rdx
   21987:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   2198b:	48 8d 0c c5 00 00 00 	lea    0x0(,%rax,8),%rcx
   21992:	00 
   21993:	48 8d 05 a6 55 11 00 	lea    0x1155a6(%rip),%rax        # 136f40 <xAutoReloadTimers>
   2199a:	48 8b 04 01          	mov    (%rcx,%rax,1),%rax
   2199e:	49 c7 c0 ff ff ff ff 	mov    $0xffffffffffffffff,%r8
   219a5:	b9 00 00 00 00       	mov    $0x0,%ecx
   219aa:	be 01 00 00 00       	mov    $0x1,%esi
   219af:	48 89 c7             	mov    %rax,%rdi
   219b2:	e8 7e fc fe ff       	callq  11635 <xTimerGenericCommand>
   219b7:	48 83 f8 01          	cmp    $0x1,%rax
   219bb:	75 28                	jne    219e5 <prvTest1_CreateTimersWithoutSchedulerRunning+0x242>
   219bd:	48 c7 05 f8 f6 00 00 	movq   $0x0,0xf6f8(%rip)        # 310c0 <xTestStatus>
   219c4:	00 00 00 00 
   219c8:	48 8b 05 f1 f6 00 00 	mov    0xf6f1(%rip),%rax        # 310c0 <xTestStatus>
   219cf:	48 85 c0             	test   %rax,%rax
   219d2:	75 11                	jne    219e5 <prvTest1_CreateTimersWithoutSchedulerRunning+0x242>
   219d4:	be 51 01 00 00       	mov    $0x151,%esi
   219d9:	48 8d 3d 38 6a 00 00 	lea    0x6a38(%rip),%rdi        # 28418 <xInterruptGivePeriod+0x628>
   219e0:	e8 27 23 fe ff       	callq  3d0c <vAssertCalled>
   219e5:	4c 8d 05 d7 16 00 00 	lea    0x16d7(%rip),%r8        # 230c3 <prvISRAutoReloadTimerCallback>
   219ec:	b9 00 00 00 00       	mov    $0x0,%ecx
   219f1:	ba 01 00 00 00       	mov    $0x1,%edx
   219f6:	be ff ff 00 00       	mov    $0xffff,%esi
   219fb:	48 8d 3d 65 6a 00 00 	lea    0x6a65(%rip),%rdi        # 28467 <xInterruptGivePeriod+0x677>
   21a02:	e8 be f9 fe ff       	callq  113c5 <xTimerCreate>
   21a07:	48 89 05 0a 56 11 00 	mov    %rax,0x11560a(%rip)        # 137018 <xISRAutoReloadTimer>
   21a0e:	4c 8d 05 cd 16 00 00 	lea    0x16cd(%rip),%r8        # 230e2 <prvISROneShotTimerCallback>
   21a15:	b9 00 00 00 00       	mov    $0x0,%ecx
   21a1a:	ba 00 00 00 00       	mov    $0x0,%edx
   21a1f:	be ff ff 00 00       	mov    $0xffff,%esi
   21a24:	48 8d 3d 43 6a 00 00 	lea    0x6a43(%rip),%rdi        # 2846e <xInterruptGivePeriod+0x67e>
   21a2b:	e8 95 f9 fe ff       	callq  113c5 <xTimerCreate>
   21a30:	48 89 05 f1 55 11 00 	mov    %rax,0x1155f1(%rip)        # 137028 <xISROneShotTimer>
   21a37:	48 8b 05 da 55 11 00 	mov    0x1155da(%rip),%rax        # 137018 <xISRAutoReloadTimer>
   21a3e:	48 85 c0             	test   %rax,%rax
   21a41:	74 0c                	je     21a4f <prvTest1_CreateTimersWithoutSchedulerRunning+0x2ac>
   21a43:	48 8b 05 de 55 11 00 	mov    0x1155de(%rip),%rax        # 137028 <xISROneShotTimer>
   21a4a:	48 85 c0             	test   %rax,%rax
   21a4d:	75 28                	jne    21a77 <prvTest1_CreateTimersWithoutSchedulerRunning+0x2d4>
   21a4f:	48 c7 05 66 f6 00 00 	movq   $0x0,0xf666(%rip)        # 310c0 <xTestStatus>
   21a56:	00 00 00 00 
   21a5a:	48 8b 05 5f f6 00 00 	mov    0xf65f(%rip),%rax        # 310c0 <xTestStatus>
   21a61:	48 85 c0             	test   %rax,%rax
   21a64:	75 11                	jne    21a77 <prvTest1_CreateTimersWithoutSchedulerRunning+0x2d4>
   21a66:	be 66 01 00 00       	mov    $0x166,%esi
   21a6b:	48 8d 3d a6 69 00 00 	lea    0x69a6(%rip),%rdi        # 28418 <xInterruptGivePeriod+0x628>
   21a72:	e8 95 22 fe ff       	callq  3d0c <vAssertCalled>
   21a77:	90                   	nop
   21a78:	c9                   	leaveq 
   21a79:	c3                   	retq   

0000000000021a7a <prvTest2_CheckTaskAndTimersInitialState>:
   21a7a:	f3 0f 1e fa          	endbr64 
   21a7e:	55                   	push   %rbp
   21a7f:	48 89 e5             	mov    %rsp,%rbp
   21a82:	48 83 ec 10          	sub    $0x10,%rsp
   21a86:	c6 45 ff 00          	movb   $0x0,-0x1(%rbp)
   21a8a:	eb 58                	jmp    21ae4 <prvTest2_CheckTaskAndTimersInitialState+0x6a>
   21a8c:	0f b6 45 ff          	movzbl -0x1(%rbp),%eax
   21a90:	48 98                	cltq   
   21a92:	48 8d 14 c5 00 00 00 	lea    0x0(,%rax,8),%rdx
   21a99:	00 
   21a9a:	48 8d 05 9f 54 11 00 	lea    0x11549f(%rip),%rax        # 136f40 <xAutoReloadTimers>
   21aa1:	48 8b 04 02          	mov    (%rdx,%rax,1),%rax
   21aa5:	48 89 c7             	mov    %rax,%rdi
   21aa8:	e8 90 08 ff ff       	callq  1233d <xTimerIsTimerActive>
   21aad:	48 85 c0             	test   %rax,%rax
   21ab0:	75 28                	jne    21ada <prvTest2_CheckTaskAndTimersInitialState+0x60>
   21ab2:	48 c7 05 03 f6 00 00 	movq   $0x0,0xf603(%rip)        # 310c0 <xTestStatus>
   21ab9:	00 00 00 00 
   21abd:	48 8b 05 fc f5 00 00 	mov    0xf5fc(%rip),%rax        # 310c0 <xTestStatus>
   21ac4:	48 85 c0             	test   %rax,%rax
   21ac7:	75 11                	jne    21ada <prvTest2_CheckTaskAndTimersInitialState+0x60>
   21ac9:	be 7b 01 00 00       	mov    $0x17b,%esi
   21ace:	48 8d 3d 43 69 00 00 	lea    0x6943(%rip),%rdi        # 28418 <xInterruptGivePeriod+0x628>
   21ad5:	e8 32 22 fe ff       	callq  3d0c <vAssertCalled>
   21ada:	0f b6 45 ff          	movzbl -0x1(%rbp),%eax
   21ade:	83 c0 01             	add    $0x1,%eax
   21ae1:	88 45 ff             	mov    %al,-0x1(%rbp)
   21ae4:	80 7d ff 13          	cmpb   $0x13,-0x1(%rbp)
   21ae8:	76 a2                	jbe    21a8c <prvTest2_CheckTaskAndTimersInitialState+0x12>
   21aea:	48 8b 05 ef 54 11 00 	mov    0x1154ef(%rip),%rax        # 136fe0 <xAutoReloadTimers+0xa0>
   21af1:	48 89 c7             	mov    %rax,%rdi
   21af4:	e8 44 08 ff ff       	callq  1233d <xTimerIsTimerActive>
   21af9:	48 85 c0             	test   %rax,%rax
   21afc:	74 28                	je     21b26 <prvTest2_CheckTaskAndTimersInitialState+0xac>
   21afe:	48 c7 05 b7 f5 00 00 	movq   $0x0,0xf5b7(%rip)        # 310c0 <xTestStatus>
   21b05:	00 00 00 00 
   21b09:	48 8b 05 b0 f5 00 00 	mov    0xf5b0(%rip),%rax        # 310c0 <xTestStatus>
   21b10:	48 85 c0             	test   %rax,%rax
   21b13:	75 11                	jne    21b26 <prvTest2_CheckTaskAndTimersInitialState+0xac>
   21b15:	be 82 01 00 00       	mov    $0x182,%esi
   21b1a:	48 8d 3d f7 68 00 00 	lea    0x68f7(%rip),%rdi        # 28418 <xInterruptGivePeriod+0x628>
   21b21:	e8 e6 21 fe ff       	callq  3d0c <vAssertCalled>
   21b26:	90                   	nop
   21b27:	c9                   	leaveq 
   21b28:	c3                   	retq   

0000000000021b29 <prvTest3_CheckAutoReloadExpireRates>:
   21b29:	f3 0f 1e fa          	endbr64 
   21b2d:	55                   	push   %rbp
   21b2e:	48 89 e5             	mov    %rsp,%rbp
   21b31:	48 83 ec 30          	sub    $0x30,%rsp
   21b35:	bf 00 00 00 00       	mov    $0x0,%edi
   21b3a:	e8 6a ae fe ff       	callq  c9a9 <uxTaskPriorityGet>
   21b3f:	48 89 45 e0          	mov    %rax,-0x20(%rbp)
   21b43:	be 06 00 00 00       	mov    $0x6,%esi
   21b48:	bf 00 00 00 00       	mov    $0x0,%edi
   21b4d:	e8 ea ae fe ff       	callq  ca3c <vTaskPrioritySet>
   21b52:	48 8b 15 df 54 11 00 	mov    0x1154df(%rip),%rdx        # 137038 <xBasePeriod>
   21b59:	48 89 d0             	mov    %rdx,%rax
   21b5c:	48 c1 e0 02          	shl    $0x2,%rax
   21b60:	48 01 d0             	add    %rdx,%rax
   21b63:	48 c1 e0 02          	shl    $0x2,%rax
   21b67:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
   21b6b:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
   21b6f:	48 89 c7             	mov    %rax,%rdi
   21b72:	e8 2b ac fe ff       	callq  c7a2 <vTaskDelay>
   21b77:	c6 45 dd 00          	movb   $0x0,-0x23(%rbp)
   21b7b:	e9 97 00 00 00       	jmpq   21c17 <prvTest3_CheckAutoReloadExpireRates+0xee>
   21b80:	0f b6 45 dd          	movzbl -0x23(%rbp),%eax
   21b84:	48 8d 50 01          	lea    0x1(%rax),%rdx
   21b88:	48 8b 05 a9 54 11 00 	mov    0x1154a9(%rip),%rax        # 137038 <xBasePeriod>
   21b8f:	48 0f af c2          	imul   %rdx,%rax
   21b93:	48 89 45 f0          	mov    %rax,-0x10(%rbp)
   21b97:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
   21b9b:	ba 00 00 00 00       	mov    $0x0,%edx
   21ba0:	48 f7 75 f0          	divq   -0x10(%rbp)
   21ba4:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
   21ba8:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   21bac:	88 45 de             	mov    %al,-0x22(%rbp)
   21baf:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   21bb3:	83 e8 01             	sub    $0x1,%eax
   21bb6:	88 45 df             	mov    %al,-0x21(%rbp)
   21bb9:	0f b6 45 dd          	movzbl -0x23(%rbp),%eax
   21bbd:	48 98                	cltq   
   21bbf:	48 8d 15 2a 54 11 00 	lea    0x11542a(%rip),%rdx        # 136ff0 <ucAutoReloadTimerCounters>
   21bc6:	0f b6 04 10          	movzbl (%rax,%rdx,1),%eax
   21bca:	38 45 df             	cmp    %al,-0x21(%rbp)
   21bcd:	77 16                	ja     21be5 <prvTest3_CheckAutoReloadExpireRates+0xbc>
   21bcf:	0f b6 45 dd          	movzbl -0x23(%rbp),%eax
   21bd3:	48 98                	cltq   
   21bd5:	48 8d 15 14 54 11 00 	lea    0x115414(%rip),%rdx        # 136ff0 <ucAutoReloadTimerCounters>
   21bdc:	0f b6 04 10          	movzbl (%rax,%rdx,1),%eax
   21be0:	38 45 de             	cmp    %al,-0x22(%rbp)
   21be3:	73 28                	jae    21c0d <prvTest3_CheckAutoReloadExpireRates+0xe4>
   21be5:	48 c7 05 d0 f4 00 00 	movq   $0x0,0xf4d0(%rip)        # 310c0 <xTestStatus>
   21bec:	00 00 00 00 
   21bf0:	48 8b 05 c9 f4 00 00 	mov    0xf4c9(%rip),%rax        # 310c0 <xTestStatus>
   21bf7:	48 85 c0             	test   %rax,%rax
   21bfa:	75 11                	jne    21c0d <prvTest3_CheckAutoReloadExpireRates+0xe4>
   21bfc:	be a9 01 00 00       	mov    $0x1a9,%esi
   21c01:	48 8d 3d 10 68 00 00 	lea    0x6810(%rip),%rdi        # 28418 <xInterruptGivePeriod+0x628>
   21c08:	e8 ff 20 fe ff       	callq  3d0c <vAssertCalled>
   21c0d:	0f b6 45 dd          	movzbl -0x23(%rbp),%eax
   21c11:	83 c0 01             	add    $0x1,%eax
   21c14:	88 45 dd             	mov    %al,-0x23(%rbp)
   21c17:	80 7d dd 13          	cmpb   $0x13,-0x23(%rbp)
   21c1b:	0f 86 5f ff ff ff    	jbe    21b80 <prvTest3_CheckAutoReloadExpireRates+0x57>
   21c21:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
   21c25:	48 89 c6             	mov    %rax,%rsi
   21c28:	bf 00 00 00 00       	mov    $0x0,%edi
   21c2d:	e8 0a ae fe ff       	callq  ca3c <vTaskPrioritySet>
   21c32:	48 8b 05 87 f4 00 00 	mov    0xf487(%rip),%rax        # 310c0 <xTestStatus>
   21c39:	48 83 f8 01          	cmp    $0x1,%rax
   21c3d:	75 0f                	jne    21c4e <prvTest3_CheckAutoReloadExpireRates+0x125>
   21c3f:	8b 05 df 52 11 00    	mov    0x1152df(%rip),%eax        # 136f24 <ulLoopCounter>
   21c45:	83 c0 01             	add    $0x1,%eax
   21c48:	89 05 d6 52 11 00    	mov    %eax,0x1152d6(%rip)        # 136f24 <ulLoopCounter>
   21c4e:	90                   	nop
   21c4f:	c9                   	leaveq 
   21c50:	c3                   	retq   

0000000000021c51 <prvTest4_CheckAutoReloadTimersCanBeStopped>:
   21c51:	f3 0f 1e fa          	endbr64 
   21c55:	55                   	push   %rbp
   21c56:	48 89 e5             	mov    %rsp,%rbp
   21c59:	48 83 ec 10          	sub    $0x10,%rsp
   21c5d:	c6 45 ff 00          	movb   $0x0,-0x1(%rbp)
   21c61:	e9 dc 00 00 00       	jmpq   21d42 <prvTest4_CheckAutoReloadTimersCanBeStopped+0xf1>
   21c66:	0f b6 45 ff          	movzbl -0x1(%rbp),%eax
   21c6a:	48 98                	cltq   
   21c6c:	48 8d 14 c5 00 00 00 	lea    0x0(,%rax,8),%rdx
   21c73:	00 
   21c74:	48 8d 05 c5 52 11 00 	lea    0x1152c5(%rip),%rax        # 136f40 <xAutoReloadTimers>
   21c7b:	48 8b 04 02          	mov    (%rdx,%rax,1),%rax
   21c7f:	48 89 c7             	mov    %rax,%rdi
   21c82:	e8 b6 06 ff ff       	callq  1233d <xTimerIsTimerActive>
   21c87:	48 85 c0             	test   %rax,%rax
   21c8a:	75 28                	jne    21cb4 <prvTest4_CheckAutoReloadTimersCanBeStopped+0x63>
   21c8c:	48 c7 05 29 f4 00 00 	movq   $0x0,0xf429(%rip)        # 310c0 <xTestStatus>
   21c93:	00 00 00 00 
   21c97:	48 8b 05 22 f4 00 00 	mov    0xf422(%rip),%rax        # 310c0 <xTestStatus>
   21c9e:	48 85 c0             	test   %rax,%rax
   21ca1:	75 11                	jne    21cb4 <prvTest4_CheckAutoReloadTimersCanBeStopped+0x63>
   21ca3:	be c7 01 00 00       	mov    $0x1c7,%esi
   21ca8:	48 8d 3d 69 67 00 00 	lea    0x6769(%rip),%rdi        # 28418 <xInterruptGivePeriod+0x628>
   21caf:	e8 58 20 fe ff       	callq  3d0c <vAssertCalled>
   21cb4:	0f b6 45 ff          	movzbl -0x1(%rbp),%eax
   21cb8:	48 98                	cltq   
   21cba:	48 8d 14 c5 00 00 00 	lea    0x0(,%rax,8),%rdx
   21cc1:	00 
   21cc2:	48 8d 05 77 52 11 00 	lea    0x115277(%rip),%rax        # 136f40 <xAutoReloadTimers>
   21cc9:	48 8b 04 02          	mov    (%rdx,%rax,1),%rax
   21ccd:	41 b8 00 00 00 00    	mov    $0x0,%r8d
   21cd3:	b9 00 00 00 00       	mov    $0x0,%ecx
   21cd8:	ba 00 00 00 00       	mov    $0x0,%edx
   21cdd:	be 03 00 00 00       	mov    $0x3,%esi
   21ce2:	48 89 c7             	mov    %rax,%rdi
   21ce5:	e8 4b f9 fe ff       	callq  11635 <xTimerGenericCommand>
   21cea:	0f b6 45 ff          	movzbl -0x1(%rbp),%eax
   21cee:	48 98                	cltq   
   21cf0:	48 8d 14 c5 00 00 00 	lea    0x0(,%rax,8),%rdx
   21cf7:	00 
   21cf8:	48 8d 05 41 52 11 00 	lea    0x115241(%rip),%rax        # 136f40 <xAutoReloadTimers>
   21cff:	48 8b 04 02          	mov    (%rdx,%rax,1),%rax
   21d03:	48 89 c7             	mov    %rax,%rdi
   21d06:	e8 32 06 ff ff       	callq  1233d <xTimerIsTimerActive>
   21d0b:	48 85 c0             	test   %rax,%rax
   21d0e:	74 28                	je     21d38 <prvTest4_CheckAutoReloadTimersCanBeStopped+0xe7>
   21d10:	48 c7 05 a5 f3 00 00 	movq   $0x0,0xf3a5(%rip)        # 310c0 <xTestStatus>
   21d17:	00 00 00 00 
   21d1b:	48 8b 05 9e f3 00 00 	mov    0xf39e(%rip),%rax        # 310c0 <xTestStatus>
   21d22:	48 85 c0             	test   %rax,%rax
   21d25:	75 11                	jne    21d38 <prvTest4_CheckAutoReloadTimersCanBeStopped+0xe7>
   21d27:	be d3 01 00 00       	mov    $0x1d3,%esi
   21d2c:	48 8d 3d e5 66 00 00 	lea    0x66e5(%rip),%rdi        # 28418 <xInterruptGivePeriod+0x628>
   21d33:	e8 d4 1f fe ff       	callq  3d0c <vAssertCalled>
   21d38:	0f b6 45 ff          	movzbl -0x1(%rbp),%eax
   21d3c:	83 c0 01             	add    $0x1,%eax
   21d3f:	88 45 ff             	mov    %al,-0x1(%rbp)
   21d42:	80 7d ff 13          	cmpb   $0x13,-0x1(%rbp)
   21d46:	0f 86 1a ff ff ff    	jbe    21c66 <prvTest4_CheckAutoReloadTimersCanBeStopped+0x15>
   21d4c:	e8 7e 10 ff ff       	callq  12dcf <vPortEnterCritical>
   21d51:	0f b6 05 ac 52 11 00 	movzbl 0x1152ac(%rip),%eax        # 137004 <ucAutoReloadTimerCounters+0x14>
   21d58:	84 c0                	test   %al,%al
   21d5a:	74 28                	je     21d84 <prvTest4_CheckAutoReloadTimersCanBeStopped+0x133>
   21d5c:	48 c7 05 59 f3 00 00 	movq   $0x0,0xf359(%rip)        # 310c0 <xTestStatus>
   21d63:	00 00 00 00 
   21d67:	48 8b 05 52 f3 00 00 	mov    0xf352(%rip),%rax        # 310c0 <xTestStatus>
   21d6e:	48 85 c0             	test   %rax,%rax
   21d71:	75 11                	jne    21d84 <prvTest4_CheckAutoReloadTimersCanBeStopped+0x133>
   21d73:	be e0 01 00 00       	mov    $0x1e0,%esi
   21d78:	48 8d 3d 99 66 00 00 	lea    0x6699(%rip),%rdi        # 28418 <xInterruptGivePeriod+0x628>
   21d7f:	e8 88 1f fe ff       	callq  3d0c <vAssertCalled>
   21d84:	ba 15 00 00 00       	mov    $0x15,%edx
   21d89:	be 00 00 00 00       	mov    $0x0,%esi
   21d8e:	48 8d 3d 5b 52 11 00 	lea    0x11525b(%rip),%rdi        # 136ff0 <ucAutoReloadTimerCounters>
   21d95:	e8 76 07 fe ff       	callq  2510 <memset@plt>
   21d9a:	e8 5e 10 ff ff       	callq  12dfd <vPortExitCritical>
   21d9f:	48 8b 15 92 52 11 00 	mov    0x115292(%rip),%rdx        # 137038 <xBasePeriod>
   21da6:	48 89 d0             	mov    %rdx,%rax
   21da9:	48 c1 e0 02          	shl    $0x2,%rax
   21dad:	48 01 d0             	add    %rdx,%rax
   21db0:	48 c1 e0 02          	shl    $0x2,%rax
   21db4:	48 89 c7             	mov    %rax,%rdi
   21db7:	e8 e6 a9 fe ff       	callq  c7a2 <vTaskDelay>
   21dbc:	c6 45 ff 00          	movb   $0x0,-0x1(%rbp)
   21dc0:	eb 47                	jmp    21e09 <prvTest4_CheckAutoReloadTimersCanBeStopped+0x1b8>
   21dc2:	0f b6 45 ff          	movzbl -0x1(%rbp),%eax
   21dc6:	48 98                	cltq   
   21dc8:	48 8d 15 21 52 11 00 	lea    0x115221(%rip),%rdx        # 136ff0 <ucAutoReloadTimerCounters>
   21dcf:	0f b6 04 10          	movzbl (%rax,%rdx,1),%eax
   21dd3:	84 c0                	test   %al,%al
   21dd5:	74 28                	je     21dff <prvTest4_CheckAutoReloadTimersCanBeStopped+0x1ae>
   21dd7:	48 c7 05 de f2 00 00 	movq   $0x0,0xf2de(%rip)        # 310c0 <xTestStatus>
   21dde:	00 00 00 00 
   21de2:	48 8b 05 d7 f2 00 00 	mov    0xf2d7(%rip),%rax        # 310c0 <xTestStatus>
   21de9:	48 85 c0             	test   %rax,%rax
   21dec:	75 11                	jne    21dff <prvTest4_CheckAutoReloadTimersCanBeStopped+0x1ae>
   21dee:	be f1 01 00 00       	mov    $0x1f1,%esi
   21df3:	48 8d 3d 1e 66 00 00 	lea    0x661e(%rip),%rdi        # 28418 <xInterruptGivePeriod+0x628>
   21dfa:	e8 0d 1f fe ff       	callq  3d0c <vAssertCalled>
   21dff:	0f b6 45 ff          	movzbl -0x1(%rbp),%eax
   21e03:	83 c0 01             	add    $0x1,%eax
   21e06:	88 45 ff             	mov    %al,-0x1(%rbp)
   21e09:	80 7d ff 13          	cmpb   $0x13,-0x1(%rbp)
   21e0d:	76 b3                	jbe    21dc2 <prvTest4_CheckAutoReloadTimersCanBeStopped+0x171>
   21e0f:	48 8b 05 aa f2 00 00 	mov    0xf2aa(%rip),%rax        # 310c0 <xTestStatus>
   21e16:	48 83 f8 01          	cmp    $0x1,%rax
   21e1a:	75 0f                	jne    21e2b <prvTest4_CheckAutoReloadTimersCanBeStopped+0x1da>
   21e1c:	8b 05 02 51 11 00    	mov    0x115102(%rip),%eax        # 136f24 <ulLoopCounter>
   21e22:	83 c0 01             	add    $0x1,%eax
   21e25:	89 05 f9 50 11 00    	mov    %eax,0x1150f9(%rip)        # 136f24 <ulLoopCounter>
   21e2b:	90                   	nop
   21e2c:	c9                   	leaveq 
   21e2d:	c3                   	retq   

0000000000021e2e <prvTest5_CheckBasicOneShotTimerBehaviour>:
   21e2e:	f3 0f 1e fa          	endbr64 
   21e32:	55                   	push   %rbp
   21e33:	48 89 e5             	mov    %rsp,%rbp
   21e36:	48 8b 05 cb 51 11 00 	mov    0x1151cb(%rip),%rax        # 137008 <xOneShotTimer>
   21e3d:	48 89 c7             	mov    %rax,%rdi
   21e40:	e8 f8 04 ff ff       	callq  1233d <xTimerIsTimerActive>
   21e45:	48 85 c0             	test   %rax,%rax
   21e48:	74 28                	je     21e72 <prvTest5_CheckBasicOneShotTimerBehaviour+0x44>
   21e4a:	48 c7 05 6b f2 00 00 	movq   $0x0,0xf26b(%rip)        # 310c0 <xTestStatus>
   21e51:	00 00 00 00 
   21e55:	48 8b 05 64 f2 00 00 	mov    0xf264(%rip),%rax        # 310c0 <xTestStatus>
   21e5c:	48 85 c0             	test   %rax,%rax
   21e5f:	75 11                	jne    21e72 <prvTest5_CheckBasicOneShotTimerBehaviour+0x44>
   21e61:	be 07 02 00 00       	mov    $0x207,%esi
   21e66:	48 8d 3d ab 65 00 00 	lea    0x65ab(%rip),%rdi        # 28418 <xInterruptGivePeriod+0x628>
   21e6d:	e8 9a 1e fe ff       	callq  3d0c <vAssertCalled>
   21e72:	0f b6 05 97 51 11 00 	movzbl 0x115197(%rip),%eax        # 137010 <ucOneShotTimerCounter>
   21e79:	84 c0                	test   %al,%al
   21e7b:	74 28                	je     21ea5 <prvTest5_CheckBasicOneShotTimerBehaviour+0x77>
   21e7d:	48 c7 05 38 f2 00 00 	movq   $0x0,0xf238(%rip)        # 310c0 <xTestStatus>
   21e84:	00 00 00 00 
   21e88:	48 8b 05 31 f2 00 00 	mov    0xf231(%rip),%rax        # 310c0 <xTestStatus>
   21e8f:	48 85 c0             	test   %rax,%rax
   21e92:	75 11                	jne    21ea5 <prvTest5_CheckBasicOneShotTimerBehaviour+0x77>
   21e94:	be 0d 02 00 00       	mov    $0x20d,%esi
   21e99:	48 8d 3d 78 65 00 00 	lea    0x6578(%rip),%rdi        # 28418 <xInterruptGivePeriod+0x628>
   21ea0:	e8 67 1e fe ff       	callq  3d0c <vAssertCalled>
   21ea5:	e8 ee b9 fe ff       	callq  d898 <xTaskGetTickCount>
   21eaa:	48 89 c2             	mov    %rax,%rdx
   21ead:	48 8b 05 54 51 11 00 	mov    0x115154(%rip),%rax        # 137008 <xOneShotTimer>
   21eb4:	41 b8 00 00 00 00    	mov    $0x0,%r8d
   21eba:	b9 00 00 00 00       	mov    $0x0,%ecx
   21ebf:	be 01 00 00 00       	mov    $0x1,%esi
   21ec4:	48 89 c7             	mov    %rax,%rdi
   21ec7:	e8 69 f7 fe ff       	callq  11635 <xTimerGenericCommand>
   21ecc:	48 8b 05 35 51 11 00 	mov    0x115135(%rip),%rax        # 137008 <xOneShotTimer>
   21ed3:	48 89 c7             	mov    %rax,%rdi
   21ed6:	e8 62 04 ff ff       	callq  1233d <xTimerIsTimerActive>
   21edb:	48 85 c0             	test   %rax,%rax
   21ede:	75 28                	jne    21f08 <prvTest5_CheckBasicOneShotTimerBehaviour+0xda>
   21ee0:	48 c7 05 d5 f1 00 00 	movq   $0x0,0xf1d5(%rip)        # 310c0 <xTestStatus>
   21ee7:	00 00 00 00 
   21eeb:	48 8b 05 ce f1 00 00 	mov    0xf1ce(%rip),%rax        # 310c0 <xTestStatus>
   21ef2:	48 85 c0             	test   %rax,%rax
   21ef5:	75 11                	jne    21f08 <prvTest5_CheckBasicOneShotTimerBehaviour+0xda>
   21ef7:	be 16 02 00 00       	mov    $0x216,%esi
   21efc:	48 8d 3d 15 65 00 00 	lea    0x6515(%rip),%rdi        # 28418 <xInterruptGivePeriod+0x628>
   21f03:	e8 04 1e fe ff       	callq  3d0c <vAssertCalled>
   21f08:	48 8b 15 29 51 11 00 	mov    0x115129(%rip),%rdx        # 137038 <xBasePeriod>
   21f0f:	48 89 d0             	mov    %rdx,%rax
   21f12:	48 c1 e0 03          	shl    $0x3,%rax
   21f16:	48 01 d0             	add    %rdx,%rax
   21f19:	48 89 c7             	mov    %rax,%rdi
   21f1c:	e8 81 a8 fe ff       	callq  c7a2 <vTaskDelay>
   21f21:	48 8b 05 e0 50 11 00 	mov    0x1150e0(%rip),%rax        # 137008 <xOneShotTimer>
   21f28:	48 89 c7             	mov    %rax,%rdi
   21f2b:	e8 0d 04 ff ff       	callq  1233d <xTimerIsTimerActive>
   21f30:	48 85 c0             	test   %rax,%rax
   21f33:	74 28                	je     21f5d <prvTest5_CheckBasicOneShotTimerBehaviour+0x12f>
   21f35:	48 c7 05 80 f1 00 00 	movq   $0x0,0xf180(%rip)        # 310c0 <xTestStatus>
   21f3c:	00 00 00 00 
   21f40:	48 8b 05 79 f1 00 00 	mov    0xf179(%rip),%rax        # 310c0 <xTestStatus>
   21f47:	48 85 c0             	test   %rax,%rax
   21f4a:	75 11                	jne    21f5d <prvTest5_CheckBasicOneShotTimerBehaviour+0x12f>
   21f4c:	be 21 02 00 00       	mov    $0x221,%esi
   21f51:	48 8d 3d c0 64 00 00 	lea    0x64c0(%rip),%rdi        # 28418 <xInterruptGivePeriod+0x628>
   21f58:	e8 af 1d fe ff       	callq  3d0c <vAssertCalled>
   21f5d:	0f b6 05 ac 50 11 00 	movzbl 0x1150ac(%rip),%eax        # 137010 <ucOneShotTimerCounter>
   21f64:	3c 01                	cmp    $0x1,%al
   21f66:	74 2a                	je     21f92 <prvTest5_CheckBasicOneShotTimerBehaviour+0x164>
   21f68:	48 c7 05 4d f1 00 00 	movq   $0x0,0xf14d(%rip)        # 310c0 <xTestStatus>
   21f6f:	00 00 00 00 
   21f73:	48 8b 05 46 f1 00 00 	mov    0xf146(%rip),%rax        # 310c0 <xTestStatus>
   21f7a:	48 85 c0             	test   %rax,%rax
   21f7d:	75 1a                	jne    21f99 <prvTest5_CheckBasicOneShotTimerBehaviour+0x16b>
   21f7f:	be 27 02 00 00       	mov    $0x227,%esi
   21f84:	48 8d 3d 8d 64 00 00 	lea    0x648d(%rip),%rdi        # 28418 <xInterruptGivePeriod+0x628>
   21f8b:	e8 7c 1d fe ff       	callq  3d0c <vAssertCalled>
   21f90:	eb 07                	jmp    21f99 <prvTest5_CheckBasicOneShotTimerBehaviour+0x16b>
   21f92:	c6 05 77 50 11 00 00 	movb   $0x0,0x115077(%rip)        # 137010 <ucOneShotTimerCounter>
   21f99:	48 8b 05 20 f1 00 00 	mov    0xf120(%rip),%rax        # 310c0 <xTestStatus>
   21fa0:	48 83 f8 01          	cmp    $0x1,%rax
   21fa4:	75 0f                	jne    21fb5 <prvTest5_CheckBasicOneShotTimerBehaviour+0x187>
   21fa6:	8b 05 78 4f 11 00    	mov    0x114f78(%rip),%eax        # 136f24 <ulLoopCounter>
   21fac:	83 c0 01             	add    $0x1,%eax
   21faf:	89 05 6f 4f 11 00    	mov    %eax,0x114f6f(%rip)        # 136f24 <ulLoopCounter>
   21fb5:	90                   	nop
   21fb6:	5d                   	pop    %rbp
   21fb7:	c3                   	retq   

0000000000021fb8 <prvTest6_CheckAutoReloadResetBehaviour>:
   21fb8:	f3 0f 1e fa          	endbr64 
   21fbc:	55                   	push   %rbp
   21fbd:	48 89 e5             	mov    %rsp,%rbp
   21fc0:	48 83 ec 10          	sub    $0x10,%rsp
   21fc4:	e8 cf b8 fe ff       	callq  d898 <xTaskGetTickCount>
   21fc9:	48 89 c2             	mov    %rax,%rdx
   21fcc:	48 8b 05 35 50 11 00 	mov    0x115035(%rip),%rax        # 137008 <xOneShotTimer>
   21fd3:	41 b8 00 00 00 00    	mov    $0x0,%r8d
   21fd9:	b9 00 00 00 00       	mov    $0x0,%ecx
   21fde:	be 01 00 00 00       	mov    $0x1,%esi
   21fe3:	48 89 c7             	mov    %rax,%rdi
   21fe6:	e8 4a f6 fe ff       	callq  11635 <xTimerGenericCommand>
   21feb:	48 8b 05 16 50 11 00 	mov    0x115016(%rip),%rax        # 137008 <xOneShotTimer>
   21ff2:	48 89 c7             	mov    %rax,%rdi
   21ff5:	e8 43 03 ff ff       	callq  1233d <xTimerIsTimerActive>
   21ffa:	48 85 c0             	test   %rax,%rax
   21ffd:	75 28                	jne    22027 <prvTest6_CheckAutoReloadResetBehaviour+0x6f>
   21fff:	48 c7 05 b6 f0 00 00 	movq   $0x0,0xf0b6(%rip)        # 310c0 <xTestStatus>
   22006:	00 00 00 00 
   2200a:	48 8b 05 af f0 00 00 	mov    0xf0af(%rip),%rax        # 310c0 <xTestStatus>
   22011:	48 85 c0             	test   %rax,%rax
   22014:	75 11                	jne    22027 <prvTest6_CheckAutoReloadResetBehaviour+0x6f>
   22016:	be 44 02 00 00       	mov    $0x244,%esi
   2201b:	48 8d 3d f6 63 00 00 	lea    0x63f6(%rip),%rdi        # 28418 <xInterruptGivePeriod+0x628>
   22022:	e8 e5 1c fe ff       	callq  3d0c <vAssertCalled>
   22027:	e8 6c b8 fe ff       	callq  d898 <xTaskGetTickCount>
   2202c:	48 89 c2             	mov    %rax,%rdx
   2202f:	48 8b 05 a2 4f 11 00 	mov    0x114fa2(%rip),%rax        # 136fd8 <xAutoReloadTimers+0x98>
   22036:	41 b8 00 00 00 00    	mov    $0x0,%r8d
   2203c:	b9 00 00 00 00       	mov    $0x0,%ecx
   22041:	be 01 00 00 00       	mov    $0x1,%esi
   22046:	48 89 c7             	mov    %rax,%rdi
   22049:	e8 e7 f5 fe ff       	callq  11635 <xTimerGenericCommand>
   2204e:	48 8b 05 83 4f 11 00 	mov    0x114f83(%rip),%rax        # 136fd8 <xAutoReloadTimers+0x98>
   22055:	48 89 c7             	mov    %rax,%rdi
   22058:	e8 e0 02 ff ff       	callq  1233d <xTimerIsTimerActive>
   2205d:	48 85 c0             	test   %rax,%rax
   22060:	75 28                	jne    2208a <prvTest6_CheckAutoReloadResetBehaviour+0xd2>
   22062:	48 c7 05 53 f0 00 00 	movq   $0x0,0xf053(%rip)        # 310c0 <xTestStatus>
   22069:	00 00 00 00 
   2206d:	48 8b 05 4c f0 00 00 	mov    0xf04c(%rip),%rax        # 310c0 <xTestStatus>
   22074:	48 85 c0             	test   %rax,%rax
   22077:	75 11                	jne    2208a <prvTest6_CheckAutoReloadResetBehaviour+0xd2>
   22079:	be 4e 02 00 00       	mov    $0x24e,%esi
   2207e:	48 8d 3d 93 63 00 00 	lea    0x6393(%rip),%rdi        # 28418 <xInterruptGivePeriod+0x628>
   22085:	e8 82 1c fe ff       	callq  3d0c <vAssertCalled>
   2208a:	c6 45 ff 00          	movb   $0x0,-0x1(%rbp)
   2208e:	e9 6d 01 00 00       	jmpq   22200 <prvTest6_CheckAutoReloadResetBehaviour+0x248>
   22093:	48 8b 15 9e 4f 11 00 	mov    0x114f9e(%rip),%rdx        # 137038 <xBasePeriod>
   2209a:	48 89 d0             	mov    %rdx,%rax
   2209d:	48 01 c0             	add    %rax,%rax
   220a0:	48 01 d0             	add    %rdx,%rax
   220a3:	48 d1 e8             	shr    %rax
   220a6:	48 89 c7             	mov    %rax,%rdi
   220a9:	e8 f4 a6 fe ff       	callq  c7a2 <vTaskDelay>
   220ae:	48 8b 05 53 4f 11 00 	mov    0x114f53(%rip),%rax        # 137008 <xOneShotTimer>
   220b5:	48 89 c7             	mov    %rax,%rdi
   220b8:	e8 80 02 ff ff       	callq  1233d <xTimerIsTimerActive>
   220bd:	48 85 c0             	test   %rax,%rax
   220c0:	75 28                	jne    220ea <prvTest6_CheckAutoReloadResetBehaviour+0x132>
   220c2:	48 c7 05 f3 ef 00 00 	movq   $0x0,0xeff3(%rip)        # 310c0 <xTestStatus>
   220c9:	00 00 00 00 
   220cd:	48 8b 05 ec ef 00 00 	mov    0xefec(%rip),%rax        # 310c0 <xTestStatus>
   220d4:	48 85 c0             	test   %rax,%rax
   220d7:	75 11                	jne    220ea <prvTest6_CheckAutoReloadResetBehaviour+0x132>
   220d9:	be 5d 02 00 00       	mov    $0x25d,%esi
   220de:	48 8d 3d 33 63 00 00 	lea    0x6333(%rip),%rdi        # 28418 <xInterruptGivePeriod+0x628>
   220e5:	e8 22 1c fe ff       	callq  3d0c <vAssertCalled>
   220ea:	0f b6 05 1f 4f 11 00 	movzbl 0x114f1f(%rip),%eax        # 137010 <ucOneShotTimerCounter>
   220f1:	84 c0                	test   %al,%al
   220f3:	74 28                	je     2211d <prvTest6_CheckAutoReloadResetBehaviour+0x165>
   220f5:	48 c7 05 c0 ef 00 00 	movq   $0x0,0xefc0(%rip)        # 310c0 <xTestStatus>
   220fc:	00 00 00 00 
   22100:	48 8b 05 b9 ef 00 00 	mov    0xefb9(%rip),%rax        # 310c0 <xTestStatus>
   22107:	48 85 c0             	test   %rax,%rax
   2210a:	75 11                	jne    2211d <prvTest6_CheckAutoReloadResetBehaviour+0x165>
   2210c:	be 63 02 00 00       	mov    $0x263,%esi
   22111:	48 8d 3d 00 63 00 00 	lea    0x6300(%rip),%rdi        # 28418 <xInterruptGivePeriod+0x628>
   22118:	e8 ef 1b fe ff       	callq  3d0c <vAssertCalled>
   2211d:	48 8b 05 b4 4e 11 00 	mov    0x114eb4(%rip),%rax        # 136fd8 <xAutoReloadTimers+0x98>
   22124:	48 89 c7             	mov    %rax,%rdi
   22127:	e8 11 02 ff ff       	callq  1233d <xTimerIsTimerActive>
   2212c:	48 85 c0             	test   %rax,%rax
   2212f:	75 28                	jne    22159 <prvTest6_CheckAutoReloadResetBehaviour+0x1a1>
   22131:	48 c7 05 84 ef 00 00 	movq   $0x0,0xef84(%rip)        # 310c0 <xTestStatus>
   22138:	00 00 00 00 
   2213c:	48 8b 05 7d ef 00 00 	mov    0xef7d(%rip),%rax        # 310c0 <xTestStatus>
   22143:	48 85 c0             	test   %rax,%rax
   22146:	75 11                	jne    22159 <prvTest6_CheckAutoReloadResetBehaviour+0x1a1>
   22148:	be 69 02 00 00       	mov    $0x269,%esi
   2214d:	48 8d 3d c4 62 00 00 	lea    0x62c4(%rip),%rdi        # 28418 <xInterruptGivePeriod+0x628>
   22154:	e8 b3 1b fe ff       	callq  3d0c <vAssertCalled>
   22159:	0f b6 05 a3 4e 11 00 	movzbl 0x114ea3(%rip),%eax        # 137003 <ucAutoReloadTimerCounters+0x13>
   22160:	84 c0                	test   %al,%al
   22162:	74 28                	je     2218c <prvTest6_CheckAutoReloadResetBehaviour+0x1d4>
   22164:	48 c7 05 51 ef 00 00 	movq   $0x0,0xef51(%rip)        # 310c0 <xTestStatus>
   2216b:	00 00 00 00 
   2216f:	48 8b 05 4a ef 00 00 	mov    0xef4a(%rip),%rax        # 310c0 <xTestStatus>
   22176:	48 85 c0             	test   %rax,%rax
   22179:	75 11                	jne    2218c <prvTest6_CheckAutoReloadResetBehaviour+0x1d4>
   2217b:	be 6f 02 00 00       	mov    $0x26f,%esi
   22180:	48 8d 3d 91 62 00 00 	lea    0x6291(%rip),%rdi        # 28418 <xInterruptGivePeriod+0x628>
   22187:	e8 80 1b fe ff       	callq  3d0c <vAssertCalled>
   2218c:	e8 07 b7 fe ff       	callq  d898 <xTaskGetTickCount>
   22191:	48 89 c2             	mov    %rax,%rdx
   22194:	48 8b 05 6d 4e 11 00 	mov    0x114e6d(%rip),%rax        # 137008 <xOneShotTimer>
   2219b:	41 b8 00 00 00 00    	mov    $0x0,%r8d
   221a1:	b9 00 00 00 00       	mov    $0x0,%ecx
   221a6:	be 02 00 00 00       	mov    $0x2,%esi
   221ab:	48 89 c7             	mov    %rax,%rdi
   221ae:	e8 82 f4 fe ff       	callq  11635 <xTimerGenericCommand>
   221b3:	e8 e0 b6 fe ff       	callq  d898 <xTaskGetTickCount>
   221b8:	48 89 c2             	mov    %rax,%rdx
   221bb:	48 8b 05 16 4e 11 00 	mov    0x114e16(%rip),%rax        # 136fd8 <xAutoReloadTimers+0x98>
   221c2:	41 b8 00 00 00 00    	mov    $0x0,%r8d
   221c8:	b9 00 00 00 00       	mov    $0x0,%ecx
   221cd:	be 02 00 00 00       	mov    $0x2,%esi
   221d2:	48 89 c7             	mov    %rax,%rdi
   221d5:	e8 5b f4 fe ff       	callq  11635 <xTimerGenericCommand>
   221da:	48 8b 05 df ee 00 00 	mov    0xeedf(%rip),%rax        # 310c0 <xTestStatus>
   221e1:	48 83 f8 01          	cmp    $0x1,%rax
   221e5:	75 0f                	jne    221f6 <prvTest6_CheckAutoReloadResetBehaviour+0x23e>
   221e7:	8b 05 37 4d 11 00    	mov    0x114d37(%rip),%eax        # 136f24 <ulLoopCounter>
   221ed:	83 c0 01             	add    $0x1,%eax
   221f0:	89 05 2e 4d 11 00    	mov    %eax,0x114d2e(%rip)        # 136f24 <ulLoopCounter>
   221f6:	0f b6 45 ff          	movzbl -0x1(%rbp),%eax
   221fa:	83 c0 01             	add    $0x1,%eax
   221fd:	88 45 ff             	mov    %al,-0x1(%rbp)
   22200:	80 7d ff 09          	cmpb   $0x9,-0x1(%rbp)
   22204:	0f 86 89 fe ff ff    	jbe    22093 <prvTest6_CheckAutoReloadResetBehaviour+0xdb>
   2220a:	48 8b 15 27 4e 11 00 	mov    0x114e27(%rip),%rdx        # 137038 <xBasePeriod>
   22211:	48 89 d0             	mov    %rdx,%rax
   22214:	48 c1 e0 02          	shl    $0x2,%rax
   22218:	48 01 d0             	add    %rdx,%rax
   2221b:	48 c1 e0 02          	shl    $0x2,%rax
   2221f:	48 89 c7             	mov    %rax,%rdi
   22222:	e8 7b a5 fe ff       	callq  c7a2 <vTaskDelay>
   22227:	0f b6 05 e2 4d 11 00 	movzbl 0x114de2(%rip),%eax        # 137010 <ucOneShotTimerCounter>
   2222e:	3c 01                	cmp    $0x1,%al
   22230:	74 28                	je     2225a <prvTest6_CheckAutoReloadResetBehaviour+0x2a2>
   22232:	48 c7 05 83 ee 00 00 	movq   $0x0,0xee83(%rip)        # 310c0 <xTestStatus>
   22239:	00 00 00 00 
   2223d:	48 8b 05 7c ee 00 00 	mov    0xee7c(%rip),%rax        # 310c0 <xTestStatus>
   22244:	48 85 c0             	test   %rax,%rax
   22247:	75 11                	jne    2225a <prvTest6_CheckAutoReloadResetBehaviour+0x2a2>
   22249:	be 86 02 00 00       	mov    $0x286,%esi
   2224e:	48 8d 3d c3 61 00 00 	lea    0x61c3(%rip),%rdi        # 28418 <xInterruptGivePeriod+0x628>
   22255:	e8 b2 1a fe ff       	callq  3d0c <vAssertCalled>
   2225a:	0f b6 05 a2 4d 11 00 	movzbl 0x114da2(%rip),%eax        # 137003 <ucAutoReloadTimerCounters+0x13>
   22261:	84 c0                	test   %al,%al
   22263:	75 28                	jne    2228d <prvTest6_CheckAutoReloadResetBehaviour+0x2d5>
   22265:	48 c7 05 50 ee 00 00 	movq   $0x0,0xee50(%rip)        # 310c0 <xTestStatus>
   2226c:	00 00 00 00 
   22270:	48 8b 05 49 ee 00 00 	mov    0xee49(%rip),%rax        # 310c0 <xTestStatus>
   22277:	48 85 c0             	test   %rax,%rax
   2227a:	75 11                	jne    2228d <prvTest6_CheckAutoReloadResetBehaviour+0x2d5>
   2227c:	be 8c 02 00 00       	mov    $0x28c,%esi
   22281:	48 8d 3d 90 61 00 00 	lea    0x6190(%rip),%rdi        # 28418 <xInterruptGivePeriod+0x628>
   22288:	e8 7f 1a fe ff       	callq  3d0c <vAssertCalled>
   2228d:	48 8b 05 44 4d 11 00 	mov    0x114d44(%rip),%rax        # 136fd8 <xAutoReloadTimers+0x98>
   22294:	48 89 c7             	mov    %rax,%rdi
   22297:	e8 a1 00 ff ff       	callq  1233d <xTimerIsTimerActive>
   2229c:	48 85 c0             	test   %rax,%rax
   2229f:	75 28                	jne    222c9 <prvTest6_CheckAutoReloadResetBehaviour+0x311>
   222a1:	48 c7 05 14 ee 00 00 	movq   $0x0,0xee14(%rip)        # 310c0 <xTestStatus>
   222a8:	00 00 00 00 
   222ac:	48 8b 05 0d ee 00 00 	mov    0xee0d(%rip),%rax        # 310c0 <xTestStatus>
   222b3:	48 85 c0             	test   %rax,%rax
   222b6:	75 11                	jne    222c9 <prvTest6_CheckAutoReloadResetBehaviour+0x311>
   222b8:	be 94 02 00 00       	mov    $0x294,%esi
   222bd:	48 8d 3d 54 61 00 00 	lea    0x6154(%rip),%rdi        # 28418 <xInterruptGivePeriod+0x628>
   222c4:	e8 43 1a fe ff       	callq  3d0c <vAssertCalled>
   222c9:	48 8b 05 38 4d 11 00 	mov    0x114d38(%rip),%rax        # 137008 <xOneShotTimer>
   222d0:	48 89 c7             	mov    %rax,%rdi
   222d3:	e8 65 00 ff ff       	callq  1233d <xTimerIsTimerActive>
   222d8:	48 83 f8 01          	cmp    $0x1,%rax
   222dc:	75 28                	jne    22306 <prvTest6_CheckAutoReloadResetBehaviour+0x34e>
   222de:	48 c7 05 d7 ed 00 00 	movq   $0x0,0xedd7(%rip)        # 310c0 <xTestStatus>
   222e5:	00 00 00 00 
   222e9:	48 8b 05 d0 ed 00 00 	mov    0xedd0(%rip),%rax        # 310c0 <xTestStatus>
   222f0:	48 85 c0             	test   %rax,%rax
   222f3:	75 11                	jne    22306 <prvTest6_CheckAutoReloadResetBehaviour+0x34e>
   222f5:	be 9a 02 00 00       	mov    $0x29a,%esi
   222fa:	48 8d 3d 17 61 00 00 	lea    0x6117(%rip),%rdi        # 28418 <xInterruptGivePeriod+0x628>
   22301:	e8 06 1a fe ff       	callq  3d0c <vAssertCalled>
   22306:	48 8b 05 cb 4c 11 00 	mov    0x114ccb(%rip),%rax        # 136fd8 <xAutoReloadTimers+0x98>
   2230d:	41 b8 00 00 00 00    	mov    $0x0,%r8d
   22313:	b9 00 00 00 00       	mov    $0x0,%ecx
   22318:	ba 00 00 00 00       	mov    $0x0,%edx
   2231d:	be 03 00 00 00       	mov    $0x3,%esi
   22322:	48 89 c7             	mov    %rax,%rdi
   22325:	e8 0b f3 fe ff       	callq  11635 <xTimerGenericCommand>
   2232a:	48 8b 05 a7 4c 11 00 	mov    0x114ca7(%rip),%rax        # 136fd8 <xAutoReloadTimers+0x98>
   22331:	48 89 c7             	mov    %rax,%rdi
   22334:	e8 04 00 ff ff       	callq  1233d <xTimerIsTimerActive>
   22339:	48 85 c0             	test   %rax,%rax
   2233c:	74 28                	je     22366 <prvTest6_CheckAutoReloadResetBehaviour+0x3ae>
   2233e:	48 c7 05 77 ed 00 00 	movq   $0x0,0xed77(%rip)        # 310c0 <xTestStatus>
   22345:	00 00 00 00 
   22349:	48 8b 05 70 ed 00 00 	mov    0xed70(%rip),%rax        # 310c0 <xTestStatus>
   22350:	48 85 c0             	test   %rax,%rax
   22353:	75 11                	jne    22366 <prvTest6_CheckAutoReloadResetBehaviour+0x3ae>
   22355:	be a3 02 00 00       	mov    $0x2a3,%esi
   2235a:	48 8d 3d b7 60 00 00 	lea    0x60b7(%rip),%rdi        # 28418 <xInterruptGivePeriod+0x628>
   22361:	e8 a6 19 fe ff       	callq  3d0c <vAssertCalled>
   22366:	c6 05 96 4c 11 00 00 	movb   $0x0,0x114c96(%rip)        # 137003 <ucAutoReloadTimerCounters+0x13>
   2236d:	c6 05 9c 4c 11 00 00 	movb   $0x0,0x114c9c(%rip)        # 137010 <ucOneShotTimerCounter>
   22374:	48 8b 05 45 ed 00 00 	mov    0xed45(%rip),%rax        # 310c0 <xTestStatus>
   2237b:	48 83 f8 01          	cmp    $0x1,%rax
   2237f:	75 0f                	jne    22390 <prvTest6_CheckAutoReloadResetBehaviour+0x3d8>
   22381:	8b 05 9d 4b 11 00    	mov    0x114b9d(%rip),%eax        # 136f24 <ulLoopCounter>
   22387:	83 c0 01             	add    $0x1,%eax
   2238a:	89 05 94 4b 11 00    	mov    %eax,0x114b94(%rip)        # 136f24 <ulLoopCounter>
   22390:	90                   	nop
   22391:	c9                   	leaveq 
   22392:	c3                   	retq   

0000000000022393 <prvTest7_CheckBacklogBehaviour>:
   22393:	f3 0f 1e fa          	endbr64 
   22397:	55                   	push   %rbp
   22398:	48 89 e5             	mov    %rsp,%rbp
   2239b:	48 8b 05 9e 4b 11 00 	mov    0x114b9e(%rip),%rax        # 136f40 <xAutoReloadTimers>
   223a2:	48 89 c7             	mov    %rax,%rdi
   223a5:	e8 93 ff fe ff       	callq  1233d <xTimerIsTimerActive>
   223aa:	48 85 c0             	test   %rax,%rax
   223ad:	74 28                	je     223d7 <prvTest7_CheckBacklogBehaviour+0x44>
   223af:	48 c7 05 06 ed 00 00 	movq   $0x0,0xed06(%rip)        # 310c0 <xTestStatus>
   223b6:	00 00 00 00 
   223ba:	48 8b 05 ff ec 00 00 	mov    0xecff(%rip),%rax        # 310c0 <xTestStatus>
   223c1:	48 85 c0             	test   %rax,%rax
   223c4:	75 11                	jne    223d7 <prvTest7_CheckBacklogBehaviour+0x44>
   223c6:	be bd 02 00 00       	mov    $0x2bd,%esi
   223cb:	48 8d 3d 46 60 00 00 	lea    0x6046(%rip),%rdi        # 28418 <xInterruptGivePeriod+0x628>
   223d2:	e8 35 19 fe ff       	callq  3d0c <vAssertCalled>
   223d7:	c6 05 27 4c 11 00 01 	movb   $0x1,0x114c27(%rip)        # 137005 <ucIsStopNeededInTimerZeroCallback>
   223de:	48 8b 05 5b 4b 11 00 	mov    0x114b5b(%rip),%rax        # 136f40 <xAutoReloadTimers>
   223e5:	41 b8 00 00 00 00    	mov    $0x0,%r8d
   223eb:	b9 00 00 00 00       	mov    $0x0,%ecx
   223f0:	ba 01 00 00 00       	mov    $0x1,%edx
   223f5:	be 04 00 00 00       	mov    $0x4,%esi
   223fa:	48 89 c7             	mov    %rax,%rdi
   223fd:	e8 33 f2 fe ff       	callq  11635 <xTimerGenericCommand>
   22402:	48 8b 05 37 4b 11 00 	mov    0x114b37(%rip),%rax        # 136f40 <xAutoReloadTimers>
   22409:	48 89 c7             	mov    %rax,%rdi
   2240c:	e8 2c ff fe ff       	callq  1233d <xTimerIsTimerActive>
   22411:	48 85 c0             	test   %rax,%rax
   22414:	75 28                	jne    2243e <prvTest7_CheckBacklogBehaviour+0xab>
   22416:	48 c7 05 9f ec 00 00 	movq   $0x0,0xec9f(%rip)        # 310c0 <xTestStatus>
   2241d:	00 00 00 00 
   22421:	48 8b 05 98 ec 00 00 	mov    0xec98(%rip),%rax        # 310c0 <xTestStatus>
   22428:	48 85 c0             	test   %rax,%rax
   2242b:	75 11                	jne    2243e <prvTest7_CheckBacklogBehaviour+0xab>
   2242d:	be cf 02 00 00       	mov    $0x2cf,%esi
   22432:	48 8d 3d df 5f 00 00 	lea    0x5fdf(%rip),%rdi        # 28418 <xInterruptGivePeriod+0x628>
   22439:	e8 ce 18 fe ff       	callq  3d0c <vAssertCalled>
   2243e:	bf 02 00 00 00       	mov    $0x2,%edi
   22443:	e8 0d b9 fe ff       	callq  dd55 <xTaskCatchUpTicks>
   22448:	48 8b 05 f1 4a 11 00 	mov    0x114af1(%rip),%rax        # 136f40 <xAutoReloadTimers>
   2244f:	48 89 c7             	mov    %rax,%rdi
   22452:	e8 e6 fe fe ff       	callq  1233d <xTimerIsTimerActive>
   22457:	48 85 c0             	test   %rax,%rax
   2245a:	74 28                	je     22484 <prvTest7_CheckBacklogBehaviour+0xf1>
   2245c:	48 c7 05 59 ec 00 00 	movq   $0x0,0xec59(%rip)        # 310c0 <xTestStatus>
   22463:	00 00 00 00 
   22467:	48 8b 05 52 ec 00 00 	mov    0xec52(%rip),%rax        # 310c0 <xTestStatus>
   2246e:	48 85 c0             	test   %rax,%rax
   22471:	75 11                	jne    22484 <prvTest7_CheckBacklogBehaviour+0xf1>
   22473:	be dc 02 00 00       	mov    $0x2dc,%esi
   22478:	48 8d 3d 99 5f 00 00 	lea    0x5f99(%rip),%rdi        # 28418 <xInterruptGivePeriod+0x628>
   2247f:	e8 88 18 fe ff       	callq  3d0c <vAssertCalled>
   22484:	48 8b 15 ad 4b 11 00 	mov    0x114bad(%rip),%rdx        # 137038 <xBasePeriod>
   2248b:	48 8b 05 ae 4a 11 00 	mov    0x114aae(%rip),%rax        # 136f40 <xAutoReloadTimers>
   22492:	41 b8 00 00 00 00    	mov    $0x0,%r8d
   22498:	b9 00 00 00 00       	mov    $0x0,%ecx
   2249d:	be 04 00 00 00       	mov    $0x4,%esi
   224a2:	48 89 c7             	mov    %rax,%rdi
   224a5:	e8 8b f1 fe ff       	callq  11635 <xTimerGenericCommand>
   224aa:	48 8b 05 8f 4a 11 00 	mov    0x114a8f(%rip),%rax        # 136f40 <xAutoReloadTimers>
   224b1:	41 b8 00 00 00 00    	mov    $0x0,%r8d
   224b7:	b9 00 00 00 00       	mov    $0x0,%ecx
   224bc:	ba 00 00 00 00       	mov    $0x0,%edx
   224c1:	be 03 00 00 00       	mov    $0x3,%esi
   224c6:	48 89 c7             	mov    %rax,%rdi
   224c9:	e8 67 f1 fe ff       	callq  11635 <xTimerGenericCommand>
   224ce:	c6 05 1b 4b 11 00 00 	movb   $0x0,0x114b1b(%rip)        # 136ff0 <ucAutoReloadTimerCounters>
   224d5:	48 8b 05 e4 eb 00 00 	mov    0xebe4(%rip),%rax        # 310c0 <xTestStatus>
   224dc:	48 83 f8 01          	cmp    $0x1,%rax
   224e0:	75 0f                	jne    224f1 <prvTest7_CheckBacklogBehaviour+0x15e>
   224e2:	8b 05 3c 4a 11 00    	mov    0x114a3c(%rip),%eax        # 136f24 <ulLoopCounter>
   224e8:	83 c0 01             	add    $0x1,%eax
   224eb:	89 05 33 4a 11 00    	mov    %eax,0x114a33(%rip)        # 136f24 <ulLoopCounter>
   224f1:	90                   	nop
   224f2:	5d                   	pop    %rbp
   224f3:	c3                   	retq   

00000000000224f4 <prvResetStartConditionsForNextIteration>:
   224f4:	f3 0f 1e fa          	endbr64 
   224f8:	55                   	push   %rbp
   224f9:	48 89 e5             	mov    %rsp,%rbp
   224fc:	48 83 ec 10          	sub    $0x10,%rsp
   22500:	c6 45 ff 00          	movb   $0x0,-0x1(%rbp)
   22504:	e9 df 00 00 00       	jmpq   225e8 <prvResetStartConditionsForNextIteration+0xf4>
   22509:	0f b6 45 ff          	movzbl -0x1(%rbp),%eax
   2250d:	48 98                	cltq   
   2250f:	48 8d 14 c5 00 00 00 	lea    0x0(,%rax,8),%rdx
   22516:	00 
   22517:	48 8d 05 22 4a 11 00 	lea    0x114a22(%rip),%rax        # 136f40 <xAutoReloadTimers>
   2251e:	48 8b 04 02          	mov    (%rdx,%rax,1),%rax
   22522:	48 89 c7             	mov    %rax,%rdi
   22525:	e8 13 fe fe ff       	callq  1233d <xTimerIsTimerActive>
   2252a:	48 85 c0             	test   %rax,%rax
   2252d:	74 28                	je     22557 <prvResetStartConditionsForNextIteration+0x63>
   2252f:	48 c7 05 86 eb 00 00 	movq   $0x0,0xeb86(%rip)        # 310c0 <xTestStatus>
   22536:	00 00 00 00 
   2253a:	48 8b 05 7f eb 00 00 	mov    0xeb7f(%rip),%rax        # 310c0 <xTestStatus>
   22541:	48 85 c0             	test   %rax,%rax
   22544:	75 11                	jne    22557 <prvResetStartConditionsForNextIteration+0x63>
   22546:	be fc 02 00 00       	mov    $0x2fc,%esi
   2254b:	48 8d 3d c6 5e 00 00 	lea    0x5ec6(%rip),%rdi        # 28418 <xInterruptGivePeriod+0x628>
   22552:	e8 b5 17 fe ff       	callq  3d0c <vAssertCalled>
   22557:	e8 3c b3 fe ff       	callq  d898 <xTaskGetTickCount>
   2255c:	48 89 c2             	mov    %rax,%rdx
   2255f:	0f b6 45 ff          	movzbl -0x1(%rbp),%eax
   22563:	48 98                	cltq   
   22565:	48 8d 0c c5 00 00 00 	lea    0x0(,%rax,8),%rcx
   2256c:	00 
   2256d:	48 8d 05 cc 49 11 00 	lea    0x1149cc(%rip),%rax        # 136f40 <xAutoReloadTimers>
   22574:	48 8b 04 01          	mov    (%rcx,%rax,1),%rax
   22578:	41 b8 00 00 00 00    	mov    $0x0,%r8d
   2257e:	b9 00 00 00 00       	mov    $0x0,%ecx
   22583:	be 01 00 00 00       	mov    $0x1,%esi
   22588:	48 89 c7             	mov    %rax,%rdi
   2258b:	e8 a5 f0 fe ff       	callq  11635 <xTimerGenericCommand>
   22590:	0f b6 45 ff          	movzbl -0x1(%rbp),%eax
   22594:	48 98                	cltq   
   22596:	48 8d 14 c5 00 00 00 	lea    0x0(,%rax,8),%rdx
   2259d:	00 
   2259e:	48 8d 05 9b 49 11 00 	lea    0x11499b(%rip),%rax        # 136f40 <xAutoReloadTimers>
   225a5:	48 8b 04 02          	mov    (%rdx,%rax,1),%rax
   225a9:	48 89 c7             	mov    %rax,%rdi
   225ac:	e8 8c fd fe ff       	callq  1233d <xTimerIsTimerActive>
   225b1:	48 85 c0             	test   %rax,%rax
   225b4:	75 28                	jne    225de <prvResetStartConditionsForNextIteration+0xea>
   225b6:	48 c7 05 ff ea 00 00 	movq   $0x0,0xeaff(%rip)        # 310c0 <xTestStatus>
   225bd:	00 00 00 00 
   225c1:	48 8b 05 f8 ea 00 00 	mov    0xeaf8(%rip),%rax        # 310c0 <xTestStatus>
   225c8:	48 85 c0             	test   %rax,%rax
   225cb:	75 11                	jne    225de <prvResetStartConditionsForNextIteration+0xea>
   225cd:	be 08 03 00 00       	mov    $0x308,%esi
   225d2:	48 8d 3d 3f 5e 00 00 	lea    0x5e3f(%rip),%rdi        # 28418 <xInterruptGivePeriod+0x628>
   225d9:	e8 2e 17 fe ff       	callq  3d0c <vAssertCalled>
   225de:	0f b6 45 ff          	movzbl -0x1(%rbp),%eax
   225e2:	83 c0 01             	add    $0x1,%eax
   225e5:	88 45 ff             	mov    %al,-0x1(%rbp)
   225e8:	80 7d ff 13          	cmpb   $0x13,-0x1(%rbp)
   225ec:	0f 86 17 ff ff ff    	jbe    22509 <prvResetStartConditionsForNextIteration+0x15>
   225f2:	48 8b 05 c7 ea 00 00 	mov    0xeac7(%rip),%rax        # 310c0 <xTestStatus>
   225f9:	48 83 f8 01          	cmp    $0x1,%rax
   225fd:	75 0f                	jne    2260e <prvResetStartConditionsForNextIteration+0x11a>
   225ff:	8b 05 1f 49 11 00    	mov    0x11491f(%rip),%eax        # 136f24 <ulLoopCounter>
   22605:	83 c0 01             	add    $0x1,%eax
   22608:	89 05 16 49 11 00    	mov    %eax,0x114916(%rip)        # 136f24 <ulLoopCounter>
   2260e:	90                   	nop
   2260f:	c9                   	leaveq 
   22610:	c3                   	retq   

0000000000022611 <vTimerPeriodicISRTests>:
   22611:	f3 0f 1e fa          	endbr64 
   22615:	55                   	push   %rbp
   22616:	48 89 e5             	mov    %rsp,%rbp
   22619:	48 83 ec 10          	sub    $0x10,%rsp
   2261d:	48 c7 45 f8 14 00 00 	movq   $0x14,-0x8(%rbp)
   22624:	00 
   22625:	48 8b 05 9c ea 00 00 	mov    0xea9c(%rip),%rax        # 310c8 <uxTick.3148>
   2262c:	48 83 c0 01          	add    $0x1,%rax
   22630:	48 89 05 91 ea 00 00 	mov    %rax,0xea91(%rip)        # 310c8 <uxTick.3148>
   22637:	48 8b 05 8a ea 00 00 	mov    0xea8a(%rip),%rax        # 310c8 <uxTick.3148>
   2263e:	48 85 c0             	test   %rax,%rax
   22641:	0f 85 ae 00 00 00    	jne    226f5 <vTimerPeriodicISRTests+0xe4>
   22647:	c6 05 d2 49 11 00 00 	movb   $0x0,0x1149d2(%rip)        # 137020 <ucISRAutoReloadTimerCounter>
   2264e:	c6 05 db 49 11 00 00 	movb   $0x0,0x1149db(%rip)        # 137030 <ucISROneShotTimerCounter>
   22655:	48 c7 05 68 ea 00 00 	movq   $0xffffffffffffffff,0xea68(%rip)        # 310c8 <uxTick.3148>
   2265c:	ff ff ff ff 
   22660:	48 8b 15 d1 49 11 00 	mov    0x1149d1(%rip),%rdx        # 137038 <xBasePeriod>
   22667:	48 8b 05 aa 49 11 00 	mov    0x1149aa(%rip),%rax        # 137018 <xISRAutoReloadTimer>
   2266e:	41 b8 00 00 00 00    	mov    $0x0,%r8d
   22674:	b9 00 00 00 00       	mov    $0x0,%ecx
   22679:	be 09 00 00 00       	mov    $0x9,%esi
   2267e:	48 89 c7             	mov    %rax,%rdi
   22681:	e8 af ef fe ff       	callq  11635 <xTimerGenericCommand>
   22686:	48 83 f8 01          	cmp    $0x1,%rax
   2268a:	0f 85 03 09 00 00    	jne    22f93 <vTimerPeriodicISRTests+0x982>
   22690:	48 8b 15 a1 49 11 00 	mov    0x1149a1(%rip),%rdx        # 137038 <xBasePeriod>
   22697:	48 8b 05 8a 49 11 00 	mov    0x11498a(%rip),%rax        # 137028 <xISROneShotTimer>
   2269e:	41 b8 00 00 00 00    	mov    $0x0,%r8d
   226a4:	b9 00 00 00 00       	mov    $0x0,%ecx
   226a9:	be 09 00 00 00       	mov    $0x9,%esi
   226ae:	48 89 c7             	mov    %rax,%rdi
   226b1:	e8 7f ef fe ff       	callq  11635 <xTimerGenericCommand>
   226b6:	48 83 f8 01          	cmp    $0x1,%rax
   226ba:	75 10                	jne    226cc <vTimerPeriodicISRTests+0xbb>
   226bc:	48 c7 05 01 ea 00 00 	movq   $0x0,0xea01(%rip)        # 310c8 <uxTick.3148>
   226c3:	00 00 00 00 
   226c7:	e9 c7 08 00 00       	jmpq   22f93 <vTimerPeriodicISRTests+0x982>
   226cc:	48 8b 05 45 49 11 00 	mov    0x114945(%rip),%rax        # 137018 <xISRAutoReloadTimer>
   226d3:	41 b8 00 00 00 00    	mov    $0x0,%r8d
   226d9:	b9 00 00 00 00       	mov    $0x0,%ecx
   226de:	ba 00 00 00 00       	mov    $0x0,%edx
   226e3:	be 08 00 00 00       	mov    $0x8,%esi
   226e8:	48 89 c7             	mov    %rax,%rdi
   226eb:	e8 45 ef fe ff       	callq  11635 <xTimerGenericCommand>
   226f0:	e9 9e 08 00 00       	jmpq   22f93 <vTimerPeriodicISRTests+0x982>
   226f5:	48 8b 05 3c 49 11 00 	mov    0x11493c(%rip),%rax        # 137038 <xBasePeriod>
   226fc:	48 2b 45 f8          	sub    -0x8(%rbp),%rax
   22700:	48 89 c2             	mov    %rax,%rdx
   22703:	48 8b 05 be e9 00 00 	mov    0xe9be(%rip),%rax        # 310c8 <uxTick.3148>
   2270a:	48 39 c2             	cmp    %rax,%rdx
   2270d:	75 4b                	jne    2275a <vTimerPeriodicISRTests+0x149>
   2270f:	0f b6 05 0a 49 11 00 	movzbl 0x11490a(%rip),%eax        # 137020 <ucISRAutoReloadTimerCounter>
   22716:	84 c0                	test   %al,%al
   22718:	75 0f                	jne    22729 <vTimerPeriodicISRTests+0x118>
   2271a:	0f b6 05 0f 49 11 00 	movzbl 0x11490f(%rip),%eax        # 137030 <ucISROneShotTimerCounter>
   22721:	84 c0                	test   %al,%al
   22723:	0f 84 6a 08 00 00    	je     22f93 <vTimerPeriodicISRTests+0x982>
   22729:	48 c7 05 8c e9 00 00 	movq   $0x0,0xe98c(%rip)        # 310c0 <xTestStatus>
   22730:	00 00 00 00 
   22734:	48 8b 05 85 e9 00 00 	mov    0xe985(%rip),%rax        # 310c0 <xTestStatus>
   2273b:	48 85 c0             	test   %rax,%rax
   2273e:	0f 85 4f 08 00 00    	jne    22f93 <vTimerPeriodicISRTests+0x982>
   22744:	be 64 03 00 00       	mov    $0x364,%esi
   22749:	48 8d 3d c8 5c 00 00 	lea    0x5cc8(%rip),%rdi        # 28418 <xInterruptGivePeriod+0x628>
   22750:	e8 b7 15 fe ff       	callq  3d0c <vAssertCalled>
   22755:	e9 39 08 00 00       	jmpq   22f93 <vTimerPeriodicISRTests+0x982>
   2275a:	48 8b 15 d7 48 11 00 	mov    0x1148d7(%rip),%rdx        # 137038 <xBasePeriod>
   22761:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   22765:	48 01 c2             	add    %rax,%rdx
   22768:	48 8b 05 59 e9 00 00 	mov    0xe959(%rip),%rax        # 310c8 <uxTick.3148>
   2276f:	48 39 c2             	cmp    %rax,%rdx
   22772:	75 4b                	jne    227bf <vTimerPeriodicISRTests+0x1ae>
   22774:	0f b6 05 a5 48 11 00 	movzbl 0x1148a5(%rip),%eax        # 137020 <ucISRAutoReloadTimerCounter>
   2277b:	3c 01                	cmp    $0x1,%al
   2277d:	75 0f                	jne    2278e <vTimerPeriodicISRTests+0x17d>
   2277f:	0f b6 05 aa 48 11 00 	movzbl 0x1148aa(%rip),%eax        # 137030 <ucISROneShotTimerCounter>
   22786:	3c 01                	cmp    $0x1,%al
   22788:	0f 84 05 08 00 00    	je     22f93 <vTimerPeriodicISRTests+0x982>
   2278e:	48 c7 05 27 e9 00 00 	movq   $0x0,0xe927(%rip)        # 310c0 <xTestStatus>
   22795:	00 00 00 00 
   22799:	48 8b 05 20 e9 00 00 	mov    0xe920(%rip),%rax        # 310c0 <xTestStatus>
   227a0:	48 85 c0             	test   %rax,%rax
   227a3:	0f 85 ea 07 00 00    	jne    22f93 <vTimerPeriodicISRTests+0x982>
   227a9:	be 6e 03 00 00       	mov    $0x36e,%esi
   227ae:	48 8d 3d 63 5c 00 00 	lea    0x5c63(%rip),%rdi        # 28418 <xInterruptGivePeriod+0x628>
   227b5:	e8 52 15 fe ff       	callq  3d0c <vAssertCalled>
   227ba:	e9 d4 07 00 00       	jmpq   22f93 <vTimerPeriodicISRTests+0x982>
   227bf:	48 8b 05 72 48 11 00 	mov    0x114872(%rip),%rax        # 137038 <xBasePeriod>
   227c6:	48 01 c0             	add    %rax,%rax
   227c9:	48 2b 45 f8          	sub    -0x8(%rbp),%rax
   227cd:	48 89 c2             	mov    %rax,%rdx
   227d0:	48 8b 05 f1 e8 00 00 	mov    0xe8f1(%rip),%rax        # 310c8 <uxTick.3148>
   227d7:	48 39 c2             	cmp    %rax,%rdx
   227da:	75 4b                	jne    22827 <vTimerPeriodicISRTests+0x216>
   227dc:	0f b6 05 3d 48 11 00 	movzbl 0x11483d(%rip),%eax        # 137020 <ucISRAutoReloadTimerCounter>
   227e3:	3c 01                	cmp    $0x1,%al
   227e5:	75 0f                	jne    227f6 <vTimerPeriodicISRTests+0x1e5>
   227e7:	0f b6 05 42 48 11 00 	movzbl 0x114842(%rip),%eax        # 137030 <ucISROneShotTimerCounter>
   227ee:	3c 01                	cmp    $0x1,%al
   227f0:	0f 84 9d 07 00 00    	je     22f93 <vTimerPeriodicISRTests+0x982>
   227f6:	48 c7 05 bf e8 00 00 	movq   $0x0,0xe8bf(%rip)        # 310c0 <xTestStatus>
   227fd:	00 00 00 00 
   22801:	48 8b 05 b8 e8 00 00 	mov    0xe8b8(%rip),%rax        # 310c0 <xTestStatus>
   22808:	48 85 c0             	test   %rax,%rax
   2280b:	0f 85 82 07 00 00    	jne    22f93 <vTimerPeriodicISRTests+0x982>
   22811:	be 79 03 00 00       	mov    $0x379,%esi
   22816:	48 8d 3d fb 5b 00 00 	lea    0x5bfb(%rip),%rdi        # 28418 <xInterruptGivePeriod+0x628>
   2281d:	e8 ea 14 fe ff       	callq  3d0c <vAssertCalled>
   22822:	e9 6c 07 00 00       	jmpq   22f93 <vTimerPeriodicISRTests+0x982>
   22827:	48 8b 05 0a 48 11 00 	mov    0x11480a(%rip),%rax        # 137038 <xBasePeriod>
   2282e:	48 8d 14 00          	lea    (%rax,%rax,1),%rdx
   22832:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   22836:	48 01 c2             	add    %rax,%rdx
   22839:	48 8b 05 88 e8 00 00 	mov    0xe888(%rip),%rax        # 310c8 <uxTick.3148>
   22840:	48 39 c2             	cmp    %rax,%rdx
   22843:	75 73                	jne    228b8 <vTimerPeriodicISRTests+0x2a7>
   22845:	0f b6 05 d4 47 11 00 	movzbl 0x1147d4(%rip),%eax        # 137020 <ucISRAutoReloadTimerCounter>
   2284c:	3c 02                	cmp    $0x2,%al
   2284e:	74 28                	je     22878 <vTimerPeriodicISRTests+0x267>
   22850:	48 c7 05 65 e8 00 00 	movq   $0x0,0xe865(%rip)        # 310c0 <xTestStatus>
   22857:	00 00 00 00 
   2285b:	48 8b 05 5e e8 00 00 	mov    0xe85e(%rip),%rax        # 310c0 <xTestStatus>
   22862:	48 85 c0             	test   %rax,%rax
   22865:	75 11                	jne    22878 <vTimerPeriodicISRTests+0x267>
   22867:	be 84 03 00 00       	mov    $0x384,%esi
   2286c:	48 8d 3d a5 5b 00 00 	lea    0x5ba5(%rip),%rdi        # 28418 <xInterruptGivePeriod+0x628>
   22873:	e8 94 14 fe ff       	callq  3d0c <vAssertCalled>
   22878:	0f b6 05 b1 47 11 00 	movzbl 0x1147b1(%rip),%eax        # 137030 <ucISROneShotTimerCounter>
   2287f:	3c 01                	cmp    $0x1,%al
   22881:	0f 84 0c 07 00 00    	je     22f93 <vTimerPeriodicISRTests+0x982>
   22887:	48 c7 05 2e e8 00 00 	movq   $0x0,0xe82e(%rip)        # 310c0 <xTestStatus>
   2288e:	00 00 00 00 
   22892:	48 8b 05 27 e8 00 00 	mov    0xe827(%rip),%rax        # 310c0 <xTestStatus>
   22899:	48 85 c0             	test   %rax,%rax
   2289c:	0f 85 f1 06 00 00    	jne    22f93 <vTimerPeriodicISRTests+0x982>
   228a2:	be 8a 03 00 00       	mov    $0x38a,%esi
   228a7:	48 8d 3d 6a 5b 00 00 	lea    0x5b6a(%rip),%rdi        # 28418 <xInterruptGivePeriod+0x628>
   228ae:	e8 59 14 fe ff       	callq  3d0c <vAssertCalled>
   228b3:	e9 db 06 00 00       	jmpq   22f93 <vTimerPeriodicISRTests+0x982>
   228b8:	48 8b 05 79 47 11 00 	mov    0x114779(%rip),%rax        # 137038 <xBasePeriod>
   228bf:	48 8d 14 00          	lea    (%rax,%rax,1),%rdx
   228c3:	48 8b 05 6e 47 11 00 	mov    0x11476e(%rip),%rax        # 137038 <xBasePeriod>
   228ca:	48 c1 e8 02          	shr    $0x2,%rax
   228ce:	48 01 c2             	add    %rax,%rdx
   228d1:	48 8b 05 f0 e7 00 00 	mov    0xe7f0(%rip),%rax        # 310c8 <uxTick.3148>
   228d8:	48 39 c2             	cmp    %rax,%rdx
   228db:	75 73                	jne    22950 <vTimerPeriodicISRTests+0x33f>
   228dd:	0f b6 05 3c 47 11 00 	movzbl 0x11473c(%rip),%eax        # 137020 <ucISRAutoReloadTimerCounter>
   228e4:	3c 02                	cmp    $0x2,%al
   228e6:	74 28                	je     22910 <vTimerPeriodicISRTests+0x2ff>
   228e8:	48 c7 05 cd e7 00 00 	movq   $0x0,0xe7cd(%rip)        # 310c0 <xTestStatus>
   228ef:	00 00 00 00 
   228f3:	48 8b 05 c6 e7 00 00 	mov    0xe7c6(%rip),%rax        # 310c0 <xTestStatus>
   228fa:	48 85 c0             	test   %rax,%rax
   228fd:	75 11                	jne    22910 <vTimerPeriodicISRTests+0x2ff>
   228ff:	be 95 03 00 00       	mov    $0x395,%esi
   22904:	48 8d 3d 0d 5b 00 00 	lea    0x5b0d(%rip),%rdi        # 28418 <xInterruptGivePeriod+0x628>
   2290b:	e8 fc 13 fe ff       	callq  3d0c <vAssertCalled>
   22910:	0f b6 05 19 47 11 00 	movzbl 0x114719(%rip),%eax        # 137030 <ucISROneShotTimerCounter>
   22917:	3c 01                	cmp    $0x1,%al
   22919:	0f 84 74 06 00 00    	je     22f93 <vTimerPeriodicISRTests+0x982>
   2291f:	48 c7 05 96 e7 00 00 	movq   $0x0,0xe796(%rip)        # 310c0 <xTestStatus>
   22926:	00 00 00 00 
   2292a:	48 8b 05 8f e7 00 00 	mov    0xe78f(%rip),%rax        # 310c0 <xTestStatus>
   22931:	48 85 c0             	test   %rax,%rax
   22934:	0f 85 59 06 00 00    	jne    22f93 <vTimerPeriodicISRTests+0x982>
   2293a:	be 9b 03 00 00       	mov    $0x39b,%esi
   2293f:	48 8d 3d d2 5a 00 00 	lea    0x5ad2(%rip),%rdi        # 28418 <xInterruptGivePeriod+0x628>
   22946:	e8 c1 13 fe ff       	callq  3d0c <vAssertCalled>
   2294b:	e9 43 06 00 00       	jmpq   22f93 <vTimerPeriodicISRTests+0x982>
   22950:	48 8b 15 e1 46 11 00 	mov    0x1146e1(%rip),%rdx        # 137038 <xBasePeriod>
   22957:	48 89 d0             	mov    %rdx,%rax
   2295a:	48 01 c0             	add    %rax,%rax
   2295d:	48 01 c2             	add    %rax,%rdx
   22960:	48 8b 05 61 e7 00 00 	mov    0xe761(%rip),%rax        # 310c8 <uxTick.3148>
   22967:	48 39 c2             	cmp    %rax,%rdx
   2296a:	75 2c                	jne    22998 <vTimerPeriodicISRTests+0x387>
   2296c:	e8 40 af fe ff       	callq  d8b1 <xTaskGetTickCountFromISR>
   22971:	48 89 c2             	mov    %rax,%rdx
   22974:	48 8b 05 ad 46 11 00 	mov    0x1146ad(%rip),%rax        # 137028 <xISROneShotTimer>
   2297b:	41 b8 00 00 00 00    	mov    $0x0,%r8d
   22981:	b9 00 00 00 00       	mov    $0x0,%ecx
   22986:	be 06 00 00 00       	mov    $0x6,%esi
   2298b:	48 89 c7             	mov    %rax,%rdi
   2298e:	e8 a2 ec fe ff       	callq  11635 <xTimerGenericCommand>
   22993:	e9 fb 05 00 00       	jmpq   22f93 <vTimerPeriodicISRTests+0x982>
   22998:	48 8b 15 99 46 11 00 	mov    0x114699(%rip),%rdx        # 137038 <xBasePeriod>
   2299f:	48 89 d0             	mov    %rdx,%rax
   229a2:	48 01 c0             	add    %rax,%rax
   229a5:	48 01 c2             	add    %rax,%rdx
   229a8:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   229ac:	48 01 c2             	add    %rax,%rdx
   229af:	48 8b 05 12 e7 00 00 	mov    0xe712(%rip),%rax        # 310c8 <uxTick.3148>
   229b6:	48 39 c2             	cmp    %rax,%rdx
   229b9:	0f 85 8f 00 00 00    	jne    22a4e <vTimerPeriodicISRTests+0x43d>
   229bf:	0f b6 05 5a 46 11 00 	movzbl 0x11465a(%rip),%eax        # 137020 <ucISRAutoReloadTimerCounter>
   229c6:	3c 03                	cmp    $0x3,%al
   229c8:	74 28                	je     229f2 <vTimerPeriodicISRTests+0x3e1>
   229ca:	48 c7 05 eb e6 00 00 	movq   $0x0,0xe6eb(%rip)        # 310c0 <xTestStatus>
   229d1:	00 00 00 00 
   229d5:	48 8b 05 e4 e6 00 00 	mov    0xe6e4(%rip),%rax        # 310c0 <xTestStatus>
   229dc:	48 85 c0             	test   %rax,%rax
   229df:	75 11                	jne    229f2 <vTimerPeriodicISRTests+0x3e1>
   229e1:	be ab 03 00 00       	mov    $0x3ab,%esi
   229e6:	48 8d 3d 2b 5a 00 00 	lea    0x5a2b(%rip),%rdi        # 28418 <xInterruptGivePeriod+0x628>
   229ed:	e8 1a 13 fe ff       	callq  3d0c <vAssertCalled>
   229f2:	0f b6 05 37 46 11 00 	movzbl 0x114637(%rip),%eax        # 137030 <ucISROneShotTimerCounter>
   229f9:	3c 01                	cmp    $0x1,%al
   229fb:	74 28                	je     22a25 <vTimerPeriodicISRTests+0x414>
   229fd:	48 c7 05 b8 e6 00 00 	movq   $0x0,0xe6b8(%rip)        # 310c0 <xTestStatus>
   22a04:	00 00 00 00 
   22a08:	48 8b 05 b1 e6 00 00 	mov    0xe6b1(%rip),%rax        # 310c0 <xTestStatus>
   22a0f:	48 85 c0             	test   %rax,%rax
   22a12:	75 11                	jne    22a25 <vTimerPeriodicISRTests+0x414>
   22a14:	be b1 03 00 00       	mov    $0x3b1,%esi
   22a19:	48 8d 3d f8 59 00 00 	lea    0x59f8(%rip),%rdi        # 28418 <xInterruptGivePeriod+0x628>
   22a20:	e8 e7 12 fe ff       	callq  3d0c <vAssertCalled>
   22a25:	48 8b 05 ec 45 11 00 	mov    0x1145ec(%rip),%rax        # 137018 <xISRAutoReloadTimer>
   22a2c:	41 b8 00 00 00 00    	mov    $0x0,%r8d
   22a32:	b9 00 00 00 00       	mov    $0x0,%ecx
   22a37:	ba 00 00 00 00       	mov    $0x0,%edx
   22a3c:	be 08 00 00 00       	mov    $0x8,%esi
   22a41:	48 89 c7             	mov    %rax,%rdi
   22a44:	e8 ec eb fe ff       	callq  11635 <xTimerGenericCommand>
   22a49:	e9 45 05 00 00       	jmpq   22f93 <vTimerPeriodicISRTests+0x982>
   22a4e:	48 8b 05 e3 45 11 00 	mov    0x1145e3(%rip),%rax        # 137038 <xBasePeriod>
   22a55:	48 2b 45 f8          	sub    -0x8(%rbp),%rax
   22a59:	48 8d 14 85 00 00 00 	lea    0x0(,%rax,4),%rdx
   22a60:	00 
   22a61:	48 8b 05 60 e6 00 00 	mov    0xe660(%rip),%rax        # 310c8 <uxTick.3148>
   22a68:	48 39 c2             	cmp    %rax,%rdx
   22a6b:	75 73                	jne    22ae0 <vTimerPeriodicISRTests+0x4cf>
   22a6d:	0f b6 05 ac 45 11 00 	movzbl 0x1145ac(%rip),%eax        # 137020 <ucISRAutoReloadTimerCounter>
   22a74:	3c 03                	cmp    $0x3,%al
   22a76:	74 28                	je     22aa0 <vTimerPeriodicISRTests+0x48f>
   22a78:	48 c7 05 3d e6 00 00 	movq   $0x0,0xe63d(%rip)        # 310c0 <xTestStatus>
   22a7f:	00 00 00 00 
   22a83:	48 8b 05 36 e6 00 00 	mov    0xe636(%rip),%rax        # 310c0 <xTestStatus>
   22a8a:	48 85 c0             	test   %rax,%rax
   22a8d:	75 11                	jne    22aa0 <vTimerPeriodicISRTests+0x48f>
   22a8f:	be c0 03 00 00       	mov    $0x3c0,%esi
   22a94:	48 8d 3d 7d 59 00 00 	lea    0x597d(%rip),%rdi        # 28418 <xInterruptGivePeriod+0x628>
   22a9b:	e8 6c 12 fe ff       	callq  3d0c <vAssertCalled>
   22aa0:	0f b6 05 89 45 11 00 	movzbl 0x114589(%rip),%eax        # 137030 <ucISROneShotTimerCounter>
   22aa7:	3c 01                	cmp    $0x1,%al
   22aa9:	0f 84 e4 04 00 00    	je     22f93 <vTimerPeriodicISRTests+0x982>
   22aaf:	48 c7 05 06 e6 00 00 	movq   $0x0,0xe606(%rip)        # 310c0 <xTestStatus>
   22ab6:	00 00 00 00 
   22aba:	48 8b 05 ff e5 00 00 	mov    0xe5ff(%rip),%rax        # 310c0 <xTestStatus>
   22ac1:	48 85 c0             	test   %rax,%rax
   22ac4:	0f 85 c9 04 00 00    	jne    22f93 <vTimerPeriodicISRTests+0x982>
   22aca:	be c6 03 00 00       	mov    $0x3c6,%esi
   22acf:	48 8d 3d 42 59 00 00 	lea    0x5942(%rip),%rdi        # 28418 <xInterruptGivePeriod+0x628>
   22ad6:	e8 31 12 fe ff       	callq  3d0c <vAssertCalled>
   22adb:	e9 b3 04 00 00       	jmpq   22f93 <vTimerPeriodicISRTests+0x982>
   22ae0:	48 8b 05 51 45 11 00 	mov    0x114551(%rip),%rax        # 137038 <xBasePeriod>
   22ae7:	48 8d 14 85 00 00 00 	lea    0x0(,%rax,4),%rdx
   22aee:	00 
   22aef:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   22af3:	48 01 c2             	add    %rax,%rdx
   22af6:	48 8b 05 cb e5 00 00 	mov    0xe5cb(%rip),%rax        # 310c8 <uxTick.3148>
   22afd:	48 39 c2             	cmp    %rax,%rdx
   22b00:	75 73                	jne    22b75 <vTimerPeriodicISRTests+0x564>
   22b02:	0f b6 05 17 45 11 00 	movzbl 0x114517(%rip),%eax        # 137020 <ucISRAutoReloadTimerCounter>
   22b09:	3c 03                	cmp    $0x3,%al
   22b0b:	74 28                	je     22b35 <vTimerPeriodicISRTests+0x524>
   22b0d:	48 c7 05 a8 e5 00 00 	movq   $0x0,0xe5a8(%rip)        # 310c0 <xTestStatus>
   22b14:	00 00 00 00 
   22b18:	48 8b 05 a1 e5 00 00 	mov    0xe5a1(%rip),%rax        # 310c0 <xTestStatus>
   22b1f:	48 85 c0             	test   %rax,%rax
   22b22:	75 11                	jne    22b35 <vTimerPeriodicISRTests+0x524>
   22b24:	be d1 03 00 00       	mov    $0x3d1,%esi
   22b29:	48 8d 3d e8 58 00 00 	lea    0x58e8(%rip),%rdi        # 28418 <xInterruptGivePeriod+0x628>
   22b30:	e8 d7 11 fe ff       	callq  3d0c <vAssertCalled>
   22b35:	0f b6 05 f4 44 11 00 	movzbl 0x1144f4(%rip),%eax        # 137030 <ucISROneShotTimerCounter>
   22b3c:	3c 02                	cmp    $0x2,%al
   22b3e:	0f 84 4f 04 00 00    	je     22f93 <vTimerPeriodicISRTests+0x982>
   22b44:	48 c7 05 71 e5 00 00 	movq   $0x0,0xe571(%rip)        # 310c0 <xTestStatus>
   22b4b:	00 00 00 00 
   22b4f:	48 8b 05 6a e5 00 00 	mov    0xe56a(%rip),%rax        # 310c0 <xTestStatus>
   22b56:	48 85 c0             	test   %rax,%rax
   22b59:	0f 85 34 04 00 00    	jne    22f93 <vTimerPeriodicISRTests+0x982>
   22b5f:	be d7 03 00 00       	mov    $0x3d7,%esi
   22b64:	48 8d 3d ad 58 00 00 	lea    0x58ad(%rip),%rdi        # 28418 <xInterruptGivePeriod+0x628>
   22b6b:	e8 9c 11 fe ff       	callq  3d0c <vAssertCalled>
   22b70:	e9 1e 04 00 00       	jmpq   22f93 <vTimerPeriodicISRTests+0x982>
   22b75:	48 8b 05 bc 44 11 00 	mov    0x1144bc(%rip),%rax        # 137038 <xBasePeriod>
   22b7c:	48 8d 14 c5 00 00 00 	lea    0x0(,%rax,8),%rdx
   22b83:	00 
   22b84:	48 8b 05 3d e5 00 00 	mov    0xe53d(%rip),%rax        # 310c8 <uxTick.3148>
   22b8b:	48 39 c2             	cmp    %rax,%rdx
   22b8e:	0f 85 92 00 00 00    	jne    22c26 <vTimerPeriodicISRTests+0x615>
   22b94:	0f b6 05 85 44 11 00 	movzbl 0x114485(%rip),%eax        # 137020 <ucISRAutoReloadTimerCounter>
   22b9b:	3c 03                	cmp    $0x3,%al
   22b9d:	74 28                	je     22bc7 <vTimerPeriodicISRTests+0x5b6>
   22b9f:	48 c7 05 16 e5 00 00 	movq   $0x0,0xe516(%rip)        # 310c0 <xTestStatus>
   22ba6:	00 00 00 00 
   22baa:	48 8b 05 0f e5 00 00 	mov    0xe50f(%rip),%rax        # 310c0 <xTestStatus>
   22bb1:	48 85 c0             	test   %rax,%rax
   22bb4:	75 11                	jne    22bc7 <vTimerPeriodicISRTests+0x5b6>
   22bb6:	be e2 03 00 00       	mov    $0x3e2,%esi
   22bbb:	48 8d 3d 56 58 00 00 	lea    0x5856(%rip),%rdi        # 28418 <xInterruptGivePeriod+0x628>
   22bc2:	e8 45 11 fe ff       	callq  3d0c <vAssertCalled>
   22bc7:	0f b6 05 62 44 11 00 	movzbl 0x114462(%rip),%eax        # 137030 <ucISROneShotTimerCounter>
   22bce:	3c 02                	cmp    $0x2,%al
   22bd0:	74 28                	je     22bfa <vTimerPeriodicISRTests+0x5e9>
   22bd2:	48 c7 05 e3 e4 00 00 	movq   $0x0,0xe4e3(%rip)        # 310c0 <xTestStatus>
   22bd9:	00 00 00 00 
   22bdd:	48 8b 05 dc e4 00 00 	mov    0xe4dc(%rip),%rax        # 310c0 <xTestStatus>
   22be4:	48 85 c0             	test   %rax,%rax
   22be7:	75 11                	jne    22bfa <vTimerPeriodicISRTests+0x5e9>
   22be9:	be e8 03 00 00       	mov    $0x3e8,%esi
   22bee:	48 8d 3d 23 58 00 00 	lea    0x5823(%rip),%rdi        # 28418 <xInterruptGivePeriod+0x628>
   22bf5:	e8 12 11 fe ff       	callq  3d0c <vAssertCalled>
   22bfa:	e8 b2 ac fe ff       	callq  d8b1 <xTaskGetTickCountFromISR>
   22bff:	48 89 c2             	mov    %rax,%rdx
   22c02:	48 8b 05 1f 44 11 00 	mov    0x11441f(%rip),%rax        # 137028 <xISROneShotTimer>
   22c09:	41 b8 00 00 00 00    	mov    $0x0,%r8d
   22c0f:	b9 00 00 00 00       	mov    $0x0,%ecx
   22c14:	be 07 00 00 00       	mov    $0x7,%esi
   22c19:	48 89 c7             	mov    %rax,%rdi
   22c1c:	e8 14 ea fe ff       	callq  11635 <xTimerGenericCommand>
   22c21:	e9 6d 03 00 00       	jmpq   22f93 <vTimerPeriodicISRTests+0x982>
   22c26:	48 8b 15 0b 44 11 00 	mov    0x11440b(%rip),%rdx        # 137038 <xBasePeriod>
   22c2d:	48 89 d0             	mov    %rdx,%rax
   22c30:	48 c1 e0 03          	shl    $0x3,%rax
   22c34:	48 01 d0             	add    %rdx,%rax
   22c37:	48 2b 45 f8          	sub    -0x8(%rbp),%rax
   22c3b:	48 89 c2             	mov    %rax,%rdx
   22c3e:	48 8b 05 83 e4 00 00 	mov    0xe483(%rip),%rax        # 310c8 <uxTick.3148>
   22c45:	48 39 c2             	cmp    %rax,%rdx
   22c48:	0f 85 92 00 00 00    	jne    22ce0 <vTimerPeriodicISRTests+0x6cf>
   22c4e:	0f b6 05 cb 43 11 00 	movzbl 0x1143cb(%rip),%eax        # 137020 <ucISRAutoReloadTimerCounter>
   22c55:	3c 03                	cmp    $0x3,%al
   22c57:	74 28                	je     22c81 <vTimerPeriodicISRTests+0x670>
   22c59:	48 c7 05 5c e4 00 00 	movq   $0x0,0xe45c(%rip)        # 310c0 <xTestStatus>
   22c60:	00 00 00 00 
   22c64:	48 8b 05 55 e4 00 00 	mov    0xe455(%rip),%rax        # 310c0 <xTestStatus>
   22c6b:	48 85 c0             	test   %rax,%rax
   22c6e:	75 11                	jne    22c81 <vTimerPeriodicISRTests+0x670>
   22c70:	be f6 03 00 00       	mov    $0x3f6,%esi
   22c75:	48 8d 3d 9c 57 00 00 	lea    0x579c(%rip),%rdi        # 28418 <xInterruptGivePeriod+0x628>
   22c7c:	e8 8b 10 fe ff       	callq  3d0c <vAssertCalled>
   22c81:	0f b6 05 a8 43 11 00 	movzbl 0x1143a8(%rip),%eax        # 137030 <ucISROneShotTimerCounter>
   22c88:	3c 02                	cmp    $0x2,%al
   22c8a:	74 28                	je     22cb4 <vTimerPeriodicISRTests+0x6a3>
   22c8c:	48 c7 05 29 e4 00 00 	movq   $0x0,0xe429(%rip)        # 310c0 <xTestStatus>
   22c93:	00 00 00 00 
   22c97:	48 8b 05 22 e4 00 00 	mov    0xe422(%rip),%rax        # 310c0 <xTestStatus>
   22c9e:	48 85 c0             	test   %rax,%rax
   22ca1:	75 11                	jne    22cb4 <vTimerPeriodicISRTests+0x6a3>
   22ca3:	be fc 03 00 00       	mov    $0x3fc,%esi
   22ca8:	48 8d 3d 69 57 00 00 	lea    0x5769(%rip),%rdi        # 28418 <xInterruptGivePeriod+0x628>
   22caf:	e8 58 10 fe ff       	callq  3d0c <vAssertCalled>
   22cb4:	e8 f8 ab fe ff       	callq  d8b1 <xTaskGetTickCountFromISR>
   22cb9:	48 89 c2             	mov    %rax,%rdx
   22cbc:	48 8b 05 65 43 11 00 	mov    0x114365(%rip),%rax        # 137028 <xISROneShotTimer>
   22cc3:	41 b8 00 00 00 00    	mov    $0x0,%r8d
   22cc9:	b9 00 00 00 00       	mov    $0x0,%ecx
   22cce:	be 07 00 00 00       	mov    $0x7,%esi
   22cd3:	48 89 c7             	mov    %rax,%rdi
   22cd6:	e8 5a e9 fe ff       	callq  11635 <xTimerGenericCommand>
   22cdb:	e9 b3 02 00 00       	jmpq   22f93 <vTimerPeriodicISRTests+0x982>
   22ce0:	48 8b 15 51 43 11 00 	mov    0x114351(%rip),%rdx        # 137038 <xBasePeriod>
   22ce7:	48 89 d0             	mov    %rdx,%rax
   22cea:	48 c1 e0 02          	shl    $0x2,%rax
   22cee:	48 01 d0             	add    %rdx,%rax
   22cf1:	48 2b 45 f8          	sub    -0x8(%rbp),%rax
   22cf5:	48 8d 14 00          	lea    (%rax,%rax,1),%rdx
   22cf9:	48 8b 05 c8 e3 00 00 	mov    0xe3c8(%rip),%rax        # 310c8 <uxTick.3148>
   22d00:	48 39 c2             	cmp    %rax,%rdx
   22d03:	0f 85 92 00 00 00    	jne    22d9b <vTimerPeriodicISRTests+0x78a>
   22d09:	0f b6 05 10 43 11 00 	movzbl 0x114310(%rip),%eax        # 137020 <ucISRAutoReloadTimerCounter>
   22d10:	3c 03                	cmp    $0x3,%al
   22d12:	74 28                	je     22d3c <vTimerPeriodicISRTests+0x72b>
   22d14:	48 c7 05 a1 e3 00 00 	movq   $0x0,0xe3a1(%rip)        # 310c0 <xTestStatus>
   22d1b:	00 00 00 00 
   22d1f:	48 8b 05 9a e3 00 00 	mov    0xe39a(%rip),%rax        # 310c0 <xTestStatus>
   22d26:	48 85 c0             	test   %rax,%rax
   22d29:	75 11                	jne    22d3c <vTimerPeriodicISRTests+0x72b>
   22d2b:	be 09 04 00 00       	mov    $0x409,%esi
   22d30:	48 8d 3d e1 56 00 00 	lea    0x56e1(%rip),%rdi        # 28418 <xInterruptGivePeriod+0x628>
   22d37:	e8 d0 0f fe ff       	callq  3d0c <vAssertCalled>
   22d3c:	0f b6 05 ed 42 11 00 	movzbl 0x1142ed(%rip),%eax        # 137030 <ucISROneShotTimerCounter>
   22d43:	3c 02                	cmp    $0x2,%al
   22d45:	74 28                	je     22d6f <vTimerPeriodicISRTests+0x75e>
   22d47:	48 c7 05 6e e3 00 00 	movq   $0x0,0xe36e(%rip)        # 310c0 <xTestStatus>
   22d4e:	00 00 00 00 
   22d52:	48 8b 05 67 e3 00 00 	mov    0xe367(%rip),%rax        # 310c0 <xTestStatus>
   22d59:	48 85 c0             	test   %rax,%rax
   22d5c:	75 11                	jne    22d6f <vTimerPeriodicISRTests+0x75e>
   22d5e:	be 0f 04 00 00       	mov    $0x40f,%esi
   22d63:	48 8d 3d ae 56 00 00 	lea    0x56ae(%rip),%rdi        # 28418 <xInterruptGivePeriod+0x628>
   22d6a:	e8 9d 0f fe ff       	callq  3d0c <vAssertCalled>
   22d6f:	e8 3d ab fe ff       	callq  d8b1 <xTaskGetTickCountFromISR>
   22d74:	48 89 c2             	mov    %rax,%rdx
   22d77:	48 8b 05 aa 42 11 00 	mov    0x1142aa(%rip),%rax        # 137028 <xISROneShotTimer>
   22d7e:	41 b8 00 00 00 00    	mov    $0x0,%r8d
   22d84:	b9 00 00 00 00       	mov    $0x0,%ecx
   22d89:	be 07 00 00 00       	mov    $0x7,%esi
   22d8e:	48 89 c7             	mov    %rax,%rdi
   22d91:	e8 9f e8 fe ff       	callq  11635 <xTimerGenericCommand>
   22d96:	e9 f8 01 00 00       	jmpq   22f93 <vTimerPeriodicISRTests+0x982>
   22d9b:	48 8b 15 96 42 11 00 	mov    0x114296(%rip),%rdx        # 137038 <xBasePeriod>
   22da2:	48 89 d0             	mov    %rdx,%rax
   22da5:	48 c1 e0 02          	shl    $0x2,%rax
   22da9:	48 01 d0             	add    %rdx,%rax
   22dac:	48 01 c0             	add    %rax,%rax
   22daf:	48 8d 0c 10          	lea    (%rax,%rdx,1),%rcx
   22db3:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
   22db7:	48 89 d0             	mov    %rdx,%rax
   22dba:	48 01 c0             	add    %rax,%rax
   22dbd:	48 01 d0             	add    %rdx,%rax
   22dc0:	48 29 c1             	sub    %rax,%rcx
   22dc3:	48 89 ca             	mov    %rcx,%rdx
   22dc6:	48 8b 05 fb e2 00 00 	mov    0xe2fb(%rip),%rax        # 310c8 <uxTick.3148>
   22dcd:	48 39 c2             	cmp    %rax,%rdx
   22dd0:	0f 85 92 00 00 00    	jne    22e68 <vTimerPeriodicISRTests+0x857>
   22dd6:	0f b6 05 43 42 11 00 	movzbl 0x114243(%rip),%eax        # 137020 <ucISRAutoReloadTimerCounter>
   22ddd:	3c 03                	cmp    $0x3,%al
   22ddf:	74 28                	je     22e09 <vTimerPeriodicISRTests+0x7f8>
   22de1:	48 c7 05 d4 e2 00 00 	movq   $0x0,0xe2d4(%rip)        # 310c0 <xTestStatus>
   22de8:	00 00 00 00 
   22dec:	48 8b 05 cd e2 00 00 	mov    0xe2cd(%rip),%rax        # 310c0 <xTestStatus>
   22df3:	48 85 c0             	test   %rax,%rax
   22df6:	75 11                	jne    22e09 <vTimerPeriodicISRTests+0x7f8>
   22df8:	be 1c 04 00 00       	mov    $0x41c,%esi
   22dfd:	48 8d 3d 14 56 00 00 	lea    0x5614(%rip),%rdi        # 28418 <xInterruptGivePeriod+0x628>
   22e04:	e8 03 0f fe ff       	callq  3d0c <vAssertCalled>
   22e09:	0f b6 05 20 42 11 00 	movzbl 0x114220(%rip),%eax        # 137030 <ucISROneShotTimerCounter>
   22e10:	3c 02                	cmp    $0x2,%al
   22e12:	74 28                	je     22e3c <vTimerPeriodicISRTests+0x82b>
   22e14:	48 c7 05 a1 e2 00 00 	movq   $0x0,0xe2a1(%rip)        # 310c0 <xTestStatus>
   22e1b:	00 00 00 00 
   22e1f:	48 8b 05 9a e2 00 00 	mov    0xe29a(%rip),%rax        # 310c0 <xTestStatus>
   22e26:	48 85 c0             	test   %rax,%rax
   22e29:	75 11                	jne    22e3c <vTimerPeriodicISRTests+0x82b>
   22e2b:	be 22 04 00 00       	mov    $0x422,%esi
   22e30:	48 8d 3d e1 55 00 00 	lea    0x55e1(%rip),%rdi        # 28418 <xInterruptGivePeriod+0x628>
   22e37:	e8 d0 0e fe ff       	callq  3d0c <vAssertCalled>
   22e3c:	e8 70 aa fe ff       	callq  d8b1 <xTaskGetTickCountFromISR>
   22e41:	48 89 c2             	mov    %rax,%rdx
   22e44:	48 8b 05 dd 41 11 00 	mov    0x1141dd(%rip),%rax        # 137028 <xISROneShotTimer>
   22e4b:	41 b8 00 00 00 00    	mov    $0x0,%r8d
   22e51:	b9 00 00 00 00       	mov    $0x0,%ecx
   22e56:	be 07 00 00 00       	mov    $0x7,%esi
   22e5b:	48 89 c7             	mov    %rax,%rdi
   22e5e:	e8 d2 e7 fe ff       	callq  11635 <xTimerGenericCommand>
   22e63:	e9 2b 01 00 00       	jmpq   22f93 <vTimerPeriodicISRTests+0x982>
   22e68:	48 8b 15 c9 41 11 00 	mov    0x1141c9(%rip),%rdx        # 137038 <xBasePeriod>
   22e6f:	48 89 d0             	mov    %rdx,%rax
   22e72:	48 01 c0             	add    %rax,%rax
   22e75:	48 01 d0             	add    %rdx,%rax
   22e78:	48 01 c0             	add    %rax,%rax
   22e7b:	48 2b 45 f8          	sub    -0x8(%rbp),%rax
   22e7f:	48 8d 14 00          	lea    (%rax,%rax,1),%rdx
   22e83:	48 8b 05 3e e2 00 00 	mov    0xe23e(%rip),%rax        # 310c8 <uxTick.3148>
   22e8a:	48 39 c2             	cmp    %rax,%rdx
   22e8d:	75 73                	jne    22f02 <vTimerPeriodicISRTests+0x8f1>
   22e8f:	0f b6 05 8a 41 11 00 	movzbl 0x11418a(%rip),%eax        # 137020 <ucISRAutoReloadTimerCounter>
   22e96:	3c 03                	cmp    $0x3,%al
   22e98:	74 28                	je     22ec2 <vTimerPeriodicISRTests+0x8b1>
   22e9a:	48 c7 05 1b e2 00 00 	movq   $0x0,0xe21b(%rip)        # 310c0 <xTestStatus>
   22ea1:	00 00 00 00 
   22ea5:	48 8b 05 14 e2 00 00 	mov    0xe214(%rip),%rax        # 310c0 <xTestStatus>
   22eac:	48 85 c0             	test   %rax,%rax
   22eaf:	75 11                	jne    22ec2 <vTimerPeriodicISRTests+0x8b1>
   22eb1:	be 31 04 00 00       	mov    $0x431,%esi
   22eb6:	48 8d 3d 5b 55 00 00 	lea    0x555b(%rip),%rdi        # 28418 <xInterruptGivePeriod+0x628>
   22ebd:	e8 4a 0e fe ff       	callq  3d0c <vAssertCalled>
   22ec2:	0f b6 05 67 41 11 00 	movzbl 0x114167(%rip),%eax        # 137030 <ucISROneShotTimerCounter>
   22ec9:	3c 03                	cmp    $0x3,%al
   22ecb:	0f 84 c2 00 00 00    	je     22f93 <vTimerPeriodicISRTests+0x982>
   22ed1:	48 c7 05 e4 e1 00 00 	movq   $0x0,0xe1e4(%rip)        # 310c0 <xTestStatus>
   22ed8:	00 00 00 00 
   22edc:	48 8b 05 dd e1 00 00 	mov    0xe1dd(%rip),%rax        # 310c0 <xTestStatus>
   22ee3:	48 85 c0             	test   %rax,%rax
   22ee6:	0f 85 a7 00 00 00    	jne    22f93 <vTimerPeriodicISRTests+0x982>
   22eec:	be 37 04 00 00       	mov    $0x437,%esi
   22ef1:	48 8d 3d 20 55 00 00 	lea    0x5520(%rip),%rdi        # 28418 <xInterruptGivePeriod+0x628>
   22ef8:	e8 0f 0e fe ff       	callq  3d0c <vAssertCalled>
   22efd:	e9 91 00 00 00       	jmpq   22f93 <vTimerPeriodicISRTests+0x982>
   22f02:	48 8b 15 2f 41 11 00 	mov    0x11412f(%rip),%rdx        # 137038 <xBasePeriod>
   22f09:	48 89 d0             	mov    %rdx,%rax
   22f0c:	48 c1 e0 04          	shl    $0x4,%rax
   22f10:	48 29 d0             	sub    %rdx,%rax
   22f13:	48 89 c2             	mov    %rax,%rdx
   22f16:	48 8b 05 ab e1 00 00 	mov    0xe1ab(%rip),%rax        # 310c8 <uxTick.3148>
   22f1d:	48 39 c2             	cmp    %rax,%rdx
   22f20:	75 71                	jne    22f93 <vTimerPeriodicISRTests+0x982>
   22f22:	0f b6 05 f7 40 11 00 	movzbl 0x1140f7(%rip),%eax        # 137020 <ucISRAutoReloadTimerCounter>
   22f29:	3c 03                	cmp    $0x3,%al
   22f2b:	74 28                	je     22f55 <vTimerPeriodicISRTests+0x944>
   22f2d:	48 c7 05 88 e1 00 00 	movq   $0x0,0xe188(%rip)        # 310c0 <xTestStatus>
   22f34:	00 00 00 00 
   22f38:	48 8b 05 81 e1 00 00 	mov    0xe181(%rip),%rax        # 310c0 <xTestStatus>
   22f3f:	48 85 c0             	test   %rax,%rax
   22f42:	75 11                	jne    22f55 <vTimerPeriodicISRTests+0x944>
   22f44:	be 42 04 00 00       	mov    $0x442,%esi
   22f49:	48 8d 3d c8 54 00 00 	lea    0x54c8(%rip),%rdi        # 28418 <xInterruptGivePeriod+0x628>
   22f50:	e8 b7 0d fe ff       	callq  3d0c <vAssertCalled>
   22f55:	0f b6 05 d4 40 11 00 	movzbl 0x1140d4(%rip),%eax        # 137030 <ucISROneShotTimerCounter>
   22f5c:	3c 03                	cmp    $0x3,%al
   22f5e:	74 28                	je     22f88 <vTimerPeriodicISRTests+0x977>
   22f60:	48 c7 05 55 e1 00 00 	movq   $0x0,0xe155(%rip)        # 310c0 <xTestStatus>
   22f67:	00 00 00 00 
   22f6b:	48 8b 05 4e e1 00 00 	mov    0xe14e(%rip),%rax        # 310c0 <xTestStatus>
   22f72:	48 85 c0             	test   %rax,%rax
   22f75:	75 11                	jne    22f88 <vTimerPeriodicISRTests+0x977>
   22f77:	be 48 04 00 00       	mov    $0x448,%esi
   22f7c:	48 8d 3d 95 54 00 00 	lea    0x5495(%rip),%rdi        # 28418 <xInterruptGivePeriod+0x628>
   22f83:	e8 84 0d fe ff       	callq  3d0c <vAssertCalled>
   22f88:	48 c7 05 35 e1 00 00 	movq   $0xffffffffffffffff,0xe135(%rip)        # 310c8 <uxTick.3148>
   22f8f:	ff ff ff ff 
   22f93:	90                   	nop
   22f94:	c9                   	leaveq 
   22f95:	c3                   	retq   

0000000000022f96 <prvAutoReloadTimerCallback>:
   22f96:	f3 0f 1e fa          	endbr64 
   22f9a:	55                   	push   %rbp
   22f9b:	48 89 e5             	mov    %rsp,%rbp
   22f9e:	48 83 ec 20          	sub    $0x20,%rsp
   22fa2:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
   22fa6:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
   22faa:	48 89 c7             	mov    %rax,%rdi
   22fad:	e8 ef f3 fe ff       	callq  123a1 <pvTimerGetTimerID>
   22fb2:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
   22fb6:	48 83 7d f8 15       	cmpq   $0x15,-0x8(%rbp)
   22fbb:	77 60                	ja     2301d <prvAutoReloadTimerCallback+0x87>
   22fbd:	48 8d 15 2c 40 11 00 	lea    0x11402c(%rip),%rdx        # 136ff0 <ucAutoReloadTimerCounters>
   22fc4:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   22fc8:	48 01 d0             	add    %rdx,%rax
   22fcb:	0f b6 00             	movzbl (%rax),%eax
   22fce:	8d 50 01             	lea    0x1(%rax),%edx
   22fd1:	48 8d 0d 18 40 11 00 	lea    0x114018(%rip),%rcx        # 136ff0 <ucAutoReloadTimerCounters>
   22fd8:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   22fdc:	48 01 c8             	add    %rcx,%rax
   22fdf:	88 10                	mov    %dl,(%rax)
   22fe1:	48 83 7d f8 00       	cmpq   $0x0,-0x8(%rbp)
   22fe6:	75 5d                	jne    23045 <prvAutoReloadTimerCallback+0xaf>
   22fe8:	0f b6 05 16 40 11 00 	movzbl 0x114016(%rip),%eax        # 137005 <ucIsStopNeededInTimerZeroCallback>
   22fef:	3c 01                	cmp    $0x1,%al
   22ff1:	75 52                	jne    23045 <prvAutoReloadTimerCallback+0xaf>
   22ff3:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
   22ff7:	41 b8 00 00 00 00    	mov    $0x0,%r8d
   22ffd:	b9 00 00 00 00       	mov    $0x0,%ecx
   23002:	ba 00 00 00 00       	mov    $0x0,%edx
   23007:	be 03 00 00 00       	mov    $0x3,%esi
   2300c:	48 89 c7             	mov    %rax,%rdi
   2300f:	e8 21 e6 fe ff       	callq  11635 <xTimerGenericCommand>
   23014:	c6 05 ea 3f 11 00 00 	movb   $0x0,0x113fea(%rip)        # 137005 <ucIsStopNeededInTimerZeroCallback>
   2301b:	eb 28                	jmp    23045 <prvAutoReloadTimerCallback+0xaf>
   2301d:	48 c7 05 98 e0 00 00 	movq   $0x0,0xe098(%rip)        # 310c0 <xTestStatus>
   23024:	00 00 00 00 
   23028:	48 8b 05 91 e0 00 00 	mov    0xe091(%rip),%rax        # 310c0 <xTestStatus>
   2302f:	48 85 c0             	test   %rax,%rax
   23032:	75 11                	jne    23045 <prvAutoReloadTimerCallback+0xaf>
   23034:	be 67 04 00 00       	mov    $0x467,%esi
   23039:	48 8d 3d d8 53 00 00 	lea    0x53d8(%rip),%rdi        # 28418 <xInterruptGivePeriod+0x628>
   23040:	e8 c7 0c fe ff       	callq  3d0c <vAssertCalled>
   23045:	90                   	nop
   23046:	c9                   	leaveq 
   23047:	c3                   	retq   

0000000000023048 <prvOneShotTimerCallback>:
   23048:	f3 0f 1e fa          	endbr64 
   2304c:	55                   	push   %rbp
   2304d:	48 89 e5             	mov    %rsp,%rbp
   23050:	48 83 ec 20          	sub    $0x20,%rsp
   23054:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
   23058:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
   2305c:	48 89 c7             	mov    %rax,%rdi
   2305f:	e8 3d f3 fe ff       	callq  123a1 <pvTimerGetTimerID>
   23064:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
   23068:	48 8b 05 e9 3f 11 00 	mov    0x113fe9(%rip),%rax        # 137058 <uxCallCount.3157>
   2306f:	48 39 45 f8          	cmp    %rax,-0x8(%rbp)
   23073:	74 11                	je     23086 <prvOneShotTimerCallback+0x3e>
   23075:	be 77 04 00 00       	mov    $0x477,%esi
   2307a:	48 8d 3d 97 53 00 00 	lea    0x5397(%rip),%rdi        # 28418 <xInterruptGivePeriod+0x628>
   23081:	e8 86 0c fe ff       	callq  3d0c <vAssertCalled>
   23086:	48 83 45 f8 01       	addq   $0x1,-0x8(%rbp)
   2308b:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
   2308f:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
   23093:	48 89 d6             	mov    %rdx,%rsi
   23096:	48 89 c7             	mov    %rax,%rdi
   23099:	e8 4f f3 fe ff       	callq  123ed <vTimerSetTimerID>
   2309e:	48 8b 05 b3 3f 11 00 	mov    0x113fb3(%rip),%rax        # 137058 <uxCallCount.3157>
   230a5:	48 83 c0 01          	add    $0x1,%rax
   230a9:	48 89 05 a8 3f 11 00 	mov    %rax,0x113fa8(%rip)        # 137058 <uxCallCount.3157>
   230b0:	0f b6 05 59 3f 11 00 	movzbl 0x113f59(%rip),%eax        # 137010 <ucOneShotTimerCounter>
   230b7:	83 c0 01             	add    $0x1,%eax
   230ba:	88 05 50 3f 11 00    	mov    %al,0x113f50(%rip)        # 137010 <ucOneShotTimerCounter>
   230c0:	90                   	nop
   230c1:	c9                   	leaveq 
   230c2:	c3                   	retq   

00000000000230c3 <prvISRAutoReloadTimerCallback>:
   230c3:	f3 0f 1e fa          	endbr64 
   230c7:	55                   	push   %rbp
   230c8:	48 89 e5             	mov    %rsp,%rbp
   230cb:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   230cf:	0f b6 05 4a 3f 11 00 	movzbl 0x113f4a(%rip),%eax        # 137020 <ucISRAutoReloadTimerCounter>
   230d6:	83 c0 01             	add    $0x1,%eax
   230d9:	88 05 41 3f 11 00    	mov    %al,0x113f41(%rip)        # 137020 <ucISRAutoReloadTimerCounter>
   230df:	90                   	nop
   230e0:	5d                   	pop    %rbp
   230e1:	c3                   	retq   

00000000000230e2 <prvISROneShotTimerCallback>:
   230e2:	f3 0f 1e fa          	endbr64 
   230e6:	55                   	push   %rbp
   230e7:	48 89 e5             	mov    %rsp,%rbp
   230ea:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   230ee:	0f b6 05 3b 3f 11 00 	movzbl 0x113f3b(%rip),%eax        # 137030 <ucISROneShotTimerCounter>
   230f5:	83 c0 01             	add    $0x1,%eax
   230f8:	88 05 32 3f 11 00    	mov    %al,0x113f32(%rip)        # 137030 <ucISROneShotTimerCounter>
   230fe:	90                   	nop
   230ff:	5d                   	pop    %rbp
   23100:	c3                   	retq   

0000000000023101 <prvTraceGetQueueNumber>:
   23101:	f3 0f 1e fa          	endbr64 
   23105:	55                   	push   %rbp
   23106:	48 89 e5             	mov    %rsp,%rbp
   23109:	48 83 ec 10          	sub    $0x10,%rsp
   2310d:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   23111:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   23115:	48 89 c7             	mov    %rax,%rdi
   23118:	e8 c2 4f fe ff       	callq  80df <uxQueueGetQueueNumber>
   2311d:	c9                   	leaveq 
   2311e:	c3                   	retq   

000000000002311f <prvTraceGetQueueType>:
   2311f:	f3 0f 1e fa          	endbr64 
   23123:	55                   	push   %rbp
   23124:	48 89 e5             	mov    %rsp,%rbp
   23127:	48 83 ec 10          	sub    $0x10,%rsp
   2312b:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   2312f:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   23133:	48 89 c7             	mov    %rax,%rdi
   23136:	e8 df 4f fe ff       	callq  811a <ucQueueGetQueueType>
   2313b:	c9                   	leaveq 
   2313c:	c3                   	retq   

000000000002313d <prvTraceGetTaskNumberLow16>:
   2313d:	f3 0f 1e fa          	endbr64 
   23141:	55                   	push   %rbp
   23142:	48 89 e5             	mov    %rsp,%rbp
   23145:	48 83 ec 10          	sub    $0x10,%rsp
   23149:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   2314d:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   23151:	48 89 c7             	mov    %rax,%rdi
   23154:	e8 88 bf fe ff       	callq  f0e1 <uxTaskGetTaskNumber>
   23159:	c9                   	leaveq 
   2315a:	c3                   	retq   

000000000002315b <prvTraceGetTaskNumberHigh16>:
   2315b:	f3 0f 1e fa          	endbr64 
   2315f:	55                   	push   %rbp
   23160:	48 89 e5             	mov    %rsp,%rbp
   23163:	48 83 ec 10          	sub    $0x10,%rsp
   23167:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   2316b:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   2316f:	48 89 c7             	mov    %rax,%rdi
   23172:	e8 6a bf fe ff       	callq  f0e1 <uxTaskGetTaskNumber>
   23177:	48 c1 e8 10          	shr    $0x10,%rax
   2317b:	c9                   	leaveq 
   2317c:	c3                   	retq   

000000000002317d <prvTraceSetTaskNumberLow16>:
   2317d:	f3 0f 1e fa          	endbr64 
   23181:	55                   	push   %rbp
   23182:	48 89 e5             	mov    %rsp,%rbp
   23185:	48 83 ec 10          	sub    $0x10,%rsp
   23189:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   2318d:	89 f0                	mov    %esi,%eax
   2318f:	66 89 45 f4          	mov    %ax,-0xc(%rbp)
   23193:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   23197:	48 89 c7             	mov    %rax,%rdi
   2319a:	e8 42 bf fe ff       	callq  f0e1 <uxTaskGetTaskNumber>
   2319f:	25 00 00 ff ff       	and    $0xffff0000,%eax
   231a4:	48 89 c2             	mov    %rax,%rdx
   231a7:	0f b7 45 f4          	movzwl -0xc(%rbp),%eax
   231ab:	48 09 c2             	or     %rax,%rdx
   231ae:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   231b2:	48 89 d6             	mov    %rdx,%rsi
   231b5:	48 89 c7             	mov    %rax,%rdi
   231b8:	e8 5e bf fe ff       	callq  f11b <vTaskSetTaskNumber>
   231bd:	90                   	nop
   231be:	c9                   	leaveq 
   231bf:	c3                   	retq   

00000000000231c0 <prvTraceSetTaskNumberHigh16>:
   231c0:	f3 0f 1e fa          	endbr64 
   231c4:	55                   	push   %rbp
   231c5:	48 89 e5             	mov    %rsp,%rbp
   231c8:	48 83 ec 10          	sub    $0x10,%rsp
   231cc:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   231d0:	89 f0                	mov    %esi,%eax
   231d2:	66 89 45 f4          	mov    %ax,-0xc(%rbp)
   231d6:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   231da:	48 89 c7             	mov    %rax,%rdi
   231dd:	e8 ff be fe ff       	callq  f0e1 <uxTaskGetTaskNumber>
   231e2:	0f b7 c0             	movzwl %ax,%eax
   231e5:	0f b7 55 f4          	movzwl -0xc(%rbp),%edx
   231e9:	c1 e2 10             	shl    $0x10,%edx
   231ec:	89 d2                	mov    %edx,%edx
   231ee:	48 09 c2             	or     %rax,%rdx
   231f1:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   231f5:	48 89 d6             	mov    %rdx,%rsi
   231f8:	48 89 c7             	mov    %rax,%rdi
   231fb:	e8 1b bf fe ff       	callq  f11b <vTaskSetTaskNumber>
   23200:	90                   	nop
   23201:	c9                   	leaveq 
   23202:	c3                   	retq   

0000000000023203 <prvTraceGetQueueNumberLow16>:
   23203:	f3 0f 1e fa          	endbr64 
   23207:	55                   	push   %rbp
   23208:	48 89 e5             	mov    %rsp,%rbp
   2320b:	48 83 ec 10          	sub    $0x10,%rsp
   2320f:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   23213:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   23217:	48 89 c7             	mov    %rax,%rdi
   2321a:	e8 e2 fe ff ff       	callq  23101 <prvTraceGetQueueNumber>
   2321f:	c9                   	leaveq 
   23220:	c3                   	retq   

0000000000023221 <prvTraceGetQueueNumberHigh16>:
   23221:	f3 0f 1e fa          	endbr64 
   23225:	55                   	push   %rbp
   23226:	48 89 e5             	mov    %rsp,%rbp
   23229:	48 83 ec 10          	sub    $0x10,%rsp
   2322d:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   23231:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   23235:	48 89 c7             	mov    %rax,%rdi
   23238:	e8 c4 fe ff ff       	callq  23101 <prvTraceGetQueueNumber>
   2323d:	c1 e8 10             	shr    $0x10,%eax
   23240:	c9                   	leaveq 
   23241:	c3                   	retq   

0000000000023242 <prvTraceSetQueueNumberLow16>:
   23242:	f3 0f 1e fa          	endbr64 
   23246:	55                   	push   %rbp
   23247:	48 89 e5             	mov    %rsp,%rbp
   2324a:	48 83 ec 10          	sub    $0x10,%rsp
   2324e:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   23252:	89 f0                	mov    %esi,%eax
   23254:	66 89 45 f4          	mov    %ax,-0xc(%rbp)
   23258:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   2325c:	48 89 c7             	mov    %rax,%rdi
   2325f:	e8 9d fe ff ff       	callq  23101 <prvTraceGetQueueNumber>
   23264:	66 b8 00 00          	mov    $0x0,%ax
   23268:	89 c2                	mov    %eax,%edx
   2326a:	0f b7 45 f4          	movzwl -0xc(%rbp),%eax
   2326e:	09 d0                	or     %edx,%eax
   23270:	89 c2                	mov    %eax,%edx
   23272:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   23276:	48 89 d6             	mov    %rdx,%rsi
   23279:	48 89 c7             	mov    %rax,%rdi
   2327c:	e8 77 4e fe ff       	callq  80f8 <vQueueSetQueueNumber>
   23281:	90                   	nop
   23282:	c9                   	leaveq 
   23283:	c3                   	retq   

0000000000023284 <prvTraceSetQueueNumberHigh16>:
   23284:	f3 0f 1e fa          	endbr64 
   23288:	55                   	push   %rbp
   23289:	48 89 e5             	mov    %rsp,%rbp
   2328c:	48 83 ec 10          	sub    $0x10,%rsp
   23290:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   23294:	89 f0                	mov    %esi,%eax
   23296:	66 89 45 f4          	mov    %ax,-0xc(%rbp)
   2329a:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   2329e:	48 89 c7             	mov    %rax,%rdi
   232a1:	e8 5b fe ff ff       	callq  23101 <prvTraceGetQueueNumber>
   232a6:	0f b7 c0             	movzwl %ax,%eax
   232a9:	0f b7 55 f4          	movzwl -0xc(%rbp),%edx
   232ad:	c1 e2 10             	shl    $0x10,%edx
   232b0:	09 d0                	or     %edx,%eax
   232b2:	89 c2                	mov    %eax,%edx
   232b4:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   232b8:	48 89 d6             	mov    %rdx,%rsi
   232bb:	48 89 c7             	mov    %rax,%rdi
   232be:	e8 35 4e fe ff       	callq  80f8 <vQueueSetQueueNumber>
   232c3:	90                   	nop
   232c4:	c9                   	leaveq 
   232c5:	c3                   	retq   

00000000000232c6 <prvTraceGetTimerNumberLow16>:
   232c6:	f3 0f 1e fa          	endbr64 
   232ca:	55                   	push   %rbp
   232cb:	48 89 e5             	mov    %rsp,%rbp
   232ce:	48 83 ec 10          	sub    $0x10,%rsp
   232d2:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   232d6:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   232da:	48 89 c7             	mov    %rax,%rdi
   232dd:	e8 69 f3 fe ff       	callq  1264b <uxTimerGetTimerNumber>
   232e2:	c9                   	leaveq 
   232e3:	c3                   	retq   

00000000000232e4 <prvTraceGetTimerNumberHigh16>:
   232e4:	f3 0f 1e fa          	endbr64 
   232e8:	55                   	push   %rbp
   232e9:	48 89 e5             	mov    %rsp,%rbp
   232ec:	48 83 ec 10          	sub    $0x10,%rsp
   232f0:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   232f4:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   232f8:	48 89 c7             	mov    %rax,%rdi
   232fb:	e8 4b f3 fe ff       	callq  1264b <uxTimerGetTimerNumber>
   23300:	48 c1 e8 10          	shr    $0x10,%rax
   23304:	c9                   	leaveq 
   23305:	c3                   	retq   

0000000000023306 <prvTraceSetTimerNumberLow16>:
   23306:	f3 0f 1e fa          	endbr64 
   2330a:	55                   	push   %rbp
   2330b:	48 89 e5             	mov    %rsp,%rbp
   2330e:	48 83 ec 10          	sub    $0x10,%rsp
   23312:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   23316:	89 f0                	mov    %esi,%eax
   23318:	66 89 45 f4          	mov    %ax,-0xc(%rbp)
   2331c:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   23320:	48 89 c7             	mov    %rax,%rdi
   23323:	e8 23 f3 fe ff       	callq  1264b <uxTimerGetTimerNumber>
   23328:	25 00 00 ff ff       	and    $0xffff0000,%eax
   2332d:	48 89 c2             	mov    %rax,%rdx
   23330:	0f b7 45 f4          	movzwl -0xc(%rbp),%eax
   23334:	48 09 c2             	or     %rax,%rdx
   23337:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   2333b:	48 89 d6             	mov    %rdx,%rsi
   2333e:	48 89 c7             	mov    %rax,%rdi
   23341:	e8 1b f3 fe ff       	callq  12661 <vTimerSetTimerNumber>
   23346:	90                   	nop
   23347:	c9                   	leaveq 
   23348:	c3                   	retq   

0000000000023349 <prvTraceSetTimerNumberHigh16>:
   23349:	f3 0f 1e fa          	endbr64 
   2334d:	55                   	push   %rbp
   2334e:	48 89 e5             	mov    %rsp,%rbp
   23351:	48 83 ec 10          	sub    $0x10,%rsp
   23355:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   23359:	89 f0                	mov    %esi,%eax
   2335b:	66 89 45 f4          	mov    %ax,-0xc(%rbp)
   2335f:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   23363:	48 89 c7             	mov    %rax,%rdi
   23366:	e8 e0 f2 fe ff       	callq  1264b <uxTimerGetTimerNumber>
   2336b:	0f b7 c0             	movzwl %ax,%eax
   2336e:	0f b7 55 f4          	movzwl -0xc(%rbp),%edx
   23372:	c1 e2 10             	shl    $0x10,%edx
   23375:	89 d2                	mov    %edx,%edx
   23377:	48 09 c2             	or     %rax,%rdx
   2337a:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   2337e:	48 89 d6             	mov    %rdx,%rsi
   23381:	48 89 c7             	mov    %rax,%rdi
   23384:	e8 d8 f2 fe ff       	callq  12661 <vTimerSetTimerNumber>
   23389:	90                   	nop
   2338a:	c9                   	leaveq 
   2338b:	c3                   	retq   

000000000002338c <prvTraceGetEventGroupNumberLow16>:
   2338c:	f3 0f 1e fa          	endbr64 
   23390:	55                   	push   %rbp
   23391:	48 89 e5             	mov    %rsp,%rbp
   23394:	48 83 ec 10          	sub    $0x10,%rsp
   23398:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   2339c:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   233a0:	48 89 c7             	mov    %rax,%rdi
   233a3:	e8 db 87 fe ff       	callq  bb83 <uxEventGroupGetNumber>
   233a8:	c9                   	leaveq 
   233a9:	c3                   	retq   

00000000000233aa <prvTraceGetEventGroupNumberHigh16>:
   233aa:	f3 0f 1e fa          	endbr64 
   233ae:	55                   	push   %rbp
   233af:	48 89 e5             	mov    %rsp,%rbp
   233b2:	48 83 ec 10          	sub    $0x10,%rsp
   233b6:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   233ba:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   233be:	48 89 c7             	mov    %rax,%rdi
   233c1:	e8 bd 87 fe ff       	callq  bb83 <uxEventGroupGetNumber>
   233c6:	48 c1 e8 10          	shr    $0x10,%rax
   233ca:	c9                   	leaveq 
   233cb:	c3                   	retq   

00000000000233cc <prvTraceSetEventGroupNumberLow16>:
   233cc:	f3 0f 1e fa          	endbr64 
   233d0:	55                   	push   %rbp
   233d1:	48 89 e5             	mov    %rsp,%rbp
   233d4:	48 83 ec 10          	sub    $0x10,%rsp
   233d8:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   233dc:	89 f0                	mov    %esi,%eax
   233de:	66 89 45 f4          	mov    %ax,-0xc(%rbp)
   233e2:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   233e6:	48 89 c7             	mov    %rax,%rdi
   233e9:	e8 95 87 fe ff       	callq  bb83 <uxEventGroupGetNumber>
   233ee:	25 00 00 ff ff       	and    $0xffff0000,%eax
   233f3:	48 89 c2             	mov    %rax,%rdx
   233f6:	0f b7 45 f4          	movzwl -0xc(%rbp),%eax
   233fa:	48 09 c2             	or     %rax,%rdx
   233fd:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   23401:	48 89 d6             	mov    %rdx,%rsi
   23404:	48 89 c7             	mov    %rax,%rdi
   23407:	e8 ae 87 fe ff       	callq  bbba <vEventGroupSetNumber>
   2340c:	90                   	nop
   2340d:	c9                   	leaveq 
   2340e:	c3                   	retq   

000000000002340f <prvTraceSetEventGroupNumberHigh16>:
   2340f:	f3 0f 1e fa          	endbr64 
   23413:	55                   	push   %rbp
   23414:	48 89 e5             	mov    %rsp,%rbp
   23417:	48 83 ec 10          	sub    $0x10,%rsp
   2341b:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   2341f:	89 f0                	mov    %esi,%eax
   23421:	66 89 45 f4          	mov    %ax,-0xc(%rbp)
   23425:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   23429:	48 89 c7             	mov    %rax,%rdi
   2342c:	e8 52 87 fe ff       	callq  bb83 <uxEventGroupGetNumber>
   23431:	0f b7 c0             	movzwl %ax,%eax
   23434:	0f b7 55 f4          	movzwl -0xc(%rbp),%edx
   23438:	c1 e2 10             	shl    $0x10,%edx
   2343b:	89 d2                	mov    %edx,%edx
   2343d:	48 09 c2             	or     %rax,%rdx
   23440:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   23444:	48 89 d6             	mov    %rdx,%rsi
   23447:	48 89 c7             	mov    %rax,%rdi
   2344a:	e8 6b 87 fe ff       	callq  bbba <vEventGroupSetNumber>
   2344f:	90                   	nop
   23450:	c9                   	leaveq 
   23451:	c3                   	retq   

0000000000023452 <prvTraceGetStreamBufferNumberLow16>:
   23452:	f3 0f 1e fa          	endbr64 
   23456:	55                   	push   %rbp
   23457:	48 89 e5             	mov    %rsp,%rbp
   2345a:	48 83 ec 10          	sub    $0x10,%rsp
   2345e:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   23462:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   23466:	48 89 c7             	mov    %rax,%rdi
   23469:	e8 47 77 fe ff       	callq  abb5 <uxStreamBufferGetStreamBufferNumber>
   2346e:	c9                   	leaveq 
   2346f:	c3                   	retq   

0000000000023470 <prvTraceGetStreamBufferNumberHigh16>:
   23470:	f3 0f 1e fa          	endbr64 
   23474:	55                   	push   %rbp
   23475:	48 89 e5             	mov    %rsp,%rbp
   23478:	48 83 ec 10          	sub    $0x10,%rsp
   2347c:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   23480:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   23484:	48 89 c7             	mov    %rax,%rdi
   23487:	e8 29 77 fe ff       	callq  abb5 <uxStreamBufferGetStreamBufferNumber>
   2348c:	48 c1 e8 10          	shr    $0x10,%rax
   23490:	c9                   	leaveq 
   23491:	c3                   	retq   

0000000000023492 <prvTraceSetStreamBufferNumberLow16>:
   23492:	f3 0f 1e fa          	endbr64 
   23496:	55                   	push   %rbp
   23497:	48 89 e5             	mov    %rsp,%rbp
   2349a:	48 83 ec 10          	sub    $0x10,%rsp
   2349e:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   234a2:	89 f0                	mov    %esi,%eax
   234a4:	66 89 45 f4          	mov    %ax,-0xc(%rbp)
   234a8:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   234ac:	48 89 c7             	mov    %rax,%rdi
   234af:	e8 01 77 fe ff       	callq  abb5 <uxStreamBufferGetStreamBufferNumber>
   234b4:	25 00 00 ff ff       	and    $0xffff0000,%eax
   234b9:	48 89 c2             	mov    %rax,%rdx
   234bc:	0f b7 45 f4          	movzwl -0xc(%rbp),%eax
   234c0:	48 09 c2             	or     %rax,%rdx
   234c3:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   234c7:	48 89 d6             	mov    %rdx,%rsi
   234ca:	48 89 c7             	mov    %rax,%rdi
   234cd:	e8 f9 76 fe ff       	callq  abcb <vStreamBufferSetStreamBufferNumber>
   234d2:	90                   	nop
   234d3:	c9                   	leaveq 
   234d4:	c3                   	retq   

00000000000234d5 <prvTraceSetStreamBufferNumberHigh16>:
   234d5:	f3 0f 1e fa          	endbr64 
   234d9:	55                   	push   %rbp
   234da:	48 89 e5             	mov    %rsp,%rbp
   234dd:	48 83 ec 10          	sub    $0x10,%rsp
   234e1:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   234e5:	89 f0                	mov    %esi,%eax
   234e7:	66 89 45 f4          	mov    %ax,-0xc(%rbp)
   234eb:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   234ef:	48 89 c7             	mov    %rax,%rdi
   234f2:	e8 be 76 fe ff       	callq  abb5 <uxStreamBufferGetStreamBufferNumber>
   234f7:	0f b7 c0             	movzwl %ax,%eax
   234fa:	0f b7 55 f4          	movzwl -0xc(%rbp),%edx
   234fe:	c1 e2 10             	shl    $0x10,%edx
   23501:	89 d2                	mov    %edx,%edx
   23503:	48 09 c2             	or     %rax,%rdx
   23506:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   2350a:	48 89 d6             	mov    %rdx,%rsi
   2350d:	48 89 c7             	mov    %rax,%rdi
   23510:	e8 b6 76 fe ff       	callq  abcb <vStreamBufferSetStreamBufferNumber>
   23515:	90                   	nop
   23516:	c9                   	leaveq 
   23517:	c3                   	retq   

0000000000023518 <vTraceSetQueueName>:
   23518:	f3 0f 1e fa          	endbr64 
   2351c:	55                   	push   %rbp
   2351d:	48 89 e5             	mov    %rsp,%rbp
   23520:	48 83 ec 10          	sub    $0x10,%rsp
   23524:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   23528:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
   2352c:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   23530:	48 89 c7             	mov    %rax,%rdi
   23533:	e8 cb fc ff ff       	callq  23203 <prvTraceGetQueueNumberLow16>
   23538:	0f b6 c0             	movzbl %al,%eax
   2353b:	48 8b 55 f0          	mov    -0x10(%rbp),%rdx
   2353f:	89 c6                	mov    %eax,%esi
   23541:	bf 00 00 00 00       	mov    $0x0,%edi
   23546:	e8 60 2c 00 00       	callq  261ab <prvTraceSetObjectName>
   2354b:	90                   	nop
   2354c:	c9                   	leaveq 
   2354d:	c3                   	retq   

000000000002354e <vTraceSetSemaphoreName>:
   2354e:	f3 0f 1e fa          	endbr64 
   23552:	55                   	push   %rbp
   23553:	48 89 e5             	mov    %rsp,%rbp
   23556:	48 83 ec 10          	sub    $0x10,%rsp
   2355a:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   2355e:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
   23562:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   23566:	48 89 c7             	mov    %rax,%rdi
   23569:	e8 95 fc ff ff       	callq  23203 <prvTraceGetQueueNumberLow16>
   2356e:	0f b6 c0             	movzbl %al,%eax
   23571:	48 8b 55 f0          	mov    -0x10(%rbp),%rdx
   23575:	89 c6                	mov    %eax,%esi
   23577:	bf 01 00 00 00       	mov    $0x1,%edi
   2357c:	e8 2a 2c 00 00       	callq  261ab <prvTraceSetObjectName>
   23581:	90                   	nop
   23582:	c9                   	leaveq 
   23583:	c3                   	retq   

0000000000023584 <vTraceSetMutexName>:
   23584:	f3 0f 1e fa          	endbr64 
   23588:	55                   	push   %rbp
   23589:	48 89 e5             	mov    %rsp,%rbp
   2358c:	48 83 ec 10          	sub    $0x10,%rsp
   23590:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   23594:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
   23598:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   2359c:	48 89 c7             	mov    %rax,%rdi
   2359f:	e8 5f fc ff ff       	callq  23203 <prvTraceGetQueueNumberLow16>
   235a4:	0f b6 c0             	movzbl %al,%eax
   235a7:	48 8b 55 f0          	mov    -0x10(%rbp),%rdx
   235ab:	89 c6                	mov    %eax,%esi
   235ad:	bf 02 00 00 00       	mov    $0x2,%edi
   235b2:	e8 f4 2b 00 00       	callq  261ab <prvTraceSetObjectName>
   235b7:	90                   	nop
   235b8:	c9                   	leaveq 
   235b9:	c3                   	retq   

00000000000235ba <vTraceSetEventGroupName>:
   235ba:	f3 0f 1e fa          	endbr64 
   235be:	55                   	push   %rbp
   235bf:	48 89 e5             	mov    %rsp,%rbp
   235c2:	48 83 ec 10          	sub    $0x10,%rsp
   235c6:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   235ca:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
   235ce:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   235d2:	48 89 c7             	mov    %rax,%rdi
   235d5:	e8 b2 fd ff ff       	callq  2338c <prvTraceGetEventGroupNumberLow16>
   235da:	0f b6 c0             	movzbl %al,%eax
   235dd:	48 8b 55 f0          	mov    -0x10(%rbp),%rdx
   235e1:	89 c6                	mov    %eax,%esi
   235e3:	bf 06 00 00 00       	mov    $0x6,%edi
   235e8:	e8 be 2b 00 00       	callq  261ab <prvTraceSetObjectName>
   235ed:	90                   	nop
   235ee:	c9                   	leaveq 
   235ef:	c3                   	retq   

00000000000235f0 <vTraceSetStreamBufferName>:
   235f0:	f3 0f 1e fa          	endbr64 
   235f4:	55                   	push   %rbp
   235f5:	48 89 e5             	mov    %rsp,%rbp
   235f8:	48 83 ec 10          	sub    $0x10,%rsp
   235fc:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   23600:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
   23604:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   23608:	48 89 c7             	mov    %rax,%rdi
   2360b:	e8 42 fe ff ff       	callq  23452 <prvTraceGetStreamBufferNumberLow16>
   23610:	0f b6 c0             	movzbl %al,%eax
   23613:	48 8b 55 f0          	mov    -0x10(%rbp),%rdx
   23617:	89 c6                	mov    %eax,%esi
   23619:	bf 07 00 00 00       	mov    $0x7,%edi
   2361e:	e8 88 2b 00 00       	callq  261ab <prvTraceSetObjectName>
   23623:	90                   	nop
   23624:	c9                   	leaveq 
   23625:	c3                   	retq   

0000000000023626 <vTraceSetMessageBufferName>:
   23626:	f3 0f 1e fa          	endbr64 
   2362a:	55                   	push   %rbp
   2362b:	48 89 e5             	mov    %rsp,%rbp
   2362e:	48 83 ec 10          	sub    $0x10,%rsp
   23632:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   23636:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
   2363a:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   2363e:	48 89 c7             	mov    %rax,%rdi
   23641:	e8 0c fe ff ff       	callq  23452 <prvTraceGetStreamBufferNumberLow16>
   23646:	0f b6 c0             	movzbl %al,%eax
   23649:	48 8b 55 f0          	mov    -0x10(%rbp),%rdx
   2364d:	89 c6                	mov    %eax,%esi
   2364f:	bf 08 00 00 00       	mov    $0x8,%edi
   23654:	e8 52 2b 00 00       	callq  261ab <prvTraceSetObjectName>
   23659:	90                   	nop
   2365a:	c9                   	leaveq 
   2365b:	c3                   	retq   

000000000002365c <prvTraceGetCurrentTaskHandle>:
   2365c:	f3 0f 1e fa          	endbr64 
   23660:	55                   	push   %rbp
   23661:	48 89 e5             	mov    %rsp,%rbp
   23664:	e8 15 c0 fe ff       	callq  f67e <xTaskGetCurrentTaskHandle>
   23669:	5d                   	pop    %rbp
   2366a:	c3                   	retq   

000000000002366b <vTraceEnable>:
   2366b:	f3 0f 1e fa          	endbr64 
   2366f:	55                   	push   %rbp
   23670:	48 89 e5             	mov    %rsp,%rbp
   23673:	48 83 ec 10          	sub    $0x10,%rsp
   23677:	89 7d fc             	mov    %edi,-0x4(%rbp)
   2367a:	e8 b2 23 00 00       	callq  25a31 <prvTraceInitTraceData>
   2367f:	83 7d fc 01          	cmpl   $0x1,-0x4(%rbp)
   23683:	75 07                	jne    2368c <vTraceEnable+0x21>
   23685:	e8 d9 05 00 00       	callq  23c63 <vTraceStart>
   2368a:	eb 26                	jmp    236b2 <vTraceEnable+0x47>
   2368c:	83 7d fc 02          	cmpl   $0x2,-0x4(%rbp)
   23690:	75 0e                	jne    236a0 <vTraceEnable+0x35>
   23692:	48 8d 3d df 4d 00 00 	lea    0x4ddf(%rip),%rdi        # 28478 <xInterruptGivePeriod+0x688>
   23699:	e8 0c 2d 00 00       	callq  263aa <prvTraceError>
   2369e:	eb 12                	jmp    236b2 <vTraceEnable+0x47>
   236a0:	83 7d fc 00          	cmpl   $0x0,-0x4(%rbp)
   236a4:	74 0c                	je     236b2 <vTraceEnable+0x47>
   236a6:	48 8d 3d 0b 4e 00 00 	lea    0x4e0b(%rip),%rdi        # 284b8 <xInterruptGivePeriod+0x6c8>
   236ad:	e8 f8 2c 00 00       	callq  263aa <prvTraceError>
   236b2:	90                   	nop
   236b3:	c9                   	leaveq 
   236b4:	c3                   	retq   

00000000000236b5 <vTraceInitObjectPropertyTable>:
   236b5:	f3 0f 1e fa          	endbr64 
   236b9:	55                   	push   %rbp
   236ba:	48 89 e5             	mov    %rsp,%rbp
   236bd:	48 8b 05 64 3e 11 00 	mov    0x113e64(%rip),%rax        # 137528 <RecorderDataPtr>
   236c4:	c7 40 5c 09 00 00 00 	movl   $0x9,0x5c(%rax)
   236cb:	48 8b 05 56 3e 11 00 	mov    0x113e56(%rip),%rax        # 137528 <RecorderDataPtr>
   236d2:	c6 40 64 5a          	movb   $0x5a,0x64(%rax)
   236d6:	48 8b 05 4b 3e 11 00 	mov    0x113e4b(%rip),%rax        # 137528 <RecorderDataPtr>
   236dd:	c6 40 65 5a          	movb   $0x5a,0x65(%rax)
   236e1:	48 8b 05 40 3e 11 00 	mov    0x113e40(%rip),%rax        # 137528 <RecorderDataPtr>
   236e8:	c6 40 66 5a          	movb   $0x5a,0x66(%rax)
   236ec:	48 8b 05 35 3e 11 00 	mov    0x113e35(%rip),%rax        # 137528 <RecorderDataPtr>
   236f3:	c6 40 67 96          	movb   $0x96,0x67(%rax)
   236f7:	48 8b 05 2a 3e 11 00 	mov    0x113e2a(%rip),%rax        # 137528 <RecorderDataPtr>
   236fe:	c6 40 68 5a          	movb   $0x5a,0x68(%rax)
   23702:	48 8b 05 1f 3e 11 00 	mov    0x113e1f(%rip),%rax        # 137528 <RecorderDataPtr>
   23709:	c6 40 69 fa          	movb   $0xfa,0x69(%rax)
   2370d:	48 8b 05 14 3e 11 00 	mov    0x113e14(%rip),%rax        # 137528 <RecorderDataPtr>
   23714:	c6 40 6a 5a          	movb   $0x5a,0x6a(%rax)
   23718:	48 8b 05 09 3e 11 00 	mov    0x113e09(%rip),%rax        # 137528 <RecorderDataPtr>
   2371f:	c6 40 6b 64          	movb   $0x64,0x6b(%rax)
   23723:	48 8b 05 fe 3d 11 00 	mov    0x113dfe(%rip),%rax        # 137528 <RecorderDataPtr>
   2372a:	c6 40 6c 64          	movb   $0x64,0x6c(%rax)
   2372e:	48 8b 05 f3 3d 11 00 	mov    0x113df3(%rip),%rax        # 137528 <RecorderDataPtr>
   23735:	c6 40 70 0f          	movb   $0xf,0x70(%rax)
   23739:	48 8b 05 e8 3d 11 00 	mov    0x113de8(%rip),%rax        # 137528 <RecorderDataPtr>
   23740:	c6 40 71 0f          	movb   $0xf,0x71(%rax)
   23744:	48 8b 05 dd 3d 11 00 	mov    0x113ddd(%rip),%rax        # 137528 <RecorderDataPtr>
   2374b:	c6 40 72 0f          	movb   $0xf,0x72(%rax)
   2374f:	48 8b 05 d2 3d 11 00 	mov    0x113dd2(%rip),%rax        # 137528 <RecorderDataPtr>
   23756:	c6 40 73 0f          	movb   $0xf,0x73(%rax)
   2375a:	48 8b 05 c7 3d 11 00 	mov    0x113dc7(%rip),%rax        # 137528 <RecorderDataPtr>
   23761:	c6 40 74 0f          	movb   $0xf,0x74(%rax)
   23765:	48 8b 05 bc 3d 11 00 	mov    0x113dbc(%rip),%rax        # 137528 <RecorderDataPtr>
   2376c:	c6 40 75 0f          	movb   $0xf,0x75(%rax)
   23770:	48 8b 05 b1 3d 11 00 	mov    0x113db1(%rip),%rax        # 137528 <RecorderDataPtr>
   23777:	c6 40 76 0f          	movb   $0xf,0x76(%rax)
   2377b:	48 8b 05 a6 3d 11 00 	mov    0x113da6(%rip),%rax        # 137528 <RecorderDataPtr>
   23782:	c6 40 77 0f          	movb   $0xf,0x77(%rax)
   23786:	48 8b 05 9b 3d 11 00 	mov    0x113d9b(%rip),%rax        # 137528 <RecorderDataPtr>
   2378d:	c6 40 78 0f          	movb   $0xf,0x78(%rax)
   23791:	48 8b 05 90 3d 11 00 	mov    0x113d90(%rip),%rax        # 137528 <RecorderDataPtr>
   23798:	c6 40 7c 10          	movb   $0x10,0x7c(%rax)
   2379c:	48 8b 05 85 3d 11 00 	mov    0x113d85(%rip),%rax        # 137528 <RecorderDataPtr>
   237a3:	c6 40 7d 10          	movb   $0x10,0x7d(%rax)
   237a7:	48 8b 05 7a 3d 11 00 	mov    0x113d7a(%rip),%rax        # 137528 <RecorderDataPtr>
   237ae:	c6 40 7e 10          	movb   $0x10,0x7e(%rax)
   237b2:	48 8b 05 6f 3d 11 00 	mov    0x113d6f(%rip),%rax        # 137528 <RecorderDataPtr>
   237b9:	c6 40 7f 13          	movb   $0x13,0x7f(%rax)
   237bd:	48 8b 05 64 3d 11 00 	mov    0x113d64(%rip),%rax        # 137528 <RecorderDataPtr>
   237c4:	c6 80 80 00 00 00 11 	movb   $0x11,0x80(%rax)
   237cb:	48 8b 05 56 3d 11 00 	mov    0x113d56(%rip),%rax        # 137528 <RecorderDataPtr>
   237d2:	c6 80 81 00 00 00 10 	movb   $0x10,0x81(%rax)
   237d9:	48 8b 05 48 3d 11 00 	mov    0x113d48(%rip),%rax        # 137528 <RecorderDataPtr>
   237e0:	c6 80 82 00 00 00 13 	movb   $0x13,0x82(%rax)
   237e7:	48 8b 05 3a 3d 11 00 	mov    0x113d3a(%rip),%rax        # 137528 <RecorderDataPtr>
   237ee:	c6 80 83 00 00 00 13 	movb   $0x13,0x83(%rax)
   237f5:	48 8b 05 2c 3d 11 00 	mov    0x113d2c(%rip),%rax        # 137528 <RecorderDataPtr>
   237fc:	c6 80 84 00 00 00 13 	movb   $0x13,0x84(%rax)
   23803:	48 8b 05 1e 3d 11 00 	mov    0x113d1e(%rip),%rax        # 137528 <RecorderDataPtr>
   2380a:	66 c7 80 88 00 00 00 	movw   $0x0,0x88(%rax)
   23811:	00 00 
   23813:	48 8b 05 0e 3d 11 00 	mov    0x113d0e(%rip),%rax        # 137528 <RecorderDataPtr>
   2381a:	66 c7 80 8a 00 00 00 	movw   $0x5a0,0x8a(%rax)
   23821:	a0 05 
   23823:	48 8b 05 fe 3c 11 00 	mov    0x113cfe(%rip),%rax        # 137528 <RecorderDataPtr>
   2382a:	66 c7 80 8c 00 00 00 	movw   $0xb40,0x8c(%rax)
   23831:	40 0b 
   23833:	48 8b 05 ee 3c 11 00 	mov    0x113cee(%rip),%rax        # 137528 <RecorderDataPtr>
   2383a:	66 c7 80 8e 00 00 00 	movw   $0x10e0,0x8e(%rax)
   23841:	e0 10 
   23843:	48 8b 05 de 3c 11 00 	mov    0x113cde(%rip),%rax        # 137528 <RecorderDataPtr>
   2384a:	66 c7 80 90 00 00 00 	movw   $0x1c02,0x90(%rax)
   23851:	02 1c 
   23853:	48 8b 05 ce 3c 11 00 	mov    0x113cce(%rip),%rax        # 137528 <RecorderDataPtr>
   2385a:	66 c7 80 92 00 00 00 	movw   $0x21fc,0x92(%rax)
   23861:	fc 21 
   23863:	48 8b 05 be 3c 11 00 	mov    0x113cbe(%rip),%rax        # 137528 <RecorderDataPtr>
   2386a:	66 c7 80 94 00 00 00 	movw   $0x319c,0x94(%rax)
   23871:	9c 31 
   23873:	48 8b 05 ae 3c 11 00 	mov    0x113cae(%rip),%rax        # 137528 <RecorderDataPtr>
   2387a:	66 c7 80 96 00 00 00 	movw   $0x384a,0x96(%rax)
   23881:	4a 38 
   23883:	48 8b 05 9e 3c 11 00 	mov    0x113c9e(%rip),%rax        # 137528 <RecorderDataPtr>
   2388a:	66 c7 80 98 00 00 00 	movw   $0x3fb6,0x98(%rax)
   23891:	b6 3f 
   23893:	48 8b 05 8e 3c 11 00 	mov    0x113c8e(%rip),%rax        # 137528 <RecorderDataPtr>
   2389a:	c7 40 60 22 47 00 00 	movl   $0x4722,0x60(%rax)
   238a1:	90                   	nop
   238a2:	5d                   	pop    %rbp
   238a3:	c3                   	retq   

00000000000238a4 <vTraceInitObjectHandleStack>:
   238a4:	f3 0f 1e fa          	endbr64 
   238a8:	55                   	push   %rbp
   238a9:	48 89 e5             	mov    %rsp,%rbp
   238ac:	66 c7 05 1d 38 11 00 	movw   $0x0,0x11381d(%rip)        # 1370d2 <objectHandleStacks+0x12>
   238b3:	00 00 
   238b5:	0f b7 05 16 38 11 00 	movzwl 0x113816(%rip),%eax        # 1370d2 <objectHandleStacks+0x12>
   238bc:	66 89 05 fd 37 11 00 	mov    %ax,0x1137fd(%rip)        # 1370c0 <objectHandleStacks>
   238c3:	66 c7 05 08 38 11 00 	movw   $0x5a,0x113808(%rip)        # 1370d4 <objectHandleStacks+0x14>
   238ca:	5a 00 
   238cc:	0f b7 05 01 38 11 00 	movzwl 0x113801(%rip),%eax        # 1370d4 <objectHandleStacks+0x14>
   238d3:	66 89 05 e8 37 11 00 	mov    %ax,0x1137e8(%rip)        # 1370c2 <objectHandleStacks+0x2>
   238da:	66 c7 05 f3 37 11 00 	movw   $0xb4,0x1137f3(%rip)        # 1370d6 <objectHandleStacks+0x16>
   238e1:	b4 00 
   238e3:	0f b7 05 ec 37 11 00 	movzwl 0x1137ec(%rip),%eax        # 1370d6 <objectHandleStacks+0x16>
   238ea:	66 89 05 d3 37 11 00 	mov    %ax,0x1137d3(%rip)        # 1370c4 <objectHandleStacks+0x4>
   238f1:	66 c7 05 de 37 11 00 	movw   $0x10e,0x1137de(%rip)        # 1370d8 <objectHandleStacks+0x18>
   238f8:	0e 01 
   238fa:	0f b7 05 d7 37 11 00 	movzwl 0x1137d7(%rip),%eax        # 1370d8 <objectHandleStacks+0x18>
   23901:	66 89 05 be 37 11 00 	mov    %ax,0x1137be(%rip)        # 1370c6 <objectHandleStacks+0x6>
   23908:	66 c7 05 c9 37 11 00 	movw   $0x1a4,0x1137c9(%rip)        # 1370da <objectHandleStacks+0x1a>
   2390f:	a4 01 
   23911:	0f b7 05 c2 37 11 00 	movzwl 0x1137c2(%rip),%eax        # 1370da <objectHandleStacks+0x1a>
   23918:	66 89 05 a9 37 11 00 	mov    %ax,0x1137a9(%rip)        # 1370c8 <objectHandleStacks+0x8>
   2391f:	66 c7 05 b4 37 11 00 	movw   $0x1fe,0x1137b4(%rip)        # 1370dc <objectHandleStacks+0x1c>
   23926:	fe 01 
   23928:	0f b7 05 ad 37 11 00 	movzwl 0x1137ad(%rip),%eax        # 1370dc <objectHandleStacks+0x1c>
   2392f:	66 89 05 94 37 11 00 	mov    %ax,0x113794(%rip)        # 1370ca <objectHandleStacks+0xa>
   23936:	66 c7 05 9f 37 11 00 	movw   $0x2f8,0x11379f(%rip)        # 1370de <objectHandleStacks+0x1e>
   2393d:	f8 02 
   2393f:	0f b7 05 98 37 11 00 	movzwl 0x113798(%rip),%eax        # 1370de <objectHandleStacks+0x1e>
   23946:	66 89 05 7f 37 11 00 	mov    %ax,0x11377f(%rip)        # 1370cc <objectHandleStacks+0xc>
   2394d:	66 c7 05 8a 37 11 00 	movw   $0x352,0x11378a(%rip)        # 1370e0 <objectHandleStacks+0x20>
   23954:	52 03 
   23956:	0f b7 05 83 37 11 00 	movzwl 0x113783(%rip),%eax        # 1370e0 <objectHandleStacks+0x20>
   2395d:	66 89 05 6a 37 11 00 	mov    %ax,0x11376a(%rip)        # 1370ce <objectHandleStacks+0xe>
   23964:	66 c7 05 75 37 11 00 	movw   $0x3b6,0x113775(%rip)        # 1370e2 <objectHandleStacks+0x22>
   2396b:	b6 03 
   2396d:	0f b7 05 6e 37 11 00 	movzwl 0x11376e(%rip),%eax        # 1370e2 <objectHandleStacks+0x22>
   23974:	66 89 05 55 37 11 00 	mov    %ax,0x113755(%rip)        # 1370d0 <objectHandleStacks+0x10>
   2397b:	66 c7 05 60 37 11 00 	movw   $0x59,0x113760(%rip)        # 1370e4 <objectHandleStacks+0x24>
   23982:	59 00 
   23984:	66 c7 05 59 37 11 00 	movw   $0xb3,0x113759(%rip)        # 1370e6 <objectHandleStacks+0x26>
   2398b:	b3 00 
   2398d:	66 c7 05 52 37 11 00 	movw   $0x10d,0x113752(%rip)        # 1370e8 <objectHandleStacks+0x28>
   23994:	0d 01 
   23996:	66 c7 05 4b 37 11 00 	movw   $0x1a3,0x11374b(%rip)        # 1370ea <objectHandleStacks+0x2a>
   2399d:	a3 01 
   2399f:	66 c7 05 44 37 11 00 	movw   $0x1fd,0x113744(%rip)        # 1370ec <objectHandleStacks+0x2c>
   239a6:	fd 01 
   239a8:	66 c7 05 3d 37 11 00 	movw   $0x2f7,0x11373d(%rip)        # 1370ee <objectHandleStacks+0x2e>
   239af:	f7 02 
   239b1:	66 c7 05 36 37 11 00 	movw   $0x351,0x113736(%rip)        # 1370f0 <objectHandleStacks+0x30>
   239b8:	51 03 
   239ba:	66 c7 05 2f 37 11 00 	movw   $0x3b5,0x11372f(%rip)        # 1370f2 <objectHandleStacks+0x32>
   239c1:	b5 03 
   239c3:	66 c7 05 28 37 11 00 	movw   $0x419,0x113728(%rip)        # 1370f4 <objectHandleStacks+0x34>
   239ca:	19 04 
   239cc:	90                   	nop
   239cd:	5d                   	pop    %rbp
   239ce:	c3                   	retq   

00000000000239cf <pszTraceGetErrorNotEnoughHandles>:
   239cf:	f3 0f 1e fa          	endbr64 
   239d3:	55                   	push   %rbp
   239d4:	48 89 e5             	mov    %rsp,%rbp
   239d7:	89 f8                	mov    %edi,%eax
   239d9:	88 45 fc             	mov    %al,-0x4(%rbp)
   239dc:	0f b6 45 fc          	movzbl -0x4(%rbp),%eax
   239e0:	83 f8 08             	cmp    $0x8,%eax
   239e3:	77 74                	ja     23a59 <pszTraceGetErrorNotEnoughHandles+0x8a>
   239e5:	89 c0                	mov    %eax,%eax
   239e7:	48 8d 14 85 00 00 00 	lea    0x0(,%rax,4),%rdx
   239ee:	00 
   239ef:	48 8d 05 12 4e 00 00 	lea    0x4e12(%rip),%rax        # 28808 <xInterruptGivePeriod+0xa18>
   239f6:	8b 04 02             	mov    (%rdx,%rax,1),%eax
   239f9:	48 98                	cltq   
   239fb:	48 8d 15 06 4e 00 00 	lea    0x4e06(%rip),%rdx        # 28808 <xInterruptGivePeriod+0xa18>
   23a02:	48 01 d0             	add    %rdx,%rax
   23a05:	3e ff e0             	notrack jmpq *%rax
   23a08:	48 8d 05 e1 4a 00 00 	lea    0x4ae1(%rip),%rax        # 284f0 <xInterruptGivePeriod+0x700>
   23a0f:	eb 4f                	jmp    23a60 <pszTraceGetErrorNotEnoughHandles+0x91>
   23a11:	48 8d 05 20 4b 00 00 	lea    0x4b20(%rip),%rax        # 28538 <xInterruptGivePeriod+0x748>
   23a18:	eb 46                	jmp    23a60 <pszTraceGetErrorNotEnoughHandles+0x91>
   23a1a:	48 8d 05 5f 4b 00 00 	lea    0x4b5f(%rip),%rax        # 28580 <xInterruptGivePeriod+0x790>
   23a21:	eb 3d                	jmp    23a60 <pszTraceGetErrorNotEnoughHandles+0x91>
   23a23:	48 8d 05 ae 4b 00 00 	lea    0x4bae(%rip),%rax        # 285d8 <xInterruptGivePeriod+0x7e8>
   23a2a:	eb 34                	jmp    23a60 <pszTraceGetErrorNotEnoughHandles+0x91>
   23a2c:	48 8d 05 f5 4b 00 00 	lea    0x4bf5(%rip),%rax        # 28628 <xInterruptGivePeriod+0x838>
   23a33:	eb 2b                	jmp    23a60 <pszTraceGetErrorNotEnoughHandles+0x91>
   23a35:	48 8d 05 3c 4c 00 00 	lea    0x4c3c(%rip),%rax        # 28678 <xInterruptGivePeriod+0x888>
   23a3c:	eb 22                	jmp    23a60 <pszTraceGetErrorNotEnoughHandles+0x91>
   23a3e:	48 8d 05 83 4c 00 00 	lea    0x4c83(%rip),%rax        # 286c8 <xInterruptGivePeriod+0x8d8>
   23a45:	eb 19                	jmp    23a60 <pszTraceGetErrorNotEnoughHandles+0x91>
   23a47:	48 8d 05 d2 4c 00 00 	lea    0x4cd2(%rip),%rax        # 28720 <xInterruptGivePeriod+0x930>
   23a4e:	eb 10                	jmp    23a60 <pszTraceGetErrorNotEnoughHandles+0x91>
   23a50:	48 8d 05 21 4d 00 00 	lea    0x4d21(%rip),%rax        # 28778 <xInterruptGivePeriod+0x988>
   23a57:	eb 07                	jmp    23a60 <pszTraceGetErrorNotEnoughHandles+0x91>
   23a59:	48 8d 05 78 4d 00 00 	lea    0x4d78(%rip),%rax        # 287d8 <xInterruptGivePeriod+0x9e8>
   23a60:	5d                   	pop    %rbp
   23a61:	c3                   	retq   

0000000000023a62 <prvTraceIsSchedulerSuspended>:
   23a62:	f3 0f 1e fa          	endbr64 
   23a66:	55                   	push   %rbp
   23a67:	48 89 e5             	mov    %rsp,%rbp
   23a6a:	e8 28 bc fe ff       	callq  f697 <xTaskGetSchedulerState>
   23a6f:	48 85 c0             	test   %rax,%rax
   23a72:	0f 94 c0             	sete   %al
   23a75:	5d                   	pop    %rbp
   23a76:	c3                   	retq   

0000000000023a77 <vTraceSetStopHook>:
   23a77:	f3 0f 1e fa          	endbr64 
   23a7b:	55                   	push   %rbp
   23a7c:	48 89 e5             	mov    %rsp,%rbp
   23a7f:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   23a83:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   23a87:	48 89 05 1a 36 11 00 	mov    %rax,0x11361a(%rip)        # 1370a8 <vTraceStopHookPtr>
   23a8e:	90                   	nop
   23a8f:	5d                   	pop    %rbp
   23a90:	c3                   	retq   

0000000000023a91 <vTraceClear>:
   23a91:	f3 0f 1e fa          	endbr64 
   23a95:	55                   	push   %rbp
   23a96:	48 89 e5             	mov    %rsp,%rbp
   23a99:	e8 31 f3 fe ff       	callq  12dcf <vPortEnterCritical>
   23a9e:	8b 05 ec 35 11 00    	mov    0x1135ec(%rip),%eax        # 137090 <recorder_busy>
   23aa4:	83 c0 01             	add    $0x1,%eax
   23aa7:	89 05 e3 35 11 00    	mov    %eax,0x1135e3(%rip)        # 137090 <recorder_busy>
   23aad:	48 8b 05 74 3a 11 00 	mov    0x113a74(%rip),%rax        # 137528 <RecorderDataPtr>
   23ab4:	c7 40 2c 00 00 00 00 	movl   $0x0,0x2c(%rax)
   23abb:	48 8b 05 66 3a 11 00 	mov    0x113a66(%rip),%rax        # 137528 <RecorderDataPtr>
   23ac2:	c7 40 28 00 00 00 00 	movl   $0x0,0x28(%rax)
   23ac9:	48 8b 05 58 3a 11 00 	mov    0x113a58(%rip),%rax        # 137528 <RecorderDataPtr>
   23ad0:	c7 40 1c 00 00 00 00 	movl   $0x0,0x1c(%rax)
   23ad7:	48 8b 05 4a 3a 11 00 	mov    0x113a4a(%rip),%rax        # 137528 <RecorderDataPtr>
   23ade:	c7 40 14 00 00 00 00 	movl   $0x0,0x14(%rax)
   23ae5:	48 8b 05 3c 3a 11 00 	mov    0x113a3c(%rip),%rax        # 137528 <RecorderDataPtr>
   23aec:	c7 40 20 00 00 00 00 	movl   $0x0,0x20(%rax)
   23af3:	48 c7 05 9a 35 11 00 	movq   $0x0,0x11359a(%rip)        # 137098 <traceErrorMessage>
   23afa:	00 00 00 00 
   23afe:	48 8b 05 23 3a 11 00 	mov    0x113a23(%rip),%rax        # 137528 <RecorderDataPtr>
   23b05:	c7 80 50 c5 00 00 00 	movl   $0x0,0xc550(%rax)
   23b0c:	00 00 00 
   23b0f:	48 8b 05 12 3a 11 00 	mov    0x113a12(%rip),%rax        # 137528 <RecorderDataPtr>
   23b16:	8b 40 18             	mov    0x18(%rax),%eax
   23b19:	c1 e0 02             	shl    $0x2,%eax
   23b1c:	89 c2                	mov    %eax,%edx
   23b1e:	48 8b 05 03 3a 11 00 	mov    0x113a03(%rip),%rax        # 137528 <RecorderDataPtr>
   23b25:	48 05 ac c5 00 00    	add    $0xc5ac,%rax
   23b2b:	be 00 00 00 00       	mov    $0x0,%esi
   23b30:	48 89 c7             	mov    %rax,%rdi
   23b33:	e8 d8 e9 fd ff       	callq  2510 <memset@plt>
   23b38:	c6 05 62 35 11 00 00 	movb   $0x0,0x113562(%rip)        # 1370a1 <handle_of_last_logged_task>
   23b3f:	8b 05 4b 35 11 00    	mov    0x11354b(%rip),%eax        # 137090 <recorder_busy>
   23b45:	83 e8 01             	sub    $0x1,%eax
   23b48:	89 05 42 35 11 00    	mov    %eax,0x113542(%rip)        # 137090 <recorder_busy>
   23b4e:	e8 aa f2 fe ff       	callq  12dfd <vPortExitCritical>
   23b53:	90                   	nop
   23b54:	5d                   	pop    %rbp
   23b55:	c3                   	retq   

0000000000023b56 <uiTraceStart>:
   23b56:	f3 0f 1e fa          	endbr64 
   23b5a:	55                   	push   %rbp
   23b5b:	48 89 e5             	mov    %rsp,%rbp
   23b5e:	48 83 ec 10          	sub    $0x10,%rsp
   23b62:	c6 45 ff 00          	movb   $0x0,-0x1(%rbp)
   23b66:	48 8b 05 bb 39 11 00 	mov    0x1139bb(%rip),%rax        # 137528 <RecorderDataPtr>
   23b6d:	48 85 c0             	test   %rax,%rax
   23b70:	75 2c                	jne    23b9e <uiTraceStart+0x48>
   23b72:	48 8b 05 af 39 11 00 	mov    0x1139af(%rip),%rax        # 137528 <RecorderDataPtr>
   23b79:	48 85 c0             	test   %rax,%rax
   23b7c:	75 16                	jne    23b94 <uiTraceStart+0x3e>
   23b7e:	48 8d 3d ab 4c 00 00 	lea    0x4cab(%rip),%rdi        # 28830 <xInterruptGivePeriod+0xa40>
   23b85:	e8 20 28 00 00       	callq  263aa <prvTraceError>
   23b8a:	b8 00 00 00 00       	mov    $0x0,%eax
   23b8f:	e9 cd 00 00 00       	jmpq   23c61 <uiTraceStart+0x10b>
   23b94:	b8 00 00 00 00       	mov    $0x0,%eax
   23b99:	e9 c3 00 00 00       	jmpq   23c61 <uiTraceStart+0x10b>
   23b9e:	48 8b 05 83 39 11 00 	mov    0x113983(%rip),%rax        # 137528 <RecorderDataPtr>
   23ba5:	8b 40 30             	mov    0x30(%rax),%eax
   23ba8:	83 f8 01             	cmp    $0x1,%eax
   23bab:	75 0a                	jne    23bb7 <uiTraceStart+0x61>
   23bad:	b8 01 00 00 00       	mov    $0x1,%eax
   23bb2:	e9 aa 00 00 00       	jmpq   23c61 <uiTraceStart+0x10b>
   23bb7:	48 8b 05 da 34 11 00 	mov    0x1134da(%rip),%rax        # 137098 <traceErrorMessage>
   23bbe:	48 85 c0             	test   %rax,%rax
   23bc1:	0f 85 90 00 00 00    	jne    23c57 <uiTraceStart+0x101>
   23bc7:	e8 03 f2 fe ff       	callq  12dcf <vPortEnterCritical>
   23bcc:	8b 05 be 34 11 00    	mov    0x1134be(%rip),%eax        # 137090 <recorder_busy>
   23bd2:	83 c0 01             	add    $0x1,%eax
   23bd5:	89 05 b5 34 11 00    	mov    %eax,0x1134b5(%rip)        # 137090 <recorder_busy>
   23bdb:	48 8b 05 46 39 11 00 	mov    0x113946(%rip),%rax        # 137528 <RecorderDataPtr>
   23be2:	c7 40 30 01 00 00 00 	movl   $0x1,0x30(%rax)
   23be9:	e8 6e fa ff ff       	callq  2365c <prvTraceGetCurrentTaskHandle>
   23bee:	48 89 c7             	mov    %rax,%rdi
   23bf1:	e8 47 f5 ff ff       	callq  2313d <prvTraceGetTaskNumberLow16>
   23bf6:	88 45 ff             	mov    %al,-0x1(%rbp)
   23bf9:	80 7d ff 00          	cmpb   $0x0,-0x1(%rbp)
   23bfd:	75 39                	jne    23c38 <uiTraceStart+0xe2>
   23bff:	bf 03 00 00 00       	mov    $0x3,%edi
   23c04:	e8 1a 22 00 00       	callq  25e23 <prvTraceGetObjectHandle>
   23c09:	88 45 ff             	mov    %al,-0x1(%rbp)
   23c0c:	0f b6 45 ff          	movzbl -0x1(%rbp),%eax
   23c10:	48 8d 15 5d 4c 00 00 	lea    0x4c5d(%rip),%rdx        # 28874 <xInterruptGivePeriod+0xa84>
   23c17:	89 c6                	mov    %eax,%esi
   23c19:	bf 03 00 00 00       	mov    $0x3,%edi
   23c1e:	e8 88 25 00 00       	callq  261ab <prvTraceSetObjectName>
   23c23:	0f b6 45 ff          	movzbl -0x1(%rbp),%eax
   23c27:	ba 00 00 00 00       	mov    $0x0,%edx
   23c2c:	89 c6                	mov    %eax,%esi
   23c2e:	bf 03 00 00 00       	mov    $0x3,%edi
   23c33:	e8 14 1b 00 00       	callq  2574c <prvTraceSetPriorityProperty>
   23c38:	0f b6 45 ff          	movzbl -0x1(%rbp),%eax
   23c3c:	89 c7                	mov    %eax,%edi
   23c3e:	e8 e2 17 00 00       	callq  25425 <prvTraceStoreTaskswitch>
   23c43:	8b 05 47 34 11 00    	mov    0x113447(%rip),%eax        # 137090 <recorder_busy>
   23c49:	83 e8 01             	sub    $0x1,%eax
   23c4c:	89 05 3e 34 11 00    	mov    %eax,0x11343e(%rip)        # 137090 <recorder_busy>
   23c52:	e8 a6 f1 fe ff       	callq  12dfd <vPortExitCritical>
   23c57:	48 8b 05 ca 38 11 00 	mov    0x1138ca(%rip),%rax        # 137528 <RecorderDataPtr>
   23c5e:	8b 40 30             	mov    0x30(%rax),%eax
   23c61:	c9                   	leaveq 
   23c62:	c3                   	retq   

0000000000023c63 <vTraceStart>:
   23c63:	f3 0f 1e fa          	endbr64 
   23c67:	55                   	push   %rbp
   23c68:	48 89 e5             	mov    %rsp,%rbp
   23c6b:	e8 e6 fe ff ff       	callq  23b56 <uiTraceStart>
   23c70:	90                   	nop
   23c71:	5d                   	pop    %rbp
   23c72:	c3                   	retq   

0000000000023c73 <vTraceStop>:
   23c73:	f3 0f 1e fa          	endbr64 
   23c77:	55                   	push   %rbp
   23c78:	48 89 e5             	mov    %rsp,%rbp
   23c7b:	48 8b 05 a6 38 11 00 	mov    0x1138a6(%rip),%rax        # 137528 <RecorderDataPtr>
   23c82:	48 85 c0             	test   %rax,%rax
   23c85:	74 0e                	je     23c95 <vTraceStop+0x22>
   23c87:	48 8b 05 9a 38 11 00 	mov    0x11389a(%rip),%rax        # 137528 <RecorderDataPtr>
   23c8e:	c7 40 30 00 00 00 00 	movl   $0x0,0x30(%rax)
   23c95:	48 8b 05 0c 34 11 00 	mov    0x11340c(%rip),%rax        # 1370a8 <vTraceStopHookPtr>
   23c9c:	48 85 c0             	test   %rax,%rax
   23c9f:	74 09                	je     23caa <vTraceStop+0x37>
   23ca1:	48 8b 05 00 34 11 00 	mov    0x113400(%rip),%rax        # 1370a8 <vTraceStopHookPtr>
   23ca8:	ff d0                	callq  *%rax
   23caa:	90                   	nop
   23cab:	5d                   	pop    %rbp
   23cac:	c3                   	retq   

0000000000023cad <xTraceIsRecordingEnabled>:
   23cad:	f3 0f 1e fa          	endbr64 
   23cb1:	55                   	push   %rbp
   23cb2:	48 89 e5             	mov    %rsp,%rbp
   23cb5:	48 8b 05 6c 38 11 00 	mov    0x11386c(%rip),%rax        # 137528 <RecorderDataPtr>
   23cbc:	48 85 c0             	test   %rax,%rax
   23cbf:	74 0c                	je     23ccd <xTraceIsRecordingEnabled+0x20>
   23cc1:	48 8b 05 60 38 11 00 	mov    0x113860(%rip),%rax        # 137528 <RecorderDataPtr>
   23cc8:	8b 40 30             	mov    0x30(%rax),%eax
   23ccb:	eb 05                	jmp    23cd2 <xTraceIsRecordingEnabled+0x25>
   23ccd:	b8 00 00 00 00       	mov    $0x0,%eax
   23cd2:	5d                   	pop    %rbp
   23cd3:	c3                   	retq   

0000000000023cd4 <xTraceGetLastError>:
   23cd4:	f3 0f 1e fa          	endbr64 
   23cd8:	55                   	push   %rbp
   23cd9:	48 89 e5             	mov    %rsp,%rbp
   23cdc:	48 8b 05 b5 33 11 00 	mov    0x1133b5(%rip),%rax        # 137098 <traceErrorMessage>
   23ce3:	5d                   	pop    %rbp
   23ce4:	c3                   	retq   

0000000000023ce5 <vTraceClearError>:
   23ce5:	f3 0f 1e fa          	endbr64 
   23ce9:	55                   	push   %rbp
   23cea:	48 89 e5             	mov    %rsp,%rbp
   23ced:	48 c7 05 a0 33 11 00 	movq   $0x0,0x1133a0(%rip)        # 137098 <traceErrorMessage>
   23cf4:	00 00 00 00 
   23cf8:	48 8b 05 29 38 11 00 	mov    0x113829(%rip),%rax        # 137528 <RecorderDataPtr>
   23cff:	48 85 c0             	test   %rax,%rax
   23d02:	74 11                	je     23d15 <vTraceClearError+0x30>
   23d04:	48 8b 05 1d 38 11 00 	mov    0x11381d(%rip),%rax        # 137528 <RecorderDataPtr>
   23d0b:	c7 80 50 c5 00 00 00 	movl   $0x0,0xc550(%rax)
   23d12:	00 00 00 
   23d15:	90                   	nop
   23d16:	5d                   	pop    %rbp
   23d17:	c3                   	retq   

0000000000023d18 <xTraceGetTraceBuffer>:
   23d18:	f3 0f 1e fa          	endbr64 
   23d1c:	55                   	push   %rbp
   23d1d:	48 89 e5             	mov    %rsp,%rbp
   23d20:	48 8b 05 01 38 11 00 	mov    0x113801(%rip),%rax        # 137528 <RecorderDataPtr>
   23d27:	5d                   	pop    %rbp
   23d28:	c3                   	retq   

0000000000023d29 <uiTraceGetTraceBufferSize>:
   23d29:	f3 0f 1e fa          	endbr64 
   23d2d:	55                   	push   %rbp
   23d2e:	48 89 e5             	mov    %rsp,%rbp
   23d31:	b8 bc b9 02 00       	mov    $0x2b9bc,%eax
   23d36:	5d                   	pop    %rbp
   23d37:	c3                   	retq   

0000000000023d38 <prvTraceTaskInstanceFinish>:
   23d38:	f3 0f 1e fa          	endbr64 
   23d3c:	55                   	push   %rbp
   23d3d:	48 89 e5             	mov    %rsp,%rbp
   23d40:	48 83 ec 20          	sub    $0x20,%rsp
   23d44:	89 f8                	mov    %edi,%eax
   23d46:	88 45 ec             	mov    %al,-0x14(%rbp)
   23d49:	e8 81 f0 fe ff       	callq  12dcf <vPortEnterCritical>
   23d4e:	8b 05 3c 33 11 00    	mov    0x11333c(%rip),%eax        # 137090 <recorder_busy>
   23d54:	83 c0 01             	add    $0x1,%eax
   23d57:	89 05 33 33 11 00    	mov    %eax,0x113333(%rip)        # 137090 <recorder_busy>
   23d5d:	48 8b 05 c4 37 11 00 	mov    0x1137c4(%rip),%rax        # 137528 <RecorderDataPtr>
   23d64:	8b 40 30             	mov    0x30(%rax),%eax
   23d67:	85 c0                	test   %eax,%eax
   23d69:	74 4e                	je     23db9 <prvTraceTaskInstanceFinish+0x81>
   23d6b:	0f b6 05 2f 33 11 00 	movzbl 0x11332f(%rip),%eax        # 1370a1 <handle_of_last_logged_task>
   23d72:	84 c0                	test   %al,%al
   23d74:	74 43                	je     23db9 <prvTraceTaskInstanceFinish+0x81>
   23d76:	bf ff 00 00 00       	mov    $0xff,%edi
   23d7b:	e8 15 29 00 00       	callq  26695 <prvTraceGetDTS>
   23d80:	88 45 f7             	mov    %al,-0x9(%rbp)
   23d83:	e8 63 1f 00 00       	callq  25ceb <prvTraceNextFreeEventBufferSlot>
   23d88:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
   23d8c:	48 83 7d f8 00       	cmpq   $0x0,-0x8(%rbp)
   23d91:	74 26                	je     23db9 <prvTraceTaskInstanceFinish+0x81>
   23d93:	80 7d ec 00          	cmpb   $0x0,-0x14(%rbp)
   23d97:	75 09                	jne    23da2 <prvTraceTaskInstanceFinish+0x6a>
   23d99:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   23d9d:	c6 00 d0             	movb   $0xd0,(%rax)
   23da0:	eb 07                	jmp    23da9 <prvTraceTaskInstanceFinish+0x71>
   23da2:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   23da6:	c6 00 d1             	movb   $0xd1,(%rax)
   23da9:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   23dad:	0f b6 55 f7          	movzbl -0x9(%rbp),%edx
   23db1:	88 50 03             	mov    %dl,0x3(%rax)
   23db4:	e8 6a 28 00 00       	callq  26623 <prvTraceUpdateCounters>
   23db9:	8b 05 d1 32 11 00    	mov    0x1132d1(%rip),%eax        # 137090 <recorder_busy>
   23dbf:	83 e8 01             	sub    $0x1,%eax
   23dc2:	89 05 c8 32 11 00    	mov    %eax,0x1132c8(%rip)        # 137090 <recorder_busy>
   23dc8:	e8 30 f0 fe ff       	callq  12dfd <vPortExitCritical>
   23dcd:	90                   	nop
   23dce:	c9                   	leaveq 
   23dcf:	c3                   	retq   

0000000000023dd0 <vTraceInstanceFinishedNext>:
   23dd0:	f3 0f 1e fa          	endbr64 
   23dd4:	55                   	push   %rbp
   23dd5:	48 89 e5             	mov    %rsp,%rbp
   23dd8:	bf 00 00 00 00       	mov    $0x0,%edi
   23ddd:	e8 56 ff ff ff       	callq  23d38 <prvTraceTaskInstanceFinish>
   23de2:	90                   	nop
   23de3:	5d                   	pop    %rbp
   23de4:	c3                   	retq   

0000000000023de5 <vTraceInstanceFinishedNow>:
   23de5:	f3 0f 1e fa          	endbr64 
   23de9:	55                   	push   %rbp
   23dea:	48 89 e5             	mov    %rsp,%rbp
   23ded:	bf 01 00 00 00       	mov    $0x1,%edi
   23df2:	e8 41 ff ff ff       	callq  23d38 <prvTraceTaskInstanceFinish>
   23df7:	90                   	nop
   23df8:	5d                   	pop    %rbp
   23df9:	c3                   	retq   

0000000000023dfa <xTraceSetISRProperties>:
   23dfa:	f3 0f 1e fa          	endbr64 
   23dfe:	55                   	push   %rbp
   23dff:	48 89 e5             	mov    %rsp,%rbp
   23e02:	48 83 ec 10          	sub    $0x10,%rsp
   23e06:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   23e0a:	89 f0                	mov    %esi,%eax
   23e0c:	88 45 f4             	mov    %al,-0xc(%rbp)
   23e0f:	48 8b 05 12 37 11 00 	mov    0x113712(%rip),%rax        # 137528 <RecorderDataPtr>
   23e16:	48 85 c0             	test   %rax,%rax
   23e19:	75 16                	jne    23e31 <xTraceSetISRProperties+0x37>
   23e1b:	48 8d 3d 5e 4a 00 00 	lea    0x4a5e(%rip),%rdi        # 28880 <xInterruptGivePeriod+0xa90>
   23e22:	e8 83 25 00 00       	callq  263aa <prvTraceError>
   23e27:	b8 00 00 00 00       	mov    $0x0,%eax
   23e2c:	e9 8e 00 00 00       	jmpq   23ebf <xTraceSetISRProperties+0xc5>
   23e31:	48 8b 05 f0 36 11 00 	mov    0x1136f0(%rip),%rax        # 137528 <RecorderDataPtr>
   23e38:	0f b6 50 68          	movzbl 0x68(%rax),%edx
   23e3c:	0f b6 05 fd 36 11 00 	movzbl 0x1136fd(%rip),%eax        # 137540 <handle.2800>
   23e43:	38 c2                	cmp    %al,%dl
   23e45:	73 13                	jae    23e5a <xTraceSetISRProperties+0x60>
   23e47:	48 8d 3d 7a 4a 00 00 	lea    0x4a7a(%rip),%rdi        # 288c8 <xInterruptGivePeriod+0xad8>
   23e4e:	e8 57 25 00 00       	callq  263aa <prvTraceError>
   23e53:	b8 00 00 00 00       	mov    $0x0,%eax
   23e58:	eb 65                	jmp    23ebf <xTraceSetISRProperties+0xc5>
   23e5a:	48 83 7d f8 00       	cmpq   $0x0,-0x8(%rbp)
   23e5f:	75 13                	jne    23e74 <xTraceSetISRProperties+0x7a>
   23e61:	48 8d 3d a0 4a 00 00 	lea    0x4aa0(%rip),%rdi        # 28908 <xInterruptGivePeriod+0xb18>
   23e68:	e8 3d 25 00 00       	callq  263aa <prvTraceError>
   23e6d:	b8 00 00 00 00       	mov    $0x0,%eax
   23e72:	eb 4b                	jmp    23ebf <xTraceSetISRProperties+0xc5>
   23e74:	0f b6 05 c5 36 11 00 	movzbl 0x1136c5(%rip),%eax        # 137540 <handle.2800>
   23e7b:	83 c0 01             	add    $0x1,%eax
   23e7e:	88 05 bc 36 11 00    	mov    %al,0x1136bc(%rip)        # 137540 <handle.2800>
   23e84:	0f b6 05 b5 36 11 00 	movzbl 0x1136b5(%rip),%eax        # 137540 <handle.2800>
   23e8b:	0f b6 c0             	movzbl %al,%eax
   23e8e:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
   23e92:	89 c6                	mov    %eax,%esi
   23e94:	bf 04 00 00 00       	mov    $0x4,%edi
   23e99:	e8 0d 23 00 00       	callq  261ab <prvTraceSetObjectName>
   23e9e:	0f b6 55 f4          	movzbl -0xc(%rbp),%edx
   23ea2:	0f b6 05 97 36 11 00 	movzbl 0x113697(%rip),%eax        # 137540 <handle.2800>
   23ea9:	0f b6 c0             	movzbl %al,%eax
   23eac:	89 c6                	mov    %eax,%esi
   23eae:	bf 04 00 00 00       	mov    $0x4,%edi
   23eb3:	e8 94 18 00 00       	callq  2574c <prvTraceSetPriorityProperty>
   23eb8:	0f b6 05 81 36 11 00 	movzbl 0x113681(%rip),%eax        # 137540 <handle.2800>
   23ebf:	c9                   	leaveq 
   23ec0:	c3                   	retq   

0000000000023ec1 <vTraceStoreISRBegin>:
   23ec1:	f3 0f 1e fa          	endbr64 
   23ec5:	55                   	push   %rbp
   23ec6:	48 89 e5             	mov    %rsp,%rbp
   23ec9:	48 83 ec 20          	sub    $0x20,%rsp
   23ecd:	89 f8                	mov    %edi,%eax
   23ecf:	88 45 ec             	mov    %al,-0x14(%rbp)
   23ed2:	8b 05 b8 31 11 00    	mov    0x1131b8(%rip),%eax        # 137090 <recorder_busy>
   23ed8:	85 c0                	test   %eax,%eax
   23eda:	74 11                	je     23eed <vTraceStoreISRBegin+0x2c>
   23edc:	48 8d 3d 5d 4a 00 00 	lea    0x4a5d(%rip),%rdi        # 28940 <xInterruptGivePeriod+0xb50>
   23ee3:	e8 c2 24 00 00       	callq  263aa <prvTraceError>
   23ee8:	e9 1a 01 00 00       	jmpq   24007 <vTraceStoreISRBegin+0x146>
   23eed:	e8 dd ee fe ff       	callq  12dcf <vPortEnterCritical>
   23ef2:	8b 05 98 31 11 00    	mov    0x113198(%rip),%eax        # 137090 <recorder_busy>
   23ef8:	83 c0 01             	add    $0x1,%eax
   23efb:	89 05 8f 31 11 00    	mov    %eax,0x11318f(%rip)        # 137090 <recorder_busy>
   23f01:	48 8b 05 20 36 11 00 	mov    0x113620(%rip),%rax        # 137528 <RecorderDataPtr>
   23f08:	8b 40 30             	mov    0x30(%rax),%eax
   23f0b:	85 c0                	test   %eax,%eax
   23f0d:	0f 84 e0 00 00 00    	je     23ff3 <vTraceStoreISRBegin+0x132>
   23f13:	0f b6 05 87 31 11 00 	movzbl 0x113187(%rip),%eax        # 1370a1 <handle_of_last_logged_task>
   23f1a:	84 c0                	test   %al,%al
   23f1c:	0f 84 d1 00 00 00    	je     23ff3 <vTraceStoreISRBegin+0x132>
   23f22:	80 7d ec 00          	cmpb   $0x0,-0x14(%rbp)
   23f26:	75 11                	jne    23f39 <vTraceStoreISRBegin+0x78>
   23f28:	48 8d 3d 49 4a 00 00 	lea    0x4a49(%rip),%rdi        # 28978 <xInterruptGivePeriod+0xb88>
   23f2f:	e8 76 24 00 00       	callq  263aa <prvTraceError>
   23f34:	e9 ce 00 00 00       	jmpq   24007 <vTraceStoreISRBegin+0x146>
   23f39:	48 8b 05 e8 35 11 00 	mov    0x1135e8(%rip),%rax        # 137528 <RecorderDataPtr>
   23f40:	0f b6 40 68          	movzbl 0x68(%rax),%eax
   23f44:	38 45 ec             	cmp    %al,-0x14(%rbp)
   23f47:	76 11                	jbe    23f5a <vTraceStoreISRBegin+0x99>
   23f49:	48 8d 3d 68 4a 00 00 	lea    0x4a68(%rip),%rdi        # 289b8 <xInterruptGivePeriod+0xbc8>
   23f50:	e8 55 24 00 00       	callq  263aa <prvTraceError>
   23f55:	e9 ad 00 00 00       	jmpq   24007 <vTraceStoreISRBegin+0x146>
   23f5a:	bf ff ff 00 00       	mov    $0xffff,%edi
   23f5f:	e8 31 27 00 00       	callq  26695 <prvTraceGetDTS>
   23f64:	66 89 45 f6          	mov    %ax,-0xa(%rbp)
   23f68:	48 8b 05 b9 35 11 00 	mov    0x1135b9(%rip),%rax        # 137528 <RecorderDataPtr>
   23f6f:	8b 40 30             	mov    0x30(%rax),%eax
   23f72:	85 c0                	test   %eax,%eax
   23f74:	74 7d                	je     23ff3 <vTraceStoreISRBegin+0x132>
   23f76:	0f b6 05 23 31 11 00 	movzbl 0x113123(%rip),%eax        # 1370a0 <nISRactive>
   23f7d:	3c 07                	cmp    $0x7,%al
   23f7f:	7f 66                	jg     23fe7 <vTraceStoreISRBegin+0x126>
   23f81:	0f b6 45 ec          	movzbl -0x14(%rbp),%eax
   23f85:	88 45 f5             	mov    %al,-0xb(%rbp)
   23f88:	0f b6 05 11 31 11 00 	movzbl 0x113111(%rip),%eax        # 1370a0 <nISRactive>
   23f8f:	0f be c0             	movsbl %al,%eax
   23f92:	48 98                	cltq   
   23f94:	48 8d 0d 95 35 11 00 	lea    0x113595(%rip),%rcx        # 137530 <isrstack>
   23f9b:	0f b6 55 ec          	movzbl -0x14(%rbp),%edx
   23f9f:	88 14 08             	mov    %dl,(%rax,%rcx,1)
   23fa2:	0f b6 05 f7 30 11 00 	movzbl 0x1130f7(%rip),%eax        # 1370a0 <nISRactive>
   23fa9:	83 c0 01             	add    $0x1,%eax
   23fac:	88 05 ee 30 11 00    	mov    %al,0x1130ee(%rip)        # 1370a0 <nISRactive>
   23fb2:	e8 34 1d 00 00       	callq  25ceb <prvTraceNextFreeEventBufferSlot>
   23fb7:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
   23fbb:	48 83 7d f8 00       	cmpq   $0x0,-0x8(%rbp)
   23fc0:	74 31                	je     23ff3 <vTraceStoreISRBegin+0x132>
   23fc2:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   23fc6:	c6 00 04             	movb   $0x4,(%rax)
   23fc9:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   23fcd:	0f b7 55 f6          	movzwl -0xa(%rbp),%edx
   23fd1:	66 89 50 02          	mov    %dx,0x2(%rax)
   23fd5:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   23fd9:	0f b6 55 f5          	movzbl -0xb(%rbp),%edx
   23fdd:	88 50 01             	mov    %dl,0x1(%rax)
   23fe0:	e8 3e 26 00 00       	callq  26623 <prvTraceUpdateCounters>
   23fe5:	eb 0c                	jmp    23ff3 <vTraceStoreISRBegin+0x132>
   23fe7:	48 8d 3d 09 4a 00 00 	lea    0x4a09(%rip),%rdi        # 289f7 <xInterruptGivePeriod+0xc07>
   23fee:	e8 b7 23 00 00       	callq  263aa <prvTraceError>
   23ff3:	8b 05 97 30 11 00    	mov    0x113097(%rip),%eax        # 137090 <recorder_busy>
   23ff9:	83 e8 01             	sub    $0x1,%eax
   23ffc:	89 05 8e 30 11 00    	mov    %eax,0x11308e(%rip)        # 137090 <recorder_busy>
   24002:	e8 f6 ed fe ff       	callq  12dfd <vPortExitCritical>
   24007:	c9                   	leaveq 
   24008:	c3                   	retq   

0000000000024009 <vTraceStoreISREnd>:
   24009:	f3 0f 1e fa          	endbr64 
   2400d:	55                   	push   %rbp
   2400e:	48 89 e5             	mov    %rsp,%rbp
   24011:	48 83 ec 20          	sub    $0x20,%rsp
   24015:	89 7d ec             	mov    %edi,-0x14(%rbp)
   24018:	c6 45 f4 00          	movb   $0x0,-0xc(%rbp)
   2401c:	c6 45 f5 00          	movb   $0x0,-0xb(%rbp)
   24020:	48 8b 05 01 35 11 00 	mov    0x113501(%rip),%rax        # 137528 <RecorderDataPtr>
   24027:	8b 40 30             	mov    0x30(%rax),%eax
   2402a:	85 c0                	test   %eax,%eax
   2402c:	0f 84 28 01 00 00    	je     2415a <vTraceStoreISREnd+0x151>
   24032:	0f b6 05 68 30 11 00 	movzbl 0x113068(%rip),%eax        # 1370a1 <handle_of_last_logged_task>
   24039:	84 c0                	test   %al,%al
   2403b:	0f 84 19 01 00 00    	je     2415a <vTraceStoreISREnd+0x151>
   24041:	8b 05 49 30 11 00    	mov    0x113049(%rip),%eax        # 137090 <recorder_busy>
   24047:	85 c0                	test   %eax,%eax
   24049:	74 11                	je     2405c <vTraceStoreISREnd+0x53>
   2404b:	48 8d 3d c6 49 00 00 	lea    0x49c6(%rip),%rdi        # 28a18 <xInterruptGivePeriod+0xc28>
   24052:	e8 53 23 00 00       	callq  263aa <prvTraceError>
   24057:	e9 ff 00 00 00       	jmpq   2415b <vTraceStoreISREnd+0x152>
   2405c:	0f b6 05 3d 30 11 00 	movzbl 0x11303d(%rip),%eax        # 1370a0 <nISRactive>
   24063:	84 c0                	test   %al,%al
   24065:	75 11                	jne    24078 <vTraceStoreISREnd+0x6f>
   24067:	48 8d 3d e2 49 00 00 	lea    0x49e2(%rip),%rdi        # 28a50 <xInterruptGivePeriod+0xc60>
   2406e:	e8 37 23 00 00       	callq  263aa <prvTraceError>
   24073:	e9 e3 00 00 00       	jmpq   2415b <vTraceStoreISREnd+0x152>
   24078:	e8 52 ed fe ff       	callq  12dcf <vPortEnterCritical>
   2407d:	8b 05 0d 30 11 00    	mov    0x11300d(%rip),%eax        # 137090 <recorder_busy>
   24083:	83 c0 01             	add    $0x1,%eax
   24086:	89 05 04 30 11 00    	mov    %eax,0x113004(%rip)        # 137090 <recorder_busy>
   2408c:	8b 05 ee 2f 11 00    	mov    0x112fee(%rip),%eax        # 137080 <isPendingContextSwitch>
   24092:	0b 45 ec             	or     -0x14(%rbp),%eax
   24095:	89 05 e5 2f 11 00    	mov    %eax,0x112fe5(%rip)        # 137080 <isPendingContextSwitch>
   2409b:	0f b6 05 fe 2f 11 00 	movzbl 0x112ffe(%rip),%eax        # 1370a0 <nISRactive>
   240a2:	83 e8 01             	sub    $0x1,%eax
   240a5:	88 05 f5 2f 11 00    	mov    %al,0x112ff5(%rip)        # 1370a0 <nISRactive>
   240ab:	0f b6 05 ee 2f 11 00 	movzbl 0x112fee(%rip),%eax        # 1370a0 <nISRactive>
   240b2:	84 c0                	test   %al,%al
   240b4:	7e 23                	jle    240d9 <vTraceStoreISREnd+0xd0>
   240b6:	c6 45 f5 05          	movb   $0x5,-0xb(%rbp)
   240ba:	0f b6 05 df 2f 11 00 	movzbl 0x112fdf(%rip),%eax        # 1370a0 <nISRactive>
   240c1:	0f be c0             	movsbl %al,%eax
   240c4:	83 e8 01             	sub    $0x1,%eax
   240c7:	48 98                	cltq   
   240c9:	48 8d 15 60 34 11 00 	lea    0x113460(%rip),%rdx        # 137530 <isrstack>
   240d0:	0f b6 04 10          	movzbl (%rax,%rdx,1),%eax
   240d4:	88 45 f4             	mov    %al,-0xc(%rbp)
   240d7:	eb 21                	jmp    240fa <vTraceStoreISREnd+0xf1>
   240d9:	8b 05 a1 2f 11 00    	mov    0x112fa1(%rip),%eax        # 137080 <isPendingContextSwitch>
   240df:	85 c0                	test   %eax,%eax
   240e1:	74 09                	je     240ec <vTraceStoreISREnd+0xe3>
   240e3:	e8 7a f9 ff ff       	callq  23a62 <prvTraceIsSchedulerSuspended>
   240e8:	84 c0                	test   %al,%al
   240ea:	74 0e                	je     240fa <vTraceStoreISREnd+0xf1>
   240ec:	c6 45 f5 07          	movb   $0x7,-0xb(%rbp)
   240f0:	0f b6 05 aa 2f 11 00 	movzbl 0x112faa(%rip),%eax        # 1370a1 <handle_of_last_logged_task>
   240f7:	88 45 f4             	mov    %al,-0xc(%rbp)
   240fa:	80 7d f5 00          	cmpb   $0x0,-0xb(%rbp)
   240fe:	74 44                	je     24144 <vTraceStoreISREnd+0x13b>
   24100:	bf ff ff 00 00       	mov    $0xffff,%edi
   24105:	e8 8b 25 00 00       	callq  26695 <prvTraceGetDTS>
   2410a:	66 89 45 f6          	mov    %ax,-0xa(%rbp)
   2410e:	e8 d8 1b 00 00       	callq  25ceb <prvTraceNextFreeEventBufferSlot>
   24113:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
   24117:	48 83 7d f8 00       	cmpq   $0x0,-0x8(%rbp)
   2411c:	74 26                	je     24144 <vTraceStoreISREnd+0x13b>
   2411e:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   24122:	0f b6 55 f5          	movzbl -0xb(%rbp),%edx
   24126:	88 10                	mov    %dl,(%rax)
   24128:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   2412c:	0f b6 55 f4          	movzbl -0xc(%rbp),%edx
   24130:	88 50 01             	mov    %dl,0x1(%rax)
   24133:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   24137:	0f b7 55 f6          	movzwl -0xa(%rbp),%edx
   2413b:	66 89 50 02          	mov    %dx,0x2(%rax)
   2413f:	e8 df 24 00 00       	callq  26623 <prvTraceUpdateCounters>
   24144:	8b 05 46 2f 11 00    	mov    0x112f46(%rip),%eax        # 137090 <recorder_busy>
   2414a:	83 e8 01             	sub    $0x1,%eax
   2414d:	89 05 3d 2f 11 00    	mov    %eax,0x112f3d(%rip)        # 137090 <recorder_busy>
   24153:	e8 a5 ec fe ff       	callq  12dfd <vPortExitCritical>
   24158:	eb 01                	jmp    2415b <vTraceStoreISREnd+0x152>
   2415a:	90                   	nop
   2415b:	c9                   	leaveq 
   2415c:	c3                   	retq   

000000000002415d <writeInt8>:
   2415d:	f3 0f 1e fa          	endbr64 
   24161:	55                   	push   %rbp
   24162:	48 89 e5             	mov    %rsp,%rbp
   24165:	48 83 ec 10          	sub    $0x10,%rsp
   24169:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   2416d:	89 f1                	mov    %esi,%ecx
   2416f:	89 d0                	mov    %edx,%eax
   24171:	89 ca                	mov    %ecx,%edx
   24173:	88 55 f4             	mov    %dl,-0xc(%rbp)
   24176:	88 45 f0             	mov    %al,-0x10(%rbp)
   24179:	48 83 7d f8 00       	cmpq   $0x0,-0x8(%rbp)
   2417e:	75 13                	jne    24193 <writeInt8+0x36>
   24180:	48 8d 3d 11 49 00 00 	lea    0x4911(%rip),%rdi        # 28a98 <xInterruptGivePeriod+0xca8>
   24187:	e8 1e 22 00 00       	callq  263aa <prvTraceError>
   2418c:	b8 00 00 00 00       	mov    $0x0,%eax
   24191:	eb 32                	jmp    241c5 <writeInt8+0x68>
   24193:	80 7d f4 23          	cmpb   $0x23,-0xc(%rbp)
   24197:	76 07                	jbe    241a0 <writeInt8+0x43>
   24199:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
   2419e:	eb 25                	jmp    241c5 <writeInt8+0x68>
   241a0:	0f b6 55 f4          	movzbl -0xc(%rbp),%edx
   241a4:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   241a8:	48 01 c2             	add    %rax,%rdx
   241ab:	0f b6 45 f0          	movzbl -0x10(%rbp),%eax
   241af:	88 02                	mov    %al,(%rdx)
   241b1:	80 7d f4 23          	cmpb   $0x23,-0xc(%rbp)
   241b5:	76 07                	jbe    241be <writeInt8+0x61>
   241b7:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
   241bc:	eb 07                	jmp    241c5 <writeInt8+0x68>
   241be:	0f b6 45 f4          	movzbl -0xc(%rbp),%eax
   241c2:	83 c0 01             	add    $0x1,%eax
   241c5:	c9                   	leaveq 
   241c6:	c3                   	retq   

00000000000241c7 <writeInt16>:
   241c7:	f3 0f 1e fa          	endbr64 
   241cb:	55                   	push   %rbp
   241cc:	48 89 e5             	mov    %rsp,%rbp
   241cf:	48 83 ec 10          	sub    $0x10,%rsp
   241d3:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   241d7:	89 f1                	mov    %esi,%ecx
   241d9:	89 d0                	mov    %edx,%eax
   241db:	89 ca                	mov    %ecx,%edx
   241dd:	88 55 f4             	mov    %dl,-0xc(%rbp)
   241e0:	66 89 45 f0          	mov    %ax,-0x10(%rbp)
   241e4:	48 83 7d f8 00       	cmpq   $0x0,-0x8(%rbp)
   241e9:	75 38                	jne    24223 <writeInt16+0x5c>
   241eb:	48 8d 3d ce 48 00 00 	lea    0x48ce(%rip),%rdi        # 28ac0 <xInterruptGivePeriod+0xcd0>
   241f2:	e8 b3 21 00 00       	callq  263aa <prvTraceError>
   241f7:	b8 00 00 00 00       	mov    $0x0,%eax
   241fc:	eb 5f                	jmp    2425d <writeInt16+0x96>
   241fe:	80 7d f4 23          	cmpb   $0x23,-0xc(%rbp)
   24202:	76 07                	jbe    2420b <writeInt16+0x44>
   24204:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
   24209:	eb 52                	jmp    2425d <writeInt16+0x96>
   2420b:	0f b6 55 f4          	movzbl -0xc(%rbp),%edx
   2420f:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   24213:	48 01 d0             	add    %rdx,%rax
   24216:	c6 00 00             	movb   $0x0,(%rax)
   24219:	0f b6 45 f4          	movzbl -0xc(%rbp),%eax
   2421d:	83 c0 01             	add    $0x1,%eax
   24220:	88 45 f4             	mov    %al,-0xc(%rbp)
   24223:	0f b6 45 f4          	movzbl -0xc(%rbp),%eax
   24227:	83 e0 01             	and    $0x1,%eax
   2422a:	84 c0                	test   %al,%al
   2422c:	75 d0                	jne    241fe <writeInt16+0x37>
   2422e:	80 7d f4 22          	cmpb   $0x22,-0xc(%rbp)
   24232:	76 07                	jbe    2423b <writeInt16+0x74>
   24234:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
   24239:	eb 22                	jmp    2425d <writeInt16+0x96>
   2423b:	0f b6 45 f4          	movzbl -0xc(%rbp),%eax
   2423f:	d0 e8                	shr    %al
   24241:	0f b6 c0             	movzbl %al,%eax
   24244:	48 8d 14 00          	lea    (%rax,%rax,1),%rdx
   24248:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   2424c:	48 01 c2             	add    %rax,%rdx
   2424f:	0f b7 45 f0          	movzwl -0x10(%rbp),%eax
   24253:	66 89 02             	mov    %ax,(%rdx)
   24256:	0f b6 45 f4          	movzbl -0xc(%rbp),%eax
   2425a:	83 c0 02             	add    $0x2,%eax
   2425d:	c9                   	leaveq 
   2425e:	c3                   	retq   

000000000002425f <writeInt32>:
   2425f:	f3 0f 1e fa          	endbr64 
   24263:	55                   	push   %rbp
   24264:	48 89 e5             	mov    %rsp,%rbp
   24267:	48 83 ec 10          	sub    $0x10,%rsp
   2426b:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   2426f:	89 f0                	mov    %esi,%eax
   24271:	89 55 f0             	mov    %edx,-0x10(%rbp)
   24274:	88 45 f4             	mov    %al,-0xc(%rbp)
   24277:	48 83 7d f8 00       	cmpq   $0x0,-0x8(%rbp)
   2427c:	75 38                	jne    242b6 <writeInt32+0x57>
   2427e:	48 8d 3d 6b 48 00 00 	lea    0x486b(%rip),%rdi        # 28af0 <xInterruptGivePeriod+0xd00>
   24285:	e8 20 21 00 00       	callq  263aa <prvTraceError>
   2428a:	b8 00 00 00 00       	mov    $0x0,%eax
   2428f:	eb 62                	jmp    242f3 <writeInt32+0x94>
   24291:	80 7d f4 23          	cmpb   $0x23,-0xc(%rbp)
   24295:	76 07                	jbe    2429e <writeInt32+0x3f>
   24297:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
   2429c:	eb 55                	jmp    242f3 <writeInt32+0x94>
   2429e:	0f b6 55 f4          	movzbl -0xc(%rbp),%edx
   242a2:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   242a6:	48 01 d0             	add    %rdx,%rax
   242a9:	c6 00 00             	movb   $0x0,(%rax)
   242ac:	0f b6 45 f4          	movzbl -0xc(%rbp),%eax
   242b0:	83 c0 01             	add    $0x1,%eax
   242b3:	88 45 f4             	mov    %al,-0xc(%rbp)
   242b6:	0f b6 45 f4          	movzbl -0xc(%rbp),%eax
   242ba:	83 e0 03             	and    $0x3,%eax
   242bd:	84 c0                	test   %al,%al
   242bf:	75 d0                	jne    24291 <writeInt32+0x32>
   242c1:	80 7d f4 20          	cmpb   $0x20,-0xc(%rbp)
   242c5:	76 07                	jbe    242ce <writeInt32+0x6f>
   242c7:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
   242cc:	eb 25                	jmp    242f3 <writeInt32+0x94>
   242ce:	0f b6 45 f4          	movzbl -0xc(%rbp),%eax
   242d2:	c0 e8 02             	shr    $0x2,%al
   242d5:	0f b6 c0             	movzbl %al,%eax
   242d8:	48 8d 14 85 00 00 00 	lea    0x0(,%rax,4),%rdx
   242df:	00 
   242e0:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   242e4:	48 01 c2             	add    %rax,%rdx
   242e7:	8b 45 f0             	mov    -0x10(%rbp),%eax
   242ea:	89 02                	mov    %eax,(%rdx)
   242ec:	0f b6 45 f4          	movzbl -0xc(%rbp),%eax
   242f0:	83 c0 04             	add    $0x4,%eax
   242f3:	c9                   	leaveq 
   242f4:	c3                   	retq   

00000000000242f5 <prvTraceUserEventFormat>:
   242f5:	f3 0f 1e fa          	endbr64 
   242f9:	55                   	push   %rbp
   242fa:	48 89 e5             	mov    %rsp,%rbp
   242fd:	48 83 ec 30          	sub    $0x30,%rsp
   24301:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
   24305:	48 89 75 e0          	mov    %rsi,-0x20(%rbp)
   24309:	48 89 55 d8          	mov    %rdx,-0x28(%rbp)
   2430d:	89 c8                	mov    %ecx,%eax
   2430f:	88 45 d4             	mov    %al,-0x2c(%rbp)
   24312:	66 c7 45 fe 00 00    	movw   $0x0,-0x2(%rbp)
   24318:	c6 45 fc 00          	movb   $0x0,-0x4(%rbp)
   2431c:	0f b6 45 d4          	movzbl -0x2c(%rbp),%eax
   24320:	88 45 fd             	mov    %al,-0x3(%rbp)
   24323:	e9 ab 05 00 00       	jmpq   248d3 <prvTraceUserEventFormat+0x5de>
   24328:	0f b7 55 fe          	movzwl -0x2(%rbp),%edx
   2432c:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
   24330:	48 01 d0             	add    %rdx,%rax
   24333:	0f b6 00             	movzbl (%rax),%eax
   24336:	3c 25                	cmp    $0x25,%al
   24338:	0f 85 71 05 00 00    	jne    248af <prvTraceUserEventFormat+0x5ba>
   2433e:	0f b7 45 fe          	movzwl -0x2(%rbp),%eax
   24342:	48 8d 50 01          	lea    0x1(%rax),%rdx
   24346:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
   2434a:	48 01 d0             	add    %rdx,%rax
   2434d:	0f b6 00             	movzbl (%rax),%eax
   24350:	3c 25                	cmp    $0x25,%al
   24352:	75 0a                	jne    2435e <prvTraceUserEventFormat+0x69>
   24354:	66 83 45 fe 02       	addw   $0x2,-0x2(%rbp)
   24359:	e9 75 05 00 00       	jmpq   248d3 <prvTraceUserEventFormat+0x5de>
   2435e:	0f b6 45 fc          	movzbl -0x4(%rbp),%eax
   24362:	83 c0 01             	add    $0x1,%eax
   24365:	88 45 fc             	mov    %al,-0x4(%rbp)
   24368:	0f b7 45 fe          	movzwl -0x2(%rbp),%eax
   2436c:	83 c0 01             	add    $0x1,%eax
   2436f:	66 89 45 fe          	mov    %ax,-0x2(%rbp)
   24373:	eb 0b                	jmp    24380 <prvTraceUserEventFormat+0x8b>
   24375:	0f b7 45 fe          	movzwl -0x2(%rbp),%eax
   24379:	83 c0 01             	add    $0x1,%eax
   2437c:	66 89 45 fe          	mov    %ax,-0x2(%rbp)
   24380:	0f b7 55 fe          	movzwl -0x2(%rbp),%edx
   24384:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
   24388:	48 01 d0             	add    %rdx,%rax
   2438b:	0f b6 00             	movzbl (%rax),%eax
   2438e:	3c 2f                	cmp    $0x2f,%al
   24390:	7e 12                	jle    243a4 <prvTraceUserEventFormat+0xaf>
   24392:	0f b7 55 fe          	movzwl -0x2(%rbp),%edx
   24396:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
   2439a:	48 01 d0             	add    %rdx,%rax
   2439d:	0f b6 00             	movzbl (%rax),%eax
   243a0:	3c 39                	cmp    $0x39,%al
   243a2:	7e d1                	jle    24375 <prvTraceUserEventFormat+0x80>
   243a4:	0f b7 55 fe          	movzwl -0x2(%rbp),%edx
   243a8:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
   243ac:	48 01 d0             	add    %rdx,%rax
   243af:	0f b6 00             	movzbl (%rax),%eax
   243b2:	3c 23                	cmp    $0x23,%al
   243b4:	74 bf                	je     24375 <prvTraceUserEventFormat+0x80>
   243b6:	0f b7 55 fe          	movzwl -0x2(%rbp),%edx
   243ba:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
   243be:	48 01 d0             	add    %rdx,%rax
   243c1:	0f b6 00             	movzbl (%rax),%eax
   243c4:	3c 2e                	cmp    $0x2e,%al
   243c6:	74 ad                	je     24375 <prvTraceUserEventFormat+0x80>
   243c8:	0f b7 55 fe          	movzwl -0x2(%rbp),%edx
   243cc:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
   243d0:	48 01 d0             	add    %rdx,%rax
   243d3:	0f b6 00             	movzbl (%rax),%eax
   243d6:	84 c0                	test   %al,%al
   243d8:	0f 84 0d 05 00 00    	je     248eb <prvTraceUserEventFormat+0x5f6>
   243de:	0f b7 55 fe          	movzwl -0x2(%rbp),%edx
   243e2:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
   243e6:	48 01 d0             	add    %rdx,%rax
   243e9:	0f b6 00             	movzbl (%rax),%eax
   243ec:	0f be c0             	movsbl %al,%eax
   243ef:	83 e8 58             	sub    $0x58,%eax
   243f2:	83 f8 20             	cmp    $0x20,%eax
   243f5:	0f 87 8e 04 00 00    	ja     24889 <prvTraceUserEventFormat+0x594>
   243fb:	89 c0                	mov    %eax,%eax
   243fd:	48 8d 14 85 00 00 00 	lea    0x0(,%rax,4),%rdx
   24404:	00 
   24405:	48 8d 05 88 47 00 00 	lea    0x4788(%rip),%rax        # 28b94 <xInterruptGivePeriod+0xda4>
   2440c:	8b 04 02             	mov    (%rdx,%rax,1),%eax
   2440f:	48 98                	cltq   
   24411:	48 8d 15 7c 47 00 00 	lea    0x477c(%rip),%rdx        # 28b94 <xInterruptGivePeriod+0xda4>
   24418:	48 01 d0             	add    %rdx,%rax
   2441b:	3e ff e0             	notrack jmpq *%rax
   2441e:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
   24422:	8b 00                	mov    (%rax),%eax
   24424:	83 f8 2f             	cmp    $0x2f,%eax
   24427:	77 24                	ja     2444d <prvTraceUserEventFormat+0x158>
   24429:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
   2442d:	48 8b 50 10          	mov    0x10(%rax),%rdx
   24431:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
   24435:	8b 00                	mov    (%rax),%eax
   24437:	89 c0                	mov    %eax,%eax
   24439:	48 01 d0             	add    %rdx,%rax
   2443c:	48 8b 55 e0          	mov    -0x20(%rbp),%rdx
   24440:	8b 12                	mov    (%rdx),%edx
   24442:	8d 4a 08             	lea    0x8(%rdx),%ecx
   24445:	48 8b 55 e0          	mov    -0x20(%rbp),%rdx
   24449:	89 0a                	mov    %ecx,(%rdx)
   2444b:	eb 14                	jmp    24461 <prvTraceUserEventFormat+0x16c>
   2444d:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
   24451:	48 8b 40 08          	mov    0x8(%rax),%rax
   24455:	48 8d 48 08          	lea    0x8(%rax),%rcx
   24459:	48 8b 55 e0          	mov    -0x20(%rbp),%rdx
   2445d:	48 89 4a 08          	mov    %rcx,0x8(%rdx)
   24461:	8b 10                	mov    (%rax),%edx
   24463:	0f b6 4d fd          	movzbl -0x3(%rbp),%ecx
   24467:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
   2446b:	89 ce                	mov    %ecx,%esi
   2446d:	48 89 c7             	mov    %rax,%rdi
   24470:	e8 ea fd ff ff       	callq  2425f <writeInt32>
   24475:	88 45 fd             	mov    %al,-0x3(%rbp)
   24478:	e9 19 04 00 00       	jmpq   24896 <prvTraceUserEventFormat+0x5a1>
   2447d:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
   24481:	8b 00                	mov    (%rax),%eax
   24483:	83 f8 2f             	cmp    $0x2f,%eax
   24486:	77 24                	ja     244ac <prvTraceUserEventFormat+0x1b7>
   24488:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
   2448c:	48 8b 50 10          	mov    0x10(%rax),%rdx
   24490:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
   24494:	8b 00                	mov    (%rax),%eax
   24496:	89 c0                	mov    %eax,%eax
   24498:	48 01 d0             	add    %rdx,%rax
   2449b:	48 8b 55 e0          	mov    -0x20(%rbp),%rdx
   2449f:	8b 12                	mov    (%rdx),%edx
   244a1:	8d 4a 08             	lea    0x8(%rdx),%ecx
   244a4:	48 8b 55 e0          	mov    -0x20(%rbp),%rdx
   244a8:	89 0a                	mov    %ecx,(%rdx)
   244aa:	eb 14                	jmp    244c0 <prvTraceUserEventFormat+0x1cb>
   244ac:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
   244b0:	48 8b 40 08          	mov    0x8(%rax),%rax
   244b4:	48 8d 48 08          	lea    0x8(%rax),%rcx
   244b8:	48 8b 55 e0          	mov    -0x20(%rbp),%rdx
   244bc:	48 89 4a 08          	mov    %rcx,0x8(%rdx)
   244c0:	8b 10                	mov    (%rax),%edx
   244c2:	0f b6 4d fd          	movzbl -0x3(%rbp),%ecx
   244c6:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
   244ca:	89 ce                	mov    %ecx,%esi
   244cc:	48 89 c7             	mov    %rax,%rdi
   244cf:	e8 8b fd ff ff       	callq  2425f <writeInt32>
   244d4:	88 45 fd             	mov    %al,-0x3(%rbp)
   244d7:	e9 ba 03 00 00       	jmpq   24896 <prvTraceUserEventFormat+0x5a1>
   244dc:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
   244e0:	8b 00                	mov    (%rax),%eax
   244e2:	83 f8 2f             	cmp    $0x2f,%eax
   244e5:	77 24                	ja     2450b <prvTraceUserEventFormat+0x216>
   244e7:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
   244eb:	48 8b 50 10          	mov    0x10(%rax),%rdx
   244ef:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
   244f3:	8b 00                	mov    (%rax),%eax
   244f5:	89 c0                	mov    %eax,%eax
   244f7:	48 01 d0             	add    %rdx,%rax
   244fa:	48 8b 55 e0          	mov    -0x20(%rbp),%rdx
   244fe:	8b 12                	mov    (%rdx),%edx
   24500:	8d 4a 08             	lea    0x8(%rdx),%ecx
   24503:	48 8b 55 e0          	mov    -0x20(%rbp),%rdx
   24507:	89 0a                	mov    %ecx,(%rdx)
   24509:	eb 14                	jmp    2451f <prvTraceUserEventFormat+0x22a>
   2450b:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
   2450f:	48 8b 40 08          	mov    0x8(%rax),%rax
   24513:	48 8d 48 08          	lea    0x8(%rax),%rcx
   24517:	48 8b 55 e0          	mov    -0x20(%rbp),%rdx
   2451b:	48 89 4a 08          	mov    %rcx,0x8(%rdx)
   2451f:	48 8b 00             	mov    (%rax),%rax
   24522:	48 89 c7             	mov    %rax,%rdi
   24525:	e8 d1 07 00 00       	callq  24cfb <xTraceRegisterString>
   2452a:	0f b7 d0             	movzwl %ax,%edx
   2452d:	0f b6 4d fd          	movzbl -0x3(%rbp),%ecx
   24531:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
   24535:	89 ce                	mov    %ecx,%esi
   24537:	48 89 c7             	mov    %rax,%rdi
   2453a:	e8 88 fc ff ff       	callq  241c7 <writeInt16>
   2453f:	88 45 fd             	mov    %al,-0x3(%rbp)
   24542:	e9 4f 03 00 00       	jmpq   24896 <prvTraceUserEventFormat+0x5a1>
   24547:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
   2454b:	8b 40 04             	mov    0x4(%rax),%eax
   2454e:	3d af 00 00 00       	cmp    $0xaf,%eax
   24553:	77 27                	ja     2457c <prvTraceUserEventFormat+0x287>
   24555:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
   24559:	48 8b 50 10          	mov    0x10(%rax),%rdx
   2455d:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
   24561:	8b 40 04             	mov    0x4(%rax),%eax
   24564:	89 c0                	mov    %eax,%eax
   24566:	48 01 d0             	add    %rdx,%rax
   24569:	48 8b 55 e0          	mov    -0x20(%rbp),%rdx
   2456d:	8b 52 04             	mov    0x4(%rdx),%edx
   24570:	8d 4a 10             	lea    0x10(%rdx),%ecx
   24573:	48 8b 55 e0          	mov    -0x20(%rbp),%rdx
   24577:	89 4a 04             	mov    %ecx,0x4(%rdx)
   2457a:	eb 14                	jmp    24590 <prvTraceUserEventFormat+0x29b>
   2457c:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
   24580:	48 8b 40 08          	mov    0x8(%rax),%rax
   24584:	48 8d 48 08          	lea    0x8(%rax),%rcx
   24588:	48 8b 55 e0          	mov    -0x20(%rbp),%rdx
   2458c:	48 89 4a 08          	mov    %rcx,0x8(%rdx)
   24590:	f2 0f 10 00          	movsd  (%rax),%xmm0
   24594:	f2 48 0f 2c c0       	cvttsd2si %xmm0,%rax
   24599:	89 c2                	mov    %eax,%edx
   2459b:	0f b6 4d fd          	movzbl -0x3(%rbp),%ecx
   2459f:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
   245a3:	89 ce                	mov    %ecx,%esi
   245a5:	48 89 c7             	mov    %rax,%rdi
   245a8:	e8 b2 fc ff ff       	callq  2425f <writeInt32>
   245ad:	88 45 fd             	mov    %al,-0x3(%rbp)
   245b0:	e9 e1 02 00 00       	jmpq   24896 <prvTraceUserEventFormat+0x5a1>
   245b5:	0f b7 45 fe          	movzwl -0x2(%rbp),%eax
   245b9:	83 c0 01             	add    $0x1,%eax
   245bc:	66 89 45 fe          	mov    %ax,-0x2(%rbp)
   245c0:	0f b7 55 fe          	movzwl -0x2(%rbp),%edx
   245c4:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
   245c8:	48 01 d0             	add    %rdx,%rax
   245cb:	0f b6 00             	movzbl (%rax),%eax
   245ce:	0f be c0             	movsbl %al,%eax
   245d1:	83 f8 66             	cmp    $0x66,%eax
   245d4:	0f 85 bb 02 00 00    	jne    24895 <prvTraceUserEventFormat+0x5a0>
   245da:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
   245de:	8b 40 04             	mov    0x4(%rax),%eax
   245e1:	3d af 00 00 00       	cmp    $0xaf,%eax
   245e6:	77 27                	ja     2460f <prvTraceUserEventFormat+0x31a>
   245e8:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
   245ec:	48 8b 50 10          	mov    0x10(%rax),%rdx
   245f0:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
   245f4:	8b 40 04             	mov    0x4(%rax),%eax
   245f7:	89 c0                	mov    %eax,%eax
   245f9:	48 01 d0             	add    %rdx,%rax
   245fc:	48 8b 55 e0          	mov    -0x20(%rbp),%rdx
   24600:	8b 52 04             	mov    0x4(%rdx),%edx
   24603:	8d 4a 10             	lea    0x10(%rdx),%ecx
   24606:	48 8b 55 e0          	mov    -0x20(%rbp),%rdx
   2460a:	89 4a 04             	mov    %ecx,0x4(%rdx)
   2460d:	eb 14                	jmp    24623 <prvTraceUserEventFormat+0x32e>
   2460f:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
   24613:	48 8b 40 08          	mov    0x8(%rax),%rax
   24617:	48 8d 48 08          	lea    0x8(%rax),%rcx
   2461b:	48 8b 55 e0          	mov    -0x20(%rbp),%rdx
   2461f:	48 89 4a 08          	mov    %rcx,0x8(%rdx)
   24623:	f2 0f 10 00          	movsd  (%rax),%xmm0
   24627:	f2 48 0f 2c c0       	cvttsd2si %xmm0,%rax
   2462c:	89 c2                	mov    %eax,%edx
   2462e:	0f b6 4d fd          	movzbl -0x3(%rbp),%ecx
   24632:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
   24636:	89 ce                	mov    %ecx,%esi
   24638:	48 89 c7             	mov    %rax,%rdi
   2463b:	e8 1f fc ff ff       	callq  2425f <writeInt32>
   24640:	88 45 fd             	mov    %al,-0x3(%rbp)
   24643:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
   24647:	8b 40 04             	mov    0x4(%rax),%eax
   2464a:	3d af 00 00 00       	cmp    $0xaf,%eax
   2464f:	77 27                	ja     24678 <prvTraceUserEventFormat+0x383>
   24651:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
   24655:	48 8b 50 10          	mov    0x10(%rax),%rdx
   24659:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
   2465d:	8b 40 04             	mov    0x4(%rax),%eax
   24660:	89 c0                	mov    %eax,%eax
   24662:	48 01 d0             	add    %rdx,%rax
   24665:	48 8b 55 e0          	mov    -0x20(%rbp),%rdx
   24669:	8b 52 04             	mov    0x4(%rdx),%edx
   2466c:	8d 4a 10             	lea    0x10(%rdx),%ecx
   2466f:	48 8b 55 e0          	mov    -0x20(%rbp),%rdx
   24673:	89 4a 04             	mov    %ecx,0x4(%rdx)
   24676:	eb 14                	jmp    2468c <prvTraceUserEventFormat+0x397>
   24678:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
   2467c:	48 8b 40 08          	mov    0x8(%rax),%rax
   24680:	48 8d 48 08          	lea    0x8(%rax),%rcx
   24684:	48 8b 55 e0          	mov    -0x20(%rbp),%rdx
   24688:	48 89 4a 08          	mov    %rcx,0x8(%rdx)
   2468c:	f2 0f 10 00          	movsd  (%rax),%xmm0
   24690:	f2 48 0f 2c c0       	cvttsd2si %xmm0,%rax
   24695:	89 c2                	mov    %eax,%edx
   24697:	0f b6 4d fd          	movzbl -0x3(%rbp),%ecx
   2469b:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
   2469f:	89 ce                	mov    %ecx,%esi
   246a1:	48 89 c7             	mov    %rax,%rdi
   246a4:	e8 b6 fb ff ff       	callq  2425f <writeInt32>
   246a9:	88 45 fd             	mov    %al,-0x3(%rbp)
   246ac:	90                   	nop
   246ad:	e9 e3 01 00 00       	jmpq   24895 <prvTraceUserEventFormat+0x5a0>
   246b2:	0f b7 45 fe          	movzwl -0x2(%rbp),%eax
   246b6:	83 c0 01             	add    $0x1,%eax
   246b9:	66 89 45 fe          	mov    %ax,-0x2(%rbp)
   246bd:	0f b7 55 fe          	movzwl -0x2(%rbp),%edx
   246c1:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
   246c5:	48 01 d0             	add    %rdx,%rax
   246c8:	0f b6 00             	movzbl (%rax),%eax
   246cb:	0f be c0             	movsbl %al,%eax
   246ce:	83 f8 64             	cmp    $0x64,%eax
   246d1:	74 0a                	je     246dd <prvTraceUserEventFormat+0x3e8>
   246d3:	83 f8 75             	cmp    $0x75,%eax
   246d6:	74 64                	je     2473c <prvTraceUserEventFormat+0x447>
   246d8:	e9 b9 01 00 00       	jmpq   24896 <prvTraceUserEventFormat+0x5a1>
   246dd:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
   246e1:	8b 00                	mov    (%rax),%eax
   246e3:	83 f8 2f             	cmp    $0x2f,%eax
   246e6:	77 24                	ja     2470c <prvTraceUserEventFormat+0x417>
   246e8:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
   246ec:	48 8b 50 10          	mov    0x10(%rax),%rdx
   246f0:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
   246f4:	8b 00                	mov    (%rax),%eax
   246f6:	89 c0                	mov    %eax,%eax
   246f8:	48 01 d0             	add    %rdx,%rax
   246fb:	48 8b 55 e0          	mov    -0x20(%rbp),%rdx
   246ff:	8b 12                	mov    (%rdx),%edx
   24701:	8d 4a 08             	lea    0x8(%rdx),%ecx
   24704:	48 8b 55 e0          	mov    -0x20(%rbp),%rdx
   24708:	89 0a                	mov    %ecx,(%rdx)
   2470a:	eb 14                	jmp    24720 <prvTraceUserEventFormat+0x42b>
   2470c:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
   24710:	48 8b 40 08          	mov    0x8(%rax),%rax
   24714:	48 8d 48 08          	lea    0x8(%rax),%rcx
   24718:	48 8b 55 e0          	mov    -0x20(%rbp),%rdx
   2471c:	48 89 4a 08          	mov    %rcx,0x8(%rdx)
   24720:	8b 00                	mov    (%rax),%eax
   24722:	0f b7 d0             	movzwl %ax,%edx
   24725:	0f b6 4d fd          	movzbl -0x3(%rbp),%ecx
   24729:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
   2472d:	89 ce                	mov    %ecx,%esi
   2472f:	48 89 c7             	mov    %rax,%rdi
   24732:	e8 90 fa ff ff       	callq  241c7 <writeInt16>
   24737:	88 45 fd             	mov    %al,-0x3(%rbp)
   2473a:	eb 5e                	jmp    2479a <prvTraceUserEventFormat+0x4a5>
   2473c:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
   24740:	8b 00                	mov    (%rax),%eax
   24742:	83 f8 2f             	cmp    $0x2f,%eax
   24745:	77 24                	ja     2476b <prvTraceUserEventFormat+0x476>
   24747:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
   2474b:	48 8b 50 10          	mov    0x10(%rax),%rdx
   2474f:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
   24753:	8b 00                	mov    (%rax),%eax
   24755:	89 c0                	mov    %eax,%eax
   24757:	48 01 d0             	add    %rdx,%rax
   2475a:	48 8b 55 e0          	mov    -0x20(%rbp),%rdx
   2475e:	8b 12                	mov    (%rdx),%edx
   24760:	8d 4a 08             	lea    0x8(%rdx),%ecx
   24763:	48 8b 55 e0          	mov    -0x20(%rbp),%rdx
   24767:	89 0a                	mov    %ecx,(%rdx)
   24769:	eb 14                	jmp    2477f <prvTraceUserEventFormat+0x48a>
   2476b:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
   2476f:	48 8b 40 08          	mov    0x8(%rax),%rax
   24773:	48 8d 48 08          	lea    0x8(%rax),%rcx
   24777:	48 8b 55 e0          	mov    -0x20(%rbp),%rdx
   2477b:	48 89 4a 08          	mov    %rcx,0x8(%rdx)
   2477f:	8b 00                	mov    (%rax),%eax
   24781:	0f b7 d0             	movzwl %ax,%edx
   24784:	0f b6 4d fd          	movzbl -0x3(%rbp),%ecx
   24788:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
   2478c:	89 ce                	mov    %ecx,%esi
   2478e:	48 89 c7             	mov    %rax,%rdi
   24791:	e8 31 fa ff ff       	callq  241c7 <writeInt16>
   24796:	88 45 fd             	mov    %al,-0x3(%rbp)
   24799:	90                   	nop
   2479a:	e9 f7 00 00 00       	jmpq   24896 <prvTraceUserEventFormat+0x5a1>
   2479f:	0f b7 45 fe          	movzwl -0x2(%rbp),%eax
   247a3:	83 c0 01             	add    $0x1,%eax
   247a6:	66 89 45 fe          	mov    %ax,-0x2(%rbp)
   247aa:	0f b7 55 fe          	movzwl -0x2(%rbp),%edx
   247ae:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
   247b2:	48 01 d0             	add    %rdx,%rax
   247b5:	0f b6 00             	movzbl (%rax),%eax
   247b8:	0f be c0             	movsbl %al,%eax
   247bb:	83 f8 64             	cmp    $0x64,%eax
   247be:	74 0a                	je     247ca <prvTraceUserEventFormat+0x4d5>
   247c0:	83 f8 75             	cmp    $0x75,%eax
   247c3:	74 64                	je     24829 <prvTraceUserEventFormat+0x534>
   247c5:	e9 cc 00 00 00       	jmpq   24896 <prvTraceUserEventFormat+0x5a1>
   247ca:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
   247ce:	8b 00                	mov    (%rax),%eax
   247d0:	83 f8 2f             	cmp    $0x2f,%eax
   247d3:	77 24                	ja     247f9 <prvTraceUserEventFormat+0x504>
   247d5:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
   247d9:	48 8b 50 10          	mov    0x10(%rax),%rdx
   247dd:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
   247e1:	8b 00                	mov    (%rax),%eax
   247e3:	89 c0                	mov    %eax,%eax
   247e5:	48 01 d0             	add    %rdx,%rax
   247e8:	48 8b 55 e0          	mov    -0x20(%rbp),%rdx
   247ec:	8b 12                	mov    (%rdx),%edx
   247ee:	8d 4a 08             	lea    0x8(%rdx),%ecx
   247f1:	48 8b 55 e0          	mov    -0x20(%rbp),%rdx
   247f5:	89 0a                	mov    %ecx,(%rdx)
   247f7:	eb 14                	jmp    2480d <prvTraceUserEventFormat+0x518>
   247f9:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
   247fd:	48 8b 40 08          	mov    0x8(%rax),%rax
   24801:	48 8d 48 08          	lea    0x8(%rax),%rcx
   24805:	48 8b 55 e0          	mov    -0x20(%rbp),%rdx
   24809:	48 89 4a 08          	mov    %rcx,0x8(%rdx)
   2480d:	8b 00                	mov    (%rax),%eax
   2480f:	0f b6 d0             	movzbl %al,%edx
   24812:	0f b6 4d fd          	movzbl -0x3(%rbp),%ecx
   24816:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
   2481a:	89 ce                	mov    %ecx,%esi
   2481c:	48 89 c7             	mov    %rax,%rdi
   2481f:	e8 39 f9 ff ff       	callq  2415d <writeInt8>
   24824:	88 45 fd             	mov    %al,-0x3(%rbp)
   24827:	eb 5e                	jmp    24887 <prvTraceUserEventFormat+0x592>
   24829:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
   2482d:	8b 00                	mov    (%rax),%eax
   2482f:	83 f8 2f             	cmp    $0x2f,%eax
   24832:	77 24                	ja     24858 <prvTraceUserEventFormat+0x563>
   24834:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
   24838:	48 8b 50 10          	mov    0x10(%rax),%rdx
   2483c:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
   24840:	8b 00                	mov    (%rax),%eax
   24842:	89 c0                	mov    %eax,%eax
   24844:	48 01 d0             	add    %rdx,%rax
   24847:	48 8b 55 e0          	mov    -0x20(%rbp),%rdx
   2484b:	8b 12                	mov    (%rdx),%edx
   2484d:	8d 4a 08             	lea    0x8(%rdx),%ecx
   24850:	48 8b 55 e0          	mov    -0x20(%rbp),%rdx
   24854:	89 0a                	mov    %ecx,(%rdx)
   24856:	eb 14                	jmp    2486c <prvTraceUserEventFormat+0x577>
   24858:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
   2485c:	48 8b 40 08          	mov    0x8(%rax),%rax
   24860:	48 8d 48 08          	lea    0x8(%rax),%rcx
   24864:	48 8b 55 e0          	mov    -0x20(%rbp),%rdx
   24868:	48 89 4a 08          	mov    %rcx,0x8(%rdx)
   2486c:	8b 00                	mov    (%rax),%eax
   2486e:	0f b6 d0             	movzbl %al,%edx
   24871:	0f b6 4d fd          	movzbl -0x3(%rbp),%ecx
   24875:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
   24879:	89 ce                	mov    %ecx,%esi
   2487b:	48 89 c7             	mov    %rax,%rdi
   2487e:	e8 da f8 ff ff       	callq  2415d <writeInt8>
   24883:	88 45 fd             	mov    %al,-0x3(%rbp)
   24886:	90                   	nop
   24887:	eb 0d                	jmp    24896 <prvTraceUserEventFormat+0x5a1>
   24889:	0f b6 45 fc          	movzbl -0x4(%rbp),%eax
   2488d:	83 e8 01             	sub    $0x1,%eax
   24890:	88 45 fc             	mov    %al,-0x4(%rbp)
   24893:	eb 01                	jmp    24896 <prvTraceUserEventFormat+0x5a1>
   24895:	90                   	nop
   24896:	80 7d fc 0f          	cmpb   $0xf,-0x4(%rbp)
   2489a:	76 13                	jbe    248af <prvTraceUserEventFormat+0x5ba>
   2489c:	48 8d 3d 7d 42 00 00 	lea    0x427d(%rip),%rdi        # 28b20 <xInterruptGivePeriod+0xd30>
   248a3:	e8 02 1b 00 00       	callq  263aa <prvTraceError>
   248a8:	b8 00 00 00 00       	mov    $0x0,%eax
   248ad:	eb 47                	jmp    248f6 <prvTraceUserEventFormat+0x601>
   248af:	0f b7 45 fe          	movzwl -0x2(%rbp),%eax
   248b3:	83 c0 01             	add    $0x1,%eax
   248b6:	66 89 45 fe          	mov    %ax,-0x2(%rbp)
   248ba:	80 7d fd ff          	cmpb   $0xff,-0x3(%rbp)
   248be:	75 13                	jne    248d3 <prvTraceUserEventFormat+0x5de>
   248c0:	48 8d 3d 91 42 00 00 	lea    0x4291(%rip),%rdi        # 28b58 <xInterruptGivePeriod+0xd68>
   248c7:	e8 de 1a 00 00       	callq  263aa <prvTraceError>
   248cc:	b8 00 00 00 00       	mov    $0x0,%eax
   248d1:	eb 23                	jmp    248f6 <prvTraceUserEventFormat+0x601>
   248d3:	0f b7 55 fe          	movzwl -0x2(%rbp),%edx
   248d7:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
   248db:	48 01 d0             	add    %rdx,%rax
   248de:	0f b6 00             	movzbl (%rax),%eax
   248e1:	84 c0                	test   %al,%al
   248e3:	0f 85 3f fa ff ff    	jne    24328 <prvTraceUserEventFormat+0x33>
   248e9:	eb 01                	jmp    248ec <prvTraceUserEventFormat+0x5f7>
   248eb:	90                   	nop
   248ec:	0f b6 45 fd          	movzbl -0x3(%rbp),%eax
   248f0:	83 c0 03             	add    $0x3,%eax
   248f3:	c0 e8 02             	shr    $0x2,%al
   248f6:	c9                   	leaveq 
   248f7:	c3                   	retq   

00000000000248f8 <vTracePrintF>:
   248f8:	f3 0f 1e fa          	endbr64 
   248fc:	55                   	push   %rbp
   248fd:	48 89 e5             	mov    %rsp,%rbp
   24900:	48 81 ec e0 00 00 00 	sub    $0xe0,%rsp
   24907:	48 89 b5 20 ff ff ff 	mov    %rsi,-0xe0(%rbp)
   2490e:	48 89 95 60 ff ff ff 	mov    %rdx,-0xa0(%rbp)
   24915:	48 89 8d 68 ff ff ff 	mov    %rcx,-0x98(%rbp)
   2491c:	4c 89 85 70 ff ff ff 	mov    %r8,-0x90(%rbp)
   24923:	4c 89 8d 78 ff ff ff 	mov    %r9,-0x88(%rbp)
   2492a:	84 c0                	test   %al,%al
   2492c:	74 20                	je     2494e <vTracePrintF+0x56>
   2492e:	0f 29 45 80          	movaps %xmm0,-0x80(%rbp)
   24932:	0f 29 4d 90          	movaps %xmm1,-0x70(%rbp)
   24936:	0f 29 55 a0          	movaps %xmm2,-0x60(%rbp)
   2493a:	0f 29 5d b0          	movaps %xmm3,-0x50(%rbp)
   2493e:	0f 29 65 c0          	movaps %xmm4,-0x40(%rbp)
   24942:	0f 29 6d d0          	movaps %xmm5,-0x30(%rbp)
   24946:	0f 29 75 e0          	movaps %xmm6,-0x20(%rbp)
   2494a:	0f 29 7d f0          	movaps %xmm7,-0x10(%rbp)
   2494e:	89 f8                	mov    %edi,%eax
   24950:	66 89 85 2c ff ff ff 	mov    %ax,-0xd4(%rbp)
   24957:	64 48 8b 04 25 28 00 	mov    %fs:0x28,%rax
   2495e:	00 00 
   24960:	48 89 85 48 ff ff ff 	mov    %rax,-0xb8(%rbp)
   24967:	31 c0                	xor    %eax,%eax
   24969:	c7 85 30 ff ff ff 10 	movl   $0x10,-0xd0(%rbp)
   24970:	00 00 00 
   24973:	c7 85 34 ff ff ff 30 	movl   $0x30,-0xcc(%rbp)
   2497a:	00 00 00 
   2497d:	48 8d 45 10          	lea    0x10(%rbp),%rax
   24981:	48 89 85 38 ff ff ff 	mov    %rax,-0xc8(%rbp)
   24988:	48 8d 85 50 ff ff ff 	lea    -0xb0(%rbp),%rax
   2498f:	48 89 85 40 ff ff ff 	mov    %rax,-0xc0(%rbp)
   24996:	0f b7 85 2c ff ff ff 	movzwl -0xd4(%rbp),%eax
   2499d:	48 8d 95 30 ff ff ff 	lea    -0xd0(%rbp),%rdx
   249a4:	48 8b 8d 20 ff ff ff 	mov    -0xe0(%rbp),%rcx
   249ab:	48 89 ce             	mov    %rcx,%rsi
   249ae:	89 c7                	mov    %eax,%edi
   249b0:	e8 1a 00 00 00       	callq  249cf <vTraceVPrintF>
   249b5:	90                   	nop
   249b6:	48 8b 85 48 ff ff ff 	mov    -0xb8(%rbp),%rax
   249bd:	64 48 33 04 25 28 00 	xor    %fs:0x28,%rax
   249c4:	00 00 
   249c6:	74 05                	je     249cd <vTracePrintF+0xd5>
   249c8:	e8 03 db fd ff       	callq  24d0 <__stack_chk_fail@plt>
   249cd:	c9                   	leaveq 
   249ce:	c3                   	retq   

00000000000249cf <vTraceVPrintF>:
   249cf:	f3 0f 1e fa          	endbr64 
   249d3:	55                   	push   %rbp
   249d4:	48 89 e5             	mov    %rsp,%rbp
   249d7:	48 83 ec 60          	sub    $0x60,%rsp
   249db:	89 f8                	mov    %edi,%eax
   249dd:	48 89 75 b0          	mov    %rsi,-0x50(%rbp)
   249e1:	48 89 55 a8          	mov    %rdx,-0x58(%rbp)
   249e5:	66 89 45 bc          	mov    %ax,-0x44(%rbp)
   249e9:	64 48 8b 04 25 28 00 	mov    %fs:0x28,%rax
   249f0:	00 00 
   249f2:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
   249f6:	31 c0                	xor    %eax,%eax
   249f8:	48 83 7d b0 00       	cmpq   $0x0,-0x50(%rbp)
   249fd:	75 11                	jne    24a10 <vTraceVPrintF+0x41>
   249ff:	48 8d 3d 12 42 00 00 	lea    0x4212(%rip),%rdi        # 28c18 <xInterruptGivePeriod+0xe28>
   24a06:	e8 9f 19 00 00       	callq  263aa <prvTraceError>
   24a0b:	e9 2d 02 00 00       	jmpq   24c3d <vTraceVPrintF+0x26e>
   24a10:	e8 ba e3 fe ff       	callq  12dcf <vPortEnterCritical>
   24a15:	8b 05 75 26 11 00    	mov    0x112675(%rip),%eax        # 137090 <recorder_busy>
   24a1b:	83 c0 01             	add    $0x1,%eax
   24a1e:	89 05 6c 26 11 00    	mov    %eax,0x11266c(%rip)        # 137090 <recorder_busy>
   24a24:	48 8b 05 fd 2a 11 00 	mov    0x112afd(%rip),%rax        # 137528 <RecorderDataPtr>
   24a2b:	8b 40 30             	mov    0x30(%rax),%eax
   24a2e:	85 c0                	test   %eax,%eax
   24a30:	0f 84 f3 01 00 00    	je     24c29 <vTraceVPrintF+0x25a>
   24a36:	0f b6 05 64 26 11 00 	movzbl 0x112664(%rip),%eax        # 1370a1 <handle_of_last_logged_task>
   24a3d:	84 c0                	test   %al,%al
   24a3f:	0f 84 e4 01 00 00    	je     24c29 <vTraceVPrintF+0x25a>
   24a45:	48 8d 45 d0          	lea    -0x30(%rbp),%rax
   24a49:	48 89 45 c8          	mov    %rax,-0x38(%rbp)
   24a4d:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
   24a51:	c6 00 aa             	movb   $0xaa,(%rax)
   24a54:	48 8d 55 d0          	lea    -0x30(%rbp),%rdx
   24a58:	48 8b 75 a8          	mov    -0x58(%rbp),%rsi
   24a5c:	48 8b 45 b0          	mov    -0x50(%rbp),%rax
   24a60:	b9 04 00 00 00       	mov    $0x4,%ecx
   24a65:	48 89 c7             	mov    %rax,%rdi
   24a68:	e8 88 f8 ff ff       	callq  242f5 <prvTraceUserEventFormat>
   24a6d:	0f b6 c0             	movzbl %al,%eax
   24a70:	89 45 c4             	mov    %eax,-0x3c(%rbp)
   24a73:	0f b7 55 bc          	movzwl -0x44(%rbp),%edx
   24a77:	48 8b 45 b0          	mov    -0x50(%rbp),%rax
   24a7b:	89 d6                	mov    %edx,%esi
   24a7d:	48 89 c7             	mov    %rax,%rdi
   24a80:	e8 20 18 00 00       	callq  262a5 <prvTraceOpenSymbol>
   24a85:	48 8b 55 c8          	mov    -0x38(%rbp),%rdx
   24a89:	66 89 42 02          	mov    %ax,0x2(%rdx)
   24a8d:	bf ff 00 00 00       	mov    $0xff,%edi
   24a92:	e8 fe 1b 00 00       	callq  26695 <prvTraceGetDTS>
   24a97:	89 c2                	mov    %eax,%edx
   24a99:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
   24a9d:	88 50 01             	mov    %dl,0x1(%rax)
   24aa0:	48 8b 05 81 2a 11 00 	mov    0x112a81(%rip),%rax        # 137528 <RecorderDataPtr>
   24aa7:	8b 40 30             	mov    0x30(%rax),%eax
   24aaa:	85 c0                	test   %eax,%eax
   24aac:	0f 84 77 01 00 00    	je     24c29 <vTraceVPrintF+0x25a>
   24ab2:	48 8b 05 6f 2a 11 00 	mov    0x112a6f(%rip),%rax        # 137528 <RecorderDataPtr>
   24ab9:	8b 50 1c             	mov    0x1c(%rax),%edx
   24abc:	8b 45 c4             	mov    -0x3c(%rbp),%eax
   24abf:	01 c2                	add    %eax,%edx
   24ac1:	48 8b 05 60 2a 11 00 	mov    0x112a60(%rip),%rax        # 137528 <RecorderDataPtr>
   24ac8:	8b 40 18             	mov    0x18(%rax),%eax
   24acb:	39 c2                	cmp    %eax,%edx
   24acd:	76 6c                	jbe    24b3b <vTraceVPrintF+0x16c>
   24acf:	48 8b 05 52 2a 11 00 	mov    0x112a52(%rip),%rax        # 137528 <RecorderDataPtr>
   24ad6:	8b 50 18             	mov    0x18(%rax),%edx
   24ad9:	48 8b 05 48 2a 11 00 	mov    0x112a48(%rip),%rax        # 137528 <RecorderDataPtr>
   24ae0:	8b 40 1c             	mov    0x1c(%rax),%eax
   24ae3:	29 c2                	sub    %eax,%edx
   24ae5:	89 d0                	mov    %edx,%eax
   24ae7:	c1 e0 02             	shl    $0x2,%eax
   24aea:	89 c1                	mov    %eax,%ecx
   24aec:	48 8b 15 35 2a 11 00 	mov    0x112a35(%rip),%rdx        # 137528 <RecorderDataPtr>
   24af3:	48 8b 05 2e 2a 11 00 	mov    0x112a2e(%rip),%rax        # 137528 <RecorderDataPtr>
   24afa:	8b 40 1c             	mov    0x1c(%rax),%eax
   24afd:	c1 e0 02             	shl    $0x2,%eax
   24b00:	89 c0                	mov    %eax,%eax
   24b02:	48 05 a0 c5 00 00    	add    $0xc5a0,%rax
   24b08:	48 01 d0             	add    %rdx,%rax
   24b0b:	48 83 c0 0c          	add    $0xc,%rax
   24b0f:	48 89 ca             	mov    %rcx,%rdx
   24b12:	be 00 00 00 00       	mov    $0x0,%esi
   24b17:	48 89 c7             	mov    %rax,%rdi
   24b1a:	e8 f1 d9 fd ff       	callq  2510 <memset@plt>
   24b1f:	48 8b 05 02 2a 11 00 	mov    0x112a02(%rip),%rax        # 137528 <RecorderDataPtr>
   24b26:	c7 40 1c 00 00 00 00 	movl   $0x0,0x1c(%rax)
   24b2d:	48 8b 05 f4 29 11 00 	mov    0x1129f4(%rip),%rax        # 137528 <RecorderDataPtr>
   24b34:	c7 40 20 01 00 00 00 	movl   $0x1,0x20(%rax)
   24b3b:	48 8b 05 e6 29 11 00 	mov    0x1129e6(%rip),%rax        # 137528 <RecorderDataPtr>
   24b42:	8b 40 30             	mov    0x30(%rax),%eax
   24b45:	85 c0                	test   %eax,%eax
   24b47:	0f 84 d2 00 00 00    	je     24c1f <vTraceVPrintF+0x250>
   24b4d:	8b 45 c4             	mov    -0x3c(%rbp),%eax
   24b50:	0f b6 c0             	movzbl %al,%eax
   24b53:	89 c7                	mov    %eax,%edi
   24b55:	e8 05 19 00 00       	callq  2645f <prvCheckDataToBeOverwrittenForMultiEntryEvents>
   24b5a:	8b 45 c4             	mov    -0x3c(%rbp),%eax
   24b5d:	c1 e0 02             	shl    $0x2,%eax
   24b60:	89 c6                	mov    %eax,%esi
   24b62:	48 8b 15 bf 29 11 00 	mov    0x1129bf(%rip),%rdx        # 137528 <RecorderDataPtr>
   24b69:	48 8b 05 b8 29 11 00 	mov    0x1129b8(%rip),%rax        # 137528 <RecorderDataPtr>
   24b70:	8b 40 1c             	mov    0x1c(%rax),%eax
   24b73:	c1 e0 02             	shl    $0x2,%eax
   24b76:	89 c0                	mov    %eax,%eax
   24b78:	48 05 a0 c5 00 00    	add    $0xc5a0,%rax
   24b7e:	48 01 d0             	add    %rdx,%rax
   24b81:	48 8d 48 0c          	lea    0xc(%rax),%rcx
   24b85:	48 8d 45 d0          	lea    -0x30(%rbp),%rax
   24b89:	48 89 f2             	mov    %rsi,%rdx
   24b8c:	48 89 c6             	mov    %rax,%rsi
   24b8f:	48 89 cf             	mov    %rcx,%rdi
   24b92:	e8 19 da fd ff       	callq  25b0 <memcpy@plt>
   24b97:	8b 45 c4             	mov    -0x3c(%rbp),%eax
   24b9a:	89 c6                	mov    %eax,%esi
   24b9c:	48 8b 05 85 29 11 00 	mov    0x112985(%rip),%rax        # 137528 <RecorderDataPtr>
   24ba3:	48 8b 15 7e 29 11 00 	mov    0x11297e(%rip),%rdx        # 137528 <RecorderDataPtr>
   24baa:	8b 52 1c             	mov    0x1c(%rdx),%edx
   24bad:	8d 0c 95 00 00 00 00 	lea    0x0(,%rdx,4),%ecx
   24bb4:	8d 56 97             	lea    -0x69(%rsi),%edx
   24bb7:	89 c9                	mov    %ecx,%ecx
   24bb9:	88 94 08 ac c5 00 00 	mov    %dl,0xc5ac(%rax,%rcx,1)
   24bc0:	48 8b 05 61 29 11 00 	mov    0x112961(%rip),%rax        # 137528 <RecorderDataPtr>
   24bc7:	8b 48 1c             	mov    0x1c(%rax),%ecx
   24bca:	48 8b 05 57 29 11 00 	mov    0x112957(%rip),%rax        # 137528 <RecorderDataPtr>
   24bd1:	8b 55 c4             	mov    -0x3c(%rbp),%edx
   24bd4:	01 ca                	add    %ecx,%edx
   24bd6:	89 50 1c             	mov    %edx,0x1c(%rax)
   24bd9:	48 8b 05 48 29 11 00 	mov    0x112948(%rip),%rax        # 137528 <RecorderDataPtr>
   24be0:	8b 48 14             	mov    0x14(%rax),%ecx
   24be3:	48 8b 05 3e 29 11 00 	mov    0x11293e(%rip),%rax        # 137528 <RecorderDataPtr>
   24bea:	8b 55 c4             	mov    -0x3c(%rbp),%edx
   24bed:	01 ca                	add    %ecx,%edx
   24bef:	89 50 14             	mov    %edx,0x14(%rax)
   24bf2:	48 8b 05 2f 29 11 00 	mov    0x11292f(%rip),%rax        # 137528 <RecorderDataPtr>
   24bf9:	8b 40 1c             	mov    0x1c(%rax),%eax
   24bfc:	3d ff 7c 00 00       	cmp    $0x7cff,%eax
   24c01:	76 1c                	jbe    24c1f <vTraceVPrintF+0x250>
   24c03:	48 8b 05 1e 29 11 00 	mov    0x11291e(%rip),%rax        # 137528 <RecorderDataPtr>
   24c0a:	c7 40 20 01 00 00 00 	movl   $0x1,0x20(%rax)
   24c11:	48 8b 05 10 29 11 00 	mov    0x112910(%rip),%rax        # 137528 <RecorderDataPtr>
   24c18:	c7 40 1c 00 00 00 00 	movl   $0x0,0x1c(%rax)
   24c1f:	bf 01 00 00 00       	mov    $0x1,%edi
   24c24:	e8 36 18 00 00       	callq  2645f <prvCheckDataToBeOverwrittenForMultiEntryEvents>
   24c29:	8b 05 61 24 11 00    	mov    0x112461(%rip),%eax        # 137090 <recorder_busy>
   24c2f:	83 e8 01             	sub    $0x1,%eax
   24c32:	89 05 58 24 11 00    	mov    %eax,0x112458(%rip)        # 137090 <recorder_busy>
   24c38:	e8 c0 e1 fe ff       	callq  12dfd <vPortExitCritical>
   24c3d:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   24c41:	64 48 33 04 25 28 00 	xor    %fs:0x28,%rax
   24c48:	00 00 
   24c4a:	74 05                	je     24c51 <vTraceVPrintF+0x282>
   24c4c:	e8 7f d8 fd ff       	callq  24d0 <__stack_chk_fail@plt>
   24c51:	c9                   	leaveq 
   24c52:	c3                   	retq   

0000000000024c53 <vTracePrint>:
   24c53:	f3 0f 1e fa          	endbr64 
   24c57:	55                   	push   %rbp
   24c58:	48 89 e5             	mov    %rsp,%rbp
   24c5b:	48 83 ec 20          	sub    $0x20,%rsp
   24c5f:	89 f8                	mov    %edi,%eax
   24c61:	48 89 75 e0          	mov    %rsi,-0x20(%rbp)
   24c65:	66 89 45 ec          	mov    %ax,-0x14(%rbp)
   24c69:	e8 61 e1 fe ff       	callq  12dcf <vPortEnterCritical>
   24c6e:	8b 05 1c 24 11 00    	mov    0x11241c(%rip),%eax        # 137090 <recorder_busy>
   24c74:	83 c0 01             	add    $0x1,%eax
   24c77:	89 05 13 24 11 00    	mov    %eax,0x112413(%rip)        # 137090 <recorder_busy>
   24c7d:	48 8b 05 a4 28 11 00 	mov    0x1128a4(%rip),%rax        # 137528 <RecorderDataPtr>
   24c84:	8b 40 30             	mov    0x30(%rax),%eax
   24c87:	85 c0                	test   %eax,%eax
   24c89:	74 59                	je     24ce4 <vTracePrint+0x91>
   24c8b:	0f b6 05 0f 24 11 00 	movzbl 0x11240f(%rip),%eax        # 1370a1 <handle_of_last_logged_task>
   24c92:	84 c0                	test   %al,%al
   24c94:	74 4e                	je     24ce4 <vTracePrint+0x91>
   24c96:	bf ff 00 00 00       	mov    $0xff,%edi
   24c9b:	e8 f5 19 00 00       	callq  26695 <prvTraceGetDTS>
   24ca0:	88 45 f7             	mov    %al,-0x9(%rbp)
   24ca3:	e8 43 10 00 00       	callq  25ceb <prvTraceNextFreeEventBufferSlot>
   24ca8:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
   24cac:	48 83 7d f8 00       	cmpq   $0x0,-0x8(%rbp)
   24cb1:	74 31                	je     24ce4 <vTracePrint+0x91>
   24cb3:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   24cb7:	0f b6 55 f7          	movzbl -0x9(%rbp),%edx
   24cbb:	88 50 01             	mov    %dl,0x1(%rax)
   24cbe:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   24cc2:	c6 00 98             	movb   $0x98,(%rax)
   24cc5:	0f b7 55 ec          	movzwl -0x14(%rbp),%edx
   24cc9:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
   24ccd:	89 d6                	mov    %edx,%esi
   24ccf:	48 89 c7             	mov    %rax,%rdi
   24cd2:	e8 ce 15 00 00       	callq  262a5 <prvTraceOpenSymbol>
   24cd7:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
   24cdb:	66 89 42 02          	mov    %ax,0x2(%rdx)
   24cdf:	e8 3f 19 00 00       	callq  26623 <prvTraceUpdateCounters>
   24ce4:	8b 05 a6 23 11 00    	mov    0x1123a6(%rip),%eax        # 137090 <recorder_busy>
   24cea:	83 e8 01             	sub    $0x1,%eax
   24ced:	89 05 9d 23 11 00    	mov    %eax,0x11239d(%rip)        # 137090 <recorder_busy>
   24cf3:	e8 05 e1 fe ff       	callq  12dfd <vPortExitCritical>
   24cf8:	90                   	nop
   24cf9:	c9                   	leaveq 
   24cfa:	c3                   	retq   

0000000000024cfb <xTraceRegisterString>:
   24cfb:	f3 0f 1e fa          	endbr64 
   24cff:	55                   	push   %rbp
   24d00:	48 89 e5             	mov    %rsp,%rbp
   24d03:	48 83 ec 10          	sub    $0x10,%rsp
   24d07:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   24d0b:	48 83 7d f8 00       	cmpq   $0x0,-0x8(%rbp)
   24d10:	75 13                	jne    24d25 <xTraceRegisterString+0x2a>
   24d12:	48 8d 3d 2f 3f 00 00 	lea    0x3f2f(%rip),%rdi        # 28c48 <xInterruptGivePeriod+0xe58>
   24d19:	e8 8c 16 00 00       	callq  263aa <prvTraceError>
   24d1e:	b8 00 00 00 00       	mov    $0x0,%eax
   24d23:	eb 30                	jmp    24d55 <xTraceRegisterString+0x5a>
   24d25:	48 8b 05 fc 27 11 00 	mov    0x1127fc(%rip),%rax        # 137528 <RecorderDataPtr>
   24d2c:	48 85 c0             	test   %rax,%rax
   24d2f:	75 13                	jne    24d44 <xTraceRegisterString+0x49>
   24d31:	48 8d 3d 48 3b 00 00 	lea    0x3b48(%rip),%rdi        # 28880 <xInterruptGivePeriod+0xa90>
   24d38:	e8 6d 16 00 00       	callq  263aa <prvTraceError>
   24d3d:	b8 00 00 00 00       	mov    $0x0,%eax
   24d42:	eb 11                	jmp    24d55 <xTraceRegisterString+0x5a>
   24d44:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   24d48:	be 00 00 00 00       	mov    $0x0,%esi
   24d4d:	48 89 c7             	mov    %rax,%rdi
   24d50:	e8 50 15 00 00       	callq  262a5 <prvTraceOpenSymbol>
   24d55:	c9                   	leaveq 
   24d56:	c3                   	retq   

0000000000024d57 <prvTraceSetReadyEventsEnabled>:
   24d57:	f3 0f 1e fa          	endbr64 
   24d5b:	55                   	push   %rbp
   24d5c:	48 89 e5             	mov    %rsp,%rbp
   24d5f:	89 7d fc             	mov    %edi,-0x4(%rbp)
   24d62:	8b 45 fc             	mov    -0x4(%rbp),%eax
   24d65:	89 05 6d c3 00 00    	mov    %eax,0xc36d(%rip)        # 310d8 <readyEventsEnabled>
   24d6b:	90                   	nop
   24d6c:	5d                   	pop    %rbp
   24d6d:	c3                   	retq   

0000000000024d6e <prvTraceStoreTaskReady>:
   24d6e:	f3 0f 1e fa          	endbr64 
   24d72:	55                   	push   %rbp
   24d73:	48 89 e5             	mov    %rsp,%rbp
   24d76:	48 83 ec 20          	sub    $0x20,%rsp
   24d7a:	89 f8                	mov    %edi,%eax
   24d7c:	88 45 ec             	mov    %al,-0x14(%rbp)
   24d7f:	80 7d ec 00          	cmpb   $0x0,-0x14(%rbp)
   24d83:	0f 84 c0 00 00 00    	je     24e49 <prvTraceStoreTaskReady+0xdb>
   24d89:	8b 05 49 c3 00 00    	mov    0xc349(%rip),%eax        # 310d8 <readyEventsEnabled>
   24d8f:	85 c0                	test   %eax,%eax
   24d91:	0f 84 b5 00 00 00    	je     24e4c <prvTraceStoreTaskReady+0xde>
   24d97:	80 7d ec 96          	cmpb   $0x96,-0x14(%rbp)
   24d9b:	76 11                	jbe    24dae <prvTraceStoreTaskReady+0x40>
   24d9d:	48 8d 3d dc 3e 00 00 	lea    0x3edc(%rip),%rdi        # 28c80 <xInterruptGivePeriod+0xe90>
   24da4:	e8 01 16 00 00       	callq  263aa <prvTraceError>
   24da9:	e9 9f 00 00 00       	jmpq   24e4d <prvTraceStoreTaskReady+0xdf>
   24dae:	8b 05 dc 22 11 00    	mov    0x1122dc(%rip),%eax        # 137090 <recorder_busy>
   24db4:	85 c0                	test   %eax,%eax
   24db6:	74 11                	je     24dc9 <prvTraceStoreTaskReady+0x5b>
   24db8:	48 8d 3d 01 3f 00 00 	lea    0x3f01(%rip),%rdi        # 28cc0 <xInterruptGivePeriod+0xed0>
   24dbf:	e8 e6 15 00 00       	callq  263aa <prvTraceError>
   24dc4:	e9 84 00 00 00       	jmpq   24e4d <prvTraceStoreTaskReady+0xdf>
   24dc9:	e8 01 e0 fe ff       	callq  12dcf <vPortEnterCritical>
   24dce:	8b 05 bc 22 11 00    	mov    0x1122bc(%rip),%eax        # 137090 <recorder_busy>
   24dd4:	83 c0 01             	add    $0x1,%eax
   24dd7:	89 05 b3 22 11 00    	mov    %eax,0x1122b3(%rip)        # 137090 <recorder_busy>
   24ddd:	48 8b 05 44 27 11 00 	mov    0x112744(%rip),%rax        # 137528 <RecorderDataPtr>
   24de4:	8b 40 30             	mov    0x30(%rax),%eax
   24de7:	85 c0                	test   %eax,%eax
   24de9:	74 48                	je     24e33 <prvTraceStoreTaskReady+0xc5>
   24deb:	bf ff ff 00 00       	mov    $0xffff,%edi
   24df0:	e8 a0 18 00 00       	callq  26695 <prvTraceGetDTS>
   24df5:	66 89 45 f6          	mov    %ax,-0xa(%rbp)
   24df9:	0f b6 45 ec          	movzbl -0x14(%rbp),%eax
   24dfd:	88 45 f5             	mov    %al,-0xb(%rbp)
   24e00:	e8 e6 0e 00 00       	callq  25ceb <prvTraceNextFreeEventBufferSlot>
   24e05:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
   24e09:	48 83 7d f8 00       	cmpq   $0x0,-0x8(%rbp)
   24e0e:	74 23                	je     24e33 <prvTraceStoreTaskReady+0xc5>
   24e10:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   24e14:	c6 00 02             	movb   $0x2,(%rax)
   24e17:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   24e1b:	0f b7 55 f6          	movzwl -0xa(%rbp),%edx
   24e1f:	66 89 50 02          	mov    %dx,0x2(%rax)
   24e23:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   24e27:	0f b6 55 f5          	movzbl -0xb(%rbp),%edx
   24e2b:	88 50 01             	mov    %dl,0x1(%rax)
   24e2e:	e8 f0 17 00 00       	callq  26623 <prvTraceUpdateCounters>
   24e33:	8b 05 57 22 11 00    	mov    0x112257(%rip),%eax        # 137090 <recorder_busy>
   24e39:	83 e8 01             	sub    $0x1,%eax
   24e3c:	89 05 4e 22 11 00    	mov    %eax,0x11224e(%rip)        # 137090 <recorder_busy>
   24e42:	e8 b6 df fe ff       	callq  12dfd <vPortExitCritical>
   24e47:	eb 04                	jmp    24e4d <prvTraceStoreTaskReady+0xdf>
   24e49:	90                   	nop
   24e4a:	eb 01                	jmp    24e4d <prvTraceStoreTaskReady+0xdf>
   24e4c:	90                   	nop
   24e4d:	c9                   	leaveq 
   24e4e:	c3                   	retq   

0000000000024e4f <prvTraceStoreLowPower>:
   24e4f:	f3 0f 1e fa          	endbr64 
   24e53:	55                   	push   %rbp
   24e54:	48 89 e5             	mov    %rsp,%rbp
   24e57:	48 83 ec 20          	sub    $0x20,%rsp
   24e5b:	89 7d ec             	mov    %edi,-0x14(%rbp)
   24e5e:	83 7d ec 01          	cmpl   $0x1,-0x14(%rbp)
   24e62:	76 11                	jbe    24e75 <prvTraceStoreLowPower+0x26>
   24e64:	48 8d 3d 8d 3e 00 00 	lea    0x3e8d(%rip),%rdi        # 28cf8 <xInterruptGivePeriod+0xf08>
   24e6b:	e8 3a 15 00 00       	callq  263aa <prvTraceError>
   24e70:	e9 89 00 00 00       	jmpq   24efe <prvTraceStoreLowPower+0xaf>
   24e75:	8b 05 15 22 11 00    	mov    0x112215(%rip),%eax        # 137090 <recorder_busy>
   24e7b:	85 c0                	test   %eax,%eax
   24e7d:	74 0e                	je     24e8d <prvTraceStoreLowPower+0x3e>
   24e7f:	48 8d 3d 3a 3e 00 00 	lea    0x3e3a(%rip),%rdi        # 28cc0 <xInterruptGivePeriod+0xed0>
   24e86:	e8 1f 15 00 00       	callq  263aa <prvTraceError>
   24e8b:	eb 71                	jmp    24efe <prvTraceStoreLowPower+0xaf>
   24e8d:	e8 3d df fe ff       	callq  12dcf <vPortEnterCritical>
   24e92:	8b 05 f8 21 11 00    	mov    0x1121f8(%rip),%eax        # 137090 <recorder_busy>
   24e98:	83 c0 01             	add    $0x1,%eax
   24e9b:	89 05 ef 21 11 00    	mov    %eax,0x1121ef(%rip)        # 137090 <recorder_busy>
   24ea1:	48 8b 05 80 26 11 00 	mov    0x112680(%rip),%rax        # 137528 <RecorderDataPtr>
   24ea8:	8b 40 30             	mov    0x30(%rax),%eax
   24eab:	85 c0                	test   %eax,%eax
   24ead:	74 3b                	je     24eea <prvTraceStoreLowPower+0x9b>
   24eaf:	bf ff ff 00 00       	mov    $0xffff,%edi
   24eb4:	e8 dc 17 00 00       	callq  26695 <prvTraceGetDTS>
   24eb9:	66 89 45 f6          	mov    %ax,-0xa(%rbp)
   24ebd:	e8 29 0e 00 00       	callq  25ceb <prvTraceNextFreeEventBufferSlot>
   24ec2:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
   24ec6:	48 83 7d f8 00       	cmpq   $0x0,-0x8(%rbp)
   24ecb:	74 1d                	je     24eea <prvTraceStoreLowPower+0x9b>
   24ecd:	8b 45 ec             	mov    -0x14(%rbp),%eax
   24ed0:	8d 50 ac             	lea    -0x54(%rax),%edx
   24ed3:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   24ed7:	88 10                	mov    %dl,(%rax)
   24ed9:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   24edd:	0f b7 55 f6          	movzwl -0xa(%rbp),%edx
   24ee1:	66 89 50 02          	mov    %dx,0x2(%rax)
   24ee5:	e8 39 17 00 00       	callq  26623 <prvTraceUpdateCounters>
   24eea:	8b 05 a0 21 11 00    	mov    0x1121a0(%rip),%eax        # 137090 <recorder_busy>
   24ef0:	83 e8 01             	sub    $0x1,%eax
   24ef3:	89 05 97 21 11 00    	mov    %eax,0x112197(%rip)        # 137090 <recorder_busy>
   24ef9:	e8 ff de fe ff       	callq  12dfd <vPortExitCritical>
   24efe:	c9                   	leaveq 
   24eff:	c3                   	retq   

0000000000024f00 <vTraceStoreMemMangEvent>:
   24f00:	f3 0f 1e fa          	endbr64 
   24f04:	55                   	push   %rbp
   24f05:	48 89 e5             	mov    %rsp,%rbp
   24f08:	48 83 ec 30          	sub    $0x30,%rsp
   24f0c:	89 7d dc             	mov    %edi,-0x24(%rbp)
   24f0f:	89 75 d8             	mov    %esi,-0x28(%rbp)
   24f12:	89 55 d4             	mov    %edx,-0x2c(%rbp)
   24f15:	48 8b 05 0c 26 11 00 	mov    0x11260c(%rip),%rax        # 137528 <RecorderDataPtr>
   24f1c:	48 85 c0             	test   %rax,%rax
   24f1f:	0f 84 2a 01 00 00    	je     2504f <vTraceStoreMemMangEvent+0x14f>
   24f25:	83 7d d4 00          	cmpl   $0x0,-0x2c(%rbp)
   24f29:	79 0a                	jns    24f35 <vTraceStoreMemMangEvent+0x35>
   24f2b:	8b 45 d4             	mov    -0x2c(%rbp),%eax
   24f2e:	f7 d8                	neg    %eax
   24f30:	89 45 ec             	mov    %eax,-0x14(%rbp)
   24f33:	eb 06                	jmp    24f3b <vTraceStoreMemMangEvent+0x3b>
   24f35:	8b 45 d4             	mov    -0x2c(%rbp),%eax
   24f38:	89 45 ec             	mov    %eax,-0x14(%rbp)
   24f3b:	e8 8f de fe ff       	callq  12dcf <vPortEnterCritical>
   24f40:	8b 05 4a 21 11 00    	mov    0x11214a(%rip),%eax        # 137090 <recorder_busy>
   24f46:	83 c0 01             	add    $0x1,%eax
   24f49:	89 05 41 21 11 00    	mov    %eax,0x112141(%rip)        # 137090 <recorder_busy>
   24f4f:	83 7d d8 00          	cmpl   $0x0,-0x28(%rbp)
   24f53:	74 11                	je     24f66 <vTraceStoreMemMangEvent+0x66>
   24f55:	8b 15 e1 25 11 00    	mov    0x1125e1(%rip),%edx        # 13753c <heapMemUsage>
   24f5b:	8b 45 d4             	mov    -0x2c(%rbp),%eax
   24f5e:	01 d0                	add    %edx,%eax
   24f60:	89 05 d6 25 11 00    	mov    %eax,0x1125d6(%rip)        # 13753c <heapMemUsage>
   24f66:	48 8b 05 bb 25 11 00 	mov    0x1125bb(%rip),%rax        # 137528 <RecorderDataPtr>
   24f6d:	8b 40 30             	mov    0x30(%rax),%eax
   24f70:	85 c0                	test   %eax,%eax
   24f72:	0f 84 c1 00 00 00    	je     25039 <vTraceStoreMemMangEvent+0x139>
   24f78:	bf ff 00 00 00       	mov    $0xff,%edi
   24f7d:	e8 13 17 00 00       	callq  26695 <prvTraceGetDTS>
   24f82:	88 45 e6             	mov    %al,-0x1a(%rbp)
   24f85:	8b 45 ec             	mov    -0x14(%rbp),%eax
   24f88:	89 c6                	mov    %eax,%esi
   24f8a:	bf ff ff 00 00       	mov    $0xffff,%edi
   24f8f:	e8 1b 03 00 00       	callq  252af <prvTraceGetParam>
   24f94:	66 89 45 e8          	mov    %ax,-0x18(%rbp)
   24f98:	e8 4e 0d 00 00       	callq  25ceb <prvTraceNextFreeEventBufferSlot>
   24f9d:	48 89 45 f0          	mov    %rax,-0x10(%rbp)
   24fa1:	48 83 7d f0 00       	cmpq   $0x0,-0x10(%rbp)
   24fa6:	0f 84 8d 00 00 00    	je     25039 <vTraceStoreMemMangEvent+0x139>
   24fac:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
   24fb0:	0f b6 55 e6          	movzbl -0x1a(%rbp),%edx
   24fb4:	88 50 01             	mov    %dl,0x1(%rax)
   24fb7:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
   24fbb:	c6 00 00             	movb   $0x0,(%rax)
   24fbe:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
   24fc2:	0f b7 55 e8          	movzwl -0x18(%rbp),%edx
   24fc6:	66 89 50 02          	mov    %dx,0x2(%rax)
   24fca:	e8 54 16 00 00       	callq  26623 <prvTraceUpdateCounters>
   24fcf:	8b 45 d8             	mov    -0x28(%rbp),%eax
   24fd2:	89 c6                	mov    %eax,%esi
   24fd4:	bf ff ff 00 00       	mov    $0xffff,%edi
   24fd9:	e8 d1 02 00 00       	callq  252af <prvTraceGetParam>
   24fde:	66 89 45 ea          	mov    %ax,-0x16(%rbp)
   24fe2:	c6 45 e7 00          	movb   $0x0,-0x19(%rbp)
   24fe6:	e8 00 0d 00 00       	callq  25ceb <prvTraceNextFreeEventBufferSlot>
   24feb:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
   24fef:	48 83 7d f8 00       	cmpq   $0x0,-0x8(%rbp)
   24ff4:	74 43                	je     25039 <vTraceStoreMemMangEvent+0x139>
   24ff6:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   24ffa:	0f b7 55 ea          	movzwl -0x16(%rbp),%edx
   24ffe:	66 89 50 02          	mov    %dx,0x2(%rax)
   25002:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   25006:	0f b6 55 e7          	movzbl -0x19(%rbp),%edx
   2500a:	88 50 01             	mov    %dl,0x1(%rax)
   2500d:	8b 45 dc             	mov    -0x24(%rbp),%eax
   25010:	8d 50 01             	lea    0x1(%rax),%edx
   25013:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   25017:	88 10                	mov    %dl,(%rax)
   25019:	8b 45 dc             	mov    -0x24(%rbp),%eax
   2501c:	89 c2                	mov    %eax,%edx
   2501e:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
   25022:	88 10                	mov    %dl,(%rax)
   25024:	e8 fa 15 00 00       	callq  26623 <prvTraceUpdateCounters>
   25029:	48 8b 05 f8 24 11 00 	mov    0x1124f8(%rip),%rax        # 137528 <RecorderDataPtr>
   25030:	8b 15 06 25 11 00    	mov    0x112506(%rip),%edx        # 13753c <heapMemUsage>
   25036:	89 50 50             	mov    %edx,0x50(%rax)
   25039:	8b 05 51 20 11 00    	mov    0x112051(%rip),%eax        # 137090 <recorder_busy>
   2503f:	83 e8 01             	sub    $0x1,%eax
   25042:	89 05 48 20 11 00    	mov    %eax,0x112048(%rip)        # 137090 <recorder_busy>
   25048:	e8 b0 dd fe ff       	callq  12dfd <vPortExitCritical>
   2504d:	eb 01                	jmp    25050 <vTraceStoreMemMangEvent+0x150>
   2504f:	90                   	nop
   25050:	c9                   	leaveq 
   25051:	c3                   	retq   

0000000000025052 <prvTraceStoreKernelCall>:
   25052:	f3 0f 1e fa          	endbr64 
   25056:	55                   	push   %rbp
   25057:	48 89 e5             	mov    %rsp,%rbp
   2505a:	48 83 ec 20          	sub    $0x20,%rsp
   2505e:	89 7d ec             	mov    %edi,-0x14(%rbp)
   25061:	89 f0                	mov    %esi,%eax
   25063:	89 55 e4             	mov    %edx,-0x1c(%rbp)
   25066:	88 45 e8             	mov    %al,-0x18(%rbp)
   25069:	81 7d ec fe 00 00 00 	cmpl   $0xfe,-0x14(%rbp)
   25070:	76 11                	jbe    25083 <prvTraceStoreKernelCall+0x31>
   25072:	48 8d 3d b7 3c 00 00 	lea    0x3cb7(%rip),%rdi        # 28d30 <xInterruptGivePeriod+0xf40>
   25079:	e8 2c 13 00 00       	callq  263aa <prvTraceError>
   2507e:	e9 f0 00 00 00       	jmpq   25173 <prvTraceStoreKernelCall+0x121>
   25083:	80 7d e8 08          	cmpb   $0x8,-0x18(%rbp)
   25087:	76 11                	jbe    2509a <prvTraceStoreKernelCall+0x48>
   25089:	48 8d 3d d8 3c 00 00 	lea    0x3cd8(%rip),%rdi        # 28d68 <xInterruptGivePeriod+0xf78>
   25090:	e8 15 13 00 00       	callq  263aa <prvTraceError>
   25095:	e9 d9 00 00 00       	jmpq   25173 <prvTraceStoreKernelCall+0x121>
   2509a:	48 8b 15 87 24 11 00 	mov    0x112487(%rip),%rdx        # 137528 <RecorderDataPtr>
   250a1:	0f b6 45 e8          	movzbl -0x18(%rbp),%eax
   250a5:	48 98                	cltq   
   250a7:	0f b6 44 02 64       	movzbl 0x64(%rdx,%rax,1),%eax
   250ac:	0f b6 c0             	movzbl %al,%eax
   250af:	39 45 e4             	cmp    %eax,-0x1c(%rbp)
   250b2:	76 11                	jbe    250c5 <prvTraceStoreKernelCall+0x73>
   250b4:	48 8d 3d f5 3c 00 00 	lea    0x3cf5(%rip),%rdi        # 28db0 <xInterruptGivePeriod+0xfc0>
   250bb:	e8 ea 12 00 00       	callq  263aa <prvTraceError>
   250c0:	e9 ae 00 00 00       	jmpq   25173 <prvTraceStoreKernelCall+0x121>
   250c5:	8b 05 c5 1f 11 00    	mov    0x111fc5(%rip),%eax        # 137090 <recorder_busy>
   250cb:	85 c0                	test   %eax,%eax
   250cd:	74 11                	je     250e0 <prvTraceStoreKernelCall+0x8e>
   250cf:	48 8d 3d 22 3d 00 00 	lea    0x3d22(%rip),%rdi        # 28df8 <xInterruptGivePeriod+0x1008>
   250d6:	e8 cf 12 00 00       	callq  263aa <prvTraceError>
   250db:	e9 93 00 00 00       	jmpq   25173 <prvTraceStoreKernelCall+0x121>
   250e0:	0f b6 05 ba 1f 11 00 	movzbl 0x111fba(%rip),%eax        # 1370a1 <handle_of_last_logged_task>
   250e7:	84 c0                	test   %al,%al
   250e9:	0f 84 83 00 00 00    	je     25172 <prvTraceStoreKernelCall+0x120>
   250ef:	e8 db dc fe ff       	callq  12dcf <vPortEnterCritical>
   250f4:	8b 05 96 1f 11 00    	mov    0x111f96(%rip),%eax        # 137090 <recorder_busy>
   250fa:	83 c0 01             	add    $0x1,%eax
   250fd:	89 05 8d 1f 11 00    	mov    %eax,0x111f8d(%rip)        # 137090 <recorder_busy>
   25103:	48 8b 05 1e 24 11 00 	mov    0x11241e(%rip),%rax        # 137528 <RecorderDataPtr>
   2510a:	8b 40 30             	mov    0x30(%rax),%eax
   2510d:	85 c0                	test   %eax,%eax
   2510f:	74 4b                	je     2515c <prvTraceStoreKernelCall+0x10a>
   25111:	bf ff ff 00 00       	mov    $0xffff,%edi
   25116:	e8 7a 15 00 00       	callq  26695 <prvTraceGetDTS>
   2511b:	66 89 45 f6          	mov    %ax,-0xa(%rbp)
   2511f:	8b 45 e4             	mov    -0x1c(%rbp),%eax
   25122:	88 45 f5             	mov    %al,-0xb(%rbp)
   25125:	e8 c1 0b 00 00       	callq  25ceb <prvTraceNextFreeEventBufferSlot>
   2512a:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
   2512e:	48 83 7d f8 00       	cmpq   $0x0,-0x8(%rbp)
   25133:	74 27                	je     2515c <prvTraceStoreKernelCall+0x10a>
   25135:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   25139:	0f b7 55 f6          	movzwl -0xa(%rbp),%edx
   2513d:	66 89 50 02          	mov    %dx,0x2(%rax)
   25141:	8b 45 ec             	mov    -0x14(%rbp),%eax
   25144:	89 c2                	mov    %eax,%edx
   25146:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   2514a:	88 10                	mov    %dl,(%rax)
   2514c:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   25150:	0f b6 55 f5          	movzbl -0xb(%rbp),%edx
   25154:	88 50 01             	mov    %dl,0x1(%rax)
   25157:	e8 c7 14 00 00       	callq  26623 <prvTraceUpdateCounters>
   2515c:	8b 05 2e 1f 11 00    	mov    0x111f2e(%rip),%eax        # 137090 <recorder_busy>
   25162:	83 e8 01             	sub    $0x1,%eax
   25165:	89 05 25 1f 11 00    	mov    %eax,0x111f25(%rip)        # 137090 <recorder_busy>
   2516b:	e8 8d dc fe ff       	callq  12dfd <vPortExitCritical>
   25170:	eb 01                	jmp    25173 <prvTraceStoreKernelCall+0x121>
   25172:	90                   	nop
   25173:	c9                   	leaveq 
   25174:	c3                   	retq   

0000000000025175 <prvTraceStoreKernelCallWithParam>:
   25175:	f3 0f 1e fa          	endbr64 
   25179:	55                   	push   %rbp
   2517a:	48 89 e5             	mov    %rsp,%rbp
   2517d:	48 83 ec 20          	sub    $0x20,%rsp
   25181:	89 7d ec             	mov    %edi,-0x14(%rbp)
   25184:	89 f0                	mov    %esi,%eax
   25186:	89 55 e4             	mov    %edx,-0x1c(%rbp)
   25189:	89 4d e0             	mov    %ecx,-0x20(%rbp)
   2518c:	88 45 e8             	mov    %al,-0x18(%rbp)
   2518f:	81 7d ec fe 00 00 00 	cmpl   $0xfe,-0x14(%rbp)
   25196:	76 11                	jbe    251a9 <prvTraceStoreKernelCallWithParam+0x34>
   25198:	48 8d 3d 91 3c 00 00 	lea    0x3c91(%rip),%rdi        # 28e30 <xInterruptGivePeriod+0x1040>
   2519f:	e8 06 12 00 00       	callq  263aa <prvTraceError>
   251a4:	e9 04 01 00 00       	jmpq   252ad <prvTraceStoreKernelCallWithParam+0x138>
   251a9:	80 7d e8 08          	cmpb   $0x8,-0x18(%rbp)
   251ad:	76 11                	jbe    251c0 <prvTraceStoreKernelCallWithParam+0x4b>
   251af:	48 8d 3d ba 3c 00 00 	lea    0x3cba(%rip),%rdi        # 28e70 <xInterruptGivePeriod+0x1080>
   251b6:	e8 ef 11 00 00       	callq  263aa <prvTraceError>
   251bb:	e9 ed 00 00 00       	jmpq   252ad <prvTraceStoreKernelCallWithParam+0x138>
   251c0:	48 8b 15 61 23 11 00 	mov    0x112361(%rip),%rdx        # 137528 <RecorderDataPtr>
   251c7:	0f b6 45 e8          	movzbl -0x18(%rbp),%eax
   251cb:	48 98                	cltq   
   251cd:	0f b6 44 02 64       	movzbl 0x64(%rdx,%rax,1),%eax
   251d2:	0f b6 c0             	movzbl %al,%eax
   251d5:	39 45 e4             	cmp    %eax,-0x1c(%rbp)
   251d8:	76 11                	jbe    251eb <prvTraceStoreKernelCallWithParam+0x76>
   251da:	48 8d 3d df 3c 00 00 	lea    0x3cdf(%rip),%rdi        # 28ec0 <xInterruptGivePeriod+0x10d0>
   251e1:	e8 c4 11 00 00       	callq  263aa <prvTraceError>
   251e6:	e9 c2 00 00 00       	jmpq   252ad <prvTraceStoreKernelCallWithParam+0x138>
   251eb:	8b 05 9f 1e 11 00    	mov    0x111e9f(%rip),%eax        # 137090 <recorder_busy>
   251f1:	85 c0                	test   %eax,%eax
   251f3:	74 11                	je     25206 <prvTraceStoreKernelCallWithParam+0x91>
   251f5:	48 8d 3d 14 3d 00 00 	lea    0x3d14(%rip),%rdi        # 28f10 <xInterruptGivePeriod+0x1120>
   251fc:	e8 a9 11 00 00       	callq  263aa <prvTraceError>
   25201:	e9 a7 00 00 00       	jmpq   252ad <prvTraceStoreKernelCallWithParam+0x138>
   25206:	e8 c4 db fe ff       	callq  12dcf <vPortEnterCritical>
   2520b:	8b 05 7f 1e 11 00    	mov    0x111e7f(%rip),%eax        # 137090 <recorder_busy>
   25211:	83 c0 01             	add    $0x1,%eax
   25214:	89 05 76 1e 11 00    	mov    %eax,0x111e76(%rip)        # 137090 <recorder_busy>
   2521a:	48 8b 05 07 23 11 00 	mov    0x112307(%rip),%rax        # 137528 <RecorderDataPtr>
   25221:	8b 40 30             	mov    0x30(%rax),%eax
   25224:	85 c0                	test   %eax,%eax
   25226:	74 71                	je     25299 <prvTraceStoreKernelCallWithParam+0x124>
   25228:	0f b6 05 72 1e 11 00 	movzbl 0x111e72(%rip),%eax        # 1370a1 <handle_of_last_logged_task>
   2522f:	84 c0                	test   %al,%al
   25231:	74 66                	je     25299 <prvTraceStoreKernelCallWithParam+0x124>
   25233:	bf ff 00 00 00       	mov    $0xff,%edi
   25238:	e8 58 14 00 00       	callq  26695 <prvTraceGetDTS>
   2523d:	88 45 f5             	mov    %al,-0xb(%rbp)
   25240:	8b 45 e0             	mov    -0x20(%rbp),%eax
   25243:	89 c6                	mov    %eax,%esi
   25245:	bf ff 00 00 00       	mov    $0xff,%edi
   2524a:	e8 60 00 00 00       	callq  252af <prvTraceGetParam>
   2524f:	88 45 f6             	mov    %al,-0xa(%rbp)
   25252:	8b 45 e4             	mov    -0x1c(%rbp),%eax
   25255:	88 45 f7             	mov    %al,-0x9(%rbp)
   25258:	e8 8e 0a 00 00       	callq  25ceb <prvTraceNextFreeEventBufferSlot>
   2525d:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
   25261:	48 83 7d f8 00       	cmpq   $0x0,-0x8(%rbp)
   25266:	74 31                	je     25299 <prvTraceStoreKernelCallWithParam+0x124>
   25268:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   2526c:	0f b6 55 f5          	movzbl -0xb(%rbp),%edx
   25270:	88 50 03             	mov    %dl,0x3(%rax)
   25273:	8b 45 ec             	mov    -0x14(%rbp),%eax
   25276:	89 c2                	mov    %eax,%edx
   25278:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   2527c:	88 10                	mov    %dl,(%rax)
   2527e:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   25282:	0f b6 55 f7          	movzbl -0x9(%rbp),%edx
   25286:	88 50 01             	mov    %dl,0x1(%rax)
   25289:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   2528d:	0f b6 55 f6          	movzbl -0xa(%rbp),%edx
   25291:	88 50 02             	mov    %dl,0x2(%rax)
   25294:	e8 8a 13 00 00       	callq  26623 <prvTraceUpdateCounters>
   25299:	8b 05 f1 1d 11 00    	mov    0x111df1(%rip),%eax        # 137090 <recorder_busy>
   2529f:	83 e8 01             	sub    $0x1,%eax
   252a2:	89 05 e8 1d 11 00    	mov    %eax,0x111de8(%rip)        # 137090 <recorder_busy>
   252a8:	e8 50 db fe ff       	callq  12dfd <vPortExitCritical>
   252ad:	c9                   	leaveq 
   252ae:	c3                   	retq   

00000000000252af <prvTraceGetParam>:
   252af:	f3 0f 1e fa          	endbr64 
   252b3:	55                   	push   %rbp
   252b4:	48 89 e5             	mov    %rsp,%rbp
   252b7:	48 83 ec 20          	sub    $0x20,%rsp
   252bb:	89 7d ec             	mov    %edi,-0x14(%rbp)
   252be:	89 75 e8             	mov    %esi,-0x18(%rbp)
   252c1:	81 7d ec ff 00 00 00 	cmpl   $0xff,-0x14(%rbp)
   252c8:	74 1a                	je     252e4 <prvTraceGetParam+0x35>
   252ca:	81 7d ec ff ff 00 00 	cmpl   $0xffff,-0x14(%rbp)
   252d1:	74 11                	je     252e4 <prvTraceGetParam+0x35>
   252d3:	48 8d 3d 6e 3c 00 00 	lea    0x3c6e(%rip),%rdi        # 28f48 <xInterruptGivePeriod+0x1158>
   252da:	e8 cb 10 00 00       	callq  263aa <prvTraceError>
   252df:	8b 45 e8             	mov    -0x18(%rbp),%eax
   252e2:	eb 58                	jmp    2533c <prvTraceGetParam+0x8d>
   252e4:	8b 45 e8             	mov    -0x18(%rbp),%eax
   252e7:	3b 45 ec             	cmp    -0x14(%rbp),%eax
   252ea:	77 05                	ja     252f1 <prvTraceGetParam+0x42>
   252ec:	8b 45 e8             	mov    -0x18(%rbp),%eax
   252ef:	eb 4b                	jmp    2533c <prvTraceGetParam+0x8d>
   252f1:	e8 f5 09 00 00       	callq  25ceb <prvTraceNextFreeEventBufferSlot>
   252f6:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
   252fa:	48 83 7d f8 00       	cmpq   $0x0,-0x8(%rbp)
   252ff:	74 35                	je     25336 <prvTraceGetParam+0x87>
   25301:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   25305:	c6 00 01             	movb   $0x1,(%rax)
   25308:	8b 45 ec             	mov    -0x14(%rbp),%eax
   2530b:	f7 d0                	not    %eax
   2530d:	23 45 e8             	and    -0x18(%rbp),%eax
   25310:	c1 e8 08             	shr    $0x8,%eax
   25313:	89 c2                	mov    %eax,%edx
   25315:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   25319:	88 50 01             	mov    %dl,0x1(%rax)
   2531c:	8b 45 ec             	mov    -0x14(%rbp),%eax
   2531f:	f7 d0                	not    %eax
   25321:	23 45 e8             	and    -0x18(%rbp),%eax
   25324:	c1 e8 10             	shr    $0x10,%eax
   25327:	89 c2                	mov    %eax,%edx
   25329:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   2532d:	66 89 50 02          	mov    %dx,0x2(%rax)
   25331:	e8 ed 12 00 00       	callq  26623 <prvTraceUpdateCounters>
   25336:	8b 45 e8             	mov    -0x18(%rbp),%eax
   25339:	23 45 ec             	and    -0x14(%rbp),%eax
   2533c:	c9                   	leaveq 
   2533d:	c3                   	retq   

000000000002533e <prvTraceStoreKernelCallWithNumericParamOnly>:
   2533e:	f3 0f 1e fa          	endbr64 
   25342:	55                   	push   %rbp
   25343:	48 89 e5             	mov    %rsp,%rbp
   25346:	48 83 ec 20          	sub    $0x20,%rsp
   2534a:	89 7d ec             	mov    %edi,-0x14(%rbp)
   2534d:	89 75 e8             	mov    %esi,-0x18(%rbp)
   25350:	66 c7 45 f6 00 00    	movw   $0x0,-0xa(%rbp)
   25356:	81 7d ec fe 00 00 00 	cmpl   $0xfe,-0x14(%rbp)
   2535d:	76 11                	jbe    25370 <prvTraceStoreKernelCallWithNumericParamOnly+0x32>
   2535f:	48 8d 3d 22 3c 00 00 	lea    0x3c22(%rip),%rdi        # 28f88 <xInterruptGivePeriod+0x1198>
   25366:	e8 3f 10 00 00       	callq  263aa <prvTraceError>
   2536b:	e9 b3 00 00 00       	jmpq   25423 <prvTraceStoreKernelCallWithNumericParamOnly+0xe5>
   25370:	8b 05 1a 1d 11 00    	mov    0x111d1a(%rip),%eax        # 137090 <recorder_busy>
   25376:	85 c0                	test   %eax,%eax
   25378:	74 11                	je     2538b <prvTraceStoreKernelCallWithNumericParamOnly+0x4d>
   2537a:	48 8d 3d 5f 3c 00 00 	lea    0x3c5f(%rip),%rdi        # 28fe0 <xInterruptGivePeriod+0x11f0>
   25381:	e8 24 10 00 00       	callq  263aa <prvTraceError>
   25386:	e9 98 00 00 00       	jmpq   25423 <prvTraceStoreKernelCallWithNumericParamOnly+0xe5>
   2538b:	e8 3f da fe ff       	callq  12dcf <vPortEnterCritical>
   25390:	8b 05 fa 1c 11 00    	mov    0x111cfa(%rip),%eax        # 137090 <recorder_busy>
   25396:	83 c0 01             	add    $0x1,%eax
   25399:	89 05 f1 1c 11 00    	mov    %eax,0x111cf1(%rip)        # 137090 <recorder_busy>
   2539f:	48 8b 05 82 21 11 00 	mov    0x112182(%rip),%rax        # 137528 <RecorderDataPtr>
   253a6:	8b 40 30             	mov    0x30(%rax),%eax
   253a9:	85 c0                	test   %eax,%eax
   253ab:	74 62                	je     2540f <prvTraceStoreKernelCallWithNumericParamOnly+0xd1>
   253ad:	0f b6 05 ed 1c 11 00 	movzbl 0x111ced(%rip),%eax        # 1370a1 <handle_of_last_logged_task>
   253b4:	84 c0                	test   %al,%al
   253b6:	74 57                	je     2540f <prvTraceStoreKernelCallWithNumericParamOnly+0xd1>
   253b8:	bf ff 00 00 00       	mov    $0xff,%edi
   253bd:	e8 d3 12 00 00       	callq  26695 <prvTraceGetDTS>
   253c2:	88 45 f5             	mov    %al,-0xb(%rbp)
   253c5:	8b 45 e8             	mov    -0x18(%rbp),%eax
   253c8:	89 c6                	mov    %eax,%esi
   253ca:	bf ff ff 00 00       	mov    $0xffff,%edi
   253cf:	e8 db fe ff ff       	callq  252af <prvTraceGetParam>
   253d4:	66 89 45 f6          	mov    %ax,-0xa(%rbp)
   253d8:	e8 0e 09 00 00       	callq  25ceb <prvTraceNextFreeEventBufferSlot>
   253dd:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
   253e1:	48 83 7d f8 00       	cmpq   $0x0,-0x8(%rbp)
   253e6:	74 27                	je     2540f <prvTraceStoreKernelCallWithNumericParamOnly+0xd1>
   253e8:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   253ec:	0f b6 55 f5          	movzbl -0xb(%rbp),%edx
   253f0:	88 50 01             	mov    %dl,0x1(%rax)
   253f3:	8b 45 ec             	mov    -0x14(%rbp),%eax
   253f6:	89 c2                	mov    %eax,%edx
   253f8:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   253fc:	88 10                	mov    %dl,(%rax)
   253fe:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   25402:	0f b7 55 f6          	movzwl -0xa(%rbp),%edx
   25406:	66 89 50 02          	mov    %dx,0x2(%rax)
   2540a:	e8 14 12 00 00       	callq  26623 <prvTraceUpdateCounters>
   2540f:	8b 05 7b 1c 11 00    	mov    0x111c7b(%rip),%eax        # 137090 <recorder_busy>
   25415:	83 e8 01             	sub    $0x1,%eax
   25418:	89 05 72 1c 11 00    	mov    %eax,0x111c72(%rip)        # 137090 <recorder_busy>
   2541e:	e8 da d9 fe ff       	callq  12dfd <vPortExitCritical>
   25423:	c9                   	leaveq 
   25424:	c3                   	retq   

0000000000025425 <prvTraceStoreTaskswitch>:
   25425:	f3 0f 1e fa          	endbr64 
   25429:	55                   	push   %rbp
   2542a:	48 89 e5             	mov    %rsp,%rbp
   2542d:	48 83 ec 20          	sub    $0x20,%rsp
   25431:	89 f8                	mov    %edi,%eax
   25433:	88 45 ec             	mov    %al,-0x14(%rbp)
   25436:	80 7d ec 96          	cmpb   $0x96,-0x14(%rbp)
   2543a:	76 11                	jbe    2544d <prvTraceStoreTaskswitch+0x28>
   2543c:	48 8d 3d d5 3b 00 00 	lea    0x3bd5(%rip),%rdi        # 29018 <xInterruptGivePeriod+0x1228>
   25443:	e8 62 0f 00 00       	callq  263aa <prvTraceError>
   25448:	e9 dd 00 00 00       	jmpq   2552a <prvTraceStoreTaskswitch+0x105>
   2544d:	8b 05 3d 1c 11 00    	mov    0x111c3d(%rip),%eax        # 137090 <recorder_busy>
   25453:	83 c0 01             	add    $0x1,%eax
   25456:	89 05 34 1c 11 00    	mov    %eax,0x111c34(%rip)        # 137090 <recorder_busy>
   2545c:	0f b6 05 3e 1c 11 00 	movzbl 0x111c3e(%rip),%eax        # 1370a1 <handle_of_last_logged_task>
   25463:	38 45 ec             	cmp    %al,-0x14(%rbp)
   25466:	0f 84 af 00 00 00    	je     2551b <prvTraceStoreTaskswitch+0xf6>
   2546c:	48 8b 05 b5 20 11 00 	mov    0x1120b5(%rip),%rax        # 137528 <RecorderDataPtr>
   25473:	8b 40 30             	mov    0x30(%rax),%eax
   25476:	85 c0                	test   %eax,%eax
   25478:	0f 84 9d 00 00 00    	je     2551b <prvTraceStoreTaskswitch+0xf6>
   2547e:	c7 05 f8 1b 11 00 00 	movl   $0x0,0x111bf8(%rip)        # 137080 <isPendingContextSwitch>
   25485:	00 00 00 
   25488:	bf ff ff 00 00       	mov    $0xffff,%edi
   2548d:	e8 03 12 00 00       	callq  26695 <prvTraceGetDTS>
   25492:	66 89 45 f6          	mov    %ax,-0xa(%rbp)
   25496:	0f b6 45 ec          	movzbl -0x14(%rbp),%eax
   2549a:	88 05 01 1c 11 00    	mov    %al,0x111c01(%rip)        # 1370a1 <handle_of_last_logged_task>
   254a0:	0f b6 05 fa 1b 11 00 	movzbl 0x111bfa(%rip),%eax        # 1370a1 <handle_of_last_logged_task>
   254a7:	88 45 f5             	mov    %al,-0xb(%rbp)
   254aa:	e8 3c 08 00 00       	callq  25ceb <prvTraceNextFreeEventBufferSlot>
   254af:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
   254b3:	48 83 7d f8 00       	cmpq   $0x0,-0x8(%rbp)
   254b8:	74 61                	je     2551b <prvTraceStoreTaskswitch+0xf6>
   254ba:	0f b6 05 e0 1b 11 00 	movzbl 0x111be0(%rip),%eax        # 1370a1 <handle_of_last_logged_task>
   254c1:	0f b6 c0             	movzbl %al,%eax
   254c4:	89 c6                	mov    %eax,%esi
   254c6:	bf 03 00 00 00       	mov    $0x3,%edi
   254cb:	e8 59 04 00 00       	callq  25929 <prvTraceGetObjectState>
   254d0:	3c 01                	cmp    $0x1,%al
   254d2:	75 09                	jne    254dd <prvTraceStoreTaskswitch+0xb8>
   254d4:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   254d8:	c6 00 07             	movb   $0x7,(%rax)
   254db:	eb 07                	jmp    254e4 <prvTraceStoreTaskswitch+0xbf>
   254dd:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   254e1:	c6 00 06             	movb   $0x6,(%rax)
   254e4:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   254e8:	0f b7 55 f6          	movzwl -0xa(%rbp),%edx
   254ec:	66 89 50 02          	mov    %dx,0x2(%rax)
   254f0:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   254f4:	0f b6 55 f5          	movzbl -0xb(%rbp),%edx
   254f8:	88 50 01             	mov    %dl,0x1(%rax)
   254fb:	0f b6 05 9f 1b 11 00 	movzbl 0x111b9f(%rip),%eax        # 1370a1 <handle_of_last_logged_task>
   25502:	0f b6 c0             	movzbl %al,%eax
   25505:	ba 01 00 00 00       	mov    $0x1,%edx
   2550a:	89 c6                	mov    %eax,%esi
   2550c:	bf 03 00 00 00       	mov    $0x3,%edi
   25511:	e8 76 03 00 00       	callq  2588c <prvTraceSetObjectState>
   25516:	e8 08 11 00 00       	callq  26623 <prvTraceUpdateCounters>
   2551b:	8b 05 6f 1b 11 00    	mov    0x111b6f(%rip),%eax        # 137090 <recorder_busy>
   25521:	83 e8 01             	sub    $0x1,%eax
   25524:	89 05 66 1b 11 00    	mov    %eax,0x111b66(%rip)        # 137090 <recorder_busy>
   2552a:	c9                   	leaveq 
   2552b:	c3                   	retq   

000000000002552c <prvTraceStoreObjectNameOnCloseEvent>:
   2552c:	f3 0f 1e fa          	endbr64 
   25530:	55                   	push   %rbp
   25531:	48 89 e5             	mov    %rsp,%rbp
   25534:	53                   	push   %rbx
   25535:	48 83 ec 38          	sub    $0x38,%rsp
   25539:	89 f1                	mov    %esi,%ecx
   2553b:	89 d0                	mov    %edx,%eax
   2553d:	89 fa                	mov    %edi,%edx
   2553f:	88 55 cc             	mov    %dl,-0x34(%rbp)
   25542:	89 ca                	mov    %ecx,%edx
   25544:	88 55 c8             	mov    %dl,-0x38(%rbp)
   25547:	88 45 c4             	mov    %al,-0x3c(%rbp)
   2554a:	80 7d c4 08          	cmpb   $0x8,-0x3c(%rbp)
   2554e:	76 11                	jbe    25561 <prvTraceStoreObjectNameOnCloseEvent+0x35>
   25550:	48 8d 3d 09 3b 00 00 	lea    0x3b09(%rip),%rdi        # 29060 <xInterruptGivePeriod+0x1270>
   25557:	e8 4e 0e 00 00       	callq  263aa <prvTraceError>
   2555c:	e9 ba 00 00 00       	jmpq   2561b <prvTraceStoreObjectNameOnCloseEvent+0xef>
   25561:	48 8b 15 c0 1f 11 00 	mov    0x111fc0(%rip),%rdx        # 137528 <RecorderDataPtr>
   25568:	0f b6 45 c4          	movzbl -0x3c(%rbp),%eax
   2556c:	48 98                	cltq   
   2556e:	0f b6 44 02 64       	movzbl 0x64(%rdx,%rax,1),%eax
   25573:	38 45 c8             	cmp    %al,-0x38(%rbp)
   25576:	76 11                	jbe    25589 <prvTraceStoreObjectNameOnCloseEvent+0x5d>
   25578:	48 8d 3d 39 3b 00 00 	lea    0x3b39(%rip),%rdi        # 290b8 <xInterruptGivePeriod+0x12c8>
   2557f:	e8 26 0e 00 00       	callq  263aa <prvTraceError>
   25584:	e9 92 00 00 00       	jmpq   2561b <prvTraceStoreObjectNameOnCloseEvent+0xef>
   25589:	48 8b 05 98 1f 11 00 	mov    0x111f98(%rip),%rax        # 137528 <RecorderDataPtr>
   25590:	8b 40 30             	mov    0x30(%rax),%eax
   25593:	85 c0                	test   %eax,%eax
   25595:	0f 84 80 00 00 00    	je     2561b <prvTraceStoreObjectNameOnCloseEvent+0xef>
   2559b:	0f b6 45 c8          	movzbl -0x38(%rbp),%eax
   2559f:	88 45 dd             	mov    %al,-0x23(%rbp)
   255a2:	48 8b 1d 7f 1f 11 00 	mov    0x111f7f(%rip),%rbx        # 137528 <RecorderDataPtr>
   255a9:	0f b6 55 c4          	movzbl -0x3c(%rbp),%edx
   255ad:	0f b6 45 c8          	movzbl -0x38(%rbp),%eax
   255b1:	89 d6                	mov    %edx,%esi
   255b3:	89 c7                	mov    %eax,%edi
   255b5:	e8 97 07 00 00       	callq  25d51 <uiIndexOfObject>
   255ba:	0f b7 c0             	movzwl %ax,%eax
   255bd:	48 98                	cltq   
   255bf:	48 05 90 00 00 00    	add    $0x90,%rax
   255c5:	48 01 d8             	add    %rbx,%rax
   255c8:	48 83 c0 0c          	add    $0xc,%rax
   255cc:	48 89 45 e0          	mov    %rax,-0x20(%rbp)
   255d0:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
   255d4:	be 00 00 00 00       	mov    $0x0,%esi
   255d9:	48 89 c7             	mov    %rax,%rdi
   255dc:	e8 c4 0c 00 00       	callq  262a5 <prvTraceOpenSymbol>
   255e1:	66 89 45 de          	mov    %ax,-0x22(%rbp)
   255e5:	e8 01 07 00 00       	callq  25ceb <prvTraceNextFreeEventBufferSlot>
   255ea:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
   255ee:	48 83 7d e8 00       	cmpq   $0x0,-0x18(%rbp)
   255f3:	74 26                	je     2561b <prvTraceStoreObjectNameOnCloseEvent+0xef>
   255f5:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
   255f9:	0f b6 55 cc          	movzbl -0x34(%rbp),%edx
   255fd:	88 10                	mov    %dl,(%rax)
   255ff:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
   25603:	0f b6 55 dd          	movzbl -0x23(%rbp),%edx
   25607:	88 50 01             	mov    %dl,0x1(%rax)
   2560a:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
   2560e:	0f b7 55 de          	movzwl -0x22(%rbp),%edx
   25612:	66 89 50 02          	mov    %dx,0x2(%rax)
   25616:	e8 08 10 00 00       	callq  26623 <prvTraceUpdateCounters>
   2561b:	48 83 c4 38          	add    $0x38,%rsp
   2561f:	5b                   	pop    %rbx
   25620:	5d                   	pop    %rbp
   25621:	c3                   	retq   

0000000000025622 <prvTraceStoreObjectPropertiesOnCloseEvent>:
   25622:	f3 0f 1e fa          	endbr64 
   25626:	55                   	push   %rbp
   25627:	48 89 e5             	mov    %rsp,%rbp
   2562a:	53                   	push   %rbx
   2562b:	48 83 ec 28          	sub    $0x28,%rsp
   2562f:	89 f1                	mov    %esi,%ecx
   25631:	89 d0                	mov    %edx,%eax
   25633:	89 fa                	mov    %edi,%edx
   25635:	88 55 dc             	mov    %dl,-0x24(%rbp)
   25638:	89 ca                	mov    %ecx,%edx
   2563a:	88 55 d8             	mov    %dl,-0x28(%rbp)
   2563d:	88 45 d4             	mov    %al,-0x2c(%rbp)
   25640:	80 7d d4 08          	cmpb   $0x8,-0x2c(%rbp)
   25644:	76 11                	jbe    25657 <prvTraceStoreObjectPropertiesOnCloseEvent+0x35>
   25646:	48 8d 3d bb 3a 00 00 	lea    0x3abb(%rip),%rdi        # 29108 <xInterruptGivePeriod+0x1318>
   2564d:	e8 58 0d 00 00       	callq  263aa <prvTraceError>
   25652:	e9 ee 00 00 00       	jmpq   25745 <prvTraceStoreObjectPropertiesOnCloseEvent+0x123>
   25657:	48 8b 15 ca 1e 11 00 	mov    0x111eca(%rip),%rdx        # 137528 <RecorderDataPtr>
   2565e:	0f b6 45 d4          	movzbl -0x2c(%rbp),%eax
   25662:	48 98                	cltq   
   25664:	0f b6 44 02 64       	movzbl 0x64(%rdx,%rax,1),%eax
   25669:	38 45 d8             	cmp    %al,-0x28(%rbp)
   2566c:	76 11                	jbe    2567f <prvTraceStoreObjectPropertiesOnCloseEvent+0x5d>
   2566e:	48 8d 3d eb 3a 00 00 	lea    0x3aeb(%rip),%rdi        # 29160 <xInterruptGivePeriod+0x1370>
   25675:	e8 30 0d 00 00       	callq  263aa <prvTraceError>
   2567a:	e9 c6 00 00 00       	jmpq   25745 <prvTraceStoreObjectPropertiesOnCloseEvent+0x123>
   2567f:	48 8b 05 a2 1e 11 00 	mov    0x111ea2(%rip),%rax        # 137528 <RecorderDataPtr>
   25686:	8b 40 30             	mov    0x30(%rax),%eax
   25689:	85 c0                	test   %eax,%eax
   2568b:	0f 84 b4 00 00 00    	je     25745 <prvTraceStoreObjectPropertiesOnCloseEvent+0x123>
   25691:	e8 55 06 00 00       	callq  25ceb <prvTraceNextFreeEventBufferSlot>
   25696:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
   2569a:	48 83 7d e8 00       	cmpq   $0x0,-0x18(%rbp)
   2569f:	0f 84 a0 00 00 00    	je     25745 <prvTraceStoreObjectPropertiesOnCloseEvent+0x123>
   256a5:	80 7d d4 03          	cmpb   $0x3,-0x2c(%rbp)
   256a9:	75 48                	jne    256f3 <prvTraceStoreObjectPropertiesOnCloseEvent+0xd1>
   256ab:	48 8b 1d 76 1e 11 00 	mov    0x111e76(%rip),%rbx        # 137528 <RecorderDataPtr>
   256b2:	0f b6 55 d4          	movzbl -0x2c(%rbp),%edx
   256b6:	0f b6 45 d8          	movzbl -0x28(%rbp),%eax
   256ba:	89 d6                	mov    %edx,%esi
   256bc:	89 c7                	mov    %eax,%edi
   256be:	e8 8e 06 00 00       	callq  25d51 <uiIndexOfObject>
   256c3:	0f b7 c8             	movzwl %ax,%ecx
   256c6:	48 8b 15 5b 1e 11 00 	mov    0x111e5b(%rip),%rdx        # 137528 <RecorderDataPtr>
   256cd:	0f b6 45 d4          	movzbl -0x2c(%rbp),%eax
   256d1:	48 98                	cltq   
   256d3:	0f b6 44 02 70       	movzbl 0x70(%rdx,%rax,1),%eax
   256d8:	0f b6 c0             	movzbl %al,%eax
   256db:	01 c8                	add    %ecx,%eax
   256dd:	83 c0 01             	add    $0x1,%eax
   256e0:	48 98                	cltq   
   256e2:	0f b6 94 03 9c 00 00 	movzbl 0x9c(%rbx,%rax,1),%edx
   256e9:	00 
   256ea:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
   256ee:	88 50 01             	mov    %dl,0x1(%rax)
   256f1:	eb 43                	jmp    25736 <prvTraceStoreObjectPropertiesOnCloseEvent+0x114>
   256f3:	48 8b 1d 2e 1e 11 00 	mov    0x111e2e(%rip),%rbx        # 137528 <RecorderDataPtr>
   256fa:	0f b6 55 d4          	movzbl -0x2c(%rbp),%edx
   256fe:	0f b6 45 d8          	movzbl -0x28(%rbp),%eax
   25702:	89 d6                	mov    %edx,%esi
   25704:	89 c7                	mov    %eax,%edi
   25706:	e8 46 06 00 00       	callq  25d51 <uiIndexOfObject>
   2570b:	0f b7 c8             	movzwl %ax,%ecx
   2570e:	48 8b 15 13 1e 11 00 	mov    0x111e13(%rip),%rdx        # 137528 <RecorderDataPtr>
   25715:	0f b6 45 d4          	movzbl -0x2c(%rbp),%eax
   25719:	48 98                	cltq   
   2571b:	0f b6 44 02 70       	movzbl 0x70(%rdx,%rax,1),%eax
   25720:	0f b6 c0             	movzbl %al,%eax
   25723:	01 c8                	add    %ecx,%eax
   25725:	48 98                	cltq   
   25727:	0f b6 94 03 9c 00 00 	movzbl 0x9c(%rbx,%rax,1),%edx
   2572e:	00 
   2572f:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
   25733:	88 50 01             	mov    %dl,0x1(%rax)
   25736:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
   2573a:	0f b6 55 dc          	movzbl -0x24(%rbp),%edx
   2573e:	88 10                	mov    %dl,(%rax)
   25740:	e8 de 0e 00 00       	callq  26623 <prvTraceUpdateCounters>
   25745:	48 83 c4 28          	add    $0x28,%rsp
   25749:	5b                   	pop    %rbx
   2574a:	5d                   	pop    %rbp
   2574b:	c3                   	retq   

000000000002574c <prvTraceSetPriorityProperty>:
   2574c:	f3 0f 1e fa          	endbr64 
   25750:	55                   	push   %rbp
   25751:	48 89 e5             	mov    %rsp,%rbp
   25754:	53                   	push   %rbx
   25755:	48 83 ec 18          	sub    $0x18,%rsp
   25759:	89 f1                	mov    %esi,%ecx
   2575b:	89 d0                	mov    %edx,%eax
   2575d:	89 fa                	mov    %edi,%edx
   2575f:	88 55 ec             	mov    %dl,-0x14(%rbp)
   25762:	89 ca                	mov    %ecx,%edx
   25764:	88 55 e8             	mov    %dl,-0x18(%rbp)
   25767:	88 45 e4             	mov    %al,-0x1c(%rbp)
   2576a:	80 7d ec 08          	cmpb   $0x8,-0x14(%rbp)
   2576e:	76 0e                	jbe    2577e <prvTraceSetPriorityProperty+0x32>
   25770:	48 8d 3d 41 3a 00 00 	lea    0x3a41(%rip),%rdi        # 291b8 <xInterruptGivePeriod+0x13c8>
   25777:	e8 2e 0c 00 00       	callq  263aa <prvTraceError>
   2577c:	eb 67                	jmp    257e5 <prvTraceSetPriorityProperty+0x99>
   2577e:	48 8b 15 a3 1d 11 00 	mov    0x111da3(%rip),%rdx        # 137528 <RecorderDataPtr>
   25785:	0f b6 45 ec          	movzbl -0x14(%rbp),%eax
   25789:	48 98                	cltq   
   2578b:	0f b6 44 02 64       	movzbl 0x64(%rdx,%rax,1),%eax
   25790:	38 45 e8             	cmp    %al,-0x18(%rbp)
   25793:	76 0e                	jbe    257a3 <prvTraceSetPriorityProperty+0x57>
   25795:	48 8d 3d 6c 3a 00 00 	lea    0x3a6c(%rip),%rdi        # 29208 <xInterruptGivePeriod+0x1418>
   2579c:	e8 09 0c 00 00       	callq  263aa <prvTraceError>
   257a1:	eb 42                	jmp    257e5 <prvTraceSetPriorityProperty+0x99>
   257a3:	48 8b 1d 7e 1d 11 00 	mov    0x111d7e(%rip),%rbx        # 137528 <RecorderDataPtr>
   257aa:	0f b6 55 ec          	movzbl -0x14(%rbp),%edx
   257ae:	0f b6 45 e8          	movzbl -0x18(%rbp),%eax
   257b2:	89 d6                	mov    %edx,%esi
   257b4:	89 c7                	mov    %eax,%edi
   257b6:	e8 96 05 00 00       	callq  25d51 <uiIndexOfObject>
   257bb:	0f b7 c8             	movzwl %ax,%ecx
   257be:	48 8b 15 63 1d 11 00 	mov    0x111d63(%rip),%rdx        # 137528 <RecorderDataPtr>
   257c5:	0f b6 45 ec          	movzbl -0x14(%rbp),%eax
   257c9:	48 98                	cltq   
   257cb:	0f b6 44 02 70       	movzbl 0x70(%rdx,%rax,1),%eax
   257d0:	0f b6 c0             	movzbl %al,%eax
   257d3:	01 c8                	add    %ecx,%eax
   257d5:	83 c0 01             	add    $0x1,%eax
   257d8:	48 98                	cltq   
   257da:	0f b6 55 e4          	movzbl -0x1c(%rbp),%edx
   257de:	88 94 03 9c 00 00 00 	mov    %dl,0x9c(%rbx,%rax,1)
   257e5:	48 83 c4 18          	add    $0x18,%rsp
   257e9:	5b                   	pop    %rbx
   257ea:	5d                   	pop    %rbp
   257eb:	c3                   	retq   

00000000000257ec <prvTraceGetPriorityProperty>:
   257ec:	f3 0f 1e fa          	endbr64 
   257f0:	55                   	push   %rbp
   257f1:	48 89 e5             	mov    %rsp,%rbp
   257f4:	53                   	push   %rbx
   257f5:	48 83 ec 18          	sub    $0x18,%rsp
   257f9:	89 fa                	mov    %edi,%edx
   257fb:	89 f0                	mov    %esi,%eax
   257fd:	88 55 ec             	mov    %dl,-0x14(%rbp)
   25800:	88 45 e8             	mov    %al,-0x18(%rbp)
   25803:	80 7d ec 08          	cmpb   $0x8,-0x14(%rbp)
   25807:	76 13                	jbe    2581c <prvTraceGetPriorityProperty+0x30>
   25809:	48 8d 3d 38 3a 00 00 	lea    0x3a38(%rip),%rdi        # 29248 <xInterruptGivePeriod+0x1458>
   25810:	e8 95 0b 00 00       	callq  263aa <prvTraceError>
   25815:	b8 00 00 00 00       	mov    $0x0,%eax
   2581a:	eb 69                	jmp    25885 <prvTraceGetPriorityProperty+0x99>
   2581c:	48 8b 15 05 1d 11 00 	mov    0x111d05(%rip),%rdx        # 137528 <RecorderDataPtr>
   25823:	0f b6 45 ec          	movzbl -0x14(%rbp),%eax
   25827:	48 98                	cltq   
   25829:	0f b6 44 02 64       	movzbl 0x64(%rdx,%rax,1),%eax
   2582e:	38 45 e8             	cmp    %al,-0x18(%rbp)
   25831:	76 13                	jbe    25846 <prvTraceGetPriorityProperty+0x5a>
   25833:	48 8d 3d 5e 3a 00 00 	lea    0x3a5e(%rip),%rdi        # 29298 <xInterruptGivePeriod+0x14a8>
   2583a:	e8 6b 0b 00 00       	callq  263aa <prvTraceError>
   2583f:	b8 00 00 00 00       	mov    $0x0,%eax
   25844:	eb 3f                	jmp    25885 <prvTraceGetPriorityProperty+0x99>
   25846:	48 8b 1d db 1c 11 00 	mov    0x111cdb(%rip),%rbx        # 137528 <RecorderDataPtr>
   2584d:	0f b6 55 ec          	movzbl -0x14(%rbp),%edx
   25851:	0f b6 45 e8          	movzbl -0x18(%rbp),%eax
   25855:	89 d6                	mov    %edx,%esi
   25857:	89 c7                	mov    %eax,%edi
   25859:	e8 f3 04 00 00       	callq  25d51 <uiIndexOfObject>
   2585e:	0f b7 c8             	movzwl %ax,%ecx
   25861:	48 8b 15 c0 1c 11 00 	mov    0x111cc0(%rip),%rdx        # 137528 <RecorderDataPtr>
   25868:	0f b6 45 ec          	movzbl -0x14(%rbp),%eax
   2586c:	48 98                	cltq   
   2586e:	0f b6 44 02 70       	movzbl 0x70(%rdx,%rax,1),%eax
   25873:	0f b6 c0             	movzbl %al,%eax
   25876:	01 c8                	add    %ecx,%eax
   25878:	83 c0 01             	add    $0x1,%eax
   2587b:	48 98                	cltq   
   2587d:	0f b6 84 03 9c 00 00 	movzbl 0x9c(%rbx,%rax,1),%eax
   25884:	00 
   25885:	48 83 c4 18          	add    $0x18,%rsp
   25889:	5b                   	pop    %rbx
   2588a:	5d                   	pop    %rbp
   2588b:	c3                   	retq   

000000000002588c <prvTraceSetObjectState>:
   2588c:	f3 0f 1e fa          	endbr64 
   25890:	55                   	push   %rbp
   25891:	48 89 e5             	mov    %rsp,%rbp
   25894:	53                   	push   %rbx
   25895:	48 83 ec 18          	sub    $0x18,%rsp
   25899:	89 f1                	mov    %esi,%ecx
   2589b:	89 d0                	mov    %edx,%eax
   2589d:	89 fa                	mov    %edi,%edx
   2589f:	88 55 ec             	mov    %dl,-0x14(%rbp)
   258a2:	89 ca                	mov    %ecx,%edx
   258a4:	88 55 e8             	mov    %dl,-0x18(%rbp)
   258a7:	88 45 e4             	mov    %al,-0x1c(%rbp)
   258aa:	80 7d ec 08          	cmpb   $0x8,-0x14(%rbp)
   258ae:	76 0e                	jbe    258be <prvTraceSetObjectState+0x32>
   258b0:	48 8d 3d 21 3a 00 00 	lea    0x3a21(%rip),%rdi        # 292d8 <xInterruptGivePeriod+0x14e8>
   258b7:	e8 ee 0a 00 00       	callq  263aa <prvTraceError>
   258bc:	eb 64                	jmp    25922 <prvTraceSetObjectState+0x96>
   258be:	48 8b 15 63 1c 11 00 	mov    0x111c63(%rip),%rdx        # 137528 <RecorderDataPtr>
   258c5:	0f b6 45 ec          	movzbl -0x14(%rbp),%eax
   258c9:	48 98                	cltq   
   258cb:	0f b6 44 02 64       	movzbl 0x64(%rdx,%rax,1),%eax
   258d0:	38 45 e8             	cmp    %al,-0x18(%rbp)
   258d3:	76 0e                	jbe    258e3 <prvTraceSetObjectState+0x57>
   258d5:	48 8d 3d 44 3a 00 00 	lea    0x3a44(%rip),%rdi        # 29320 <xInterruptGivePeriod+0x1530>
   258dc:	e8 c9 0a 00 00       	callq  263aa <prvTraceError>
   258e1:	eb 3f                	jmp    25922 <prvTraceSetObjectState+0x96>
   258e3:	48 8b 1d 3e 1c 11 00 	mov    0x111c3e(%rip),%rbx        # 137528 <RecorderDataPtr>
   258ea:	0f b6 55 ec          	movzbl -0x14(%rbp),%edx
   258ee:	0f b6 45 e8          	movzbl -0x18(%rbp),%eax
   258f2:	89 d6                	mov    %edx,%esi
   258f4:	89 c7                	mov    %eax,%edi
   258f6:	e8 56 04 00 00       	callq  25d51 <uiIndexOfObject>
   258fb:	0f b7 c8             	movzwl %ax,%ecx
   258fe:	48 8b 15 23 1c 11 00 	mov    0x111c23(%rip),%rdx        # 137528 <RecorderDataPtr>
   25905:	0f b6 45 ec          	movzbl -0x14(%rbp),%eax
   25909:	48 98                	cltq   
   2590b:	0f b6 44 02 70       	movzbl 0x70(%rdx,%rax,1),%eax
   25910:	0f b6 c0             	movzbl %al,%eax
   25913:	01 c8                	add    %ecx,%eax
   25915:	48 98                	cltq   
   25917:	0f b6 55 e4          	movzbl -0x1c(%rbp),%edx
   2591b:	88 94 03 9c 00 00 00 	mov    %dl,0x9c(%rbx,%rax,1)
   25922:	48 83 c4 18          	add    $0x18,%rsp
   25926:	5b                   	pop    %rbx
   25927:	5d                   	pop    %rbp
   25928:	c3                   	retq   

0000000000025929 <prvTraceGetObjectState>:
   25929:	f3 0f 1e fa          	endbr64 
   2592d:	55                   	push   %rbp
   2592e:	48 89 e5             	mov    %rsp,%rbp
   25931:	53                   	push   %rbx
   25932:	48 83 ec 18          	sub    $0x18,%rsp
   25936:	89 fa                	mov    %edi,%edx
   25938:	89 f0                	mov    %esi,%eax
   2593a:	88 55 ec             	mov    %dl,-0x14(%rbp)
   2593d:	88 45 e8             	mov    %al,-0x18(%rbp)
   25940:	80 7d ec 08          	cmpb   $0x8,-0x14(%rbp)
   25944:	76 13                	jbe    25959 <prvTraceGetObjectState+0x30>
   25946:	48 8d 3d 13 3a 00 00 	lea    0x3a13(%rip),%rdi        # 29360 <xInterruptGivePeriod+0x1570>
   2594d:	e8 58 0a 00 00       	callq  263aa <prvTraceError>
   25952:	b8 00 00 00 00       	mov    $0x0,%eax
   25957:	eb 66                	jmp    259bf <prvTraceGetObjectState+0x96>
   25959:	48 8b 15 c8 1b 11 00 	mov    0x111bc8(%rip),%rdx        # 137528 <RecorderDataPtr>
   25960:	0f b6 45 ec          	movzbl -0x14(%rbp),%eax
   25964:	48 98                	cltq   
   25966:	0f b6 44 02 64       	movzbl 0x64(%rdx,%rax,1),%eax
   2596b:	38 45 e8             	cmp    %al,-0x18(%rbp)
   2596e:	76 13                	jbe    25983 <prvTraceGetObjectState+0x5a>
   25970:	48 8d 3d 31 3a 00 00 	lea    0x3a31(%rip),%rdi        # 293a8 <xInterruptGivePeriod+0x15b8>
   25977:	e8 2e 0a 00 00       	callq  263aa <prvTraceError>
   2597c:	b8 00 00 00 00       	mov    $0x0,%eax
   25981:	eb 3c                	jmp    259bf <prvTraceGetObjectState+0x96>
   25983:	48 8b 1d 9e 1b 11 00 	mov    0x111b9e(%rip),%rbx        # 137528 <RecorderDataPtr>
   2598a:	0f b6 55 ec          	movzbl -0x14(%rbp),%edx
   2598e:	0f b6 45 e8          	movzbl -0x18(%rbp),%eax
   25992:	89 d6                	mov    %edx,%esi
   25994:	89 c7                	mov    %eax,%edi
   25996:	e8 b6 03 00 00       	callq  25d51 <uiIndexOfObject>
   2599b:	0f b7 c8             	movzwl %ax,%ecx
   2599e:	48 8b 15 83 1b 11 00 	mov    0x111b83(%rip),%rdx        # 137528 <RecorderDataPtr>
   259a5:	0f b6 45 ec          	movzbl -0x14(%rbp),%eax
   259a9:	48 98                	cltq   
   259ab:	0f b6 44 02 70       	movzbl 0x70(%rdx,%rax,1),%eax
   259b0:	0f b6 c0             	movzbl %al,%eax
   259b3:	01 c8                	add    %ecx,%eax
   259b5:	48 98                	cltq   
   259b7:	0f b6 84 03 9c 00 00 	movzbl 0x9c(%rbx,%rax,1),%eax
   259be:	00 
   259bf:	48 83 c4 18          	add    $0x18,%rsp
   259c3:	5b                   	pop    %rbx
   259c4:	5d                   	pop    %rbp
   259c5:	c3                   	retq   

00000000000259c6 <prvTraceSetTaskInstanceFinished>:
   259c6:	f3 0f 1e fa          	endbr64 
   259ca:	55                   	push   %rbp
   259cb:	48 89 e5             	mov    %rsp,%rbp
   259ce:	53                   	push   %rbx
   259cf:	48 83 ec 18          	sub    $0x18,%rsp
   259d3:	89 f8                	mov    %edi,%eax
   259d5:	88 45 ec             	mov    %al,-0x14(%rbp)
   259d8:	48 8b 05 49 1b 11 00 	mov    0x111b49(%rip),%rax        # 137528 <RecorderDataPtr>
   259df:	0f b6 40 67          	movzbl 0x67(%rax),%eax
   259e3:	38 45 ec             	cmp    %al,-0x14(%rbp)
   259e6:	76 0e                	jbe    259f6 <prvTraceSetTaskInstanceFinished+0x30>
   259e8:	48 8d 3d f9 39 00 00 	lea    0x39f9(%rip),%rdi        # 293e8 <xInterruptGivePeriod+0x15f8>
   259ef:	e8 b6 09 00 00       	callq  263aa <prvTraceError>
   259f4:	eb 34                	jmp    25a2a <prvTraceSetTaskInstanceFinished+0x64>
   259f6:	48 8b 1d 2b 1b 11 00 	mov    0x111b2b(%rip),%rbx        # 137528 <RecorderDataPtr>
   259fd:	0f b6 45 ec          	movzbl -0x14(%rbp),%eax
   25a01:	be 03 00 00 00       	mov    $0x3,%esi
   25a06:	89 c7                	mov    %eax,%edi
   25a08:	e8 44 03 00 00       	callq  25d51 <uiIndexOfObject>
   25a0d:	0f b7 d0             	movzwl %ax,%edx
   25a10:	48 8b 05 11 1b 11 00 	mov    0x111b11(%rip),%rax        # 137528 <RecorderDataPtr>
   25a17:	0f b6 40 73          	movzbl 0x73(%rax),%eax
   25a1b:	0f b6 c0             	movzbl %al,%eax
   25a1e:	01 d0                	add    %edx,%eax
   25a20:	48 98                	cltq   
   25a22:	c6 84 03 9c 00 00 00 	movb   $0x0,0x9c(%rbx,%rax,1)
   25a29:	00 
   25a2a:	48 83 c4 18          	add    $0x18,%rsp
   25a2e:	5b                   	pop    %rbx
   25a2f:	5d                   	pop    %rbp
   25a30:	c3                   	retq   

0000000000025a31 <prvTraceInitTraceData>:
   25a31:	f3 0f 1e fa          	endbr64 
   25a35:	55                   	push   %rbp
   25a36:	48 89 e5             	mov    %rsp,%rbp
   25a39:	48 8b 05 e8 1a 11 00 	mov    0x111ae8(%rip),%rax        # 137528 <RecorderDataPtr>
   25a40:	48 85 c0             	test   %rax,%rax
   25a43:	75 10                	jne    25a55 <prvTraceInitTraceData+0x24>
   25a45:	48 8d 05 f4 22 11 00 	lea    0x1122f4(%rip),%rax        # 137d40 <RecorderData>
   25a4c:	48 89 05 d5 1a 11 00 	mov    %rax,0x111ad5(%rip)        # 137528 <RecorderDataPtr>
   25a53:	eb 12                	jmp    25a67 <prvTraceInitTraceData+0x36>
   25a55:	48 8b 05 cc 1a 11 00 	mov    0x111acc(%rip),%rax        # 137528 <RecorderDataPtr>
   25a5c:	0f b6 00             	movzbl (%rax),%eax
   25a5f:	3c 01                	cmp    $0x1,%al
   25a61:	0f 84 81 02 00 00    	je     25ce8 <prvTraceInitTraceData+0x2b7>
   25a67:	e8 ac f8 fd ff       	callq  5318 <ulGetRunTimeCounterValue>
   25a6c:	89 05 8a dc 13 00    	mov    %eax,0x13dc8a(%rip)        # 1636fc <init_hwtc_count>
   25a72:	48 8b 05 af 1a 11 00 	mov    0x111aaf(%rip),%rax        # 137528 <RecorderDataPtr>
   25a79:	ba bc b9 02 00       	mov    $0x2b9bc,%edx
   25a7e:	be 00 00 00 00       	mov    $0x0,%esi
   25a83:	48 89 c7             	mov    %rax,%rdi
   25a86:	e8 85 ca fd ff       	callq  2510 <memset@plt>
   25a8b:	48 8b 05 96 1a 11 00 	mov    0x111a96(%rip),%rax        # 137528 <RecorderDataPtr>
   25a92:	66 c7 40 0c a1 1a    	movw   $0x1aa1,0xc(%rax)
   25a98:	48 8b 05 89 1a 11 00 	mov    0x111a89(%rip),%rax        # 137528 <RecorderDataPtr>
   25a9f:	c6 40 0e 05          	movb   $0x5,0xe(%rax)
   25aa3:	48 8b 05 7e 1a 11 00 	mov    0x111a7e(%rip),%rax        # 137528 <RecorderDataPtr>
   25aaa:	c6 40 0f 01          	movb   $0x1,0xf(%rax)
   25aae:	48 8b 05 73 1a 11 00 	mov    0x111a73(%rip),%rax        # 137528 <RecorderDataPtr>
   25ab5:	c7 40 10 bc b9 02 00 	movl   $0x2b9bc,0x10(%rax)
   25abc:	48 8b 05 65 1a 11 00 	mov    0x111a65(%rip),%rax        # 137528 <RecorderDataPtr>
   25ac3:	c7 40 18 00 7d 00 00 	movl   $0x7d00,0x18(%rax)
   25aca:	48 8b 05 57 1a 11 00 	mov    0x111a57(%rip),%rax        # 137528 <RecorderDataPtr>
   25ad1:	c7 40 54 f0 f0 f0 f0 	movl   $0xf0f0f0f0,0x54(%rax)
   25ad8:	48 8b 05 49 1a 11 00 	mov    0x111a49(%rip),%rax        # 137528 <RecorderDataPtr>
   25adf:	c7 40 58 00 00 00 00 	movl   $0x0,0x58(%rax)
   25ae6:	48 8b 05 3b 1a 11 00 	mov    0x111a3b(%rip),%rax        # 137528 <RecorderDataPtr>
   25aed:	c7 40 34 00 00 00 00 	movl   $0x0,0x34(%rax)
   25af4:	e8 bc db ff ff       	callq  236b5 <vTraceInitObjectPropertyTable>
   25af9:	48 8b 05 28 1a 11 00 	mov    0x111a28(%rip),%rax        # 137528 <RecorderDataPtr>
   25b00:	c7 80 c0 47 00 00 f1 	movl   $0xf1f1f1f1,0x47c0(%rax)
   25b07:	f1 f1 f1 
   25b0a:	48 8b 05 17 1a 11 00 	mov    0x111a17(%rip),%rax        # 137528 <RecorderDataPtr>
   25b11:	c7 80 c4 47 00 00 00 	movl   $0x7d00,0x47c4(%rax)
   25b18:	7d 00 00 
   25b1b:	48 8b 05 06 1a 11 00 	mov    0x111a06(%rip),%rax        # 137528 <RecorderDataPtr>
   25b22:	c7 80 c8 47 00 00 01 	movl   $0x1,0x47c8(%rax)
   25b29:	00 00 00 
   25b2c:	48 8b 05 f5 19 11 00 	mov    0x1119f5(%rip),%rax        # 137528 <RecorderDataPtr>
   25b33:	c7 80 54 c5 00 00 f2 	movl   $0xf2f2f2f2,0xc554(%rax)
   25b3a:	f2 f2 f2 
   25b3d:	48 8b 05 e4 19 11 00 	mov    0x1119e4(%rip),%rax        # 137528 <RecorderDataPtr>
   25b44:	48 05 58 c5 00 00    	add    $0xc558,%rax
   25b4a:	ba 50 00 00 00       	mov    $0x50,%edx
   25b4f:	48 8d 35 da 38 00 00 	lea    0x38da(%rip),%rsi        # 29430 <xInterruptGivePeriod+0x1640>
   25b56:	48 89 c7             	mov    %rax,%rdi
   25b59:	e8 f5 05 00 00       	callq  26153 <prvStrncpy>
   25b5e:	48 8b 05 c3 19 11 00 	mov    0x1119c3(%rip),%rax        # 137528 <RecorderDataPtr>
   25b65:	c7 80 a8 c5 00 00 f3 	movl   $0xf3f3f3f3,0xc5a8(%rax)
   25b6c:	f3 f3 f3 
   25b6f:	48 8b 05 b2 19 11 00 	mov    0x1119b2(%rip),%rax        # 137528 <RecorderDataPtr>
   25b76:	c6 80 b0 b9 02 00 0a 	movb   $0xa,0x2b9b0(%rax)
   25b7d:	48 8b 05 a4 19 11 00 	mov    0x1119a4(%rip),%rax        # 137528 <RecorderDataPtr>
   25b84:	c6 80 b1 b9 02 00 0b 	movb   $0xb,0x2b9b1(%rax)
   25b8b:	48 8b 05 96 19 11 00 	mov    0x111996(%rip),%rax        # 137528 <RecorderDataPtr>
   25b92:	c6 80 b2 b9 02 00 0c 	movb   $0xc,0x2b9b2(%rax)
   25b99:	48 8b 05 88 19 11 00 	mov    0x111988(%rip),%rax        # 137528 <RecorderDataPtr>
   25ba0:	c6 80 b3 b9 02 00 0d 	movb   $0xd,0x2b9b3(%rax)
   25ba7:	48 8b 05 7a 19 11 00 	mov    0x11197a(%rip),%rax        # 137528 <RecorderDataPtr>
   25bae:	c6 80 b4 b9 02 00 71 	movb   $0x71,0x2b9b4(%rax)
   25bb5:	48 8b 05 6c 19 11 00 	mov    0x11196c(%rip),%rax        # 137528 <RecorderDataPtr>
   25bbc:	c6 80 b5 b9 02 00 72 	movb   $0x72,0x2b9b5(%rax)
   25bc3:	48 8b 05 5e 19 11 00 	mov    0x11195e(%rip),%rax        # 137528 <RecorderDataPtr>
   25bca:	c6 80 b6 b9 02 00 73 	movb   $0x73,0x2b9b6(%rax)
   25bd1:	48 8b 05 50 19 11 00 	mov    0x111950(%rip),%rax        # 137528 <RecorderDataPtr>
   25bd8:	c6 80 b7 b9 02 00 74 	movb   $0x74,0x2b9b7(%rax)
   25bdf:	48 8b 05 42 19 11 00 	mov    0x111942(%rip),%rax        # 137528 <RecorderDataPtr>
   25be6:	c6 80 b8 b9 02 00 f1 	movb   $0xf1,0x2b9b8(%rax)
   25bed:	48 8b 05 34 19 11 00 	mov    0x111934(%rip),%rax        # 137528 <RecorderDataPtr>
   25bf4:	c6 80 b9 b9 02 00 f2 	movb   $0xf2,0x2b9b9(%rax)
   25bfb:	48 8b 05 26 19 11 00 	mov    0x111926(%rip),%rax        # 137528 <RecorderDataPtr>
   25c02:	c6 80 ba b9 02 00 f3 	movb   $0xf3,0x2b9ba(%rax)
   25c09:	48 8b 05 18 19 11 00 	mov    0x111918(%rip),%rax        # 137528 <RecorderDataPtr>
   25c10:	c6 80 bb b9 02 00 f4 	movb   $0xf4,0x2b9bb(%rax)
   25c17:	e8 88 dc ff ff       	callq  238a4 <vTraceInitObjectHandleStack>
   25c1c:	48 8b 05 05 19 11 00 	mov    0x111905(%rip),%rax        # 137528 <RecorderDataPtr>
   25c23:	c6 40 0b f4          	movb   $0xf4,0xb(%rax)
   25c27:	48 8b 05 fa 18 11 00 	mov    0x1118fa(%rip),%rax        # 137528 <RecorderDataPtr>
   25c2e:	c6 40 0a f3          	movb   $0xf3,0xa(%rax)
   25c32:	48 8b 05 ef 18 11 00 	mov    0x1118ef(%rip),%rax        # 137528 <RecorderDataPtr>
   25c39:	c6 40 09 f2          	movb   $0xf2,0x9(%rax)
   25c3d:	48 8b 05 e4 18 11 00 	mov    0x1118e4(%rip),%rax        # 137528 <RecorderDataPtr>
   25c44:	c6 40 08 f1          	movb   $0xf1,0x8(%rax)
   25c48:	48 8b 05 d9 18 11 00 	mov    0x1118d9(%rip),%rax        # 137528 <RecorderDataPtr>
   25c4f:	c6 40 07 74          	movb   $0x74,0x7(%rax)
   25c53:	48 8b 05 ce 18 11 00 	mov    0x1118ce(%rip),%rax        # 137528 <RecorderDataPtr>
   25c5a:	c6 40 06 73          	movb   $0x73,0x6(%rax)
   25c5e:	48 8b 05 c3 18 11 00 	mov    0x1118c3(%rip),%rax        # 137528 <RecorderDataPtr>
   25c65:	c6 40 05 72          	movb   $0x72,0x5(%rax)
   25c69:	48 8b 05 b8 18 11 00 	mov    0x1118b8(%rip),%rax        # 137528 <RecorderDataPtr>
   25c70:	c6 40 04 71          	movb   $0x71,0x4(%rax)
   25c74:	48 8b 05 ad 18 11 00 	mov    0x1118ad(%rip),%rax        # 137528 <RecorderDataPtr>
   25c7b:	c6 40 03 04          	movb   $0x4,0x3(%rax)
   25c7f:	48 8b 05 a2 18 11 00 	mov    0x1118a2(%rip),%rax        # 137528 <RecorderDataPtr>
   25c86:	c6 40 02 03          	movb   $0x3,0x2(%rax)
   25c8a:	48 8b 05 97 18 11 00 	mov    0x111897(%rip),%rax        # 137528 <RecorderDataPtr>
   25c91:	c6 40 01 02          	movb   $0x2,0x1(%rax)
   25c95:	48 8b 05 8c 18 11 00 	mov    0x11188c(%rip),%rax        # 137528 <RecorderDataPtr>
   25c9c:	c6 00 01             	movb   $0x1,(%rax)
   25c9f:	48 8b 05 f2 13 11 00 	mov    0x1113f2(%rip),%rax        # 137098 <traceErrorMessage>
   25ca6:	48 85 c0             	test   %rax,%rax
   25ca9:	74 3e                	je     25ce9 <prvTraceInitTraceData+0x2b8>
   25cab:	48 8b 05 e6 13 11 00 	mov    0x1113e6(%rip),%rax        # 137098 <traceErrorMessage>
   25cb2:	48 8b 15 6f 18 11 00 	mov    0x11186f(%rip),%rdx        # 137528 <RecorderDataPtr>
   25cb9:	48 8d 8a 58 c5 00 00 	lea    0xc558(%rdx),%rcx
   25cc0:	ba 50 00 00 00       	mov    $0x50,%edx
   25cc5:	48 89 c6             	mov    %rax,%rsi
   25cc8:	48 89 cf             	mov    %rcx,%rdi
   25ccb:	e8 83 04 00 00       	callq  26153 <prvStrncpy>
   25cd0:	48 8b 05 51 18 11 00 	mov    0x111851(%rip),%rax        # 137528 <RecorderDataPtr>
   25cd7:	c7 80 50 c5 00 00 01 	movl   $0x1,0xc550(%rax)
   25cde:	00 00 00 
   25ce1:	e8 8d df ff ff       	callq  23c73 <vTraceStop>
   25ce6:	eb 01                	jmp    25ce9 <prvTraceInitTraceData+0x2b8>
   25ce8:	90                   	nop
   25ce9:	5d                   	pop    %rbp
   25cea:	c3                   	retq   

0000000000025ceb <prvTraceNextFreeEventBufferSlot>:
   25ceb:	f3 0f 1e fa          	endbr64 
   25cef:	55                   	push   %rbp
   25cf0:	48 89 e5             	mov    %rsp,%rbp
   25cf3:	48 8b 05 2e 18 11 00 	mov    0x11182e(%rip),%rax        # 137528 <RecorderDataPtr>
   25cfa:	8b 40 30             	mov    0x30(%rax),%eax
   25cfd:	85 c0                	test   %eax,%eax
   25cff:	75 07                	jne    25d08 <prvTraceNextFreeEventBufferSlot+0x1d>
   25d01:	b8 00 00 00 00       	mov    $0x0,%eax
   25d06:	eb 47                	jmp    25d4f <prvTraceNextFreeEventBufferSlot+0x64>
   25d08:	48 8b 05 19 18 11 00 	mov    0x111819(%rip),%rax        # 137528 <RecorderDataPtr>
   25d0f:	8b 40 1c             	mov    0x1c(%rax),%eax
   25d12:	3d ff 7c 00 00       	cmp    $0x7cff,%eax
   25d17:	76 13                	jbe    25d2c <prvTraceNextFreeEventBufferSlot+0x41>
   25d19:	48 8d 3d 28 37 00 00 	lea    0x3728(%rip),%rdi        # 29448 <xInterruptGivePeriod+0x1658>
   25d20:	e8 85 06 00 00       	callq  263aa <prvTraceError>
   25d25:	b8 00 00 00 00       	mov    $0x0,%eax
   25d2a:	eb 23                	jmp    25d4f <prvTraceNextFreeEventBufferSlot+0x64>
   25d2c:	48 8b 15 f5 17 11 00 	mov    0x1117f5(%rip),%rdx        # 137528 <RecorderDataPtr>
   25d33:	48 8b 05 ee 17 11 00 	mov    0x1117ee(%rip),%rax        # 137528 <RecorderDataPtr>
   25d3a:	8b 40 1c             	mov    0x1c(%rax),%eax
   25d3d:	c1 e0 02             	shl    $0x2,%eax
   25d40:	89 c0                	mov    %eax,%eax
   25d42:	48 05 a0 c5 00 00    	add    $0xc5a0,%rax
   25d48:	48 01 d0             	add    %rdx,%rax
   25d4b:	48 83 c0 0c          	add    $0xc,%rax
   25d4f:	5d                   	pop    %rbp
   25d50:	c3                   	retq   

0000000000025d51 <uiIndexOfObject>:
   25d51:	f3 0f 1e fa          	endbr64 
   25d55:	55                   	push   %rbp
   25d56:	48 89 e5             	mov    %rsp,%rbp
   25d59:	48 83 ec 10          	sub    $0x10,%rsp
   25d5d:	89 fa                	mov    %edi,%edx
   25d5f:	89 f0                	mov    %esi,%eax
   25d61:	88 55 fc             	mov    %dl,-0x4(%rbp)
   25d64:	88 45 f8             	mov    %al,-0x8(%rbp)
   25d67:	80 7d f8 08          	cmpb   $0x8,-0x8(%rbp)
   25d6b:	76 16                	jbe    25d83 <uiIndexOfObject+0x32>
   25d6d:	48 8d 3d fc 36 00 00 	lea    0x36fc(%rip),%rdi        # 29470 <xInterruptGivePeriod+0x1680>
   25d74:	e8 31 06 00 00       	callq  263aa <prvTraceError>
   25d79:	b8 00 00 00 00       	mov    $0x0,%eax
   25d7e:	e9 9e 00 00 00       	jmpq   25e21 <uiIndexOfObject+0xd0>
   25d83:	80 7d fc 00          	cmpb   $0x0,-0x4(%rbp)
   25d87:	74 17                	je     25da0 <uiIndexOfObject+0x4f>
   25d89:	48 8b 15 98 17 11 00 	mov    0x111798(%rip),%rdx        # 137528 <RecorderDataPtr>
   25d90:	0f b6 45 f8          	movzbl -0x8(%rbp),%eax
   25d94:	48 98                	cltq   
   25d96:	0f b6 44 02 64       	movzbl 0x64(%rdx,%rax,1),%eax
   25d9b:	38 45 fc             	cmp    %al,-0x4(%rbp)
   25d9e:	76 13                	jbe    25db3 <uiIndexOfObject+0x62>
   25da0:	48 8d 3d 09 37 00 00 	lea    0x3709(%rip),%rdi        # 294b0 <xInterruptGivePeriod+0x16c0>
   25da7:	e8 fe 05 00 00       	callq  263aa <prvTraceError>
   25dac:	b8 00 00 00 00       	mov    $0x0,%eax
   25db1:	eb 6e                	jmp    25e21 <uiIndexOfObject+0xd0>
   25db3:	80 7d f8 08          	cmpb   $0x8,-0x8(%rbp)
   25db7:	77 57                	ja     25e10 <uiIndexOfObject+0xbf>
   25db9:	80 7d fc 00          	cmpb   $0x0,-0x4(%rbp)
   25dbd:	74 51                	je     25e10 <uiIndexOfObject+0xbf>
   25dbf:	48 8b 15 62 17 11 00 	mov    0x111762(%rip),%rdx        # 137528 <RecorderDataPtr>
   25dc6:	0f b6 45 f8          	movzbl -0x8(%rbp),%eax
   25dca:	48 98                	cltq   
   25dcc:	0f b6 44 02 64       	movzbl 0x64(%rdx,%rax,1),%eax
   25dd1:	38 45 fc             	cmp    %al,-0x4(%rbp)
   25dd4:	77 3a                	ja     25e10 <uiIndexOfObject+0xbf>
   25dd6:	48 8b 05 4b 17 11 00 	mov    0x11174b(%rip),%rax        # 137528 <RecorderDataPtr>
   25ddd:	0f b6 55 f8          	movzbl -0x8(%rbp),%edx
   25de1:	48 63 d2             	movslq %edx,%rdx
   25de4:	48 83 c2 38          	add    $0x38,%rdx
   25de8:	0f b7 4c 50 18       	movzwl 0x18(%rax,%rdx,2),%ecx
   25ded:	48 8b 15 34 17 11 00 	mov    0x111734(%rip),%rdx        # 137528 <RecorderDataPtr>
   25df4:	0f b6 45 f8          	movzbl -0x8(%rbp),%eax
   25df8:	48 98                	cltq   
   25dfa:	0f b6 44 02 7c       	movzbl 0x7c(%rdx,%rax,1),%eax
   25dff:	0f b6 c0             	movzbl %al,%eax
   25e02:	0f b6 55 fc          	movzbl -0x4(%rbp),%edx
   25e06:	83 ea 01             	sub    $0x1,%edx
   25e09:	0f af c2             	imul   %edx,%eax
   25e0c:	01 c8                	add    %ecx,%eax
   25e0e:	eb 11                	jmp    25e21 <uiIndexOfObject+0xd0>
   25e10:	48 8d 3d d9 36 00 00 	lea    0x36d9(%rip),%rdi        # 294f0 <xInterruptGivePeriod+0x1700>
   25e17:	e8 8e 05 00 00       	callq  263aa <prvTraceError>
   25e1c:	b8 00 00 00 00       	mov    $0x0,%eax
   25e21:	c9                   	leaveq 
   25e22:	c3                   	retq   

0000000000025e23 <prvTraceGetObjectHandle>:
   25e23:	f3 0f 1e fa          	endbr64 
   25e27:	55                   	push   %rbp
   25e28:	48 89 e5             	mov    %rsp,%rbp
   25e2b:	48 83 ec 20          	sub    $0x20,%rsp
   25e2f:	89 f8                	mov    %edi,%eax
   25e31:	88 45 ec             	mov    %al,-0x14(%rbp)
   25e34:	48 8b 05 ed 16 11 00 	mov    0x1116ed(%rip),%rax        # 137528 <RecorderDataPtr>
   25e3b:	48 85 c0             	test   %rax,%rax
   25e3e:	75 16                	jne    25e56 <prvTraceGetObjectHandle+0x33>
   25e40:	48 8d 3d 39 2a 00 00 	lea    0x2a39(%rip),%rdi        # 28880 <xInterruptGivePeriod+0xa90>
   25e47:	e8 5e 05 00 00       	callq  263aa <prvTraceError>
   25e4c:	b8 00 00 00 00       	mov    $0x0,%eax
   25e51:	e9 c2 01 00 00       	jmpq   26018 <prvTraceGetObjectHandle+0x1f5>
   25e56:	80 7d ec 08          	cmpb   $0x8,-0x14(%rbp)
   25e5a:	76 16                	jbe    25e72 <prvTraceGetObjectHandle+0x4f>
   25e5c:	48 8d 3d cd 36 00 00 	lea    0x36cd(%rip),%rdi        # 29530 <xInterruptGivePeriod+0x1740>
   25e63:	e8 42 05 00 00       	callq  263aa <prvTraceError>
   25e68:	b8 00 00 00 00       	mov    $0x0,%eax
   25e6d:	e9 a6 01 00 00       	jmpq   26018 <prvTraceGetObjectHandle+0x1f5>
   25e72:	e8 58 cf fe ff       	callq  12dcf <vPortEnterCritical>
   25e77:	8b 05 13 12 11 00    	mov    0x111213(%rip),%eax        # 137090 <recorder_busy>
   25e7d:	83 c0 01             	add    $0x1,%eax
   25e80:	89 05 0a 12 11 00    	mov    %eax,0x11120a(%rip)        # 137090 <recorder_busy>
   25e86:	0f b6 45 ec          	movzbl -0x14(%rbp),%eax
   25e8a:	48 98                	cltq   
   25e8c:	48 8d 14 00          	lea    (%rax,%rax,1),%rdx
   25e90:	48 8d 05 29 12 11 00 	lea    0x111229(%rip),%rax        # 1370c0 <objectHandleStacks>
   25e97:	0f b7 04 02          	movzwl (%rdx,%rax,1),%eax
   25e9b:	0f b7 c0             	movzwl %ax,%eax
   25e9e:	89 05 a0 16 11 00    	mov    %eax,0x1116a0(%rip)        # 137544 <indexOfHandle.3008>
   25ea4:	8b 05 9a 16 11 00    	mov    0x11169a(%rip),%eax        # 137544 <indexOfHandle.3008>
   25eaa:	48 98                	cltq   
   25eac:	48 8d 15 55 12 11 00 	lea    0x111255(%rip),%rdx        # 137108 <objectHandleStacks+0x48>
   25eb3:	0f b6 04 10          	movzbl (%rax,%rdx,1),%eax
   25eb7:	84 c0                	test   %al,%al
   25eb9:	75 3a                	jne    25ef5 <prvTraceGetObjectHandle+0xd2>
   25ebb:	8b 05 83 16 11 00    	mov    0x111683(%rip),%eax        # 137544 <indexOfHandle.3008>
   25ec1:	89 c1                	mov    %eax,%ecx
   25ec3:	0f b6 45 ec          	movzbl -0x14(%rbp),%eax
   25ec7:	48 98                	cltq   
   25ec9:	48 83 c0 08          	add    $0x8,%rax
   25ecd:	48 8d 14 00          	lea    (%rax,%rax,1),%rdx
   25ed1:	48 8d 05 ea 11 11 00 	lea    0x1111ea(%rip),%rax        # 1370c2 <objectHandleStacks+0x2>
   25ed8:	0f b7 04 02          	movzwl (%rdx,%rax,1),%eax
   25edc:	29 c1                	sub    %eax,%ecx
   25ede:	89 ca                	mov    %ecx,%edx
   25ee0:	8b 05 5e 16 11 00    	mov    0x11165e(%rip),%eax        # 137544 <indexOfHandle.3008>
   25ee6:	8d 4a 01             	lea    0x1(%rdx),%ecx
   25ee9:	48 98                	cltq   
   25eeb:	48 8d 15 16 12 11 00 	lea    0x111216(%rip),%rdx        # 137108 <objectHandleStacks+0x48>
   25ef2:	88 0c 10             	mov    %cl,(%rax,%rdx,1)
   25ef5:	8b 05 49 16 11 00    	mov    0x111649(%rip),%eax        # 137544 <indexOfHandle.3008>
   25efb:	48 98                	cltq   
   25efd:	48 8d 15 04 12 11 00 	lea    0x111204(%rip),%rdx        # 137108 <objectHandleStacks+0x48>
   25f04:	0f b6 04 10          	movzbl (%rax,%rdx,1),%eax
   25f08:	88 45 fb             	mov    %al,-0x5(%rbp)
   25f0b:	0f b6 45 ec          	movzbl -0x14(%rbp),%eax
   25f0f:	48 98                	cltq   
   25f11:	48 8d 14 00          	lea    (%rax,%rax,1),%rdx
   25f15:	48 8d 05 a4 11 11 00 	lea    0x1111a4(%rip),%rax        # 1370c0 <objectHandleStacks>
   25f1c:	0f b7 14 02          	movzwl (%rdx,%rax,1),%edx
   25f20:	0f b6 45 ec          	movzbl -0x14(%rbp),%eax
   25f24:	48 98                	cltq   
   25f26:	48 83 c0 10          	add    $0x10,%rax
   25f2a:	48 8d 0c 00          	lea    (%rax,%rax,1),%rcx
   25f2e:	48 8d 05 8f 11 11 00 	lea    0x11118f(%rip),%rax        # 1370c4 <objectHandleStacks+0x4>
   25f35:	0f b7 04 01          	movzwl (%rcx,%rax,1),%eax
   25f39:	66 39 c2             	cmp    %ax,%dx
   25f3c:	76 1c                	jbe    25f5a <prvTraceGetObjectHandle+0x137>
   25f3e:	0f b6 45 ec          	movzbl -0x14(%rbp),%eax
   25f42:	89 c7                	mov    %eax,%edi
   25f44:	e8 86 da ff ff       	callq  239cf <pszTraceGetErrorNotEnoughHandles>
   25f49:	48 89 c7             	mov    %rax,%rdi
   25f4c:	e8 59 04 00 00       	callq  263aa <prvTraceError>
   25f51:	c6 45 fb 00          	movb   $0x0,-0x5(%rbp)
   25f55:	e9 a6 00 00 00       	jmpq   26000 <prvTraceGetObjectHandle+0x1dd>
   25f5a:	0f b6 45 ec          	movzbl -0x14(%rbp),%eax
   25f5e:	48 63 d0             	movslq %eax,%rdx
   25f61:	48 8d 0c 12          	lea    (%rdx,%rdx,1),%rcx
   25f65:	48 8d 15 54 11 11 00 	lea    0x111154(%rip),%rdx        # 1370c0 <objectHandleStacks>
   25f6c:	0f b7 14 11          	movzwl (%rcx,%rdx,1),%edx
   25f70:	8d 4a 01             	lea    0x1(%rdx),%ecx
   25f73:	48 98                	cltq   
   25f75:	48 8d 14 00          	lea    (%rax,%rax,1),%rdx
   25f79:	48 8d 05 40 11 11 00 	lea    0x111140(%rip),%rax        # 1370c0 <objectHandleStacks>
   25f80:	66 89 0c 02          	mov    %cx,(%rdx,%rax,1)
   25f84:	0f b6 45 ec          	movzbl -0x14(%rbp),%eax
   25f88:	48 98                	cltq   
   25f8a:	48 8d 14 00          	lea    (%rax,%rax,1),%rdx
   25f8e:	48 8d 05 2b 11 11 00 	lea    0x11112b(%rip),%rax        # 1370c0 <objectHandleStacks>
   25f95:	0f b7 04 02          	movzwl (%rdx,%rax,1),%eax
   25f99:	0f b7 d0             	movzwl %ax,%edx
   25f9c:	0f b6 45 ec          	movzbl -0x14(%rbp),%eax
   25fa0:	48 98                	cltq   
   25fa2:	48 83 c0 08          	add    $0x8,%rax
   25fa6:	48 8d 0c 00          	lea    (%rax,%rax,1),%rcx
   25faa:	48 8d 05 11 11 11 00 	lea    0x111111(%rip),%rax        # 1370c2 <objectHandleStacks+0x2>
   25fb1:	0f b7 04 01          	movzwl (%rcx,%rax,1),%eax
   25fb5:	0f b7 c0             	movzwl %ax,%eax
   25fb8:	29 c2                	sub    %eax,%edx
   25fba:	89 d0                	mov    %edx,%eax
   25fbc:	89 45 fc             	mov    %eax,-0x4(%rbp)
   25fbf:	0f b6 45 ec          	movzbl -0x14(%rbp),%eax
   25fc3:	48 98                	cltq   
   25fc5:	48 83 c0 18          	add    $0x18,%rax
   25fc9:	48 8d 14 00          	lea    (%rax,%rax,1),%rdx
   25fcd:	48 8d 05 f2 10 11 00 	lea    0x1110f2(%rip),%rax        # 1370c6 <objectHandleStacks+0x6>
   25fd4:	0f b7 04 02          	movzwl (%rdx,%rax,1),%eax
   25fd8:	0f b7 c0             	movzwl %ax,%eax
   25fdb:	39 45 fc             	cmp    %eax,-0x4(%rbp)
   25fde:	7e 20                	jle    26000 <prvTraceGetObjectHandle+0x1dd>
   25fe0:	8b 45 fc             	mov    -0x4(%rbp),%eax
   25fe3:	0f b6 55 ec          	movzbl -0x14(%rbp),%edx
   25fe7:	0f b6 c0             	movzbl %al,%eax
   25fea:	48 63 d2             	movslq %edx,%rdx
   25fed:	48 83 c2 18          	add    $0x18,%rdx
   25ff1:	48 8d 0c 12          	lea    (%rdx,%rdx,1),%rcx
   25ff5:	48 8d 15 ca 10 11 00 	lea    0x1110ca(%rip),%rdx        # 1370c6 <objectHandleStacks+0x6>
   25ffc:	66 89 04 11          	mov    %ax,(%rcx,%rdx,1)
   26000:	8b 05 8a 10 11 00    	mov    0x11108a(%rip),%eax        # 137090 <recorder_busy>
   26006:	83 e8 01             	sub    $0x1,%eax
   26009:	89 05 81 10 11 00    	mov    %eax,0x111081(%rip)        # 137090 <recorder_busy>
   2600f:	e8 e9 cd fe ff       	callq  12dfd <vPortExitCritical>
   26014:	0f b6 45 fb          	movzbl -0x5(%rbp),%eax
   26018:	c9                   	leaveq 
   26019:	c3                   	retq   

000000000002601a <prvTraceFreeObjectHandle>:
   2601a:	f3 0f 1e fa          	endbr64 
   2601e:	55                   	push   %rbp
   2601f:	48 89 e5             	mov    %rsp,%rbp
   26022:	48 83 ec 20          	sub    $0x20,%rsp
   26026:	89 fa                	mov    %edi,%edx
   26028:	89 f0                	mov    %esi,%eax
   2602a:	88 55 ec             	mov    %dl,-0x14(%rbp)
   2602d:	88 45 e8             	mov    %al,-0x18(%rbp)
   26030:	80 7d ec 08          	cmpb   $0x8,-0x14(%rbp)
   26034:	76 11                	jbe    26047 <prvTraceFreeObjectHandle+0x2d>
   26036:	48 8d 3d 3b 35 00 00 	lea    0x353b(%rip),%rdi        # 29578 <xInterruptGivePeriod+0x1788>
   2603d:	e8 68 03 00 00       	callq  263aa <prvTraceError>
   26042:	e9 c7 00 00 00       	jmpq   2610e <prvTraceFreeObjectHandle+0xf4>
   26047:	80 7d e8 00          	cmpb   $0x0,-0x18(%rbp)
   2604b:	74 17                	je     26064 <prvTraceFreeObjectHandle+0x4a>
   2604d:	48 8b 15 d4 14 11 00 	mov    0x1114d4(%rip),%rdx        # 137528 <RecorderDataPtr>
   26054:	0f b6 45 ec          	movzbl -0x14(%rbp),%eax
   26058:	48 98                	cltq   
   2605a:	0f b6 44 02 64       	movzbl 0x64(%rdx,%rax,1),%eax
   2605f:	38 45 e8             	cmp    %al,-0x18(%rbp)
   26062:	76 11                	jbe    26075 <prvTraceFreeObjectHandle+0x5b>
   26064:	48 8d 3d 55 35 00 00 	lea    0x3555(%rip),%rdi        # 295c0 <xInterruptGivePeriod+0x17d0>
   2606b:	e8 3a 03 00 00       	callq  263aa <prvTraceError>
   26070:	e9 99 00 00 00       	jmpq   2610e <prvTraceFreeObjectHandle+0xf4>
   26075:	0f b6 45 ec          	movzbl -0x14(%rbp),%eax
   26079:	48 98                	cltq   
   2607b:	48 8d 14 00          	lea    (%rax,%rax,1),%rdx
   2607f:	48 8d 05 3a 10 11 00 	lea    0x11103a(%rip),%rax        # 1370c0 <objectHandleStacks>
   26086:	0f b7 14 02          	movzwl (%rdx,%rax,1),%edx
   2608a:	0f b6 45 ec          	movzbl -0x14(%rbp),%eax
   2608e:	48 98                	cltq   
   26090:	48 83 c0 08          	add    $0x8,%rax
   26094:	48 8d 0c 00          	lea    (%rax,%rax,1),%rcx
   26098:	48 8d 05 23 10 11 00 	lea    0x111023(%rip),%rax        # 1370c2 <objectHandleStacks+0x2>
   2609f:	0f b7 04 01          	movzwl (%rcx,%rax,1),%eax
   260a3:	66 39 c2             	cmp    %ax,%dx
   260a6:	77 0e                	ja     260b6 <prvTraceFreeObjectHandle+0x9c>
   260a8:	48 8d 3d 59 35 00 00 	lea    0x3559(%rip),%rdi        # 29608 <xInterruptGivePeriod+0x1818>
   260af:	e8 f6 02 00 00       	callq  263aa <prvTraceError>
   260b4:	eb 58                	jmp    2610e <prvTraceFreeObjectHandle+0xf4>
   260b6:	0f b6 45 ec          	movzbl -0x14(%rbp),%eax
   260ba:	48 63 d0             	movslq %eax,%rdx
   260bd:	48 8d 0c 12          	lea    (%rdx,%rdx,1),%rcx
   260c1:	48 8d 15 f8 0f 11 00 	lea    0x110ff8(%rip),%rdx        # 1370c0 <objectHandleStacks>
   260c8:	0f b7 14 11          	movzwl (%rcx,%rdx,1),%edx
   260cc:	8d 4a ff             	lea    -0x1(%rdx),%ecx
   260cf:	48 98                	cltq   
   260d1:	48 8d 14 00          	lea    (%rax,%rax,1),%rdx
   260d5:	48 8d 05 e4 0f 11 00 	lea    0x110fe4(%rip),%rax        # 1370c0 <objectHandleStacks>
   260dc:	66 89 0c 02          	mov    %cx,(%rdx,%rax,1)
   260e0:	0f b6 45 ec          	movzbl -0x14(%rbp),%eax
   260e4:	48 98                	cltq   
   260e6:	48 8d 14 00          	lea    (%rax,%rax,1),%rdx
   260ea:	48 8d 05 cf 0f 11 00 	lea    0x110fcf(%rip),%rax        # 1370c0 <objectHandleStacks>
   260f1:	0f b7 04 02          	movzwl (%rdx,%rax,1),%eax
   260f5:	0f b7 c0             	movzwl %ax,%eax
   260f8:	89 45 fc             	mov    %eax,-0x4(%rbp)
   260fb:	8b 45 fc             	mov    -0x4(%rbp),%eax
   260fe:	48 98                	cltq   
   26100:	48 8d 0d 01 10 11 00 	lea    0x111001(%rip),%rcx        # 137108 <objectHandleStacks+0x48>
   26107:	0f b6 55 e8          	movzbl -0x18(%rbp),%edx
   2610b:	88 14 08             	mov    %dl,(%rax,%rcx,1)
   2610e:	c9                   	leaveq 
   2610f:	c3                   	retq   

0000000000026110 <prvMarkObjectAsUsed>:
   26110:	f3 0f 1e fa          	endbr64 
   26114:	55                   	push   %rbp
   26115:	48 89 e5             	mov    %rsp,%rbp
   26118:	48 83 ec 20          	sub    $0x20,%rsp
   2611c:	89 fa                	mov    %edi,%edx
   2611e:	89 f0                	mov    %esi,%eax
   26120:	88 55 ec             	mov    %dl,-0x14(%rbp)
   26123:	88 45 e8             	mov    %al,-0x18(%rbp)
   26126:	0f b6 55 ec          	movzbl -0x14(%rbp),%edx
   2612a:	0f b6 45 e8          	movzbl -0x18(%rbp),%eax
   2612e:	89 d6                	mov    %edx,%esi
   26130:	89 c7                	mov    %eax,%edi
   26132:	e8 1a fc ff ff       	callq  25d51 <uiIndexOfObject>
   26137:	66 89 45 fe          	mov    %ax,-0x2(%rbp)
   2613b:	48 8b 15 e6 13 11 00 	mov    0x1113e6(%rip),%rdx        # 137528 <RecorderDataPtr>
   26142:	0f b7 45 fe          	movzwl -0x2(%rbp),%eax
   26146:	48 98                	cltq   
   26148:	c6 84 02 9c 00 00 00 	movb   $0x1,0x9c(%rdx,%rax,1)
   2614f:	01 
   26150:	90                   	nop
   26151:	c9                   	leaveq 
   26152:	c3                   	retq   

0000000000026153 <prvStrncpy>:
   26153:	f3 0f 1e fa          	endbr64 
   26157:	55                   	push   %rbp
   26158:	48 89 e5             	mov    %rsp,%rbp
   2615b:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
   2615f:	48 89 75 e0          	mov    %rsi,-0x20(%rbp)
   26163:	89 55 dc             	mov    %edx,-0x24(%rbp)
   26166:	c7 45 fc 00 00 00 00 	movl   $0x0,-0x4(%rbp)
   2616d:	eb 2e                	jmp    2619d <prvStrncpy+0x4a>
   2616f:	8b 55 fc             	mov    -0x4(%rbp),%edx
   26172:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
   26176:	48 01 d0             	add    %rdx,%rax
   26179:	8b 4d fc             	mov    -0x4(%rbp),%ecx
   2617c:	48 8b 55 e8          	mov    -0x18(%rbp),%rdx
   26180:	48 01 ca             	add    %rcx,%rdx
   26183:	0f b6 00             	movzbl (%rax),%eax
   26186:	88 02                	mov    %al,(%rdx)
   26188:	8b 55 fc             	mov    -0x4(%rbp),%edx
   2618b:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
   2618f:	48 01 d0             	add    %rdx,%rax
   26192:	0f b6 00             	movzbl (%rax),%eax
   26195:	84 c0                	test   %al,%al
   26197:	74 0e                	je     261a7 <prvStrncpy+0x54>
   26199:	83 45 fc 01          	addl   $0x1,-0x4(%rbp)
   2619d:	8b 45 fc             	mov    -0x4(%rbp),%eax
   261a0:	3b 45 dc             	cmp    -0x24(%rbp),%eax
   261a3:	72 ca                	jb     2616f <prvStrncpy+0x1c>
   261a5:	eb 01                	jmp    261a8 <prvStrncpy+0x55>
   261a7:	90                   	nop
   261a8:	90                   	nop
   261a9:	5d                   	pop    %rbp
   261aa:	c3                   	retq   

00000000000261ab <prvTraceSetObjectName>:
   261ab:	f3 0f 1e fa          	endbr64 
   261af:	55                   	push   %rbp
   261b0:	48 89 e5             	mov    %rsp,%rbp
   261b3:	48 83 ec 10          	sub    $0x10,%rsp
   261b7:	89 f9                	mov    %edi,%ecx
   261b9:	89 f0                	mov    %esi,%eax
   261bb:	48 89 55 f0          	mov    %rdx,-0x10(%rbp)
   261bf:	89 ca                	mov    %ecx,%edx
   261c1:	88 55 fc             	mov    %dl,-0x4(%rbp)
   261c4:	88 45 f8             	mov    %al,-0x8(%rbp)
   261c7:	48 83 7d f0 00       	cmpq   $0x0,-0x10(%rbp)
   261cc:	75 11                	jne    261df <prvTraceSetObjectName+0x34>
   261ce:	48 8d 3d 63 34 00 00 	lea    0x3463(%rip),%rdi        # 29638 <xInterruptGivePeriod+0x1848>
   261d5:	e8 d0 01 00 00       	callq  263aa <prvTraceError>
   261da:	e9 c4 00 00 00       	jmpq   262a3 <prvTraceSetObjectName+0xf8>
   261df:	80 7d fc 08          	cmpb   $0x8,-0x4(%rbp)
   261e3:	76 11                	jbe    261f6 <prvTraceSetObjectName+0x4b>
   261e5:	48 8d 3d 84 34 00 00 	lea    0x3484(%rip),%rdi        # 29670 <xInterruptGivePeriod+0x1880>
   261ec:	e8 b9 01 00 00       	callq  263aa <prvTraceError>
   261f1:	e9 ad 00 00 00       	jmpq   262a3 <prvTraceSetObjectName+0xf8>
   261f6:	80 7d f8 00          	cmpb   $0x0,-0x8(%rbp)
   261fa:	75 11                	jne    2620d <prvTraceSetObjectName+0x62>
   261fc:	48 8d 3d 9d 34 00 00 	lea    0x349d(%rip),%rdi        # 296a0 <xInterruptGivePeriod+0x18b0>
   26203:	e8 a2 01 00 00       	callq  263aa <prvTraceError>
   26208:	e9 96 00 00 00       	jmpq   262a3 <prvTraceSetObjectName+0xf8>
   2620d:	48 8b 15 14 13 11 00 	mov    0x111314(%rip),%rdx        # 137528 <RecorderDataPtr>
   26214:	0f b6 45 fc          	movzbl -0x4(%rbp),%eax
   26218:	48 98                	cltq   
   2621a:	0f b6 44 02 64       	movzbl 0x64(%rdx,%rax,1),%eax
   2621f:	38 45 f8             	cmp    %al,-0x8(%rbp)
   26222:	76 15                	jbe    26239 <prvTraceSetObjectName+0x8e>
   26224:	0f b6 45 fc          	movzbl -0x4(%rbp),%eax
   26228:	89 c7                	mov    %eax,%edi
   2622a:	e8 a0 d7 ff ff       	callq  239cf <pszTraceGetErrorNotEnoughHandles>
   2622f:	48 89 c7             	mov    %rax,%rdi
   26232:	e8 73 01 00 00       	callq  263aa <prvTraceError>
   26237:	eb 6a                	jmp    262a3 <prvTraceSetObjectName+0xf8>
   26239:	0f b6 55 fc          	movzbl -0x4(%rbp),%edx
   2623d:	0f b6 45 f8          	movzbl -0x8(%rbp),%eax
   26241:	89 d6                	mov    %edx,%esi
   26243:	89 c7                	mov    %eax,%edi
   26245:	e8 07 fb ff ff       	callq  25d51 <uiIndexOfObject>
   2624a:	66 89 05 f7 12 11 00 	mov    %ax,0x1112f7(%rip)        # 137548 <idx.3034>
   26251:	48 8b 05 40 0e 11 00 	mov    0x110e40(%rip),%rax        # 137098 <traceErrorMessage>
   26258:	48 85 c0             	test   %rax,%rax
   2625b:	75 46                	jne    262a3 <prvTraceSetObjectName+0xf8>
   2625d:	48 8b 15 c4 12 11 00 	mov    0x1112c4(%rip),%rdx        # 137528 <RecorderDataPtr>
   26264:	0f b6 45 fc          	movzbl -0x4(%rbp),%eax
   26268:	48 98                	cltq   
   2626a:	0f b6 44 02 70       	movzbl 0x70(%rdx,%rax,1),%eax
   2626f:	0f b6 d0             	movzbl %al,%edx
   26272:	48 8b 05 af 12 11 00 	mov    0x1112af(%rip),%rax        # 137528 <RecorderDataPtr>
   26279:	0f b7 0d c8 12 11 00 	movzwl 0x1112c8(%rip),%ecx        # 137548 <idx.3034>
   26280:	0f b7 c9             	movzwl %cx,%ecx
   26283:	48 63 c9             	movslq %ecx,%rcx
   26286:	48 81 c1 90 00 00 00 	add    $0x90,%rcx
   2628d:	48 01 c8             	add    %rcx,%rax
   26290:	48 8d 48 0c          	lea    0xc(%rax),%rcx
   26294:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
   26298:	48 89 c6             	mov    %rax,%rsi
   2629b:	48 89 cf             	mov    %rcx,%rdi
   2629e:	e8 b0 fe ff ff       	callq  26153 <prvStrncpy>
   262a3:	c9                   	leaveq 
   262a4:	c3                   	retq   

00000000000262a5 <prvTraceOpenSymbol>:
   262a5:	f3 0f 1e fa          	endbr64 
   262a9:	55                   	push   %rbp
   262aa:	48 89 e5             	mov    %rsp,%rbp
   262ad:	48 83 ec 20          	sub    $0x20,%rsp
   262b1:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
   262b5:	89 f0                	mov    %esi,%eax
   262b7:	66 89 45 e4          	mov    %ax,-0x1c(%rbp)
   262bb:	64 48 8b 04 25 28 00 	mov    %fs:0x28,%rax
   262c2:	00 00 
   262c4:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
   262c8:	31 c0                	xor    %eax,%eax
   262ca:	c6 45 f4 00          	movb   $0x0,-0xc(%rbp)
   262ce:	c6 45 f5 00          	movb   $0x0,-0xb(%rbp)
   262d2:	48 83 7d e8 00       	cmpq   $0x0,-0x18(%rbp)
   262d7:	75 16                	jne    262ef <prvTraceOpenSymbol+0x4a>
   262d9:	48 8d 3d f0 33 00 00 	lea    0x33f0(%rip),%rdi        # 296d0 <xInterruptGivePeriod+0x18e0>
   262e0:	e8 c5 00 00 00       	callq  263aa <prvTraceError>
   262e5:	b8 00 00 00 00       	mov    $0x0,%eax
   262ea:	e9 8e 00 00 00       	jmpq   2637d <prvTraceOpenSymbol+0xd8>
   262ef:	48 8d 55 f4          	lea    -0xc(%rbp),%rdx
   262f3:	48 8d 4d f5          	lea    -0xb(%rbp),%rcx
   262f7:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
   262fb:	48 89 ce             	mov    %rcx,%rsi
   262fe:	48 89 c7             	mov    %rax,%rdi
   26301:	e8 86 09 00 00       	callq  26c8c <prvTraceGetChecksum>
   26306:	e8 c4 ca fe ff       	callq  12dcf <vPortEnterCritical>
   2630b:	8b 05 7f 0d 11 00    	mov    0x110d7f(%rip),%eax        # 137090 <recorder_busy>
   26311:	83 c0 01             	add    $0x1,%eax
   26314:	89 05 76 0d 11 00    	mov    %eax,0x110d76(%rip)        # 137090 <recorder_busy>
   2631a:	0f b7 4d e4          	movzwl -0x1c(%rbp),%ecx
   2631e:	0f b6 45 f4          	movzbl -0xc(%rbp),%eax
   26322:	0f b6 d0             	movzbl %al,%edx
   26325:	0f b6 45 f5          	movzbl -0xb(%rbp),%eax
   26329:	0f b6 f0             	movzbl %al,%esi
   2632c:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
   26330:	48 89 c7             	mov    %rax,%rdi
   26333:	e8 b8 05 00 00       	callq  268f0 <prvTraceLookupSymbolTableEntry>
   26338:	66 89 45 f6          	mov    %ax,-0xa(%rbp)
   2633c:	66 83 7d f6 00       	cmpw   $0x0,-0xa(%rbp)
   26341:	75 22                	jne    26365 <prvTraceOpenSymbol+0xc0>
   26343:	0f b7 4d e4          	movzwl -0x1c(%rbp),%ecx
   26347:	0f b6 45 f4          	movzbl -0xc(%rbp),%eax
   2634b:	0f b6 d0             	movzbl %al,%edx
   2634e:	0f b6 45 f5          	movzbl -0xb(%rbp),%eax
   26352:	0f b6 f0             	movzbl %al,%esi
   26355:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
   26359:	48 89 c7             	mov    %rax,%rdi
   2635c:	e8 02 07 00 00       	callq  26a63 <prvTraceCreateSymbolTableEntry>
   26361:	66 89 45 f6          	mov    %ax,-0xa(%rbp)
   26365:	8b 05 25 0d 11 00    	mov    0x110d25(%rip),%eax        # 137090 <recorder_busy>
   2636b:	83 e8 01             	sub    $0x1,%eax
   2636e:	89 05 1c 0d 11 00    	mov    %eax,0x110d1c(%rip)        # 137090 <recorder_busy>
   26374:	e8 84 ca fe ff       	callq  12dfd <vPortExitCritical>
   26379:	0f b7 45 f6          	movzwl -0xa(%rbp),%eax
   2637d:	48 8b 7d f8          	mov    -0x8(%rbp),%rdi
   26381:	64 48 33 3c 25 28 00 	xor    %fs:0x28,%rdi
   26388:	00 00 
   2638a:	74 05                	je     26391 <prvTraceOpenSymbol+0xec>
   2638c:	e8 3f c1 fd ff       	callq  24d0 <__stack_chk_fail@plt>
   26391:	c9                   	leaveq 
   26392:	c3                   	retq   

0000000000026393 <vTraceSetFrequency>:
   26393:	f3 0f 1e fa          	endbr64 
   26397:	55                   	push   %rbp
   26398:	48 89 e5             	mov    %rsp,%rbp
   2639b:	89 7d fc             	mov    %edi,-0x4(%rbp)
   2639e:	8b 45 fc             	mov    -0x4(%rbp),%eax
   263a1:	89 05 ed 0c 11 00    	mov    %eax,0x110ced(%rip)        # 137094 <timestampFrequency>
   263a7:	90                   	nop
   263a8:	5d                   	pop    %rbp
   263a9:	c3                   	retq   

00000000000263aa <prvTraceError>:
   263aa:	f3 0f 1e fa          	endbr64 
   263ae:	55                   	push   %rbp
   263af:	48 89 e5             	mov    %rsp,%rbp
   263b2:	48 83 ec 10          	sub    $0x10,%rsp
   263b6:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   263ba:	48 8b 05 67 11 11 00 	mov    0x111167(%rip),%rax        # 137528 <RecorderDataPtr>
   263c1:	48 85 c0             	test   %rax,%rax
   263c4:	74 05                	je     263cb <prvTraceError+0x21>
   263c6:	e8 a8 d8 ff ff       	callq  23c73 <vTraceStop>
   263cb:	48 8b 05 c6 0c 11 00 	mov    0x110cc6(%rip),%rax        # 137098 <traceErrorMessage>
   263d2:	48 85 c0             	test   %rax,%rax
   263d5:	75 4d                	jne    26424 <prvTraceError+0x7a>
   263d7:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   263db:	48 89 05 b6 0c 11 00 	mov    %rax,0x110cb6(%rip)        # 137098 <traceErrorMessage>
   263e2:	48 8b 05 3f 11 11 00 	mov    0x11113f(%rip),%rax        # 137528 <RecorderDataPtr>
   263e9:	48 85 c0             	test   %rax,%rax
   263ec:	74 36                	je     26424 <prvTraceError+0x7a>
   263ee:	48 8b 05 a3 0c 11 00 	mov    0x110ca3(%rip),%rax        # 137098 <traceErrorMessage>
   263f5:	48 8b 15 2c 11 11 00 	mov    0x11112c(%rip),%rdx        # 137528 <RecorderDataPtr>
   263fc:	48 8d 8a 58 c5 00 00 	lea    0xc558(%rdx),%rcx
   26403:	ba 50 00 00 00       	mov    $0x50,%edx
   26408:	48 89 c6             	mov    %rax,%rsi
   2640b:	48 89 cf             	mov    %rcx,%rdi
   2640e:	e8 40 fd ff ff       	callq  26153 <prvStrncpy>
   26413:	48 8b 05 0e 11 11 00 	mov    0x11110e(%rip),%rax        # 137528 <RecorderDataPtr>
   2641a:	c7 80 50 c5 00 00 01 	movl   $0x1,0xc550(%rax)
   26421:	00 00 00 
   26424:	90                   	nop
   26425:	c9                   	leaveq 
   26426:	c3                   	retq   

0000000000026427 <vTraceSetFilterMask>:
   26427:	f3 0f 1e fa          	endbr64 
   2642b:	55                   	push   %rbp
   2642c:	48 89 e5             	mov    %rsp,%rbp
   2642f:	89 f8                	mov    %edi,%eax
   26431:	66 89 45 fc          	mov    %ax,-0x4(%rbp)
   26435:	0f b7 45 fc          	movzwl -0x4(%rbp),%eax
   26439:	66 89 05 9c ac 00 00 	mov    %ax,0xac9c(%rip)        # 310dc <CurrentFilterMask>
   26440:	90                   	nop
   26441:	5d                   	pop    %rbp
   26442:	c3                   	retq   

0000000000026443 <vTraceSetFilterGroup>:
   26443:	f3 0f 1e fa          	endbr64 
   26447:	55                   	push   %rbp
   26448:	48 89 e5             	mov    %rsp,%rbp
   2644b:	89 f8                	mov    %edi,%eax
   2644d:	66 89 45 fc          	mov    %ax,-0x4(%rbp)
   26451:	0f b7 45 fc          	movzwl -0x4(%rbp),%eax
   26455:	66 89 05 82 ac 00 00 	mov    %ax,0xac82(%rip)        # 310de <CurrentFilterGroup>
   2645c:	90                   	nop
   2645d:	5d                   	pop    %rbp
   2645e:	c3                   	retq   

000000000002645f <prvCheckDataToBeOverwrittenForMultiEntryEvents>:
   2645f:	f3 0f 1e fa          	endbr64 
   26463:	55                   	push   %rbp
   26464:	48 89 e5             	mov    %rsp,%rbp
   26467:	48 83 ec 20          	sub    $0x20,%rsp
   2646b:	89 f8                	mov    %edi,%eax
   2646d:	88 45 ec             	mov    %al,-0x14(%rbp)
   26470:	c7 45 f8 00 00 00 00 	movl   $0x0,-0x8(%rbp)
   26477:	c7 45 fc 00 00 00 00 	movl   $0x0,-0x4(%rbp)
   2647e:	80 7d ec 00          	cmpb   $0x0,-0x14(%rbp)
   26482:	0f 85 8c 01 00 00    	jne    26614 <prvCheckDataToBeOverwrittenForMultiEntryEvents+0x1b5>
   26488:	48 8d 3d 71 32 00 00 	lea    0x3271(%rip),%rdi        # 29700 <xInterruptGivePeriod+0x1910>
   2648f:	e8 16 ff ff ff       	callq  263aa <prvTraceError>
   26494:	e9 88 01 00 00       	jmpq   26621 <prvCheckDataToBeOverwrittenForMultiEntryEvents+0x1c2>
   26499:	48 8b 05 88 10 11 00 	mov    0x111088(%rip),%rax        # 137528 <RecorderDataPtr>
   264a0:	8b 50 1c             	mov    0x1c(%rax),%edx
   264a3:	8b 45 f8             	mov    -0x8(%rbp),%eax
   264a6:	01 d0                	add    %edx,%eax
   264a8:	89 45 fc             	mov    %eax,-0x4(%rbp)
   264ab:	48 8b 05 76 10 11 00 	mov    0x111076(%rip),%rax        # 137528 <RecorderDataPtr>
   264b2:	8b 55 fc             	mov    -0x4(%rbp),%edx
   264b5:	c1 e2 02             	shl    $0x2,%edx
   264b8:	89 d2                	mov    %edx,%edx
   264ba:	0f b6 84 10 ac c5 00 	movzbl 0xc5ac(%rax,%rdx,1),%eax
   264c1:	00 
   264c2:	3c 98                	cmp    $0x98,%al
   264c4:	0f 86 91 00 00 00    	jbe    2655b <prvCheckDataToBeOverwrittenForMultiEntryEvents+0xfc>
   264ca:	48 8b 05 57 10 11 00 	mov    0x111057(%rip),%rax        # 137528 <RecorderDataPtr>
   264d1:	8b 55 fc             	mov    -0x4(%rbp),%edx
   264d4:	c1 e2 02             	shl    $0x2,%edx
   264d7:	89 d2                	mov    %edx,%edx
   264d9:	0f b6 84 10 ac c5 00 	movzbl 0xc5ac(%rax,%rdx,1),%eax
   264e0:	00 
   264e1:	3c a7                	cmp    $0xa7,%al
   264e3:	77 76                	ja     2655b <prvCheckDataToBeOverwrittenForMultiEntryEvents+0xfc>
   264e5:	48 8b 05 3c 10 11 00 	mov    0x11103c(%rip),%rax        # 137528 <RecorderDataPtr>
   264ec:	8b 55 fc             	mov    -0x4(%rbp),%edx
   264ef:	c1 e2 02             	shl    $0x2,%edx
   264f2:	89 d2                	mov    %edx,%edx
   264f4:	0f b6 84 10 ac c5 00 	movzbl 0xc5ac(%rax,%rdx,1),%eax
   264fb:	00 
   264fc:	83 c0 68             	add    $0x68,%eax
   264ff:	88 45 f7             	mov    %al,-0x9(%rbp)
   26502:	0f b6 55 f7          	movzbl -0x9(%rbp),%edx
   26506:	8b 45 fc             	mov    -0x4(%rbp),%eax
   26509:	01 c2                	add    %eax,%edx
   2650b:	48 8b 05 16 10 11 00 	mov    0x111016(%rip),%rax        # 137528 <RecorderDataPtr>
   26512:	8b 40 18             	mov    0x18(%rax),%eax
   26515:	39 c2                	cmp    %eax,%edx
   26517:	0f 83 f2 00 00 00    	jae    2660f <prvCheckDataToBeOverwrittenForMultiEntryEvents+0x1b0>
   2651d:	0f b6 45 f7          	movzbl -0x9(%rbp),%eax
   26521:	83 c0 01             	add    $0x1,%eax
   26524:	c1 e0 02             	shl    $0x2,%eax
   26527:	48 98                	cltq   
   26529:	48 8b 15 f8 0f 11 00 	mov    0x110ff8(%rip),%rdx        # 137528 <RecorderDataPtr>
   26530:	8b 4d fc             	mov    -0x4(%rbp),%ecx
   26533:	c1 e1 02             	shl    $0x2,%ecx
   26536:	89 c9                	mov    %ecx,%ecx
   26538:	48 81 c1 a0 c5 00 00 	add    $0xc5a0,%rcx
   2653f:	48 01 ca             	add    %rcx,%rdx
   26542:	48 8d 4a 0c          	lea    0xc(%rdx),%rcx
   26546:	48 89 c2             	mov    %rax,%rdx
   26549:	be 00 00 00 00       	mov    $0x0,%esi
   2654e:	48 89 cf             	mov    %rcx,%rdi
   26551:	e8 ba bf fd ff       	callq  2510 <memset@plt>
   26556:	e9 b4 00 00 00       	jmpq   2660f <prvCheckDataToBeOverwrittenForMultiEntryEvents+0x1b0>
   2655b:	48 8b 05 c6 0f 11 00 	mov    0x110fc6(%rip),%rax        # 137528 <RecorderDataPtr>
   26562:	8b 55 fc             	mov    -0x4(%rbp),%edx
   26565:	c1 e2 02             	shl    $0x2,%edx
   26568:	89 d2                	mov    %edx,%edx
   2656a:	0f b6 84 10 ac c5 00 	movzbl 0xc5ac(%rax,%rdx,1),%eax
   26571:	00 
   26572:	3c 01                	cmp    $0x1,%al
   26574:	0f 85 96 00 00 00    	jne    26610 <prvCheckDataToBeOverwrittenForMultiEntryEvents+0x1b1>
   2657a:	8b 45 fc             	mov    -0x4(%rbp),%eax
   2657d:	8d 50 01             	lea    0x1(%rax),%edx
   26580:	48 8b 05 a1 0f 11 00 	mov    0x110fa1(%rip),%rax        # 137528 <RecorderDataPtr>
   26587:	8b 40 18             	mov    0x18(%rax),%eax
   2658a:	39 c2                	cmp    %eax,%edx
   2658c:	73 31                	jae    265bf <prvCheckDataToBeOverwrittenForMultiEntryEvents+0x160>
   2658e:	48 8b 05 93 0f 11 00 	mov    0x110f93(%rip),%rax        # 137528 <RecorderDataPtr>
   26595:	8b 55 fc             	mov    -0x4(%rbp),%edx
   26598:	c1 e2 02             	shl    $0x2,%edx
   2659b:	89 d2                	mov    %edx,%edx
   2659d:	48 81 c2 a0 c5 00 00 	add    $0xc5a0,%rdx
   265a4:	48 01 d0             	add    %rdx,%rax
   265a7:	48 83 c0 0c          	add    $0xc,%rax
   265ab:	ba 08 00 00 00       	mov    $0x8,%edx
   265b0:	be 00 00 00 00       	mov    $0x0,%esi
   265b5:	48 89 c7             	mov    %rax,%rdi
   265b8:	e8 53 bf fd ff       	callq  2510 <memset@plt>
   265bd:	eb 51                	jmp    26610 <prvCheckDataToBeOverwrittenForMultiEntryEvents+0x1b1>
   265bf:	48 8b 05 62 0f 11 00 	mov    0x110f62(%rip),%rax        # 137528 <RecorderDataPtr>
   265c6:	48 05 ac c5 00 00    	add    $0xc5ac,%rax
   265cc:	ba 04 00 00 00       	mov    $0x4,%edx
   265d1:	be 00 00 00 00       	mov    $0x0,%esi
   265d6:	48 89 c7             	mov    %rax,%rdi
   265d9:	e8 32 bf fd ff       	callq  2510 <memset@plt>
   265de:	48 8b 05 43 0f 11 00 	mov    0x110f43(%rip),%rax        # 137528 <RecorderDataPtr>
   265e5:	8b 55 fc             	mov    -0x4(%rbp),%edx
   265e8:	c1 e2 02             	shl    $0x2,%edx
   265eb:	89 d2                	mov    %edx,%edx
   265ed:	48 81 c2 a0 c5 00 00 	add    $0xc5a0,%rdx
   265f4:	48 01 d0             	add    %rdx,%rax
   265f7:	48 83 c0 0c          	add    $0xc,%rax
   265fb:	ba 04 00 00 00       	mov    $0x4,%edx
   26600:	be 00 00 00 00       	mov    $0x0,%esi
   26605:	48 89 c7             	mov    %rax,%rdi
   26608:	e8 03 bf fd ff       	callq  2510 <memset@plt>
   2660d:	eb 01                	jmp    26610 <prvCheckDataToBeOverwrittenForMultiEntryEvents+0x1b1>
   2660f:	90                   	nop
   26610:	83 45 f8 01          	addl   $0x1,-0x8(%rbp)
   26614:	0f b6 45 ec          	movzbl -0x14(%rbp),%eax
   26618:	39 45 f8             	cmp    %eax,-0x8(%rbp)
   2661b:	0f 82 78 fe ff ff    	jb     26499 <prvCheckDataToBeOverwrittenForMultiEntryEvents+0x3a>
   26621:	c9                   	leaveq 
   26622:	c3                   	retq   

0000000000026623 <prvTraceUpdateCounters>:
   26623:	f3 0f 1e fa          	endbr64 
   26627:	55                   	push   %rbp
   26628:	48 89 e5             	mov    %rsp,%rbp
   2662b:	48 8b 05 f6 0e 11 00 	mov    0x110ef6(%rip),%rax        # 137528 <RecorderDataPtr>
   26632:	8b 40 30             	mov    0x30(%rax),%eax
   26635:	85 c0                	test   %eax,%eax
   26637:	74 59                	je     26692 <prvTraceUpdateCounters+0x6f>
   26639:	48 8b 05 e8 0e 11 00 	mov    0x110ee8(%rip),%rax        # 137528 <RecorderDataPtr>
   26640:	8b 50 14             	mov    0x14(%rax),%edx
   26643:	83 c2 01             	add    $0x1,%edx
   26646:	89 50 14             	mov    %edx,0x14(%rax)
   26649:	48 8b 05 d8 0e 11 00 	mov    0x110ed8(%rip),%rax        # 137528 <RecorderDataPtr>
   26650:	8b 50 1c             	mov    0x1c(%rax),%edx
   26653:	83 c2 01             	add    $0x1,%edx
   26656:	89 50 1c             	mov    %edx,0x1c(%rax)
   26659:	48 8b 05 c8 0e 11 00 	mov    0x110ec8(%rip),%rax        # 137528 <RecorderDataPtr>
   26660:	8b 40 1c             	mov    0x1c(%rax),%eax
   26663:	3d ff 7c 00 00       	cmp    $0x7cff,%eax
   26668:	76 1c                	jbe    26686 <prvTraceUpdateCounters+0x63>
   2666a:	48 8b 05 b7 0e 11 00 	mov    0x110eb7(%rip),%rax        # 137528 <RecorderDataPtr>
   26671:	c7 40 20 01 00 00 00 	movl   $0x1,0x20(%rax)
   26678:	48 8b 05 a9 0e 11 00 	mov    0x110ea9(%rip),%rax        # 137528 <RecorderDataPtr>
   2667f:	c7 40 1c 00 00 00 00 	movl   $0x0,0x1c(%rax)
   26686:	bf 01 00 00 00       	mov    $0x1,%edi
   2668b:	e8 cf fd ff ff       	callq  2645f <prvCheckDataToBeOverwrittenForMultiEntryEvents>
   26690:	eb 01                	jmp    26693 <prvTraceUpdateCounters+0x70>
   26692:	90                   	nop
   26693:	5d                   	pop    %rbp
   26694:	c3                   	retq   

0000000000026695 <prvTraceGetDTS>:
   26695:	f3 0f 1e fa          	endbr64 
   26699:	55                   	push   %rbp
   2669a:	48 89 e5             	mov    %rsp,%rbp
   2669d:	53                   	push   %rbx
   2669e:	48 83 ec 38          	sub    $0x38,%rsp
   266a2:	89 f8                	mov    %edi,%eax
   266a4:	66 89 45 cc          	mov    %ax,-0x34(%rbp)
   266a8:	64 48 8b 04 25 28 00 	mov    %fs:0x28,%rax
   266af:	00 00 
   266b1:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
   266b5:	31 c0                	xor    %eax,%eax
   266b7:	48 c7 45 e0 00 00 00 	movq   $0x0,-0x20(%rbp)
   266be:	00 
   266bf:	c7 45 dc 00 00 00 00 	movl   $0x0,-0x24(%rbp)
   266c6:	c7 45 d8 00 00 00 00 	movl   $0x0,-0x28(%rbp)
   266cd:	66 81 7d cc ff 00    	cmpw   $0xff,-0x34(%rbp)
   266d3:	74 1d                	je     266f2 <prvTraceGetDTS+0x5d>
   266d5:	66 83 7d cc ff       	cmpw   $0xffff,-0x34(%rbp)
   266da:	74 16                	je     266f2 <prvTraceGetDTS+0x5d>
   266dc:	48 8d 3d 75 30 00 00 	lea    0x3075(%rip),%rdi        # 29758 <xInterruptGivePeriod+0x1968>
   266e3:	e8 c2 fc ff ff       	callq  263aa <prvTraceError>
   266e8:	b8 00 00 00 00       	mov    $0x0,%eax
   266ed:	e9 e3 01 00 00       	jmpq   268d5 <prvTraceGetDTS+0x240>
   266f2:	48 8b 05 2f 0e 11 00 	mov    0x110e2f(%rip),%rax        # 137528 <RecorderDataPtr>
   266f9:	8b 40 24             	mov    0x24(%rax),%eax
   266fc:	85 c0                	test   %eax,%eax
   266fe:	75 3c                	jne    2673c <prvTraceGetDTS+0xa7>
   26700:	8b 05 8e 09 11 00    	mov    0x11098e(%rip),%eax        # 137094 <timestampFrequency>
   26706:	85 c0                	test   %eax,%eax
   26708:	74 12                	je     2671c <prvTraceGetDTS+0x87>
   2670a:	48 8b 05 17 0e 11 00 	mov    0x110e17(%rip),%rax        # 137528 <RecorderDataPtr>
   26711:	8b 15 7d 09 11 00    	mov    0x11097d(%rip),%edx        # 137094 <timestampFrequency>
   26717:	89 50 24             	mov    %edx,0x24(%rax)
   2671a:	eb 20                	jmp    2673c <prvTraceGetDTS+0xa7>
   2671c:	8b 05 da cf 13 00    	mov    0x13cfda(%rip),%eax        # 1636fc <init_hwtc_count>
   26722:	89 c3                	mov    %eax,%ebx
   26724:	e8 ef eb fd ff       	callq  5318 <ulGetRunTimeCounterValue>
   26729:	48 39 c3             	cmp    %rax,%rbx
   2672c:	74 0e                	je     2673c <prvTraceGetDTS+0xa7>
   2672e:	48 8b 05 f3 0d 11 00 	mov    0x110df3(%rip),%rax        # 137528 <RecorderDataPtr>
   26735:	c7 40 24 a0 86 01 00 	movl   $0x186a0,0x24(%rax)
   2673c:	48 8d 45 d8          	lea    -0x28(%rbp),%rax
   26740:	48 89 c7             	mov    %rax,%rdi
   26743:	e8 f0 05 00 00       	callq  26d38 <prvTracePortGetTimeStamp>
   26748:	8b 55 d8             	mov    -0x28(%rbp),%edx
   2674b:	8b 05 fb 0d 11 00    	mov    0x110dfb(%rip),%eax        # 13754c <old_timestamp.3069>
   26751:	29 c2                	sub    %eax,%edx
   26753:	89 d0                	mov    %edx,%eax
   26755:	89 45 dc             	mov    %eax,-0x24(%rbp)
   26758:	8b 45 d8             	mov    -0x28(%rbp),%eax
   2675b:	89 05 eb 0d 11 00    	mov    %eax,0x110deb(%rip)        # 13754c <old_timestamp.3069>
   26761:	48 8b 05 c0 0d 11 00 	mov    0x110dc0(%rip),%rax        # 137528 <RecorderDataPtr>
   26768:	8b 40 24             	mov    0x24(%rax),%eax
   2676b:	85 c0                	test   %eax,%eax
   2676d:	0f 84 cc 00 00 00    	je     2683f <prvTraceGetDTS+0x1aa>
   26773:	48 8b 05 ae 0d 11 00 	mov    0x110dae(%rip),%rax        # 137528 <RecorderDataPtr>
   2677a:	8b 40 24             	mov    0x24(%rax),%eax
   2677d:	39 45 dc             	cmp    %eax,-0x24(%rbp)
   26780:	76 58                	jbe    267da <prvTraceGetDTS+0x145>
   26782:	48 8b 05 9f 0d 11 00 	mov    0x110d9f(%rip),%rax        # 137528 <RecorderDataPtr>
   26789:	8b 48 2c             	mov    0x2c(%rax),%ecx
   2678c:	48 8b 05 95 0d 11 00 	mov    0x110d95(%rip),%rax        # 137528 <RecorderDataPtr>
   26793:	8b 58 24             	mov    0x24(%rax),%ebx
   26796:	8b 45 dc             	mov    -0x24(%rbp),%eax
   26799:	ba 00 00 00 00       	mov    $0x0,%edx
   2679e:	f7 f3                	div    %ebx
   267a0:	89 c2                	mov    %eax,%edx
   267a2:	48 8b 05 7f 0d 11 00 	mov    0x110d7f(%rip),%rax        # 137528 <RecorderDataPtr>
   267a9:	01 ca                	add    %ecx,%edx
   267ab:	89 50 2c             	mov    %edx,0x2c(%rax)
   267ae:	48 8b 05 73 0d 11 00 	mov    0x110d73(%rip),%rax        # 137528 <RecorderDataPtr>
   267b5:	8b 48 28             	mov    0x28(%rax),%ecx
   267b8:	48 8b 05 69 0d 11 00 	mov    0x110d69(%rip),%rax        # 137528 <RecorderDataPtr>
   267bf:	8b 70 24             	mov    0x24(%rax),%esi
   267c2:	8b 45 dc             	mov    -0x24(%rbp),%eax
   267c5:	ba 00 00 00 00       	mov    $0x0,%edx
   267ca:	f7 f6                	div    %esi
   267cc:	48 8b 05 55 0d 11 00 	mov    0x110d55(%rip),%rax        # 137528 <RecorderDataPtr>
   267d3:	01 ca                	add    %ecx,%edx
   267d5:	89 50 28             	mov    %edx,0x28(%rax)
   267d8:	eb 19                	jmp    267f3 <prvTraceGetDTS+0x15e>
   267da:	48 8b 05 47 0d 11 00 	mov    0x110d47(%rip),%rax        # 137528 <RecorderDataPtr>
   267e1:	8b 48 28             	mov    0x28(%rax),%ecx
   267e4:	48 8b 05 3d 0d 11 00 	mov    0x110d3d(%rip),%rax        # 137528 <RecorderDataPtr>
   267eb:	8b 55 dc             	mov    -0x24(%rbp),%edx
   267ee:	01 ca                	add    %ecx,%edx
   267f0:	89 50 28             	mov    %edx,0x28(%rax)
   267f3:	48 8b 05 2e 0d 11 00 	mov    0x110d2e(%rip),%rax        # 137528 <RecorderDataPtr>
   267fa:	8b 50 28             	mov    0x28(%rax),%edx
   267fd:	48 8b 05 24 0d 11 00 	mov    0x110d24(%rip),%rax        # 137528 <RecorderDataPtr>
   26804:	8b 40 24             	mov    0x24(%rax),%eax
   26807:	39 c2                	cmp    %eax,%edx
   26809:	72 41                	jb     2684c <prvTraceGetDTS+0x1b7>
   2680b:	48 8b 05 16 0d 11 00 	mov    0x110d16(%rip),%rax        # 137528 <RecorderDataPtr>
   26812:	8b 50 2c             	mov    0x2c(%rax),%edx
   26815:	83 c2 01             	add    $0x1,%edx
   26818:	89 50 2c             	mov    %edx,0x2c(%rax)
   2681b:	48 8b 05 06 0d 11 00 	mov    0x110d06(%rip),%rax        # 137528 <RecorderDataPtr>
   26822:	8b 48 28             	mov    0x28(%rax),%ecx
   26825:	48 8b 05 fc 0c 11 00 	mov    0x110cfc(%rip),%rax        # 137528 <RecorderDataPtr>
   2682c:	8b 50 24             	mov    0x24(%rax),%edx
   2682f:	48 8b 05 f2 0c 11 00 	mov    0x110cf2(%rip),%rax        # 137528 <RecorderDataPtr>
   26836:	29 d1                	sub    %edx,%ecx
   26838:	89 ca                	mov    %ecx,%edx
   2683a:	89 50 28             	mov    %edx,0x28(%rax)
   2683d:	eb 0d                	jmp    2684c <prvTraceGetDTS+0x1b7>
   2683f:	48 8b 05 e2 0c 11 00 	mov    0x110ce2(%rip),%rax        # 137528 <RecorderDataPtr>
   26846:	8b 55 d8             	mov    -0x28(%rbp),%edx
   26849:	89 50 28             	mov    %edx,0x28(%rax)
   2684c:	0f b7 45 cc          	movzwl -0x34(%rbp),%eax
   26850:	39 45 dc             	cmp    %eax,-0x24(%rbp)
   26853:	76 79                	jbe    268ce <prvTraceGetDTS+0x239>
   26855:	e8 91 f4 ff ff       	callq  25ceb <prvTraceNextFreeEventBufferSlot>
   2685a:	48 89 45 e0          	mov    %rax,-0x20(%rbp)
   2685e:	48 83 7d e0 00       	cmpq   $0x0,-0x20(%rbp)
   26863:	74 69                	je     268ce <prvTraceGetDTS+0x239>
   26865:	66 83 7d cc ff       	cmpw   $0xffff,-0x34(%rbp)
   2686a:	75 21                	jne    2688d <prvTraceGetDTS+0x1f8>
   2686c:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
   26870:	c6 00 a9             	movb   $0xa9,(%rax)
   26873:	8b 45 dc             	mov    -0x24(%rbp),%eax
   26876:	c1 e8 10             	shr    $0x10,%eax
   26879:	89 c2                	mov    %eax,%edx
   2687b:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
   2687f:	66 89 50 02          	mov    %dx,0x2(%rax)
   26883:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
   26887:	c6 40 01 00          	movb   $0x0,0x1(%rax)
   2688b:	eb 3c                	jmp    268c9 <prvTraceGetDTS+0x234>
   2688d:	66 81 7d cc ff 00    	cmpw   $0xff,-0x34(%rbp)
   26893:	75 28                	jne    268bd <prvTraceGetDTS+0x228>
   26895:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
   26899:	c6 00 a8             	movb   $0xa8,(%rax)
   2689c:	8b 45 dc             	mov    -0x24(%rbp),%eax
   2689f:	c1 e8 08             	shr    $0x8,%eax
   268a2:	89 c2                	mov    %eax,%edx
   268a4:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
   268a8:	66 89 50 02          	mov    %dx,0x2(%rax)
   268ac:	8b 45 dc             	mov    -0x24(%rbp),%eax
   268af:	c1 e8 18             	shr    $0x18,%eax
   268b2:	89 c2                	mov    %eax,%edx
   268b4:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
   268b8:	88 50 01             	mov    %dl,0x1(%rax)
   268bb:	eb 0c                	jmp    268c9 <prvTraceGetDTS+0x234>
   268bd:	48 8d 3d d4 2e 00 00 	lea    0x2ed4(%rip),%rdi        # 29798 <xInterruptGivePeriod+0x19a8>
   268c4:	e8 e1 fa ff ff       	callq  263aa <prvTraceError>
   268c9:	e8 55 fd ff ff       	callq  26623 <prvTraceUpdateCounters>
   268ce:	8b 45 dc             	mov    -0x24(%rbp),%eax
   268d1:	66 23 45 cc          	and    -0x34(%rbp),%ax
   268d5:	48 8b 75 e8          	mov    -0x18(%rbp),%rsi
   268d9:	64 48 33 34 25 28 00 	xor    %fs:0x28,%rsi
   268e0:	00 00 
   268e2:	74 05                	je     268e9 <prvTraceGetDTS+0x254>
   268e4:	e8 e7 bb fd ff       	callq  24d0 <__stack_chk_fail@plt>
   268e9:	48 83 c4 38          	add    $0x38,%rsp
   268ed:	5b                   	pop    %rbx
   268ee:	5d                   	pop    %rbp
   268ef:	c3                   	retq   

00000000000268f0 <prvTraceLookupSymbolTableEntry>:
   268f0:	f3 0f 1e fa          	endbr64 
   268f4:	55                   	push   %rbp
   268f5:	48 89 e5             	mov    %rsp,%rbp
   268f8:	48 83 ec 30          	sub    $0x30,%rsp
   268fc:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
   26900:	89 c8                	mov    %ecx,%eax
   26902:	89 f1                	mov    %esi,%ecx
   26904:	88 4d e4             	mov    %cl,-0x1c(%rbp)
   26907:	88 55 e0             	mov    %dl,-0x20(%rbp)
   2690a:	66 89 45 dc          	mov    %ax,-0x24(%rbp)
   2690e:	48 8b 05 13 0c 11 00 	mov    0x110c13(%rip),%rax        # 137528 <RecorderDataPtr>
   26915:	0f b6 55 e4          	movzbl -0x1c(%rbp),%edx
   26919:	48 63 d2             	movslq %edx,%rdx
   2691c:	48 81 c2 60 62 00 00 	add    $0x6260,%rdx
   26923:	0f b7 44 50 0c       	movzwl 0xc(%rax,%rdx,2),%eax
   26928:	66 89 45 fe          	mov    %ax,-0x2(%rbp)
   2692c:	48 83 7d e8 00       	cmpq   $0x0,-0x18(%rbp)
   26931:	75 16                	jne    26949 <prvTraceLookupSymbolTableEntry+0x59>
   26933:	48 8d 3d 86 2e 00 00 	lea    0x2e86(%rip),%rdi        # 297c0 <xInterruptGivePeriod+0x19d0>
   2693a:	e8 6b fa ff ff       	callq  263aa <prvTraceError>
   2693f:	b8 00 00 00 00       	mov    $0x0,%eax
   26944:	e9 18 01 00 00       	jmpq   26a61 <prvTraceLookupSymbolTableEntry+0x171>
   26949:	80 7d e0 00          	cmpb   $0x0,-0x20(%rbp)
   2694d:	0f 85 fc 00 00 00    	jne    26a4f <prvTraceLookupSymbolTableEntry+0x15f>
   26953:	48 8d 3d a6 2e 00 00 	lea    0x2ea6(%rip),%rdi        # 29800 <xInterruptGivePeriod+0x1a10>
   2695a:	e8 4b fa ff ff       	callq  263aa <prvTraceError>
   2695f:	b8 00 00 00 00       	mov    $0x0,%eax
   26964:	e9 f8 00 00 00       	jmpq   26a61 <prvTraceLookupSymbolTableEntry+0x171>
   26969:	48 8b 15 b8 0b 11 00 	mov    0x110bb8(%rip),%rdx        # 137528 <RecorderDataPtr>
   26970:	0f b7 45 fe          	movzwl -0x2(%rbp),%eax
   26974:	83 c0 02             	add    $0x2,%eax
   26977:	48 98                	cltq   
   26979:	0f b6 84 02 cc 47 00 	movzbl 0x47cc(%rdx,%rax,1),%eax
   26980:	00 
   26981:	0f b6 d0             	movzbl %al,%edx
   26984:	0f b7 45 dc          	movzwl -0x24(%rbp),%eax
   26988:	0f b6 c0             	movzbl %al,%eax
   2698b:	39 c2                	cmp    %eax,%edx
   2698d:	0f 85 80 00 00 00    	jne    26a13 <prvTraceLookupSymbolTableEntry+0x123>
   26993:	48 8b 15 8e 0b 11 00 	mov    0x110b8e(%rip),%rdx        # 137528 <RecorderDataPtr>
   2699a:	0f b7 45 fe          	movzwl -0x2(%rbp),%eax
   2699e:	83 c0 03             	add    $0x3,%eax
   269a1:	48 98                	cltq   
   269a3:	0f b6 84 02 cc 47 00 	movzbl 0x47cc(%rdx,%rax,1),%eax
   269aa:	00 
   269ab:	0f b6 c0             	movzbl %al,%eax
   269ae:	0f b7 55 dc          	movzwl -0x24(%rbp),%edx
   269b2:	66 c1 ea 08          	shr    $0x8,%dx
   269b6:	66 39 d0             	cmp    %dx,%ax
   269b9:	75 58                	jne    26a13 <prvTraceLookupSymbolTableEntry+0x123>
   269bb:	48 8b 15 66 0b 11 00 	mov    0x110b66(%rip),%rdx        # 137528 <RecorderDataPtr>
   269c2:	0f b7 45 fe          	movzwl -0x2(%rbp),%eax
   269c6:	8d 48 04             	lea    0x4(%rax),%ecx
   269c9:	0f b6 45 e0          	movzbl -0x20(%rbp),%eax
   269cd:	01 c8                	add    %ecx,%eax
   269cf:	48 98                	cltq   
   269d1:	0f b6 84 02 cc 47 00 	movzbl 0x47cc(%rdx,%rax,1),%eax
   269d8:	00 
   269d9:	84 c0                	test   %al,%al
   269db:	75 36                	jne    26a13 <prvTraceLookupSymbolTableEntry+0x123>
   269dd:	0f b6 55 e0          	movzbl -0x20(%rbp),%edx
   269e1:	48 8b 05 40 0b 11 00 	mov    0x110b40(%rip),%rax        # 137528 <RecorderDataPtr>
   269e8:	0f b7 4d fe          	movzwl -0x2(%rbp),%ecx
   269ec:	83 c1 04             	add    $0x4,%ecx
   269ef:	48 63 c9             	movslq %ecx,%rcx
   269f2:	48 81 c1 c0 47 00 00 	add    $0x47c0,%rcx
   269f9:	48 01 c8             	add    %rcx,%rax
   269fc:	48 8d 48 0c          	lea    0xc(%rax),%rcx
   26a00:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
   26a04:	48 89 c6             	mov    %rax,%rsi
   26a07:	48 89 cf             	mov    %rcx,%rdi
   26a0a:	e8 01 ba fd ff       	callq  2410 <strncmp@plt>
   26a0f:	85 c0                	test   %eax,%eax
   26a11:	74 49                	je     26a5c <prvTraceLookupSymbolTableEntry+0x16c>
   26a13:	48 8b 15 0e 0b 11 00 	mov    0x110b0e(%rip),%rdx        # 137528 <RecorderDataPtr>
   26a1a:	0f b7 45 fe          	movzwl -0x2(%rbp),%eax
   26a1e:	48 98                	cltq   
   26a20:	0f b6 84 02 cc 47 00 	movzbl 0x47cc(%rdx,%rax,1),%eax
   26a27:	00 
   26a28:	0f b6 c8             	movzbl %al,%ecx
   26a2b:	48 8b 15 f6 0a 11 00 	mov    0x110af6(%rip),%rdx        # 137528 <RecorderDataPtr>
   26a32:	0f b7 45 fe          	movzwl -0x2(%rbp),%eax
   26a36:	83 c0 01             	add    $0x1,%eax
   26a39:	48 98                	cltq   
   26a3b:	0f b6 84 02 cc 47 00 	movzbl 0x47cc(%rdx,%rax,1),%eax
   26a42:	00 
   26a43:	0f b6 c0             	movzbl %al,%eax
   26a46:	c1 e0 08             	shl    $0x8,%eax
   26a49:	01 c8                	add    %ecx,%eax
   26a4b:	66 89 45 fe          	mov    %ax,-0x2(%rbp)
   26a4f:	66 83 7d fe 00       	cmpw   $0x0,-0x2(%rbp)
   26a54:	0f 85 0f ff ff ff    	jne    26969 <prvTraceLookupSymbolTableEntry+0x79>
   26a5a:	eb 01                	jmp    26a5d <prvTraceLookupSymbolTableEntry+0x16d>
   26a5c:	90                   	nop
   26a5d:	0f b7 45 fe          	movzwl -0x2(%rbp),%eax
   26a61:	c9                   	leaveq 
   26a62:	c3                   	retq   

0000000000026a63 <prvTraceCreateSymbolTableEntry>:
   26a63:	f3 0f 1e fa          	endbr64 
   26a67:	55                   	push   %rbp
   26a68:	48 89 e5             	mov    %rsp,%rbp
   26a6b:	48 83 ec 30          	sub    $0x30,%rsp
   26a6f:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
   26a73:	89 c8                	mov    %ecx,%eax
   26a75:	89 f1                	mov    %esi,%ecx
   26a77:	88 4d e4             	mov    %cl,-0x1c(%rbp)
   26a7a:	88 55 e0             	mov    %dl,-0x20(%rbp)
   26a7d:	66 89 45 dc          	mov    %ax,-0x24(%rbp)
   26a81:	66 c7 45 fe 00 00    	movw   $0x0,-0x2(%rbp)
   26a87:	48 83 7d e8 00       	cmpq   $0x0,-0x18(%rbp)
   26a8c:	75 16                	jne    26aa4 <prvTraceCreateSymbolTableEntry+0x41>
   26a8e:	48 8d 3d a3 2d 00 00 	lea    0x2da3(%rip),%rdi        # 29838 <xInterruptGivePeriod+0x1a48>
   26a95:	e8 10 f9 ff ff       	callq  263aa <prvTraceError>
   26a9a:	b8 00 00 00 00       	mov    $0x0,%eax
   26a9f:	e9 e6 01 00 00       	jmpq   26c8a <prvTraceCreateSymbolTableEntry+0x227>
   26aa4:	80 7d e0 00          	cmpb   $0x0,-0x20(%rbp)
   26aa8:	75 16                	jne    26ac0 <prvTraceCreateSymbolTableEntry+0x5d>
   26aaa:	48 8d 3d c7 2d 00 00 	lea    0x2dc7(%rip),%rdi        # 29878 <xInterruptGivePeriod+0x1a88>
   26ab1:	e8 f4 f8 ff ff       	callq  263aa <prvTraceError>
   26ab6:	b8 00 00 00 00       	mov    $0x0,%eax
   26abb:	e9 ca 01 00 00       	jmpq   26c8a <prvTraceCreateSymbolTableEntry+0x227>
   26ac0:	48 8b 05 61 0a 11 00 	mov    0x110a61(%rip),%rax        # 137528 <RecorderDataPtr>
   26ac7:	8b 90 c8 47 00 00    	mov    0x47c8(%rax),%edx
   26acd:	0f b6 45 e0          	movzbl -0x20(%rbp),%eax
   26ad1:	01 d0                	add    %edx,%eax
   26ad3:	83 c0 04             	add    $0x4,%eax
   26ad6:	3d ff 7c 00 00       	cmp    $0x7cff,%eax
   26adb:	76 17                	jbe    26af4 <prvTraceCreateSymbolTableEntry+0x91>
   26add:	48 8d 3d cc 2d 00 00 	lea    0x2dcc(%rip),%rdi        # 298b0 <xInterruptGivePeriod+0x1ac0>
   26ae4:	e8 c1 f8 ff ff       	callq  263aa <prvTraceError>
   26ae9:	66 c7 45 fe 00 00    	movw   $0x0,-0x2(%rbp)
   26aef:	e9 92 01 00 00       	jmpq   26c86 <prvTraceCreateSymbolTableEntry+0x223>
   26af4:	48 8b 05 2d 0a 11 00 	mov    0x110a2d(%rip),%rax        # 137528 <RecorderDataPtr>
   26afb:	0f b6 55 e4          	movzbl -0x1c(%rbp),%edx
   26aff:	48 63 d2             	movslq %edx,%rdx
   26b02:	48 81 c2 60 62 00 00 	add    $0x6260,%rdx
   26b09:	0f b7 4c 50 0c       	movzwl 0xc(%rax,%rdx,2),%ecx
   26b0e:	48 8b 05 13 0a 11 00 	mov    0x110a13(%rip),%rax        # 137528 <RecorderDataPtr>
   26b15:	48 8b 15 0c 0a 11 00 	mov    0x110a0c(%rip),%rdx        # 137528 <RecorderDataPtr>
   26b1c:	8b 92 c8 47 00 00    	mov    0x47c8(%rdx),%edx
   26b22:	89 d2                	mov    %edx,%edx
   26b24:	88 8c 10 cc 47 00 00 	mov    %cl,0x47cc(%rax,%rdx,1)
   26b2b:	48 8b 05 f6 09 11 00 	mov    0x1109f6(%rip),%rax        # 137528 <RecorderDataPtr>
   26b32:	0f b6 55 e4          	movzbl -0x1c(%rbp),%edx
   26b36:	48 63 d2             	movslq %edx,%rdx
   26b39:	48 81 c2 60 62 00 00 	add    $0x6260,%rdx
   26b40:	0f b7 44 50 0c       	movzwl 0xc(%rax,%rdx,2),%eax
   26b45:	66 c1 e8 08          	shr    $0x8,%ax
   26b49:	89 c1                	mov    %eax,%ecx
   26b4b:	48 8b 05 d6 09 11 00 	mov    0x1109d6(%rip),%rax        # 137528 <RecorderDataPtr>
   26b52:	48 8b 15 cf 09 11 00 	mov    0x1109cf(%rip),%rdx        # 137528 <RecorderDataPtr>
   26b59:	8b 92 c8 47 00 00    	mov    0x47c8(%rdx),%edx
   26b5f:	83 c2 01             	add    $0x1,%edx
   26b62:	89 d2                	mov    %edx,%edx
   26b64:	88 8c 10 cc 47 00 00 	mov    %cl,0x47cc(%rax,%rdx,1)
   26b6b:	48 8b 05 b6 09 11 00 	mov    0x1109b6(%rip),%rax        # 137528 <RecorderDataPtr>
   26b72:	48 8b 15 af 09 11 00 	mov    0x1109af(%rip),%rdx        # 137528 <RecorderDataPtr>
   26b79:	8b 92 c8 47 00 00    	mov    0x47c8(%rdx),%edx
   26b7f:	8d 72 02             	lea    0x2(%rdx),%esi
   26b82:	0f b7 55 dc          	movzwl -0x24(%rbp),%edx
   26b86:	89 d1                	mov    %edx,%ecx
   26b88:	89 f2                	mov    %esi,%edx
   26b8a:	88 8c 10 cc 47 00 00 	mov    %cl,0x47cc(%rax,%rdx,1)
   26b91:	0f b7 45 dc          	movzwl -0x24(%rbp),%eax
   26b95:	66 c1 e8 08          	shr    $0x8,%ax
   26b99:	89 c1                	mov    %eax,%ecx
   26b9b:	48 8b 05 86 09 11 00 	mov    0x110986(%rip),%rax        # 137528 <RecorderDataPtr>
   26ba2:	48 8b 15 7f 09 11 00 	mov    0x11097f(%rip),%rdx        # 137528 <RecorderDataPtr>
   26ba9:	8b 92 c8 47 00 00    	mov    0x47c8(%rdx),%edx
   26baf:	83 c2 03             	add    $0x3,%edx
   26bb2:	89 d2                	mov    %edx,%edx
   26bb4:	88 8c 10 cc 47 00 00 	mov    %cl,0x47cc(%rax,%rdx,1)
   26bbb:	0f b6 55 e0          	movzbl -0x20(%rbp),%edx
   26bbf:	48 8b 0d 62 09 11 00 	mov    0x110962(%rip),%rcx        # 137528 <RecorderDataPtr>
   26bc6:	48 8b 05 5b 09 11 00 	mov    0x11095b(%rip),%rax        # 137528 <RecorderDataPtr>
   26bcd:	8b 80 c8 47 00 00    	mov    0x47c8(%rax),%eax
   26bd3:	83 c0 04             	add    $0x4,%eax
   26bd6:	89 c0                	mov    %eax,%eax
   26bd8:	48 05 c0 47 00 00    	add    $0x47c0,%rax
   26bde:	48 01 c8             	add    %rcx,%rax
   26be1:	48 8d 48 0c          	lea    0xc(%rax),%rcx
   26be5:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
   26be9:	48 89 c6             	mov    %rax,%rsi
   26bec:	48 89 cf             	mov    %rcx,%rdi
   26bef:	e8 5f f5 ff ff       	callq  26153 <prvStrncpy>
   26bf4:	48 8b 05 2d 09 11 00 	mov    0x11092d(%rip),%rax        # 137528 <RecorderDataPtr>
   26bfb:	48 8b 15 26 09 11 00 	mov    0x110926(%rip),%rdx        # 137528 <RecorderDataPtr>
   26c02:	8b 8a c8 47 00 00    	mov    0x47c8(%rdx),%ecx
   26c08:	0f b6 55 e0          	movzbl -0x20(%rbp),%edx
   26c0c:	01 ca                	add    %ecx,%edx
   26c0e:	83 c2 04             	add    $0x4,%edx
   26c11:	89 d2                	mov    %edx,%edx
   26c13:	c6 84 10 cc 47 00 00 	movb   $0x0,0x47cc(%rax,%rdx,1)
   26c1a:	00 
   26c1b:	48 8b 05 06 09 11 00 	mov    0x110906(%rip),%rax        # 137528 <RecorderDataPtr>
   26c22:	8b 88 c8 47 00 00    	mov    0x47c8(%rax),%ecx
   26c28:	48 8b 05 f9 08 11 00 	mov    0x1108f9(%rip),%rax        # 137528 <RecorderDataPtr>
   26c2f:	0f b6 55 e4          	movzbl -0x1c(%rbp),%edx
   26c33:	48 63 d2             	movslq %edx,%rdx
   26c36:	48 81 c2 60 62 00 00 	add    $0x6260,%rdx
   26c3d:	66 89 4c 50 0c       	mov    %cx,0xc(%rax,%rdx,2)
   26c42:	48 8b 05 df 08 11 00 	mov    0x1108df(%rip),%rax        # 137528 <RecorderDataPtr>
   26c49:	8b 90 c8 47 00 00    	mov    0x47c8(%rax),%edx
   26c4f:	0f b6 45 e0          	movzbl -0x20(%rbp),%eax
   26c53:	01 c2                	add    %eax,%edx
   26c55:	48 8b 05 cc 08 11 00 	mov    0x1108cc(%rip),%rax        # 137528 <RecorderDataPtr>
   26c5c:	83 c2 05             	add    $0x5,%edx
   26c5f:	89 90 c8 47 00 00    	mov    %edx,0x47c8(%rax)
   26c65:	48 8b 05 bc 08 11 00 	mov    0x1108bc(%rip),%rax        # 137528 <RecorderDataPtr>
   26c6c:	8b 80 c8 47 00 00    	mov    0x47c8(%rax),%eax
   26c72:	89 c2                	mov    %eax,%edx
   26c74:	0f b6 45 e0          	movzbl -0x20(%rbp),%eax
   26c78:	83 c0 05             	add    $0x5,%eax
   26c7b:	0f b6 c0             	movzbl %al,%eax
   26c7e:	29 c2                	sub    %eax,%edx
   26c80:	89 d0                	mov    %edx,%eax
   26c82:	66 89 45 fe          	mov    %ax,-0x2(%rbp)
   26c86:	0f b7 45 fe          	movzwl -0x2(%rbp),%eax
   26c8a:	c9                   	leaveq 
   26c8b:	c3                   	retq   

0000000000026c8c <prvTraceGetChecksum>:
   26c8c:	f3 0f 1e fa          	endbr64 
   26c90:	55                   	push   %rbp
   26c91:	48 89 e5             	mov    %rsp,%rbp
   26c94:	48 83 ec 30          	sub    $0x30,%rsp
   26c98:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
   26c9c:	48 89 75 e0          	mov    %rsi,-0x20(%rbp)
   26ca0:	48 89 55 d8          	mov    %rdx,-0x28(%rbp)
   26ca4:	c7 45 f8 01 00 00 00 	movl   $0x1,-0x8(%rbp)
   26cab:	c7 45 fc 00 00 00 00 	movl   $0x0,-0x4(%rbp)
   26cb2:	48 83 7d e8 00       	cmpq   $0x0,-0x18(%rbp)
   26cb7:	75 0e                	jne    26cc7 <prvTraceGetChecksum+0x3b>
   26cb9:	48 8d 3d 38 2c 00 00 	lea    0x2c38(%rip),%rdi        # 298f8 <xInterruptGivePeriod+0x1b08>
   26cc0:	e8 e5 f6 ff ff       	callq  263aa <prvTraceError>
   26cc5:	eb 6f                	jmp    26d36 <prvTraceGetChecksum+0xaa>
   26cc7:	48 83 7d e0 00       	cmpq   $0x0,-0x20(%rbp)
   26ccc:	75 0e                	jne    26cdc <prvTraceGetChecksum+0x50>
   26cce:	48 8d 3d 5b 2c 00 00 	lea    0x2c5b(%rip),%rdi        # 29930 <xInterruptGivePeriod+0x1b40>
   26cd5:	e8 d0 f6 ff ff       	callq  263aa <prvTraceError>
   26cda:	eb 5a                	jmp    26d36 <prvTraceGetChecksum+0xaa>
   26cdc:	48 83 7d d8 00       	cmpq   $0x0,-0x28(%rbp)
   26ce1:	75 0e                	jne    26cf1 <prvTraceGetChecksum+0x65>
   26ce3:	48 8d 3d 76 2c 00 00 	lea    0x2c76(%rip),%rdi        # 29960 <xInterruptGivePeriod+0x1b70>
   26cea:	e8 bb f6 ff ff       	callq  263aa <prvTraceError>
   26cef:	eb 45                	jmp    26d36 <prvTraceGetChecksum+0xaa>
   26cf1:	48 83 7d e8 00       	cmpq   $0x0,-0x18(%rbp)
   26cf6:	74 25                	je     26d1d <prvTraceGetChecksum+0x91>
   26cf8:	eb 0b                	jmp    26d05 <prvTraceGetChecksum+0x79>
   26cfa:	0f b6 45 f7          	movzbl -0x9(%rbp),%eax
   26cfe:	01 45 fc             	add    %eax,-0x4(%rbp)
   26d01:	83 45 f8 01          	addl   $0x1,-0x8(%rbp)
   26d05:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
   26d09:	48 8d 50 01          	lea    0x1(%rax),%rdx
   26d0d:	48 89 55 e8          	mov    %rdx,-0x18(%rbp)
   26d11:	0f b6 00             	movzbl (%rax),%eax
   26d14:	88 45 f7             	mov    %al,-0x9(%rbp)
   26d17:	80 7d f7 00          	cmpb   $0x0,-0x9(%rbp)
   26d1b:	75 dd                	jne    26cfa <prvTraceGetChecksum+0x6e>
   26d1d:	8b 45 fc             	mov    -0x4(%rbp),%eax
   26d20:	83 e0 3f             	and    $0x3f,%eax
   26d23:	89 c2                	mov    %eax,%edx
   26d25:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
   26d29:	88 10                	mov    %dl,(%rax)
   26d2b:	8b 45 f8             	mov    -0x8(%rbp),%eax
   26d2e:	89 c2                	mov    %eax,%edx
   26d30:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
   26d34:	88 10                	mov    %dl,(%rax)
   26d36:	c9                   	leaveq 
   26d37:	c3                   	retq   

0000000000026d38 <prvTracePortGetTimeStamp>:
   26d38:	f3 0f 1e fa          	endbr64 
   26d3c:	55                   	push   %rbp
   26d3d:	48 89 e5             	mov    %rsp,%rbp
   26d40:	48 83 ec 20          	sub    $0x20,%rsp
   26d44:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
   26d48:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%rbp)
   26d4f:	c7 45 f8 00 00 00 00 	movl   $0x0,-0x8(%rbp)
   26d56:	c7 45 fc 00 00 00 00 	movl   $0x0,-0x4(%rbp)
   26d5d:	8b 05 25 03 11 00    	mov    0x110325(%rip),%eax        # 137088 <trace_disable_timestamp>
   26d63:	83 f8 01             	cmp    $0x1,%eax
   26d66:	75 15                	jne    26d7d <prvTracePortGetTimeStamp+0x45>
   26d68:	48 83 7d e8 00       	cmpq   $0x0,-0x18(%rbp)
   26d6d:	74 7f                	je     26dee <prvTracePortGetTimeStamp+0xb6>
   26d6f:	8b 15 c3 07 11 00    	mov    0x1107c3(%rip),%edx        # 137538 <last_timestamp>
   26d75:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
   26d79:	89 10                	mov    %edx,(%rax)
   26d7b:	eb 71                	jmp    26dee <prvTracePortGetTimeStamp+0xb6>
   26d7d:	e8 96 e5 fd ff       	callq  5318 <ulGetRunTimeCounterValue>
   26d82:	89 45 f4             	mov    %eax,-0xc(%rbp)
   26d85:	8b 05 c5 07 11 00    	mov    0x1107c5(%rip),%eax        # 137550 <last_hwtc_count.3104>
   26d8b:	39 45 f4             	cmp    %eax,-0xc(%rbp)
   26d8e:	73 09                	jae    26d99 <prvTracePortGetTimeStamp+0x61>
   26d90:	8b 05 ba 07 11 00    	mov    0x1107ba(%rip),%eax        # 137550 <last_hwtc_count.3104>
   26d96:	89 45 f4             	mov    %eax,-0xc(%rbp)
   26d99:	8b 05 b1 07 11 00    	mov    0x1107b1(%rip),%eax        # 137550 <last_hwtc_count.3104>
   26d9f:	8b 55 f4             	mov    -0xc(%rbp),%edx
   26da2:	29 c2                	sub    %eax,%edx
   26da4:	8b 05 aa 07 11 00    	mov    0x1107aa(%rip),%eax        # 137554 <last_hwtc_rest.3106>
   26daa:	01 d0                	add    %edx,%eax
   26dac:	89 45 f8             	mov    %eax,-0x8(%rbp)
   26daf:	8b 45 f8             	mov    -0x8(%rbp),%eax
   26db2:	89 45 fc             	mov    %eax,-0x4(%rbp)
   26db5:	c7 05 95 07 11 00 00 	movl   $0x0,0x110795(%rip)        # 137554 <last_hwtc_rest.3106>
   26dbc:	00 00 00 
   26dbf:	8b 15 73 07 11 00    	mov    0x110773(%rip),%edx        # 137538 <last_timestamp>
   26dc5:	8b 45 fc             	mov    -0x4(%rbp),%eax
   26dc8:	01 d0                	add    %edx,%eax
   26dca:	89 05 68 07 11 00    	mov    %eax,0x110768(%rip)        # 137538 <last_timestamp>
   26dd0:	48 83 7d e8 00       	cmpq   $0x0,-0x18(%rbp)
   26dd5:	74 0c                	je     26de3 <prvTracePortGetTimeStamp+0xab>
   26dd7:	8b 15 5b 07 11 00    	mov    0x11075b(%rip),%edx        # 137538 <last_timestamp>
   26ddd:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
   26de1:	89 10                	mov    %edx,(%rax)
   26de3:	8b 45 f4             	mov    -0xc(%rbp),%eax
   26de6:	89 05 64 07 11 00    	mov    %eax,0x110764(%rip)        # 137550 <last_hwtc_count.3104>
   26dec:	eb 01                	jmp    26def <prvTracePortGetTimeStamp+0xb7>
   26dee:	90                   	nop
   26def:	c9                   	leaveq 
   26df0:	c3                   	retq   
   26df1:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
   26df8:	00 00 00 
   26dfb:	0f 1f 44 00 00       	nopl   0x0(%rax,%rax,1)

0000000000026e00 <__libc_csu_init>:
   26e00:	f3 0f 1e fa          	endbr64 
   26e04:	41 57                	push   %r15
   26e06:	4c 8d 3d e3 9d 00 00 	lea    0x9de3(%rip),%r15        # 30bf0 <__frame_dummy_init_array_entry>
   26e0d:	41 56                	push   %r14
   26e0f:	49 89 d6             	mov    %rdx,%r14
   26e12:	41 55                	push   %r13
   26e14:	49 89 f5             	mov    %rsi,%r13
   26e17:	41 54                	push   %r12
   26e19:	41 89 fc             	mov    %edi,%r12d
   26e1c:	55                   	push   %rbp
   26e1d:	48 8d 2d d4 9d 00 00 	lea    0x9dd4(%rip),%rbp        # 30bf8 <__do_global_dtors_aux_fini_array_entry>
   26e24:	53                   	push   %rbx
   26e25:	4c 29 fd             	sub    %r15,%rbp
   26e28:	48 83 ec 08          	sub    $0x8,%rsp
   26e2c:	e8 cf b1 fd ff       	callq  2000 <_init>
   26e31:	48 c1 fd 03          	sar    $0x3,%rbp
   26e35:	74 1f                	je     26e56 <__libc_csu_init+0x56>
   26e37:	31 db                	xor    %ebx,%ebx
   26e39:	0f 1f 80 00 00 00 00 	nopl   0x0(%rax)
   26e40:	4c 89 f2             	mov    %r14,%rdx
   26e43:	4c 89 ee             	mov    %r13,%rsi
   26e46:	44 89 e7             	mov    %r12d,%edi
   26e49:	41 ff 14 df          	callq  *(%r15,%rbx,8)
   26e4d:	48 83 c3 01          	add    $0x1,%rbx
   26e51:	48 39 dd             	cmp    %rbx,%rbp
   26e54:	75 ea                	jne    26e40 <__libc_csu_init+0x40>
   26e56:	48 83 c4 08          	add    $0x8,%rsp
   26e5a:	5b                   	pop    %rbx
   26e5b:	5d                   	pop    %rbp
   26e5c:	41 5c                	pop    %r12
   26e5e:	41 5d                	pop    %r13
   26e60:	41 5e                	pop    %r14
   26e62:	41 5f                	pop    %r15
   26e64:	c3                   	retq   
   26e65:	66 66 2e 0f 1f 84 00 	data16 nopw %cs:0x0(%rax,%rax,1)
   26e6c:	00 00 00 00 

0000000000026e70 <__libc_csu_fini>:
   26e70:	f3 0f 1e fa          	endbr64 
   26e74:	c3                   	retq   

Disassembly of section .fini:

0000000000026e78 <_fini>:
   26e78:	f3 0f 1e fa          	endbr64 
   26e7c:	48 83 ec 08          	sub    $0x8,%rsp
   26e80:	48 83 c4 08          	add    $0x8,%rsp
   26e84:	c3                   	retq   
